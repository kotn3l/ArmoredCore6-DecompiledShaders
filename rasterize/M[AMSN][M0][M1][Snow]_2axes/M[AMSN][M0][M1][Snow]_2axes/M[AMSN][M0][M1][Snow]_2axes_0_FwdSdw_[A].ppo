#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1006;
float _3678;
float _3679;
float _3680;
float _3681;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _251 = _246.z;
    float _255 = (_246.x * 2.0) + (-1.0);
    float _257 = (_246.y * 2.0) + (-1.0);
    float _258 = dot(vec2(_255, _257), vec2(_255, _257));
    float _3690 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _264 = sqrt(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))));
    float _267 = fma(_264, _221, fma(_257, _214, _255 * _200));
    float _270 = fma(_264, _222, fma(_257, _215, _255 * _201));
    float _273 = fma(_264, _223, fma(_257, _216, _255 * _202));
    float _277 = inversesqrt(dot(vec3(_267, _270, _273), vec3(_267, _270, _273)));
    float _278 = _277 * _267;
    float _279 = _277 * _270;
    float _280 = _277 * _273;
    float _285 = cbMtdParam._m0[10u].x + dot(vec4(_278, _279, _280, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3701 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _293 = dot(vec4(_278, _279, _280, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _3712 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _295 = (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) + (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)));
    vec4 _313 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _318 = _313.x * cbMtdParam._m0[9u].x;
    float _319 = _313.y * cbMtdParam._m0[9u].y;
    float _320 = _313.z * cbMtdParam._m0[9u].z;
    vec4 _332 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _343 = ((_332.x - _318) * _295) + _318;
    float _344 = ((_332.y - _319) * _295) + _319;
    float _345 = ((_332.z - _320) * _295) + _320;
    vec4 _357 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _359 = _357.x;
    float _361 = _359 - (_359 * _295);
    vec4 _374 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _381 = (_374.x * 2.0) + (-1.0);
    float _382 = (_374.y * 2.0) + (-1.0);
    float _383 = dot(vec2(_381, _382), vec2(_381, _382));
    float _3723 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _391 = ((_374.z - _251) * _295) + _251;
    float _400 = ((sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) - _264) * _295) + _264;
    float _404 = (((_381 - _255) * _295) + _255) + (cbMtdParam._m0[10u].y * _255);
    float _405 = (((_382 - _257) * _295) + _257) + (cbMtdParam._m0[10u].y * _257);
    float _408 = fma(_400, _221, fma(_405, _214, _404 * _200));
    float _411 = fma(_400, _222, fma(_405, _215, _404 * _201));
    float _414 = fma(_400, _223, fma(_405, _216, _404 * _202));
    float _418 = inversesqrt(dot(vec3(_408, _411, _414), vec3(_408, _411, _414)));
    float _419 = _418 * _408;
    float _420 = _418 * _411;
    float _421 = _418 * _414;
    float _3734 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _422 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3756 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3767 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3778 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _426 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _442 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _483 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _493 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _483);
    float _494 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _483);
    float _495 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _483);
    float _499 = inversesqrt(dot(vec3(_493, _494, _495), vec3(_493, _494, _495)));
    float _500 = _493 * _499;
    float _501 = _494 * _499;
    float _502 = _495 * _499;
    vec4 _507 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _509 = _507.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _685 = sqrt(((_493 * _493) + (_494 * _494)) + (_495 * _495));
        float _691 = (cbMatDynParam._m0[5u].x * _685) + cbMatDynParam._m0[5u].y;
        float _3789 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _696 = (cbMatDynParam._m0[5u].z * _685) + cbMatDynParam._m0[5u].w;
        float _3800 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) - _692)) + _692) < ((_509 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _521 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _522 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _542 = fma(_421, cbSceneParam._m0[5u].z, fma(_420, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _419));
    float _545 = fma(_421, cbSceneParam._m0[6u].z, fma(_420, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _419));
    float _548 = fma(_421, cbSceneParam._m0[7u].z, fma(_420, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _419));
    uint _561 = uint(roundEven(NORMAL.w)) * 13u;
    uint _563 = _561 + 9u;
    uint _564 = _563 + uint(cbMatDynParam._m0[0u].w);
    float _570 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_564].x;
    float _571 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_564].y;
    float _572 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_564].z;
    float _3811 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _575 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _576 = 1.0 - _426;
    float _577 = _573 * _576;
    float _578 = _574 * _576;
    float _579 = _575 * _576;
    float _584 = (_573 + (-0.039999999105930328369140625)) * _426;
    float _585 = (_574 + (-0.039999999105930328369140625)) * _426;
    float _586 = (_575 + (-0.039999999105930328369140625)) * _426;
    float _587 = _584 + 0.039999999105930328369140625;
    float _589 = _585 + 0.039999999105930328369140625;
    float _590 = _586 + 0.039999999105930328369140625;
    vec4 _599 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _521, cbSceneParam._m0[86u].y * _522));
    float _602 = _599.x * TEXCOORD.z;
    float _603 = dot(vec3(_419, _420, _421), vec3(_500, _501, _502));
    float _606 = _603 * 2.0;
    float _610 = (_606 * _419) - _500;
    float _611 = (_606 * _420) - _501;
    float _612 = (_606 * _421) - _502;
    float _616 = abs(dot(vec3(_500, _501, _502), vec3(_419, _420, _421)));
    float _3844 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _618 = sqrt(_422);
    float _631 = exp2((_618 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_618 * 3.0));
    float _637 = (1.0 - _631) * ((_618 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _638 = _631 * _618;
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1005;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _730 = fma(_674, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666));
        float _734 = fma(_674, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666));
        float _738 = fma(_674, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666));
        float _763 = _666 + _419;
        float _764 = _670 + _420;
        float _765 = _674 + _421;
        float _775 = fma(_765, cbModelParam._m0[26u].z, fma(_764, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763)) - _730;
        float _776 = fma(_765, cbModelParam._m0[27u].z, fma(_764, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763)) - _734;
        float _777 = fma(_765, cbModelParam._m0[28u].z, fma(_764, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763)) - _738;
        float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
        float _794 = ((_781 * _775) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_730 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_781 * _776) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_734 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_781 * _777) / cbModelParam._m0[34u].z) + ((((((_738 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        float _833 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_799.x + (-0.5));
        float _835 = _833 * (_799.y + (-0.5));
        float _836 = _833 * (_799.z + (-0.5));
        float _843 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_806.x + (-0.5));
        float _845 = _843 * (_806.y + (-0.5));
        float _846 = _843 * (_806.z + (-0.5));
        float _853 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_813.x + (-0.5));
        float _855 = _853 * (_813.y + (-0.5));
        float _856 = _853 * (_813.z + (-0.5));
        float _863 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_820.x + (-0.5));
        float _865 = _863 * (_820.y + (-0.5));
        float _866 = _863 * (_820.z + (-0.5));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = _834 * 0.5;
        float _871 = _844 * 0.5;
        float _872 = _854 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _887 = (dot(vec3(_419, _420, _421), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _897 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3892 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_899 + 1.0))) + _904) * _867;
        float _914 = _835 * 0.5;
        float _915 = _845 * 0.5;
        float _916 = _855 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _930 = (dot(vec3(_419, _420, _421), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _939 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3925 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_941 + 1.0))) + _946) * _868;
        float _956 = _836 * 0.5;
        float _957 = _846 * 0.5;
        float _958 = _856 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_419, _420, _421), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3958 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_983 + 1.0))) + _988) * _869;
        _1005 = _836;
        _1007 = _835;
        _1008 = _834;
        _1009 = _846;
        _1010 = _845;
        _1011 = _844;
        _1012 = _856;
        _1013 = _855;
        _1014 = _854;
        _1015 = _869;
        _1016 = _868;
        _1017 = _867;
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
    }
    else
    {
        _1005 = _1006;
        _1007 = _1006;
        _1008 = _1006;
        _1009 = _1006;
        _1010 = _1006;
        _1011 = _1006;
        _1012 = _1006;
        _1013 = _1006;
        _1014 = _1006;
        _1015 = _1006;
        _1016 = _1006;
        _1017 = _1006;
        _1018 = 0.0;
        _1019 = 0.0;
        _1020 = 0.0;
    }
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1049 = fma(_674, cbModelParam._m0[30u].z, fma(_670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _666));
        float _1053 = fma(_674, cbModelParam._m0[31u].z, fma(_670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _666));
        float _1057 = fma(_674, cbModelParam._m0[32u].z, fma(_670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _666));
        float _1080 = _666 + _419;
        float _1081 = _670 + _420;
        float _1082 = _674 + _421;
        float _1092 = fma(_1082, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1080)) - _1049;
        float _1093 = fma(_1082, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1080)) - _1053;
        float _1094 = fma(_1082, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1080)) - _1057;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1049 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1053 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[35u].z) + ((((((_1057 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1148 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1115.x + (-0.5));
        float _1150 = _1148 * (_1115.y + (-0.5));
        float _1151 = _1148 * (_1115.z + (-0.5));
        float _1158 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1122.x + (-0.5));
        float _1160 = _1158 * (_1122.y + (-0.5));
        float _1161 = _1158 * (_1122.z + (-0.5));
        float _1168 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1129.x + (-0.5));
        float _1170 = _1168 * (_1129.y + (-0.5));
        float _1171 = _1168 * (_1129.z + (-0.5));
        float _1178 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1136.x + (-0.5));
        float _1180 = _1178 * (_1136.y + (-0.5));
        float _1181 = _1178 * (_1136.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_419, _420, _421), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4021 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1212 + 1.0))) + _1217) * _1182;
        float _1227 = _1150 * 0.5;
        float _1228 = _1160 * 0.5;
        float _1229 = _1170 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_419, _420, _421), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4054 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1254 + 1.0))) + _1259) * _1183;
        float _1269 = _1151 * 0.5;
        float _1270 = _1161 * 0.5;
        float _1271 = _1171 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_419, _420, _421), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4087 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1296 + 1.0))) + _1301) * _1184;
        _1318 = _1151;
        _1319 = _1150;
        _1320 = _1149;
        _1321 = _1161;
        _1322 = _1160;
        _1323 = _1159;
        _1324 = _1171;
        _1325 = _1170;
        _1326 = _1169;
        _1327 = _1184;
        _1328 = _1183;
        _1329 = _1182;
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1006;
        _1319 = _1006;
        _1320 = _1006;
        _1321 = _1006;
        _1322 = _1006;
        _1323 = _1006;
        _1324 = _1006;
        _1325 = _1006;
        _1326 = _1006;
        _1327 = _1006;
        _1328 = _1006;
        _1329 = _1006;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1018)) + _1018;
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1019)) + _1019;
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1020)) + _1020;
    float _1365 = fma(_1344, cbSceneParam._m0[89u].z, fma(_1343, cbSceneParam._m0[89u].y, _1342 * cbSceneParam._m0[89u].x));
    float _1368 = fma(_1344, cbSceneParam._m0[90u].z, fma(_1343, cbSceneParam._m0[90u].y, _1342 * cbSceneParam._m0[90u].x));
    float _1371 = fma(_1344, cbSceneParam._m0[91u].z, fma(_1343, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1342));
    float _1386 = _610 * 0.5;
    float _1387 = _611 * 0.5;
    float _1388 = _612 * 0.5;
    float _1389 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1392 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1395 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1429;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1402 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1005, _1009, _1012, _1015));
        float _1406 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1007, _1010, _1013, _1016));
        float _1410 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1008, _1011, _1014, _1017));
        float _1417 = dot(vec4(cbModelParam._m0[39u]), vec4(_1386, _1387, _1388, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1417) ? 0.0 : (isnan(0.0) ? _1417 : max(0.0, _1417))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1440;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1431 = dot(vec4(cbModelParam._m0[40u]), vec4(_1386, _1387, _1388, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1431) ? 0.0 : (isnan(0.0) ? _1431 : max(0.0, _1431))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1444 = (_1440 * cbModelParam._m0[1u].x) + (_1429 * (1.0 - cbModelParam._m0[1u].x));
    float _1454 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _422);
    float _1455 = isnan(_1454) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1454 : min(cbModelParam._m0[25u].z, _1454));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1504 = fma(_674, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _666)) + cbModelParam._m0[13u].w;
        float _1508 = fma(_674, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _666)) + cbModelParam._m0[14u].w;
        float _1512 = fma(_674, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _666)) + cbModelParam._m0[15u].w;
        float _1515 = fma(_612, cbModelParam._m0[13u].z, fma(_611, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _610));
        float _1518 = fma(_612, cbModelParam._m0[14u].z, fma(_611, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _610));
        float _1521 = fma(_612, cbModelParam._m0[15u].z, fma(_611, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _610));
        float _1549;
        if (_1515 > 0.0)
        {
            _1549 = abs((1.0 - _1504) / _1515);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1504 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1549 = frontier_phi_19_17_ladder;
        }
        float _1724;
        if (_1518 > 0.0)
        {
            _1724 = abs((1.0 - _1508) / _1518);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1508 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1724 = frontier_phi_28_24_ladder;
        }
        float _2019;
        if (_1521 > 0.0)
        {
            _2019 = abs((1.0 - _1512) / _1521);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1512 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2019 = frontier_phi_40_35_ladder;
        }
        float _2021 = isnan(_1724) ? _1549 : (isnan(_1549) ? _1724 : min(_1549, _1724));
        float _2022 = isnan(_2019) ? _2021 : (isnan(_2021) ? _2019 : min(_2021, _2019));
        float _2026 = (_2022 * _1515) + _1504;
        float _2027 = (_2022 * _1518) + _1508;
        float _2028 = (_2022 * _1521) + _1512;
        float _2029 = _2022 * 9.9999997473787516355514526367188e-05;
        float _2031 = (-1.0) - _2029;
        float _2033 = _2029 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2028 > _2033) || ((_2028 < _2031) || ((_2027 > _2033) || ((_2027 < _2031) || ((_2026 < _2031) || (_2026 > _2033))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2173 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2028, cbModelParam._m0[9u].z, fma(_2027, cbModelParam._m0[9u].y, _2026 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2028, cbModelParam._m0[10u].z, fma(_2027, cbModelParam._m0[10u].y, _2026 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2028, cbModelParam._m0[11u].z, fma(_2027, cbModelParam._m0[11u].y, _2026 * cbModelParam._m0[11u].x))), _1455);
            frontier_phi_18_40_ladder = _2173.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2173.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2173.x * cbModelParam._m0[1u].y;
        }
        _1537 = frontier_phi_18_40_ladder_2;
        _1539 = frontier_phi_18_40_ladder_1;
        _1541 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_610, _611, _612), _1455);
        _1537 = _1525.x * cbModelParam._m0[1u].y;
        _1539 = _1525.y * cbModelParam._m0[1u].y;
        _1541 = _1525.z * cbModelParam._m0[1u].y;
    }
    float _1545 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _422);
    float _1546 = isnan(_1545) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1545 : min(cbModelParam._m0[25u].w, _1545));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1603 = fma(_674, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _666)) + cbModelParam._m0[21u].w;
        float _1607 = fma(_674, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _666)) + cbModelParam._m0[22u].w;
        float _1611 = fma(_674, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _666)) + cbModelParam._m0[23u].w;
        float _1614 = fma(_612, cbModelParam._m0[21u].z, fma(_611, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _610));
        float _1617 = fma(_612, cbModelParam._m0[22u].z, fma(_611, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _610));
        float _1620 = fma(_612, cbModelParam._m0[23u].z, fma(_611, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _610));
        float _1729;
        if (_1614 > 0.0)
        {
            _1729 = abs((1.0 - _1603) / _1614);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1603 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1729 = frontier_phi_30_26_ladder;
        }
        float _2046;
        if (_1617 > 0.0)
        {
            _2046 = abs((1.0 - _1607) / _1617);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1607 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2046 = frontier_phi_42_37_ladder;
        }
        float _2384;
        if (_1620 > 0.0)
        {
            _2384 = abs((1.0 - _1611) / _1620);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1611 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2384 = frontier_phi_52_49_ladder;
        }
        float _2386 = isnan(_2046) ? _1729 : (isnan(_1729) ? _2046 : min(_1729, _2046));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1614) + _1603;
        float _2392 = (_2387 * _1617) + _1607;
        float _2393 = (_2387 * _1620) + _1611;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2394;
        float _2397 = _2394 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2393 > _2397) || ((_2393 < _2395) || ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 < _2395) || (_2391 > _2397))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2393, cbModelParam._m0[17u].z, fma(_2392, cbModelParam._m0[17u].y, _2391 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2393, cbModelParam._m0[18u].z, fma(_2392, cbModelParam._m0[18u].y, _2391 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2393, cbModelParam._m0[19u].z, fma(_2392, cbModelParam._m0[19u].y, _2391 * cbModelParam._m0[19u].x))), _1546);
            frontier_phi_27_52_ladder = _2515.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2515.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2515.x * cbModelParam._m0[1u].z;
        }
        _1639 = frontier_phi_27_52_ladder_2;
        _1641 = frontier_phi_27_52_ladder_1;
        _1643 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1623 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_610, _611, _612), _1546);
        _1639 = _1623.x * cbModelParam._m0[1u].z;
        _1641 = _1623.y * cbModelParam._m0[1u].z;
        _1643 = _1623.z * cbModelParam._m0[1u].z;
    }
    float _1656 = (((_637 * _587) + _638) * _602) * ((cbModelParam._m0[1u].w * (_1639 - _1537)) + _1537);
    float _1658 = (((_637 * _589) + _638) * _602) * ((cbModelParam._m0[1u].w * (_1641 - _1539)) + _1539);
    float _1660 = (((_637 * _590) + _638) * _602) * ((cbModelParam._m0[1u].w * (_1643 - _1541)) + _1541);
    float _1663 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1658, cbSceneParam._m0[89u].y, _1656 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1658, cbSceneParam._m0[90u].y, _1656 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1658, cbSceneParam._m0[91u].y, _1656 * cbSceneParam._m0[91u].x));
    float _1703 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1707 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1711 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1715 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1716 = _1703 / _1715;
    float _1717 = _1707 / _1715;
    float _1718 = _1711 / _1715;
    float _1865;
    float _1866;
    float _1867;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1745 = ((uint(_1718 > cbSceneParam._m0[59u].y) + uint(_1718 > cbSceneParam._m0[59u].x)) + uint(_1718 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1746 = _1745 + 43u;
        uint _1754 = _1745 + 44u;
        uint _1762 = _1745 + 45u;
        uint _1770 = _1745 + 46u;
        float _1781 = fma(_1715, cbSceneParam._m0[_1746].w, fma(_1711, cbSceneParam._m0[_1746].z, fma(_1707, cbSceneParam._m0[_1746].y, _1703 * cbSceneParam._m0[_1746].x)));
        float _1785 = fma(_1715, cbSceneParam._m0[_1754].w, fma(_1711, cbSceneParam._m0[_1754].z, fma(_1707, cbSceneParam._m0[_1754].y, _1703 * cbSceneParam._m0[_1754].x)));
        float _1793 = fma(_1715, cbSceneParam._m0[_1770].w, fma(_1711, cbSceneParam._m0[_1770].z, fma(_1707, cbSceneParam._m0[_1770].y, _1703 * cbSceneParam._m0[_1770].x)));
        float _1798 = cbSceneParam._m0[33u].z * _1793;
        float _1800 = cbSceneParam._m0[33u].w * _1793;
        float _1803 = fma(_1715, cbSceneParam._m0[_1762].w, fma(_1711, cbSceneParam._m0[_1762].z, fma(_1707, cbSceneParam._m0[_1762].y, _1703 * cbSceneParam._m0[_1762].x))) / _1793;
        float _1851 = (cbSceneParam._m0[33u].x - sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718))) * cbSceneParam._m0[33u].y;
        float _4213 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1858 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1798 + _1781) / _1793, (_1800 + _1785) / _1793), _1803), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1800 + _1781) / _1793, (_1785 - _1798) / _1793), _1803), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1781 - _1798) / _1793, (_1785 - _1800) / _1793), _1803), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1781 - _1800) / _1793, (_1798 + _1785) / _1793), _1803), 0.0)).x), vec4(0.25)));
        _1865 = 1.0 - (_1858 * cbSceneParam._m0[34u].x);
        _1866 = 1.0 - (_1858 * cbSceneParam._m0[34u].y);
        _1867 = 1.0 - (_1858 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1865 = 1.0;
        _1866 = 1.0;
        _1867 = 1.0;
    }
    float _1931;
    float _1933;
    float _1935;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1919 = fma(_1715, cbSceneParam._m0[63u].w, fma(_1711, cbSceneParam._m0[63u].z, fma(_1707, cbSceneParam._m0[63u].y, _1703 * cbSceneParam._m0[63u].x)));
        float _1920 = fma(_1715, cbSceneParam._m0[60u].w, fma(_1711, cbSceneParam._m0[60u].z, fma(_1707, cbSceneParam._m0[60u].y, _1703 * cbSceneParam._m0[60u].x))) / _1919;
        float _1921 = fma(_1715, cbSceneParam._m0[61u].w, fma(_1711, cbSceneParam._m0[61u].z, fma(_1707, cbSceneParam._m0[61u].y, _1703 * cbSceneParam._m0[61u].x))) / _1919;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1920 >= cbSceneParam._m0[64u].x) && (_1921 >= cbSceneParam._m0[64u].y)) && (_1920 <= cbSceneParam._m0[64u].z)) && (_1921 <= cbSceneParam._m0[64u].w))
        {
            float _2059 = fma(_1715, cbSceneParam._m0[62u].w, fma(_1711, cbSceneParam._m0[62u].z, fma(_1707, cbSceneParam._m0[62u].y, _1703 * cbSceneParam._m0[62u].x))) / _1919;
            float _2063 = isnan(cbSceneParam._m0[41u].w) ? _2059 : (isnan(_2059) ? cbSceneParam._m0[41u].w : max(_2059, cbSceneParam._m0[41u].w));
            float _2106 = (cbSceneParam._m0[33u].x - sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718))) * cbSceneParam._m0[33u].y;
            float _4229 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
            float _2113 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1920, cbSceneParam._m0[33u].w + _1921), _2063), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1920, _1921 - cbSceneParam._m0[33u].z), _2063), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1920 - cbSceneParam._m0[33u].z, _1921 - cbSceneParam._m0[33u].w), _2063), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1920 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1921), _2063), 0.0)).x), vec4(0.25)));
            float _2117 = 1.0 - (_2113 * cbSceneParam._m0[34u].x);
            float _2118 = 1.0 - (_2113 * cbSceneParam._m0[34u].y);
            float _2119 = 1.0 - (_2113 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2118) ? _1866 : (isnan(_1866) ? _2118 : min(_1866, _2118));
            frontier_phi_39_38_ladder_1 = isnan(_2117) ? _1865 : (isnan(_1865) ? _2117 : min(_1865, _2117));
            frontier_phi_39_38_ladder_2 = isnan(_2119) ? _1867 : (isnan(_1867) ? _2119 : min(_1867, _2119));
        }
        else
        {
            frontier_phi_39_38_ladder = _1866;
            frontier_phi_39_38_ladder_1 = _1865;
            frontier_phi_39_38_ladder_2 = _1867;
        }
        _1931 = frontier_phi_39_38_ladder_1;
        _1933 = frontier_phi_39_38_ladder;
        _1935 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1931 = _1865;
        _1933 = _1866;
        _1935 = _1867;
    }
    uvec4 _1940 = floatBitsToUint(cbInstanceData._m0[_561 + 5u]);
    uint _1942 = _1940.x * 14u;
    uint _1943 = _1942 + 13u;
    float _1950 = _602 + (-1.0);
    float _1955 = (cbLight._m0[_1943].x * _1950) + 1.0;
    float _1956 = (cbLight._m0[_1943].y * _1950) + 1.0;
    float _1957 = (cbLight._m0[_1943].z * _1950) + 1.0;
    float _1958 = (cbLight._m0[_1943].w * _1950) + 1.0;
    uint _1959 = _1942 + 5u;
    float _1965 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
    uint _1969 = _1942 + 4u;
    float _1978 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
    uint _1982 = _1942 | 1u;
    float _1993 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_419, _420, _421));
    float _1996 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_419, _420, _421));
    float _4265 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _4276 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2001 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * 0.3183098733425140380859375;
    float _2003 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * 0.3183098733425140380859375;
    float _2010 = ((cbLight._m0[_1959].x * _1965) * _2003) + (((cbLight._m0[_1969].x * _1931) * _1978) * _2001);
    float _2011 = ((_1965 * cbLight._m0[_1959].y) * _2003) + (((cbLight._m0[_1969].y * _1933) * _1978) * _2001);
    float _2012 = ((_1965 * cbLight._m0[_1959].z) * _2003) + (((cbLight._m0[_1969].z * _1935) * _1978) * _2001);
    uvec4 _2016 = floatBitsToUint(cbLight._m0[_1942 + 12u]);
    bool _2018 = _2016.x == 0u;
    float _2120;
    float _2122;
    float _2124;
    if (_2018)
    {
        _2120 = _2010;
        _2122 = _2011;
        _2124 = _2012;
    }
    else
    {
        uint _2128 = _1942 + 6u;
        float _2144 = (dot(vec3(cbLight._m0[_1942 + 2u].xyz), vec3(_419, _420, _421)) * 0.5) + 0.5;
        float _2145 = _2144 * _2144;
        float _4287 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2147 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2120 = (((cbLight._m0[_2128].x * 0.3183098733425140380859375) * _2146) * _2147) + _2010;
        _2122 = (((cbLight._m0[_2128].y * 0.3183098733425140380859375) * _2146) * _2147) + _2011;
        _2124 = (((cbLight._m0[_2128].z * 0.3183098733425140380859375) * _2146) * _2147) + _2012;
    }
    bool _2127 = _2016.y == 0u;
    float _2182;
    float _2184;
    float _2186;
    if (_2127)
    {
        _2182 = _2120;
        _2184 = _2122;
        _2186 = _2124;
    }
    else
    {
        uint _2355 = _1942 + 7u;
        float _2371 = (dot(vec3(cbLight._m0[_1942 + 3u].xyz), vec3(_419, _420, _421)) * 0.5) + 0.5;
        float _2372 = _2371 * _2371;
        float _4303 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2373 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2374 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2182 = (((cbLight._m0[_2355].x * 0.3183098733425140380859375) * _2373) * _2374) + _2120;
        _2184 = (((cbLight._m0[_2355].y * 0.3183098733425140380859375) * _2373) * _2374) + _2122;
        _2186 = (((cbLight._m0[_2355].z * 0.3183098733425140380859375) * _2373) * _2374) + _2124;
    }
    uint _2189 = _1942 + 8u;
    float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _422) * 0.949999988079071044921875);
    float _2203 = _2202 * _2202;
    float _2204 = cbLight._m0[_1942].x + _500;
    float _2205 = cbLight._m0[_1942].y + _501;
    float _2206 = cbLight._m0[_1942].z + _502;
    float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
    float _2211 = _2210 * _2204;
    float _2212 = _2210 * _2205;
    float _2213 = _2210 * _2206;
    float _2214 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_1942].xyz));
    float _4319 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _4330 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _2218 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2219 = dot(vec3(_419, _420, _421), vec3(_2211, _2212, _2213));
    float _4341 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2223 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2211, _2212, _2213));
    float _4352 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2227 = _2203 * _2203;
    float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
    float _2239 = exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0);
    float _2240 = 0.959999978542327880859375 - _584;
    float _2242 = 0.959999978542327880859375 - _585;
    float _2243 = 0.959999978542327880859375 - _586;
    float _2250 = 1.0 - _2203;
    float _2261 = (0.5 / (((_2218 * ((_2217 * _2250) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2250) + _2203) * _2217))) * _2217;
    float _4363 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2263 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
    uint _2277 = _1942 + 9u;
    float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _422) * 0.949999988079071044921875);
    float _2289 = _2288 * _2288;
    float _2290 = cbLight._m0[_1982].x + _500;
    float _2291 = cbLight._m0[_1982].y + _501;
    float _2292 = cbLight._m0[_1982].z + _502;
    float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
    float _2297 = _2296 * _2290;
    float _2298 = _2296 * _2291;
    float _2299 = _2296 * _2292;
    float _2300 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_1982].xyz));
    float _4374 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2304 = dot(vec3(_419, _420, _421), vec3(_2297, _2298, _2299));
    float _4385 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2297, _2298, _2299));
    float _4396 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2289 * _2289;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2323 = exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0);
    float _2330 = 1.0 - _2289;
    float _2340 = (0.5 / (((_2218 * ((_2303 * _2330) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2330) + _2289) * _2303))) * _2303;
    float _4407 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2342 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    float _2352 = (((((_2323 * _2240) + _587) * cbLight._m0[_2277].x) * _2342) * _1965) + ((((cbLight._m0[_2189].x * _1931) * ((_2239 * _2240) + _587)) * _2263) * _1978);
    float _2353 = (((((_2323 * _2242) + _589) * cbLight._m0[_2277].y) * _2342) * _1965) + ((((cbLight._m0[_2189].y * _1933) * ((_2239 * _2242) + _589)) * _2263) * _1978);
    float _2354 = (((((_2323 * _2243) + _590) * cbLight._m0[_2277].z) * _2342) * _1965) + ((((cbLight._m0[_2189].z * _1935) * ((_2239 * _2243) + _590)) * _2263) * _1978);
    float _2410;
    float _2412;
    float _2414;
    if (_2018)
    {
        _2410 = _2352;
        _2412 = _2353;
        _2414 = _2354;
    }
    else
    {
        uint _2416 = _1942 + 2u;
        uint _2420 = _1942 + 10u;
        float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _422) * 0.949999988079071044921875);
        float _2435 = _2434 * _2434;
        float _2436 = cbLight._m0[_2416].x + _500;
        float _2437 = cbLight._m0[_2416].y + _501;
        float _2438 = cbLight._m0[_2416].z + _502;
        float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
        float _2443 = _2442 * _2436;
        float _2444 = _2442 * _2437;
        float _2445 = _2442 * _2438;
        float _2446 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_2416].xyz));
        float _4418 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2450 = dot(vec3(_419, _420, _421), vec3(_2443, _2444, _2445));
        float _4429 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2454 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2443, _2444, _2445));
        float _4440 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2458 = _2435 * _2435;
        float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
        float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0);
        float _2476 = 1.0 - _2435;
        float _2486 = (0.5 / (((_2218 * ((_2449 * _2476) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2476) + _2435) * _2449))) * _2449;
        float _4451 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2488 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
        float _2489 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2410 = (((((_2469 * _2240) + _587) * cbLight._m0[_2420].x) * _2488) * _2489) + _2352;
        _2412 = (((((_2469 * _2242) + _589) * cbLight._m0[_2420].y) * _2488) * _2489) + _2353;
        _2414 = (((((_2469 * _2243) + _590) * cbLight._m0[_2420].z) * _2488) * _2489) + _2354;
    }
    float _2520;
    float _2522;
    float _2524;
    if (_2127)
    {
        _2520 = _2410;
        _2522 = _2412;
        _2524 = _2414;
    }
    else
    {
        uint _2531 = _1942 + 3u;
        uint _2535 = _1942 + 11u;
        float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2531].w)) * _422) * 0.949999988079071044921875);
        float _2550 = _2549 * _2549;
        float _2551 = cbLight._m0[_2531].x + _500;
        float _2552 = cbLight._m0[_2531].y + _501;
        float _2553 = cbLight._m0[_2531].z + _502;
        float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
        float _2558 = _2557 * _2551;
        float _2559 = _2557 * _2552;
        float _2560 = _2557 * _2553;
        float _2561 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_2531].xyz));
        float _4467 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2565 = dot(vec3(_419, _420, _421), vec3(_2558, _2559, _2560));
        float _4478 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2569 = dot(vec3(cbLight._m0[_2531].xyz), vec3(_2558, _2559, _2560));
        float _4489 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2573 = _2550 * _2550;
        float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
        float _2584 = exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0);
        float _2591 = 1.0 - _2550;
        float _2601 = (0.5 / (((_2218 * ((_2564 * _2591) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2591) + _2550) * _2564))) * _2564;
        float _4500 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2603 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
        float _2604 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2520 = (((((_2584 * _2240) + _587) * cbLight._m0[_2535].x) * _2603) * _2604) + _2410;
        _2522 = (((((_2584 * _2242) + _589) * cbLight._m0[_2535].y) * _2603) * _2604) + _2412;
        _2524 = (((((_2584 * _2243) + _590) * cbLight._m0[_2535].z) * _2603) * _2604) + _2414;
    }
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    if (_1940.y == 0u)
    {
        uvec4 _2625 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2626 = _2625.x;
        uint _2637 = uint((float(_2625.y) * floor(float(uint(cbSceneParam._m0[85u].y * _522) / _2626))) + floor(float(uint(cbSceneParam._m0[85u].x * _521) / _2626)));
        float _2647 = (log2(_1718 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2648 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        uint _2651 = uint(isnan(14.0) ? _2648 : (isnan(_2648) ? 14.0 : min(_2648, 14.0)));
        uvec4 _2656 = texelFetch(g_lightClusterGridBuffer, int(((_2651 << 2u) + (_2637 << 6u)) >> 2u));
        uint _2657 = _2656.x;
        uint _2658 = _2625.z;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        if (((((1u << ((_2658 >> 4u) & 15u)) + 4294967295u) & _2657) == 0u) || ((_2658 & 240u) == 0u))
        {
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
        }
        else
        {
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2747;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            uint _2894 = 0u;
            uint _2903;
            bool _2904;
            for (;;)
            {
                _2903 = texelFetch(g_lightClassification, int((((_2651 << 5u) + (_2637 << 9u)) + (_2894 << 2u)) >> 2u)).x;
                _2904 = _2903 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2904)
                {
                    frontier_phi_73_pred = _2893;
                    frontier_phi_73_pred_1 = _2892;
                    frontier_phi_73_pred_2 = _2891;
                    frontier_phi_73_pred_3 = _2890;
                    frontier_phi_73_pred_4 = _2889;
                    frontier_phi_73_pred_5 = _2888;
                }
                else
                {
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    uint _3039;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2893;
                    _3039 = _2903;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    for (;;)
                    {
                        uint _3043 = uint(findLSB(_3039)) + (_2894 << 5u);
                        uint _3040 = (_3039 + 4294967295u) & _3039;
                        uint _3045 = _3043 * 48u;
                        vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 3u)).x));
                        uint _3065 = (_3043 * 48u) + 4u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3084 = (_3043 * 48u) + 8u;
                        vec3 _3095 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x));
                        float _3099 = _3059.x - _1716;
                        float _3100 = _3059.y - _1717;
                        float _3101 = _3059.z - _1718;
                        float _3102 = dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101));
                        float _3105 = inversesqrt(_3102);
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3109 = dot(vec3(_542, _545, _548), vec3(_3106, _3107, _3108));
                        float _3114 = 1.0 - (_3102 * _3059.w);
                        float _4526 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3115 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3116 = sqrt(_3102) * _3078.w;
                        float _3119 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                        float _3120 = _3119 * _3119;
                        float _3123 = ((1.0 - _3120) * _3109) + _3120;
                        float _3126 = _3116 * _3116;
                        float _3130 = ((isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))) * _3115) / ((_3126 * 0.699999988079071044921875) + 1.0);
                        float _3134 = (-0.0) - _1716;
                        float _3135 = (-0.0) - _1717;
                        float _3136 = (-0.0) - _1718;
                        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                        float _3141 = _3140 * _3134;
                        float _3142 = _3140 * _3135;
                        float _3143 = _3140 * _3136;
                        float _3150 = exp2(log2(1.0 / ((_3126 * 3.5) + 5.0)) * 0.25);
                        float _3151 = 1.0 - _618;
                        float _3158 = sqrt(1.0 - ((1.0 - (_3151 * _3151)) * (1.0 - (_3150 * _3150))));
                        float _3159 = _3158 * _3158;
                        float _3160 = _3159 * _3159;
                        float _3161 = _3141 + _3106;
                        float _3162 = _3142 + _3107;
                        float _3163 = _3143 + _3108;
                        float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                        float _3171 = dot(vec3(_542, _545, _548), vec3(_3141, _3142, _3143));
                        float _4542 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3174 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3175 = dot(vec3(_542, _545, _548), vec3(_3167 * _3161, _3167 * _3162, _3167 * _3163));
                        float _4553 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3178 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                        float _3182 = ((_3178 * _3178) * (_3160 + (-1.0))) + 1.0;
                        float _3183 = _3119 * _3159;
                        float _3184 = _3183 * _3183;
                        float _3187 = ((1.0 - _3184) * _3109) + _3184;
                        float _4564 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3188 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3189 = 1.0 - _3159;
                        float _3199 = (0.5 / (((_3188 * ((_3174 * _3189) + _3159)) + 9.9999999392252902907785028219223e-09) + (((_3188 * _3189) + _3159) * _3174))) * _3188;
                        float _4575 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3210 = (((_3160 * 3.1415927410125732421875) * (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) / ((_3182 * _3182) * ((_3126 * 2.1991131305694580078125) + 3.141590118408203125))) * _3115;
                        _2963 = (_3130 * _3078.x) + _3036;
                        _2964 = (_3130 * _3078.y) + _3037;
                        _2965 = (_3130 * _3078.z) + _3038;
                        _2960 = (_3210 * _3095.x) + _3033;
                        _2961 = (_3210 * _3095.y) + _3034;
                        _2962 = (_3210 * _3095.z) + _3035;
                        if (_3040 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _2965;
                            _3039 = _3040;
                        }
                    }
                    frontier_phi_73_pred = _2965;
                    frontier_phi_73_pred_1 = _2964;
                    frontier_phi_73_pred_2 = _2963;
                    frontier_phi_73_pred_3 = _2962;
                    frontier_phi_73_pred_4 = _2961;
                    frontier_phi_73_pred_5 = _2960;
                }
                _2747 = frontier_phi_73_pred;
                _2745 = frontier_phi_73_pred_1;
                _2743 = frontier_phi_73_pred_2;
                _2741 = frontier_phi_73_pred_3;
                _2739 = frontier_phi_73_pred_4;
                _2737 = frontier_phi_73_pred_5;
                uint _2895 = _2894 + 1u;
                if (_2895 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2888 = _2737;
                    _2889 = _2739;
                    _2890 = _2741;
                    _2891 = _2743;
                    _2892 = _2745;
                    _2893 = _2747;
                    _2894 = _2895;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
        }
        uvec4 _2750 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2751 = _2750.z;
        uint _2753 = (_2751 >> 8u) & 15u;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((4294967295u << _2753) & _2657) == 0u)
        {
            _2856 = _2736;
            _2858 = _2738;
            _2860 = _2740;
            _2862 = _2742;
            _2864 = _2744;
            _2866 = _2746;
        }
        else
        {
            float _2881 = inversesqrt(dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718)));
            float _2882 = _2881 * _1716;
            float _2883 = _2881 * _1717;
            float _2884 = _2881 * _1718;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2753 < ((_2751 >> 12u) & 15u))
            {
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _3016 = _2736;
                float _3017 = _2738;
                float _3018 = _2740;
                float _3019 = _2742;
                float _3020 = _2744;
                float _3021 = _2746;
                uint _3022 = _2753;
                uint _3031;
                bool _3032;
                for (;;)
                {
                    _3031 = texelFetch(g_lightClassification, int((((_2651 << 5u) + (_2637 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                    _3032 = _3031 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3032)
                    {
                        frontier_phi_84_pred = _3020;
                        frontier_phi_84_pred_1 = _3019;
                        frontier_phi_84_pred_2 = _3018;
                        frontier_phi_84_pred_3 = _3017;
                        frontier_phi_84_pred_4 = _3016;
                        frontier_phi_84_pred_5 = _3021;
                    }
                    else
                    {
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3237 = _3016;
                        float _3238 = _3017;
                        float _3239 = _3018;
                        float _3240 = _3019;
                        float _3241 = _3020;
                        float _3242 = _3021;
                        uint _3243 = _3031;
                        uint _3244;
                        vec4 _3269;
                        float _3270;
                        vec4 _3285;
                        vec3 _3297;
                        vec4 _3313;
                        vec4 _3329;
                        float _3376;
                        bool _3377;
                        for (;;)
                        {
                            uint _3254 = ((_3022 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3243));
                            _3244 = (_3243 + 4294967295u) & _3243;
                            uint _3256 = _3254 * 40u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            _3270 = _3269.w;
                            uint _3272 = (_3254 * 40u) + 4u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3287 = (_3254 * 40u) + 8u;
                            _3297 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x));
                            uint _3300 = (_3254 * 40u) + 16u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3316 = (_3254 * 40u) + 20u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3332 = (_3254 * 40u) + 24u;
                            vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3351 = (_3254 * 40u) + 28u;
                            vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            _3376 = fma(_1718, _3364.z, fma(_1717, _3364.y, _3364.x * _1716)) + _3364.w;
                            _3377 = !((fma(_1718, _3345.z, fma(_1717, _3345.y, _3345.x * _1716)) + _3345.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3377)
                            {
                                float _3404 = _3269.x - _1716;
                                float _3405 = _3269.y - _1717;
                                float _3406 = _3269.z - _1718;
                                float _3407 = dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406));
                                float _3410 = inversesqrt(_3407);
                                float _3411 = _3410 * _3404;
                                float _3412 = _3410 * _3405;
                                float _3413 = _3410 * _3406;
                                float _3417 = 1.0 - (_3407 / (_3270 * _3270));
                                float _4586 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3422 = sqrt(_3407) * _3285.w;
                                float _3424 = 1.39999997615814208984375 / (_3422 + 1.39999997615814208984375);
                                float _3425 = _3424 * _3424;
                                float _3428 = ((1.0 - _3425) * dot(vec3(_3411, _3412, _3413), vec3(_542, _545, _548))) + _3425;
                                float _3431 = _3422 * _3422;
                                float _3435 = (fma(_1718, _3313.z, fma(_1717, _3313.y, _3313.x * _1716)) + _3313.w) / _3376;
                                float _3436 = (fma(_1718, _3329.z, fma(_1717, _3329.y, _3329.x * _1716)) + _3329.w) / _3376;
                                float _3440 = 1.0 - dot(vec2(_3435, _3436), vec2(_3435, _3436));
                                float _4602 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3442 = _3441 * (((isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0))) * _3418) / ((_3431 * 0.699999988079071044921875) + 1.0));
                                float _3454 = exp2(log2(1.0 / ((_3431 * 3.5) + 5.0)) * 0.25);
                                float _3455 = 1.0 - _618;
                                float _3462 = sqrt(1.0 - ((1.0 - (_3455 * _3455)) * (1.0 - (_3454 * _3454))));
                                float _3463 = _3462 * _3462;
                                float _3464 = _3463 * _3463;
                                float _3465 = _3411 - _2882;
                                float _3466 = _3412 - _2883;
                                float _3467 = _3413 - _2884;
                                float _3471 = inversesqrt(dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467)));
                                float _3475 = dot(vec3(_542, _545, _548), vec3((-0.0) - _2882, (-0.0) - _2883, (-0.0) - _2884));
                                float _4613 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3478 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3479 = dot(vec3(_542, _545, _548), vec3(_3471 * _3465, _3471 * _3466, _3471 * _3467));
                                float _4624 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3482 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3486 = ((_3482 * _3482) * (_3464 + (-1.0))) + 1.0;
                                float _3487 = _3424 * _3463;
                                float _3488 = _3487 * _3487;
                                float _3494 = ((1.0 - _3488) * dot(vec3(_542, _545, _548), vec3(_3411, _3412, _3413))) + _3488;
                                float _4635 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3495 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3496 = 1.0 - _3463;
                                float _3506 = (0.5 / (((_3495 * ((_3478 * _3496) + _3463)) + 9.9999999392252902907785028219223e-09) + (((_3495 * _3496) + _3463) * _3478))) * _3495;
                                float _4646 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3516 = (_3441 * _3418) * (((_3464 * 3.1415927410125732421875) * (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) / ((_3486 * _3486) * ((_3431 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3442 * _3285.y;
                                frontier_phi_90_pred_1 = _3442 * _3285.x;
                                frontier_phi_90_pred_2 = _3516 * _3297.z;
                                frontier_phi_90_pred_3 = _3516 * _3297.y;
                                frontier_phi_90_pred_4 = _3516 * _3297.x;
                                frontier_phi_90_pred_5 = _3442 * _3285.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3524 = frontier_phi_90_pred;
                            _3523 = frontier_phi_90_pred_1;
                            _3522 = frontier_phi_90_pred_2;
                            _3521 = frontier_phi_90_pred_3;
                            _3520 = frontier_phi_90_pred_4;
                            _3525 = frontier_phi_90_pred_5;
                            _3227 = _3523 + _3240;
                            _3228 = _3524 + _3241;
                            _3229 = _3525 + _3242;
                            _3224 = _3520 + _3237;
                            _3225 = _3521 + _3238;
                            _3226 = _3522 + _3239;
                            if (_3244 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3244;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3228;
                        frontier_phi_84_pred_1 = _3227;
                        frontier_phi_84_pred_2 = _3226;
                        frontier_phi_84_pred_3 = _3225;
                        frontier_phi_84_pred_4 = _3224;
                        frontier_phi_84_pred_5 = _3229;
                    }
                    _2865 = frontier_phi_84_pred;
                    _2863 = frontier_phi_84_pred_1;
                    _2861 = frontier_phi_84_pred_2;
                    _2859 = frontier_phi_84_pred_3;
                    _2857 = frontier_phi_84_pred_4;
                    _2867 = frontier_phi_84_pred_5;
                    uint _3023 = _3022 + 1u;
                    if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3016 = _2857;
                        _3017 = _2859;
                        _3018 = _2861;
                        _3019 = _2863;
                        _3020 = _2865;
                        _3021 = _2867;
                        _3022 = _3023;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2867;
                frontier_phi_65_66_ladder_1 = _2863;
                frontier_phi_65_66_ladder_2 = _2865;
                frontier_phi_65_66_ladder_3 = _2859;
                frontier_phi_65_66_ladder_4 = _2857;
                frontier_phi_65_66_ladder_5 = _2861;
            }
            else
            {
                frontier_phi_65_66_ladder = _2746;
                frontier_phi_65_66_ladder_1 = _2742;
                frontier_phi_65_66_ladder_2 = _2744;
                frontier_phi_65_66_ladder_3 = _2738;
                frontier_phi_65_66_ladder_4 = _2736;
                frontier_phi_65_66_ladder_5 = _2740;
            }
            _2856 = frontier_phi_65_66_ladder_4;
            _2858 = frontier_phi_65_66_ladder_3;
            _2860 = frontier_phi_65_66_ladder_5;
            _2862 = frontier_phi_65_66_ladder_1;
            _2864 = frontier_phi_65_66_ladder_2;
            _2866 = frontier_phi_65_66_ladder;
        }
        float _2871 = isnan(1.0) ? _602 : (isnan(_602) ? 1.0 : min(_602, 1.0));
        _2669 = (_2871 * _2862) + _2182;
        _2671 = (_2871 * _2864) + _2184;
        _2673 = (_2871 * _2866) + _2186;
        _2675 = ((_2856 * _587) * _2871) + _2520;
        _2677 = ((_2858 * _589) * _2871) + _2522;
        _2679 = ((_2860 * _590) * _2871) + _2524;
    }
    else
    {
        _2669 = _2182;
        _2671 = _2184;
        _2673 = _2186;
        _2675 = _2520;
        _2677 = _2522;
        _2679 = _2524;
    }
    float _4662 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4673 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4684 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _2696 = ((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2669 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _602))) + ((_2675 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1444)) * cbPerFrame._m0[3u].x);
    float _2697 = ((isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2671 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _602))) + ((_2677 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1444)) * cbPerFrame._m0[3u].x);
    float _2698 = ((isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2673 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _602))) + ((_2679 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1444)) * cbPerFrame._m0[3u].x);
    uint _2699 = _561 + 6u;
    float _2707 = _521 / cbSceneParam._m0[86u].x;
    float _2708 = _522 / cbSceneParam._m0[86u].y;
    vec4 _2722 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, (log2((isnan(cbSceneParam._m0[77u].w) ? _442 : (isnan(_442) ? cbSceneParam._m0[77u].w : min(_442, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2724 = _2722.x;
    float _2725 = _2722.y;
    float _2726 = _2722.z;
    float _2727 = _2722.w;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    if (_442 > cbSceneParam._m0[78u].w)
    {
        float _2761 = isnan(_442) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _442 : min(cbSceneParam._m0[80u].w, _442));
        float _2762 = _2761 / _442;
        float _2773 = _2762 * _493;
        float _2774 = _494 * _2762;
        float _2775 = (-0.0) - _2774;
        float _2776 = _2762 * _495;
        float _2778 = (cbSceneParam._m0[77u].w * _2775) / _2761;
        float _2779 = _2778 + cbSceneParam._m0[79u].w;
        float _2780 = cbSceneParam._m0[79u].w - _2774;
        float _2786 = sqrt(((_2773 * _2773) + (_2774 * _2774)) + (_2776 * _2776));
        float _2789 = (1.0 - (cbSceneParam._m0[77u].w / _2761)) * _2786;
        float _2794 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2796 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2973;
        if (abs((_2775 - _2778) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2973 = ((((_2779 > 0.0) ? exp2(_2794 * _2779) : (2.0 - exp2(_2796 * _2779))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2789;
        }
        else
        {
            float _2917 = 1.0 / cbSceneParam._m0[80u].x;
            float _2918 = isnan(_2780) ? _2779 : (isnan(_2779) ? _2780 : max(_2779, _2780));
            float _2919 = isnan(_2780) ? _2779 : (isnan(_2779) ? _2780 : min(_2779, _2780));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            _2973 = ((abs(_2786 / _2775) * cbSceneParam._m0[80u].y) * ((((_2928 - _2929) * 2.0) - ((exp2(_2794 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0)))) - exp2(_2794 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))))) * _2917)) - ((exp2(_2796 * _2928) - exp2(_2796 * _2929)) * _2917))) + (_2789 * cbSceneParam._m0[80u].z);
        }
        vec4 _2975 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, 1.0), 0.0);
        float _2984 = exp2((_2973 * (-1.44269502162933349609375)) * (1.0 - _2975.w));
        float _2985 = log2(_2984);
        float _3001 = log2(_2727);
        _2798 = (exp2(_3001 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2985 * cbSceneParam._m0[78u].x)) * _2975.x) / cbSceneParam._m0[78u].x)) + _2724;
        _2800 = (exp2(_3001 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2985 * cbSceneParam._m0[78u].y)) * _2975.y) / cbSceneParam._m0[78u].y)) + _2725;
        _2802 = (exp2(_3001 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2985 * cbSceneParam._m0[78u].z)) * _2975.z) / cbSceneParam._m0[78u].z)) + _2726;
        _2804 = _2984 * _2727;
    }
    else
    {
        _2798 = _2724;
        _2800 = _2725;
        _2802 = _2726;
        _2804 = _2727;
    }
    bool _3011;
    vec4 _2814;
    vec4 _2836;
    float _2838;
    float _2842;
    float _2843;
    float _2844;
    float _2845;
    bool _2855;
    for (;;)
    {
        _2814 = cbMatDynParam._m0[0u];
        float _2816 = roundEven(_2814.y);
        bool _2817 = _2816 == 3.0;
        float _2818 = log2(_2804);
        float _2825 = exp2(_2818 * cbSceneParam._m0[78u].x) * _2696;
        float _2826 = exp2(_2818 * cbSceneParam._m0[78u].y) * _2697;
        float _2827 = exp2(_2818 * cbSceneParam._m0[78u].z) * _2698;
        float _2834 = _509 + (-0.5);
        _2836 = cbMtdParam._m0[1u];
        _2838 = _2836.y * _2834;
        float _2841 = (_2816 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2842 = _2841 * (_2817 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2798)));
        _2843 = _2841 * (_2817 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2800)));
        _2844 = _2841 * (_2817 ? _2827 : (_2827 + (cbSceneParam._m0[72u].w * _2802)));
        _2845 = _2834 * 0.999000012874603271484375;
        _2855 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2855)
        {
            if ((cbInstanceData._m0[_561 + 7u].x + _2845) < 0.5)
            {
                _3011 = true;
                break;
            }
        }
        uint _2952 = _563 + uint(_2814.w);
        if ((cbInstanceData._m0[_2952].w < 1.0) && ((cbInstanceData._m0[_2952].w + _2845) < 0.5))
        {
            _3011 = true;
            break;
        }
        if ((_2838 + 1.0) < _2836.x)
        {
            _3011 = true;
            break;
        }
        _3011 = false;
        break;
    }
    float _3215;
    if (_3011)
    {
        discard_state = true;
        _3215 = 0.0;
    }
    else
    {
        _3215 = cbInstanceData._m0[_2699].w;
    }
    SV_Target.x = _2842;
    SV_Target.y = _2843;
    SV_Target.z = _2844;
    SV_Target.w = _3215;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2699].w;
    discard_exit();
}


