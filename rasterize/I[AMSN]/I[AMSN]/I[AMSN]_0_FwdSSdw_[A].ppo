#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D I_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1036;
float _3478;
float _3479;
float _3480;
float _3481;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    vec4 _297 = texture(sampler2D(I_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _303 = _297.w;
    float _304 = _297.x * cbMtdParam._m0[9u].x;
    float _305 = _297.y * cbMtdParam._m0[9u].y;
    float _306 = _297.z * cbMtdParam._m0[9u].z;
    vec4 _318 = texture(sampler2D(I_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _324 = cbMtdParam._m0[11u].x + _318.x;
    vec4 _336 = texture(sampler2D(I_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _340 = _336.z;
    float _344 = (_336.x * 2.0) + (-1.0);
    float _346 = (_336.y * 2.0) + (-1.0);
    float _347 = dot(vec2(_344, _346), vec2(_344, _346));
    float _3490 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _353 = sqrt(1.0 - (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))));
    float _368 = sqrt(((_277 * _277) + (_278 * _278)) + (_279 * _279));
    float _371 = cbMtdParam._m0[12u].x - cbMtdParam._m0[12u].w;
    float _373 = (_368 - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0)));
    float _3506 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _375 = 1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)));
    float _383 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3517 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _394 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _401 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _408 = dot(vec4(_401 * _277, _401 * _278, _401 * _279, 0.0), vec4(_394 * _221, _394 * _222, _394 * _223, 0.0)) - (((_384 * _384) * cbMtdParam._m0[11u].w) * (3.0 - (_384 * 2.0)));
    float _3528 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _415 = exp2(log2(1.0 - (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _419 = cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y;
    float _430 = gl_FragCoord.x * 0.125;
    float _432 = gl_FragCoord.y * 0.125;
    float _443 = fma(_353, _221, fma(_346, _213 * TANGENT.x, (_199 * _191) * _344));
    float _446 = fma(_353, _222, fma(_346, _213 * TANGENT.y, (_199 * _192) * _344));
    float _449 = fma(_353, _223, fma(_346, _213 * TANGENT.z, (_199 * _193) * _344));
    float _453 = inversesqrt(dot(vec3(_443, _446, _449), vec3(_443, _446, _449)));
    float _454 = _453 * _443;
    float _455 = _453 * _446;
    float _456 = _453 * _449;
    float _3549 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _457 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _458 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3582 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3593 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3604 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _462 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    if (!(((floatBitsToUint(cbSceneParam._m0[69u]).w != 0u) ? ((_368 - cbMtdParam._m0[12u].y) / (isnan(0.001000000047497451305389404296875) ? _419 : (isnan(_419) ? 0.001000000047497451305389404296875 : max(_419, 0.001000000047497451305389404296875)))) : 1.0) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_430, _432)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _481 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _530 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _521);
    float _531 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _521);
    float _532 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _521);
    float _536 = inversesqrt(dot(vec3(_530, _531, _532), vec3(_530, _531, _532)));
    float _537 = _530 * _536;
    float _538 = _531 * _536;
    float _539 = _532 * _536;
    vec4 _541 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_430, _432));
    float _543 = _541.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _717 = sqrt(((_530 * _530) + (_531 * _531)) + (_532 * _532));
        float _723 = (cbMatDynParam._m0[5u].x * _717) + cbMatDynParam._m0[5u].y;
        float _3615 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _728 = (cbMatDynParam._m0[5u].z * _717) + cbMatDynParam._m0[5u].w;
        float _3626 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) - _724)) + _724) < ((_543 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _555 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _556 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _576 = fma(_456, cbSceneParam._m0[5u].z, fma(_455, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _454));
    float _579 = fma(_456, cbSceneParam._m0[6u].z, fma(_455, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _454));
    float _582 = fma(_456, cbSceneParam._m0[7u].z, fma(_455, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _454));
    uint _595 = uint(roundEven(NORMAL.w)) * 13u;
    uint _596 = _595 + 9u;
    uint _597 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _603 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_597].x;
    float _604 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_597].y;
    float _605 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_597].z;
    float _3637 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _609 = 1.0 - _462;
    float _610 = _606 * _609;
    float _611 = _607 * _609;
    float _612 = _608 * _609;
    float _617 = (_606 + (-0.039999999105930328369140625)) * _462;
    float _618 = (_607 + (-0.039999999105930328369140625)) * _462;
    float _619 = (_608 + (-0.039999999105930328369140625)) * _462;
    float _620 = _617 + 0.039999999105930328369140625;
    float _622 = _618 + 0.039999999105930328369140625;
    float _623 = _619 + 0.039999999105930328369140625;
    vec4 _632 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _555, cbSceneParam._m0[86u].y * _556));
    float _635 = _632.x * TEXCOORD_1.w;
    float _636 = dot(vec3(_454, _455, _456), vec3(_537, _538, _539));
    float _639 = _636 * 2.0;
    float _643 = (_639 * _454) - _537;
    float _644 = (_639 * _455) - _538;
    float _645 = (_639 * _456) - _539;
    float _649 = abs(dot(vec3(_537, _538, _539), vec3(_454, _455, _456)));
    float _3670 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _651 = sqrt(_458);
    float _663 = exp2((_651 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_651 * 3.0));
    float _669 = (1.0 - _663) * ((_651 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _670 = _663 * _651;
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1035;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _760 = fma(_706, cbModelParam._m0[26u].z, fma(_702, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _698));
        float _764 = fma(_706, cbModelParam._m0[27u].z, fma(_702, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _698));
        float _768 = fma(_706, cbModelParam._m0[28u].z, fma(_702, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _698));
        float _793 = _698 + _454;
        float _794 = _702 + _455;
        float _795 = _706 + _456;
        float _805 = fma(_795, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793)) - _760;
        float _806 = fma(_795, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793)) - _764;
        float _807 = fma(_795, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793)) - _768;
        float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
        float _824 = ((_811 * _805) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_760 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_811 * _806) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_764 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_811 * _807) / cbModelParam._m0[34u].z) + ((((((_768 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        float _863 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_829.x + (-0.5));
        float _865 = _863 * (_829.y + (-0.5));
        float _866 = _863 * (_829.z + (-0.5));
        float _873 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_836.x + (-0.5));
        float _875 = _873 * (_836.y + (-0.5));
        float _876 = _873 * (_836.z + (-0.5));
        float _883 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_843.x + (-0.5));
        float _885 = _883 * (_843.y + (-0.5));
        float _886 = _883 * (_843.z + (-0.5));
        float _893 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_850.x + (-0.5));
        float _895 = _893 * (_850.y + (-0.5));
        float _896 = _893 * (_850.z + (-0.5));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = _864 * 0.5;
        float _901 = _874 * 0.5;
        float _902 = _884 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _917 = (dot(vec3(_454, _455, _456), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _927 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3718 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_929 + 1.0))) + _934) * _897;
        float _944 = _865 * 0.5;
        float _945 = _875 * 0.5;
        float _946 = _885 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_454, _455, _456), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3751 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_971 + 1.0))) + _976) * _898;
        float _986 = _866 * 0.5;
        float _987 = _876 * 0.5;
        float _988 = _886 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_454, _455, _456), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3784 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1013 + 1.0))) + _1018) * _899;
        _1035 = _866;
        _1037 = _865;
        _1038 = _864;
        _1039 = _876;
        _1040 = _875;
        _1041 = _874;
        _1042 = _886;
        _1043 = _885;
        _1044 = _884;
        _1045 = _899;
        _1046 = _898;
        _1047 = _897;
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _1036;
        _1037 = _1036;
        _1038 = _1036;
        _1039 = _1036;
        _1040 = _1036;
        _1041 = _1036;
        _1042 = _1036;
        _1043 = _1036;
        _1044 = _1036;
        _1045 = _1036;
        _1046 = _1036;
        _1047 = _1036;
        _1048 = 0.0;
        _1049 = 0.0;
        _1050 = 0.0;
    }
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1076 = fma(_706, cbModelParam._m0[30u].z, fma(_702, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _698));
        float _1080 = fma(_706, cbModelParam._m0[31u].z, fma(_702, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _698));
        float _1084 = fma(_706, cbModelParam._m0[32u].z, fma(_702, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _698));
        float _1107 = _698 + _454;
        float _1108 = _702 + _455;
        float _1109 = _706 + _456;
        float _1119 = fma(_1109, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1107)) - _1076;
        float _1120 = fma(_1109, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1107)) - _1080;
        float _1121 = fma(_1109, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1107)) - _1084;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1076 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1080 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[35u].z) + ((((((_1084 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1175 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1142.x + (-0.5));
        float _1177 = _1175 * (_1142.y + (-0.5));
        float _1178 = _1175 * (_1142.z + (-0.5));
        float _1185 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1149.x + (-0.5));
        float _1187 = _1185 * (_1149.y + (-0.5));
        float _1188 = _1185 * (_1149.z + (-0.5));
        float _1195 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1156.x + (-0.5));
        float _1197 = _1195 * (_1156.y + (-0.5));
        float _1198 = _1195 * (_1156.z + (-0.5));
        float _1205 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1163.x + (-0.5));
        float _1207 = _1205 * (_1163.y + (-0.5));
        float _1208 = _1205 * (_1163.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_454, _455, _456), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3847 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1239 + 1.0))) + _1244) * _1209;
        float _1254 = _1177 * 0.5;
        float _1255 = _1187 * 0.5;
        float _1256 = _1197 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_454, _455, _456), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3880 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1281 + 1.0))) + _1286) * _1210;
        float _1296 = _1178 * 0.5;
        float _1297 = _1188 * 0.5;
        float _1298 = _1198 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_454, _455, _456), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3913 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1323 + 1.0))) + _1328) * _1211;
        _1345 = _1178;
        _1346 = _1177;
        _1347 = _1176;
        _1348 = _1188;
        _1349 = _1187;
        _1350 = _1186;
        _1351 = _1198;
        _1352 = _1197;
        _1353 = _1196;
        _1354 = _1211;
        _1355 = _1210;
        _1356 = _1209;
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1036;
        _1346 = _1036;
        _1347 = _1036;
        _1348 = _1036;
        _1349 = _1036;
        _1350 = _1036;
        _1351 = _1036;
        _1352 = _1036;
        _1353 = _1036;
        _1354 = _1036;
        _1355 = _1036;
        _1356 = _1036;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1048)) + _1048;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1049)) + _1049;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1050)) + _1050;
    float _1392 = fma(_1371, cbSceneParam._m0[89u].z, fma(_1370, cbSceneParam._m0[89u].y, _1369 * cbSceneParam._m0[89u].x));
    float _1395 = fma(_1371, cbSceneParam._m0[90u].z, fma(_1370, cbSceneParam._m0[90u].y, _1369 * cbSceneParam._m0[90u].x));
    float _1398 = fma(_1371, cbSceneParam._m0[91u].z, fma(_1370, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1369));
    float _1413 = _643 * 0.5;
    float _1414 = _644 * 0.5;
    float _1415 = _645 * 0.5;
    float _1416 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1419 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1422 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1456;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1429 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1035, _1039, _1042, _1045));
        float _1433 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1437 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1444 = dot(vec4(cbModelParam._m0[39u]), vec4(_1413, _1414, _1415, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1467;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1458 = dot(vec4(cbModelParam._m0[40u]), vec4(_1413, _1414, _1415, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1471 = (_1467 * cbModelParam._m0[1u].x) + (_1456 * (1.0 - cbModelParam._m0[1u].x));
    float _1481 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _458);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1481 : min(cbModelParam._m0[25u].z, _1481));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1531 = fma(_706, cbModelParam._m0[13u].z, fma(_702, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _698)) + cbModelParam._m0[13u].w;
        float _1535 = fma(_706, cbModelParam._m0[14u].z, fma(_702, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _698)) + cbModelParam._m0[14u].w;
        float _1539 = fma(_706, cbModelParam._m0[15u].z, fma(_702, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _698)) + cbModelParam._m0[15u].w;
        float _1542 = fma(_645, cbModelParam._m0[13u].z, fma(_644, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643));
        float _1545 = fma(_645, cbModelParam._m0[14u].z, fma(_644, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643));
        float _1548 = fma(_645, cbModelParam._m0[15u].z, fma(_644, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643));
        float _1576;
        if (_1542 > 0.0)
        {
            _1576 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1576 = frontier_phi_21_19_ladder;
        }
        float _1803;
        if (_1545 > 0.0)
        {
            _1803 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1803 = frontier_phi_30_26_ladder;
        }
        float _2060;
        if (_1548 > 0.0)
        {
            _2060 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2060 = frontier_phi_42_37_ladder;
        }
        float _2062 = isnan(_1803) ? _1576 : (isnan(_1576) ? _1803 : min(_1576, _1803));
        float _2063 = isnan(_2060) ? _2062 : (isnan(_2062) ? _2060 : min(_2062, _2060));
        float _2067 = (_2063 * _1542) + _1531;
        float _2068 = (_2063 * _1545) + _1535;
        float _2069 = (_2063 * _1548) + _1539;
        float _2070 = _2063 * 9.9999997473787516355514526367188e-05;
        float _2072 = (-1.0) - _2070;
        float _2074 = _2070 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2069 > _2074) || ((_2069 < _2072) || ((_2068 > _2074) || ((_2068 < _2072) || ((_2067 < _2072) || (_2067 > _2074))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2197 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2069, cbModelParam._m0[9u].z, fma(_2068, cbModelParam._m0[9u].y, _2067 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2069, cbModelParam._m0[10u].z, fma(_2068, cbModelParam._m0[10u].y, _2067 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2069, cbModelParam._m0[11u].z, fma(_2068, cbModelParam._m0[11u].y, _2067 * cbModelParam._m0[11u].x))), _1482);
            frontier_phi_20_42_ladder = _2197.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2197.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2197.x * cbModelParam._m0[1u].y;
        }
        _1564 = frontier_phi_20_42_ladder_2;
        _1566 = frontier_phi_20_42_ladder_1;
        _1568 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_643, _644, _645), _1482);
        _1564 = _1552.x * cbModelParam._m0[1u].y;
        _1566 = _1552.y * cbModelParam._m0[1u].y;
        _1568 = _1552.z * cbModelParam._m0[1u].y;
    }
    float _1572 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _458);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1572 : min(cbModelParam._m0[25u].w, _1572));
    float _1665;
    float _1667;
    float _1669;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1629 = fma(_706, cbModelParam._m0[21u].z, fma(_702, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _698)) + cbModelParam._m0[21u].w;
        float _1633 = fma(_706, cbModelParam._m0[22u].z, fma(_702, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _698)) + cbModelParam._m0[22u].w;
        float _1637 = fma(_706, cbModelParam._m0[23u].z, fma(_702, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _698)) + cbModelParam._m0[23u].w;
        float _1640 = fma(_645, cbModelParam._m0[21u].z, fma(_644, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643));
        float _1643 = fma(_645, cbModelParam._m0[22u].z, fma(_644, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643));
        float _1646 = fma(_645, cbModelParam._m0[23u].z, fma(_644, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643));
        float _1808;
        if (_1640 > 0.0)
        {
            _1808 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1808 = frontier_phi_32_28_ladder;
        }
        float _2087;
        if (_1643 > 0.0)
        {
            _2087 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2087 = frontier_phi_44_39_ladder;
        }
        float _2300;
        if (_1646 > 0.0)
        {
            _2300 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2300 = frontier_phi_53_50_ladder;
        }
        float _2302 = isnan(_2087) ? _1808 : (isnan(_1808) ? _2087 : min(_1808, _2087));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1640) + _1629;
        float _2308 = (_2303 * _1643) + _1633;
        float _2309 = (_2303 * _1646) + _1637;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2310;
        float _2313 = _2310 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2309 > _2313) || ((_2309 < _2311) || ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 < _2311) || (_2307 > _2313))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2309, cbModelParam._m0[17u].z, fma(_2308, cbModelParam._m0[17u].y, _2307 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2309, cbModelParam._m0[18u].z, fma(_2308, cbModelParam._m0[18u].y, _2307 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2309, cbModelParam._m0[19u].z, fma(_2308, cbModelParam._m0[19u].y, _2307 * cbModelParam._m0[19u].x))), _1573);
            frontier_phi_29_53_ladder = _2537.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2537.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2537.x * cbModelParam._m0[1u].z;
        }
        _1665 = frontier_phi_29_53_ladder_2;
        _1667 = frontier_phi_29_53_ladder_1;
        _1669 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1649 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_643, _644, _645), _1573);
        _1665 = _1649.x * cbModelParam._m0[1u].z;
        _1667 = _1649.y * cbModelParam._m0[1u].z;
        _1669 = _1649.z * cbModelParam._m0[1u].z;
    }
    float _1682 = (((_669 * _620) + _670) * _635) * ((cbModelParam._m0[1u].w * (_1665 - _1564)) + _1564);
    float _1684 = (((_669 * _622) + _670) * _635) * ((cbModelParam._m0[1u].w * (_1667 - _1566)) + _1566);
    float _1686 = (((_669 * _623) + _670) * _635) * ((cbModelParam._m0[1u].w * (_1669 - _1568)) + _1568);
    float _1689 = fma(_1686, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1686, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1686, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, _1682 * cbSceneParam._m0[91u].x));
    vec4 _1703 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_555, _556));
    float _1705 = _1703.w;
    float _1717 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1705);
    float _1718 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1705);
    float _1719 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1705);
    uvec4 _1723 = floatBitsToUint(cbInstanceData._m0[_595 + 5u]);
    uint _1725 = _1723.x * 14u;
    uint _1726 = _1725 + 13u;
    float _1733 = _635 + (-1.0);
    float _1738 = (cbLight._m0[_1726].x * _1733) + 1.0;
    float _1739 = (cbLight._m0[_1726].y * _1733) + 1.0;
    float _1740 = (cbLight._m0[_1726].z * _1733) + 1.0;
    float _1741 = (cbLight._m0[_1726].w * _1733) + 1.0;
    uint _1742 = _1725 + 5u;
    float _1748 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1752 = _1725 + 4u;
    float _1762 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
    uint _1766 = _1725 | 1u;
    float _1777 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_454, _455, _456));
    float _1780 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_454, _455, _456));
    float _4049 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _4060 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1785 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.3183098733425140380859375;
    float _1787 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1794 = ((cbLight._m0[_1742].x * _1748) * _1787) + (((cbLight._m0[_1752].x * _1717) * _1762) * _1785);
    float _1795 = ((_1748 * cbLight._m0[_1742].y) * _1787) + (((cbLight._m0[_1752].y * _1718) * _1762) * _1785);
    float _1796 = ((_1748 * cbLight._m0[_1742].z) * _1787) + (((cbLight._m0[_1752].z * _1719) * _1762) * _1785);
    uvec4 _1800 = floatBitsToUint(cbLight._m0[_1725 + 12u]);
    bool _1802 = _1800.x == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1802)
    {
        _1813 = _1794;
        _1815 = _1795;
        _1817 = _1796;
    }
    else
    {
        uint _1821 = _1725 + 6u;
        float _1837 = (dot(vec3(cbLight._m0[_1725 + 2u].xyz), vec3(_454, _455, _456)) * 0.5) + 0.5;
        float _1838 = _1837 * _1837;
        float _4071 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1840 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _1813 = (((cbLight._m0[_1821].x * 0.3183098733425140380859375) * _1839) * _1840) + _1794;
        _1815 = (((cbLight._m0[_1821].y * 0.3183098733425140380859375) * _1839) * _1840) + _1795;
        _1817 = (((cbLight._m0[_1821].z * 0.3183098733425140380859375) * _1839) * _1840) + _1796;
    }
    bool _1820 = _1800.y == 0u;
    float _1858;
    float _1860;
    float _1862;
    if (_1820)
    {
        _1858 = _1813;
        _1860 = _1815;
        _1862 = _1817;
    }
    else
    {
        uint _2031 = _1725 + 7u;
        float _2047 = (dot(vec3(cbLight._m0[_1725 + 3u].xyz), vec3(_454, _455, _456)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _4087 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2050 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _1858 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _1813;
        _1860 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _1815;
        _1862 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _1817;
    }
    uint _1865 = _1725 + 8u;
    float _1878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1725].w)) * _458) * 0.949999988079071044921875);
    float _1879 = _1878 * _1878;
    float _1880 = cbLight._m0[_1725].x + _537;
    float _1881 = cbLight._m0[_1725].y + _538;
    float _1882 = cbLight._m0[_1725].z + _539;
    float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
    float _1887 = _1886 * _1880;
    float _1888 = _1886 * _1881;
    float _1889 = _1886 * _1882;
    float _1890 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_1725].xyz));
    float _4103 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _1894 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _1895 = dot(vec3(_454, _455, _456), vec3(_1887, _1888, _1889));
    float _4125 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1887, _1888, _1889));
    float _4136 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1879 * _1879;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1915 = exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0);
    float _1916 = 0.959999978542327880859375 - _617;
    float _1918 = 0.959999978542327880859375 - _618;
    float _1919 = 0.959999978542327880859375 - _619;
    float _1926 = 1.0 - _1879;
    float _1937 = (0.5 / (((_1894 * ((_1893 * _1926) + _1879)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _1926) + _1879) * _1893))) * _1893;
    float _4147 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    uint _1953 = _1725 + 9u;
    float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1766].w)) * _458) * 0.949999988079071044921875);
    float _1965 = _1964 * _1964;
    float _1966 = cbLight._m0[_1766].x + _537;
    float _1967 = cbLight._m0[_1766].y + _538;
    float _1968 = cbLight._m0[_1766].z + _539;
    float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
    float _1973 = _1972 * _1966;
    float _1974 = _1972 * _1967;
    float _1975 = _1972 * _1968;
    float _1976 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_1766].xyz));
    float _4158 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _1980 = dot(vec3(_454, _455, _456), vec3(_1973, _1974, _1975));
    float _4169 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _1984 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_1973, _1974, _1975));
    float _4180 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1988 = _1965 * _1965;
    float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
    float _1999 = exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0);
    float _2006 = 1.0 - _1965;
    float _2016 = (0.5 / (((_1894 * ((_1979 * _2006) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2006) + _1965) * _1979))) * _1979;
    float _4191 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2018 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
    float _2028 = (((((_1999 * _1916) + _620) * cbLight._m0[_1953].x) * _2018) * _1748) + ((((cbLight._m0[_1865].x * _1717) * ((_1915 * _1916) + _620)) * _1939) * _1762);
    float _2029 = (((((_1999 * _1918) + _622) * cbLight._m0[_1953].y) * _2018) * _1748) + ((((cbLight._m0[_1865].y * _1718) * ((_1915 * _1918) + _622)) * _1939) * _1762);
    float _2030 = (((((_1999 * _1919) + _623) * cbLight._m0[_1953].z) * _2018) * _1748) + ((((cbLight._m0[_1865].z * _1719) * ((_1915 * _1919) + _623)) * _1939) * _1762);
    float _2092;
    float _2094;
    float _2096;
    if (_1802)
    {
        _2092 = _2028;
        _2094 = _2029;
        _2096 = _2030;
    }
    else
    {
        uint _2098 = _1725 + 2u;
        uint _2102 = _1725 + 10u;
        float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _458) * 0.949999988079071044921875);
        float _2117 = _2116 * _2116;
        float _2118 = cbLight._m0[_2098].x + _537;
        float _2119 = cbLight._m0[_2098].y + _538;
        float _2120 = cbLight._m0[_2098].z + _539;
        float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
        float _2125 = _2124 * _2118;
        float _2126 = _2124 * _2119;
        float _2127 = _2124 * _2120;
        float _2128 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_2098].xyz));
        float _4202 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2132 = dot(vec3(_454, _455, _456), vec3(_2125, _2126, _2127));
        float _4213 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2136 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2125, _2126, _2127));
        float _4224 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2140 = _2117 * _2117;
        float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
        float _2151 = exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0);
        float _2158 = 1.0 - _2117;
        float _2168 = (0.5 / (((_1894 * ((_2131 * _2158) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2158) + _2117) * _2131))) * _2131;
        float _4235 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2170 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
        float _2171 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _2092 = (((((_2151 * _1916) + _620) * cbLight._m0[_2102].x) * _2170) * _2171) + _2028;
        _2094 = (((((_2151 * _1918) + _622) * cbLight._m0[_2102].y) * _2170) * _2171) + _2029;
        _2096 = (((((_2151 * _1919) + _623) * cbLight._m0[_2102].z) * _2170) * _2171) + _2030;
    }
    float _2206;
    float _2208;
    float _2210;
    if (_1820)
    {
        _2206 = _2092;
        _2208 = _2094;
        _2210 = _2096;
    }
    else
    {
        uint _2217 = _1725 + 3u;
        uint _2221 = _1725 + 11u;
        float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _458) * 0.949999988079071044921875);
        float _2236 = _2235 * _2235;
        float _2237 = cbLight._m0[_2217].x + _537;
        float _2238 = cbLight._m0[_2217].y + _538;
        float _2239 = cbLight._m0[_2217].z + _539;
        float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
        float _2244 = _2243 * _2237;
        float _2245 = _2243 * _2238;
        float _2246 = _2243 * _2239;
        float _2247 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_2217].xyz));
        float _4251 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2250 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2251 = dot(vec3(_454, _455, _456), vec3(_2244, _2245, _2246));
        float _4262 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2254 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2255 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2244, _2245, _2246));
        float _4273 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2259 = _2236 * _2236;
        float _2263 = ((_2254 * _2254) * (_2259 + (-1.0))) + 1.0;
        float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0);
        float _2277 = 1.0 - _2236;
        float _2287 = (0.5 / (((_1894 * ((_2250 * _2277) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2277) + _2236) * _2250))) * _2250;
        float _4284 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2289 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2259 / ((_2263 * _2263) * 3.141590118408203125));
        float _2290 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _2206 = (((((_2270 * _1916) + _620) * cbLight._m0[_2221].x) * _2289) * _2290) + _2092;
        _2208 = (((((_2270 * _1918) + _622) * cbLight._m0[_2221].y) * _2289) * _2290) + _2094;
        _2210 = (((((_2270 * _1919) + _623) * cbLight._m0[_2221].z) * _2289) * _2290) + _2096;
    }
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_1723.y == 0u)
    {
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2365;
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2365;
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2365;
        uvec4 _2380 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2381 = _2380.x;
        uint _2392 = uint((float(_2380.y) * floor(float(uint(cbSceneParam._m0[85u].y * _556) / _2381))) + floor(float(uint(cbSceneParam._m0[85u].x * _555) / _2381)));
        float _2402 = (log2(_2368 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2403 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        uint _2406 = uint(isnan(14.0) ? _2403 : (isnan(_2403) ? 14.0 : min(_2403, 14.0)));
        uvec4 _2411 = texelFetch(g_lightClusterGridBuffer, int(((_2406 << 2u) + (_2392 << 6u)) >> 2u));
        uint _2412 = _2411.x;
        uint _2413 = _2380.z;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        if (((((1u << ((_2413 >> 4u) & 15u)) + 4294967295u) & _2412) == 0u) || ((_2413 & 240u) == 0u))
        {
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
        }
        else
        {
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            float _2699 = 0.0;
            uint _2700 = 0u;
            uint _2709;
            bool _2710;
            for (;;)
            {
                _2709 = texelFetch(g_lightClassification, int((((_2406 << 5u) + (_2392 << 9u)) + (_2700 << 2u)) >> 2u)).x;
                _2710 = _2709 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2710)
                {
                    frontier_phi_70_pred = _2696;
                    frontier_phi_70_pred_1 = _2699;
                    frontier_phi_70_pred_2 = _2698;
                    frontier_phi_70_pred_3 = _2697;
                    frontier_phi_70_pred_4 = _2695;
                    frontier_phi_70_pred_5 = _2694;
                }
                else
                {
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    uint _2845;
                    _2839 = _2694;
                    _2840 = _2695;
                    _2841 = _2696;
                    _2842 = _2697;
                    _2843 = _2698;
                    _2844 = _2699;
                    _2845 = _2709;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    for (;;)
                    {
                        uint _2849 = uint(findLSB(_2845)) + (_2700 << 5u);
                        uint _2846 = (_2845 + 4294967295u) & _2845;
                        uint _2851 = _2849 * 48u;
                        vec4 _2865 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 3u)).x));
                        uint _2871 = (_2849 * 48u) + 4u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 3u)).x));
                        uint _2890 = (_2849 * 48u) + 8u;
                        vec3 _2901 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x));
                        float _2905 = _2865.x - _2366;
                        float _2906 = _2865.y - _2367;
                        float _2907 = _2865.z - _2368;
                        float _2908 = dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907));
                        float _2911 = inversesqrt(_2908);
                        float _2912 = _2911 * _2905;
                        float _2913 = _2911 * _2906;
                        float _2914 = _2911 * _2907;
                        float _2915 = dot(vec3(_576, _579, _582), vec3(_2912, _2913, _2914));
                        float _2920 = 1.0 - (_2908 * _2865.w);
                        float _4310 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2921 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _2922 = sqrt(_2908) * _2884.w;
                        float _2925 = 1.39999997615814208984375 / (_2922 + 1.39999997615814208984375);
                        float _2926 = _2925 * _2925;
                        float _2929 = ((1.0 - _2926) * _2915) + _2926;
                        float _2932 = _2922 * _2922;
                        float _2936 = ((isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0))) * _2921) / ((_2932 * 0.699999988079071044921875) + 1.0);
                        float _2940 = (-0.0) - _2366;
                        float _2941 = (-0.0) - _2367;
                        float _2942 = (-0.0) - _2368;
                        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                        float _2947 = _2946 * _2940;
                        float _2948 = _2946 * _2941;
                        float _2949 = _2946 * _2942;
                        float _2957 = exp2(log2(1.0 / ((_2932 * 3.5) + 5.0)) * 0.25);
                        float _2958 = 1.0 - _651;
                        float _2965 = sqrt(1.0 - ((1.0 - (_2958 * _2958)) * (1.0 - (_2957 * _2957))));
                        float _2966 = _2965 * _2965;
                        float _2967 = _2966 * _2966;
                        float _2968 = _2947 + _2912;
                        float _2969 = _2948 + _2913;
                        float _2970 = _2949 + _2914;
                        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
                        float _2978 = dot(vec3(_576, _579, _582), vec3(_2947, _2948, _2949));
                        float _4326 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2981 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _2982 = dot(vec3(_576, _579, _582), vec3(_2974 * _2968, _2974 * _2969, _2974 * _2970));
                        float _4337 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2985 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _2989 = ((_2985 * _2985) * (_2967 + (-1.0))) + 1.0;
                        float _2990 = _2925 * _2966;
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2915) + _2991;
                        float _4348 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _2996 = 1.0 - _2966;
                        float _3006 = (0.5 / (((_2995 * ((_2981 * _2996) + _2966)) + 9.9999999392252902907785028219223e-09) + (((_2995 * _2996) + _2966) * _2981))) * _2995;
                        float _4359 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3017 = (((_2967 * 3.1415927410125732421875) * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) / ((_2989 * _2989) * ((_2932 * 2.1991131305694580078125) + 3.141590118408203125))) * _2921;
                        _2769 = (_2936 * _2884.x) + _2842;
                        _2770 = (_2936 * _2884.y) + _2843;
                        _2771 = (_2936 * _2884.z) + _2844;
                        _2766 = (_3017 * _2901.x) + _2839;
                        _2767 = (_3017 * _2901.y) + _2840;
                        _2768 = (_3017 * _2901.z) + _2841;
                        if (_2846 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2839 = _2766;
                            _2840 = _2767;
                            _2841 = _2768;
                            _2842 = _2769;
                            _2843 = _2770;
                            _2844 = _2771;
                            _2845 = _2846;
                        }
                    }
                    frontier_phi_70_pred = _2768;
                    frontier_phi_70_pred_1 = _2771;
                    frontier_phi_70_pred_2 = _2770;
                    frontier_phi_70_pred_3 = _2769;
                    frontier_phi_70_pred_4 = _2767;
                    frontier_phi_70_pred_5 = _2766;
                }
                _2547 = frontier_phi_70_pred;
                _2553 = frontier_phi_70_pred_1;
                _2551 = frontier_phi_70_pred_2;
                _2549 = frontier_phi_70_pred_3;
                _2545 = frontier_phi_70_pred_4;
                _2543 = frontier_phi_70_pred_5;
                uint _2701 = _2700 + 1u;
                if (_2701 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2694 = _2543;
                    _2695 = _2545;
                    _2696 = _2547;
                    _2697 = _2549;
                    _2698 = _2551;
                    _2699 = _2553;
                    _2700 = _2701;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
        }
        uvec4 _2556 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2557 = _2556.z;
        uint _2559 = (_2557 >> 8u) & 15u;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        if (((4294967295u << _2559) & _2412) == 0u)
        {
            _2662 = _2542;
            _2664 = _2544;
            _2666 = _2546;
            _2668 = _2548;
            _2670 = _2550;
            _2672 = _2552;
        }
        else
        {
            float _2687 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
            float _2688 = _2687 * _2366;
            float _2689 = _2687 * _2367;
            float _2690 = _2687 * _2368;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2559 < ((_2557 >> 12u) & 15u))
            {
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2822 = _2542;
                float _2823 = _2544;
                float _2824 = _2546;
                float _2825 = _2548;
                float _2826 = _2550;
                float _2827 = _2552;
                uint _2828 = _2559;
                uint _2837;
                bool _2838;
                for (;;)
                {
                    _2837 = texelFetch(g_lightClassification, int((((_2406 << 5u) + (_2392 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                    _2838 = _2837 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2838)
                    {
                        frontier_phi_81_pred = _2827;
                        frontier_phi_81_pred_1 = _2826;
                        frontier_phi_81_pred_2 = _2825;
                        frontier_phi_81_pred_3 = _2824;
                        frontier_phi_81_pred_4 = _2823;
                        frontier_phi_81_pred_5 = _2822;
                    }
                    else
                    {
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3044 = _2822;
                        float _3045 = _2823;
                        float _3046 = _2824;
                        float _3047 = _2825;
                        float _3048 = _2826;
                        float _3049 = _2827;
                        uint _3050 = _2837;
                        uint _3051;
                        vec4 _3076;
                        float _3077;
                        vec4 _3092;
                        vec3 _3104;
                        vec4 _3120;
                        vec4 _3136;
                        float _3183;
                        bool _3184;
                        for (;;)
                        {
                            uint _3061 = ((_2828 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3050));
                            _3051 = (_3050 + 4294967295u) & _3050;
                            uint _3063 = _3061 * 40u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            _3077 = _3076.w;
                            uint _3079 = (_3061 * 40u) + 4u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3061 * 40u) + 8u;
                            _3104 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x));
                            uint _3107 = (_3061 * 40u) + 16u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3123 = (_3061 * 40u) + 20u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3139 = (_3061 * 40u) + 24u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3158 = (_3061 * 40u) + 28u;
                            vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3183 = fma(_2368, _3171.z, fma(_2367, _3171.y, _3171.x * _2366)) + _3171.w;
                            _3184 = !((fma(_2368, _3152.z, fma(_2367, _3152.y, _3152.x * _2366)) + _3152.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3184)
                            {
                                float _3211 = _3076.x - _2366;
                                float _3212 = _3076.y - _2367;
                                float _3213 = _3076.z - _2368;
                                float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                                float _3217 = inversesqrt(_3214);
                                float _3218 = _3217 * _3211;
                                float _3219 = _3217 * _3212;
                                float _3220 = _3217 * _3213;
                                float _3224 = 1.0 - (_3214 / (_3077 * _3077));
                                float _4370 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3229 = sqrt(_3214) * _3092.w;
                                float _3231 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                                float _3232 = _3231 * _3231;
                                float _3235 = ((1.0 - _3232) * dot(vec3(_3218, _3219, _3220), vec3(_576, _579, _582))) + _3232;
                                float _3238 = _3229 * _3229;
                                float _3242 = (fma(_2368, _3120.z, fma(_2367, _3120.y, _3120.x * _2366)) + _3120.w) / _3183;
                                float _3243 = (fma(_2368, _3136.z, fma(_2367, _3136.y, _3136.x * _2366)) + _3136.w) / _3183;
                                float _3247 = 1.0 - dot(vec2(_3242, _3243), vec2(_3242, _3243));
                                float _4386 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3249 = _3248 * (((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3225) / ((_3238 * 0.699999988079071044921875) + 1.0));
                                float _3261 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                                float _3262 = 1.0 - _651;
                                float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                                float _3270 = _3269 * _3269;
                                float _3271 = _3270 * _3270;
                                float _3272 = _3218 - _2688;
                                float _3273 = _3219 - _2689;
                                float _3274 = _3220 - _2690;
                                float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                                float _3282 = dot(vec3(_576, _579, _582), vec3((-0.0) - _2688, (-0.0) - _2689, (-0.0) - _2690));
                                float _4397 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3286 = dot(vec3(_576, _579, _582), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                                float _4408 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                                float _3294 = _3231 * _3270;
                                float _3295 = _3294 * _3294;
                                float _3301 = ((1.0 - _3295) * dot(vec3(_576, _579, _582), vec3(_3218, _3219, _3220))) + _3295;
                                float _4419 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3303 = 1.0 - _3270;
                                float _3313 = (0.5 / (((_3302 * ((_3285 * _3303) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3270) * _3285))) * _3302;
                                float _4430 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3323 = (_3248 * _3225) * (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) / ((_3293 * _3293) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3249 * _3092.z;
                                frontier_phi_87_pred_1 = _3249 * _3092.y;
                                frontier_phi_87_pred_2 = _3249 * _3092.x;
                                frontier_phi_87_pred_3 = _3323 * _3104.z;
                                frontier_phi_87_pred_4 = _3323 * _3104.y;
                                frontier_phi_87_pred_5 = _3323 * _3104.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3332 = frontier_phi_87_pred;
                            _3331 = frontier_phi_87_pred_1;
                            _3330 = frontier_phi_87_pred_2;
                            _3329 = frontier_phi_87_pred_3;
                            _3328 = frontier_phi_87_pred_4;
                            _3327 = frontier_phi_87_pred_5;
                            _3034 = _3330 + _3047;
                            _3035 = _3331 + _3048;
                            _3036 = _3332 + _3049;
                            _3031 = _3327 + _3044;
                            _3032 = _3328 + _3045;
                            _3033 = _3329 + _3046;
                            if (_3051 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3051;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _3036;
                        frontier_phi_81_pred_1 = _3035;
                        frontier_phi_81_pred_2 = _3034;
                        frontier_phi_81_pred_3 = _3033;
                        frontier_phi_81_pred_4 = _3032;
                        frontier_phi_81_pred_5 = _3031;
                    }
                    _2673 = frontier_phi_81_pred;
                    _2671 = frontier_phi_81_pred_1;
                    _2669 = frontier_phi_81_pred_2;
                    _2667 = frontier_phi_81_pred_3;
                    _2665 = frontier_phi_81_pred_4;
                    _2663 = frontier_phi_81_pred_5;
                    uint _2829 = _2828 + 1u;
                    if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2822 = _2663;
                        _2823 = _2665;
                        _2824 = _2667;
                        _2825 = _2669;
                        _2826 = _2671;
                        _2827 = _2673;
                        _2828 = _2829;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2669;
                frontier_phi_62_63_ladder_1 = _2673;
                frontier_phi_62_63_ladder_2 = _2671;
                frontier_phi_62_63_ladder_3 = _2667;
                frontier_phi_62_63_ladder_4 = _2665;
                frontier_phi_62_63_ladder_5 = _2663;
            }
            else
            {
                frontier_phi_62_63_ladder = _2548;
                frontier_phi_62_63_ladder_1 = _2552;
                frontier_phi_62_63_ladder_2 = _2550;
                frontier_phi_62_63_ladder_3 = _2546;
                frontier_phi_62_63_ladder_4 = _2544;
                frontier_phi_62_63_ladder_5 = _2542;
            }
            _2662 = frontier_phi_62_63_ladder_5;
            _2664 = frontier_phi_62_63_ladder_4;
            _2666 = frontier_phi_62_63_ladder_3;
            _2668 = frontier_phi_62_63_ladder;
            _2670 = frontier_phi_62_63_ladder_2;
            _2672 = frontier_phi_62_63_ladder_1;
        }
        float _2677 = isnan(1.0) ? _635 : (isnan(_635) ? 1.0 : min(_635, 1.0));
        _2424 = (_2677 * _2668) + _1858;
        _2426 = (_2677 * _2670) + _1860;
        _2428 = (_2677 * _2672) + _1862;
        _2430 = ((_2662 * _620) * _2677) + _2206;
        _2432 = ((_2664 * _622) * _2677) + _2208;
        _2434 = ((_2666 * _623) * _2677) + _2210;
    }
    else
    {
        _2424 = _1858;
        _2426 = _1860;
        _2428 = _1862;
        _2430 = _2206;
        _2432 = _2208;
        _2434 = _2210;
    }
    uint _2440 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _4446 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4457 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4468 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4479 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _2475 = (((isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2424 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _635))) + ((_2430 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1471)) * cbPerFrame._m0[3u].x)) + ((((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _375) * _415) * cbInstanceData._m0[_2440].x);
    float _2477 = (((((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _375) * _415) * cbInstanceData._m0[_2440].y) + ((_2432 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1471)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2426 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _635)));
    float _2479 = (((((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _375) * _415) * cbInstanceData._m0[_2440].z) + ((_2434 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1471)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2428 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _635)));
    float _2480 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2481 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2482 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2487 = cbInstanceData._m0[_595 + 6u].w * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)));
    float _2492 = _555 / cbSceneParam._m0[86u].x;
    float _2493 = _556 / cbSceneParam._m0[86u].y;
    vec4 _2507 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2492, _2493, (log2((isnan(cbSceneParam._m0[77u].w) ? _481 : (isnan(_481) ? cbSceneParam._m0[77u].w : min(_481, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2509 = _2507.x;
    float _2510 = _2507.y;
    float _2511 = _2507.z;
    float _2512 = _2507.w;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_481 > cbSceneParam._m0[78u].w)
    {
        float _2567 = isnan(_481) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _481 : min(cbSceneParam._m0[80u].w, _481));
        float _2568 = _2567 / _481;
        float _2579 = _2568 * _530;
        float _2580 = _531 * _2568;
        float _2581 = (-0.0) - _2580;
        float _2582 = _2568 * _532;
        float _2584 = (cbSceneParam._m0[77u].w * _2581) / _2567;
        float _2585 = _2584 + cbSceneParam._m0[79u].w;
        float _2586 = cbSceneParam._m0[79u].w - _2580;
        float _2592 = sqrt(((_2579 * _2579) + (_2580 * _2580)) + (_2582 * _2582));
        float _2595 = (1.0 - (cbSceneParam._m0[77u].w / _2567)) * _2592;
        float _2600 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2602 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2779;
        if (abs((_2581 - _2584) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2779 = ((((_2585 > 0.0) ? exp2(_2600 * _2585) : (2.0 - exp2(_2602 * _2585))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2595;
        }
        else
        {
            float _2723 = 1.0 / cbSceneParam._m0[80u].x;
            float _2724 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : max(_2585, _2586));
            float _2725 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : min(_2585, _2586));
            float _2734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : min(_2724, 0.0));
            float _2735 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : min(_2725, 0.0));
            _2779 = ((abs(_2592 / _2581) * cbSceneParam._m0[80u].y) * ((((_2734 - _2735) * 2.0) - ((exp2(_2600 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0)))) - exp2(_2600 * (isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))))) * _2723)) - ((exp2(_2602 * _2734) - exp2(_2602 * _2735)) * _2723))) + (_2595 * cbSceneParam._m0[80u].z);
        }
        vec4 _2781 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2492, _2493, 1.0), 0.0);
        float _2790 = exp2((_2779 * (-1.44269502162933349609375)) * (1.0 - _2781.w));
        float _2791 = log2(_2790);
        float _2807 = log2(_2512);
        _2604 = (exp2(_2807 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].x)) * _2781.x) / cbSceneParam._m0[78u].x)) + _2509;
        _2606 = (exp2(_2807 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].y)) * _2781.y) / cbSceneParam._m0[78u].y)) + _2510;
        _2608 = (exp2(_2807 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].z)) * _2781.z) / cbSceneParam._m0[78u].z)) + _2511;
        _2610 = _2790 * _2512;
    }
    else
    {
        _2604 = _2509;
        _2606 = _2510;
        _2608 = _2511;
        _2610 = _2512;
    }
    bool _2817;
    vec4 _2620;
    vec4 _2642;
    float _2644;
    float _2648;
    float _2649;
    float _2650;
    float _2651;
    bool _2661;
    for (;;)
    {
        _2620 = cbMatDynParam._m0[0u];
        float _2622 = roundEven(_2620.y);
        bool _2623 = _2622 == 3.0;
        float _2624 = log2(_2610);
        float _2631 = exp2(_2624 * cbSceneParam._m0[78u].x) * _2480;
        float _2632 = exp2(_2624 * cbSceneParam._m0[78u].y) * _2481;
        float _2633 = exp2(_2624 * cbSceneParam._m0[78u].z) * _2482;
        float _2640 = _543 + (-0.5);
        _2642 = cbMtdParam._m0[1u];
        _2644 = _2642.y * _2640;
        float _2647 = (_2622 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2648 = _2647 * (_2623 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2604)));
        _2649 = _2647 * (_2623 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2606)));
        _2650 = _2647 * (_2623 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2608)));
        _2651 = _2640 * 0.999000012874603271484375;
        _2661 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2661)
        {
            if ((cbInstanceData._m0[_595 + 7u].x + _2651) < 0.5)
            {
                _2817 = true;
                break;
            }
        }
        uint _2758 = _596 + uint(_2620.w);
        if ((cbInstanceData._m0[_2758].w < 1.0) && ((cbInstanceData._m0[_2758].w + _2651) < 0.5))
        {
            _2817 = true;
            break;
        }
        if ((_2644 + _303) < _2642.x)
        {
            _2817 = true;
            break;
        }
        _2817 = false;
        break;
    }
    float _3022;
    if (_2817)
    {
        discard_state = true;
        _3022 = 0.0;
    }
    else
    {
        _3022 = _2487;
    }
    SV_Target.x = _2648;
    SV_Target.y = _2649;
    SV_Target.z = _2650;
    SV_Target.w = _3022;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2487;
    discard_exit();
}


