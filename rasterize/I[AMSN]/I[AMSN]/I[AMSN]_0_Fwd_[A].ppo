#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D I_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1034;
float _3452;
float _3453;
float _3454;
float _3455;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _295 = texture(sampler2D(I_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _301 = _295.w;
    float _302 = _295.x * cbMtdParam._m0[9u].x;
    float _303 = _295.y * cbMtdParam._m0[9u].y;
    float _304 = _295.z * cbMtdParam._m0[9u].z;
    vec4 _316 = texture(sampler2D(I_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _322 = cbMtdParam._m0[11u].x + _316.x;
    vec4 _334 = texture(sampler2D(I_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _338 = _334.z;
    float _342 = (_334.x * 2.0) + (-1.0);
    float _344 = (_334.y * 2.0) + (-1.0);
    float _345 = dot(vec2(_342, _344), vec2(_342, _344));
    float _3464 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _351 = sqrt(1.0 - (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))));
    float _366 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
    float _369 = cbMtdParam._m0[12u].x - cbMtdParam._m0[12u].w;
    float _371 = (_366 - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0)));
    float _3480 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _373 = 1.0 - (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)));
    float _381 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3491 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _392 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _399 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _406 = dot(vec4(_399 * _275, _399 * _276, _399 * _277, 0.0), vec4(_392 * _219, _392 * _220, _392 * _221, 0.0)) - (((_382 * _382) * cbMtdParam._m0[11u].w) * (3.0 - (_382 * 2.0)));
    float _3502 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _413 = exp2(log2(1.0 - (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _417 = cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y;
    float _428 = gl_FragCoord.x * 0.125;
    float _430 = gl_FragCoord.y * 0.125;
    float _441 = fma(_351, _219, fma(_344, _211 * TANGENT.x, (_197 * _189) * _342));
    float _444 = fma(_351, _220, fma(_344, _211 * TANGENT.y, (_197 * _190) * _342));
    float _447 = fma(_351, _221, fma(_344, _211 * TANGENT.z, (_197 * _191) * _342));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    float _3523 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _455 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _456 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3556 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3567 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3578 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _460 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    if (!(((floatBitsToUint(cbSceneParam._m0[69u]).w != 0u) ? ((_366 - cbMtdParam._m0[12u].y) / (isnan(0.001000000047497451305389404296875) ? _417 : (isnan(_417) ? 0.001000000047497451305389404296875 : max(_417, 0.001000000047497451305389404296875)))) : 1.0) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_428, _430)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _479 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _528 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _519);
    float _529 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _519);
    float _530 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _519);
    float _534 = inversesqrt(dot(vec3(_528, _529, _530), vec3(_528, _529, _530)));
    float _535 = _528 * _534;
    float _536 = _529 * _534;
    float _537 = _530 * _534;
    vec4 _539 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_428, _430));
    float _541 = _539.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _715 = sqrt(((_528 * _528) + (_529 * _529)) + (_530 * _530));
        float _721 = (cbMatDynParam._m0[5u].x * _715) + cbMatDynParam._m0[5u].y;
        float _3589 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _726 = (cbMatDynParam._m0[5u].z * _715) + cbMatDynParam._m0[5u].w;
        float _3600 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) - _722)) + _722) < ((_541 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _574 = fma(_454, cbSceneParam._m0[5u].z, fma(_453, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _452));
    float _577 = fma(_454, cbSceneParam._m0[6u].z, fma(_453, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _452));
    float _580 = fma(_454, cbSceneParam._m0[7u].z, fma(_453, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _452));
    uint _593 = uint(roundEven(NORMAL.w)) * 13u;
    uint _594 = _593 + 9u;
    uint _595 = _594 + uint(cbMatDynParam._m0[0u].w);
    float _601 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_595].x;
    float _602 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_595].y;
    float _603 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_595].z;
    float _3611 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _607 = 1.0 - _460;
    float _608 = _604 * _607;
    float _609 = _605 * _607;
    float _610 = _606 * _607;
    float _615 = (_604 + (-0.039999999105930328369140625)) * _460;
    float _616 = (_605 + (-0.039999999105930328369140625)) * _460;
    float _617 = (_606 + (-0.039999999105930328369140625)) * _460;
    float _618 = _615 + 0.039999999105930328369140625;
    float _620 = _616 + 0.039999999105930328369140625;
    float _621 = _617 + 0.039999999105930328369140625;
    vec4 _630 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _553, cbSceneParam._m0[86u].y * _554));
    float _633 = _630.x * TEXCOORD_1.w;
    float _634 = dot(vec3(_452, _453, _454), vec3(_535, _536, _537));
    float _637 = _634 * 2.0;
    float _641 = (_637 * _452) - _535;
    float _642 = (_637 * _453) - _536;
    float _643 = (_637 * _454) - _537;
    float _647 = abs(dot(vec3(_535, _536, _537), vec3(_452, _453, _454)));
    float _3644 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _649 = sqrt(_456);
    float _661 = exp2((_649 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_649 * 3.0));
    float _667 = (1.0 - _661) * ((_649 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _668 = _661 * _649;
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1033;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _758 = fma(_704, cbModelParam._m0[26u].z, fma(_700, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _696));
        float _762 = fma(_704, cbModelParam._m0[27u].z, fma(_700, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _696));
        float _766 = fma(_704, cbModelParam._m0[28u].z, fma(_700, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _696));
        float _791 = _696 + _452;
        float _792 = _700 + _453;
        float _793 = _704 + _454;
        float _803 = fma(_793, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791)) - _758;
        float _804 = fma(_793, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791)) - _762;
        float _805 = fma(_793, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791)) - _766;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _822 = ((_809 * _803) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_758 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_809 * _804) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_762 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_809 * _805) / cbModelParam._m0[34u].z) + ((((((_766 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        float _861 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_827.x + (-0.5));
        float _863 = _861 * (_827.y + (-0.5));
        float _864 = _861 * (_827.z + (-0.5));
        float _871 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_834.x + (-0.5));
        float _873 = _871 * (_834.y + (-0.5));
        float _874 = _871 * (_834.z + (-0.5));
        float _881 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_841.x + (-0.5));
        float _883 = _881 * (_841.y + (-0.5));
        float _884 = _881 * (_841.z + (-0.5));
        float _891 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_848.x + (-0.5));
        float _893 = _891 * (_848.y + (-0.5));
        float _894 = _891 * (_848.z + (-0.5));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = _862 * 0.5;
        float _899 = _872 * 0.5;
        float _900 = _882 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _915 = (dot(vec3(_452, _453, _454), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _925 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3692 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_927 + 1.0))) + _932) * _895;
        float _942 = _863 * 0.5;
        float _943 = _873 * 0.5;
        float _944 = _883 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_452, _453, _454), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3725 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_969 + 1.0))) + _974) * _896;
        float _984 = _864 * 0.5;
        float _985 = _874 * 0.5;
        float _986 = _884 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_452, _453, _454), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3758 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1011 + 1.0))) + _1016) * _897;
        _1033 = _864;
        _1035 = _863;
        _1036 = _862;
        _1037 = _874;
        _1038 = _873;
        _1039 = _872;
        _1040 = _884;
        _1041 = _883;
        _1042 = _882;
        _1043 = _897;
        _1044 = _896;
        _1045 = _895;
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
    }
    else
    {
        _1033 = _1034;
        _1035 = _1034;
        _1036 = _1034;
        _1037 = _1034;
        _1038 = _1034;
        _1039 = _1034;
        _1040 = _1034;
        _1041 = _1034;
        _1042 = _1034;
        _1043 = _1034;
        _1044 = _1034;
        _1045 = _1034;
        _1046 = 0.0;
        _1047 = 0.0;
        _1048 = 0.0;
    }
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1074 = fma(_704, cbModelParam._m0[30u].z, fma(_700, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _696));
        float _1078 = fma(_704, cbModelParam._m0[31u].z, fma(_700, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _696));
        float _1082 = fma(_704, cbModelParam._m0[32u].z, fma(_700, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _696));
        float _1105 = _696 + _452;
        float _1106 = _700 + _453;
        float _1107 = _704 + _454;
        float _1117 = fma(_1107, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1105)) - _1074;
        float _1118 = fma(_1107, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1105)) - _1078;
        float _1119 = fma(_1107, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1105)) - _1082;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1074 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1078 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[35u].z) + ((((((_1082 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1173 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1140.x + (-0.5));
        float _1175 = _1173 * (_1140.y + (-0.5));
        float _1176 = _1173 * (_1140.z + (-0.5));
        float _1183 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1147.x + (-0.5));
        float _1185 = _1183 * (_1147.y + (-0.5));
        float _1186 = _1183 * (_1147.z + (-0.5));
        float _1193 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1154.x + (-0.5));
        float _1195 = _1193 * (_1154.y + (-0.5));
        float _1196 = _1193 * (_1154.z + (-0.5));
        float _1203 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1161.x + (-0.5));
        float _1205 = _1203 * (_1161.y + (-0.5));
        float _1206 = _1203 * (_1161.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_452, _453, _454), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3821 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1237 + 1.0))) + _1242) * _1207;
        float _1252 = _1175 * 0.5;
        float _1253 = _1185 * 0.5;
        float _1254 = _1195 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_452, _453, _454), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3854 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1279 + 1.0))) + _1284) * _1208;
        float _1294 = _1176 * 0.5;
        float _1295 = _1186 * 0.5;
        float _1296 = _1196 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_452, _453, _454), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3887 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1321 + 1.0))) + _1326) * _1209;
        _1343 = _1176;
        _1344 = _1175;
        _1345 = _1174;
        _1346 = _1186;
        _1347 = _1185;
        _1348 = _1184;
        _1349 = _1196;
        _1350 = _1195;
        _1351 = _1194;
        _1352 = _1209;
        _1353 = _1208;
        _1354 = _1207;
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1034;
        _1344 = _1034;
        _1345 = _1034;
        _1346 = _1034;
        _1347 = _1034;
        _1348 = _1034;
        _1349 = _1034;
        _1350 = _1034;
        _1351 = _1034;
        _1352 = _1034;
        _1353 = _1034;
        _1354 = _1034;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1046)) + _1046;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1047)) + _1047;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1048)) + _1048;
    float _1390 = fma(_1369, cbSceneParam._m0[89u].z, fma(_1368, cbSceneParam._m0[89u].y, _1367 * cbSceneParam._m0[89u].x));
    float _1393 = fma(_1369, cbSceneParam._m0[90u].z, fma(_1368, cbSceneParam._m0[90u].y, _1367 * cbSceneParam._m0[90u].x));
    float _1396 = fma(_1369, cbSceneParam._m0[91u].z, fma(_1368, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1367));
    float _1411 = _641 * 0.5;
    float _1412 = _642 * 0.5;
    float _1413 = _643 * 0.5;
    float _1414 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1417 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1420 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1454;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1427 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1033, _1037, _1040, _1043));
        float _1431 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1435 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1442 = dot(vec4(cbModelParam._m0[39u]), vec4(_1411, _1412, _1413, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1465;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1456 = dot(vec4(cbModelParam._m0[40u]), vec4(_1411, _1412, _1413, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1469 = (_1465 * cbModelParam._m0[1u].x) + (_1454 * (1.0 - cbModelParam._m0[1u].x));
    float _1479 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _456);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1479 : min(cbModelParam._m0[25u].z, _1479));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1529 = fma(_704, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696)) + cbModelParam._m0[13u].w;
        float _1533 = fma(_704, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696)) + cbModelParam._m0[14u].w;
        float _1537 = fma(_704, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696)) + cbModelParam._m0[15u].w;
        float _1540 = fma(_643, cbModelParam._m0[13u].z, fma(_642, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _641));
        float _1543 = fma(_643, cbModelParam._m0[14u].z, fma(_642, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _641));
        float _1546 = fma(_643, cbModelParam._m0[15u].z, fma(_642, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _641));
        float _1574;
        if (_1540 > 0.0)
        {
            _1574 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1574 = frontier_phi_21_19_ladder;
        }
        float _1780;
        if (_1543 > 0.0)
        {
            _1780 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1780 = frontier_phi_30_26_ladder;
        }
        float _2034;
        if (_1546 > 0.0)
        {
            _2034 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2034 = frontier_phi_42_37_ladder;
        }
        float _2036 = isnan(_1780) ? _1574 : (isnan(_1574) ? _1780 : min(_1574, _1780));
        float _2037 = isnan(_2034) ? _2036 : (isnan(_2036) ? _2034 : min(_2036, _2034));
        float _2041 = (_2037 * _1540) + _1529;
        float _2042 = (_2037 * _1543) + _1533;
        float _2043 = (_2037 * _1546) + _1537;
        float _2044 = _2037 * 9.9999997473787516355514526367188e-05;
        float _2046 = (-1.0) - _2044;
        float _2048 = _2044 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2043 > _2048) || ((_2043 < _2046) || ((_2042 > _2048) || ((_2042 < _2046) || ((_2041 < _2046) || (_2041 > _2048))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2171 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2043, cbModelParam._m0[9u].z, fma(_2042, cbModelParam._m0[9u].y, _2041 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2043, cbModelParam._m0[10u].z, fma(_2042, cbModelParam._m0[10u].y, _2041 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2043, cbModelParam._m0[11u].z, fma(_2042, cbModelParam._m0[11u].y, _2041 * cbModelParam._m0[11u].x))), _1480);
            frontier_phi_20_42_ladder = _2171.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2171.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2171.x * cbModelParam._m0[1u].y;
        }
        _1562 = frontier_phi_20_42_ladder_2;
        _1564 = frontier_phi_20_42_ladder_1;
        _1566 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_641, _642, _643), _1480);
        _1562 = _1550.x * cbModelParam._m0[1u].y;
        _1564 = _1550.y * cbModelParam._m0[1u].y;
        _1566 = _1550.z * cbModelParam._m0[1u].y;
    }
    float _1570 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _456);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1570 : min(cbModelParam._m0[25u].w, _1570));
    float _1663;
    float _1665;
    float _1667;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1627 = fma(_704, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696)) + cbModelParam._m0[21u].w;
        float _1631 = fma(_704, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696)) + cbModelParam._m0[22u].w;
        float _1635 = fma(_704, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696)) + cbModelParam._m0[23u].w;
        float _1638 = fma(_643, cbModelParam._m0[21u].z, fma(_642, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _641));
        float _1641 = fma(_643, cbModelParam._m0[22u].z, fma(_642, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _641));
        float _1644 = fma(_643, cbModelParam._m0[23u].z, fma(_642, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _641));
        float _1785;
        if (_1638 > 0.0)
        {
            _1785 = abs((1.0 - _1627) / _1638);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1627 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1785 = frontier_phi_32_28_ladder;
        }
        float _2061;
        if (_1641 > 0.0)
        {
            _2061 = abs((1.0 - _1631) / _1641);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1631 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2061 = frontier_phi_44_39_ladder;
        }
        float _2274;
        if (_1644 > 0.0)
        {
            _2274 = abs((1.0 - _1635) / _1644);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1635 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2274 = frontier_phi_53_50_ladder;
        }
        float _2276 = isnan(_2061) ? _1785 : (isnan(_1785) ? _2061 : min(_1785, _2061));
        float _2277 = isnan(_2274) ? _2276 : (isnan(_2276) ? _2274 : min(_2276, _2274));
        float _2281 = (_2277 * _1638) + _1627;
        float _2282 = (_2277 * _1641) + _1631;
        float _2283 = (_2277 * _1644) + _1635;
        float _2284 = _2277 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2284;
        float _2287 = _2284 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2283 > _2287) || ((_2283 < _2285) || ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 < _2285) || (_2281 > _2287))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2511 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2283, cbModelParam._m0[17u].z, fma(_2282, cbModelParam._m0[17u].y, _2281 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2283, cbModelParam._m0[18u].z, fma(_2282, cbModelParam._m0[18u].y, _2281 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2283, cbModelParam._m0[19u].z, fma(_2282, cbModelParam._m0[19u].y, _2281 * cbModelParam._m0[19u].x))), _1571);
            frontier_phi_29_53_ladder = _2511.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2511.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2511.x * cbModelParam._m0[1u].z;
        }
        _1663 = frontier_phi_29_53_ladder_2;
        _1665 = frontier_phi_29_53_ladder_1;
        _1667 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_641, _642, _643), _1571);
        _1663 = _1647.x * cbModelParam._m0[1u].z;
        _1665 = _1647.y * cbModelParam._m0[1u].z;
        _1667 = _1647.z * cbModelParam._m0[1u].z;
    }
    float _1680 = (((_667 * _618) + _668) * _633) * ((cbModelParam._m0[1u].w * (_1663 - _1562)) + _1562);
    float _1682 = (((_667 * _620) + _668) * _633) * ((cbModelParam._m0[1u].w * (_1665 - _1564)) + _1564);
    float _1684 = (((_667 * _621) + _668) * _633) * ((cbModelParam._m0[1u].w * (_1667 - _1566)) + _1566);
    float _1687 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1690 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1693 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, _1680 * cbSceneParam._m0[91u].x));
    uvec4 _1703 = floatBitsToUint(cbInstanceData._m0[_593 + 5u]);
    uint _1705 = _1703.x * 14u;
    uint _1706 = _1705 + 13u;
    float _1713 = _633 + (-1.0);
    float _1718 = (cbLight._m0[_1706].x * _1713) + 1.0;
    float _1719 = (cbLight._m0[_1706].y * _1713) + 1.0;
    float _1720 = (cbLight._m0[_1706].z * _1713) + 1.0;
    float _1721 = (cbLight._m0[_1706].w * _1713) + 1.0;
    uint _1722 = _1705 + 5u;
    float _1728 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1732 = _1705 + 4u;
    float _1739 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
    uint _1743 = _1705 | 1u;
    float _1754 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_452, _453, _454));
    float _1757 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_452, _453, _454));
    float _4023 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _4034 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1762 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 0.3183098733425140380859375;
    float _1764 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.3183098733425140380859375;
    float _1771 = ((cbLight._m0[_1722].x * _1728) * _1764) + ((cbLight._m0[_1732].x * _1739) * _1762);
    float _1772 = ((_1728 * cbLight._m0[_1722].y) * _1764) + ((_1739 * cbLight._m0[_1732].y) * _1762);
    float _1773 = ((_1728 * cbLight._m0[_1722].z) * _1764) + ((_1739 * cbLight._m0[_1732].z) * _1762);
    uvec4 _1777 = floatBitsToUint(cbLight._m0[_1705 + 12u]);
    bool _1779 = _1777.x == 0u;
    float _1790;
    float _1792;
    float _1794;
    if (_1779)
    {
        _1790 = _1771;
        _1792 = _1772;
        _1794 = _1773;
    }
    else
    {
        uint _1798 = _1705 + 6u;
        float _1814 = (dot(vec3(cbLight._m0[_1705 + 2u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _1815 = _1814 * _1814;
        float _4045 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1817 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1790 = (((cbLight._m0[_1798].x * 0.3183098733425140380859375) * _1816) * _1817) + _1771;
        _1792 = (((cbLight._m0[_1798].y * 0.3183098733425140380859375) * _1816) * _1817) + _1772;
        _1794 = (((cbLight._m0[_1798].z * 0.3183098733425140380859375) * _1816) * _1817) + _1773;
    }
    bool _1797 = _1777.y == 0u;
    float _1835;
    float _1837;
    float _1839;
    if (_1797)
    {
        _1835 = _1790;
        _1837 = _1792;
        _1839 = _1794;
    }
    else
    {
        uint _2005 = _1705 + 7u;
        float _2021 = (dot(vec3(cbLight._m0[_1705 + 3u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2022 = _2021 * _2021;
        float _4061 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2023 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2024 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _1835 = (((cbLight._m0[_2005].x * 0.3183098733425140380859375) * _2023) * _2024) + _1790;
        _1837 = (((cbLight._m0[_2005].y * 0.3183098733425140380859375) * _2023) * _2024) + _1792;
        _1839 = (((cbLight._m0[_2005].z * 0.3183098733425140380859375) * _2023) * _2024) + _1794;
    }
    uint _1842 = _1705 + 8u;
    float _1855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1705].w)) * _456) * 0.949999988079071044921875);
    float _1856 = _1855 * _1855;
    float _1857 = cbLight._m0[_1705].x + _535;
    float _1858 = cbLight._m0[_1705].y + _536;
    float _1859 = cbLight._m0[_1705].z + _537;
    float _1863 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
    float _1864 = _1863 * _1857;
    float _1865 = _1863 * _1858;
    float _1866 = _1863 * _1859;
    float _1867 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1705].xyz));
    float _4077 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _1871 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _1872 = dot(vec3(_452, _453, _454), vec3(_1864, _1865, _1866));
    float _4099 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _1876 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_1864, _1865, _1866));
    float _4110 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1880 = _1856 * _1856;
    float _1884 = ((_1875 * _1875) * (_1880 + (-1.0))) + 1.0;
    float _1892 = exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0);
    float _1893 = 0.959999978542327880859375 - _615;
    float _1895 = 0.959999978542327880859375 - _616;
    float _1896 = 0.959999978542327880859375 - _617;
    float _1903 = 1.0 - _1856;
    float _1914 = (0.5 / (((_1871 * ((_1870 * _1903) + _1856)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _1903) + _1856) * _1870))) * _1870;
    float _4121 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1916 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1880 / ((_1884 * _1884) * 3.141590118408203125));
    uint _1927 = _1705 + 9u;
    float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1743].w)) * _456) * 0.949999988079071044921875);
    float _1939 = _1938 * _1938;
    float _1940 = cbLight._m0[_1743].x + _535;
    float _1941 = cbLight._m0[_1743].y + _536;
    float _1942 = cbLight._m0[_1743].z + _537;
    float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
    float _1947 = _1946 * _1940;
    float _1948 = _1946 * _1941;
    float _1949 = _1946 * _1942;
    float _1950 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1743].xyz));
    float _4132 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _1954 = dot(vec3(_452, _453, _454), vec3(_1947, _1948, _1949));
    float _4143 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _1958 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_1947, _1948, _1949));
    float _4154 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1962 = _1939 * _1939;
    float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
    float _1973 = exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0);
    float _1980 = 1.0 - _1939;
    float _1990 = (0.5 / (((_1871 * ((_1953 * _1980) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _1980) + _1939) * _1953))) * _1953;
    float _4165 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1992 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
    float _2002 = (((((_1973 * _1893) + _618) * cbLight._m0[_1927].x) * _1992) * _1728) + (((((_1892 * _1893) + _618) * cbLight._m0[_1842].x) * _1916) * _1739);
    float _2003 = (((((_1973 * _1895) + _620) * cbLight._m0[_1927].y) * _1992) * _1728) + (((((_1892 * _1895) + _620) * cbLight._m0[_1842].y) * _1916) * _1739);
    float _2004 = (((((_1973 * _1896) + _621) * cbLight._m0[_1927].z) * _1992) * _1728) + (((((_1892 * _1896) + _621) * cbLight._m0[_1842].z) * _1916) * _1739);
    float _2066;
    float _2068;
    float _2070;
    if (_1779)
    {
        _2066 = _2002;
        _2068 = _2003;
        _2070 = _2004;
    }
    else
    {
        uint _2072 = _1705 + 2u;
        uint _2076 = _1705 + 10u;
        float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _456) * 0.949999988079071044921875);
        float _2091 = _2090 * _2090;
        float _2092 = cbLight._m0[_2072].x + _535;
        float _2093 = cbLight._m0[_2072].y + _536;
        float _2094 = cbLight._m0[_2072].z + _537;
        float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
        float _2099 = _2098 * _2092;
        float _2100 = _2098 * _2093;
        float _2101 = _2098 * _2094;
        float _2102 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2072].xyz));
        float _4176 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2106 = dot(vec3(_452, _453, _454), vec3(_2099, _2100, _2101));
        float _4187 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2110 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2099, _2100, _2101));
        float _4198 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2114 = _2091 * _2091;
        float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
        float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0);
        float _2132 = 1.0 - _2091;
        float _2142 = (0.5 / (((_1871 * ((_2105 * _2132) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _2132) + _2091) * _2105))) * _2105;
        float _4209 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2144 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
        float _2145 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _2066 = (((((_2125 * _1893) + _618) * cbLight._m0[_2076].x) * _2144) * _2145) + _2002;
        _2068 = (((((_2125 * _1895) + _620) * cbLight._m0[_2076].y) * _2144) * _2145) + _2003;
        _2070 = (((((_2125 * _1896) + _621) * cbLight._m0[_2076].z) * _2144) * _2145) + _2004;
    }
    float _2180;
    float _2182;
    float _2184;
    if (_1797)
    {
        _2180 = _2066;
        _2182 = _2068;
        _2184 = _2070;
    }
    else
    {
        uint _2191 = _1705 + 3u;
        uint _2195 = _1705 + 11u;
        float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _456) * 0.949999988079071044921875);
        float _2210 = _2209 * _2209;
        float _2211 = cbLight._m0[_2191].x + _535;
        float _2212 = cbLight._m0[_2191].y + _536;
        float _2213 = cbLight._m0[_2191].z + _537;
        float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
        float _2218 = _2217 * _2211;
        float _2219 = _2217 * _2212;
        float _2220 = _2217 * _2213;
        float _2221 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2191].xyz));
        float _4225 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2225 = dot(vec3(_452, _453, _454), vec3(_2218, _2219, _2220));
        float _4236 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2229 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2218, _2219, _2220));
        float _4247 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2233 = _2210 * _2210;
        float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
        float _2244 = exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0);
        float _2251 = 1.0 - _2210;
        float _2261 = (0.5 / (((_1871 * ((_2224 * _2251) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_1871 * _2251) + _2210) * _2224))) * _2224;
        float _4258 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2263 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
        float _2264 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _2180 = (((((_2244 * _1893) + _618) * cbLight._m0[_2195].x) * _2263) * _2264) + _2066;
        _2182 = (((((_2244 * _1895) + _620) * cbLight._m0[_2195].y) * _2263) * _2264) + _2068;
        _2184 = (((((_2244 * _1896) + _621) * cbLight._m0[_2195].z) * _2263) * _2264) + _2070;
    }
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    float _2406;
    float _2408;
    if (_1703.y == 0u)
    {
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2339;
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2339;
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2339;
        uvec4 _2354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2355 = _2354.x;
        uint _2366 = uint((float(_2354.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _2355))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _2355)));
        float _2376 = (log2(_2342 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2377 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        uint _2380 = uint(isnan(14.0) ? _2377 : (isnan(_2377) ? 14.0 : min(_2377, 14.0)));
        uvec4 _2385 = texelFetch(g_lightClusterGridBuffer, int(((_2380 << 2u) + (_2366 << 6u)) >> 2u));
        uint _2386 = _2385.x;
        uint _2387 = _2354.z;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        if (((((1u << ((_2387 >> 4u) & 15u)) + 4294967295u) & _2386) == 0u) || ((_2387 & 240u) == 0u))
        {
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
        }
        else
        {
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            uint _2674 = 0u;
            uint _2683;
            bool _2684;
            for (;;)
            {
                _2683 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2674 << 2u)) >> 2u)).x;
                _2684 = _2683 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2684)
                {
                    frontier_phi_70_pred = _2670;
                    frontier_phi_70_pred_1 = _2673;
                    frontier_phi_70_pred_2 = _2672;
                    frontier_phi_70_pred_3 = _2671;
                    frontier_phi_70_pred_4 = _2669;
                    frontier_phi_70_pred_5 = _2668;
                }
                else
                {
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    uint _2819;
                    _2813 = _2668;
                    _2814 = _2669;
                    _2815 = _2670;
                    _2816 = _2671;
                    _2817 = _2672;
                    _2818 = _2673;
                    _2819 = _2683;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    for (;;)
                    {
                        uint _2823 = uint(findLSB(_2819)) + (_2674 << 5u);
                        uint _2820 = (_2819 + 4294967295u) & _2819;
                        uint _2825 = _2823 * 48u;
                        vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2845 = (_2823 * 48u) + 4u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 3u)).x));
                        uint _2864 = (_2823 * 48u) + 8u;
                        vec3 _2875 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x));
                        float _2879 = _2839.x - _2340;
                        float _2880 = _2839.y - _2341;
                        float _2881 = _2839.z - _2342;
                        float _2882 = dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881));
                        float _2885 = inversesqrt(_2882);
                        float _2886 = _2885 * _2879;
                        float _2887 = _2885 * _2880;
                        float _2888 = _2885 * _2881;
                        float _2889 = dot(vec3(_574, _577, _580), vec3(_2886, _2887, _2888));
                        float _2894 = 1.0 - (_2882 * _2839.w);
                        float _4284 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2895 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2896 = sqrt(_2882) * _2858.w;
                        float _2899 = 1.39999997615814208984375 / (_2896 + 1.39999997615814208984375);
                        float _2900 = _2899 * _2899;
                        float _2903 = ((1.0 - _2900) * _2889) + _2900;
                        float _2906 = _2896 * _2896;
                        float _2910 = ((isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0))) * _2895) / ((_2906 * 0.699999988079071044921875) + 1.0);
                        float _2914 = (-0.0) - _2340;
                        float _2915 = (-0.0) - _2341;
                        float _2916 = (-0.0) - _2342;
                        float _2920 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
                        float _2921 = _2920 * _2914;
                        float _2922 = _2920 * _2915;
                        float _2923 = _2920 * _2916;
                        float _2931 = exp2(log2(1.0 / ((_2906 * 3.5) + 5.0)) * 0.25);
                        float _2932 = 1.0 - _649;
                        float _2939 = sqrt(1.0 - ((1.0 - (_2932 * _2932)) * (1.0 - (_2931 * _2931))));
                        float _2940 = _2939 * _2939;
                        float _2941 = _2940 * _2940;
                        float _2942 = _2921 + _2886;
                        float _2943 = _2922 + _2887;
                        float _2944 = _2923 + _2888;
                        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
                        float _2952 = dot(vec3(_574, _577, _580), vec3(_2921, _2922, _2923));
                        float _4300 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2955 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _2956 = dot(vec3(_574, _577, _580), vec3(_2948 * _2942, _2948 * _2943, _2948 * _2944));
                        float _4311 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2959 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _2963 = ((_2959 * _2959) * (_2941 + (-1.0))) + 1.0;
                        float _2964 = _2899 * _2940;
                        float _2965 = _2964 * _2964;
                        float _2968 = ((1.0 - _2965) * _2889) + _2965;
                        float _4322 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2969 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _2970 = 1.0 - _2940;
                        float _2980 = (0.5 / (((_2969 * ((_2955 * _2970) + _2940)) + 9.9999999392252902907785028219223e-09) + (((_2969 * _2970) + _2940) * _2955))) * _2969;
                        float _4333 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2991 = (((_2941 * 3.1415927410125732421875) * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) / ((_2963 * _2963) * ((_2906 * 2.1991131305694580078125) + 3.141590118408203125))) * _2895;
                        _2743 = (_2910 * _2858.x) + _2816;
                        _2744 = (_2910 * _2858.y) + _2817;
                        _2745 = (_2910 * _2858.z) + _2818;
                        _2740 = (_2991 * _2875.x) + _2813;
                        _2741 = (_2991 * _2875.y) + _2814;
                        _2742 = (_2991 * _2875.z) + _2815;
                        if (_2820 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2813 = _2740;
                            _2814 = _2741;
                            _2815 = _2742;
                            _2816 = _2743;
                            _2817 = _2744;
                            _2818 = _2745;
                            _2819 = _2820;
                        }
                    }
                    frontier_phi_70_pred = _2742;
                    frontier_phi_70_pred_1 = _2745;
                    frontier_phi_70_pred_2 = _2744;
                    frontier_phi_70_pred_3 = _2743;
                    frontier_phi_70_pred_4 = _2741;
                    frontier_phi_70_pred_5 = _2740;
                }
                _2521 = frontier_phi_70_pred;
                _2527 = frontier_phi_70_pred_1;
                _2525 = frontier_phi_70_pred_2;
                _2523 = frontier_phi_70_pred_3;
                _2519 = frontier_phi_70_pred_4;
                _2517 = frontier_phi_70_pred_5;
                uint _2675 = _2674 + 1u;
                if (_2675 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2668 = _2517;
                    _2669 = _2519;
                    _2670 = _2521;
                    _2671 = _2523;
                    _2672 = _2525;
                    _2673 = _2527;
                    _2674 = _2675;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
        }
        uvec4 _2530 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2531 = _2530.z;
        uint _2533 = (_2531 >> 8u) & 15u;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        if (((4294967295u << _2533) & _2386) == 0u)
        {
            _2636 = _2516;
            _2638 = _2518;
            _2640 = _2520;
            _2642 = _2522;
            _2644 = _2524;
            _2646 = _2526;
        }
        else
        {
            float _2661 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
            float _2662 = _2661 * _2340;
            float _2663 = _2661 * _2341;
            float _2664 = _2661 * _2342;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2533 < ((_2531 >> 12u) & 15u))
            {
                float _2637;
                float _2639;
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2796 = _2516;
                float _2797 = _2518;
                float _2798 = _2520;
                float _2799 = _2522;
                float _2800 = _2524;
                float _2801 = _2526;
                uint _2802 = _2533;
                uint _2811;
                bool _2812;
                for (;;)
                {
                    _2811 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2802 << 2u)) >> 2u)).x;
                    _2812 = _2811 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2812)
                    {
                        frontier_phi_81_pred = _2801;
                        frontier_phi_81_pred_1 = _2800;
                        frontier_phi_81_pred_2 = _2799;
                        frontier_phi_81_pred_3 = _2798;
                        frontier_phi_81_pred_4 = _2797;
                        frontier_phi_81_pred_5 = _2796;
                    }
                    else
                    {
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3018 = _2796;
                        float _3019 = _2797;
                        float _3020 = _2798;
                        float _3021 = _2799;
                        float _3022 = _2800;
                        float _3023 = _2801;
                        uint _3024 = _2811;
                        uint _3025;
                        vec4 _3050;
                        float _3051;
                        vec4 _3066;
                        vec3 _3078;
                        vec4 _3094;
                        vec4 _3110;
                        float _3157;
                        bool _3158;
                        for (;;)
                        {
                            uint _3035 = ((_2802 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3024));
                            _3025 = (_3024 + 4294967295u) & _3024;
                            uint _3037 = _3035 * 40u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            _3051 = _3050.w;
                            uint _3053 = (_3035 * 40u) + 4u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3068 = (_3035 * 40u) + 8u;
                            _3078 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x));
                            uint _3081 = (_3035 * 40u) + 16u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3097 = (_3035 * 40u) + 20u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3113 = (_3035 * 40u) + 24u;
                            vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3132 = (_3035 * 40u) + 28u;
                            vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3157 = fma(_2342, _3145.z, fma(_2341, _3145.y, _3145.x * _2340)) + _3145.w;
                            _3158 = !((fma(_2342, _3126.z, fma(_2341, _3126.y, _3126.x * _2340)) + _3126.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3158)
                            {
                                float _3185 = _3050.x - _2340;
                                float _3186 = _3050.y - _2341;
                                float _3187 = _3050.z - _2342;
                                float _3188 = dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187));
                                float _3191 = inversesqrt(_3188);
                                float _3192 = _3191 * _3185;
                                float _3193 = _3191 * _3186;
                                float _3194 = _3191 * _3187;
                                float _3198 = 1.0 - (_3188 / (_3051 * _3051));
                                float _4344 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3203 = sqrt(_3188) * _3066.w;
                                float _3205 = 1.39999997615814208984375 / (_3203 + 1.39999997615814208984375);
                                float _3206 = _3205 * _3205;
                                float _3209 = ((1.0 - _3206) * dot(vec3(_3192, _3193, _3194), vec3(_574, _577, _580))) + _3206;
                                float _3212 = _3203 * _3203;
                                float _3216 = (fma(_2342, _3094.z, fma(_2341, _3094.y, _3094.x * _2340)) + _3094.w) / _3157;
                                float _3217 = (fma(_2342, _3110.z, fma(_2341, _3110.y, _3110.x * _2340)) + _3110.w) / _3157;
                                float _3221 = 1.0 - dot(vec2(_3216, _3217), vec2(_3216, _3217));
                                float _4360 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3223 = _3222 * (((isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0))) * _3199) / ((_3212 * 0.699999988079071044921875) + 1.0));
                                float _3235 = exp2(log2(1.0 / ((_3212 * 3.5) + 5.0)) * 0.25);
                                float _3236 = 1.0 - _649;
                                float _3243 = sqrt(1.0 - ((1.0 - (_3236 * _3236)) * (1.0 - (_3235 * _3235))));
                                float _3244 = _3243 * _3243;
                                float _3245 = _3244 * _3244;
                                float _3246 = _3192 - _2662;
                                float _3247 = _3193 - _2663;
                                float _3248 = _3194 - _2664;
                                float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                                float _3256 = dot(vec3(_574, _577, _580), vec3((-0.0) - _2662, (-0.0) - _2663, (-0.0) - _2664));
                                float _4371 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3259 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3260 = dot(vec3(_574, _577, _580), vec3(_3252 * _3246, _3252 * _3247, _3252 * _3248));
                                float _4382 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3263 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3267 = ((_3263 * _3263) * (_3245 + (-1.0))) + 1.0;
                                float _3268 = _3205 * _3244;
                                float _3269 = _3268 * _3268;
                                float _3275 = ((1.0 - _3269) * dot(vec3(_574, _577, _580), vec3(_3192, _3193, _3194))) + _3269;
                                float _4393 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3277 = 1.0 - _3244;
                                float _3287 = (0.5 / (((_3276 * ((_3259 * _3277) + _3244)) + 9.9999999392252902907785028219223e-09) + (((_3276 * _3277) + _3244) * _3259))) * _3276;
                                float _4404 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3297 = (_3222 * _3199) * (((_3245 * 3.1415927410125732421875) * (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) / ((_3267 * _3267) * ((_3212 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3223 * _3066.z;
                                frontier_phi_87_pred_1 = _3223 * _3066.y;
                                frontier_phi_87_pred_2 = _3223 * _3066.x;
                                frontier_phi_87_pred_3 = _3297 * _3078.z;
                                frontier_phi_87_pred_4 = _3297 * _3078.y;
                                frontier_phi_87_pred_5 = _3297 * _3078.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3306 = frontier_phi_87_pred;
                            _3305 = frontier_phi_87_pred_1;
                            _3304 = frontier_phi_87_pred_2;
                            _3303 = frontier_phi_87_pred_3;
                            _3302 = frontier_phi_87_pred_4;
                            _3301 = frontier_phi_87_pred_5;
                            _3008 = _3304 + _3021;
                            _3009 = _3305 + _3022;
                            _3010 = _3306 + _3023;
                            _3005 = _3301 + _3018;
                            _3006 = _3302 + _3019;
                            _3007 = _3303 + _3020;
                            if (_3025 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3025;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _3010;
                        frontier_phi_81_pred_1 = _3009;
                        frontier_phi_81_pred_2 = _3008;
                        frontier_phi_81_pred_3 = _3007;
                        frontier_phi_81_pred_4 = _3006;
                        frontier_phi_81_pred_5 = _3005;
                    }
                    _2647 = frontier_phi_81_pred;
                    _2645 = frontier_phi_81_pred_1;
                    _2643 = frontier_phi_81_pred_2;
                    _2641 = frontier_phi_81_pred_3;
                    _2639 = frontier_phi_81_pred_4;
                    _2637 = frontier_phi_81_pred_5;
                    uint _2803 = _2802 + 1u;
                    if (_2803 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2796 = _2637;
                        _2797 = _2639;
                        _2798 = _2641;
                        _2799 = _2643;
                        _2800 = _2645;
                        _2801 = _2647;
                        _2802 = _2803;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2643;
                frontier_phi_62_63_ladder_1 = _2647;
                frontier_phi_62_63_ladder_2 = _2645;
                frontier_phi_62_63_ladder_3 = _2641;
                frontier_phi_62_63_ladder_4 = _2639;
                frontier_phi_62_63_ladder_5 = _2637;
            }
            else
            {
                frontier_phi_62_63_ladder = _2522;
                frontier_phi_62_63_ladder_1 = _2526;
                frontier_phi_62_63_ladder_2 = _2524;
                frontier_phi_62_63_ladder_3 = _2520;
                frontier_phi_62_63_ladder_4 = _2518;
                frontier_phi_62_63_ladder_5 = _2516;
            }
            _2636 = frontier_phi_62_63_ladder_5;
            _2638 = frontier_phi_62_63_ladder_4;
            _2640 = frontier_phi_62_63_ladder_3;
            _2642 = frontier_phi_62_63_ladder;
            _2644 = frontier_phi_62_63_ladder_2;
            _2646 = frontier_phi_62_63_ladder_1;
        }
        float _2651 = isnan(1.0) ? _633 : (isnan(_633) ? 1.0 : min(_633, 1.0));
        _2398 = (_2651 * _2642) + _1835;
        _2400 = (_2651 * _2644) + _1837;
        _2402 = (_2651 * _2646) + _1839;
        _2404 = ((_2636 * _618) * _2651) + _2180;
        _2406 = ((_2638 * _620) * _2651) + _2182;
        _2408 = ((_2640 * _621) * _2651) + _2184;
    }
    else
    {
        _2398 = _1835;
        _2400 = _1837;
        _2402 = _1839;
        _2404 = _2180;
        _2406 = _2182;
        _2408 = _2184;
    }
    uint _2414 = _594 + uint(cbMatDynParam._m0[0u].w);
    float _4420 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4431 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4442 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4453 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _2449 = (((isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2398 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _633))) + ((_2404 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _373) * _413) * cbInstanceData._m0[_2414].x);
    float _2451 = (((((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _373) * _413) * cbInstanceData._m0[_2414].y) + ((_2406 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2400 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _633)));
    float _2453 = (((((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _373) * _413) * cbInstanceData._m0[_2414].z) + ((_2408 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2402 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _633)));
    float _2454 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2455 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2456 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2461 = cbInstanceData._m0[_593 + 6u].w * (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)));
    float _2466 = _553 / cbSceneParam._m0[86u].x;
    float _2467 = _554 / cbSceneParam._m0[86u].y;
    vec4 _2481 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2466, _2467, (log2((isnan(cbSceneParam._m0[77u].w) ? _479 : (isnan(_479) ? cbSceneParam._m0[77u].w : min(_479, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2483 = _2481.x;
    float _2484 = _2481.y;
    float _2485 = _2481.z;
    float _2486 = _2481.w;
    float _2578;
    float _2580;
    float _2582;
    float _2584;
    if (_479 > cbSceneParam._m0[78u].w)
    {
        float _2541 = isnan(_479) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _479 : min(cbSceneParam._m0[80u].w, _479));
        float _2542 = _2541 / _479;
        float _2553 = _2542 * _528;
        float _2554 = _529 * _2542;
        float _2555 = (-0.0) - _2554;
        float _2556 = _2542 * _530;
        float _2558 = (cbSceneParam._m0[77u].w * _2555) / _2541;
        float _2559 = _2558 + cbSceneParam._m0[79u].w;
        float _2560 = cbSceneParam._m0[79u].w - _2554;
        float _2566 = sqrt(((_2553 * _2553) + (_2554 * _2554)) + (_2556 * _2556));
        float _2569 = (1.0 - (cbSceneParam._m0[77u].w / _2541)) * _2566;
        float _2574 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2576 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2753;
        if (abs((_2555 - _2558) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2753 = ((((_2559 > 0.0) ? exp2(_2574 * _2559) : (2.0 - exp2(_2576 * _2559))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2569;
        }
        else
        {
            float _2697 = 1.0 / cbSceneParam._m0[80u].x;
            float _2698 = isnan(_2560) ? _2559 : (isnan(_2559) ? _2560 : max(_2559, _2560));
            float _2699 = isnan(_2560) ? _2559 : (isnan(_2559) ? _2560 : min(_2559, _2560));
            float _2708 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : min(_2698, 0.0));
            float _2709 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : min(_2699, 0.0));
            _2753 = ((abs(_2566 / _2555) * cbSceneParam._m0[80u].y) * ((((_2708 - _2709) * 2.0) - ((exp2(_2574 * (isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0)))) - exp2(_2574 * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0))))) * _2697)) - ((exp2(_2576 * _2708) - exp2(_2576 * _2709)) * _2697))) + (_2569 * cbSceneParam._m0[80u].z);
        }
        vec4 _2755 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2466, _2467, 1.0), 0.0);
        float _2764 = exp2((_2753 * (-1.44269502162933349609375)) * (1.0 - _2755.w));
        float _2765 = log2(_2764);
        float _2781 = log2(_2486);
        _2578 = (exp2(_2781 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].x)) * _2755.x) / cbSceneParam._m0[78u].x)) + _2483;
        _2580 = (exp2(_2781 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].y)) * _2755.y) / cbSceneParam._m0[78u].y)) + _2484;
        _2582 = (exp2(_2781 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].z)) * _2755.z) / cbSceneParam._m0[78u].z)) + _2485;
        _2584 = _2764 * _2486;
    }
    else
    {
        _2578 = _2483;
        _2580 = _2484;
        _2582 = _2485;
        _2584 = _2486;
    }
    bool _2791;
    vec4 _2594;
    vec4 _2616;
    float _2618;
    float _2622;
    float _2623;
    float _2624;
    float _2625;
    bool _2635;
    for (;;)
    {
        _2594 = cbMatDynParam._m0[0u];
        float _2596 = roundEven(_2594.y);
        bool _2597 = _2596 == 3.0;
        float _2598 = log2(_2584);
        float _2605 = exp2(_2598 * cbSceneParam._m0[78u].x) * _2454;
        float _2606 = exp2(_2598 * cbSceneParam._m0[78u].y) * _2455;
        float _2607 = exp2(_2598 * cbSceneParam._m0[78u].z) * _2456;
        float _2614 = _541 + (-0.5);
        _2616 = cbMtdParam._m0[1u];
        _2618 = _2616.y * _2614;
        float _2621 = (_2596 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2622 = _2621 * (_2597 ? _2605 : (_2605 + (cbSceneParam._m0[72u].w * _2578)));
        _2623 = _2621 * (_2597 ? _2606 : (_2606 + (cbSceneParam._m0[72u].w * _2580)));
        _2624 = _2621 * (_2597 ? _2607 : (_2607 + (cbSceneParam._m0[72u].w * _2582)));
        _2625 = _2614 * 0.999000012874603271484375;
        _2635 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2635)
        {
            if ((cbInstanceData._m0[_593 + 7u].x + _2625) < 0.5)
            {
                _2791 = true;
                break;
            }
        }
        uint _2732 = _594 + uint(_2594.w);
        if ((cbInstanceData._m0[_2732].w < 1.0) && ((cbInstanceData._m0[_2732].w + _2625) < 0.5))
        {
            _2791 = true;
            break;
        }
        if ((_2618 + _301) < _2616.x)
        {
            _2791 = true;
            break;
        }
        _2791 = false;
        break;
    }
    float _2996;
    if (_2791)
    {
        discard_state = true;
        _2996 = 0.0;
    }
    else
    {
        _2996 = _2461;
    }
    SV_Target.x = _2622;
    SV_Target.y = _2623;
    SV_Target.z = _2624;
    SV_Target.w = _2996;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2461;
    discard_exit();
}


