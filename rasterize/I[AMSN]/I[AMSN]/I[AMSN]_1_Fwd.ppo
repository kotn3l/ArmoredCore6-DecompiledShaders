#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _891;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _289 = texture(sampler2D(I_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _295 = _289.w;
    float _296 = _289.x * cbMtdParam._m0[9u].x;
    float _297 = _289.y * cbMtdParam._m0[9u].y;
    float _298 = _289.z * cbMtdParam._m0[9u].z;
    vec4 _313 = texture(sampler2D(I_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _317 = _313.z;
    float _321 = (_313.x * 2.0) + (-1.0);
    float _323 = (_313.y * 2.0) + (-1.0);
    float _324 = dot(vec2(_321, _323), vec2(_321, _323));
    float _3256 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _330 = sqrt(1.0 - (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))));
    float _348 = cbMtdParam._m0[12u].x - cbMtdParam._m0[12u].w;
    float _350 = (sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271)) - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0)));
    float _3272 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _352 = 1.0 - (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)));
    float _360 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3283 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _361 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _371 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _378 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _379 = _378 * _269;
    float _380 = _378 * _270;
    float _381 = _378 * _271;
    float _385 = dot(vec4(_379, _380, _381, 0.0), vec4(_371 * _213, _371 * _214, _371 * _215, 0.0)) - (((_361 * _361) * cbMtdParam._m0[11u].w) * (3.0 - (_361 * 2.0)));
    float _3294 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _392 = exp2(log2(1.0 - (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _395 = fma(_330, _213, fma(_323, _205 * TANGENT.x, (_191 * _183) * _321));
    float _398 = fma(_330, _214, fma(_323, _205 * TANGENT.y, (_191 * _184) * _321));
    float _401 = fma(_330, _215, fma(_323, _205 * TANGENT.z, (_191 * _185) * _321));
    float _405 = inversesqrt(dot(vec3(_395, _398, _401), vec3(_395, _398, _401)));
    float _406 = _405 * _395;
    float _407 = _405 * _398;
    float _408 = _405 * _401;
    float _3310 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _409 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _3321 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _410 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3343 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3354 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3365 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _414 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _430 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _436 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _437 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _458 = fma(_408, cbSceneParam._m0[5u].z, fma(_407, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _406));
    float _461 = fma(_408, cbSceneParam._m0[6u].z, fma(_407, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _406));
    float _464 = fma(_408, cbSceneParam._m0[7u].z, fma(_407, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _406));
    uint _477 = uint(roundEven(NORMAL.w)) * 13u;
    uint _478 = _477 + 9u;
    uint _479 = _478 + uint(cbMatDynParam._m0[0u].w);
    float _485 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)))) * cbInstanceData._m0[_479].x;
    float _486 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) * cbInstanceData._m0[_479].y;
    float _487 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0)))) * cbInstanceData._m0[_479].z;
    float _3376 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _3387 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _3398 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _491 = 1.0 - _414;
    float _492 = _488 * _491;
    float _493 = _489 * _491;
    float _494 = _490 * _491;
    float _499 = (_488 + (-0.039999999105930328369140625)) * _414;
    float _500 = (_489 + (-0.039999999105930328369140625)) * _414;
    float _501 = (_490 + (-0.039999999105930328369140625)) * _414;
    float _502 = _499 + 0.039999999105930328369140625;
    float _504 = _500 + 0.039999999105930328369140625;
    float _505 = _501 + 0.039999999105930328369140625;
    vec4 _514 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _436, cbSceneParam._m0[86u].y * _437));
    float _517 = _514.x * TEXCOORD_1.w;
    float _518 = dot(vec3(_406, _407, _408), vec3(_379, _380, _381));
    float _521 = _518 * 2.0;
    float _525 = (_521 * _406) - _379;
    float _526 = (_521 * _407) - _380;
    float _527 = (_521 * _408) - _381;
    float _531 = abs(dot(vec3(_379, _380, _381), vec3(_406, _407, _408)));
    float _3409 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _533 = sqrt(_410);
    float _545 = exp2((_533 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_533 * 3.0));
    float _551 = (1.0 - _545) * ((_533 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _552 = _545 * _533;
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _890;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _615 = fma(_588, cbModelParam._m0[26u].z, fma(_584, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _580));
        float _619 = fma(_588, cbModelParam._m0[27u].z, fma(_584, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _580));
        float _623 = fma(_588, cbModelParam._m0[28u].z, fma(_584, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _580));
        float _648 = _580 + _406;
        float _649 = _584 + _407;
        float _650 = _588 + _408;
        float _660 = fma(_650, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648)) - _615;
        float _661 = fma(_650, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648)) - _619;
        float _662 = fma(_650, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648)) - _623;
        float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
        float _679 = ((_666 * _660) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_615 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_666 * _661) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_619 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_666 * _662) / cbModelParam._m0[34u].z) + ((((((_623 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        float _718 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_684.x + (-0.5));
        float _720 = _718 * (_684.y + (-0.5));
        float _721 = _718 * (_684.z + (-0.5));
        float _728 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_691.x + (-0.5));
        float _730 = _728 * (_691.y + (-0.5));
        float _731 = _728 * (_691.z + (-0.5));
        float _738 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_698.x + (-0.5));
        float _740 = _738 * (_698.y + (-0.5));
        float _741 = _738 * (_698.z + (-0.5));
        float _748 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_705.x + (-0.5));
        float _750 = _748 * (_705.y + (-0.5));
        float _751 = _748 * (_705.z + (-0.5));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = _719 * 0.5;
        float _756 = _729 * 0.5;
        float _757 = _739 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _772 = (dot(vec3(_406, _407, _408), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3435 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _782 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3446 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3457 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * (_784 + 1.0))) + _789) * _752;
        float _799 = _720 * 0.5;
        float _800 = _730 * 0.5;
        float _801 = _740 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_406, _407, _408), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3490 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_826 + 1.0))) + _831) * _753;
        float _841 = _721 * 0.5;
        float _842 = _731 * 0.5;
        float _843 = _741 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_406, _407, _408), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3523 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_868 + 1.0))) + _873) * _754;
        _890 = _721;
        _892 = _720;
        _893 = _719;
        _894 = _731;
        _895 = _730;
        _896 = _729;
        _897 = _741;
        _898 = _740;
        _899 = _739;
        _900 = _754;
        _901 = _753;
        _902 = _752;
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
    }
    else
    {
        _890 = _891;
        _892 = _891;
        _893 = _891;
        _894 = _891;
        _895 = _891;
        _896 = _891;
        _897 = _891;
        _898 = _891;
        _899 = _891;
        _900 = _891;
        _901 = _891;
        _902 = _891;
        _903 = 0.0;
        _904 = 0.0;
        _905 = 0.0;
    }
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _931 = fma(_588, cbModelParam._m0[30u].z, fma(_584, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _580));
        float _935 = fma(_588, cbModelParam._m0[31u].z, fma(_584, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _580));
        float _939 = fma(_588, cbModelParam._m0[32u].z, fma(_584, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _580));
        float _962 = _580 + _406;
        float _963 = _584 + _407;
        float _964 = _588 + _408;
        float _974 = fma(_964, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _962)) - _931;
        float _975 = fma(_964, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _962)) - _935;
        float _976 = fma(_964, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _962)) - _939;
        float _980 = inversesqrt(dot(vec3(_974, _975, _976), vec3(_974, _975, _976)));
        float _993 = ((_980 * _974) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_931 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_980 * _975) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_935 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_980 * _976) / cbModelParam._m0[35u].z) + ((((((_939 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        float _1030 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_997.x + (-0.5));
        float _1032 = _1030 * (_997.y + (-0.5));
        float _1033 = _1030 * (_997.z + (-0.5));
        float _1040 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1004.x + (-0.5));
        float _1042 = _1040 * (_1004.y + (-0.5));
        float _1043 = _1040 * (_1004.z + (-0.5));
        float _1050 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1011.x + (-0.5));
        float _1052 = _1050 * (_1011.y + (-0.5));
        float _1053 = _1050 * (_1011.z + (-0.5));
        float _1060 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1018.x + (-0.5));
        float _1062 = _1060 * (_1018.y + (-0.5));
        float _1063 = _1060 * (_1018.z + (-0.5));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = _1031 * 0.5;
        float _1068 = _1041 * 0.5;
        float _1069 = _1051 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_406, _407, _408), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3586 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_1094 + 1.0))) + _1099) * _1064;
        float _1109 = _1032 * 0.5;
        float _1110 = _1042 * 0.5;
        float _1111 = _1052 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_406, _407, _408), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3619 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1136 + 1.0))) + _1141) * _1065;
        float _1151 = _1033 * 0.5;
        float _1152 = _1043 * 0.5;
        float _1153 = _1053 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_406, _407, _408), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3652 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1178 + 1.0))) + _1183) * _1066;
        _1200 = _1033;
        _1201 = _1032;
        _1202 = _1031;
        _1203 = _1043;
        _1204 = _1042;
        _1205 = _1041;
        _1206 = _1053;
        _1207 = _1052;
        _1208 = _1051;
        _1209 = _1066;
        _1210 = _1065;
        _1211 = _1064;
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
    }
    else
    {
        _1200 = _891;
        _1201 = _891;
        _1202 = _891;
        _1203 = _891;
        _1204 = _891;
        _1205 = _891;
        _1206 = _891;
        _1207 = _891;
        _1208 = _891;
        _1209 = _891;
        _1210 = _891;
        _1211 = _891;
        _1212 = 0.0;
        _1213 = 0.0;
        _1214 = 0.0;
    }
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _903)) + _903;
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _904)) + _904;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _905)) + _905;
    float _1247 = fma(_1226, cbSceneParam._m0[89u].z, fma(_1225, cbSceneParam._m0[89u].y, _1224 * cbSceneParam._m0[89u].x));
    float _1250 = fma(_1226, cbSceneParam._m0[90u].z, fma(_1225, cbSceneParam._m0[90u].y, _1224 * cbSceneParam._m0[90u].x));
    float _1253 = fma(_1226, cbSceneParam._m0[91u].z, fma(_1225, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1224));
    float _1268 = _525 * 0.5;
    float _1269 = _526 * 0.5;
    float _1270 = _527 * 0.5;
    float _1271 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1274 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1277 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1311;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1284 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_890, _894, _897, _900));
        float _1288 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_892, _895, _898, _901));
        float _1292 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_893, _896, _899, _902));
        float _1299 = dot(vec4(cbModelParam._m0[39u]), vec4(_1268, _1269, _1270, 1.0));
        _1311 = dot(vec3(isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1299) ? 0.0 : (isnan(0.0) ? _1299 : max(0.0, _1299))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1311 = 1.0;
    }
    float _1322;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1313 = dot(vec4(cbModelParam._m0[40u]), vec4(_1268, _1269, _1270, 1.0));
        _1322 = dot(vec3(isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1313) ? 0.0 : (isnan(0.0) ? _1313 : max(0.0, _1313))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1322 = 1.0;
    }
    float _1326 = (_1322 * cbModelParam._m0[1u].x) + (_1311 * (1.0 - cbModelParam._m0[1u].x));
    float _1336 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _410);
    float _1337 = isnan(_1336) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1336 : min(cbModelParam._m0[25u].z, _1336));
    float _1419;
    float _1421;
    float _1423;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1386 = fma(_588, cbModelParam._m0[13u].z, fma(_584, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _580)) + cbModelParam._m0[13u].w;
        float _1390 = fma(_588, cbModelParam._m0[14u].z, fma(_584, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _580)) + cbModelParam._m0[14u].w;
        float _1394 = fma(_588, cbModelParam._m0[15u].z, fma(_584, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _580)) + cbModelParam._m0[15u].w;
        float _1397 = fma(_527, cbModelParam._m0[13u].z, fma(_526, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525));
        float _1400 = fma(_527, cbModelParam._m0[14u].z, fma(_526, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525));
        float _1403 = fma(_527, cbModelParam._m0[15u].z, fma(_526, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525));
        float _1431;
        if (_1397 > 0.0)
        {
            _1431 = abs((1.0 - _1386) / _1397);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1386 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1431 = frontier_phi_16_14_ladder;
        }
        float _1637;
        if (_1400 > 0.0)
        {
            _1637 = abs((1.0 - _1390) / _1400);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1390 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1637 = frontier_phi_25_21_ladder;
        }
        float _1891;
        if (_1403 > 0.0)
        {
            _1891 = abs((1.0 - _1394) / _1403);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1394 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1891 = frontier_phi_37_32_ladder;
        }
        float _1893 = isnan(_1637) ? _1431 : (isnan(_1431) ? _1637 : min(_1431, _1637));
        float _1894 = isnan(_1891) ? _1893 : (isnan(_1893) ? _1891 : min(_1893, _1891));
        float _1898 = (_1894 * _1397) + _1386;
        float _1899 = (_1894 * _1400) + _1390;
        float _1900 = (_1894 * _1403) + _1394;
        float _1901 = _1894 * 9.9999997473787516355514526367188e-05;
        float _1903 = (-1.0) - _1901;
        float _1905 = _1901 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1900 > _1905) || ((_1900 < _1903) || ((_1899 > _1905) || ((_1899 < _1903) || ((_1898 < _1903) || (_1898 > _1905))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2028 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1900, cbModelParam._m0[9u].z, fma(_1899, cbModelParam._m0[9u].y, _1898 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1900, cbModelParam._m0[10u].z, fma(_1899, cbModelParam._m0[10u].y, _1898 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1900, cbModelParam._m0[11u].z, fma(_1899, cbModelParam._m0[11u].y, _1898 * cbModelParam._m0[11u].x))), _1337);
            frontier_phi_15_37_ladder = _2028.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2028.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2028.x * cbModelParam._m0[1u].y;
        }
        _1419 = frontier_phi_15_37_ladder_2;
        _1421 = frontier_phi_15_37_ladder_1;
        _1423 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_525, _526, _527), _1337);
        _1419 = _1407.x * cbModelParam._m0[1u].y;
        _1421 = _1407.y * cbModelParam._m0[1u].y;
        _1423 = _1407.z * cbModelParam._m0[1u].y;
    }
    float _1427 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _410);
    float _1428 = isnan(_1427) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1427 : min(cbModelParam._m0[25u].w, _1427));
    float _1520;
    float _1522;
    float _1524;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1484 = fma(_588, cbModelParam._m0[21u].z, fma(_584, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _580)) + cbModelParam._m0[21u].w;
        float _1488 = fma(_588, cbModelParam._m0[22u].z, fma(_584, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _580)) + cbModelParam._m0[22u].w;
        float _1492 = fma(_588, cbModelParam._m0[23u].z, fma(_584, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _580)) + cbModelParam._m0[23u].w;
        float _1495 = fma(_527, cbModelParam._m0[21u].z, fma(_526, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525));
        float _1498 = fma(_527, cbModelParam._m0[22u].z, fma(_526, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525));
        float _1501 = fma(_527, cbModelParam._m0[23u].z, fma(_526, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525));
        float _1642;
        if (_1495 > 0.0)
        {
            _1642 = abs((1.0 - _1484) / _1495);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1484 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1642 = frontier_phi_27_23_ladder;
        }
        float _1918;
        if (_1498 > 0.0)
        {
            _1918 = abs((1.0 - _1488) / _1498);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1488 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1918 = frontier_phi_39_34_ladder;
        }
        float _2131;
        if (_1501 > 0.0)
        {
            _2131 = abs((1.0 - _1492) / _1501);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1492 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2131 = frontier_phi_48_45_ladder;
        }
        float _2133 = isnan(_1918) ? _1642 : (isnan(_1642) ? _1918 : min(_1642, _1918));
        float _2134 = isnan(_2131) ? _2133 : (isnan(_2133) ? _2131 : min(_2133, _2131));
        float _2138 = (_2134 * _1495) + _1484;
        float _2139 = (_2134 * _1498) + _1488;
        float _2140 = (_2134 * _1501) + _1492;
        float _2141 = _2134 * 9.9999997473787516355514526367188e-05;
        float _2142 = (-1.0) - _2141;
        float _2144 = _2141 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2140 > _2144) || ((_2140 < _2142) || ((_2139 > _2144) || ((_2139 < _2142) || ((_2138 < _2142) || (_2138 > _2144))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2368 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2140, cbModelParam._m0[17u].z, fma(_2139, cbModelParam._m0[17u].y, _2138 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2140, cbModelParam._m0[18u].z, fma(_2139, cbModelParam._m0[18u].y, _2138 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2140, cbModelParam._m0[19u].z, fma(_2139, cbModelParam._m0[19u].y, _2138 * cbModelParam._m0[19u].x))), _1428);
            frontier_phi_24_48_ladder = _2368.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2368.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2368.x * cbModelParam._m0[1u].z;
        }
        _1520 = frontier_phi_24_48_ladder_2;
        _1522 = frontier_phi_24_48_ladder_1;
        _1524 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_525, _526, _527), _1428);
        _1520 = _1504.x * cbModelParam._m0[1u].z;
        _1522 = _1504.y * cbModelParam._m0[1u].z;
        _1524 = _1504.z * cbModelParam._m0[1u].z;
    }
    float _1537 = (((_551 * _502) + _552) * _517) * ((cbModelParam._m0[1u].w * (_1520 - _1419)) + _1419);
    float _1539 = (((_551 * _504) + _552) * _517) * ((cbModelParam._m0[1u].w * (_1522 - _1421)) + _1421);
    float _1541 = (((_551 * _505) + _552) * _517) * ((cbModelParam._m0[1u].w * (_1524 - _1423)) + _1423);
    float _1544 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1539, cbSceneParam._m0[89u].y, _1537 * cbSceneParam._m0[89u].x));
    float _1547 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1539, cbSceneParam._m0[90u].y, _1537 * cbSceneParam._m0[90u].x));
    float _1550 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1539, cbSceneParam._m0[91u].y, _1537 * cbSceneParam._m0[91u].x));
    uvec4 _1560 = floatBitsToUint(cbInstanceData._m0[_477 + 5u]);
    uint _1562 = _1560.x * 14u;
    uint _1563 = _1562 + 13u;
    float _1570 = _517 + (-1.0);
    float _1575 = (cbLight._m0[_1563].x * _1570) + 1.0;
    float _1576 = (cbLight._m0[_1563].y * _1570) + 1.0;
    float _1577 = (cbLight._m0[_1563].z * _1570) + 1.0;
    float _1578 = (cbLight._m0[_1563].w * _1570) + 1.0;
    uint _1579 = _1562 + 5u;
    float _1585 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
    uint _1589 = _1562 + 4u;
    float _1596 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
    uint _1600 = _1562 | 1u;
    float _1611 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_406, _407, _408));
    float _1614 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_406, _407, _408));
    float _3788 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _3799 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1619 = (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * 0.3183098733425140380859375;
    float _1621 = (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * 0.3183098733425140380859375;
    float _1628 = ((cbLight._m0[_1579].x * _1585) * _1621) + ((cbLight._m0[_1589].x * _1596) * _1619);
    float _1629 = ((_1585 * cbLight._m0[_1579].y) * _1621) + ((_1596 * cbLight._m0[_1589].y) * _1619);
    float _1630 = ((_1585 * cbLight._m0[_1579].z) * _1621) + ((_1596 * cbLight._m0[_1589].z) * _1619);
    uvec4 _1634 = floatBitsToUint(cbLight._m0[_1562 + 12u]);
    bool _1636 = _1634.x == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1636)
    {
        _1647 = _1628;
        _1649 = _1629;
        _1651 = _1630;
    }
    else
    {
        uint _1655 = _1562 + 6u;
        float _1671 = (dot(vec3(cbLight._m0[_1562 + 2u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _1672 = _1671 * _1671;
        float _3810 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1674 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1647 = (((cbLight._m0[_1655].x * 0.3183098733425140380859375) * _1673) * _1674) + _1628;
        _1649 = (((cbLight._m0[_1655].y * 0.3183098733425140380859375) * _1673) * _1674) + _1629;
        _1651 = (((cbLight._m0[_1655].z * 0.3183098733425140380859375) * _1673) * _1674) + _1630;
    }
    bool _1654 = _1634.y == 0u;
    float _1692;
    float _1694;
    float _1696;
    if (_1654)
    {
        _1692 = _1647;
        _1694 = _1649;
        _1696 = _1651;
    }
    else
    {
        uint _1862 = _1562 + 7u;
        float _1878 = (dot(vec3(cbLight._m0[_1562 + 3u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _1879 = _1878 * _1878;
        float _3826 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1881 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _1692 = (((cbLight._m0[_1862].x * 0.3183098733425140380859375) * _1880) * _1881) + _1647;
        _1694 = (((cbLight._m0[_1862].y * 0.3183098733425140380859375) * _1880) * _1881) + _1649;
        _1696 = (((cbLight._m0[_1862].z * 0.3183098733425140380859375) * _1880) * _1881) + _1651;
    }
    uint _1699 = _1562 + 8u;
    float _1712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1562].w)) * _410) * 0.949999988079071044921875);
    float _1713 = _1712 * _1712;
    float _1714 = cbLight._m0[_1562].x + _379;
    float _1715 = cbLight._m0[_1562].y + _380;
    float _1716 = cbLight._m0[_1562].z + _381;
    float _1720 = inversesqrt(dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716)));
    float _1721 = _1720 * _1714;
    float _1722 = _1720 * _1715;
    float _1723 = _1720 * _1716;
    float _1724 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1562].xyz));
    float _3842 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1727 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _1728 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1729 = dot(vec3(_406, _407, _408), vec3(_1721, _1722, _1723));
    float _3864 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1732 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _1733 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_1721, _1722, _1723));
    float _3875 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1737 = _1713 * _1713;
    float _1741 = ((_1732 * _1732) * (_1737 + (-1.0))) + 1.0;
    float _1749 = exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0);
    float _1750 = 0.959999978542327880859375 - _499;
    float _1752 = 0.959999978542327880859375 - _500;
    float _1753 = 0.959999978542327880859375 - _501;
    float _1760 = 1.0 - _1713;
    float _1771 = (0.5 / (((_1728 * ((_1727 * _1760) + _1713)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1760) + _1713) * _1727))) * _1727;
    float _3886 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1773 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1737 / ((_1741 * _1741) * 3.141590118408203125));
    uint _1784 = _1562 + 9u;
    float _1795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1600].w)) * _410) * 0.949999988079071044921875);
    float _1796 = _1795 * _1795;
    float _1797 = cbLight._m0[_1600].x + _379;
    float _1798 = cbLight._m0[_1600].y + _380;
    float _1799 = cbLight._m0[_1600].z + _381;
    float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
    float _1804 = _1803 * _1797;
    float _1805 = _1803 * _1798;
    float _1806 = _1803 * _1799;
    float _1807 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1600].xyz));
    float _3897 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _1811 = dot(vec3(_406, _407, _408), vec3(_1804, _1805, _1806));
    float _3908 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1815 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_1804, _1805, _1806));
    float _3919 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1819 = _1796 * _1796;
    float _1823 = ((_1814 * _1814) * (_1819 + (-1.0))) + 1.0;
    float _1830 = exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0);
    float _1837 = 1.0 - _1796;
    float _1847 = (0.5 / (((_1728 * ((_1810 * _1837) + _1796)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1837) + _1796) * _1810))) * _1810;
    float _3930 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1849 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1819 / ((_1823 * _1823) * 3.141590118408203125));
    float _1859 = (((((_1830 * _1750) + _502) * cbLight._m0[_1784].x) * _1849) * _1585) + (((((_1749 * _1750) + _502) * cbLight._m0[_1699].x) * _1773) * _1596);
    float _1860 = (((((_1830 * _1752) + _504) * cbLight._m0[_1784].y) * _1849) * _1585) + (((((_1749 * _1752) + _504) * cbLight._m0[_1699].y) * _1773) * _1596);
    float _1861 = (((((_1830 * _1753) + _505) * cbLight._m0[_1784].z) * _1849) * _1585) + (((((_1749 * _1753) + _505) * cbLight._m0[_1699].z) * _1773) * _1596);
    float _1923;
    float _1925;
    float _1927;
    if (_1636)
    {
        _1923 = _1859;
        _1925 = _1860;
        _1927 = _1861;
    }
    else
    {
        uint _1929 = _1562 + 2u;
        uint _1933 = _1562 + 10u;
        float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _410) * 0.949999988079071044921875);
        float _1948 = _1947 * _1947;
        float _1949 = cbLight._m0[_1929].x + _379;
        float _1950 = cbLight._m0[_1929].y + _380;
        float _1951 = cbLight._m0[_1929].z + _381;
        float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
        float _1956 = _1955 * _1949;
        float _1957 = _1955 * _1950;
        float _1958 = _1955 * _1951;
        float _1959 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1929].xyz));
        float _3941 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1962 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1963 = dot(vec3(_406, _407, _408), vec3(_1956, _1957, _1958));
        float _3952 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1966 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1967 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_1956, _1957, _1958));
        float _3963 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1971 = _1948 * _1948;
        float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
        float _1982 = exp2(log2(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * 5.0);
        float _1989 = 1.0 - _1948;
        float _1999 = (0.5 / (((_1728 * ((_1962 * _1989) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1989) + _1948) * _1962))) * _1962;
        float _3974 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2001 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
        float _2002 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1923 = (((((_1982 * _1750) + _502) * cbLight._m0[_1933].x) * _2001) * _2002) + _1859;
        _1925 = (((((_1982 * _1752) + _504) * cbLight._m0[_1933].y) * _2001) * _2002) + _1860;
        _1927 = (((((_1982 * _1753) + _505) * cbLight._m0[_1933].z) * _2001) * _2002) + _1861;
    }
    float _2037;
    float _2039;
    float _2041;
    if (_1654)
    {
        _2037 = _1923;
        _2039 = _1925;
        _2041 = _1927;
    }
    else
    {
        uint _2048 = _1562 + 3u;
        uint _2052 = _1562 + 11u;
        float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _410) * 0.949999988079071044921875);
        float _2067 = _2066 * _2066;
        float _2068 = cbLight._m0[_2048].x + _379;
        float _2069 = cbLight._m0[_2048].y + _380;
        float _2070 = cbLight._m0[_2048].z + _381;
        float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
        float _2075 = _2074 * _2068;
        float _2076 = _2074 * _2069;
        float _2077 = _2074 * _2070;
        float _2078 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2048].xyz));
        float _3990 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2081 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2082 = dot(vec3(_406, _407, _408), vec3(_2075, _2076, _2077));
        float _4001 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2085 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _2086 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2075, _2076, _2077));
        float _4012 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2090 = _2067 * _2067;
        float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
        float _2101 = exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0);
        float _2108 = 1.0 - _2067;
        float _2118 = (0.5 / (((_1728 * ((_2081 * _2108) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _2108) + _2067) * _2081))) * _2081;
        float _4023 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2120 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
        float _2121 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _2037 = (((((_2101 * _1750) + _502) * cbLight._m0[_2052].x) * _2120) * _2121) + _1923;
        _2039 = (((((_2101 * _1752) + _504) * cbLight._m0[_2052].y) * _2120) * _2121) + _1925;
        _2041 = (((((_2101 * _1753) + _505) * cbLight._m0[_2052].z) * _2120) * _2121) + _1927;
    }
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    if (_1560.y == 0u)
    {
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2196;
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2196;
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2196;
        uvec4 _2211 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2212 = _2211.x;
        uint _2223 = uint((float(_2211.y) * floor(float(uint(cbSceneParam._m0[85u].y * _437) / _2212))) + floor(float(uint(cbSceneParam._m0[85u].x * _436) / _2212)));
        float _2233 = (log2(_2199 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2234 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        uint _2237 = uint(isnan(14.0) ? _2234 : (isnan(_2234) ? 14.0 : min(_2234, 14.0)));
        uvec4 _2242 = texelFetch(g_lightClusterGridBuffer, int(((_2237 << 2u) + (_2223 << 6u)) >> 2u));
        uint _2243 = _2242.x;
        uint _2244 = _2211.z;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        if (((((1u << ((_2244 >> 4u) & 15u)) + 4294967295u) & _2243) == 0u) || ((_2244 & 240u) == 0u))
        {
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
        }
        else
        {
            float _2374;
            float _2376;
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            uint _2523 = 0u;
            uint _2532;
            bool _2533;
            for (;;)
            {
                _2532 = texelFetch(g_lightClassification, int((((_2237 << 5u) + (_2223 << 9u)) + (_2523 << 2u)) >> 2u)).x;
                _2533 = _2532 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2533)
                {
                    frontier_phi_63_pred = _2522;
                    frontier_phi_63_pred_1 = _2521;
                    frontier_phi_63_pred_2 = _2520;
                    frontier_phi_63_pred_3 = _2519;
                    frontier_phi_63_pred_4 = _2518;
                    frontier_phi_63_pred_5 = _2517;
                }
                else
                {
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    uint _2647;
                    _2641 = _2517;
                    _2642 = _2518;
                    _2643 = _2519;
                    _2644 = _2520;
                    _2645 = _2521;
                    _2646 = _2522;
                    _2647 = _2532;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    for (;;)
                    {
                        uint _2651 = uint(findLSB(_2647)) + (_2523 << 5u);
                        uint _2648 = (_2647 + 4294967295u) & _2647;
                        uint _2653 = _2651 * 48u;
                        vec4 _2667 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2653)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 3u)).x));
                        uint _2673 = (_2651 * 48u) + 4u;
                        vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 3u)).x));
                        uint _2692 = (_2651 * 48u) + 8u;
                        vec3 _2703 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x));
                        float _2707 = _2667.x - _2197;
                        float _2708 = _2667.y - _2198;
                        float _2709 = _2667.z - _2199;
                        float _2710 = dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709));
                        float _2713 = inversesqrt(_2710);
                        float _2714 = _2713 * _2707;
                        float _2715 = _2713 * _2708;
                        float _2716 = _2713 * _2709;
                        float _2717 = dot(vec3(_458, _461, _464), vec3(_2714, _2715, _2716));
                        float _2722 = 1.0 - (_2710 * _2667.w);
                        float _4049 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2723 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2724 = sqrt(_2710) * _2686.w;
                        float _2727 = 1.39999997615814208984375 / (_2724 + 1.39999997615814208984375);
                        float _2728 = _2727 * _2727;
                        float _2731 = ((1.0 - _2728) * _2717) + _2728;
                        float _2734 = _2724 * _2724;
                        float _2738 = ((isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0))) * _2723) / ((_2734 * 0.699999988079071044921875) + 1.0);
                        float _2742 = (-0.0) - _2197;
                        float _2743 = (-0.0) - _2198;
                        float _2744 = (-0.0) - _2199;
                        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
                        float _2749 = _2748 * _2742;
                        float _2750 = _2748 * _2743;
                        float _2751 = _2748 * _2744;
                        float _2759 = exp2(log2(1.0 / ((_2734 * 3.5) + 5.0)) * 0.25);
                        float _2760 = 1.0 - _533;
                        float _2767 = sqrt(1.0 - ((1.0 - (_2760 * _2760)) * (1.0 - (_2759 * _2759))));
                        float _2768 = _2767 * _2767;
                        float _2769 = _2768 * _2768;
                        float _2770 = _2749 + _2714;
                        float _2771 = _2750 + _2715;
                        float _2772 = _2751 + _2716;
                        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
                        float _2780 = dot(vec3(_458, _461, _464), vec3(_2749, _2750, _2751));
                        float _4065 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2783 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2784 = dot(vec3(_458, _461, _464), vec3(_2776 * _2770, _2776 * _2771, _2776 * _2772));
                        float _4076 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2787 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2791 = ((_2787 * _2787) * (_2769 + (-1.0))) + 1.0;
                        float _2792 = _2727 * _2768;
                        float _2793 = _2792 * _2792;
                        float _2796 = ((1.0 - _2793) * _2717) + _2793;
                        float _4087 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2797 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2798 = 1.0 - _2768;
                        float _2808 = (0.5 / (((_2797 * ((_2783 * _2798) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2797 * _2798) + _2768) * _2783))) * _2797;
                        float _4098 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2819 = (((_2769 * 3.1415927410125732421875) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) / ((_2791 * _2791) * ((_2734 * 2.1991131305694580078125) + 3.141590118408203125))) * _2723;
                        _2576 = (_2738 * _2686.x) + _2644;
                        _2577 = (_2738 * _2686.y) + _2645;
                        _2578 = (_2738 * _2686.z) + _2646;
                        _2573 = (_2819 * _2703.x) + _2641;
                        _2574 = (_2819 * _2703.y) + _2642;
                        _2575 = (_2819 * _2703.z) + _2643;
                        if (_2648 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2641 = _2573;
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2577;
                            _2646 = _2578;
                            _2647 = _2648;
                        }
                    }
                    frontier_phi_63_pred = _2578;
                    frontier_phi_63_pred_1 = _2577;
                    frontier_phi_63_pred_2 = _2576;
                    frontier_phi_63_pred_3 = _2575;
                    frontier_phi_63_pred_4 = _2574;
                    frontier_phi_63_pred_5 = _2573;
                }
                _2384 = frontier_phi_63_pred;
                _2382 = frontier_phi_63_pred_1;
                _2380 = frontier_phi_63_pred_2;
                _2378 = frontier_phi_63_pred_3;
                _2376 = frontier_phi_63_pred_4;
                _2374 = frontier_phi_63_pred_5;
                uint _2524 = _2523 + 1u;
                if (_2524 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2517 = _2374;
                    _2518 = _2376;
                    _2519 = _2378;
                    _2520 = _2380;
                    _2521 = _2382;
                    _2522 = _2384;
                    _2523 = _2524;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
        }
        uvec4 _2387 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2388 = _2387.z;
        uint _2390 = (_2388 >> 8u) & 15u;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        if (((4294967295u << _2390) & _2243) == 0u)
        {
            _2485 = _2373;
            _2487 = _2375;
            _2489 = _2377;
            _2491 = _2379;
            _2493 = _2381;
            _2495 = _2383;
        }
        else
        {
            float _2510 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
            float _2511 = _2510 * _2197;
            float _2512 = _2510 * _2198;
            float _2513 = _2510 * _2199;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2390 < ((_2388 >> 12u) & 15u))
            {
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2624 = _2373;
                float _2625 = _2375;
                float _2626 = _2377;
                float _2627 = _2379;
                float _2628 = _2381;
                float _2629 = _2383;
                uint _2630 = _2390;
                uint _2639;
                bool _2640;
                for (;;)
                {
                    _2639 = texelFetch(g_lightClassification, int((((_2237 << 5u) + (_2223 << 9u)) + (_2630 << 2u)) >> 2u)).x;
                    _2640 = _2639 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2640)
                    {
                        frontier_phi_69_pred = _2629;
                        frontier_phi_69_pred_1 = _2628;
                        frontier_phi_69_pred_2 = _2627;
                        frontier_phi_69_pred_3 = _2626;
                        frontier_phi_69_pred_4 = _2625;
                        frontier_phi_69_pred_5 = _2624;
                    }
                    else
                    {
                        float _2824;
                        float _2825;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _2837 = _2624;
                        float _2838 = _2625;
                        float _2839 = _2626;
                        float _2840 = _2627;
                        float _2841 = _2628;
                        float _2842 = _2629;
                        uint _2843 = _2639;
                        uint _2844;
                        vec4 _2869;
                        float _2870;
                        vec4 _2885;
                        vec3 _2897;
                        vec4 _2913;
                        vec4 _2929;
                        float _2976;
                        bool _2977;
                        for (;;)
                        {
                            uint _2854 = ((_2630 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2843));
                            _2844 = (_2843 + 4294967295u) & _2843;
                            uint _2856 = _2854 * 40u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            _2870 = _2869.w;
                            uint _2872 = (_2854 * 40u) + 4u;
                            _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            uint _2887 = (_2854 * 40u) + 8u;
                            _2897 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x));
                            uint _2900 = (_2854 * 40u) + 16u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2916 = (_2854 * 40u) + 20u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2932 = (_2854 * 40u) + 24u;
                            vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2951 = (_2854 * 40u) + 28u;
                            vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            _2976 = fma(_2199, _2964.z, fma(_2198, _2964.y, _2964.x * _2197)) + _2964.w;
                            _2977 = !((fma(_2199, _2945.z, fma(_2198, _2945.y, _2945.x * _2197)) + _2945.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2977)
                            {
                                float _3004 = _2869.x - _2197;
                                float _3005 = _2869.y - _2198;
                                float _3006 = _2869.z - _2199;
                                float _3007 = dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006));
                                float _3010 = inversesqrt(_3007);
                                float _3011 = _3010 * _3004;
                                float _3012 = _3010 * _3005;
                                float _3013 = _3010 * _3006;
                                float _3017 = 1.0 - (_3007 / (_2870 * _2870));
                                float _4109 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3018 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3022 = sqrt(_3007) * _2885.w;
                                float _3024 = 1.39999997615814208984375 / (_3022 + 1.39999997615814208984375);
                                float _3025 = _3024 * _3024;
                                float _3028 = ((1.0 - _3025) * dot(vec3(_3011, _3012, _3013), vec3(_458, _461, _464))) + _3025;
                                float _3031 = _3022 * _3022;
                                float _3035 = (fma(_2199, _2913.z, fma(_2198, _2913.y, _2913.x * _2197)) + _2913.w) / _2976;
                                float _3036 = (fma(_2199, _2929.z, fma(_2198, _2929.y, _2929.x * _2197)) + _2929.w) / _2976;
                                float _3040 = 1.0 - dot(vec2(_3035, _3036), vec2(_3035, _3036));
                                float _4125 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3041 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3042 = _3041 * (((isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0))) * _3018) / ((_3031 * 0.699999988079071044921875) + 1.0));
                                float _3054 = exp2(log2(1.0 / ((_3031 * 3.5) + 5.0)) * 0.25);
                                float _3055 = 1.0 - _533;
                                float _3062 = sqrt(1.0 - ((1.0 - (_3055 * _3055)) * (1.0 - (_3054 * _3054))));
                                float _3063 = _3062 * _3062;
                                float _3064 = _3063 * _3063;
                                float _3065 = _3011 - _2511;
                                float _3066 = _3012 - _2512;
                                float _3067 = _3013 - _2513;
                                float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
                                float _3075 = dot(vec3(_458, _461, _464), vec3((-0.0) - _2511, (-0.0) - _2512, (-0.0) - _2513));
                                float _4136 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3078 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3079 = dot(vec3(_458, _461, _464), vec3(_3071 * _3065, _3071 * _3066, _3071 * _3067));
                                float _4147 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3082 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3086 = ((_3082 * _3082) * (_3064 + (-1.0))) + 1.0;
                                float _3087 = _3024 * _3063;
                                float _3088 = _3087 * _3087;
                                float _3094 = ((1.0 - _3088) * dot(vec3(_458, _461, _464), vec3(_3011, _3012, _3013))) + _3088;
                                float _4158 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3096 = 1.0 - _3063;
                                float _3106 = (0.5 / (((_3095 * ((_3078 * _3096) + _3063)) + 9.9999999392252902907785028219223e-09) + (((_3095 * _3096) + _3063) * _3078))) * _3095;
                                float _4169 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3116 = (_3041 * _3018) * (((_3064 * 3.1415927410125732421875) * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) / ((_3086 * _3086) * ((_3031 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3042 * _2885.z;
                                frontier_phi_75_pred_1 = _3042 * _2885.y;
                                frontier_phi_75_pred_2 = _3042 * _2885.x;
                                frontier_phi_75_pred_3 = _3116 * _2897.z;
                                frontier_phi_75_pred_4 = _3116 * _2897.y;
                                frontier_phi_75_pred_5 = _3116 * _2897.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3125 = frontier_phi_75_pred;
                            _3124 = frontier_phi_75_pred_1;
                            _3123 = frontier_phi_75_pred_2;
                            _3122 = frontier_phi_75_pred_3;
                            _3121 = frontier_phi_75_pred_4;
                            _3120 = frontier_phi_75_pred_5;
                            _2827 = _3123 + _2840;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            _2824 = _3120 + _2837;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            if (_2844 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2844;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2829;
                        frontier_phi_69_pred_1 = _2828;
                        frontier_phi_69_pred_2 = _2827;
                        frontier_phi_69_pred_3 = _2826;
                        frontier_phi_69_pred_4 = _2825;
                        frontier_phi_69_pred_5 = _2824;
                    }
                    _2496 = frontier_phi_69_pred;
                    _2494 = frontier_phi_69_pred_1;
                    _2492 = frontier_phi_69_pred_2;
                    _2490 = frontier_phi_69_pred_3;
                    _2488 = frontier_phi_69_pred_4;
                    _2486 = frontier_phi_69_pred_5;
                    uint _2631 = _2630 + 1u;
                    if (_2631 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2624 = _2486;
                        _2625 = _2488;
                        _2626 = _2490;
                        _2627 = _2492;
                        _2628 = _2494;
                        _2629 = _2496;
                        _2630 = _2631;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2496;
                frontier_phi_57_58_ladder_1 = _2494;
                frontier_phi_57_58_ladder_2 = _2492;
                frontier_phi_57_58_ladder_3 = _2490;
                frontier_phi_57_58_ladder_4 = _2488;
                frontier_phi_57_58_ladder_5 = _2486;
            }
            else
            {
                frontier_phi_57_58_ladder = _2383;
                frontier_phi_57_58_ladder_1 = _2381;
                frontier_phi_57_58_ladder_2 = _2379;
                frontier_phi_57_58_ladder_3 = _2377;
                frontier_phi_57_58_ladder_4 = _2375;
                frontier_phi_57_58_ladder_5 = _2373;
            }
            _2485 = frontier_phi_57_58_ladder_5;
            _2487 = frontier_phi_57_58_ladder_4;
            _2489 = frontier_phi_57_58_ladder_3;
            _2491 = frontier_phi_57_58_ladder_2;
            _2493 = frontier_phi_57_58_ladder_1;
            _2495 = frontier_phi_57_58_ladder;
        }
        float _2500 = isnan(1.0) ? _517 : (isnan(_517) ? 1.0 : min(_517, 1.0));
        _2255 = (_2500 * _2491) + _1692;
        _2257 = (_2500 * _2493) + _1694;
        _2259 = (_2500 * _2495) + _1696;
        _2261 = ((_2485 * _502) * _2500) + _2037;
        _2263 = ((_2487 * _504) * _2500) + _2039;
        _2265 = ((_2489 * _505) * _2500) + _2041;
    }
    else
    {
        _2255 = _1692;
        _2257 = _1694;
        _2259 = _1696;
        _2261 = _2037;
        _2263 = _2039;
        _2265 = _2041;
    }
    uint _2271 = _478 + uint(cbMatDynParam._m0[0u].w);
    float _4185 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4196 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4207 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4218 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _2306 = (((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2255 + ((isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))) * _517))) + ((_2261 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1326)) * cbPerFrame._m0[3u].x)) + ((((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _352) * _392) * cbInstanceData._m0[_2271].x);
    float _2308 = (((((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _352) * _392) * cbInstanceData._m0[_2271].y) + ((_2263 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1326)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2257 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _517)));
    float _2310 = (((((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _352) * _392) * cbInstanceData._m0[_2271].z) + ((_2265 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1326)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2259 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _517)));
    float _2318 = cbInstanceData._m0[_477 + 6u].w * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)));
    float _2323 = _436 / cbSceneParam._m0[86u].x;
    float _2324 = _437 / cbSceneParam._m0[86u].y;
    vec4 _2338 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2323, _2324, (log2((isnan(cbSceneParam._m0[77u].w) ? _430 : (isnan(_430) ? cbSceneParam._m0[77u].w : min(_430, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2340 = _2338.x;
    float _2341 = _2338.y;
    float _2342 = _2338.z;
    float _2343 = _2338.w;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    if (_430 > cbSceneParam._m0[78u].w)
    {
        float _2398 = isnan(_430) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _430 : min(cbSceneParam._m0[80u].w, _430));
        float _2399 = _2398 / _430;
        float _2410 = _2399 * _269;
        float _2411 = _270 * _2399;
        float _2412 = (-0.0) - _2411;
        float _2413 = _2399 * _271;
        float _2415 = (cbSceneParam._m0[77u].w * _2412) / _2398;
        float _2416 = _2415 + cbSceneParam._m0[79u].w;
        float _2417 = cbSceneParam._m0[79u].w - _2411;
        float _2423 = sqrt(((_2410 * _2410) + (_2411 * _2411)) + (_2413 * _2413));
        float _2426 = (1.0 - (cbSceneParam._m0[77u].w / _2398)) * _2423;
        float _2431 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2433 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2586;
        if (abs((_2412 - _2415) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2586 = ((((_2416 > 0.0) ? exp2(_2431 * _2416) : (2.0 - exp2(_2433 * _2416))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2426;
        }
        else
        {
            float _2546 = 1.0 / cbSceneParam._m0[80u].x;
            float _2547 = isnan(_2417) ? _2416 : (isnan(_2416) ? _2417 : max(_2416, _2417));
            float _2548 = isnan(_2417) ? _2416 : (isnan(_2416) ? _2417 : min(_2416, _2417));
            float _2557 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : min(_2547, 0.0));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            _2586 = ((abs(_2423 / _2412) * cbSceneParam._m0[80u].y) * ((((_2557 - _2558) * 2.0) - ((exp2(_2431 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)))) - exp2(_2431 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0))))) * _2546)) - ((exp2(_2433 * _2557) - exp2(_2433 * _2558)) * _2546))) + (_2426 * cbSceneParam._m0[80u].z);
        }
        vec4 _2588 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2323, _2324, 1.0), 0.0);
        float _2597 = exp2((_2586 * (-1.44269502162933349609375)) * (1.0 - _2588.w));
        float _2598 = log2(_2597);
        float _2614 = log2(_2343);
        _2435 = (exp2(_2614 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].x)) * _2588.x) / cbSceneParam._m0[78u].x)) + _2340;
        _2437 = (exp2(_2614 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].y)) * _2588.y) / cbSceneParam._m0[78u].y)) + _2341;
        _2439 = (exp2(_2614 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].z)) * _2588.z) / cbSceneParam._m0[78u].z)) + _2342;
        _2441 = _2597 * _2343;
    }
    else
    {
        _2435 = _2340;
        _2437 = _2341;
        _2439 = _2342;
        _2441 = _2343;
    }
    float _2453 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2454 = _2453 == 3.0;
    float _2455 = log2(_2441);
    float _2462 = exp2(_2455 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0)));
    float _2463 = exp2(_2455 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0)));
    float _2464 = exp2(_2455 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0)));
    float _2473 = (_2453 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2473 * (_2454 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2435)));
    SV_Target.y = _2473 * (_2454 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2437)));
    SV_Target.z = _2473 * (_2454 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2439)));
    SV_Target.w = _2318;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2318;
}


