#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D I_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1038;
float _3739;
float _3740;
float _3741;
float _3742;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    float _269 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _279 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _269);
    float _280 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _269);
    float _281 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _269);
    vec4 _299 = texture(sampler2D(I_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _305 = _299.w;
    float _306 = _299.x * cbMtdParam._m0[9u].x;
    float _307 = _299.y * cbMtdParam._m0[9u].y;
    float _308 = _299.z * cbMtdParam._m0[9u].z;
    vec4 _320 = texture(sampler2D(I_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _326 = cbMtdParam._m0[11u].x + _320.x;
    vec4 _338 = texture(sampler2D(I_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _342 = _338.z;
    float _346 = (_338.x * 2.0) + (-1.0);
    float _348 = (_338.y * 2.0) + (-1.0);
    float _349 = dot(vec2(_346, _348), vec2(_346, _348));
    float _3751 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _355 = sqrt(1.0 - (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))));
    float _370 = sqrt(((_279 * _279) + (_280 * _280)) + (_281 * _281));
    float _373 = cbMtdParam._m0[12u].x - cbMtdParam._m0[12u].w;
    float _375 = (_370 - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0)));
    float _3767 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _377 = 1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)));
    float _385 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3778 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _396 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _403 = inversesqrt(dot(vec3(_279, _280, _281), vec3(_279, _280, _281)));
    float _410 = dot(vec4(_403 * _279, _403 * _280, _403 * _281, 0.0), vec4(_396 * _223, _396 * _224, _396 * _225, 0.0)) - (((_386 * _386) * cbMtdParam._m0[11u].w) * (3.0 - (_386 * 2.0)));
    float _3789 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _417 = exp2(log2(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _421 = cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y;
    float _432 = gl_FragCoord.x * 0.125;
    float _434 = gl_FragCoord.y * 0.125;
    float _445 = fma(_355, _223, fma(_348, _215 * TANGENT.x, (_201 * _193) * _346));
    float _448 = fma(_355, _224, fma(_348, _215 * TANGENT.y, (_201 * _194) * _346));
    float _451 = fma(_355, _225, fma(_348, _215 * TANGENT.z, (_201 * _195) * _346));
    float _455 = inversesqrt(dot(vec3(_445, _448, _451), vec3(_445, _448, _451)));
    float _456 = _455 * _445;
    float _457 = _455 * _448;
    float _458 = _455 * _451;
    float _3810 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _459 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _460 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3843 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3854 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3865 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _464 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    if (!(((floatBitsToUint(cbSceneParam._m0[69u]).w != 0u) ? ((_370 - cbMtdParam._m0[12u].y) / (isnan(0.001000000047497451305389404296875) ? _421 : (isnan(_421) ? 0.001000000047497451305389404296875 : max(_421, 0.001000000047497451305389404296875)))) : 1.0) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_432, _434)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _483 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _532 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _523);
    float _533 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _523);
    float _534 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _523);
    float _538 = inversesqrt(dot(vec3(_532, _533, _534), vec3(_532, _533, _534)));
    float _539 = _532 * _538;
    float _540 = _533 * _538;
    float _541 = _534 * _538;
    vec4 _543 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_432, _434));
    float _545 = _543.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _719 = sqrt(((_532 * _532) + (_533 * _533)) + (_534 * _534));
        float _725 = (cbMatDynParam._m0[5u].x * _719) + cbMatDynParam._m0[5u].y;
        float _3876 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _730 = (cbMatDynParam._m0[5u].z * _719) + cbMatDynParam._m0[5u].w;
        float _3887 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) - _726)) + _726) < ((_545 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _557 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _558 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _578 = fma(_458, cbSceneParam._m0[5u].z, fma(_457, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _456));
    float _581 = fma(_458, cbSceneParam._m0[6u].z, fma(_457, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _456));
    float _584 = fma(_458, cbSceneParam._m0[7u].z, fma(_457, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _456));
    uint _597 = uint(roundEven(NORMAL.w)) * 13u;
    uint _598 = _597 + 9u;
    uint _599 = _598 + uint(cbMatDynParam._m0[0u].w);
    float _605 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_599].x;
    float _606 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * cbInstanceData._m0[_599].y;
    float _607 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_599].z;
    float _3898 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _611 = 1.0 - _464;
    float _612 = _608 * _611;
    float _613 = _609 * _611;
    float _614 = _610 * _611;
    float _619 = (_608 + (-0.039999999105930328369140625)) * _464;
    float _620 = (_609 + (-0.039999999105930328369140625)) * _464;
    float _621 = (_610 + (-0.039999999105930328369140625)) * _464;
    float _622 = _619 + 0.039999999105930328369140625;
    float _624 = _620 + 0.039999999105930328369140625;
    float _625 = _621 + 0.039999999105930328369140625;
    vec4 _634 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _557, cbSceneParam._m0[86u].y * _558));
    float _637 = _634.x * TEXCOORD_1.w;
    float _638 = dot(vec3(_456, _457, _458), vec3(_539, _540, _541));
    float _641 = _638 * 2.0;
    float _645 = (_641 * _456) - _539;
    float _646 = (_641 * _457) - _540;
    float _647 = (_641 * _458) - _541;
    float _651 = abs(dot(vec3(_539, _540, _541), vec3(_456, _457, _458)));
    float _3931 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _653 = sqrt(_460);
    float _665 = exp2((_653 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_653 * 3.0));
    float _671 = (1.0 - _665) * ((_653 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _672 = _665 * _653;
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1037;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _762 = fma(_708, cbModelParam._m0[26u].z, fma(_704, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _700));
        float _766 = fma(_708, cbModelParam._m0[27u].z, fma(_704, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _700));
        float _770 = fma(_708, cbModelParam._m0[28u].z, fma(_704, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _700));
        float _795 = _700 + _456;
        float _796 = _704 + _457;
        float _797 = _708 + _458;
        float _807 = fma(_797, cbModelParam._m0[26u].z, fma(_796, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _795)) - _762;
        float _808 = fma(_797, cbModelParam._m0[27u].z, fma(_796, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _795)) - _766;
        float _809 = fma(_797, cbModelParam._m0[28u].z, fma(_796, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _795)) - _770;
        float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
        float _826 = ((_813 * _807) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_762 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_813 * _808) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_766 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_813 * _809) / cbModelParam._m0[34u].z) + ((((((_770 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        float _865 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_831.x + (-0.5));
        float _867 = _865 * (_831.y + (-0.5));
        float _868 = _865 * (_831.z + (-0.5));
        float _875 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_838.x + (-0.5));
        float _877 = _875 * (_838.y + (-0.5));
        float _878 = _875 * (_838.z + (-0.5));
        float _885 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_845.x + (-0.5));
        float _887 = _885 * (_845.y + (-0.5));
        float _888 = _885 * (_845.z + (-0.5));
        float _895 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_852.x + (-0.5));
        float _897 = _895 * (_852.y + (-0.5));
        float _898 = _895 * (_852.z + (-0.5));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = _866 * 0.5;
        float _903 = _876 * 0.5;
        float _904 = _886 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _919 = (dot(vec3(_456, _457, _458), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _929 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3979 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_931 + 1.0))) + _936) * _899;
        float _946 = _867 * 0.5;
        float _947 = _877 * 0.5;
        float _948 = _887 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_456, _457, _458), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _4012 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_973 + 1.0))) + _978) * _900;
        float _988 = _868 * 0.5;
        float _989 = _878 * 0.5;
        float _990 = _888 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_456, _457, _458), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _4045 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1015 + 1.0))) + _1020) * _901;
        _1037 = _868;
        _1039 = _867;
        _1040 = _866;
        _1041 = _878;
        _1042 = _877;
        _1043 = _876;
        _1044 = _888;
        _1045 = _887;
        _1046 = _886;
        _1047 = _901;
        _1048 = _900;
        _1049 = _899;
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
    }
    else
    {
        _1037 = _1038;
        _1039 = _1038;
        _1040 = _1038;
        _1041 = _1038;
        _1042 = _1038;
        _1043 = _1038;
        _1044 = _1038;
        _1045 = _1038;
        _1046 = _1038;
        _1047 = _1038;
        _1048 = _1038;
        _1049 = _1038;
        _1050 = 0.0;
        _1051 = 0.0;
        _1052 = 0.0;
    }
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1078 = fma(_708, cbModelParam._m0[30u].z, fma(_704, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _700));
        float _1082 = fma(_708, cbModelParam._m0[31u].z, fma(_704, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _700));
        float _1086 = fma(_708, cbModelParam._m0[32u].z, fma(_704, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _700));
        float _1109 = _700 + _456;
        float _1110 = _704 + _457;
        float _1111 = _708 + _458;
        float _1121 = fma(_1111, cbModelParam._m0[30u].z, fma(_1110, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1109)) - _1078;
        float _1122 = fma(_1111, cbModelParam._m0[31u].z, fma(_1110, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1109)) - _1082;
        float _1123 = fma(_1111, cbModelParam._m0[32u].z, fma(_1110, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1109)) - _1086;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1078 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1082 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[35u].z) + ((((((_1086 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1177 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1144.x + (-0.5));
        float _1179 = _1177 * (_1144.y + (-0.5));
        float _1180 = _1177 * (_1144.z + (-0.5));
        float _1187 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1151.x + (-0.5));
        float _1189 = _1187 * (_1151.y + (-0.5));
        float _1190 = _1187 * (_1151.z + (-0.5));
        float _1197 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1158.x + (-0.5));
        float _1199 = _1197 * (_1158.y + (-0.5));
        float _1200 = _1197 * (_1158.z + (-0.5));
        float _1207 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1165.x + (-0.5));
        float _1209 = _1207 * (_1165.y + (-0.5));
        float _1210 = _1207 * (_1165.z + (-0.5));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = _1178 * 0.5;
        float _1215 = _1188 * 0.5;
        float _1216 = _1198 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_456, _457, _458), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _4108 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1241 + 1.0))) + _1246) * _1211;
        float _1256 = _1179 * 0.5;
        float _1257 = _1189 * 0.5;
        float _1258 = _1199 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_456, _457, _458), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _4141 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1283 + 1.0))) + _1288) * _1212;
        float _1298 = _1180 * 0.5;
        float _1299 = _1190 * 0.5;
        float _1300 = _1200 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_456, _457, _458), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4174 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1325 + 1.0))) + _1330) * _1213;
        _1347 = _1180;
        _1348 = _1179;
        _1349 = _1178;
        _1350 = _1190;
        _1351 = _1189;
        _1352 = _1188;
        _1353 = _1200;
        _1354 = _1199;
        _1355 = _1198;
        _1356 = _1213;
        _1357 = _1212;
        _1358 = _1211;
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1038;
        _1348 = _1038;
        _1349 = _1038;
        _1350 = _1038;
        _1351 = _1038;
        _1352 = _1038;
        _1353 = _1038;
        _1354 = _1038;
        _1355 = _1038;
        _1356 = _1038;
        _1357 = _1038;
        _1358 = _1038;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1050)) + _1050;
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1051)) + _1051;
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1052)) + _1052;
    float _1394 = fma(_1373, cbSceneParam._m0[89u].z, fma(_1372, cbSceneParam._m0[89u].y, _1371 * cbSceneParam._m0[89u].x));
    float _1397 = fma(_1373, cbSceneParam._m0[90u].z, fma(_1372, cbSceneParam._m0[90u].y, _1371 * cbSceneParam._m0[90u].x));
    float _1400 = fma(_1373, cbSceneParam._m0[91u].z, fma(_1372, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1371));
    float _1415 = _645 * 0.5;
    float _1416 = _646 * 0.5;
    float _1417 = _647 * 0.5;
    float _1418 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1421 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1424 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1458;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1431 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1037, _1041, _1044, _1047));
        float _1435 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1439 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1040, _1043, _1046, _1049));
        float _1446 = dot(vec4(cbModelParam._m0[39u]), vec4(_1415, _1416, _1417, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1469;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1460 = dot(vec4(cbModelParam._m0[40u]), vec4(_1415, _1416, _1417, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1473 = (_1469 * cbModelParam._m0[1u].x) + (_1458 * (1.0 - cbModelParam._m0[1u].x));
    float _1483 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _460);
    float _1484 = isnan(_1483) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1483 : min(cbModelParam._m0[25u].z, _1483));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1533 = fma(_708, cbModelParam._m0[13u].z, fma(_704, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _700)) + cbModelParam._m0[13u].w;
        float _1537 = fma(_708, cbModelParam._m0[14u].z, fma(_704, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _700)) + cbModelParam._m0[14u].w;
        float _1541 = fma(_708, cbModelParam._m0[15u].z, fma(_704, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _700)) + cbModelParam._m0[15u].w;
        float _1544 = fma(_647, cbModelParam._m0[13u].z, fma(_646, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _645));
        float _1547 = fma(_647, cbModelParam._m0[14u].z, fma(_646, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _645));
        float _1550 = fma(_647, cbModelParam._m0[15u].z, fma(_646, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _645));
        float _1578;
        if (_1544 > 0.0)
        {
            _1578 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1578 = frontier_phi_21_19_ladder;
        }
        float _1752;
        if (_1547 > 0.0)
        {
            _1752 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1752 = frontier_phi_30_26_ladder;
        }
        float _2048;
        if (_1550 > 0.0)
        {
            _2048 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2048 = frontier_phi_42_37_ladder;
        }
        float _2050 = isnan(_1752) ? _1578 : (isnan(_1578) ? _1752 : min(_1578, _1752));
        float _2051 = isnan(_2048) ? _2050 : (isnan(_2050) ? _2048 : min(_2050, _2048));
        float _2055 = (_2051 * _1544) + _1533;
        float _2056 = (_2051 * _1547) + _1537;
        float _2057 = (_2051 * _1550) + _1541;
        float _2058 = _2051 * 9.9999997473787516355514526367188e-05;
        float _2060 = (-1.0) - _2058;
        float _2062 = _2058 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2057 > _2062) || ((_2057 < _2060) || ((_2056 > _2062) || ((_2056 < _2060) || ((_2055 < _2060) || (_2055 > _2062))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2202 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2057, cbModelParam._m0[9u].z, fma(_2056, cbModelParam._m0[9u].y, _2055 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2057, cbModelParam._m0[10u].z, fma(_2056, cbModelParam._m0[10u].y, _2055 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2057, cbModelParam._m0[11u].z, fma(_2056, cbModelParam._m0[11u].y, _2055 * cbModelParam._m0[11u].x))), _1484);
            frontier_phi_20_42_ladder = _2202.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2202.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2202.x * cbModelParam._m0[1u].y;
        }
        _1566 = frontier_phi_20_42_ladder_2;
        _1568 = frontier_phi_20_42_ladder_1;
        _1570 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_645, _646, _647), _1484);
        _1566 = _1554.x * cbModelParam._m0[1u].y;
        _1568 = _1554.y * cbModelParam._m0[1u].y;
        _1570 = _1554.z * cbModelParam._m0[1u].y;
    }
    float _1574 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _460);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1574 : min(cbModelParam._m0[25u].w, _1574));
    float _1667;
    float _1669;
    float _1671;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1631 = fma(_708, cbModelParam._m0[21u].z, fma(_704, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _700)) + cbModelParam._m0[21u].w;
        float _1635 = fma(_708, cbModelParam._m0[22u].z, fma(_704, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _700)) + cbModelParam._m0[22u].w;
        float _1639 = fma(_708, cbModelParam._m0[23u].z, fma(_704, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _700)) + cbModelParam._m0[23u].w;
        float _1642 = fma(_647, cbModelParam._m0[21u].z, fma(_646, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _645));
        float _1645 = fma(_647, cbModelParam._m0[22u].z, fma(_646, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _645));
        float _1648 = fma(_647, cbModelParam._m0[23u].z, fma(_646, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _645));
        float _1757;
        if (_1642 > 0.0)
        {
            _1757 = abs((1.0 - _1631) / _1642);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1631 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1757 = frontier_phi_32_28_ladder;
        }
        float _2075;
        if (_1645 > 0.0)
        {
            _2075 = abs((1.0 - _1635) / _1645);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1635 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2075 = frontier_phi_44_39_ladder;
        }
        float _2413;
        if (_1648 > 0.0)
        {
            _2413 = abs((1.0 - _1639) / _1648);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1639 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2413 = frontier_phi_54_51_ladder;
        }
        float _2415 = isnan(_2075) ? _1757 : (isnan(_1757) ? _2075 : min(_1757, _2075));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1642) + _1631;
        float _2421 = (_2416 * _1645) + _1635;
        float _2422 = (_2416 * _1648) + _1639;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2423;
        float _2426 = _2423 + 1.0;
        float frontier_phi_29_54_ladder;
        float frontier_phi_29_54_ladder_1;
        float frontier_phi_29_54_ladder_2;
        if ((_2422 > _2426) || ((_2422 < _2424) || ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 < _2424) || (_2420 > _2426))))))
        {
            frontier_phi_29_54_ladder = 0.0;
            frontier_phi_29_54_ladder_1 = 0.0;
            frontier_phi_29_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2422, cbModelParam._m0[17u].z, fma(_2421, cbModelParam._m0[17u].y, _2420 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2422, cbModelParam._m0[18u].z, fma(_2421, cbModelParam._m0[18u].y, _2420 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2422, cbModelParam._m0[19u].z, fma(_2421, cbModelParam._m0[19u].y, _2420 * cbModelParam._m0[19u].x))), _1575);
            frontier_phi_29_54_ladder = _2544.z * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_1 = _2544.y * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_2 = _2544.x * cbModelParam._m0[1u].z;
        }
        _1667 = frontier_phi_29_54_ladder_2;
        _1669 = frontier_phi_29_54_ladder_1;
        _1671 = frontier_phi_29_54_ladder;
    }
    else
    {
        vec4 _1651 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_645, _646, _647), _1575);
        _1667 = _1651.x * cbModelParam._m0[1u].z;
        _1669 = _1651.y * cbModelParam._m0[1u].z;
        _1671 = _1651.z * cbModelParam._m0[1u].z;
    }
    float _1684 = (((_671 * _622) + _672) * _637) * ((cbModelParam._m0[1u].w * (_1667 - _1566)) + _1566);
    float _1686 = (((_671 * _624) + _672) * _637) * ((cbModelParam._m0[1u].w * (_1669 - _1568)) + _1568);
    float _1688 = (((_671 * _625) + _672) * _637) * ((cbModelParam._m0[1u].w * (_1671 - _1570)) + _1570);
    float _1691 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1684 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1684 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, _1684 * cbSceneParam._m0[91u].x));
    float _1731 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1735 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1739 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1743 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1744 = _1731 / _1743;
    float _1745 = _1735 / _1743;
    float _1746 = _1739 / _1743;
    float _1893;
    float _1894;
    float _1895;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1773 = ((uint(_1746 > cbSceneParam._m0[59u].y) + uint(_1746 > cbSceneParam._m0[59u].x)) + uint(_1746 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1774 = _1773 + 43u;
        uint _1782 = _1773 + 44u;
        uint _1790 = _1773 + 45u;
        uint _1798 = _1773 + 46u;
        float _1809 = fma(_1743, cbSceneParam._m0[_1774].w, fma(_1739, cbSceneParam._m0[_1774].z, fma(_1735, cbSceneParam._m0[_1774].y, _1731 * cbSceneParam._m0[_1774].x)));
        float _1813 = fma(_1743, cbSceneParam._m0[_1782].w, fma(_1739, cbSceneParam._m0[_1782].z, fma(_1735, cbSceneParam._m0[_1782].y, _1731 * cbSceneParam._m0[_1782].x)));
        float _1821 = fma(_1743, cbSceneParam._m0[_1798].w, fma(_1739, cbSceneParam._m0[_1798].z, fma(_1735, cbSceneParam._m0[_1798].y, _1731 * cbSceneParam._m0[_1798].x)));
        float _1826 = cbSceneParam._m0[33u].z * _1821;
        float _1828 = cbSceneParam._m0[33u].w * _1821;
        float _1831 = fma(_1743, cbSceneParam._m0[_1790].w, fma(_1739, cbSceneParam._m0[_1790].z, fma(_1735, cbSceneParam._m0[_1790].y, _1731 * cbSceneParam._m0[_1790].x))) / _1821;
        float _1879 = (cbSceneParam._m0[33u].x - sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746))) * cbSceneParam._m0[33u].y;
        float _4300 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1886 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1826 + _1809) / _1821, (_1828 + _1813) / _1821), _1831), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 + _1809) / _1821, (_1813 - _1826) / _1821), _1831), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1809 - _1826) / _1821, (_1813 - _1828) / _1821), _1831), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1809 - _1828) / _1821, (_1826 + _1813) / _1821), _1831), 0.0)).x), vec4(0.25)));
        _1893 = 1.0 - (_1886 * cbSceneParam._m0[34u].x);
        _1894 = 1.0 - (_1886 * cbSceneParam._m0[34u].y);
        _1895 = 1.0 - (_1886 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1893 = 1.0;
        _1894 = 1.0;
        _1895 = 1.0;
    }
    float _1959;
    float _1961;
    float _1963;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1947 = fma(_1743, cbSceneParam._m0[63u].w, fma(_1739, cbSceneParam._m0[63u].z, fma(_1735, cbSceneParam._m0[63u].y, _1731 * cbSceneParam._m0[63u].x)));
        float _1948 = fma(_1743, cbSceneParam._m0[60u].w, fma(_1739, cbSceneParam._m0[60u].z, fma(_1735, cbSceneParam._m0[60u].y, _1731 * cbSceneParam._m0[60u].x))) / _1947;
        float _1949 = fma(_1743, cbSceneParam._m0[61u].w, fma(_1739, cbSceneParam._m0[61u].z, fma(_1735, cbSceneParam._m0[61u].y, _1731 * cbSceneParam._m0[61u].x))) / _1947;
        float frontier_phi_41_40_ladder;
        float frontier_phi_41_40_ladder_1;
        float frontier_phi_41_40_ladder_2;
        if ((((_1948 >= cbSceneParam._m0[64u].x) && (_1949 >= cbSceneParam._m0[64u].y)) && (_1948 <= cbSceneParam._m0[64u].z)) && (_1949 <= cbSceneParam._m0[64u].w))
        {
            float _2088 = fma(_1743, cbSceneParam._m0[62u].w, fma(_1739, cbSceneParam._m0[62u].z, fma(_1735, cbSceneParam._m0[62u].y, _1731 * cbSceneParam._m0[62u].x))) / _1947;
            float _2092 = isnan(cbSceneParam._m0[41u].w) ? _2088 : (isnan(_2088) ? cbSceneParam._m0[41u].w : max(_2088, cbSceneParam._m0[41u].w));
            float _2135 = (cbSceneParam._m0[33u].x - sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746))) * cbSceneParam._m0[33u].y;
            float _4316 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
            float _2142 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1948, cbSceneParam._m0[33u].w + _1949), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1948, _1949 - cbSceneParam._m0[33u].z), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1948 - cbSceneParam._m0[33u].z, _1949 - cbSceneParam._m0[33u].w), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1948 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1949), _2092), 0.0)).x), vec4(0.25)));
            float _2146 = 1.0 - (_2142 * cbSceneParam._m0[34u].x);
            float _2147 = 1.0 - (_2142 * cbSceneParam._m0[34u].y);
            float _2148 = 1.0 - (_2142 * cbSceneParam._m0[34u].z);
            frontier_phi_41_40_ladder = isnan(_2147) ? _1894 : (isnan(_1894) ? _2147 : min(_1894, _2147));
            frontier_phi_41_40_ladder_1 = isnan(_2146) ? _1893 : (isnan(_1893) ? _2146 : min(_1893, _2146));
            frontier_phi_41_40_ladder_2 = isnan(_2148) ? _1895 : (isnan(_1895) ? _2148 : min(_1895, _2148));
        }
        else
        {
            frontier_phi_41_40_ladder = _1894;
            frontier_phi_41_40_ladder_1 = _1893;
            frontier_phi_41_40_ladder_2 = _1895;
        }
        _1959 = frontier_phi_41_40_ladder_1;
        _1961 = frontier_phi_41_40_ladder;
        _1963 = frontier_phi_41_40_ladder_2;
    }
    else
    {
        _1959 = _1893;
        _1961 = _1894;
        _1963 = _1895;
    }
    uvec4 _1968 = floatBitsToUint(cbInstanceData._m0[_597 + 5u]);
    uint _1970 = _1968.x * 14u;
    uint _1971 = _1970 + 13u;
    float _1978 = _637 + (-1.0);
    float _1983 = (cbLight._m0[_1971].x * _1978) + 1.0;
    float _1984 = (cbLight._m0[_1971].y * _1978) + 1.0;
    float _1985 = (cbLight._m0[_1971].z * _1978) + 1.0;
    float _1986 = (cbLight._m0[_1971].w * _1978) + 1.0;
    uint _1987 = _1970 + 5u;
    float _1993 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _1997 = _1970 + 4u;
    float _2007 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _2011 = _1970 | 1u;
    float _2022 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_456, _457, _458));
    float _2025 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_456, _457, _458));
    float _4352 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _4363 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2030 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.3183098733425140380859375;
    float _2032 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.3183098733425140380859375;
    float _2039 = ((cbLight._m0[_1987].x * _1993) * _2032) + (((cbLight._m0[_1997].x * _1959) * _2007) * _2030);
    float _2040 = ((_1993 * cbLight._m0[_1987].y) * _2032) + (((cbLight._m0[_1997].y * _1961) * _2007) * _2030);
    float _2041 = ((_1993 * cbLight._m0[_1987].z) * _2032) + (((cbLight._m0[_1997].z * _1963) * _2007) * _2030);
    uvec4 _2045 = floatBitsToUint(cbLight._m0[_1970 + 12u]);
    bool _2047 = _2045.x == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2047)
    {
        _2149 = _2039;
        _2151 = _2040;
        _2153 = _2041;
    }
    else
    {
        uint _2157 = _1970 + 6u;
        float _2173 = (dot(vec3(cbLight._m0[_1970 + 2u].xyz), vec3(_456, _457, _458)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _4374 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2176 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2149 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _2039;
        _2151 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _2040;
        _2153 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _2041;
    }
    bool _2156 = _2045.y == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2156)
    {
        _2211 = _2149;
        _2213 = _2151;
        _2215 = _2153;
    }
    else
    {
        uint _2384 = _1970 + 7u;
        float _2400 = (dot(vec3(cbLight._m0[_1970 + 3u].xyz), vec3(_456, _457, _458)) * 0.5) + 0.5;
        float _2401 = _2400 * _2400;
        float _4390 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2402 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2403 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2211 = (((cbLight._m0[_2384].x * 0.3183098733425140380859375) * _2402) * _2403) + _2149;
        _2213 = (((cbLight._m0[_2384].y * 0.3183098733425140380859375) * _2402) * _2403) + _2151;
        _2215 = (((cbLight._m0[_2384].z * 0.3183098733425140380859375) * _2402) * _2403) + _2153;
    }
    uint _2218 = _1970 + 8u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _460) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_1970].x + _539;
    float _2234 = cbLight._m0[_1970].y + _540;
    float _2235 = cbLight._m0[_1970].z + _541;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_1970].xyz));
    float _4406 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _4417 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _2247 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2248 = dot(vec3(_456, _457, _458), vec3(_2240, _2241, _2242));
    float _4428 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2240, _2241, _2242));
    float _4439 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2232 * _2232;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2268 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
    float _2269 = 0.959999978542327880859375 - _619;
    float _2271 = 0.959999978542327880859375 - _620;
    float _2272 = 0.959999978542327880859375 - _621;
    float _2279 = 1.0 - _2232;
    float _2290 = (0.5 / (((_2247 * ((_2246 * _2279) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2279) + _2232) * _2246))) * _2246;
    float _4450 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    uint _2306 = _1970 + 9u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _460) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2011].x + _539;
    float _2320 = cbLight._m0[_2011].y + _540;
    float _2321 = cbLight._m0[_2011].z + _541;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_2011].xyz));
    float _4461 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2333 = dot(vec3(_456, _457, _458), vec3(_2326, _2327, _2328));
    float _4472 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2326, _2327, _2328));
    float _4483 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2318 * _2318;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0);
    float _2359 = 1.0 - _2318;
    float _2369 = (0.5 / (((_2247 * ((_2332 * _2359) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2359) + _2318) * _2332))) * _2332;
    float _4494 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    float _2381 = (((((_2352 * _2269) + _622) * cbLight._m0[_2306].x) * _2371) * _1993) + ((((cbLight._m0[_2218].x * _1959) * ((_2268 * _2269) + _622)) * _2292) * _2007);
    float _2382 = (((((_2352 * _2271) + _624) * cbLight._m0[_2306].y) * _2371) * _1993) + ((((cbLight._m0[_2218].y * _1961) * ((_2268 * _2271) + _624)) * _2292) * _2007);
    float _2383 = (((((_2352 * _2272) + _625) * cbLight._m0[_2306].z) * _2371) * _1993) + ((((cbLight._m0[_2218].z * _1963) * ((_2268 * _2272) + _625)) * _2292) * _2007);
    float _2439;
    float _2441;
    float _2443;
    if (_2047)
    {
        _2439 = _2381;
        _2441 = _2382;
        _2443 = _2383;
    }
    else
    {
        uint _2445 = _1970 + 2u;
        uint _2449 = _1970 + 10u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _460) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _539;
        float _2466 = cbLight._m0[_2445].y + _540;
        float _2467 = cbLight._m0[_2445].z + _541;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_2445].xyz));
        float _4505 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2479 = dot(vec3(_456, _457, _458), vec3(_2472, _2473, _2474));
        float _4516 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4527 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
        float _2505 = 1.0 - _2464;
        float _2515 = (0.5 / (((_2247 * ((_2478 * _2505) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2505) + _2464) * _2478))) * _2478;
        float _4538 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2517 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2518 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2439 = (((((_2498 * _2269) + _622) * cbLight._m0[_2449].x) * _2517) * _2518) + _2381;
        _2441 = (((((_2498 * _2271) + _624) * cbLight._m0[_2449].y) * _2517) * _2518) + _2382;
        _2443 = (((((_2498 * _2272) + _625) * cbLight._m0[_2449].z) * _2517) * _2518) + _2383;
    }
    float _2549;
    float _2551;
    float _2553;
    if (_2156)
    {
        _2549 = _2439;
        _2551 = _2441;
        _2553 = _2443;
    }
    else
    {
        uint _2560 = _1970 + 3u;
        uint _2564 = _1970 + 11u;
        float _2578 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2560].w)) * _460) * 0.949999988079071044921875);
        float _2579 = _2578 * _2578;
        float _2580 = cbLight._m0[_2560].x + _539;
        float _2581 = cbLight._m0[_2560].y + _540;
        float _2582 = cbLight._m0[_2560].z + _541;
        float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
        float _2587 = _2586 * _2580;
        float _2588 = _2586 * _2581;
        float _2589 = _2586 * _2582;
        float _2590 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_2560].xyz));
        float _4554 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2594 = dot(vec3(_456, _457, _458), vec3(_2587, _2588, _2589));
        float _4565 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2598 = dot(vec3(cbLight._m0[_2560].xyz), vec3(_2587, _2588, _2589));
        float _4576 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2602 = _2579 * _2579;
        float _2606 = ((_2597 * _2597) * (_2602 + (-1.0))) + 1.0;
        float _2613 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
        float _2620 = 1.0 - _2579;
        float _2630 = (0.5 / (((_2247 * ((_2593 * _2620) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2620) + _2579) * _2593))) * _2593;
        float _4587 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2632 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2602 / ((_2606 * _2606) * 3.141590118408203125));
        float _2633 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2549 = (((((_2613 * _2269) + _622) * cbLight._m0[_2564].x) * _2632) * _2633) + _2439;
        _2551 = (((((_2613 * _2271) + _624) * cbLight._m0[_2564].y) * _2632) * _2633) + _2441;
        _2553 = (((((_2613 * _2272) + _625) * cbLight._m0[_2564].z) * _2632) * _2633) + _2443;
    }
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_1968.y == 0u)
    {
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.x;
        uint _2666 = uint((float(_2654.y) * floor(float(uint(cbSceneParam._m0[85u].y * _558) / _2655))) + floor(float(uint(cbSceneParam._m0[85u].x * _557) / _2655)));
        float _2676 = (log2(_1746 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2677 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        uint _2680 = uint(isnan(14.0) ? _2677 : (isnan(_2677) ? 14.0 : min(_2677, 14.0)));
        uvec4 _2685 = texelFetch(g_lightClusterGridBuffer, int(((_2680 << 2u) + (_2666 << 6u)) >> 2u));
        uint _2686 = _2685.x;
        uint _2687 = _2654.z;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        if (((((1u << ((_2687 >> 4u) & 15u)) + 4294967295u) & _2686) == 0u) || ((_2687 & 240u) == 0u))
        {
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
        }
        else
        {
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            uint _2953 = 0u;
            uint _2962;
            bool _2963;
            for (;;)
            {
                _2962 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_2953 << 2u)) >> 2u)).x;
                _2963 = _2962 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2963)
                {
                    frontier_phi_75_pred = _2952;
                    frontier_phi_75_pred_1 = _2951;
                    frontier_phi_75_pred_2 = _2950;
                    frontier_phi_75_pred_3 = _2949;
                    frontier_phi_75_pred_4 = _2948;
                    frontier_phi_75_pred_5 = _2947;
                }
                else
                {
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    uint _3098;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2962;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    for (;;)
                    {
                        uint _3102 = uint(findLSB(_3098)) + (_2953 << 5u);
                        uint _3099 = (_3098 + 4294967295u) & _3098;
                        uint _3104 = _3102 * 48u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 3u)).x));
                        uint _3124 = (_3102 * 48u) + 4u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 3u)).x));
                        uint _3143 = (_3102 * 48u) + 8u;
                        vec3 _3154 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x));
                        float _3158 = _3118.x - _1744;
                        float _3159 = _3118.y - _1745;
                        float _3160 = _3118.z - _1746;
                        float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                        float _3164 = inversesqrt(_3161);
                        float _3165 = _3164 * _3158;
                        float _3166 = _3164 * _3159;
                        float _3167 = _3164 * _3160;
                        float _3168 = dot(vec3(_578, _581, _584), vec3(_3165, _3166, _3167));
                        float _3173 = 1.0 - (_3161 * _3118.w);
                        float _4613 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3174 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                        float _3175 = sqrt(_3161) * _3137.w;
                        float _3178 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                        float _3179 = _3178 * _3178;
                        float _3182 = ((1.0 - _3179) * _3168) + _3179;
                        float _3185 = _3175 * _3175;
                        float _3189 = ((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3174) / ((_3185 * 0.699999988079071044921875) + 1.0);
                        float _3193 = (-0.0) - _1744;
                        float _3194 = (-0.0) - _1745;
                        float _3195 = (-0.0) - _1746;
                        float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3209 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                        float _3210 = 1.0 - _653;
                        float _3217 = sqrt(1.0 - ((1.0 - (_3210 * _3210)) * (1.0 - (_3209 * _3209))));
                        float _3218 = _3217 * _3217;
                        float _3219 = _3218 * _3218;
                        float _3220 = _3200 + _3165;
                        float _3221 = _3201 + _3166;
                        float _3222 = _3202 + _3167;
                        float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
                        float _3230 = dot(vec3(_578, _581, _584), vec3(_3200, _3201, _3202));
                        float _4629 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3233 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3234 = dot(vec3(_578, _581, _584), vec3(_3226 * _3220, _3226 * _3221, _3226 * _3222));
                        float _4640 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3237 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3241 = ((_3237 * _3237) * (_3219 + (-1.0))) + 1.0;
                        float _3242 = _3178 * _3218;
                        float _3243 = _3242 * _3242;
                        float _3246 = ((1.0 - _3243) * _3168) + _3243;
                        float _4651 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3247 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3248 = 1.0 - _3218;
                        float _3258 = (0.5 / (((_3247 * ((_3233 * _3248) + _3218)) + 9.9999999392252902907785028219223e-09) + (((_3247 * _3248) + _3218) * _3233))) * _3247;
                        float _4662 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3269 = (((_3219 * 3.1415927410125732421875) * (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) / ((_3241 * _3241) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125))) * _3174;
                        _3022 = (_3189 * _3137.x) + _3095;
                        _3023 = (_3189 * _3137.y) + _3096;
                        _3024 = (_3189 * _3137.z) + _3097;
                        _3019 = (_3269 * _3154.x) + _3092;
                        _3020 = (_3269 * _3154.y) + _3093;
                        _3021 = (_3269 * _3154.z) + _3094;
                        if (_3099 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3099;
                        }
                    }
                    frontier_phi_75_pred = _3024;
                    frontier_phi_75_pred_1 = _3023;
                    frontier_phi_75_pred_2 = _3022;
                    frontier_phi_75_pred_3 = _3021;
                    frontier_phi_75_pred_4 = _3020;
                    frontier_phi_75_pred_5 = _3019;
                }
                _2806 = frontier_phi_75_pred;
                _2804 = frontier_phi_75_pred_1;
                _2802 = frontier_phi_75_pred_2;
                _2800 = frontier_phi_75_pred_3;
                _2798 = frontier_phi_75_pred_4;
                _2796 = frontier_phi_75_pred_5;
                uint _2954 = _2953 + 1u;
                if (_2954 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2947 = _2796;
                    _2948 = _2798;
                    _2949 = _2800;
                    _2950 = _2802;
                    _2951 = _2804;
                    _2952 = _2806;
                    _2953 = _2954;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
        }
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.z;
        uint _2812 = (_2810 >> 8u) & 15u;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((4294967295u << _2812) & _2686) == 0u)
        {
            _2915 = _2795;
            _2917 = _2797;
            _2919 = _2799;
            _2921 = _2801;
            _2923 = _2803;
            _2925 = _2805;
        }
        else
        {
            float _2940 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
            float _2941 = _2940 * _1744;
            float _2942 = _2940 * _1745;
            float _2943 = _2940 * _1746;
            float frontier_phi_67_68_ladder;
            float frontier_phi_67_68_ladder_1;
            float frontier_phi_67_68_ladder_2;
            float frontier_phi_67_68_ladder_3;
            float frontier_phi_67_68_ladder_4;
            float frontier_phi_67_68_ladder_5;
            if (_2812 < ((_2810 >> 12u) & 15u))
            {
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _3075 = _2795;
                float _3076 = _2797;
                float _3077 = _2799;
                float _3078 = _2801;
                float _3079 = _2803;
                float _3080 = _2805;
                uint _3081 = _2812;
                uint _3090;
                bool _3091;
                for (;;)
                {
                    _3090 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                    _3091 = _3090 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_3091)
                    {
                        frontier_phi_86_pred = _3079;
                        frontier_phi_86_pred_1 = _3078;
                        frontier_phi_86_pred_2 = _3077;
                        frontier_phi_86_pred_3 = _3076;
                        frontier_phi_86_pred_4 = _3075;
                        frontier_phi_86_pred_5 = _3080;
                    }
                    else
                    {
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3296 = _3075;
                        float _3297 = _3076;
                        float _3298 = _3077;
                        float _3299 = _3078;
                        float _3300 = _3079;
                        float _3301 = _3080;
                        uint _3302 = _3090;
                        uint _3303;
                        vec4 _3328;
                        float _3329;
                        vec4 _3344;
                        vec3 _3356;
                        vec4 _3372;
                        vec4 _3388;
                        float _3435;
                        bool _3436;
                        for (;;)
                        {
                            uint _3313 = ((_3081 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3302));
                            _3303 = (_3302 + 4294967295u) & _3302;
                            uint _3315 = _3313 * 40u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            _3329 = _3328.w;
                            uint _3331 = (_3313 * 40u) + 4u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3313 * 40u) + 8u;
                            _3356 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x));
                            uint _3359 = (_3313 * 40u) + 16u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3375 = (_3313 * 40u) + 20u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3391 = (_3313 * 40u) + 24u;
                            vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3410 = (_3313 * 40u) + 28u;
                            vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3435 = fma(_1746, _3423.z, fma(_1745, _3423.y, _3423.x * _1744)) + _3423.w;
                            _3436 = !((fma(_1746, _3404.z, fma(_1745, _3404.y, _3404.x * _1744)) + _3404.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3436)
                            {
                                float _3463 = _3328.x - _1744;
                                float _3464 = _3328.y - _1745;
                                float _3465 = _3328.z - _1746;
                                float _3466 = dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465));
                                float _3469 = inversesqrt(_3466);
                                float _3470 = _3469 * _3463;
                                float _3471 = _3469 * _3464;
                                float _3472 = _3469 * _3465;
                                float _3476 = 1.0 - (_3466 / (_3329 * _3329));
                                float _4673 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3481 = sqrt(_3466) * _3344.w;
                                float _3483 = 1.39999997615814208984375 / (_3481 + 1.39999997615814208984375);
                                float _3484 = _3483 * _3483;
                                float _3487 = ((1.0 - _3484) * dot(vec3(_3470, _3471, _3472), vec3(_578, _581, _584))) + _3484;
                                float _3490 = _3481 * _3481;
                                float _3494 = (fma(_1746, _3372.z, fma(_1745, _3372.y, _3372.x * _1744)) + _3372.w) / _3435;
                                float _3495 = (fma(_1746, _3388.z, fma(_1745, _3388.y, _3388.x * _1744)) + _3388.w) / _3435;
                                float _3499 = 1.0 - dot(vec2(_3494, _3495), vec2(_3494, _3495));
                                float _4689 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3501 = _3500 * (((isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0))) * _3477) / ((_3490 * 0.699999988079071044921875) + 1.0));
                                float _3513 = exp2(log2(1.0 / ((_3490 * 3.5) + 5.0)) * 0.25);
                                float _3514 = 1.0 - _653;
                                float _3521 = sqrt(1.0 - ((1.0 - (_3514 * _3514)) * (1.0 - (_3513 * _3513))));
                                float _3522 = _3521 * _3521;
                                float _3523 = _3522 * _3522;
                                float _3524 = _3470 - _2941;
                                float _3525 = _3471 - _2942;
                                float _3526 = _3472 - _2943;
                                float _3530 = inversesqrt(dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526)));
                                float _3534 = dot(vec3(_578, _581, _584), vec3((-0.0) - _2941, (-0.0) - _2942, (-0.0) - _2943));
                                float _4700 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3537 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3538 = dot(vec3(_578, _581, _584), vec3(_3530 * _3524, _3530 * _3525, _3530 * _3526));
                                float _4711 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3545 = ((_3541 * _3541) * (_3523 + (-1.0))) + 1.0;
                                float _3546 = _3483 * _3522;
                                float _3547 = _3546 * _3546;
                                float _3553 = ((1.0 - _3547) * dot(vec3(_578, _581, _584), vec3(_3470, _3471, _3472))) + _3547;
                                float _4722 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3555 = 1.0 - _3522;
                                float _3565 = (0.5 / (((_3554 * ((_3537 * _3555) + _3522)) + 9.9999999392252902907785028219223e-09) + (((_3554 * _3555) + _3522) * _3537))) * _3554;
                                float _4733 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3575 = (_3500 * _3477) * (((_3523 * 3.1415927410125732421875) * (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) / ((_3545 * _3545) * ((_3490 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3501 * _3344.y;
                                frontier_phi_92_pred_1 = _3501 * _3344.x;
                                frontier_phi_92_pred_2 = _3575 * _3356.z;
                                frontier_phi_92_pred_3 = _3575 * _3356.y;
                                frontier_phi_92_pred_4 = _3575 * _3356.x;
                                frontier_phi_92_pred_5 = _3501 * _3344.z;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3583 = frontier_phi_92_pred;
                            _3582 = frontier_phi_92_pred_1;
                            _3581 = frontier_phi_92_pred_2;
                            _3580 = frontier_phi_92_pred_3;
                            _3579 = frontier_phi_92_pred_4;
                            _3584 = frontier_phi_92_pred_5;
                            _3286 = _3582 + _3299;
                            _3287 = _3583 + _3300;
                            _3288 = _3584 + _3301;
                            _3283 = _3579 + _3296;
                            _3284 = _3580 + _3297;
                            _3285 = _3581 + _3298;
                            if (_3303 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3303;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3287;
                        frontier_phi_86_pred_1 = _3286;
                        frontier_phi_86_pred_2 = _3285;
                        frontier_phi_86_pred_3 = _3284;
                        frontier_phi_86_pred_4 = _3283;
                        frontier_phi_86_pred_5 = _3288;
                    }
                    _2924 = frontier_phi_86_pred;
                    _2922 = frontier_phi_86_pred_1;
                    _2920 = frontier_phi_86_pred_2;
                    _2918 = frontier_phi_86_pred_3;
                    _2916 = frontier_phi_86_pred_4;
                    _2926 = frontier_phi_86_pred_5;
                    uint _3082 = _3081 + 1u;
                    if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3075 = _2916;
                        _3076 = _2918;
                        _3077 = _2920;
                        _3078 = _2922;
                        _3079 = _2924;
                        _3080 = _2926;
                        _3081 = _3082;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_67_68_ladder = _2926;
                frontier_phi_67_68_ladder_1 = _2922;
                frontier_phi_67_68_ladder_2 = _2924;
                frontier_phi_67_68_ladder_3 = _2918;
                frontier_phi_67_68_ladder_4 = _2916;
                frontier_phi_67_68_ladder_5 = _2920;
            }
            else
            {
                frontier_phi_67_68_ladder = _2805;
                frontier_phi_67_68_ladder_1 = _2801;
                frontier_phi_67_68_ladder_2 = _2803;
                frontier_phi_67_68_ladder_3 = _2797;
                frontier_phi_67_68_ladder_4 = _2795;
                frontier_phi_67_68_ladder_5 = _2799;
            }
            _2915 = frontier_phi_67_68_ladder_4;
            _2917 = frontier_phi_67_68_ladder_3;
            _2919 = frontier_phi_67_68_ladder_5;
            _2921 = frontier_phi_67_68_ladder_1;
            _2923 = frontier_phi_67_68_ladder_2;
            _2925 = frontier_phi_67_68_ladder;
        }
        float _2930 = isnan(1.0) ? _637 : (isnan(_637) ? 1.0 : min(_637, 1.0));
        _2698 = (_2930 * _2921) + _2211;
        _2700 = (_2930 * _2923) + _2213;
        _2702 = (_2930 * _2925) + _2215;
        _2704 = ((_2915 * _622) * _2930) + _2549;
        _2706 = ((_2917 * _624) * _2930) + _2551;
        _2708 = ((_2919 * _625) * _2930) + _2553;
    }
    else
    {
        _2698 = _2211;
        _2700 = _2213;
        _2702 = _2215;
        _2704 = _2549;
        _2706 = _2551;
        _2708 = _2553;
    }
    uint _2714 = _598 + uint(cbMatDynParam._m0[0u].w);
    float _4749 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4760 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4771 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4782 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _2749 = (((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2698 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _637))) + ((_2704 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1473)) * cbPerFrame._m0[3u].x)) + ((((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _377) * _417) * cbInstanceData._m0[_2714].x);
    float _2751 = (((((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _377) * _417) * cbInstanceData._m0[_2714].y) + ((_2706 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1473)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2700 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _637)));
    float _2753 = (((((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _377) * _417) * cbInstanceData._m0[_2714].z) + ((_2708 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1473)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2702 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _637)));
    float _2754 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2755 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
    float _2756 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2761 = cbInstanceData._m0[_597 + 6u].w * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)));
    float _2766 = _557 / cbSceneParam._m0[86u].x;
    float _2767 = _558 / cbSceneParam._m0[86u].y;
    vec4 _2781 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2766, _2767, (log2((isnan(cbSceneParam._m0[77u].w) ? _483 : (isnan(_483) ? cbSceneParam._m0[77u].w : min(_483, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2783 = _2781.x;
    float _2784 = _2781.y;
    float _2785 = _2781.z;
    float _2786 = _2781.w;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    if (_483 > cbSceneParam._m0[78u].w)
    {
        float _2820 = isnan(_483) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _483 : min(cbSceneParam._m0[80u].w, _483));
        float _2821 = _2820 / _483;
        float _2832 = _2821 * _532;
        float _2833 = _533 * _2821;
        float _2834 = (-0.0) - _2833;
        float _2835 = _2821 * _534;
        float _2837 = (cbSceneParam._m0[77u].w * _2834) / _2820;
        float _2838 = _2837 + cbSceneParam._m0[79u].w;
        float _2839 = cbSceneParam._m0[79u].w - _2833;
        float _2845 = sqrt(((_2832 * _2832) + (_2833 * _2833)) + (_2835 * _2835));
        float _2848 = (1.0 - (cbSceneParam._m0[77u].w / _2820)) * _2845;
        float _2853 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2855 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3032;
        if (abs((_2834 - _2837) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3032 = ((((_2838 > 0.0) ? exp2(_2853 * _2838) : (2.0 - exp2(_2855 * _2838))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2848;
        }
        else
        {
            float _2976 = 1.0 / cbSceneParam._m0[80u].x;
            float _2977 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : max(_2838, _2839));
            float _2978 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : min(_2838, _2839));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            float _2988 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : min(_2978, 0.0));
            _3032 = ((abs(_2845 / _2834) * cbSceneParam._m0[80u].y) * ((((_2987 - _2988) * 2.0) - ((exp2(_2853 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0)))) - exp2(_2853 * (isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))))) * _2976)) - ((exp2(_2855 * _2987) - exp2(_2855 * _2988)) * _2976))) + (_2848 * cbSceneParam._m0[80u].z);
        }
        vec4 _3034 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2766, _2767, 1.0), 0.0);
        float _3043 = exp2((_3032 * (-1.44269502162933349609375)) * (1.0 - _3034.w));
        float _3044 = log2(_3043);
        float _3060 = log2(_2786);
        _2857 = (exp2(_3060 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].x)) * _3034.x) / cbSceneParam._m0[78u].x)) + _2783;
        _2859 = (exp2(_3060 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].y)) * _3034.y) / cbSceneParam._m0[78u].y)) + _2784;
        _2861 = (exp2(_3060 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].z)) * _3034.z) / cbSceneParam._m0[78u].z)) + _2785;
        _2863 = _3043 * _2786;
    }
    else
    {
        _2857 = _2783;
        _2859 = _2784;
        _2861 = _2785;
        _2863 = _2786;
    }
    bool _3070;
    vec4 _2873;
    vec4 _2895;
    float _2897;
    float _2901;
    float _2902;
    float _2903;
    float _2904;
    bool _2914;
    for (;;)
    {
        _2873 = cbMatDynParam._m0[0u];
        float _2875 = roundEven(_2873.y);
        bool _2876 = _2875 == 3.0;
        float _2877 = log2(_2863);
        float _2884 = exp2(_2877 * cbSceneParam._m0[78u].x) * _2754;
        float _2885 = exp2(_2877 * cbSceneParam._m0[78u].y) * _2755;
        float _2886 = exp2(_2877 * cbSceneParam._m0[78u].z) * _2756;
        float _2893 = _545 + (-0.5);
        _2895 = cbMtdParam._m0[1u];
        _2897 = _2895.y * _2893;
        float _2900 = (_2875 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2901 = _2900 * (_2876 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2857)));
        _2902 = _2900 * (_2876 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2859)));
        _2903 = _2900 * (_2876 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2861)));
        _2904 = _2893 * 0.999000012874603271484375;
        _2914 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2914)
        {
            if ((cbInstanceData._m0[_597 + 7u].x + _2904) < 0.5)
            {
                _3070 = true;
                break;
            }
        }
        uint _3011 = _598 + uint(_2873.w);
        if ((cbInstanceData._m0[_3011].w < 1.0) && ((cbInstanceData._m0[_3011].w + _2904) < 0.5))
        {
            _3070 = true;
            break;
        }
        if ((_2897 + _305) < _2895.x)
        {
            _3070 = true;
            break;
        }
        _3070 = false;
        break;
    }
    float _3274;
    if (_3070)
    {
        discard_state = true;
        _3274 = 0.0;
    }
    else
    {
        _3274 = _2761;
    }
    SV_Target.x = _2901;
    SV_Target.y = _2902;
    SV_Target.z = _2903;
    SV_Target.w = _3274;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2761;
    discard_exit();
}


