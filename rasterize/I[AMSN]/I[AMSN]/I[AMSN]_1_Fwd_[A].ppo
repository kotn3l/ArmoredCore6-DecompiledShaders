#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1017;
float _3435;
float _3436;
float _3437;
float _3438;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _293 = texture(sampler2D(I_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _299 = _293.w;
    float _300 = _293.x * cbMtdParam._m0[9u].x;
    float _301 = _293.y * cbMtdParam._m0[9u].y;
    float _302 = _293.z * cbMtdParam._m0[9u].z;
    vec4 _317 = texture(sampler2D(I_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _321 = _317.z;
    float _325 = (_317.x * 2.0) + (-1.0);
    float _327 = (_317.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_325, _327), vec2(_325, _327));
    float _3447 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _334 = sqrt(1.0 - (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))));
    float _349 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
    float _352 = cbMtdParam._m0[12u].x - cbMtdParam._m0[12u].w;
    float _354 = (_349 - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0)));
    float _3463 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _356 = 1.0 - (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)));
    float _364 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3474 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _375 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _382 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _389 = dot(vec4(_382 * _273, _382 * _274, _382 * _275, 0.0), vec4(_375 * _217, _375 * _218, _375 * _219, 0.0)) - (((_365 * _365) * cbMtdParam._m0[11u].w) * (3.0 - (_365 * 2.0)));
    float _3485 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _396 = exp2(log2(1.0 - (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _400 = cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y;
    float _411 = gl_FragCoord.x * 0.125;
    float _413 = gl_FragCoord.y * 0.125;
    float _424 = fma(_334, _217, fma(_327, _209 * TANGENT.x, (_195 * _187) * _325));
    float _427 = fma(_334, _218, fma(_327, _209 * TANGENT.y, (_195 * _188) * _325));
    float _430 = fma(_334, _219, fma(_327, _209 * TANGENT.z, (_195 * _189) * _325));
    float _434 = inversesqrt(dot(vec3(_424, _427, _430), vec3(_424, _427, _430)));
    float _435 = _434 * _424;
    float _436 = _434 * _427;
    float _437 = _434 * _430;
    float _3506 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _438 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _439 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3539 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3550 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3561 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _443 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    if (!(((floatBitsToUint(cbSceneParam._m0[69u]).w != 0u) ? ((_349 - cbMtdParam._m0[12u].y) / (isnan(0.001000000047497451305389404296875) ? _400 : (isnan(_400) ? 0.001000000047497451305389404296875 : max(_400, 0.001000000047497451305389404296875)))) : 1.0) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_411, _413)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _462 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _511 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _502);
    float _512 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _502);
    float _513 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _502);
    float _517 = inversesqrt(dot(vec3(_511, _512, _513), vec3(_511, _512, _513)));
    float _518 = _511 * _517;
    float _519 = _512 * _517;
    float _520 = _513 * _517;
    vec4 _522 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_411, _413));
    float _524 = _522.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _698 = sqrt(((_511 * _511) + (_512 * _512)) + (_513 * _513));
        float _704 = (cbMatDynParam._m0[5u].x * _698) + cbMatDynParam._m0[5u].y;
        float _3572 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _709 = (cbMatDynParam._m0[5u].z * _698) + cbMatDynParam._m0[5u].w;
        float _3583 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) - _705)) + _705) < ((_524 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _536 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _537 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _557 = fma(_437, cbSceneParam._m0[5u].z, fma(_436, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _435));
    float _560 = fma(_437, cbSceneParam._m0[6u].z, fma(_436, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _435));
    float _563 = fma(_437, cbSceneParam._m0[7u].z, fma(_436, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _435));
    uint _576 = uint(roundEven(NORMAL.w)) * 13u;
    uint _577 = _576 + 9u;
    uint _578 = _577 + uint(cbMatDynParam._m0[0u].w);
    float _584 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_578].x;
    float _585 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_578].y;
    float _586 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_578].z;
    float _3594 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _590 = 1.0 - _443;
    float _591 = _587 * _590;
    float _592 = _588 * _590;
    float _593 = _589 * _590;
    float _598 = (_587 + (-0.039999999105930328369140625)) * _443;
    float _599 = (_588 + (-0.039999999105930328369140625)) * _443;
    float _600 = (_589 + (-0.039999999105930328369140625)) * _443;
    float _601 = _598 + 0.039999999105930328369140625;
    float _603 = _599 + 0.039999999105930328369140625;
    float _604 = _600 + 0.039999999105930328369140625;
    vec4 _613 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _536, cbSceneParam._m0[86u].y * _537));
    float _616 = _613.x * TEXCOORD_1.w;
    float _617 = dot(vec3(_435, _436, _437), vec3(_518, _519, _520));
    float _620 = _617 * 2.0;
    float _624 = (_620 * _435) - _518;
    float _625 = (_620 * _436) - _519;
    float _626 = (_620 * _437) - _520;
    float _630 = abs(dot(vec3(_518, _519, _520), vec3(_435, _436, _437)));
    float _3627 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _632 = sqrt(_439);
    float _644 = exp2((_632 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_632 * 3.0));
    float _650 = (1.0 - _644) * ((_632 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _651 = _644 * _632;
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1016;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _741 = fma(_687, cbModelParam._m0[26u].z, fma(_683, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _679));
        float _745 = fma(_687, cbModelParam._m0[27u].z, fma(_683, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _679));
        float _749 = fma(_687, cbModelParam._m0[28u].z, fma(_683, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _679));
        float _774 = _679 + _435;
        float _775 = _683 + _436;
        float _776 = _687 + _437;
        float _786 = fma(_776, cbModelParam._m0[26u].z, fma(_775, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _774)) - _741;
        float _787 = fma(_776, cbModelParam._m0[27u].z, fma(_775, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _774)) - _745;
        float _788 = fma(_776, cbModelParam._m0[28u].z, fma(_775, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _774)) - _749;
        float _792 = inversesqrt(dot(vec3(_786, _787, _788), vec3(_786, _787, _788)));
        float _805 = ((_792 * _786) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_741 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_792 * _787) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_745 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_792 * _788) / cbModelParam._m0[34u].z) + ((((((_749 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        float _844 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_810.x + (-0.5));
        float _846 = _844 * (_810.y + (-0.5));
        float _847 = _844 * (_810.z + (-0.5));
        float _854 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_817.x + (-0.5));
        float _856 = _854 * (_817.y + (-0.5));
        float _857 = _854 * (_817.z + (-0.5));
        float _864 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_824.x + (-0.5));
        float _866 = _864 * (_824.y + (-0.5));
        float _867 = _864 * (_824.z + (-0.5));
        float _874 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_831.x + (-0.5));
        float _876 = _874 * (_831.y + (-0.5));
        float _877 = _874 * (_831.z + (-0.5));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = _845 * 0.5;
        float _882 = _855 * 0.5;
        float _883 = _865 * 0.5;
        float _884 = dot(vec3(_881, _882, _883), vec3(_881, _882, _883));
        float _889 = (_884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_884);
        float _898 = (dot(vec3(_435, _436, _437), vec3(_889 * _881, _889 * _882, _889 * _883)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _908 = sqrt(((_882 * _882) + (_881 * _881)) + (_883 * _883)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _3675 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_910 + 1.0))) + _915) * _878;
        float _925 = _846 * 0.5;
        float _926 = _856 * 0.5;
        float _927 = _866 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _941 = (dot(vec3(_435, _436, _437), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _950 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3708 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_952 + 1.0))) + _957) * _879;
        float _967 = _847 * 0.5;
        float _968 = _857 * 0.5;
        float _969 = _867 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_435, _436, _437), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3741 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_994 + 1.0))) + _999) * _880;
        _1016 = _847;
        _1018 = _846;
        _1019 = _845;
        _1020 = _857;
        _1021 = _856;
        _1022 = _855;
        _1023 = _867;
        _1024 = _866;
        _1025 = _865;
        _1026 = _880;
        _1027 = _879;
        _1028 = _878;
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
    }
    else
    {
        _1016 = _1017;
        _1018 = _1017;
        _1019 = _1017;
        _1020 = _1017;
        _1021 = _1017;
        _1022 = _1017;
        _1023 = _1017;
        _1024 = _1017;
        _1025 = _1017;
        _1026 = _1017;
        _1027 = _1017;
        _1028 = _1017;
        _1029 = 0.0;
        _1030 = 0.0;
        _1031 = 0.0;
    }
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1057 = fma(_687, cbModelParam._m0[30u].z, fma(_683, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _679));
        float _1061 = fma(_687, cbModelParam._m0[31u].z, fma(_683, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _679));
        float _1065 = fma(_687, cbModelParam._m0[32u].z, fma(_683, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _679));
        float _1088 = _679 + _435;
        float _1089 = _683 + _436;
        float _1090 = _687 + _437;
        float _1100 = fma(_1090, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088)) - _1057;
        float _1101 = fma(_1090, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088)) - _1061;
        float _1102 = fma(_1090, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088)) - _1065;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1057 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1061 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[35u].z) + ((((((_1065 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1156 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1123.x + (-0.5));
        float _1158 = _1156 * (_1123.y + (-0.5));
        float _1159 = _1156 * (_1123.z + (-0.5));
        float _1166 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1130.x + (-0.5));
        float _1168 = _1166 * (_1130.y + (-0.5));
        float _1169 = _1166 * (_1130.z + (-0.5));
        float _1176 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1137.x + (-0.5));
        float _1178 = _1176 * (_1137.y + (-0.5));
        float _1179 = _1176 * (_1137.z + (-0.5));
        float _1186 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1144.x + (-0.5));
        float _1188 = _1186 * (_1144.y + (-0.5));
        float _1189 = _1186 * (_1144.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_435, _436, _437), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3804 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1220 + 1.0))) + _1225) * _1190;
        float _1235 = _1158 * 0.5;
        float _1236 = _1168 * 0.5;
        float _1237 = _1178 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_435, _436, _437), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3837 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1262 + 1.0))) + _1267) * _1191;
        float _1277 = _1159 * 0.5;
        float _1278 = _1169 * 0.5;
        float _1279 = _1179 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_435, _436, _437), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3870 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1304 + 1.0))) + _1309) * _1192;
        _1326 = _1159;
        _1327 = _1158;
        _1328 = _1157;
        _1329 = _1169;
        _1330 = _1168;
        _1331 = _1167;
        _1332 = _1179;
        _1333 = _1178;
        _1334 = _1177;
        _1335 = _1192;
        _1336 = _1191;
        _1337 = _1190;
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1017;
        _1327 = _1017;
        _1328 = _1017;
        _1329 = _1017;
        _1330 = _1017;
        _1331 = _1017;
        _1332 = _1017;
        _1333 = _1017;
        _1334 = _1017;
        _1335 = _1017;
        _1336 = _1017;
        _1337 = _1017;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1029)) + _1029;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1030)) + _1030;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1031)) + _1031;
    float _1373 = fma(_1352, cbSceneParam._m0[89u].z, fma(_1351, cbSceneParam._m0[89u].y, _1350 * cbSceneParam._m0[89u].x));
    float _1376 = fma(_1352, cbSceneParam._m0[90u].z, fma(_1351, cbSceneParam._m0[90u].y, _1350 * cbSceneParam._m0[90u].x));
    float _1379 = fma(_1352, cbSceneParam._m0[91u].z, fma(_1351, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1350));
    float _1394 = _624 * 0.5;
    float _1395 = _625 * 0.5;
    float _1396 = _626 * 0.5;
    float _1397 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1400 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1403 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1437;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1410 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1016, _1020, _1023, _1026));
        float _1414 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1018, _1021, _1024, _1027));
        float _1418 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1425 = dot(vec4(cbModelParam._m0[39u]), vec4(_1394, _1395, _1396, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1448;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1439 = dot(vec4(cbModelParam._m0[40u]), vec4(_1394, _1395, _1396, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1452 = (_1448 * cbModelParam._m0[1u].x) + (_1437 * (1.0 - cbModelParam._m0[1u].x));
    float _1462 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _439);
    float _1463 = isnan(_1462) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1462 : min(cbModelParam._m0[25u].z, _1462));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1512 = fma(_687, cbModelParam._m0[13u].z, fma(_683, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _679)) + cbModelParam._m0[13u].w;
        float _1516 = fma(_687, cbModelParam._m0[14u].z, fma(_683, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _679)) + cbModelParam._m0[14u].w;
        float _1520 = fma(_687, cbModelParam._m0[15u].z, fma(_683, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _679)) + cbModelParam._m0[15u].w;
        float _1523 = fma(_626, cbModelParam._m0[13u].z, fma(_625, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _624));
        float _1526 = fma(_626, cbModelParam._m0[14u].z, fma(_625, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _624));
        float _1529 = fma(_626, cbModelParam._m0[15u].z, fma(_625, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _624));
        float _1557;
        if (_1523 > 0.0)
        {
            _1557 = abs((1.0 - _1512) / _1523);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1512 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1557 = frontier_phi_21_19_ladder;
        }
        float _1763;
        if (_1526 > 0.0)
        {
            _1763 = abs((1.0 - _1516) / _1526);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1516 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1763 = frontier_phi_30_26_ladder;
        }
        float _2017;
        if (_1529 > 0.0)
        {
            _2017 = abs((1.0 - _1520) / _1529);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1520 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2017 = frontier_phi_42_37_ladder;
        }
        float _2019 = isnan(_1763) ? _1557 : (isnan(_1557) ? _1763 : min(_1557, _1763));
        float _2020 = isnan(_2017) ? _2019 : (isnan(_2019) ? _2017 : min(_2019, _2017));
        float _2024 = (_2020 * _1523) + _1512;
        float _2025 = (_2020 * _1526) + _1516;
        float _2026 = (_2020 * _1529) + _1520;
        float _2027 = _2020 * 9.9999997473787516355514526367188e-05;
        float _2029 = (-1.0) - _2027;
        float _2031 = _2027 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2026 > _2031) || ((_2026 < _2029) || ((_2025 > _2031) || ((_2025 < _2029) || ((_2024 < _2029) || (_2024 > _2031))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2154 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2026, cbModelParam._m0[9u].z, fma(_2025, cbModelParam._m0[9u].y, _2024 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2026, cbModelParam._m0[10u].z, fma(_2025, cbModelParam._m0[10u].y, _2024 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2026, cbModelParam._m0[11u].z, fma(_2025, cbModelParam._m0[11u].y, _2024 * cbModelParam._m0[11u].x))), _1463);
            frontier_phi_20_42_ladder = _2154.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2154.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2154.x * cbModelParam._m0[1u].y;
        }
        _1545 = frontier_phi_20_42_ladder_2;
        _1547 = frontier_phi_20_42_ladder_1;
        _1549 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_624, _625, _626), _1463);
        _1545 = _1533.x * cbModelParam._m0[1u].y;
        _1547 = _1533.y * cbModelParam._m0[1u].y;
        _1549 = _1533.z * cbModelParam._m0[1u].y;
    }
    float _1553 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _439);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1553 : min(cbModelParam._m0[25u].w, _1553));
    float _1646;
    float _1648;
    float _1650;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1610 = fma(_687, cbModelParam._m0[21u].z, fma(_683, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _679)) + cbModelParam._m0[21u].w;
        float _1614 = fma(_687, cbModelParam._m0[22u].z, fma(_683, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _679)) + cbModelParam._m0[22u].w;
        float _1618 = fma(_687, cbModelParam._m0[23u].z, fma(_683, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _679)) + cbModelParam._m0[23u].w;
        float _1621 = fma(_626, cbModelParam._m0[21u].z, fma(_625, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _624));
        float _1624 = fma(_626, cbModelParam._m0[22u].z, fma(_625, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _624));
        float _1627 = fma(_626, cbModelParam._m0[23u].z, fma(_625, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _624));
        float _1768;
        if (_1621 > 0.0)
        {
            _1768 = abs((1.0 - _1610) / _1621);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1610 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1768 = frontier_phi_32_28_ladder;
        }
        float _2044;
        if (_1624 > 0.0)
        {
            _2044 = abs((1.0 - _1614) / _1624);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1614 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2044 = frontier_phi_44_39_ladder;
        }
        float _2257;
        if (_1627 > 0.0)
        {
            _2257 = abs((1.0 - _1618) / _1627);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1618 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2257 = frontier_phi_53_50_ladder;
        }
        float _2259 = isnan(_2044) ? _1768 : (isnan(_1768) ? _2044 : min(_1768, _2044));
        float _2260 = isnan(_2257) ? _2259 : (isnan(_2259) ? _2257 : min(_2259, _2257));
        float _2264 = (_2260 * _1621) + _1610;
        float _2265 = (_2260 * _1624) + _1614;
        float _2266 = (_2260 * _1627) + _1618;
        float _2267 = _2260 * 9.9999997473787516355514526367188e-05;
        float _2268 = (-1.0) - _2267;
        float _2270 = _2267 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2266 > _2270) || ((_2266 < _2268) || ((_2265 > _2270) || ((_2265 < _2268) || ((_2264 < _2268) || (_2264 > _2270))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2494 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2266, cbModelParam._m0[17u].z, fma(_2265, cbModelParam._m0[17u].y, _2264 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2266, cbModelParam._m0[18u].z, fma(_2265, cbModelParam._m0[18u].y, _2264 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2266, cbModelParam._m0[19u].z, fma(_2265, cbModelParam._m0[19u].y, _2264 * cbModelParam._m0[19u].x))), _1554);
            frontier_phi_29_53_ladder = _2494.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2494.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2494.x * cbModelParam._m0[1u].z;
        }
        _1646 = frontier_phi_29_53_ladder_2;
        _1648 = frontier_phi_29_53_ladder_1;
        _1650 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1630 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_624, _625, _626), _1554);
        _1646 = _1630.x * cbModelParam._m0[1u].z;
        _1648 = _1630.y * cbModelParam._m0[1u].z;
        _1650 = _1630.z * cbModelParam._m0[1u].z;
    }
    float _1663 = (((_650 * _601) + _651) * _616) * ((cbModelParam._m0[1u].w * (_1646 - _1545)) + _1545);
    float _1665 = (((_650 * _603) + _651) * _616) * ((cbModelParam._m0[1u].w * (_1648 - _1547)) + _1547);
    float _1667 = (((_650 * _604) + _651) * _616) * ((cbModelParam._m0[1u].w * (_1650 - _1549)) + _1549);
    float _1670 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1663 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1663 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, _1663 * cbSceneParam._m0[91u].x));
    uvec4 _1686 = floatBitsToUint(cbInstanceData._m0[_576 + 5u]);
    uint _1688 = _1686.x * 14u;
    uint _1689 = _1688 + 13u;
    float _1696 = _616 + (-1.0);
    float _1701 = (cbLight._m0[_1689].x * _1696) + 1.0;
    float _1702 = (cbLight._m0[_1689].y * _1696) + 1.0;
    float _1703 = (cbLight._m0[_1689].z * _1696) + 1.0;
    float _1704 = (cbLight._m0[_1689].w * _1696) + 1.0;
    uint _1705 = _1688 + 5u;
    float _1711 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
    uint _1715 = _1688 + 4u;
    float _1722 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
    uint _1726 = _1688 | 1u;
    float _1737 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_435, _436, _437));
    float _1740 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_435, _436, _437));
    float _4006 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _4017 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1745 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.3183098733425140380859375;
    float _1747 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 0.3183098733425140380859375;
    float _1754 = ((cbLight._m0[_1705].x * _1711) * _1747) + ((cbLight._m0[_1715].x * _1722) * _1745);
    float _1755 = ((_1711 * cbLight._m0[_1705].y) * _1747) + ((_1722 * cbLight._m0[_1715].y) * _1745);
    float _1756 = ((_1711 * cbLight._m0[_1705].z) * _1747) + ((_1722 * cbLight._m0[_1715].z) * _1745);
    uvec4 _1760 = floatBitsToUint(cbLight._m0[_1688 + 12u]);
    bool _1762 = _1760.x == 0u;
    float _1773;
    float _1775;
    float _1777;
    if (_1762)
    {
        _1773 = _1754;
        _1775 = _1755;
        _1777 = _1756;
    }
    else
    {
        uint _1781 = _1688 + 6u;
        float _1797 = (dot(vec3(cbLight._m0[_1688 + 2u].xyz), vec3(_435, _436, _437)) * 0.5) + 0.5;
        float _1798 = _1797 * _1797;
        float _4028 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1800 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _1773 = (((cbLight._m0[_1781].x * 0.3183098733425140380859375) * _1799) * _1800) + _1754;
        _1775 = (((cbLight._m0[_1781].y * 0.3183098733425140380859375) * _1799) * _1800) + _1755;
        _1777 = (((cbLight._m0[_1781].z * 0.3183098733425140380859375) * _1799) * _1800) + _1756;
    }
    bool _1780 = _1760.y == 0u;
    float _1818;
    float _1820;
    float _1822;
    if (_1780)
    {
        _1818 = _1773;
        _1820 = _1775;
        _1822 = _1777;
    }
    else
    {
        uint _1988 = _1688 + 7u;
        float _2004 = (dot(vec3(cbLight._m0[_1688 + 3u].xyz), vec3(_435, _436, _437)) * 0.5) + 0.5;
        float _2005 = _2004 * _2004;
        float _4044 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2006 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _2007 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _1818 = (((cbLight._m0[_1988].x * 0.3183098733425140380859375) * _2006) * _2007) + _1773;
        _1820 = (((cbLight._m0[_1988].y * 0.3183098733425140380859375) * _2006) * _2007) + _1775;
        _1822 = (((cbLight._m0[_1988].z * 0.3183098733425140380859375) * _2006) * _2007) + _1777;
    }
    uint _1825 = _1688 + 8u;
    float _1838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1688].w)) * _439) * 0.949999988079071044921875);
    float _1839 = _1838 * _1838;
    float _1840 = cbLight._m0[_1688].x + _518;
    float _1841 = cbLight._m0[_1688].y + _519;
    float _1842 = cbLight._m0[_1688].z + _520;
    float _1846 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
    float _1847 = _1846 * _1840;
    float _1848 = _1846 * _1841;
    float _1849 = _1846 * _1842;
    float _1850 = dot(vec3(_435, _436, _437), vec3(cbLight._m0[_1688].xyz));
    float _4060 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _1854 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1855 = dot(vec3(_435, _436, _437), vec3(_1847, _1848, _1849));
    float _4082 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1859 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_1847, _1848, _1849));
    float _4093 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1863 = _1839 * _1839;
    float _1867 = ((_1858 * _1858) * (_1863 + (-1.0))) + 1.0;
    float _1875 = exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0);
    float _1876 = 0.959999978542327880859375 - _598;
    float _1878 = 0.959999978542327880859375 - _599;
    float _1879 = 0.959999978542327880859375 - _600;
    float _1886 = 1.0 - _1839;
    float _1897 = (0.5 / (((_1854 * ((_1853 * _1886) + _1839)) + 9.9999999392252902907785028219223e-09) + (((_1854 * _1886) + _1839) * _1853))) * _1853;
    float _4104 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1899 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1863 / ((_1867 * _1867) * 3.141590118408203125));
    uint _1910 = _1688 + 9u;
    float _1921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1726].w)) * _439) * 0.949999988079071044921875);
    float _1922 = _1921 * _1921;
    float _1923 = cbLight._m0[_1726].x + _518;
    float _1924 = cbLight._m0[_1726].y + _519;
    float _1925 = cbLight._m0[_1726].z + _520;
    float _1929 = inversesqrt(dot(vec3(_1923, _1924, _1925), vec3(_1923, _1924, _1925)));
    float _1930 = _1929 * _1923;
    float _1931 = _1929 * _1924;
    float _1932 = _1929 * _1925;
    float _1933 = dot(vec3(_435, _436, _437), vec3(cbLight._m0[_1726].xyz));
    float _4115 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1936 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _1937 = dot(vec3(_435, _436, _437), vec3(_1930, _1931, _1932));
    float _4126 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _1941 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_1930, _1931, _1932));
    float _4137 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1945 = _1922 * _1922;
    float _1949 = ((_1940 * _1940) * (_1945 + (-1.0))) + 1.0;
    float _1956 = exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0);
    float _1963 = 1.0 - _1922;
    float _1973 = (0.5 / (((_1854 * ((_1936 * _1963) + _1922)) + 9.9999999392252902907785028219223e-09) + (((_1854 * _1963) + _1922) * _1936))) * _1936;
    float _4148 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1975 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1945 / ((_1949 * _1949) * 3.141590118408203125));
    float _1985 = (((((_1956 * _1876) + _601) * cbLight._m0[_1910].x) * _1975) * _1711) + (((((_1875 * _1876) + _601) * cbLight._m0[_1825].x) * _1899) * _1722);
    float _1986 = (((((_1956 * _1878) + _603) * cbLight._m0[_1910].y) * _1975) * _1711) + (((((_1875 * _1878) + _603) * cbLight._m0[_1825].y) * _1899) * _1722);
    float _1987 = (((((_1956 * _1879) + _604) * cbLight._m0[_1910].z) * _1975) * _1711) + (((((_1875 * _1879) + _604) * cbLight._m0[_1825].z) * _1899) * _1722);
    float _2049;
    float _2051;
    float _2053;
    if (_1762)
    {
        _2049 = _1985;
        _2051 = _1986;
        _2053 = _1987;
    }
    else
    {
        uint _2055 = _1688 + 2u;
        uint _2059 = _1688 + 10u;
        float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _439) * 0.949999988079071044921875);
        float _2074 = _2073 * _2073;
        float _2075 = cbLight._m0[_2055].x + _518;
        float _2076 = cbLight._m0[_2055].y + _519;
        float _2077 = cbLight._m0[_2055].z + _520;
        float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
        float _2082 = _2081 * _2075;
        float _2083 = _2081 * _2076;
        float _2084 = _2081 * _2077;
        float _2085 = dot(vec3(_435, _436, _437), vec3(cbLight._m0[_2055].xyz));
        float _4159 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2089 = dot(vec3(_435, _436, _437), vec3(_2082, _2083, _2084));
        float _4170 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2093 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2082, _2083, _2084));
        float _4181 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2097 = _2074 * _2074;
        float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
        float _2108 = exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0);
        float _2115 = 1.0 - _2074;
        float _2125 = (0.5 / (((_1854 * ((_2088 * _2115) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_1854 * _2115) + _2074) * _2088))) * _2088;
        float _4192 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2127 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
        float _2128 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _2049 = (((((_2108 * _1876) + _601) * cbLight._m0[_2059].x) * _2127) * _2128) + _1985;
        _2051 = (((((_2108 * _1878) + _603) * cbLight._m0[_2059].y) * _2127) * _2128) + _1986;
        _2053 = (((((_2108 * _1879) + _604) * cbLight._m0[_2059].z) * _2127) * _2128) + _1987;
    }
    float _2163;
    float _2165;
    float _2167;
    if (_1780)
    {
        _2163 = _2049;
        _2165 = _2051;
        _2167 = _2053;
    }
    else
    {
        uint _2174 = _1688 + 3u;
        uint _2178 = _1688 + 11u;
        float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _439) * 0.949999988079071044921875);
        float _2193 = _2192 * _2192;
        float _2194 = cbLight._m0[_2174].x + _518;
        float _2195 = cbLight._m0[_2174].y + _519;
        float _2196 = cbLight._m0[_2174].z + _520;
        float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
        float _2201 = _2200 * _2194;
        float _2202 = _2200 * _2195;
        float _2203 = _2200 * _2196;
        float _2204 = dot(vec3(_435, _436, _437), vec3(cbLight._m0[_2174].xyz));
        float _4208 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2207 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2208 = dot(vec3(_435, _436, _437), vec3(_2201, _2202, _2203));
        float _4219 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2212 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2201, _2202, _2203));
        float _4230 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2216 = _2193 * _2193;
        float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
        float _2227 = exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0);
        float _2234 = 1.0 - _2193;
        float _2244 = (0.5 / (((_1854 * ((_2207 * _2234) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_1854 * _2234) + _2193) * _2207))) * _2207;
        float _4241 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2246 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
        float _2247 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _2163 = (((((_2227 * _1876) + _601) * cbLight._m0[_2178].x) * _2246) * _2247) + _2049;
        _2165 = (((((_2227 * _1878) + _603) * cbLight._m0[_2178].y) * _2246) * _2247) + _2051;
        _2167 = (((((_2227 * _1879) + _604) * cbLight._m0[_2178].z) * _2246) * _2247) + _2053;
    }
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    if (_1686.y == 0u)
    {
        float _2322 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2322;
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2322;
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2322;
        uvec4 _2337 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2338 = _2337.x;
        uint _2349 = uint((float(_2337.y) * floor(float(uint(cbSceneParam._m0[85u].y * _537) / _2338))) + floor(float(uint(cbSceneParam._m0[85u].x * _536) / _2338)));
        float _2359 = (log2(_2325 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2360 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        uint _2363 = uint(isnan(14.0) ? _2360 : (isnan(_2360) ? 14.0 : min(_2360, 14.0)));
        uvec4 _2368 = texelFetch(g_lightClusterGridBuffer, int(((_2363 << 2u) + (_2349 << 6u)) >> 2u));
        uint _2369 = _2368.x;
        uint _2370 = _2337.z;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        if (((((1u << ((_2370 >> 4u) & 15u)) + 4294967295u) & _2369) == 0u) || ((_2370 & 240u) == 0u))
        {
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
        }
        else
        {
            float _2500;
            float _2502;
            float _2504;
            float _2506;
            float _2508;
            float _2510;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            uint _2657 = 0u;
            uint _2666;
            bool _2667;
            for (;;)
            {
                _2666 = texelFetch(g_lightClassification, int((((_2363 << 5u) + (_2349 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                _2667 = _2666 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2667)
                {
                    frontier_phi_70_pred = _2653;
                    frontier_phi_70_pred_1 = _2656;
                    frontier_phi_70_pred_2 = _2655;
                    frontier_phi_70_pred_3 = _2654;
                    frontier_phi_70_pred_4 = _2652;
                    frontier_phi_70_pred_5 = _2651;
                }
                else
                {
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    uint _2802;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2653;
                    _2799 = _2654;
                    _2800 = _2655;
                    _2801 = _2656;
                    _2802 = _2666;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    for (;;)
                    {
                        uint _2806 = uint(findLSB(_2802)) + (_2657 << 5u);
                        uint _2803 = (_2802 + 4294967295u) & _2802;
                        uint _2808 = _2806 * 48u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 3u)).x));
                        uint _2828 = (_2806 * 48u) + 4u;
                        vec4 _2841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 3u)).x));
                        uint _2847 = (_2806 * 48u) + 8u;
                        vec3 _2858 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x));
                        float _2862 = _2822.x - _2323;
                        float _2863 = _2822.y - _2324;
                        float _2864 = _2822.z - _2325;
                        float _2865 = dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864));
                        float _2868 = inversesqrt(_2865);
                        float _2869 = _2868 * _2862;
                        float _2870 = _2868 * _2863;
                        float _2871 = _2868 * _2864;
                        float _2872 = dot(vec3(_557, _560, _563), vec3(_2869, _2870, _2871));
                        float _2877 = 1.0 - (_2865 * _2822.w);
                        float _4267 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2878 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2879 = sqrt(_2865) * _2841.w;
                        float _2882 = 1.39999997615814208984375 / (_2879 + 1.39999997615814208984375);
                        float _2883 = _2882 * _2882;
                        float _2886 = ((1.0 - _2883) * _2872) + _2883;
                        float _2889 = _2879 * _2879;
                        float _2893 = ((isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))) * _2878) / ((_2889 * 0.699999988079071044921875) + 1.0);
                        float _2897 = (-0.0) - _2323;
                        float _2898 = (-0.0) - _2324;
                        float _2899 = (-0.0) - _2325;
                        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2914 = exp2(log2(1.0 / ((_2889 * 3.5) + 5.0)) * 0.25);
                        float _2915 = 1.0 - _632;
                        float _2922 = sqrt(1.0 - ((1.0 - (_2915 * _2915)) * (1.0 - (_2914 * _2914))));
                        float _2923 = _2922 * _2922;
                        float _2924 = _2923 * _2923;
                        float _2925 = _2904 + _2869;
                        float _2926 = _2905 + _2870;
                        float _2927 = _2906 + _2871;
                        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
                        float _2935 = dot(vec3(_557, _560, _563), vec3(_2904, _2905, _2906));
                        float _4283 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _2939 = dot(vec3(_557, _560, _563), vec3(_2931 * _2925, _2931 * _2926, _2931 * _2927));
                        float _4294 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _2946 = ((_2942 * _2942) * (_2924 + (-1.0))) + 1.0;
                        float _2947 = _2882 * _2923;
                        float _2948 = _2947 * _2947;
                        float _2951 = ((1.0 - _2948) * _2872) + _2948;
                        float _4305 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _2953 = 1.0 - _2923;
                        float _2963 = (0.5 / (((_2952 * ((_2938 * _2953) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2952 * _2953) + _2923) * _2938))) * _2952;
                        float _4316 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2974 = (((_2924 * 3.1415927410125732421875) * (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) / ((_2946 * _2946) * ((_2889 * 2.1991131305694580078125) + 3.141590118408203125))) * _2878;
                        _2726 = (_2893 * _2841.x) + _2799;
                        _2727 = (_2893 * _2841.y) + _2800;
                        _2728 = (_2893 * _2841.z) + _2801;
                        _2723 = (_2974 * _2858.x) + _2796;
                        _2724 = (_2974 * _2858.y) + _2797;
                        _2725 = (_2974 * _2858.z) + _2798;
                        if (_2803 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2725;
                            _2799 = _2726;
                            _2800 = _2727;
                            _2801 = _2728;
                            _2802 = _2803;
                        }
                    }
                    frontier_phi_70_pred = _2725;
                    frontier_phi_70_pred_1 = _2728;
                    frontier_phi_70_pred_2 = _2727;
                    frontier_phi_70_pred_3 = _2726;
                    frontier_phi_70_pred_4 = _2724;
                    frontier_phi_70_pred_5 = _2723;
                }
                _2504 = frontier_phi_70_pred;
                _2510 = frontier_phi_70_pred_1;
                _2508 = frontier_phi_70_pred_2;
                _2506 = frontier_phi_70_pred_3;
                _2502 = frontier_phi_70_pred_4;
                _2500 = frontier_phi_70_pred_5;
                uint _2658 = _2657 + 1u;
                if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2651 = _2500;
                    _2652 = _2502;
                    _2653 = _2504;
                    _2654 = _2506;
                    _2655 = _2508;
                    _2656 = _2510;
                    _2657 = _2658;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
        }
        uvec4 _2513 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2514 = _2513.z;
        uint _2516 = (_2514 >> 8u) & 15u;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((4294967295u << _2516) & _2369) == 0u)
        {
            _2619 = _2499;
            _2621 = _2501;
            _2623 = _2503;
            _2625 = _2505;
            _2627 = _2507;
            _2629 = _2509;
        }
        else
        {
            float _2644 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
            float _2645 = _2644 * _2323;
            float _2646 = _2644 * _2324;
            float _2647 = _2644 * _2325;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2516 < ((_2514 >> 12u) & 15u))
            {
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2779 = _2499;
                float _2780 = _2501;
                float _2781 = _2503;
                float _2782 = _2505;
                float _2783 = _2507;
                float _2784 = _2509;
                uint _2785 = _2516;
                uint _2794;
                bool _2795;
                for (;;)
                {
                    _2794 = texelFetch(g_lightClassification, int((((_2363 << 5u) + (_2349 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                    _2795 = _2794 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2795)
                    {
                        frontier_phi_81_pred = _2784;
                        frontier_phi_81_pred_1 = _2783;
                        frontier_phi_81_pred_2 = _2782;
                        frontier_phi_81_pred_3 = _2781;
                        frontier_phi_81_pred_4 = _2780;
                        frontier_phi_81_pred_5 = _2779;
                    }
                    else
                    {
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        float _3003 = _2781;
                        float _3004 = _2782;
                        float _3005 = _2783;
                        float _3006 = _2784;
                        uint _3007 = _2794;
                        uint _3008;
                        vec4 _3033;
                        float _3034;
                        vec4 _3049;
                        vec3 _3061;
                        vec4 _3077;
                        vec4 _3093;
                        float _3140;
                        bool _3141;
                        for (;;)
                        {
                            uint _3018 = ((_2785 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3007));
                            _3008 = (_3007 + 4294967295u) & _3007;
                            uint _3020 = _3018 * 40u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            _3034 = _3033.w;
                            uint _3036 = (_3018 * 40u) + 4u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3051 = (_3018 * 40u) + 8u;
                            _3061 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x));
                            uint _3064 = (_3018 * 40u) + 16u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3080 = (_3018 * 40u) + 20u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3096 = (_3018 * 40u) + 24u;
                            vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3115 = (_3018 * 40u) + 28u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            _3140 = fma(_2325, _3128.z, fma(_2324, _3128.y, _3128.x * _2323)) + _3128.w;
                            _3141 = !((fma(_2325, _3109.z, fma(_2324, _3109.y, _3109.x * _2323)) + _3109.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3141)
                            {
                                float _3168 = _3033.x - _2323;
                                float _3169 = _3033.y - _2324;
                                float _3170 = _3033.z - _2325;
                                float _3171 = dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170));
                                float _3174 = inversesqrt(_3171);
                                float _3175 = _3174 * _3168;
                                float _3176 = _3174 * _3169;
                                float _3177 = _3174 * _3170;
                                float _3181 = 1.0 - (_3171 / (_3034 * _3034));
                                float _4327 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3186 = sqrt(_3171) * _3049.w;
                                float _3188 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                                float _3189 = _3188 * _3188;
                                float _3192 = ((1.0 - _3189) * dot(vec3(_3175, _3176, _3177), vec3(_557, _560, _563))) + _3189;
                                float _3195 = _3186 * _3186;
                                float _3199 = (fma(_2325, _3077.z, fma(_2324, _3077.y, _3077.x * _2323)) + _3077.w) / _3140;
                                float _3200 = (fma(_2325, _3093.z, fma(_2324, _3093.y, _3093.x * _2323)) + _3093.w) / _3140;
                                float _3204 = 1.0 - dot(vec2(_3199, _3200), vec2(_3199, _3200));
                                float _4343 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3206 = _3205 * (((isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0))) * _3182) / ((_3195 * 0.699999988079071044921875) + 1.0));
                                float _3218 = exp2(log2(1.0 / ((_3195 * 3.5) + 5.0)) * 0.25);
                                float _3219 = 1.0 - _632;
                                float _3226 = sqrt(1.0 - ((1.0 - (_3219 * _3219)) * (1.0 - (_3218 * _3218))));
                                float _3227 = _3226 * _3226;
                                float _3228 = _3227 * _3227;
                                float _3229 = _3175 - _2645;
                                float _3230 = _3176 - _2646;
                                float _3231 = _3177 - _2647;
                                float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                                float _3239 = dot(vec3(_557, _560, _563), vec3((-0.0) - _2645, (-0.0) - _2646, (-0.0) - _2647));
                                float _4354 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3242 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3243 = dot(vec3(_557, _560, _563), vec3(_3235 * _3229, _3235 * _3230, _3235 * _3231));
                                float _4365 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3246 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3250 = ((_3246 * _3246) * (_3228 + (-1.0))) + 1.0;
                                float _3251 = _3188 * _3227;
                                float _3252 = _3251 * _3251;
                                float _3258 = ((1.0 - _3252) * dot(vec3(_557, _560, _563), vec3(_3175, _3176, _3177))) + _3252;
                                float _4376 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3260 = 1.0 - _3227;
                                float _3270 = (0.5 / (((_3259 * ((_3242 * _3260) + _3227)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3227) * _3242))) * _3259;
                                float _4387 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3280 = (_3205 * _3182) * (((_3228 * 3.1415927410125732421875) * (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) / ((_3250 * _3250) * ((_3195 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3206 * _3049.z;
                                frontier_phi_87_pred_1 = _3206 * _3049.y;
                                frontier_phi_87_pred_2 = _3206 * _3049.x;
                                frontier_phi_87_pred_3 = _3280 * _3061.z;
                                frontier_phi_87_pred_4 = _3280 * _3061.y;
                                frontier_phi_87_pred_5 = _3280 * _3061.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3289 = frontier_phi_87_pred;
                            _3288 = frontier_phi_87_pred_1;
                            _3287 = frontier_phi_87_pred_2;
                            _3286 = frontier_phi_87_pred_3;
                            _3285 = frontier_phi_87_pred_4;
                            _3284 = frontier_phi_87_pred_5;
                            _2991 = _3287 + _3004;
                            _2992 = _3288 + _3005;
                            _2993 = _3289 + _3006;
                            _2988 = _3284 + _3001;
                            _2989 = _3285 + _3002;
                            _2990 = _3286 + _3003;
                            if (_3008 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _3008;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2993;
                        frontier_phi_81_pred_1 = _2992;
                        frontier_phi_81_pred_2 = _2991;
                        frontier_phi_81_pred_3 = _2990;
                        frontier_phi_81_pred_4 = _2989;
                        frontier_phi_81_pred_5 = _2988;
                    }
                    _2630 = frontier_phi_81_pred;
                    _2628 = frontier_phi_81_pred_1;
                    _2626 = frontier_phi_81_pred_2;
                    _2624 = frontier_phi_81_pred_3;
                    _2622 = frontier_phi_81_pred_4;
                    _2620 = frontier_phi_81_pred_5;
                    uint _2786 = _2785 + 1u;
                    if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2779 = _2620;
                        _2780 = _2622;
                        _2781 = _2624;
                        _2782 = _2626;
                        _2783 = _2628;
                        _2784 = _2630;
                        _2785 = _2786;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2626;
                frontier_phi_62_63_ladder_1 = _2630;
                frontier_phi_62_63_ladder_2 = _2628;
                frontier_phi_62_63_ladder_3 = _2624;
                frontier_phi_62_63_ladder_4 = _2622;
                frontier_phi_62_63_ladder_5 = _2620;
            }
            else
            {
                frontier_phi_62_63_ladder = _2505;
                frontier_phi_62_63_ladder_1 = _2509;
                frontier_phi_62_63_ladder_2 = _2507;
                frontier_phi_62_63_ladder_3 = _2503;
                frontier_phi_62_63_ladder_4 = _2501;
                frontier_phi_62_63_ladder_5 = _2499;
            }
            _2619 = frontier_phi_62_63_ladder_5;
            _2621 = frontier_phi_62_63_ladder_4;
            _2623 = frontier_phi_62_63_ladder_3;
            _2625 = frontier_phi_62_63_ladder;
            _2627 = frontier_phi_62_63_ladder_2;
            _2629 = frontier_phi_62_63_ladder_1;
        }
        float _2634 = isnan(1.0) ? _616 : (isnan(_616) ? 1.0 : min(_616, 1.0));
        _2381 = (_2634 * _2625) + _1818;
        _2383 = (_2634 * _2627) + _1820;
        _2385 = (_2634 * _2629) + _1822;
        _2387 = ((_2619 * _601) * _2634) + _2163;
        _2389 = ((_2621 * _603) * _2634) + _2165;
        _2391 = ((_2623 * _604) * _2634) + _2167;
    }
    else
    {
        _2381 = _1818;
        _2383 = _1820;
        _2385 = _1822;
        _2387 = _2163;
        _2389 = _2165;
        _2391 = _2167;
    }
    uint _2397 = _577 + uint(cbMatDynParam._m0[0u].w);
    float _4403 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4414 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4425 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4436 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _2432 = (((isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2381 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _616))) + ((_2387 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1452)) * cbPerFrame._m0[3u].x)) + ((((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _356) * _396) * cbInstanceData._m0[_2397].x);
    float _2434 = (((((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _356) * _396) * cbInstanceData._m0[_2397].y) + ((_2389 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1452)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2383 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _616)));
    float _2436 = (((((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _356) * _396) * cbInstanceData._m0[_2397].z) + ((_2391 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1452)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2385 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _616)));
    float _2437 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2438 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2439 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2444 = cbInstanceData._m0[_576 + 6u].w * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)));
    float _2449 = _536 / cbSceneParam._m0[86u].x;
    float _2450 = _537 / cbSceneParam._m0[86u].y;
    vec4 _2464 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2449, _2450, (log2((isnan(cbSceneParam._m0[77u].w) ? _462 : (isnan(_462) ? cbSceneParam._m0[77u].w : min(_462, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2466 = _2464.x;
    float _2467 = _2464.y;
    float _2468 = _2464.z;
    float _2469 = _2464.w;
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    if (_462 > cbSceneParam._m0[78u].w)
    {
        float _2524 = isnan(_462) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _462 : min(cbSceneParam._m0[80u].w, _462));
        float _2525 = _2524 / _462;
        float _2536 = _2525 * _511;
        float _2537 = _512 * _2525;
        float _2538 = (-0.0) - _2537;
        float _2539 = _2525 * _513;
        float _2541 = (cbSceneParam._m0[77u].w * _2538) / _2524;
        float _2542 = _2541 + cbSceneParam._m0[79u].w;
        float _2543 = cbSceneParam._m0[79u].w - _2537;
        float _2549 = sqrt(((_2536 * _2536) + (_2537 * _2537)) + (_2539 * _2539));
        float _2552 = (1.0 - (cbSceneParam._m0[77u].w / _2524)) * _2549;
        float _2557 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2559 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2736;
        if (abs((_2538 - _2541) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2736 = ((((_2542 > 0.0) ? exp2(_2557 * _2542) : (2.0 - exp2(_2559 * _2542))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2552;
        }
        else
        {
            float _2680 = 1.0 / cbSceneParam._m0[80u].x;
            float _2681 = isnan(_2543) ? _2542 : (isnan(_2542) ? _2543 : max(_2542, _2543));
            float _2682 = isnan(_2543) ? _2542 : (isnan(_2542) ? _2543 : min(_2542, _2543));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            float _2692 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : min(_2682, 0.0));
            _2736 = ((abs(_2549 / _2538) * cbSceneParam._m0[80u].y) * ((((_2691 - _2692) * 2.0) - ((exp2(_2557 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0)))) - exp2(_2557 * (isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0))))) * _2680)) - ((exp2(_2559 * _2691) - exp2(_2559 * _2692)) * _2680))) + (_2552 * cbSceneParam._m0[80u].z);
        }
        vec4 _2738 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2449, _2450, 1.0), 0.0);
        float _2747 = exp2((_2736 * (-1.44269502162933349609375)) * (1.0 - _2738.w));
        float _2748 = log2(_2747);
        float _2764 = log2(_2469);
        _2561 = (exp2(_2764 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].x)) * _2738.x) / cbSceneParam._m0[78u].x)) + _2466;
        _2563 = (exp2(_2764 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].y)) * _2738.y) / cbSceneParam._m0[78u].y)) + _2467;
        _2565 = (exp2(_2764 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].z)) * _2738.z) / cbSceneParam._m0[78u].z)) + _2468;
        _2567 = _2747 * _2469;
    }
    else
    {
        _2561 = _2466;
        _2563 = _2467;
        _2565 = _2468;
        _2567 = _2469;
    }
    bool _2774;
    vec4 _2577;
    vec4 _2599;
    float _2601;
    float _2605;
    float _2606;
    float _2607;
    float _2608;
    bool _2618;
    for (;;)
    {
        _2577 = cbMatDynParam._m0[0u];
        float _2579 = roundEven(_2577.y);
        bool _2580 = _2579 == 3.0;
        float _2581 = log2(_2567);
        float _2588 = exp2(_2581 * cbSceneParam._m0[78u].x) * _2437;
        float _2589 = exp2(_2581 * cbSceneParam._m0[78u].y) * _2438;
        float _2590 = exp2(_2581 * cbSceneParam._m0[78u].z) * _2439;
        float _2597 = _524 + (-0.5);
        _2599 = cbMtdParam._m0[1u];
        _2601 = _2599.y * _2597;
        float _2604 = (_2579 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2605 = _2604 * (_2580 ? _2588 : (_2588 + (cbSceneParam._m0[72u].w * _2561)));
        _2606 = _2604 * (_2580 ? _2589 : (_2589 + (cbSceneParam._m0[72u].w * _2563)));
        _2607 = _2604 * (_2580 ? _2590 : (_2590 + (cbSceneParam._m0[72u].w * _2565)));
        _2608 = _2597 * 0.999000012874603271484375;
        _2618 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2618)
        {
            if ((cbInstanceData._m0[_576 + 7u].x + _2608) < 0.5)
            {
                _2774 = true;
                break;
            }
        }
        uint _2715 = _577 + uint(_2577.w);
        if ((cbInstanceData._m0[_2715].w < 1.0) && ((cbInstanceData._m0[_2715].w + _2608) < 0.5))
        {
            _2774 = true;
            break;
        }
        if ((_2601 + _299) < _2599.x)
        {
            _2774 = true;
            break;
        }
        _2774 = false;
        break;
    }
    float _2979;
    if (_2774)
    {
        discard_state = true;
        _2979 = 0.0;
    }
    else
    {
        _2979 = _2444;
    }
    SV_Target.x = _2605;
    SV_Target.y = _2606;
    SV_Target.z = _2607;
    SV_Target.w = _2979;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2444;
    discard_exit();
}


