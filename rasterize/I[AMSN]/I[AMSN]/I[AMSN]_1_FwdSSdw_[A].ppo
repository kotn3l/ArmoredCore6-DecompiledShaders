#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1019;
float _3461;
float _3462;
float _3463;
float _3464;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _295 = texture(sampler2D(I_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _301 = _295.w;
    float _302 = _295.x * cbMtdParam._m0[9u].x;
    float _303 = _295.y * cbMtdParam._m0[9u].y;
    float _304 = _295.z * cbMtdParam._m0[9u].z;
    vec4 _319 = texture(sampler2D(I_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _323 = _319.z;
    float _327 = (_319.x * 2.0) + (-1.0);
    float _329 = (_319.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_327, _329), vec2(_327, _329));
    float _3473 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))));
    float _351 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
    float _354 = cbMtdParam._m0[12u].x - cbMtdParam._m0[12u].w;
    float _356 = (_351 - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0)));
    float _3489 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _358 = 1.0 - (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)));
    float _366 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3500 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _367 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _377 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _384 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _391 = dot(vec4(_384 * _275, _384 * _276, _384 * _277, 0.0), vec4(_377 * _219, _377 * _220, _377 * _221, 0.0)) - (((_367 * _367) * cbMtdParam._m0[11u].w) * (3.0 - (_367 * 2.0)));
    float _3511 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _398 = exp2(log2(1.0 - (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _402 = cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y;
    float _413 = gl_FragCoord.x * 0.125;
    float _415 = gl_FragCoord.y * 0.125;
    float _426 = fma(_336, _219, fma(_329, _211 * TANGENT.x, (_197 * _189) * _327));
    float _429 = fma(_336, _220, fma(_329, _211 * TANGENT.y, (_197 * _190) * _327));
    float _432 = fma(_336, _221, fma(_329, _211 * TANGENT.z, (_197 * _191) * _327));
    float _436 = inversesqrt(dot(vec3(_426, _429, _432), vec3(_426, _429, _432)));
    float _437 = _436 * _426;
    float _438 = _436 * _429;
    float _439 = _436 * _432;
    float _3532 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _440 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _441 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3565 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3576 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3587 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _445 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    if (!(((floatBitsToUint(cbSceneParam._m0[69u]).w != 0u) ? ((_351 - cbMtdParam._m0[12u].y) / (isnan(0.001000000047497451305389404296875) ? _402 : (isnan(_402) ? 0.001000000047497451305389404296875 : max(_402, 0.001000000047497451305389404296875)))) : 1.0) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_413, _415)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _464 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _513 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _504);
    float _514 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _504);
    float _515 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _504);
    float _519 = inversesqrt(dot(vec3(_513, _514, _515), vec3(_513, _514, _515)));
    float _520 = _513 * _519;
    float _521 = _514 * _519;
    float _522 = _515 * _519;
    vec4 _524 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_413, _415));
    float _526 = _524.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _700 = sqrt(((_513 * _513) + (_514 * _514)) + (_515 * _515));
        float _706 = (cbMatDynParam._m0[5u].x * _700) + cbMatDynParam._m0[5u].y;
        float _3598 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _711 = (cbMatDynParam._m0[5u].z * _700) + cbMatDynParam._m0[5u].w;
        float _3609 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) - _707)) + _707) < ((_526 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _538 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _539 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _559 = fma(_439, cbSceneParam._m0[5u].z, fma(_438, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _437));
    float _562 = fma(_439, cbSceneParam._m0[6u].z, fma(_438, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _437));
    float _565 = fma(_439, cbSceneParam._m0[7u].z, fma(_438, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _437));
    uint _578 = uint(roundEven(NORMAL.w)) * 13u;
    uint _579 = _578 + 9u;
    uint _580 = _579 + uint(cbMatDynParam._m0[0u].w);
    float _586 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_580].x;
    float _587 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_580].y;
    float _588 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) * cbInstanceData._m0[_580].z;
    float _3620 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _592 = 1.0 - _445;
    float _593 = _589 * _592;
    float _594 = _590 * _592;
    float _595 = _591 * _592;
    float _600 = (_589 + (-0.039999999105930328369140625)) * _445;
    float _601 = (_590 + (-0.039999999105930328369140625)) * _445;
    float _602 = (_591 + (-0.039999999105930328369140625)) * _445;
    float _603 = _600 + 0.039999999105930328369140625;
    float _605 = _601 + 0.039999999105930328369140625;
    float _606 = _602 + 0.039999999105930328369140625;
    vec4 _615 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _538, cbSceneParam._m0[86u].y * _539));
    float _618 = _615.x * TEXCOORD_1.w;
    float _619 = dot(vec3(_437, _438, _439), vec3(_520, _521, _522));
    float _622 = _619 * 2.0;
    float _626 = (_622 * _437) - _520;
    float _627 = (_622 * _438) - _521;
    float _628 = (_622 * _439) - _522;
    float _632 = abs(dot(vec3(_520, _521, _522), vec3(_437, _438, _439)));
    float _3653 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _634 = sqrt(_441);
    float _646 = exp2((_634 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_634 * 3.0));
    float _652 = (1.0 - _646) * ((_634 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _653 = _646 * _634;
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1018;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _743 = fma(_689, cbModelParam._m0[26u].z, fma(_685, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _681));
        float _747 = fma(_689, cbModelParam._m0[27u].z, fma(_685, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _681));
        float _751 = fma(_689, cbModelParam._m0[28u].z, fma(_685, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _681));
        float _776 = _681 + _437;
        float _777 = _685 + _438;
        float _778 = _689 + _439;
        float _788 = fma(_778, cbModelParam._m0[26u].z, fma(_777, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _776)) - _743;
        float _789 = fma(_778, cbModelParam._m0[27u].z, fma(_777, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _776)) - _747;
        float _790 = fma(_778, cbModelParam._m0[28u].z, fma(_777, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _776)) - _751;
        float _794 = inversesqrt(dot(vec3(_788, _789, _790), vec3(_788, _789, _790)));
        float _807 = ((_794 * _788) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_743 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_794 * _789) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_747 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _809 = ((_794 * _790) / cbModelParam._m0[34u].z) + ((((((_751 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        float _846 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_812.x + (-0.5));
        float _848 = _846 * (_812.y + (-0.5));
        float _849 = _846 * (_812.z + (-0.5));
        float _856 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_819.x + (-0.5));
        float _858 = _856 * (_819.y + (-0.5));
        float _859 = _856 * (_819.z + (-0.5));
        float _866 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_826.x + (-0.5));
        float _868 = _866 * (_826.y + (-0.5));
        float _869 = _866 * (_826.z + (-0.5));
        float _876 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_833.x + (-0.5));
        float _878 = _876 * (_833.y + (-0.5));
        float _879 = _876 * (_833.z + (-0.5));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = _847 * 0.5;
        float _884 = _857 * 0.5;
        float _885 = _867 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _900 = (dot(vec3(_437, _438, _439), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _910 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3701 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_912 + 1.0))) + _917) * _880;
        float _927 = _848 * 0.5;
        float _928 = _858 * 0.5;
        float _929 = _868 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _943 = (dot(vec3(_437, _438, _439), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _952 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3734 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_954 + 1.0))) + _959) * _881;
        float _969 = _849 * 0.5;
        float _970 = _859 * 0.5;
        float _971 = _869 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_437, _438, _439), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3767 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_996 + 1.0))) + _1001) * _882;
        _1018 = _849;
        _1020 = _848;
        _1021 = _847;
        _1022 = _859;
        _1023 = _858;
        _1024 = _857;
        _1025 = _869;
        _1026 = _868;
        _1027 = _867;
        _1028 = _882;
        _1029 = _881;
        _1030 = _880;
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
    }
    else
    {
        _1018 = _1019;
        _1020 = _1019;
        _1021 = _1019;
        _1022 = _1019;
        _1023 = _1019;
        _1024 = _1019;
        _1025 = _1019;
        _1026 = _1019;
        _1027 = _1019;
        _1028 = _1019;
        _1029 = _1019;
        _1030 = _1019;
        _1031 = 0.0;
        _1032 = 0.0;
        _1033 = 0.0;
    }
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1059 = fma(_689, cbModelParam._m0[30u].z, fma(_685, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _681));
        float _1063 = fma(_689, cbModelParam._m0[31u].z, fma(_685, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _681));
        float _1067 = fma(_689, cbModelParam._m0[32u].z, fma(_685, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _681));
        float _1090 = _681 + _437;
        float _1091 = _685 + _438;
        float _1092 = _689 + _439;
        float _1102 = fma(_1092, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1090)) - _1059;
        float _1103 = fma(_1092, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1090)) - _1063;
        float _1104 = fma(_1092, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1090)) - _1067;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1059 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1063 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[35u].z) + ((((((_1067 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1158 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1125.x + (-0.5));
        float _1160 = _1158 * (_1125.y + (-0.5));
        float _1161 = _1158 * (_1125.z + (-0.5));
        float _1168 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1132.x + (-0.5));
        float _1170 = _1168 * (_1132.y + (-0.5));
        float _1171 = _1168 * (_1132.z + (-0.5));
        float _1178 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1139.x + (-0.5));
        float _1180 = _1178 * (_1139.y + (-0.5));
        float _1181 = _1178 * (_1139.z + (-0.5));
        float _1188 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1146.x + (-0.5));
        float _1190 = _1188 * (_1146.y + (-0.5));
        float _1191 = _1188 * (_1146.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_437, _438, _439), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3830 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1222 + 1.0))) + _1227) * _1192;
        float _1237 = _1160 * 0.5;
        float _1238 = _1170 * 0.5;
        float _1239 = _1180 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_437, _438, _439), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3863 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1264 + 1.0))) + _1269) * _1193;
        float _1279 = _1161 * 0.5;
        float _1280 = _1171 * 0.5;
        float _1281 = _1181 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_437, _438, _439), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3896 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1306 + 1.0))) + _1311) * _1194;
        _1328 = _1161;
        _1329 = _1160;
        _1330 = _1159;
        _1331 = _1171;
        _1332 = _1170;
        _1333 = _1169;
        _1334 = _1181;
        _1335 = _1180;
        _1336 = _1179;
        _1337 = _1194;
        _1338 = _1193;
        _1339 = _1192;
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1019;
        _1329 = _1019;
        _1330 = _1019;
        _1331 = _1019;
        _1332 = _1019;
        _1333 = _1019;
        _1334 = _1019;
        _1335 = _1019;
        _1336 = _1019;
        _1337 = _1019;
        _1338 = _1019;
        _1339 = _1019;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1031)) + _1031;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1032)) + _1032;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1033)) + _1033;
    float _1375 = fma(_1354, cbSceneParam._m0[89u].z, fma(_1353, cbSceneParam._m0[89u].y, _1352 * cbSceneParam._m0[89u].x));
    float _1378 = fma(_1354, cbSceneParam._m0[90u].z, fma(_1353, cbSceneParam._m0[90u].y, _1352 * cbSceneParam._m0[90u].x));
    float _1381 = fma(_1354, cbSceneParam._m0[91u].z, fma(_1353, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1352));
    float _1396 = _626 * 0.5;
    float _1397 = _627 * 0.5;
    float _1398 = _628 * 0.5;
    float _1399 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1402 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1405 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1439;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1412 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1018, _1022, _1025, _1028));
        float _1416 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1420 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1021, _1024, _1027, _1030));
        float _1427 = dot(vec4(cbModelParam._m0[39u]), vec4(_1396, _1397, _1398, 1.0));
        _1439 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1439 = 1.0;
    }
    float _1450;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1441 = dot(vec4(cbModelParam._m0[40u]), vec4(_1396, _1397, _1398, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1441) ? 0.0 : (isnan(0.0) ? _1441 : max(0.0, _1441))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1454 = (_1450 * cbModelParam._m0[1u].x) + (_1439 * (1.0 - cbModelParam._m0[1u].x));
    float _1464 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _441);
    float _1465 = isnan(_1464) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1464 : min(cbModelParam._m0[25u].z, _1464));
    float _1547;
    float _1549;
    float _1551;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1514 = fma(_689, cbModelParam._m0[13u].z, fma(_685, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _681)) + cbModelParam._m0[13u].w;
        float _1518 = fma(_689, cbModelParam._m0[14u].z, fma(_685, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _681)) + cbModelParam._m0[14u].w;
        float _1522 = fma(_689, cbModelParam._m0[15u].z, fma(_685, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _681)) + cbModelParam._m0[15u].w;
        float _1525 = fma(_628, cbModelParam._m0[13u].z, fma(_627, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _626));
        float _1528 = fma(_628, cbModelParam._m0[14u].z, fma(_627, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _626));
        float _1531 = fma(_628, cbModelParam._m0[15u].z, fma(_627, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _626));
        float _1559;
        if (_1525 > 0.0)
        {
            _1559 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1559 = frontier_phi_21_19_ladder;
        }
        float _1786;
        if (_1528 > 0.0)
        {
            _1786 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1786 = frontier_phi_30_26_ladder;
        }
        float _2043;
        if (_1531 > 0.0)
        {
            _2043 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2043 = frontier_phi_42_37_ladder;
        }
        float _2045 = isnan(_1786) ? _1559 : (isnan(_1559) ? _1786 : min(_1559, _1786));
        float _2046 = isnan(_2043) ? _2045 : (isnan(_2045) ? _2043 : min(_2045, _2043));
        float _2050 = (_2046 * _1525) + _1514;
        float _2051 = (_2046 * _1528) + _1518;
        float _2052 = (_2046 * _1531) + _1522;
        float _2053 = _2046 * 9.9999997473787516355514526367188e-05;
        float _2055 = (-1.0) - _2053;
        float _2057 = _2053 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2052 > _2057) || ((_2052 < _2055) || ((_2051 > _2057) || ((_2051 < _2055) || ((_2050 < _2055) || (_2050 > _2057))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2180 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2052, cbModelParam._m0[9u].z, fma(_2051, cbModelParam._m0[9u].y, _2050 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2052, cbModelParam._m0[10u].z, fma(_2051, cbModelParam._m0[10u].y, _2050 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2052, cbModelParam._m0[11u].z, fma(_2051, cbModelParam._m0[11u].y, _2050 * cbModelParam._m0[11u].x))), _1465);
            frontier_phi_20_42_ladder = _2180.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2180.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2180.x * cbModelParam._m0[1u].y;
        }
        _1547 = frontier_phi_20_42_ladder_2;
        _1549 = frontier_phi_20_42_ladder_1;
        _1551 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_626, _627, _628), _1465);
        _1547 = _1535.x * cbModelParam._m0[1u].y;
        _1549 = _1535.y * cbModelParam._m0[1u].y;
        _1551 = _1535.z * cbModelParam._m0[1u].y;
    }
    float _1555 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _441);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1555 : min(cbModelParam._m0[25u].w, _1555));
    float _1648;
    float _1650;
    float _1652;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1612 = fma(_689, cbModelParam._m0[21u].z, fma(_685, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _681)) + cbModelParam._m0[21u].w;
        float _1616 = fma(_689, cbModelParam._m0[22u].z, fma(_685, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _681)) + cbModelParam._m0[22u].w;
        float _1620 = fma(_689, cbModelParam._m0[23u].z, fma(_685, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _681)) + cbModelParam._m0[23u].w;
        float _1623 = fma(_628, cbModelParam._m0[21u].z, fma(_627, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _626));
        float _1626 = fma(_628, cbModelParam._m0[22u].z, fma(_627, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _626));
        float _1629 = fma(_628, cbModelParam._m0[23u].z, fma(_627, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _626));
        float _1791;
        if (_1623 > 0.0)
        {
            _1791 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1791 = frontier_phi_32_28_ladder;
        }
        float _2070;
        if (_1626 > 0.0)
        {
            _2070 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2070 = frontier_phi_44_39_ladder;
        }
        float _2283;
        if (_1629 > 0.0)
        {
            _2283 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2283 = frontier_phi_53_50_ladder;
        }
        float _2285 = isnan(_2070) ? _1791 : (isnan(_1791) ? _2070 : min(_1791, _2070));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1623) + _1612;
        float _2291 = (_2286 * _1626) + _1616;
        float _2292 = (_2286 * _1629) + _1620;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2293;
        float _2296 = _2293 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2292 > _2296) || ((_2292 < _2294) || ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 < _2294) || (_2290 > _2296))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2520 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2292, cbModelParam._m0[17u].z, fma(_2291, cbModelParam._m0[17u].y, _2290 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2292, cbModelParam._m0[18u].z, fma(_2291, cbModelParam._m0[18u].y, _2290 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2292, cbModelParam._m0[19u].z, fma(_2291, cbModelParam._m0[19u].y, _2290 * cbModelParam._m0[19u].x))), _1556);
            frontier_phi_29_53_ladder = _2520.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2520.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2520.x * cbModelParam._m0[1u].z;
        }
        _1648 = frontier_phi_29_53_ladder_2;
        _1650 = frontier_phi_29_53_ladder_1;
        _1652 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_626, _627, _628), _1556);
        _1648 = _1632.x * cbModelParam._m0[1u].z;
        _1650 = _1632.y * cbModelParam._m0[1u].z;
        _1652 = _1632.z * cbModelParam._m0[1u].z;
    }
    float _1665 = (((_652 * _603) + _653) * _618) * ((cbModelParam._m0[1u].w * (_1648 - _1547)) + _1547);
    float _1667 = (((_652 * _605) + _653) * _618) * ((cbModelParam._m0[1u].w * (_1650 - _1549)) + _1549);
    float _1669 = (((_652 * _606) + _653) * _618) * ((cbModelParam._m0[1u].w * (_1652 - _1551)) + _1551);
    float _1672 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, _1665 * cbSceneParam._m0[91u].x));
    vec4 _1686 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_538, _539));
    float _1688 = _1686.w;
    float _1700 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1688);
    float _1701 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1688);
    float _1702 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1688);
    uvec4 _1706 = floatBitsToUint(cbInstanceData._m0[_578 + 5u]);
    uint _1708 = _1706.x * 14u;
    uint _1709 = _1708 + 13u;
    float _1716 = _618 + (-1.0);
    float _1721 = (cbLight._m0[_1709].x * _1716) + 1.0;
    float _1722 = (cbLight._m0[_1709].y * _1716) + 1.0;
    float _1723 = (cbLight._m0[_1709].z * _1716) + 1.0;
    float _1724 = (cbLight._m0[_1709].w * _1716) + 1.0;
    uint _1725 = _1708 + 5u;
    float _1731 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
    uint _1735 = _1708 + 4u;
    float _1745 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _1749 = _1708 | 1u;
    float _1760 = dot(vec3(cbLight._m0[_1708].xyz), vec3(_437, _438, _439));
    float _1763 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_437, _438, _439));
    float _4032 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _4043 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1768 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _1770 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1777 = ((cbLight._m0[_1725].x * _1731) * _1770) + (((cbLight._m0[_1735].x * _1700) * _1745) * _1768);
    float _1778 = ((_1731 * cbLight._m0[_1725].y) * _1770) + (((cbLight._m0[_1735].y * _1701) * _1745) * _1768);
    float _1779 = ((_1731 * cbLight._m0[_1725].z) * _1770) + (((cbLight._m0[_1735].z * _1702) * _1745) * _1768);
    uvec4 _1783 = floatBitsToUint(cbLight._m0[_1708 + 12u]);
    bool _1785 = _1783.x == 0u;
    float _1796;
    float _1798;
    float _1800;
    if (_1785)
    {
        _1796 = _1777;
        _1798 = _1778;
        _1800 = _1779;
    }
    else
    {
        uint _1804 = _1708 + 6u;
        float _1820 = (dot(vec3(cbLight._m0[_1708 + 2u].xyz), vec3(_437, _438, _439)) * 0.5) + 0.5;
        float _1821 = _1820 * _1820;
        float _4054 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1823 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _1796 = (((cbLight._m0[_1804].x * 0.3183098733425140380859375) * _1822) * _1823) + _1777;
        _1798 = (((cbLight._m0[_1804].y * 0.3183098733425140380859375) * _1822) * _1823) + _1778;
        _1800 = (((cbLight._m0[_1804].z * 0.3183098733425140380859375) * _1822) * _1823) + _1779;
    }
    bool _1803 = _1783.y == 0u;
    float _1841;
    float _1843;
    float _1845;
    if (_1803)
    {
        _1841 = _1796;
        _1843 = _1798;
        _1845 = _1800;
    }
    else
    {
        uint _2014 = _1708 + 7u;
        float _2030 = (dot(vec3(cbLight._m0[_1708 + 3u].xyz), vec3(_437, _438, _439)) * 0.5) + 0.5;
        float _2031 = _2030 * _2030;
        float _4070 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2032 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2033 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _1841 = (((cbLight._m0[_2014].x * 0.3183098733425140380859375) * _2032) * _2033) + _1796;
        _1843 = (((cbLight._m0[_2014].y * 0.3183098733425140380859375) * _2032) * _2033) + _1798;
        _1845 = (((cbLight._m0[_2014].z * 0.3183098733425140380859375) * _2032) * _2033) + _1800;
    }
    uint _1848 = _1708 + 8u;
    float _1861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1708].w)) * _441) * 0.949999988079071044921875);
    float _1862 = _1861 * _1861;
    float _1863 = cbLight._m0[_1708].x + _520;
    float _1864 = cbLight._m0[_1708].y + _521;
    float _1865 = cbLight._m0[_1708].z + _522;
    float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
    float _1870 = _1869 * _1863;
    float _1871 = _1869 * _1864;
    float _1872 = _1869 * _1865;
    float _1873 = dot(vec3(_437, _438, _439), vec3(cbLight._m0[_1708].xyz));
    float _4086 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _1877 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1878 = dot(vec3(_437, _438, _439), vec3(_1870, _1871, _1872));
    float _4108 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _1882 = dot(vec3(cbLight._m0[_1708].xyz), vec3(_1870, _1871, _1872));
    float _4119 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1886 = _1862 * _1862;
    float _1890 = ((_1881 * _1881) * (_1886 + (-1.0))) + 1.0;
    float _1898 = exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0);
    float _1899 = 0.959999978542327880859375 - _600;
    float _1901 = 0.959999978542327880859375 - _601;
    float _1902 = 0.959999978542327880859375 - _602;
    float _1909 = 1.0 - _1862;
    float _1920 = (0.5 / (((_1877 * ((_1876 * _1909) + _1862)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1909) + _1862) * _1876))) * _1876;
    float _4130 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1922 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1886 / ((_1890 * _1890) * 3.141590118408203125));
    uint _1936 = _1708 + 9u;
    float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1749].w)) * _441) * 0.949999988079071044921875);
    float _1948 = _1947 * _1947;
    float _1949 = cbLight._m0[_1749].x + _520;
    float _1950 = cbLight._m0[_1749].y + _521;
    float _1951 = cbLight._m0[_1749].z + _522;
    float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
    float _1956 = _1955 * _1949;
    float _1957 = _1955 * _1950;
    float _1958 = _1955 * _1951;
    float _1959 = dot(vec3(_437, _438, _439), vec3(cbLight._m0[_1749].xyz));
    float _4141 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _1963 = dot(vec3(_437, _438, _439), vec3(_1956, _1957, _1958));
    float _4152 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_1956, _1957, _1958));
    float _4163 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1971 = _1948 * _1948;
    float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
    float _1982 = exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0);
    float _1989 = 1.0 - _1948;
    float _1999 = (0.5 / (((_1877 * ((_1962 * _1989) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1989) + _1948) * _1962))) * _1962;
    float _4174 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2001 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
    float _2011 = (((((_1982 * _1899) + _603) * cbLight._m0[_1936].x) * _2001) * _1731) + ((((cbLight._m0[_1848].x * _1700) * ((_1898 * _1899) + _603)) * _1922) * _1745);
    float _2012 = (((((_1982 * _1901) + _605) * cbLight._m0[_1936].y) * _2001) * _1731) + ((((cbLight._m0[_1848].y * _1701) * ((_1898 * _1901) + _605)) * _1922) * _1745);
    float _2013 = (((((_1982 * _1902) + _606) * cbLight._m0[_1936].z) * _2001) * _1731) + ((((cbLight._m0[_1848].z * _1702) * ((_1898 * _1902) + _606)) * _1922) * _1745);
    float _2075;
    float _2077;
    float _2079;
    if (_1785)
    {
        _2075 = _2011;
        _2077 = _2012;
        _2079 = _2013;
    }
    else
    {
        uint _2081 = _1708 + 2u;
        uint _2085 = _1708 + 10u;
        float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _441) * 0.949999988079071044921875);
        float _2100 = _2099 * _2099;
        float _2101 = cbLight._m0[_2081].x + _520;
        float _2102 = cbLight._m0[_2081].y + _521;
        float _2103 = cbLight._m0[_2081].z + _522;
        float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
        float _2108 = _2107 * _2101;
        float _2109 = _2107 * _2102;
        float _2110 = _2107 * _2103;
        float _2111 = dot(vec3(_437, _438, _439), vec3(cbLight._m0[_2081].xyz));
        float _4185 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2115 = dot(vec3(_437, _438, _439), vec3(_2108, _2109, _2110));
        float _4196 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2118 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2119 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2108, _2109, _2110));
        float _4207 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2123 = _2100 * _2100;
        float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
        float _2134 = exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0);
        float _2141 = 1.0 - _2100;
        float _2151 = (0.5 / (((_1877 * ((_2114 * _2141) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _2141) + _2100) * _2114))) * _2114;
        float _4218 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2153 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
        float _2154 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _2075 = (((((_2134 * _1899) + _603) * cbLight._m0[_2085].x) * _2153) * _2154) + _2011;
        _2077 = (((((_2134 * _1901) + _605) * cbLight._m0[_2085].y) * _2153) * _2154) + _2012;
        _2079 = (((((_2134 * _1902) + _606) * cbLight._m0[_2085].z) * _2153) * _2154) + _2013;
    }
    float _2189;
    float _2191;
    float _2193;
    if (_1803)
    {
        _2189 = _2075;
        _2191 = _2077;
        _2193 = _2079;
    }
    else
    {
        uint _2200 = _1708 + 3u;
        uint _2204 = _1708 + 11u;
        float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _441) * 0.949999988079071044921875);
        float _2219 = _2218 * _2218;
        float _2220 = cbLight._m0[_2200].x + _520;
        float _2221 = cbLight._m0[_2200].y + _521;
        float _2222 = cbLight._m0[_2200].z + _522;
        float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
        float _2227 = _2226 * _2220;
        float _2228 = _2226 * _2221;
        float _2229 = _2226 * _2222;
        float _2230 = dot(vec3(_437, _438, _439), vec3(cbLight._m0[_2200].xyz));
        float _4234 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2234 = dot(vec3(_437, _438, _439), vec3(_2227, _2228, _2229));
        float _4245 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2238 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2227, _2228, _2229));
        float _4256 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2242 = _2219 * _2219;
        float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
        float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
        float _2260 = 1.0 - _2219;
        float _2270 = (0.5 / (((_1877 * ((_2233 * _2260) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _2260) + _2219) * _2233))) * _2233;
        float _4267 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2272 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
        float _2273 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _2189 = (((((_2253 * _1899) + _603) * cbLight._m0[_2204].x) * _2272) * _2273) + _2075;
        _2191 = (((((_2253 * _1901) + _605) * cbLight._m0[_2204].y) * _2272) * _2273) + _2077;
        _2193 = (((((_2253 * _1902) + _606) * cbLight._m0[_2204].z) * _2272) * _2273) + _2079;
    }
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_1706.y == 0u)
    {
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2348;
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2348;
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2348;
        uvec4 _2363 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2364 = _2363.x;
        uint _2375 = uint((float(_2363.y) * floor(float(uint(cbSceneParam._m0[85u].y * _539) / _2364))) + floor(float(uint(cbSceneParam._m0[85u].x * _538) / _2364)));
        float _2385 = (log2(_2351 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2386 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        uint _2389 = uint(isnan(14.0) ? _2386 : (isnan(_2386) ? 14.0 : min(_2386, 14.0)));
        uvec4 _2394 = texelFetch(g_lightClusterGridBuffer, int(((_2389 << 2u) + (_2375 << 6u)) >> 2u));
        uint _2395 = _2394.x;
        uint _2396 = _2363.z;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        if (((((1u << ((_2396 >> 4u) & 15u)) + 4294967295u) & _2395) == 0u) || ((_2396 & 240u) == 0u))
        {
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
        }
        else
        {
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            uint _2683 = 0u;
            uint _2692;
            bool _2693;
            for (;;)
            {
                _2692 = texelFetch(g_lightClassification, int((((_2389 << 5u) + (_2375 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                _2693 = _2692 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2693)
                {
                    frontier_phi_70_pred = _2679;
                    frontier_phi_70_pred_1 = _2682;
                    frontier_phi_70_pred_2 = _2681;
                    frontier_phi_70_pred_3 = _2680;
                    frontier_phi_70_pred_4 = _2678;
                    frontier_phi_70_pred_5 = _2677;
                }
                else
                {
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    uint _2828;
                    _2822 = _2677;
                    _2823 = _2678;
                    _2824 = _2679;
                    _2825 = _2680;
                    _2826 = _2681;
                    _2827 = _2682;
                    _2828 = _2692;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    for (;;)
                    {
                        uint _2832 = uint(findLSB(_2828)) + (_2683 << 5u);
                        uint _2829 = (_2828 + 4294967295u) & _2828;
                        uint _2834 = _2832 * 48u;
                        vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 3u)).x));
                        uint _2854 = (_2832 * 48u) + 4u;
                        vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 3u)).x));
                        uint _2873 = (_2832 * 48u) + 8u;
                        vec3 _2884 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x));
                        float _2888 = _2848.x - _2349;
                        float _2889 = _2848.y - _2350;
                        float _2890 = _2848.z - _2351;
                        float _2891 = dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890));
                        float _2894 = inversesqrt(_2891);
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2898 = dot(vec3(_559, _562, _565), vec3(_2895, _2896, _2897));
                        float _2903 = 1.0 - (_2891 * _2848.w);
                        float _4293 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2904 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2905 = sqrt(_2891) * _2867.w;
                        float _2908 = 1.39999997615814208984375 / (_2905 + 1.39999997615814208984375);
                        float _2909 = _2908 * _2908;
                        float _2912 = ((1.0 - _2909) * _2898) + _2909;
                        float _2915 = _2905 * _2905;
                        float _2919 = ((isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))) * _2904) / ((_2915 * 0.699999988079071044921875) + 1.0);
                        float _2923 = (-0.0) - _2349;
                        float _2924 = (-0.0) - _2350;
                        float _2925 = (-0.0) - _2351;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2940 = exp2(log2(1.0 / ((_2915 * 3.5) + 5.0)) * 0.25);
                        float _2941 = 1.0 - _634;
                        float _2948 = sqrt(1.0 - ((1.0 - (_2941 * _2941)) * (1.0 - (_2940 * _2940))));
                        float _2949 = _2948 * _2948;
                        float _2950 = _2949 * _2949;
                        float _2951 = _2930 + _2895;
                        float _2952 = _2931 + _2896;
                        float _2953 = _2932 + _2897;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2961 = dot(vec3(_559, _562, _565), vec3(_2930, _2931, _2932));
                        float _4309 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _2965 = dot(vec3(_559, _562, _565), vec3(_2957 * _2951, _2957 * _2952, _2957 * _2953));
                        float _4320 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2968 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _2972 = ((_2968 * _2968) * (_2950 + (-1.0))) + 1.0;
                        float _2973 = _2908 * _2949;
                        float _2974 = _2973 * _2973;
                        float _2977 = ((1.0 - _2974) * _2898) + _2974;
                        float _4331 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _2979 = 1.0 - _2949;
                        float _2989 = (0.5 / (((_2978 * ((_2964 * _2979) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2978 * _2979) + _2949) * _2964))) * _2978;
                        float _4342 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _3000 = (((_2950 * 3.1415927410125732421875) * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) / ((_2972 * _2972) * ((_2915 * 2.1991131305694580078125) + 3.141590118408203125))) * _2904;
                        _2752 = (_2919 * _2867.x) + _2825;
                        _2753 = (_2919 * _2867.y) + _2826;
                        _2754 = (_2919 * _2867.z) + _2827;
                        _2749 = (_3000 * _2884.x) + _2822;
                        _2750 = (_3000 * _2884.y) + _2823;
                        _2751 = (_3000 * _2884.z) + _2824;
                        if (_2829 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2822 = _2749;
                            _2823 = _2750;
                            _2824 = _2751;
                            _2825 = _2752;
                            _2826 = _2753;
                            _2827 = _2754;
                            _2828 = _2829;
                        }
                    }
                    frontier_phi_70_pred = _2751;
                    frontier_phi_70_pred_1 = _2754;
                    frontier_phi_70_pred_2 = _2753;
                    frontier_phi_70_pred_3 = _2752;
                    frontier_phi_70_pred_4 = _2750;
                    frontier_phi_70_pred_5 = _2749;
                }
                _2530 = frontier_phi_70_pred;
                _2536 = frontier_phi_70_pred_1;
                _2534 = frontier_phi_70_pred_2;
                _2532 = frontier_phi_70_pred_3;
                _2528 = frontier_phi_70_pred_4;
                _2526 = frontier_phi_70_pred_5;
                uint _2684 = _2683 + 1u;
                if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2677 = _2526;
                    _2678 = _2528;
                    _2679 = _2530;
                    _2680 = _2532;
                    _2681 = _2534;
                    _2682 = _2536;
                    _2683 = _2684;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
        }
        uvec4 _2539 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2540 = _2539.z;
        uint _2542 = (_2540 >> 8u) & 15u;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        if (((4294967295u << _2542) & _2395) == 0u)
        {
            _2645 = _2525;
            _2647 = _2527;
            _2649 = _2529;
            _2651 = _2531;
            _2653 = _2533;
            _2655 = _2535;
        }
        else
        {
            float _2670 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
            float _2671 = _2670 * _2349;
            float _2672 = _2670 * _2350;
            float _2673 = _2670 * _2351;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2542 < ((_2540 >> 12u) & 15u))
            {
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2805 = _2525;
                float _2806 = _2527;
                float _2807 = _2529;
                float _2808 = _2531;
                float _2809 = _2533;
                float _2810 = _2535;
                uint _2811 = _2542;
                uint _2820;
                bool _2821;
                for (;;)
                {
                    _2820 = texelFetch(g_lightClassification, int((((_2389 << 5u) + (_2375 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                    _2821 = _2820 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2821)
                    {
                        frontier_phi_81_pred = _2810;
                        frontier_phi_81_pred_1 = _2809;
                        frontier_phi_81_pred_2 = _2808;
                        frontier_phi_81_pred_3 = _2807;
                        frontier_phi_81_pred_4 = _2806;
                        frontier_phi_81_pred_5 = _2805;
                    }
                    else
                    {
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3027 = _2805;
                        float _3028 = _2806;
                        float _3029 = _2807;
                        float _3030 = _2808;
                        float _3031 = _2809;
                        float _3032 = _2810;
                        uint _3033 = _2820;
                        uint _3034;
                        vec4 _3059;
                        float _3060;
                        vec4 _3075;
                        vec3 _3087;
                        vec4 _3103;
                        vec4 _3119;
                        float _3166;
                        bool _3167;
                        for (;;)
                        {
                            uint _3044 = ((_2811 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3033));
                            _3034 = (_3033 + 4294967295u) & _3033;
                            uint _3046 = _3044 * 40u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            _3060 = _3059.w;
                            uint _3062 = (_3044 * 40u) + 4u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3077 = (_3044 * 40u) + 8u;
                            _3087 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x));
                            uint _3090 = (_3044 * 40u) + 16u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3106 = (_3044 * 40u) + 20u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3122 = (_3044 * 40u) + 24u;
                            vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3141 = (_3044 * 40u) + 28u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            _3166 = fma(_2351, _3154.z, fma(_2350, _3154.y, _3154.x * _2349)) + _3154.w;
                            _3167 = !((fma(_2351, _3135.z, fma(_2350, _3135.y, _3135.x * _2349)) + _3135.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3167)
                            {
                                float _3194 = _3059.x - _2349;
                                float _3195 = _3059.y - _2350;
                                float _3196 = _3059.z - _2351;
                                float _3197 = dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196));
                                float _3200 = inversesqrt(_3197);
                                float _3201 = _3200 * _3194;
                                float _3202 = _3200 * _3195;
                                float _3203 = _3200 * _3196;
                                float _3207 = 1.0 - (_3197 / (_3060 * _3060));
                                float _4353 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3212 = sqrt(_3197) * _3075.w;
                                float _3214 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                                float _3215 = _3214 * _3214;
                                float _3218 = ((1.0 - _3215) * dot(vec3(_3201, _3202, _3203), vec3(_559, _562, _565))) + _3215;
                                float _3221 = _3212 * _3212;
                                float _3225 = (fma(_2351, _3103.z, fma(_2350, _3103.y, _3103.x * _2349)) + _3103.w) / _3166;
                                float _3226 = (fma(_2351, _3119.z, fma(_2350, _3119.y, _3119.x * _2349)) + _3119.w) / _3166;
                                float _3230 = 1.0 - dot(vec2(_3225, _3226), vec2(_3225, _3226));
                                float _4369 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3232 = _3231 * (((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3208) / ((_3221 * 0.699999988079071044921875) + 1.0));
                                float _3244 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                                float _3245 = 1.0 - _634;
                                float _3252 = sqrt(1.0 - ((1.0 - (_3245 * _3245)) * (1.0 - (_3244 * _3244))));
                                float _3253 = _3252 * _3252;
                                float _3254 = _3253 * _3253;
                                float _3255 = _3201 - _2671;
                                float _3256 = _3202 - _2672;
                                float _3257 = _3203 - _2673;
                                float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                                float _3265 = dot(vec3(_559, _562, _565), vec3((-0.0) - _2671, (-0.0) - _2672, (-0.0) - _2673));
                                float _4380 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3269 = dot(vec3(_559, _562, _565), vec3(_3261 * _3255, _3261 * _3256, _3261 * _3257));
                                float _4391 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3276 = ((_3272 * _3272) * (_3254 + (-1.0))) + 1.0;
                                float _3277 = _3214 * _3253;
                                float _3278 = _3277 * _3277;
                                float _3284 = ((1.0 - _3278) * dot(vec3(_559, _562, _565), vec3(_3201, _3202, _3203))) + _3278;
                                float _4402 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3286 = 1.0 - _3253;
                                float _3296 = (0.5 / (((_3285 * ((_3268 * _3286) + _3253)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3253) * _3268))) * _3285;
                                float _4413 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3306 = (_3231 * _3208) * (((_3254 * 3.1415927410125732421875) * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) / ((_3276 * _3276) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3232 * _3075.z;
                                frontier_phi_87_pred_1 = _3232 * _3075.y;
                                frontier_phi_87_pred_2 = _3232 * _3075.x;
                                frontier_phi_87_pred_3 = _3306 * _3087.z;
                                frontier_phi_87_pred_4 = _3306 * _3087.y;
                                frontier_phi_87_pred_5 = _3306 * _3087.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3315 = frontier_phi_87_pred;
                            _3314 = frontier_phi_87_pred_1;
                            _3313 = frontier_phi_87_pred_2;
                            _3312 = frontier_phi_87_pred_3;
                            _3311 = frontier_phi_87_pred_4;
                            _3310 = frontier_phi_87_pred_5;
                            _3017 = _3313 + _3030;
                            _3018 = _3314 + _3031;
                            _3019 = _3315 + _3032;
                            _3014 = _3310 + _3027;
                            _3015 = _3311 + _3028;
                            _3016 = _3312 + _3029;
                            if (_3034 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3034;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _3019;
                        frontier_phi_81_pred_1 = _3018;
                        frontier_phi_81_pred_2 = _3017;
                        frontier_phi_81_pred_3 = _3016;
                        frontier_phi_81_pred_4 = _3015;
                        frontier_phi_81_pred_5 = _3014;
                    }
                    _2656 = frontier_phi_81_pred;
                    _2654 = frontier_phi_81_pred_1;
                    _2652 = frontier_phi_81_pred_2;
                    _2650 = frontier_phi_81_pred_3;
                    _2648 = frontier_phi_81_pred_4;
                    _2646 = frontier_phi_81_pred_5;
                    uint _2812 = _2811 + 1u;
                    if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2805 = _2646;
                        _2806 = _2648;
                        _2807 = _2650;
                        _2808 = _2652;
                        _2809 = _2654;
                        _2810 = _2656;
                        _2811 = _2812;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2652;
                frontier_phi_62_63_ladder_1 = _2656;
                frontier_phi_62_63_ladder_2 = _2654;
                frontier_phi_62_63_ladder_3 = _2650;
                frontier_phi_62_63_ladder_4 = _2648;
                frontier_phi_62_63_ladder_5 = _2646;
            }
            else
            {
                frontier_phi_62_63_ladder = _2531;
                frontier_phi_62_63_ladder_1 = _2535;
                frontier_phi_62_63_ladder_2 = _2533;
                frontier_phi_62_63_ladder_3 = _2529;
                frontier_phi_62_63_ladder_4 = _2527;
                frontier_phi_62_63_ladder_5 = _2525;
            }
            _2645 = frontier_phi_62_63_ladder_5;
            _2647 = frontier_phi_62_63_ladder_4;
            _2649 = frontier_phi_62_63_ladder_3;
            _2651 = frontier_phi_62_63_ladder;
            _2653 = frontier_phi_62_63_ladder_2;
            _2655 = frontier_phi_62_63_ladder_1;
        }
        float _2660 = isnan(1.0) ? _618 : (isnan(_618) ? 1.0 : min(_618, 1.0));
        _2407 = (_2660 * _2651) + _1841;
        _2409 = (_2660 * _2653) + _1843;
        _2411 = (_2660 * _2655) + _1845;
        _2413 = ((_2645 * _603) * _2660) + _2189;
        _2415 = ((_2647 * _605) * _2660) + _2191;
        _2417 = ((_2649 * _606) * _2660) + _2193;
    }
    else
    {
        _2407 = _1841;
        _2409 = _1843;
        _2411 = _1845;
        _2413 = _2189;
        _2415 = _2191;
        _2417 = _2193;
    }
    uint _2423 = _579 + uint(cbMatDynParam._m0[0u].w);
    float _4429 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4440 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _4451 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4462 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _2458 = (((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2407 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _618))) + ((_2413 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1454)) * cbPerFrame._m0[3u].x)) + ((((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _358) * _398) * cbInstanceData._m0[_2423].x);
    float _2460 = (((((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _358) * _398) * cbInstanceData._m0[_2423].y) + ((_2415 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1454)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2409 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _618)));
    float _2462 = (((((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _358) * _398) * cbInstanceData._m0[_2423].z) + ((_2417 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1454)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2411 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _618)));
    float _2463 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2464 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2465 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2470 = cbInstanceData._m0[_578 + 6u].w * (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)));
    float _2475 = _538 / cbSceneParam._m0[86u].x;
    float _2476 = _539 / cbSceneParam._m0[86u].y;
    vec4 _2490 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2475, _2476, (log2((isnan(cbSceneParam._m0[77u].w) ? _464 : (isnan(_464) ? cbSceneParam._m0[77u].w : min(_464, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2492 = _2490.x;
    float _2493 = _2490.y;
    float _2494 = _2490.z;
    float _2495 = _2490.w;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    if (_464 > cbSceneParam._m0[78u].w)
    {
        float _2550 = isnan(_464) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _464 : min(cbSceneParam._m0[80u].w, _464));
        float _2551 = _2550 / _464;
        float _2562 = _2551 * _513;
        float _2563 = _514 * _2551;
        float _2564 = (-0.0) - _2563;
        float _2565 = _2551 * _515;
        float _2567 = (cbSceneParam._m0[77u].w * _2564) / _2550;
        float _2568 = _2567 + cbSceneParam._m0[79u].w;
        float _2569 = cbSceneParam._m0[79u].w - _2563;
        float _2575 = sqrt(((_2562 * _2562) + (_2563 * _2563)) + (_2565 * _2565));
        float _2578 = (1.0 - (cbSceneParam._m0[77u].w / _2550)) * _2575;
        float _2583 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2585 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2762;
        if (abs((_2564 - _2567) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2762 = ((((_2568 > 0.0) ? exp2(_2583 * _2568) : (2.0 - exp2(_2585 * _2568))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2578;
        }
        else
        {
            float _2706 = 1.0 / cbSceneParam._m0[80u].x;
            float _2707 = isnan(_2569) ? _2568 : (isnan(_2568) ? _2569 : max(_2568, _2569));
            float _2708 = isnan(_2569) ? _2568 : (isnan(_2568) ? _2569 : min(_2568, _2569));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            float _2718 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : min(_2708, 0.0));
            _2762 = ((abs(_2575 / _2564) * cbSceneParam._m0[80u].y) * ((((_2717 - _2718) * 2.0) - ((exp2(_2583 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0)))) - exp2(_2583 * (isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0))))) * _2706)) - ((exp2(_2585 * _2717) - exp2(_2585 * _2718)) * _2706))) + (_2578 * cbSceneParam._m0[80u].z);
        }
        vec4 _2764 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2475, _2476, 1.0), 0.0);
        float _2773 = exp2((_2762 * (-1.44269502162933349609375)) * (1.0 - _2764.w));
        float _2774 = log2(_2773);
        float _2790 = log2(_2495);
        _2587 = (exp2(_2790 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].x)) * _2764.x) / cbSceneParam._m0[78u].x)) + _2492;
        _2589 = (exp2(_2790 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].y)) * _2764.y) / cbSceneParam._m0[78u].y)) + _2493;
        _2591 = (exp2(_2790 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].z)) * _2764.z) / cbSceneParam._m0[78u].z)) + _2494;
        _2593 = _2773 * _2495;
    }
    else
    {
        _2587 = _2492;
        _2589 = _2493;
        _2591 = _2494;
        _2593 = _2495;
    }
    bool _2800;
    vec4 _2603;
    vec4 _2625;
    float _2627;
    float _2631;
    float _2632;
    float _2633;
    float _2634;
    bool _2644;
    for (;;)
    {
        _2603 = cbMatDynParam._m0[0u];
        float _2605 = roundEven(_2603.y);
        bool _2606 = _2605 == 3.0;
        float _2607 = log2(_2593);
        float _2614 = exp2(_2607 * cbSceneParam._m0[78u].x) * _2463;
        float _2615 = exp2(_2607 * cbSceneParam._m0[78u].y) * _2464;
        float _2616 = exp2(_2607 * cbSceneParam._m0[78u].z) * _2465;
        float _2623 = _526 + (-0.5);
        _2625 = cbMtdParam._m0[1u];
        _2627 = _2625.y * _2623;
        float _2630 = (_2605 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2631 = _2630 * (_2606 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2587)));
        _2632 = _2630 * (_2606 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2589)));
        _2633 = _2630 * (_2606 ? _2616 : (_2616 + (cbSceneParam._m0[72u].w * _2591)));
        _2634 = _2623 * 0.999000012874603271484375;
        _2644 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2644)
        {
            if ((cbInstanceData._m0[_578 + 7u].x + _2634) < 0.5)
            {
                _2800 = true;
                break;
            }
        }
        uint _2741 = _579 + uint(_2603.w);
        if ((cbInstanceData._m0[_2741].w < 1.0) && ((cbInstanceData._m0[_2741].w + _2634) < 0.5))
        {
            _2800 = true;
            break;
        }
        if ((_2627 + _301) < _2625.x)
        {
            _2800 = true;
            break;
        }
        _2800 = false;
        break;
    }
    float _3005;
    if (_2800)
    {
        discard_state = true;
        _3005 = 0.0;
    }
    else
    {
        _3005 = _2470;
    }
    SV_Target.x = _2631;
    SV_Target.y = _2632;
    SV_Target.z = _2633;
    SV_Target.w = _3005;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2470;
    discard_exit();
}


