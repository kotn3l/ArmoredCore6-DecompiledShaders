#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1157;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _212 = _211 * _204;
    float _213 = _211 * _205;
    float _214 = _211 * _206;
    float _224 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _225 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _226 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _230 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _231 = _230 * _224;
    float _232 = _230 * _225;
    float _233 = _230 * _226;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _251 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _252 = _251 * TANGENT_2.x;
    float _253 = _251 * TANGENT_2.y;
    float _254 = _251 * TANGENT_2.z;
    float _259;
    float _260;
    float _261;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _259 = (-0.0) - _238;
        _260 = (-0.0) - _239;
        _261 = (-0.0) - _240;
    }
    else
    {
        _259 = _238;
        _260 = _239;
        _261 = _240;
    }
    float _283 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[12u].y;
    float _295 = ((cbMtdParam._m0[13u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5.y - _283) + (cbMtdParam._m0[12u].w * TEXCOORD_5.y))) + 1.0;
    float _3775 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _298 = 1.0 - (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)));
    float _299 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _300 = isnan(1.0) ? _299 : (isnan(_299) ? 1.0 : min(_299, 1.0));
    float _308 = ((cbMtdParam._m0[13u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.x - _283) + (cbMtdParam._m0[12u].z * TEXCOORD_5.x))) + 1.0;
    float _3796 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _310 = 1.0 - (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)));
    float _311 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _312 = isnan(1.0) ? _311 : (isnan(_311) ? 1.0 : min(_311, 1.0));
    vec4 _330 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _332 = _330.x;
    float _333 = _330.y;
    float _334 = _330.z;
    float _335 = cbMtdParam._m0[11u].x * _312;
    float _337 = cbMtdParam._m0[11u].y * _312;
    float _339 = cbMtdParam._m0[11u].z * _312;
    float _359 = _310 + _298;
    float _360 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _361 = isnan(1.0) ? _360 : (isnan(_360) ? 1.0 : min(_360, 1.0));
    vec4 _379 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _384 = _379.w;
    float _385 = _379.x * cbMtdParam._m0[10u].x;
    float _386 = _379.y * cbMtdParam._m0[10u].y;
    float _387 = _379.z * cbMtdParam._m0[10u].z;
    float _402 = (_385 - (_361 * _385)) + ((((((_332 * (cbMtdParam._m0[9u].x - _335)) * _300) + (_335 * _332)) * 4.55000019073486328125) * _361) * _385);
    float _404 = (((((((_333 * (cbMtdParam._m0[9u].y - _337)) * _300) + (_337 * _333)) * 4.55000019073486328125) * _361) * _386) + _386) - (_361 * _386);
    float _406 = (((((((_334 * (cbMtdParam._m0[9u].z - _339)) * _300) + (_339 * _334)) * 4.55000019073486328125) * _361) * _387) + _387) - (_361 * _387);
    vec4 _423 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _427 = _423.z;
    float _431 = (_423.x * 2.0) + (-1.0);
    float _433 = (_423.y * 2.0) + (-1.0);
    float _434 = dot(vec2(_431, _433), vec2(_431, _433));
    float _3827 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _439 = sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))));
    float _442 = fma(_439, _259, fma(_433, _252, _431 * _231));
    float _445 = fma(_439, _260, fma(_433, _253, _431 * _232));
    float _448 = fma(_439, _261, fma(_433, _254, _431 * _233));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    float _453 = _452 * _442;
    float _454 = _452 * _445;
    float _455 = _452 * _448;
    vec4 _467 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _473 = (_467.x * 2.0) + (-1.0);
    float _474 = (_467.y * 2.0) + (-1.0);
    float _475 = dot(vec2(_473, _474), vec2(_473, _474));
    float _3838 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _480 = sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))));
    float _483 = fma(_480, _259, fma(_474, _252, _473 * _231));
    float _486 = fma(_480, _260, fma(_474, _253, _473 * _232));
    float _489 = fma(_480, _261, fma(_474, _254, _473 * _233));
    float _493 = inversesqrt(dot(vec3(_483, _486, _489), vec3(_483, _486, _489)));
    float _494 = _493 * _483;
    float _495 = _493 * _486;
    float _496 = _493 * _489;
    float _499 = fma(_496, _214, fma(_495, _213, _494 * _212));
    float _502 = fma(_496, _247, fma(_495, _246, _494 * _245));
    float _505 = fma(_496, _261, fma(_495, _260, _494 * _259));
    float _509 = inversesqrt(dot(vec3(_499, _502, _505), vec3(_499, _502, _505)));
    float _513 = fma(_455, _214, fma(_454, _213, _453 * _212));
    float _516 = fma(_455, _247, fma(_454, _246, _453 * _245));
    float _519 = fma(_455, _261, fma(_454, _260, _453 * _259));
    float _523 = inversesqrt(dot(vec3(_513, _516, _519), vec3(_513, _516, _519)));
    float _526 = _523 * _519;
    vec4 _539 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _545 = (_539.x * 2.0) + (-1.0);
    float _546 = (_539.y * 2.0) + (-1.0);
    float _547 = dot(vec2(_545, _546), vec2(_545, _546));
    float _3849 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _552 = sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))));
    float _555 = fma(_552, _259, fma(_546, _252, _545 * _231));
    float _558 = fma(_552, _260, fma(_546, _253, _545 * _232));
    float _561 = fma(_552, _261, fma(_546, _254, _545 * _233));
    float _565 = inversesqrt(dot(vec3(_555, _558, _561), vec3(_555, _558, _561)));
    float _566 = _565 * _555;
    float _567 = _565 * _558;
    float _568 = _565 * _561;
    float _571 = fma(_568, _214, fma(_567, _213, _566 * _212));
    float _574 = fma(_568, _247, fma(_567, _246, _566 * _245));
    float _577 = fma(_568, _261, fma(_567, _260, _566 * _259));
    float _581 = inversesqrt(dot(vec3(_571, _574, _577), vec3(_571, _574, _577)));
    float _596 = ((_523 * _513) + (((_499 * _300) * _509) * cbMtdParam._m0[13u].w)) + (((_571 * _312) * _581) * cbMtdParam._m0[13u].z);
    float _598 = ((_523 * _516) + (((_502 * _300) * _509) * cbMtdParam._m0[13u].w)) + (((_574 * _312) * _581) * cbMtdParam._m0[13u].z);
    float _601 = fma(_526, _259, fma(_598, _245, _596 * _212));
    float _604 = fma(_526, _260, fma(_598, _246, _596 * _213));
    float _607 = fma(_526, _261, fma(_598, _247, _596 * _214));
    float _611 = inversesqrt(dot(vec3(_601, _604, _607), vec3(_601, _604, _607)));
    float _612 = _611 * _601;
    float _613 = _611 * _604;
    float _614 = _611 * _607;
    float _3860 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _615 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _616 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3893 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3904 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3915 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _620 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _636 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _687 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _677);
    float _688 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _677);
    float _689 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _677);
    float _693 = inversesqrt(dot(vec3(_687, _688, _689), vec3(_687, _688, _689)));
    float _694 = _687 * _693;
    float _695 = _688 * _693;
    float _696 = _689 * _693;
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _723 = fma(_614, cbSceneParam._m0[5u].z, fma(_613, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _612));
    float _726 = fma(_614, cbSceneParam._m0[6u].z, fma(_613, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _612));
    float _729 = fma(_614, cbSceneParam._m0[7u].z, fma(_613, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _612));
    uint _742 = uint(roundEven(NORMAL.w)) * 13u;
    uint _744 = (_742 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _750 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_744].x;
    float _751 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_744].y;
    float _752 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_744].z;
    float _3926 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _756 = 1.0 - _620;
    float _757 = _753 * _756;
    float _758 = _754 * _756;
    float _759 = _755 * _756;
    float _764 = (_753 + (-0.039999999105930328369140625)) * _620;
    float _765 = (_754 + (-0.039999999105930328369140625)) * _620;
    float _766 = (_755 + (-0.039999999105930328369140625)) * _620;
    float _767 = _764 + 0.039999999105930328369140625;
    float _769 = _765 + 0.039999999105930328369140625;
    float _770 = _766 + 0.039999999105930328369140625;
    vec4 _779 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _702, cbSceneParam._m0[86u].y * _703));
    float _782 = _779.x * TEXCOORD_5.z;
    float _783 = dot(vec3(_612, _613, _614), vec3(_694, _695, _696));
    float _786 = _783 * 2.0;
    float _790 = (_786 * _612) - _694;
    float _791 = (_786 * _613) - _695;
    float _792 = (_786 * _614) - _696;
    float _796 = abs(dot(vec3(_694, _695, _696), vec3(_612, _613, _614)));
    float _3959 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _798 = sqrt(_616);
    float _811 = exp2((_798 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_798 * 3.0));
    float _817 = (1.0 - _811) * ((_798 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _818 = _811 * _798;
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1156;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _881 = fma(_854, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846));
        float _885 = fma(_854, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846));
        float _889 = fma(_854, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846));
        float _914 = _846 + _612;
        float _915 = _850 + _613;
        float _916 = _854 + _614;
        float _926 = fma(_916, cbModelParam._m0[26u].z, fma(_915, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914)) - _881;
        float _927 = fma(_916, cbModelParam._m0[27u].z, fma(_915, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914)) - _885;
        float _928 = fma(_916, cbModelParam._m0[28u].z, fma(_915, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914)) - _889;
        float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
        float _945 = ((_932 * _926) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_881 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_932 * _927) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_885 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_932 * _928) / cbModelParam._m0[34u].z) + ((((((_889 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        float _984 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_950.x + (-0.5));
        float _986 = _984 * (_950.y + (-0.5));
        float _987 = _984 * (_950.z + (-0.5));
        float _994 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_957.x + (-0.5));
        float _996 = _994 * (_957.y + (-0.5));
        float _997 = _994 * (_957.z + (-0.5));
        float _1004 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_964.x + (-0.5));
        float _1006 = _1004 * (_964.y + (-0.5));
        float _1007 = _1004 * (_964.z + (-0.5));
        float _1014 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_971.x + (-0.5));
        float _1016 = _1014 * (_971.y + (-0.5));
        float _1017 = _1014 * (_971.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1038 = (dot(vec3(_612, _613, _614), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1048 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _4007 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1050 + 1.0))) + _1055) * _1018;
        float _1065 = _986 * 0.5;
        float _1066 = _996 * 0.5;
        float _1067 = _1006 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_612, _613, _614), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _4040 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1092 + 1.0))) + _1097) * _1019;
        float _1107 = _987 * 0.5;
        float _1108 = _997 * 0.5;
        float _1109 = _1007 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_612, _613, _614), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _4073 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1134 + 1.0))) + _1139) * _1020;
        _1156 = _987;
        _1158 = _986;
        _1159 = _985;
        _1160 = _997;
        _1161 = _996;
        _1162 = _995;
        _1163 = _1007;
        _1164 = _1006;
        _1165 = _1005;
        _1166 = _1020;
        _1167 = _1019;
        _1168 = _1018;
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _1157;
        _1158 = _1157;
        _1159 = _1157;
        _1160 = _1157;
        _1161 = _1157;
        _1162 = _1157;
        _1163 = _1157;
        _1164 = _1157;
        _1165 = _1157;
        _1166 = _1157;
        _1167 = _1157;
        _1168 = _1157;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1197 = fma(_854, cbModelParam._m0[30u].z, fma(_850, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _846));
        float _1201 = fma(_854, cbModelParam._m0[31u].z, fma(_850, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _846));
        float _1205 = fma(_854, cbModelParam._m0[32u].z, fma(_850, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _846));
        float _1228 = _846 + _612;
        float _1229 = _850 + _613;
        float _1230 = _854 + _614;
        float _1240 = fma(_1230, cbModelParam._m0[30u].z, fma(_1229, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1228)) - _1197;
        float _1241 = fma(_1230, cbModelParam._m0[31u].z, fma(_1229, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1228)) - _1201;
        float _1242 = fma(_1230, cbModelParam._m0[32u].z, fma(_1229, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1228)) - _1205;
        float _1246 = inversesqrt(dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242)));
        float _1259 = ((_1246 * _1240) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1197 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1246 * _1241) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1201 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1246 * _1242) / cbModelParam._m0[35u].z) + ((((((_1205 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1296 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1263.x + (-0.5));
        float _1298 = _1296 * (_1263.y + (-0.5));
        float _1299 = _1296 * (_1263.z + (-0.5));
        float _1306 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1270.x + (-0.5));
        float _1308 = _1306 * (_1270.y + (-0.5));
        float _1309 = _1306 * (_1270.z + (-0.5));
        float _1316 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1277.x + (-0.5));
        float _1318 = _1316 * (_1277.y + (-0.5));
        float _1319 = _1316 * (_1277.z + (-0.5));
        float _1326 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1284.x + (-0.5));
        float _1328 = _1326 * (_1284.y + (-0.5));
        float _1329 = _1326 * (_1284.z + (-0.5));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = _1297 * 0.5;
        float _1334 = _1307 * 0.5;
        float _1335 = _1317 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_612, _613, _614), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4136 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1360 + 1.0))) + _1365) * _1330;
        float _1375 = _1298 * 0.5;
        float _1376 = _1308 * 0.5;
        float _1377 = _1318 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_612, _613, _614), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4169 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1402 + 1.0))) + _1407) * _1331;
        float _1417 = _1299 * 0.5;
        float _1418 = _1309 * 0.5;
        float _1419 = _1319 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_612, _613, _614), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4202 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1444 + 1.0))) + _1449) * _1332;
        _1466 = _1299;
        _1467 = _1298;
        _1468 = _1297;
        _1469 = _1309;
        _1470 = _1308;
        _1471 = _1307;
        _1472 = _1319;
        _1473 = _1318;
        _1474 = _1317;
        _1475 = _1332;
        _1476 = _1331;
        _1477 = _1330;
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
    }
    else
    {
        _1466 = _1157;
        _1467 = _1157;
        _1468 = _1157;
        _1469 = _1157;
        _1470 = _1157;
        _1471 = _1157;
        _1472 = _1157;
        _1473 = _1157;
        _1474 = _1157;
        _1475 = _1157;
        _1476 = _1157;
        _1477 = _1157;
        _1478 = 0.0;
        _1479 = 0.0;
        _1480 = 0.0;
    }
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1169)) + _1169;
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1170)) + _1170;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1171)) + _1171;
    float _1513 = fma(_1492, cbSceneParam._m0[89u].z, fma(_1491, cbSceneParam._m0[89u].y, _1490 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1492, cbSceneParam._m0[90u].z, fma(_1491, cbSceneParam._m0[90u].y, _1490 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1492, cbSceneParam._m0[91u].z, fma(_1491, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1490));
    float _1534 = _790 * 0.5;
    float _1535 = _791 * 0.5;
    float _1536 = _792 * 0.5;
    float _1537 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1540 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1543 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1577;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1550 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1156, _1160, _1163, _1166));
        float _1554 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1558 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1159, _1162, _1165, _1168));
        float _1565 = dot(vec4(cbModelParam._m0[39u]), vec4(_1534, _1535, _1536, 1.0));
        _1577 = dot(vec3(isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1565) ? 0.0 : (isnan(0.0) ? _1565 : max(0.0, _1565))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1577 = 1.0;
    }
    float _1588;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1579 = dot(vec4(cbModelParam._m0[40u]), vec4(_1534, _1535, _1536, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1579) ? 0.0 : (isnan(0.0) ? _1579 : max(0.0, _1579))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1592 = (_1588 * cbModelParam._m0[1u].x) + (_1577 * (1.0 - cbModelParam._m0[1u].x));
    float _1602 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _616);
    float _1603 = isnan(_1602) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1602 : min(cbModelParam._m0[25u].z, _1602));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1650 = fma(_854, cbModelParam._m0[13u].z, fma(_850, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _846)) + cbModelParam._m0[13u].w;
        float _1654 = fma(_854, cbModelParam._m0[14u].z, fma(_850, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _846)) + cbModelParam._m0[14u].w;
        float _1658 = fma(_854, cbModelParam._m0[15u].z, fma(_850, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _846)) + cbModelParam._m0[15u].w;
        float _1661 = fma(_792, cbModelParam._m0[13u].z, fma(_791, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _790));
        float _1664 = fma(_792, cbModelParam._m0[14u].z, fma(_791, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _790));
        float _1667 = fma(_792, cbModelParam._m0[15u].z, fma(_791, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _790));
        float _1695;
        if (_1661 > 0.0)
        {
            _1695 = abs((1.0 - _1650) / _1661);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1650 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1695 = frontier_phi_16_14_ladder;
        }
        float _1870;
        if (_1664 > 0.0)
        {
            _1870 = abs((1.0 - _1654) / _1664);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1654 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1870 = frontier_phi_25_21_ladder;
        }
        float _2165;
        if (_1667 > 0.0)
        {
            _2165 = abs((1.0 - _1658) / _1667);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1658 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2165 = frontier_phi_37_32_ladder;
        }
        float _2167 = isnan(_1870) ? _1695 : (isnan(_1695) ? _1870 : min(_1695, _1870));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1661) + _1650;
        float _2173 = (_2168 * _1664) + _1654;
        float _2174 = (_2168 * _1667) + _1658;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2175;
        float _2179 = _2175 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 > _2179) || ((_2173 < _2177) || ((_2172 < _2177) || (_2172 > _2179))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2174, cbModelParam._m0[9u].z, fma(_2173, cbModelParam._m0[9u].y, _2172 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2174, cbModelParam._m0[10u].z, fma(_2173, cbModelParam._m0[10u].y, _2172 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2174, cbModelParam._m0[11u].z, fma(_2173, cbModelParam._m0[11u].y, _2172 * cbModelParam._m0[11u].x))), _1603);
            frontier_phi_15_37_ladder = _2319.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2319.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2319.z * cbModelParam._m0[1u].y;
        }
        _1683 = frontier_phi_15_37_ladder_1;
        _1685 = frontier_phi_15_37_ladder;
        _1687 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1671 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_790, _791, _792), _1603);
        _1683 = _1671.x * cbModelParam._m0[1u].y;
        _1685 = _1671.y * cbModelParam._m0[1u].y;
        _1687 = _1671.z * cbModelParam._m0[1u].y;
    }
    float _1691 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _616);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1691 : min(cbModelParam._m0[25u].w, _1691));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1749 = fma(_854, cbModelParam._m0[21u].z, fma(_850, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _846)) + cbModelParam._m0[21u].w;
        float _1753 = fma(_854, cbModelParam._m0[22u].z, fma(_850, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _846)) + cbModelParam._m0[22u].w;
        float _1757 = fma(_854, cbModelParam._m0[23u].z, fma(_850, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _846)) + cbModelParam._m0[23u].w;
        float _1760 = fma(_792, cbModelParam._m0[21u].z, fma(_791, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _790));
        float _1763 = fma(_792, cbModelParam._m0[22u].z, fma(_791, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _790));
        float _1766 = fma(_792, cbModelParam._m0[23u].z, fma(_791, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _790));
        float _1875;
        if (_1760 > 0.0)
        {
            _1875 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1875 = frontier_phi_27_23_ladder;
        }
        float _2192;
        if (_1763 > 0.0)
        {
            _2192 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2192 = frontier_phi_39_34_ladder;
        }
        float _2530;
        if (_1766 > 0.0)
        {
            _2530 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2530 = frontier_phi_49_46_ladder;
        }
        float _2532 = isnan(_2192) ? _1875 : (isnan(_1875) ? _2192 : min(_1875, _2192));
        float _2533 = isnan(_2530) ? _2532 : (isnan(_2532) ? _2530 : min(_2532, _2530));
        float _2537 = (_2533 * _1760) + _1749;
        float _2538 = (_2533 * _1763) + _1753;
        float _2539 = (_2533 * _1766) + _1757;
        float _2540 = _2533 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2540;
        float _2543 = _2540 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2539 > _2543) || ((_2539 < _2541) || ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 < _2541) || (_2537 > _2543))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2539, cbModelParam._m0[17u].z, fma(_2538, cbModelParam._m0[17u].y, _2537 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2539, cbModelParam._m0[18u].z, fma(_2538, cbModelParam._m0[18u].y, _2537 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2539, cbModelParam._m0[19u].z, fma(_2538, cbModelParam._m0[19u].y, _2537 * cbModelParam._m0[19u].x))), _1692);
            frontier_phi_24_49_ladder = _2661.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2661.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2661.x * cbModelParam._m0[1u].z;
        }
        _1785 = frontier_phi_24_49_ladder_2;
        _1787 = frontier_phi_24_49_ladder_1;
        _1789 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_790, _791, _792), _1692);
        _1785 = _1769.x * cbModelParam._m0[1u].z;
        _1787 = _1769.y * cbModelParam._m0[1u].z;
        _1789 = _1769.z * cbModelParam._m0[1u].z;
    }
    float _1802 = (((_817 * _767) + _818) * _782) * ((cbModelParam._m0[1u].w * (_1785 - _1683)) + _1683);
    float _1804 = (((_817 * _769) + _818) * _782) * ((cbModelParam._m0[1u].w * (_1787 - _1685)) + _1685);
    float _1806 = (((_817 * _770) + _818) * _782) * ((cbModelParam._m0[1u].w * (_1789 - _1687)) + _1687);
    float _1809 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1804, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1804, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1804, cbSceneParam._m0[91u].y, _1802 * cbSceneParam._m0[91u].x));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1857 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1861 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1862 = _1849 / _1861;
    float _1863 = _1853 / _1861;
    float _1864 = _1857 / _1861;
    float _2011;
    float _2012;
    float _2013;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1891 = ((uint(_1864 > cbSceneParam._m0[59u].y) + uint(_1864 > cbSceneParam._m0[59u].x)) + uint(_1864 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1892 = _1891 + 43u;
        uint _1900 = _1891 + 44u;
        uint _1908 = _1891 + 45u;
        uint _1916 = _1891 + 46u;
        float _1927 = fma(_1861, cbSceneParam._m0[_1892].w, fma(_1857, cbSceneParam._m0[_1892].z, fma(_1853, cbSceneParam._m0[_1892].y, _1849 * cbSceneParam._m0[_1892].x)));
        float _1931 = fma(_1861, cbSceneParam._m0[_1900].w, fma(_1857, cbSceneParam._m0[_1900].z, fma(_1853, cbSceneParam._m0[_1900].y, _1849 * cbSceneParam._m0[_1900].x)));
        float _1939 = fma(_1861, cbSceneParam._m0[_1916].w, fma(_1857, cbSceneParam._m0[_1916].z, fma(_1853, cbSceneParam._m0[_1916].y, _1849 * cbSceneParam._m0[_1916].x)));
        float _1944 = cbSceneParam._m0[33u].z * _1939;
        float _1946 = cbSceneParam._m0[33u].w * _1939;
        float _1949 = fma(_1861, cbSceneParam._m0[_1908].w, fma(_1857, cbSceneParam._m0[_1908].z, fma(_1853, cbSceneParam._m0[_1908].y, _1849 * cbSceneParam._m0[_1908].x))) / _1939;
        float _1997 = (cbSceneParam._m0[33u].x - sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864))) * cbSceneParam._m0[33u].y;
        float _4328 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2004 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1944 + _1927) / _1939, (_1946 + _1931) / _1939), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1946 + _1927) / _1939, (_1931 - _1944) / _1939), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1927 - _1944) / _1939, (_1931 - _1946) / _1939), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1927 - _1946) / _1939, (_1944 + _1931) / _1939), _1949), 0.0)).x), vec4(0.25)));
        _2011 = 1.0 - (_2004 * cbSceneParam._m0[34u].x);
        _2012 = 1.0 - (_2004 * cbSceneParam._m0[34u].y);
        _2013 = 1.0 - (_2004 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2011 = 1.0;
        _2012 = 1.0;
        _2013 = 1.0;
    }
    float _2077;
    float _2079;
    float _2081;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2065 = fma(_1861, cbSceneParam._m0[63u].w, fma(_1857, cbSceneParam._m0[63u].z, fma(_1853, cbSceneParam._m0[63u].y, _1849 * cbSceneParam._m0[63u].x)));
        float _2066 = fma(_1861, cbSceneParam._m0[60u].w, fma(_1857, cbSceneParam._m0[60u].z, fma(_1853, cbSceneParam._m0[60u].y, _1849 * cbSceneParam._m0[60u].x))) / _2065;
        float _2067 = fma(_1861, cbSceneParam._m0[61u].w, fma(_1857, cbSceneParam._m0[61u].z, fma(_1853, cbSceneParam._m0[61u].y, _1849 * cbSceneParam._m0[61u].x))) / _2065;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2066 >= cbSceneParam._m0[64u].x) && (_2067 >= cbSceneParam._m0[64u].y)) && (_2066 <= cbSceneParam._m0[64u].z)) && (_2067 <= cbSceneParam._m0[64u].w))
        {
            float _2205 = fma(_1861, cbSceneParam._m0[62u].w, fma(_1857, cbSceneParam._m0[62u].z, fma(_1853, cbSceneParam._m0[62u].y, _1849 * cbSceneParam._m0[62u].x))) / _2065;
            float _2209 = isnan(cbSceneParam._m0[41u].w) ? _2205 : (isnan(_2205) ? cbSceneParam._m0[41u].w : max(_2205, cbSceneParam._m0[41u].w));
            float _2252 = (cbSceneParam._m0[33u].x - sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864))) * cbSceneParam._m0[33u].y;
            float _4344 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
            float _2259 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2066, cbSceneParam._m0[33u].w + _2067), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2066, _2067 - cbSceneParam._m0[33u].z), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2066 - cbSceneParam._m0[33u].z, _2067 - cbSceneParam._m0[33u].w), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2066 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2067), _2209), 0.0)).x), vec4(0.25)));
            float _2263 = 1.0 - (_2259 * cbSceneParam._m0[34u].x);
            float _2264 = 1.0 - (_2259 * cbSceneParam._m0[34u].y);
            float _2265 = 1.0 - (_2259 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2264) ? _2012 : (isnan(_2012) ? _2264 : min(_2012, _2264));
            frontier_phi_36_35_ladder_1 = isnan(_2265) ? _2013 : (isnan(_2013) ? _2265 : min(_2013, _2265));
            frontier_phi_36_35_ladder_2 = isnan(_2263) ? _2011 : (isnan(_2011) ? _2263 : min(_2011, _2263));
        }
        else
        {
            frontier_phi_36_35_ladder = _2012;
            frontier_phi_36_35_ladder_1 = _2013;
            frontier_phi_36_35_ladder_2 = _2011;
        }
        _2077 = frontier_phi_36_35_ladder_2;
        _2079 = frontier_phi_36_35_ladder;
        _2081 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2077 = _2011;
        _2079 = _2012;
        _2081 = _2013;
    }
    uvec4 _2086 = floatBitsToUint(cbInstanceData._m0[_742 + 5u]);
    uint _2088 = _2086.x * 14u;
    uint _2089 = _2088 + 13u;
    float _2096 = _782 + (-1.0);
    float _2101 = (cbLight._m0[_2089].x * _2096) + 1.0;
    float _2102 = (cbLight._m0[_2089].y * _2096) + 1.0;
    float _2103 = (cbLight._m0[_2089].z * _2096) + 1.0;
    float _2104 = (cbLight._m0[_2089].w * _2096) + 1.0;
    uint _2105 = _2088 + 5u;
    float _2111 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2115 = _2088 + 4u;
    float _2124 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
    uint _2128 = _2088 | 1u;
    float _2139 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_612, _613, _614));
    float _2142 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_612, _613, _614));
    float _4380 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _4391 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2147 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2149 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * 0.3183098733425140380859375;
    float _2156 = ((cbLight._m0[_2105].x * _2111) * _2149) + (((cbLight._m0[_2115].x * _2077) * _2124) * _2147);
    float _2157 = ((_2111 * cbLight._m0[_2105].y) * _2149) + (((cbLight._m0[_2115].y * _2079) * _2124) * _2147);
    float _2158 = ((_2111 * cbLight._m0[_2105].z) * _2149) + (((cbLight._m0[_2115].z * _2081) * _2124) * _2147);
    uvec4 _2162 = floatBitsToUint(cbLight._m0[_2088 + 12u]);
    bool _2164 = _2162.x == 0u;
    float _2266;
    float _2268;
    float _2270;
    if (_2164)
    {
        _2266 = _2156;
        _2268 = _2157;
        _2270 = _2158;
    }
    else
    {
        uint _2274 = _2088 + 6u;
        float _2290 = (dot(vec3(cbLight._m0[_2088 + 2u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2291 = _2290 * _2290;
        float _4402 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2292 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2293 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2266 = (((cbLight._m0[_2274].x * 0.3183098733425140380859375) * _2292) * _2293) + _2156;
        _2268 = (((cbLight._m0[_2274].y * 0.3183098733425140380859375) * _2292) * _2293) + _2157;
        _2270 = (((cbLight._m0[_2274].z * 0.3183098733425140380859375) * _2292) * _2293) + _2158;
    }
    bool _2273 = _2162.y == 0u;
    float _2328;
    float _2330;
    float _2332;
    if (_2273)
    {
        _2328 = _2266;
        _2330 = _2268;
        _2332 = _2270;
    }
    else
    {
        uint _2501 = _2088 + 7u;
        float _2517 = (dot(vec3(cbLight._m0[_2088 + 3u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2518 = _2517 * _2517;
        float _4418 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2519 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2520 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2328 = (((cbLight._m0[_2501].x * 0.3183098733425140380859375) * _2519) * _2520) + _2266;
        _2330 = (((cbLight._m0[_2501].y * 0.3183098733425140380859375) * _2519) * _2520) + _2268;
        _2332 = (((cbLight._m0[_2501].z * 0.3183098733425140380859375) * _2519) * _2520) + _2270;
    }
    uint _2335 = _2088 + 8u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _616) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2088].x + _694;
    float _2351 = cbLight._m0[_2088].y + _695;
    float _2352 = cbLight._m0[_2088].z + _696;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2088].xyz));
    float _4434 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _4445 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _2364 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2365 = dot(vec3(_612, _613, _614), vec3(_2357, _2358, _2359));
    float _4456 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2357, _2358, _2359));
    float _4467 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2349 * _2349;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2385 = exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0);
    float _2386 = 0.959999978542327880859375 - _764;
    float _2388 = 0.959999978542327880859375 - _765;
    float _2389 = 0.959999978542327880859375 - _766;
    float _2396 = 1.0 - _2349;
    float _2407 = (0.5 / (((_2364 * ((_2363 * _2396) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2396) + _2349) * _2363))) * _2363;
    float _4478 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2409 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    uint _2423 = _2088 + 9u;
    float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _616) * 0.949999988079071044921875);
    float _2435 = _2434 * _2434;
    float _2436 = cbLight._m0[_2128].x + _694;
    float _2437 = cbLight._m0[_2128].y + _695;
    float _2438 = cbLight._m0[_2128].z + _696;
    float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
    float _2443 = _2442 * _2436;
    float _2444 = _2442 * _2437;
    float _2445 = _2442 * _2438;
    float _2446 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2128].xyz));
    float _4489 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2450 = dot(vec3(_612, _613, _614), vec3(_2443, _2444, _2445));
    float _4500 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _2454 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2443, _2444, _2445));
    float _4511 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2458 = _2435 * _2435;
    float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
    float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * 5.0);
    float _2476 = 1.0 - _2435;
    float _2486 = (0.5 / (((_2364 * ((_2449 * _2476) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2476) + _2435) * _2449))) * _2449;
    float _4522 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2488 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
    float _2498 = (((((_2469 * _2386) + _767) * cbLight._m0[_2423].x) * _2488) * _2111) + ((((cbLight._m0[_2335].x * _2077) * ((_2385 * _2386) + _767)) * _2409) * _2124);
    float _2499 = (((((_2469 * _2388) + _769) * cbLight._m0[_2423].y) * _2488) * _2111) + ((((cbLight._m0[_2335].y * _2079) * ((_2385 * _2388) + _769)) * _2409) * _2124);
    float _2500 = (((((_2469 * _2389) + _770) * cbLight._m0[_2423].z) * _2488) * _2111) + ((((cbLight._m0[_2335].z * _2081) * ((_2385 * _2389) + _770)) * _2409) * _2124);
    float _2556;
    float _2558;
    float _2560;
    if (_2164)
    {
        _2556 = _2498;
        _2558 = _2499;
        _2560 = _2500;
    }
    else
    {
        uint _2562 = _2088 + 2u;
        uint _2566 = _2088 + 10u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _616) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _694;
        float _2583 = cbLight._m0[_2562].y + _695;
        float _2584 = cbLight._m0[_2562].z + _696;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2562].xyz));
        float _4533 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2596 = dot(vec3(_612, _613, _614), vec3(_2589, _2590, _2591));
        float _4544 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4555 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
        float _2622 = 1.0 - _2581;
        float _2632 = (0.5 / (((_2364 * ((_2595 * _2622) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2622) + _2581) * _2595))) * _2595;
        float _4566 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2634 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2635 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2556 = (((((_2615 * _2386) + _767) * cbLight._m0[_2566].x) * _2634) * _2635) + _2498;
        _2558 = (((((_2615 * _2388) + _769) * cbLight._m0[_2566].y) * _2634) * _2635) + _2499;
        _2560 = (((((_2615 * _2389) + _770) * cbLight._m0[_2566].z) * _2634) * _2635) + _2500;
    }
    float _2666;
    float _2668;
    float _2670;
    if (_2273)
    {
        _2666 = _2556;
        _2668 = _2558;
        _2670 = _2560;
    }
    else
    {
        uint _2677 = _2088 + 3u;
        uint _2681 = _2088 + 11u;
        float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2677].w)) * _616) * 0.949999988079071044921875);
        float _2696 = _2695 * _2695;
        float _2697 = cbLight._m0[_2677].x + _694;
        float _2698 = cbLight._m0[_2677].y + _695;
        float _2699 = cbLight._m0[_2677].z + _696;
        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
        float _2704 = _2703 * _2697;
        float _2705 = _2703 * _2698;
        float _2706 = _2703 * _2699;
        float _2707 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2677].xyz));
        float _4582 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2711 = dot(vec3(_612, _613, _614), vec3(_2704, _2705, _2706));
        float _4593 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2715 = dot(vec3(cbLight._m0[_2677].xyz), vec3(_2704, _2705, _2706));
        float _4604 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2719 = _2696 * _2696;
        float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
        float _2730 = exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0);
        float _2737 = 1.0 - _2696;
        float _2747 = (0.5 / (((_2364 * ((_2710 * _2737) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2737) + _2696) * _2710))) * _2710;
        float _4615 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2749 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
        float _2750 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2666 = (((((_2730 * _2386) + _767) * cbLight._m0[_2681].x) * _2749) * _2750) + _2556;
        _2668 = (((((_2730 * _2388) + _769) * cbLight._m0[_2681].y) * _2749) * _2750) + _2558;
        _2670 = (((((_2730 * _2389) + _770) * cbLight._m0[_2681].z) * _2749) * _2750) + _2560;
    }
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    if (_2086.y == 0u)
    {
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.x;
        uint _2783 = uint((float(_2771.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _2772))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _2772)));
        float _2793 = (log2(_1864 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2794 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        uint _2797 = uint(isnan(14.0) ? _2794 : (isnan(_2794) ? 14.0 : min(_2794, 14.0)));
        uvec4 _2802 = texelFetch(g_lightClusterGridBuffer, int(((_2797 << 2u) + (_2783 << 6u)) >> 2u));
        uint _2803 = _2802.x;
        uint _2804 = _2771.z;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        if (((((1u << ((_2804 >> 4u) & 15u)) + 4294967295u) & _2803) == 0u) || ((_2804 & 240u) == 0u))
        {
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
        }
        else
        {
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            uint _3034 = 0u;
            uint _3043;
            bool _3044;
            for (;;)
            {
                _3043 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                _3044 = _3043 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3044)
                {
                    frontier_phi_68_pred = _3033;
                    frontier_phi_68_pred_1 = _3032;
                    frontier_phi_68_pred_2 = _3031;
                    frontier_phi_68_pred_3 = _3029;
                    frontier_phi_68_pred_4 = _3028;
                    frontier_phi_68_pred_5 = _3030;
                }
                else
                {
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    uint _3158;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3043;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    for (;;)
                    {
                        uint _3162 = uint(findLSB(_3158)) + (_3034 << 5u);
                        uint _3159 = (_3158 + 4294967295u) & _3158;
                        uint _3164 = _3162 * 48u;
                        vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3184 = (_3162 * 48u) + 4u;
                        vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3203 = (_3162 * 48u) + 8u;
                        vec3 _3214 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x));
                        float _3218 = _3178.x - _1862;
                        float _3219 = _3178.y - _1863;
                        float _3220 = _3178.z - _1864;
                        float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                        float _3224 = inversesqrt(_3221);
                        float _3225 = _3224 * _3218;
                        float _3226 = _3224 * _3219;
                        float _3227 = _3224 * _3220;
                        float _3228 = dot(vec3(_723, _726, _729), vec3(_3225, _3226, _3227));
                        float _3233 = 1.0 - (_3221 * _3178.w);
                        float _4641 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3235 = sqrt(_3221) * _3197.w;
                        float _3238 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3228) + _3239;
                        float _3245 = _3235 * _3235;
                        float _3249 = ((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3234) / ((_3245 * 0.699999988079071044921875) + 1.0);
                        float _3253 = (-0.0) - _1862;
                        float _3254 = (-0.0) - _1863;
                        float _3255 = (-0.0) - _1864;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3269 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _798;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3260 + _3225;
                        float _3281 = _3261 + _3226;
                        float _3282 = _3262 + _3227;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_723, _726, _729), vec3(_3260, _3261, _3262));
                        float _4657 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3294 = dot(vec3(_723, _726, _729), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4668 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3238 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3228) + _3303;
                        float _4679 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4690 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) / ((_3301 * _3301) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125))) * _3234;
                        _3087 = (_3249 * _3197.x) + _3155;
                        _3088 = (_3249 * _3197.y) + _3156;
                        _3089 = (_3249 * _3197.z) + _3157;
                        _3084 = (_3329 * _3214.x) + _3152;
                        _3085 = (_3329 * _3214.y) + _3153;
                        _3086 = (_3329 * _3214.z) + _3154;
                        if (_3159 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3159;
                        }
                    }
                    frontier_phi_68_pred = _3089;
                    frontier_phi_68_pred_1 = _3088;
                    frontier_phi_68_pred_2 = _3087;
                    frontier_phi_68_pred_3 = _3085;
                    frontier_phi_68_pred_4 = _3084;
                    frontier_phi_68_pred_5 = _3086;
                }
                _2895 = frontier_phi_68_pred;
                _2893 = frontier_phi_68_pred_1;
                _2891 = frontier_phi_68_pred_2;
                _2887 = frontier_phi_68_pred_3;
                _2885 = frontier_phi_68_pred_4;
                _2889 = frontier_phi_68_pred_5;
                uint _3035 = _3034 + 1u;
                if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3028 = _2885;
                    _3029 = _2887;
                    _3030 = _2889;
                    _3031 = _2891;
                    _3032 = _2893;
                    _3033 = _2895;
                    _3034 = _3035;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
        }
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.z;
        uint _2901 = (_2899 >> 8u) & 15u;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((4294967295u << _2901) & _2803) == 0u)
        {
            _2996 = _2884;
            _2998 = _2886;
            _3000 = _2888;
            _3002 = _2890;
            _3004 = _2892;
            _3006 = _2894;
        }
        else
        {
            float _3021 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
            float _3022 = _3021 * _1862;
            float _3023 = _3021 * _1863;
            float _3024 = _3021 * _1864;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2901 < ((_2899 >> 12u) & 15u))
            {
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3135 = _2884;
                float _3136 = _2886;
                float _3137 = _2888;
                float _3138 = _2890;
                float _3139 = _2892;
                float _3140 = _2894;
                uint _3141 = _2901;
                uint _3150;
                bool _3151;
                for (;;)
                {
                    _3150 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3141 << 2u)) >> 2u)).x;
                    _3151 = _3150 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3151)
                    {
                        frontier_phi_74_pred = _3137;
                        frontier_phi_74_pred_1 = _3136;
                        frontier_phi_74_pred_2 = _3135;
                        frontier_phi_74_pred_3 = _3140;
                        frontier_phi_74_pred_4 = _3139;
                        frontier_phi_74_pred_5 = _3138;
                    }
                    else
                    {
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3347 = _3135;
                        float _3348 = _3136;
                        float _3349 = _3137;
                        float _3350 = _3138;
                        float _3351 = _3139;
                        float _3352 = _3140;
                        uint _3353 = _3150;
                        uint _3354;
                        vec4 _3379;
                        float _3380;
                        vec4 _3395;
                        vec3 _3407;
                        vec4 _3423;
                        vec4 _3439;
                        float _3486;
                        bool _3487;
                        for (;;)
                        {
                            uint _3364 = ((_3141 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3353));
                            _3354 = (_3353 + 4294967295u) & _3353;
                            uint _3366 = _3364 * 40u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3380 = _3379.w;
                            uint _3382 = (_3364 * 40u) + 4u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3364 * 40u) + 8u;
                            _3407 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x));
                            uint _3410 = (_3364 * 40u) + 16u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3426 = (_3364 * 40u) + 20u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3442 = (_3364 * 40u) + 24u;
                            vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3461 = (_3364 * 40u) + 28u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            _3486 = fma(_1864, _3474.z, fma(_1863, _3474.y, _3474.x * _1862)) + _3474.w;
                            _3487 = !((fma(_1864, _3455.z, fma(_1863, _3455.y, _3455.x * _1862)) + _3455.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3487)
                            {
                                float _3514 = _3379.x - _1862;
                                float _3515 = _3379.y - _1863;
                                float _3516 = _3379.z - _1864;
                                float _3517 = dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516));
                                float _3520 = inversesqrt(_3517);
                                float _3521 = _3520 * _3514;
                                float _3522 = _3520 * _3515;
                                float _3523 = _3520 * _3516;
                                float _3527 = 1.0 - (_3517 / (_3380 * _3380));
                                float _4701 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3532 = sqrt(_3517) * _3395.w;
                                float _3534 = 1.39999997615814208984375 / (_3532 + 1.39999997615814208984375);
                                float _3535 = _3534 * _3534;
                                float _3538 = ((1.0 - _3535) * dot(vec3(_3521, _3522, _3523), vec3(_723, _726, _729))) + _3535;
                                float _3541 = _3532 * _3532;
                                float _3545 = (fma(_1864, _3423.z, fma(_1863, _3423.y, _3423.x * _1862)) + _3423.w) / _3486;
                                float _3546 = (fma(_1864, _3439.z, fma(_1863, _3439.y, _3439.x * _1862)) + _3439.w) / _3486;
                                float _3550 = 1.0 - dot(vec2(_3545, _3546), vec2(_3545, _3546));
                                float _4717 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3552 = _3551 * (((isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0))) * _3528) / ((_3541 * 0.699999988079071044921875) + 1.0));
                                float _3564 = exp2(log2(1.0 / ((_3541 * 3.5) + 5.0)) * 0.25);
                                float _3565 = 1.0 - _798;
                                float _3572 = sqrt(1.0 - ((1.0 - (_3565 * _3565)) * (1.0 - (_3564 * _3564))));
                                float _3573 = _3572 * _3572;
                                float _3574 = _3573 * _3573;
                                float _3575 = _3521 - _3022;
                                float _3576 = _3522 - _3023;
                                float _3577 = _3523 - _3024;
                                float _3581 = inversesqrt(dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577)));
                                float _3585 = dot(vec3(_723, _726, _729), vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024));
                                float _4728 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3588 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3589 = dot(vec3(_723, _726, _729), vec3(_3581 * _3575, _3581 * _3576, _3581 * _3577));
                                float _4739 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3592 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3596 = ((_3592 * _3592) * (_3574 + (-1.0))) + 1.0;
                                float _3597 = _3534 * _3573;
                                float _3598 = _3597 * _3597;
                                float _3604 = ((1.0 - _3598) * dot(vec3(_723, _726, _729), vec3(_3521, _3522, _3523))) + _3598;
                                float _4750 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3606 = 1.0 - _3573;
                                float _3616 = (0.5 / (((_3605 * ((_3588 * _3606) + _3573)) + 9.9999999392252902907785028219223e-09) + (((_3605 * _3606) + _3573) * _3588))) * _3605;
                                float _4761 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3626 = (_3551 * _3528) * (((_3574 * 3.1415927410125732421875) * (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) / ((_3596 * _3596) * ((_3541 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3626 * _3407.z;
                                frontier_phi_80_pred_1 = _3626 * _3407.y;
                                frontier_phi_80_pred_2 = _3626 * _3407.x;
                                frontier_phi_80_pred_3 = _3552 * _3395.z;
                                frontier_phi_80_pred_4 = _3552 * _3395.y;
                                frontier_phi_80_pred_5 = _3552 * _3395.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3632 = frontier_phi_80_pred;
                            _3631 = frontier_phi_80_pred_1;
                            _3630 = frontier_phi_80_pred_2;
                            _3635 = frontier_phi_80_pred_3;
                            _3634 = frontier_phi_80_pred_4;
                            _3633 = frontier_phi_80_pred_5;
                            _3337 = _3633 + _3350;
                            _3338 = _3634 + _3351;
                            _3339 = _3635 + _3352;
                            _3334 = _3630 + _3347;
                            _3335 = _3631 + _3348;
                            _3336 = _3632 + _3349;
                            if (_3354 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3354;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3336;
                        frontier_phi_74_pred_1 = _3335;
                        frontier_phi_74_pred_2 = _3334;
                        frontier_phi_74_pred_3 = _3339;
                        frontier_phi_74_pred_4 = _3338;
                        frontier_phi_74_pred_5 = _3337;
                    }
                    _3001 = frontier_phi_74_pred;
                    _2999 = frontier_phi_74_pred_1;
                    _2997 = frontier_phi_74_pred_2;
                    _3007 = frontier_phi_74_pred_3;
                    _3005 = frontier_phi_74_pred_4;
                    _3003 = frontier_phi_74_pred_5;
                    uint _3142 = _3141 + 1u;
                    if (_3142 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3135 = _2997;
                        _3136 = _2999;
                        _3137 = _3001;
                        _3138 = _3003;
                        _3139 = _3005;
                        _3140 = _3007;
                        _3141 = _3142;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3005;
                frontier_phi_62_63_ladder_1 = _3003;
                frontier_phi_62_63_ladder_2 = _3001;
                frontier_phi_62_63_ladder_3 = _3007;
                frontier_phi_62_63_ladder_4 = _2999;
                frontier_phi_62_63_ladder_5 = _2997;
            }
            else
            {
                frontier_phi_62_63_ladder = _2892;
                frontier_phi_62_63_ladder_1 = _2890;
                frontier_phi_62_63_ladder_2 = _2888;
                frontier_phi_62_63_ladder_3 = _2894;
                frontier_phi_62_63_ladder_4 = _2886;
                frontier_phi_62_63_ladder_5 = _2884;
            }
            _2996 = frontier_phi_62_63_ladder_5;
            _2998 = frontier_phi_62_63_ladder_4;
            _3000 = frontier_phi_62_63_ladder_2;
            _3002 = frontier_phi_62_63_ladder_1;
            _3004 = frontier_phi_62_63_ladder;
            _3006 = frontier_phi_62_63_ladder_3;
        }
        float _3011 = isnan(1.0) ? _782 : (isnan(_782) ? 1.0 : min(_782, 1.0));
        _2815 = (_3011 * _3002) + _2328;
        _2817 = (_3011 * _3004) + _2330;
        _2819 = (_3011 * _3006) + _2332;
        _2821 = ((_2996 * _767) * _3011) + _2666;
        _2823 = ((_2998 * _769) * _3011) + _2668;
        _2825 = ((_3000 * _770) * _3011) + _2670;
    }
    else
    {
        _2815 = _2328;
        _2817 = _2330;
        _2819 = _2332;
        _2821 = _2666;
        _2823 = _2668;
        _2825 = _2670;
    }
    float _4777 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4788 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4799 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4810 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _2850 = cbInstanceData._m0[_742 + 6u].w * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)));
    float _2855 = _702 / cbSceneParam._m0[86u].x;
    float _2856 = _703 / cbSceneParam._m0[86u].y;
    vec4 _2870 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2855, _2856, (log2((isnan(cbSceneParam._m0[77u].w) ? _636 : (isnan(_636) ? cbSceneParam._m0[77u].w : min(_636, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2872 = _2870.x;
    float _2873 = _2870.y;
    float _2874 = _2870.z;
    float _2875 = _2870.w;
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    if (_636 > cbSceneParam._m0[78u].w)
    {
        float _2909 = isnan(_636) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _636 : min(cbSceneParam._m0[80u].w, _636));
        float _2910 = _2909 / _636;
        float _2921 = _2910 * _687;
        float _2922 = _688 * _2910;
        float _2923 = (-0.0) - _2922;
        float _2924 = _2910 * _689;
        float _2926 = (cbSceneParam._m0[77u].w * _2923) / _2909;
        float _2927 = _2926 + cbSceneParam._m0[79u].w;
        float _2928 = cbSceneParam._m0[79u].w - _2922;
        float _2934 = sqrt(((_2921 * _2921) + (_2922 * _2922)) + (_2924 * _2924));
        float _2937 = (1.0 - (cbSceneParam._m0[77u].w / _2909)) * _2934;
        float _2942 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2944 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3097;
        if (abs((_2923 - _2926) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3097 = ((((_2927 > 0.0) ? exp2(_2942 * _2927) : (2.0 - exp2(_2944 * _2927))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2937;
        }
        else
        {
            float _3057 = 1.0 / cbSceneParam._m0[80u].x;
            float _3058 = isnan(_2928) ? _2927 : (isnan(_2927) ? _2928 : max(_2927, _2928));
            float _3059 = isnan(_2928) ? _2927 : (isnan(_2927) ? _2928 : min(_2927, _2928));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            _3097 = ((abs(_2934 / _2923) * cbSceneParam._m0[80u].y) * ((((_3068 - _3069) * 2.0) - ((exp2(_2942 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)))) - exp2(_2942 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))))) * _3057)) - ((exp2(_2944 * _3068) - exp2(_2944 * _3069)) * _3057))) + (_2937 * cbSceneParam._m0[80u].z);
        }
        vec4 _3099 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2855, _2856, 1.0), 0.0);
        float _3108 = exp2((_3097 * (-1.44269502162933349609375)) * (1.0 - _3099.w));
        float _3109 = log2(_3108);
        float _3125 = log2(_2875);
        _2946 = (exp2(_3125 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].x)) * _3099.x) / cbSceneParam._m0[78u].x)) + _2872;
        _2948 = (exp2(_3125 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].y)) * _3099.y) / cbSceneParam._m0[78u].y)) + _2873;
        _2950 = (exp2(_3125 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].z)) * _3099.z) / cbSceneParam._m0[78u].z)) + _2874;
        _2952 = _3108 * _2875;
    }
    else
    {
        _2946 = _2872;
        _2948 = _2873;
        _2950 = _2874;
        _2952 = _2875;
    }
    float _2964 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2965 = _2964 == 3.0;
    float _2966 = log2(_2952);
    float _2973 = exp2(_2966 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2815 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _782))) + ((_2821 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1592)) * cbPerFrame._m0[3u].x));
    float _2974 = exp2(_2966 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2817 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _782))) + ((_2823 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1592)) * cbPerFrame._m0[3u].x));
    float _2975 = exp2(_2966 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2819 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _782))) + ((_2825 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1592)) * cbPerFrame._m0[3u].x));
    float _2984 = (_2964 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2984 * (_2965 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2946)));
    SV_Target.y = _2984 * (_2965 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2948)));
    SV_Target.z = _2984 * (_2965 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2950)));
    SV_Target.w = _2850;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2850;
}


