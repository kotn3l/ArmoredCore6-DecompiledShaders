#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1153;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _208 = _207 * _200;
    float _209 = _207 * _201;
    float _210 = _207 * _202;
    float _220 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _221 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _222 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _226 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _227 = _226 * _220;
    float _228 = _226 * _221;
    float _229 = _226 * _222;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    float _247 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _248 = _247 * TANGENT_2.x;
    float _249 = _247 * TANGENT_2.y;
    float _250 = _247 * TANGENT_2.z;
    float _255;
    float _256;
    float _257;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _255 = (-0.0) - _234;
        _256 = (-0.0) - _235;
        _257 = (-0.0) - _236;
    }
    else
    {
        _255 = _234;
        _256 = _235;
        _257 = _236;
    }
    float _279 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[12u].y;
    float _291 = ((cbMtdParam._m0[13u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5.y - _279) + (cbMtdParam._m0[12u].w * TEXCOORD_5.y))) + 1.0;
    float _3488 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _294 = 1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)));
    float _295 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _296 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    float _304 = ((cbMtdParam._m0[13u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.x - _279) + (cbMtdParam._m0[12u].z * TEXCOORD_5.x))) + 1.0;
    float _3509 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _306 = 1.0 - (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)));
    float _307 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _308 = isnan(1.0) ? _307 : (isnan(_307) ? 1.0 : min(_307, 1.0));
    vec4 _326 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _328 = _326.x;
    float _329 = _326.y;
    float _330 = _326.z;
    float _331 = cbMtdParam._m0[11u].x * _308;
    float _333 = cbMtdParam._m0[11u].y * _308;
    float _335 = cbMtdParam._m0[11u].z * _308;
    float _355 = _306 + _294;
    float _356 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _357 = isnan(1.0) ? _356 : (isnan(_356) ? 1.0 : min(_356, 1.0));
    vec4 _375 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _380 = _375.w;
    float _381 = _375.x * cbMtdParam._m0[10u].x;
    float _382 = _375.y * cbMtdParam._m0[10u].y;
    float _383 = _375.z * cbMtdParam._m0[10u].z;
    float _398 = (_381 - (_357 * _381)) + ((((((_328 * (cbMtdParam._m0[9u].x - _331)) * _296) + (_331 * _328)) * 4.55000019073486328125) * _357) * _381);
    float _400 = (((((((_329 * (cbMtdParam._m0[9u].y - _333)) * _296) + (_333 * _329)) * 4.55000019073486328125) * _357) * _382) + _382) - (_357 * _382);
    float _402 = (((((((_330 * (cbMtdParam._m0[9u].z - _335)) * _296) + (_335 * _330)) * 4.55000019073486328125) * _357) * _383) + _383) - (_357 * _383);
    vec4 _419 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _423 = _419.z;
    float _427 = (_419.x * 2.0) + (-1.0);
    float _429 = (_419.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_427, _429), vec2(_427, _429));
    float _3540 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))));
    float _438 = fma(_435, _255, fma(_429, _248, _427 * _227));
    float _441 = fma(_435, _256, fma(_429, _249, _427 * _228));
    float _444 = fma(_435, _257, fma(_429, _250, _427 * _229));
    float _448 = inversesqrt(dot(vec3(_438, _441, _444), vec3(_438, _441, _444)));
    float _449 = _448 * _438;
    float _450 = _448 * _441;
    float _451 = _448 * _444;
    vec4 _463 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _469 = (_463.x * 2.0) + (-1.0);
    float _470 = (_463.y * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3551 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    float _479 = fma(_476, _255, fma(_470, _248, _469 * _227));
    float _482 = fma(_476, _256, fma(_470, _249, _469 * _228));
    float _485 = fma(_476, _257, fma(_470, _250, _469 * _229));
    float _489 = inversesqrt(dot(vec3(_479, _482, _485), vec3(_479, _482, _485)));
    float _490 = _489 * _479;
    float _491 = _489 * _482;
    float _492 = _489 * _485;
    float _495 = fma(_492, _210, fma(_491, _209, _490 * _208));
    float _498 = fma(_492, _243, fma(_491, _242, _490 * _241));
    float _501 = fma(_492, _257, fma(_491, _256, _490 * _255));
    float _505 = inversesqrt(dot(vec3(_495, _498, _501), vec3(_495, _498, _501)));
    float _509 = fma(_451, _210, fma(_450, _209, _449 * _208));
    float _512 = fma(_451, _243, fma(_450, _242, _449 * _241));
    float _515 = fma(_451, _257, fma(_450, _256, _449 * _255));
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    float _522 = _519 * _515;
    vec4 _535 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _541 = (_535.x * 2.0) + (-1.0);
    float _542 = (_535.y * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3562 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _548 = sqrt(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))));
    float _551 = fma(_548, _255, fma(_542, _248, _541 * _227));
    float _554 = fma(_548, _256, fma(_542, _249, _541 * _228));
    float _557 = fma(_548, _257, fma(_542, _250, _541 * _229));
    float _561 = inversesqrt(dot(vec3(_551, _554, _557), vec3(_551, _554, _557)));
    float _562 = _561 * _551;
    float _563 = _561 * _554;
    float _564 = _561 * _557;
    float _567 = fma(_564, _210, fma(_563, _209, _562 * _208));
    float _570 = fma(_564, _243, fma(_563, _242, _562 * _241));
    float _573 = fma(_564, _257, fma(_563, _256, _562 * _255));
    float _577 = inversesqrt(dot(vec3(_567, _570, _573), vec3(_567, _570, _573)));
    float _592 = ((_519 * _509) + (((_495 * _296) * _505) * cbMtdParam._m0[13u].w)) + (((_567 * _308) * _577) * cbMtdParam._m0[13u].z);
    float _594 = ((_519 * _512) + (((_498 * _296) * _505) * cbMtdParam._m0[13u].w)) + (((_570 * _308) * _577) * cbMtdParam._m0[13u].z);
    float _597 = fma(_522, _255, fma(_594, _241, _592 * _208));
    float _600 = fma(_522, _256, fma(_594, _242, _592 * _209));
    float _603 = fma(_522, _257, fma(_594, _243, _592 * _210));
    float _607 = inversesqrt(dot(vec3(_597, _600, _603), vec3(_597, _600, _603)));
    float _608 = _607 * _597;
    float _609 = _607 * _600;
    float _610 = _607 * _603;
    float _3573 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _611 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _3584 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _612 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _3606 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3617 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3628 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _616 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _632 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _683 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _673);
    float _684 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _673);
    float _685 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _673);
    float _689 = inversesqrt(dot(vec3(_683, _684, _685), vec3(_683, _684, _685)));
    float _690 = _683 * _689;
    float _691 = _684 * _689;
    float _692 = _685 * _689;
    float _698 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _699 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _719 = fma(_610, cbSceneParam._m0[5u].z, fma(_609, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _608));
    float _722 = fma(_610, cbSceneParam._m0[6u].z, fma(_609, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _608));
    float _725 = fma(_610, cbSceneParam._m0[7u].z, fma(_609, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _608));
    uint _738 = uint(roundEven(NORMAL.w)) * 13u;
    uint _740 = (_738 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _746 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_740].x;
    float _747 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_740].y;
    float _748 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_740].z;
    float _3639 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _752 = 1.0 - _616;
    float _753 = _749 * _752;
    float _754 = _750 * _752;
    float _755 = _751 * _752;
    float _760 = (_749 + (-0.039999999105930328369140625)) * _616;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _616;
    float _762 = (_751 + (-0.039999999105930328369140625)) * _616;
    float _763 = _760 + 0.039999999105930328369140625;
    float _765 = _761 + 0.039999999105930328369140625;
    float _766 = _762 + 0.039999999105930328369140625;
    vec4 _775 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _698, cbSceneParam._m0[86u].y * _699));
    float _778 = _775.x * TEXCOORD_5.z;
    float _779 = dot(vec3(_608, _609, _610), vec3(_690, _691, _692));
    float _782 = _779 * 2.0;
    float _786 = (_782 * _608) - _690;
    float _787 = (_782 * _609) - _691;
    float _788 = (_782 * _610) - _692;
    float _792 = abs(dot(vec3(_690, _691, _692), vec3(_608, _609, _610)));
    float _3672 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _794 = sqrt(_612);
    float _807 = exp2((_794 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_794 * 3.0));
    float _813 = (1.0 - _807) * ((_794 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _814 = _807 * _794;
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1152;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _877 = fma(_850, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842));
        float _881 = fma(_850, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842));
        float _885 = fma(_850, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842));
        float _910 = _842 + _608;
        float _911 = _846 + _609;
        float _912 = _850 + _610;
        float _922 = fma(_912, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910)) - _877;
        float _923 = fma(_912, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910)) - _881;
        float _924 = fma(_912, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910)) - _885;
        float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
        float _941 = ((_928 * _922) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_877 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_928 * _923) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_881 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_928 * _924) / cbModelParam._m0[34u].z) + ((((((_885 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        float _980 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_946.x + (-0.5));
        float _982 = _980 * (_946.y + (-0.5));
        float _983 = _980 * (_946.z + (-0.5));
        float _990 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_953.x + (-0.5));
        float _992 = _990 * (_953.y + (-0.5));
        float _993 = _990 * (_953.z + (-0.5));
        float _1000 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_960.x + (-0.5));
        float _1002 = _1000 * (_960.y + (-0.5));
        float _1003 = _1000 * (_960.z + (-0.5));
        float _1010 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_967.x + (-0.5));
        float _1012 = _1010 * (_967.y + (-0.5));
        float _1013 = _1010 * (_967.z + (-0.5));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = _981 * 0.5;
        float _1018 = _991 * 0.5;
        float _1019 = _1001 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1034 = (dot(vec3(_608, _609, _610), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1044 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3720 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1046 + 1.0))) + _1051) * _1014;
        float _1061 = _982 * 0.5;
        float _1062 = _992 * 0.5;
        float _1063 = _1002 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_608, _609, _610), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3753 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1088 + 1.0))) + _1093) * _1015;
        float _1103 = _983 * 0.5;
        float _1104 = _993 * 0.5;
        float _1105 = _1003 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_608, _609, _610), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3786 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1130 + 1.0))) + _1135) * _1016;
        _1152 = _983;
        _1154 = _982;
        _1155 = _981;
        _1156 = _993;
        _1157 = _992;
        _1158 = _991;
        _1159 = _1003;
        _1160 = _1002;
        _1161 = _1001;
        _1162 = _1016;
        _1163 = _1015;
        _1164 = _1014;
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
    }
    else
    {
        _1152 = _1153;
        _1154 = _1153;
        _1155 = _1153;
        _1156 = _1153;
        _1157 = _1153;
        _1158 = _1153;
        _1159 = _1153;
        _1160 = _1153;
        _1161 = _1153;
        _1162 = _1153;
        _1163 = _1153;
        _1164 = _1153;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1193 = fma(_850, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842));
        float _1197 = fma(_850, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842));
        float _1201 = fma(_850, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842));
        float _1224 = _842 + _608;
        float _1225 = _846 + _609;
        float _1226 = _850 + _610;
        float _1236 = fma(_1226, cbModelParam._m0[30u].z, fma(_1225, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1224)) - _1193;
        float _1237 = fma(_1226, cbModelParam._m0[31u].z, fma(_1225, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1224)) - _1197;
        float _1238 = fma(_1226, cbModelParam._m0[32u].z, fma(_1225, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1224)) - _1201;
        float _1242 = inversesqrt(dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238)));
        float _1255 = ((_1242 * _1236) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1193 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1242 * _1237) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1197 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1242 * _1238) / cbModelParam._m0[35u].z) + ((((((_1201 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        float _1292 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1259.x + (-0.5));
        float _1294 = _1292 * (_1259.y + (-0.5));
        float _1295 = _1292 * (_1259.z + (-0.5));
        float _1302 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1266.x + (-0.5));
        float _1304 = _1302 * (_1266.y + (-0.5));
        float _1305 = _1302 * (_1266.z + (-0.5));
        float _1312 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1273.x + (-0.5));
        float _1314 = _1312 * (_1273.y + (-0.5));
        float _1315 = _1312 * (_1273.z + (-0.5));
        float _1322 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1280.x + (-0.5));
        float _1324 = _1322 * (_1280.y + (-0.5));
        float _1325 = _1322 * (_1280.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_608, _609, _610), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _3849 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1356 + 1.0))) + _1361) * _1326;
        float _1371 = _1294 * 0.5;
        float _1372 = _1304 * 0.5;
        float _1373 = _1314 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_608, _609, _610), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _3882 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1398 + 1.0))) + _1403) * _1327;
        float _1413 = _1295 * 0.5;
        float _1414 = _1305 * 0.5;
        float _1415 = _1315 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_608, _609, _610), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _3915 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1440 + 1.0))) + _1445) * _1328;
        _1462 = _1295;
        _1463 = _1294;
        _1464 = _1293;
        _1465 = _1305;
        _1466 = _1304;
        _1467 = _1303;
        _1468 = _1315;
        _1469 = _1314;
        _1470 = _1313;
        _1471 = _1328;
        _1472 = _1327;
        _1473 = _1326;
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1153;
        _1463 = _1153;
        _1464 = _1153;
        _1465 = _1153;
        _1466 = _1153;
        _1467 = _1153;
        _1468 = _1153;
        _1469 = _1153;
        _1470 = _1153;
        _1471 = _1153;
        _1472 = _1153;
        _1473 = _1153;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1165)) + _1165;
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1166)) + _1166;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1167)) + _1167;
    float _1509 = fma(_1488, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1486 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1488, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1486 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1488, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1486));
    float _1530 = _786 * 0.5;
    float _1531 = _787 * 0.5;
    float _1532 = _788 * 0.5;
    float _1533 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1536 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1539 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1573;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1546 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1152, _1156, _1159, _1162));
        float _1550 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1554 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1561 = dot(vec4(cbModelParam._m0[39u]), vec4(_1530, _1531, _1532, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1584;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1575 = dot(vec4(cbModelParam._m0[40u]), vec4(_1530, _1531, _1532, 1.0));
        _1584 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1584 = 1.0;
    }
    float _1588 = (_1584 * cbModelParam._m0[1u].x) + (_1573 * (1.0 - cbModelParam._m0[1u].x));
    float _1598 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _612);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1598 : min(cbModelParam._m0[25u].z, _1598));
    float _1679;
    float _1681;
    float _1683;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1646 = fma(_850, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842)) + cbModelParam._m0[13u].w;
        float _1650 = fma(_850, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842)) + cbModelParam._m0[14u].w;
        float _1654 = fma(_850, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842)) + cbModelParam._m0[15u].w;
        float _1657 = fma(_788, cbModelParam._m0[13u].z, fma(_787, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786));
        float _1660 = fma(_788, cbModelParam._m0[14u].z, fma(_787, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786));
        float _1663 = fma(_788, cbModelParam._m0[15u].z, fma(_787, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786));
        float _1691;
        if (_1657 > 0.0)
        {
            _1691 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1691 = frontier_phi_16_14_ladder;
        }
        float _1897;
        if (_1660 > 0.0)
        {
            _1897 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1897 = frontier_phi_25_21_ladder;
        }
        float _2151;
        if (_1663 > 0.0)
        {
            _2151 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2151 = frontier_phi_37_32_ladder;
        }
        float _2153 = isnan(_1897) ? _1691 : (isnan(_1691) ? _1897 : min(_1691, _1897));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1657) + _1646;
        float _2159 = (_2154 * _1660) + _1650;
        float _2160 = (_2154 * _1663) + _1654;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2161;
        float _2165 = _2161 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 > _2165) || ((_2159 < _2163) || ((_2158 < _2163) || (_2158 > _2165))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2288 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2160, cbModelParam._m0[9u].z, fma(_2159, cbModelParam._m0[9u].y, _2158 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2160, cbModelParam._m0[10u].z, fma(_2159, cbModelParam._m0[10u].y, _2158 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2160, cbModelParam._m0[11u].z, fma(_2159, cbModelParam._m0[11u].y, _2158 * cbModelParam._m0[11u].x))), _1599);
            frontier_phi_15_37_ladder = _2288.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2288.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2288.x * cbModelParam._m0[1u].y;
        }
        _1679 = frontier_phi_15_37_ladder_2;
        _1681 = frontier_phi_15_37_ladder_1;
        _1683 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1667 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_786, _787, _788), _1599);
        _1679 = _1667.x * cbModelParam._m0[1u].y;
        _1681 = _1667.y * cbModelParam._m0[1u].y;
        _1683 = _1667.z * cbModelParam._m0[1u].y;
    }
    float _1687 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _612);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1687 : min(cbModelParam._m0[25u].w, _1687));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1745 = fma(_850, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842)) + cbModelParam._m0[21u].w;
        float _1749 = fma(_850, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842)) + cbModelParam._m0[22u].w;
        float _1753 = fma(_850, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842)) + cbModelParam._m0[23u].w;
        float _1756 = fma(_788, cbModelParam._m0[21u].z, fma(_787, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786));
        float _1759 = fma(_788, cbModelParam._m0[22u].z, fma(_787, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786));
        float _1762 = fma(_788, cbModelParam._m0[23u].z, fma(_787, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786));
        float _1902;
        if (_1756 > 0.0)
        {
            _1902 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1902 = frontier_phi_27_23_ladder;
        }
        float _2178;
        if (_1759 > 0.0)
        {
            _2178 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2178 = frontier_phi_39_34_ladder;
        }
        float _2391;
        if (_1762 > 0.0)
        {
            _2391 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2391 = frontier_phi_48_45_ladder;
        }
        float _2393 = isnan(_2178) ? _1902 : (isnan(_1902) ? _2178 : min(_1902, _2178));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1756) + _1745;
        float _2399 = (_2394 * _1759) + _1749;
        float _2400 = (_2394 * _1762) + _1753;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2401;
        float _2404 = _2401 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2400 > _2404) || ((_2400 < _2402) || ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 < _2402) || (_2398 > _2404))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2400, cbModelParam._m0[17u].z, fma(_2399, cbModelParam._m0[17u].y, _2398 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2400, cbModelParam._m0[18u].z, fma(_2399, cbModelParam._m0[18u].y, _2398 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2400, cbModelParam._m0[19u].z, fma(_2399, cbModelParam._m0[19u].y, _2398 * cbModelParam._m0[19u].x))), _1688);
            frontier_phi_24_48_ladder = _2600.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2600.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2600.x * cbModelParam._m0[1u].z;
        }
        _1781 = frontier_phi_24_48_ladder_2;
        _1783 = frontier_phi_24_48_ladder_1;
        _1785 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_786, _787, _788), _1688);
        _1781 = _1765.x * cbModelParam._m0[1u].z;
        _1783 = _1765.y * cbModelParam._m0[1u].z;
        _1785 = _1765.z * cbModelParam._m0[1u].z;
    }
    float _1798 = (((_813 * _763) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1781 - _1679)) + _1679);
    float _1800 = (((_813 * _765) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1783 - _1681)) + _1681);
    float _1802 = (((_813 * _766) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1785 - _1683)) + _1683);
    float _1805 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1800, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1800, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1800, cbSceneParam._m0[91u].y, _1798 * cbSceneParam._m0[91u].x));
    uvec4 _1821 = floatBitsToUint(cbInstanceData._m0[_738 + 5u]);
    uint _1823 = _1821.x * 14u;
    uint _1824 = _1823 + 13u;
    float _1831 = _778 + (-1.0);
    float _1836 = (cbLight._m0[_1824].x * _1831) + 1.0;
    float _1837 = (cbLight._m0[_1824].y * _1831) + 1.0;
    float _1838 = (cbLight._m0[_1824].z * _1831) + 1.0;
    float _1839 = (cbLight._m0[_1824].w * _1831) + 1.0;
    uint _1840 = _1823 + 5u;
    float _1846 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
    uint _1850 = _1823 + 4u;
    float _1856 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
    uint _1860 = _1823 | 1u;
    float _1871 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_608, _609, _610));
    float _1874 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_608, _609, _610));
    float _4051 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _4062 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1879 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.3183098733425140380859375;
    float _1881 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
    float _1888 = ((cbLight._m0[_1840].x * _1846) * _1881) + ((cbLight._m0[_1850].x * _1856) * _1879);
    float _1889 = ((_1846 * cbLight._m0[_1840].y) * _1881) + ((_1856 * cbLight._m0[_1850].y) * _1879);
    float _1890 = ((_1846 * cbLight._m0[_1840].z) * _1881) + ((_1856 * cbLight._m0[_1850].z) * _1879);
    uvec4 _1894 = floatBitsToUint(cbLight._m0[_1823 + 12u]);
    bool _1896 = _1894.x == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1896)
    {
        _1907 = _1888;
        _1909 = _1889;
        _1911 = _1890;
    }
    else
    {
        uint _1915 = _1823 + 6u;
        float _1931 = (dot(vec3(cbLight._m0[_1823 + 2u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _1932 = _1931 * _1931;
        float _4073 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1934 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _1907 = (((cbLight._m0[_1915].x * 0.3183098733425140380859375) * _1933) * _1934) + _1888;
        _1909 = (((cbLight._m0[_1915].y * 0.3183098733425140380859375) * _1933) * _1934) + _1889;
        _1911 = (((cbLight._m0[_1915].z * 0.3183098733425140380859375) * _1933) * _1934) + _1890;
    }
    bool _1914 = _1894.y == 0u;
    float _1952;
    float _1954;
    float _1956;
    if (_1914)
    {
        _1952 = _1907;
        _1954 = _1909;
        _1956 = _1911;
    }
    else
    {
        uint _2122 = _1823 + 7u;
        float _2138 = (dot(vec3(cbLight._m0[_1823 + 3u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _2139 = _2138 * _2138;
        float _4089 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2141 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _1952 = (((cbLight._m0[_2122].x * 0.3183098733425140380859375) * _2140) * _2141) + _1907;
        _1954 = (((cbLight._m0[_2122].y * 0.3183098733425140380859375) * _2140) * _2141) + _1909;
        _1956 = (((cbLight._m0[_2122].z * 0.3183098733425140380859375) * _2140) * _2141) + _1911;
    }
    uint _1959 = _1823 + 8u;
    float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _612) * 0.949999988079071044921875);
    float _1973 = _1972 * _1972;
    float _1974 = cbLight._m0[_1823].x + _690;
    float _1975 = cbLight._m0[_1823].y + _691;
    float _1976 = cbLight._m0[_1823].z + _692;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1981 = _1980 * _1974;
    float _1982 = _1980 * _1975;
    float _1983 = _1980 * _1976;
    float _1984 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_1823].xyz));
    float _4105 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _1988 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _1989 = dot(vec3(_608, _609, _610), vec3(_1981, _1982, _1983));
    float _4127 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_1981, _1982, _1983));
    float _4138 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1973 * _1973;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2009 = exp2(log2(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * 5.0);
    float _2010 = 0.959999978542327880859375 - _760;
    float _2012 = 0.959999978542327880859375 - _761;
    float _2013 = 0.959999978542327880859375 - _762;
    float _2020 = 1.0 - _1973;
    float _2031 = (0.5 / (((_1988 * ((_1987 * _2020) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2020) + _1973) * _1987))) * _1987;
    float _4149 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    uint _2044 = _1823 + 9u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _612) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1860].x + _690;
    float _2058 = cbLight._m0[_1860].y + _691;
    float _2059 = cbLight._m0[_1860].z + _692;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_1860].xyz));
    float _4160 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _2071 = dot(vec3(_608, _609, _610), vec3(_2064, _2065, _2066));
    float _4171 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2064, _2065, _2066));
    float _4182 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2056 * _2056;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2090 = exp2(log2(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * 5.0);
    float _2097 = 1.0 - _2056;
    float _2107 = (0.5 / (((_1988 * ((_2070 * _2097) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2097) + _2056) * _2070))) * _2070;
    float _4193 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2109 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    float _2119 = (((((_2090 * _2010) + _763) * cbLight._m0[_2044].x) * _2109) * _1846) + (((((_2009 * _2010) + _763) * cbLight._m0[_1959].x) * _2033) * _1856);
    float _2120 = (((((_2090 * _2012) + _765) * cbLight._m0[_2044].y) * _2109) * _1846) + (((((_2009 * _2012) + _765) * cbLight._m0[_1959].y) * _2033) * _1856);
    float _2121 = (((((_2090 * _2013) + _766) * cbLight._m0[_2044].z) * _2109) * _1846) + (((((_2009 * _2013) + _766) * cbLight._m0[_1959].z) * _2033) * _1856);
    float _2183;
    float _2185;
    float _2187;
    if (_1896)
    {
        _2183 = _2119;
        _2185 = _2120;
        _2187 = _2121;
    }
    else
    {
        uint _2189 = _1823 + 2u;
        uint _2193 = _1823 + 10u;
        float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _612) * 0.949999988079071044921875);
        float _2208 = _2207 * _2207;
        float _2209 = cbLight._m0[_2189].x + _690;
        float _2210 = cbLight._m0[_2189].y + _691;
        float _2211 = cbLight._m0[_2189].z + _692;
        float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
        float _2216 = _2215 * _2209;
        float _2217 = _2215 * _2210;
        float _2218 = _2215 * _2211;
        float _2219 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2189].xyz));
        float _4204 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2223 = dot(vec3(_608, _609, _610), vec3(_2216, _2217, _2218));
        float _4215 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2226 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2227 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2216, _2217, _2218));
        float _4226 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2231 = _2208 * _2208;
        float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
        float _2242 = exp2(log2(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * 5.0);
        float _2249 = 1.0 - _2208;
        float _2259 = (0.5 / (((_1988 * ((_2222 * _2249) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2249) + _2208) * _2222))) * _2222;
        float _4237 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2261 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
        float _2262 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _2183 = (((((_2242 * _2010) + _763) * cbLight._m0[_2193].x) * _2261) * _2262) + _2119;
        _2185 = (((((_2242 * _2012) + _765) * cbLight._m0[_2193].y) * _2261) * _2262) + _2120;
        _2187 = (((((_2242 * _2013) + _766) * cbLight._m0[_2193].z) * _2261) * _2262) + _2121;
    }
    float _2297;
    float _2299;
    float _2301;
    if (_1914)
    {
        _2297 = _2183;
        _2299 = _2185;
        _2301 = _2187;
    }
    else
    {
        uint _2308 = _1823 + 3u;
        uint _2312 = _1823 + 11u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _612) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _690;
        float _2329 = cbLight._m0[_2308].y + _691;
        float _2330 = cbLight._m0[_2308].z + _692;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2308].xyz));
        float _4253 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2342 = dot(vec3(_608, _609, _610), vec3(_2335, _2336, _2337));
        float _4264 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4275 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0);
        float _2368 = 1.0 - _2327;
        float _2378 = (0.5 / (((_1988 * ((_2341 * _2368) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2368) + _2327) * _2341))) * _2341;
        float _4286 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _2297 = (((((_2361 * _2010) + _763) * cbLight._m0[_2312].x) * _2380) * _2381) + _2183;
        _2299 = (((((_2361 * _2012) + _765) * cbLight._m0[_2312].y) * _2380) * _2381) + _2185;
        _2301 = (((((_2361 * _2013) + _766) * cbLight._m0[_2312].z) * _2380) * _2381) + _2187;
    }
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    if (_1821.y == 0u)
    {
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2456;
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2456;
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2456;
        uvec4 _2471 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2472 = _2471.x;
        uint _2483 = uint((float(_2471.y) * floor(float(uint(cbSceneParam._m0[85u].y * _699) / _2472))) + floor(float(uint(cbSceneParam._m0[85u].x * _698) / _2472)));
        float _2493 = (log2(_2459 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2494 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        uint _2497 = uint(isnan(14.0) ? _2494 : (isnan(_2494) ? 14.0 : min(_2494, 14.0)));
        uvec4 _2502 = texelFetch(g_lightClusterGridBuffer, int(((_2497 << 2u) + (_2483 << 6u)) >> 2u));
        uint _2503 = _2502.x;
        uint _2504 = _2471.z;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        if (((((1u << ((_2504 >> 4u) & 15u)) + 4294967295u) & _2503) == 0u) || ((_2504 & 240u) == 0u))
        {
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
        }
        else
        {
            float _2606;
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            uint _2755 = 0u;
            uint _2764;
            bool _2765;
            for (;;)
            {
                _2764 = texelFetch(g_lightClassification, int((((_2497 << 5u) + (_2483 << 9u)) + (_2755 << 2u)) >> 2u)).x;
                _2765 = _2764 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2765)
                {
                    frontier_phi_63_pred = _2754;
                    frontier_phi_63_pred_1 = _2753;
                    frontier_phi_63_pred_2 = _2752;
                    frontier_phi_63_pred_3 = _2751;
                    frontier_phi_63_pred_4 = _2750;
                    frontier_phi_63_pred_5 = _2749;
                }
                else
                {
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    uint _2879;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2754;
                    _2879 = _2764;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    for (;;)
                    {
                        uint _2883 = uint(findLSB(_2879)) + (_2755 << 5u);
                        uint _2880 = (_2879 + 4294967295u) & _2879;
                        uint _2885 = _2883 * 48u;
                        vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 3u)).x));
                        uint _2905 = (_2883 * 48u) + 4u;
                        vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 3u)).x));
                        uint _2924 = (_2883 * 48u) + 8u;
                        vec3 _2935 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2924)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 2u)).x));
                        float _2939 = _2899.x - _2457;
                        float _2940 = _2899.y - _2458;
                        float _2941 = _2899.z - _2459;
                        float _2942 = dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941));
                        float _2945 = inversesqrt(_2942);
                        float _2946 = _2945 * _2939;
                        float _2947 = _2945 * _2940;
                        float _2948 = _2945 * _2941;
                        float _2949 = dot(vec3(_719, _722, _725), vec3(_2946, _2947, _2948));
                        float _2954 = 1.0 - (_2942 * _2899.w);
                        float _4312 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2955 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                        float _2956 = sqrt(_2942) * _2918.w;
                        float _2959 = 1.39999997615814208984375 / (_2956 + 1.39999997615814208984375);
                        float _2960 = _2959 * _2959;
                        float _2963 = ((1.0 - _2960) * _2949) + _2960;
                        float _2966 = _2956 * _2956;
                        float _2970 = ((isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))) * _2955) / ((_2966 * 0.699999988079071044921875) + 1.0);
                        float _2974 = (-0.0) - _2457;
                        float _2975 = (-0.0) - _2458;
                        float _2976 = (-0.0) - _2459;
                        float _2980 = inversesqrt(dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976)));
                        float _2981 = _2980 * _2974;
                        float _2982 = _2980 * _2975;
                        float _2983 = _2980 * _2976;
                        float _2991 = exp2(log2(1.0 / ((_2966 * 3.5) + 5.0)) * 0.25);
                        float _2992 = 1.0 - _794;
                        float _2999 = sqrt(1.0 - ((1.0 - (_2992 * _2992)) * (1.0 - (_2991 * _2991))));
                        float _3000 = _2999 * _2999;
                        float _3001 = _3000 * _3000;
                        float _3002 = _2981 + _2946;
                        float _3003 = _2982 + _2947;
                        float _3004 = _2983 + _2948;
                        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                        float _3012 = dot(vec3(_719, _722, _725), vec3(_2981, _2982, _2983));
                        float _4328 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3015 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3016 = dot(vec3(_719, _722, _725), vec3(_3008 * _3002, _3008 * _3003, _3008 * _3004));
                        float _4339 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3019 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3023 = ((_3019 * _3019) * (_3001 + (-1.0))) + 1.0;
                        float _3024 = _2959 * _3000;
                        float _3025 = _3024 * _3024;
                        float _3028 = ((1.0 - _3025) * _2949) + _3025;
                        float _4350 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3029 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3030 = 1.0 - _3000;
                        float _3040 = (0.5 / (((_3029 * ((_3015 * _3030) + _3000)) + 9.9999999392252902907785028219223e-09) + (((_3029 * _3030) + _3000) * _3015))) * _3029;
                        float _4361 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3051 = (((_3001 * 3.1415927410125732421875) * (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) / ((_3023 * _3023) * ((_2966 * 2.1991131305694580078125) + 3.141590118408203125))) * _2955;
                        _2808 = (_2970 * _2918.x) + _2876;
                        _2809 = (_2970 * _2918.y) + _2877;
                        _2810 = (_2970 * _2918.z) + _2878;
                        _2805 = (_3051 * _2935.x) + _2873;
                        _2806 = (_3051 * _2935.y) + _2874;
                        _2807 = (_3051 * _2935.z) + _2875;
                        if (_2880 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2810;
                            _2879 = _2880;
                        }
                    }
                    frontier_phi_63_pred = _2810;
                    frontier_phi_63_pred_1 = _2809;
                    frontier_phi_63_pred_2 = _2808;
                    frontier_phi_63_pred_3 = _2807;
                    frontier_phi_63_pred_4 = _2806;
                    frontier_phi_63_pred_5 = _2805;
                }
                _2616 = frontier_phi_63_pred;
                _2614 = frontier_phi_63_pred_1;
                _2612 = frontier_phi_63_pred_2;
                _2610 = frontier_phi_63_pred_3;
                _2608 = frontier_phi_63_pred_4;
                _2606 = frontier_phi_63_pred_5;
                uint _2756 = _2755 + 1u;
                if (_2756 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2749 = _2606;
                    _2750 = _2608;
                    _2751 = _2610;
                    _2752 = _2612;
                    _2753 = _2614;
                    _2754 = _2616;
                    _2755 = _2756;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
        }
        uvec4 _2619 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2620 = _2619.z;
        uint _2622 = (_2620 >> 8u) & 15u;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        if (((4294967295u << _2622) & _2503) == 0u)
        {
            _2717 = _2605;
            _2719 = _2607;
            _2721 = _2609;
            _2723 = _2611;
            _2725 = _2613;
            _2727 = _2615;
        }
        else
        {
            float _2742 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
            float _2743 = _2742 * _2457;
            float _2744 = _2742 * _2458;
            float _2745 = _2742 * _2459;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2622 < ((_2620 >> 12u) & 15u))
            {
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2856 = _2605;
                float _2857 = _2607;
                float _2858 = _2609;
                float _2859 = _2611;
                float _2860 = _2613;
                float _2861 = _2615;
                uint _2862 = _2622;
                uint _2871;
                bool _2872;
                for (;;)
                {
                    _2871 = texelFetch(g_lightClassification, int((((_2497 << 5u) + (_2483 << 9u)) + (_2862 << 2u)) >> 2u)).x;
                    _2872 = _2871 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2872)
                    {
                        frontier_phi_69_pred = _2861;
                        frontier_phi_69_pred_1 = _2860;
                        frontier_phi_69_pred_2 = _2859;
                        frontier_phi_69_pred_3 = _2858;
                        frontier_phi_69_pred_4 = _2857;
                        frontier_phi_69_pred_5 = _2856;
                    }
                    else
                    {
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        float _3071 = _2858;
                        float _3072 = _2859;
                        float _3073 = _2860;
                        float _3074 = _2861;
                        uint _3075 = _2871;
                        uint _3076;
                        vec4 _3101;
                        float _3102;
                        vec4 _3117;
                        vec3 _3129;
                        vec4 _3145;
                        vec4 _3161;
                        float _3208;
                        bool _3209;
                        for (;;)
                        {
                            uint _3086 = ((_2862 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3075));
                            _3076 = (_3075 + 4294967295u) & _3075;
                            uint _3088 = _3086 * 40u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            _3102 = _3101.w;
                            uint _3104 = (_3086 * 40u) + 4u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3119 = (_3086 * 40u) + 8u;
                            _3129 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x));
                            uint _3132 = (_3086 * 40u) + 16u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3148 = (_3086 * 40u) + 20u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3164 = (_3086 * 40u) + 24u;
                            vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3183 = (_3086 * 40u) + 28u;
                            vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            _3208 = fma(_2459, _3196.z, fma(_2458, _3196.y, _3196.x * _2457)) + _3196.w;
                            _3209 = !((fma(_2459, _3177.z, fma(_2458, _3177.y, _3177.x * _2457)) + _3177.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3209)
                            {
                                float _3236 = _3101.x - _2457;
                                float _3237 = _3101.y - _2458;
                                float _3238 = _3101.z - _2459;
                                float _3239 = dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238));
                                float _3242 = inversesqrt(_3239);
                                float _3243 = _3242 * _3236;
                                float _3244 = _3242 * _3237;
                                float _3245 = _3242 * _3238;
                                float _3249 = 1.0 - (_3239 / (_3102 * _3102));
                                float _4372 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                                float _3254 = sqrt(_3239) * _3117.w;
                                float _3256 = 1.39999997615814208984375 / (_3254 + 1.39999997615814208984375);
                                float _3257 = _3256 * _3256;
                                float _3260 = ((1.0 - _3257) * dot(vec3(_3243, _3244, _3245), vec3(_719, _722, _725))) + _3257;
                                float _3263 = _3254 * _3254;
                                float _3267 = (fma(_2459, _3145.z, fma(_2458, _3145.y, _3145.x * _2457)) + _3145.w) / _3208;
                                float _3268 = (fma(_2459, _3161.z, fma(_2458, _3161.y, _3161.x * _2457)) + _3161.w) / _3208;
                                float _3272 = 1.0 - dot(vec2(_3267, _3268), vec2(_3267, _3268));
                                float _4388 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3273 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3274 = _3273 * (((isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))) * _3250) / ((_3263 * 0.699999988079071044921875) + 1.0));
                                float _3286 = exp2(log2(1.0 / ((_3263 * 3.5) + 5.0)) * 0.25);
                                float _3287 = 1.0 - _794;
                                float _3294 = sqrt(1.0 - ((1.0 - (_3287 * _3287)) * (1.0 - (_3286 * _3286))));
                                float _3295 = _3294 * _3294;
                                float _3296 = _3295 * _3295;
                                float _3297 = _3243 - _2743;
                                float _3298 = _3244 - _2744;
                                float _3299 = _3245 - _2745;
                                float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                                float _3307 = dot(vec3(_719, _722, _725), vec3((-0.0) - _2743, (-0.0) - _2744, (-0.0) - _2745));
                                float _4399 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3310 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3311 = dot(vec3(_719, _722, _725), vec3(_3303 * _3297, _3303 * _3298, _3303 * _3299));
                                float _4410 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3314 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3318 = ((_3314 * _3314) * (_3296 + (-1.0))) + 1.0;
                                float _3319 = _3256 * _3295;
                                float _3320 = _3319 * _3319;
                                float _3326 = ((1.0 - _3320) * dot(vec3(_719, _722, _725), vec3(_3243, _3244, _3245))) + _3320;
                                float _4421 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3328 = 1.0 - _3295;
                                float _3338 = (0.5 / (((_3327 * ((_3310 * _3328) + _3295)) + 9.9999999392252902907785028219223e-09) + (((_3327 * _3328) + _3295) * _3310))) * _3327;
                                float _4432 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3348 = (_3273 * _3250) * (((_3296 * 3.1415927410125732421875) * (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) / ((_3318 * _3318) * ((_3263 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3274 * _3117.z;
                                frontier_phi_75_pred_1 = _3274 * _3117.y;
                                frontier_phi_75_pred_2 = _3274 * _3117.x;
                                frontier_phi_75_pred_3 = _3348 * _3129.z;
                                frontier_phi_75_pred_4 = _3348 * _3129.y;
                                frontier_phi_75_pred_5 = _3348 * _3129.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3357 = frontier_phi_75_pred;
                            _3356 = frontier_phi_75_pred_1;
                            _3355 = frontier_phi_75_pred_2;
                            _3354 = frontier_phi_75_pred_3;
                            _3353 = frontier_phi_75_pred_4;
                            _3352 = frontier_phi_75_pred_5;
                            _3059 = _3355 + _3072;
                            _3060 = _3356 + _3073;
                            _3061 = _3357 + _3074;
                            _3056 = _3352 + _3069;
                            _3057 = _3353 + _3070;
                            _3058 = _3354 + _3071;
                            if (_3076 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3076;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3061;
                        frontier_phi_69_pred_1 = _3060;
                        frontier_phi_69_pred_2 = _3059;
                        frontier_phi_69_pred_3 = _3058;
                        frontier_phi_69_pred_4 = _3057;
                        frontier_phi_69_pred_5 = _3056;
                    }
                    _2728 = frontier_phi_69_pred;
                    _2726 = frontier_phi_69_pred_1;
                    _2724 = frontier_phi_69_pred_2;
                    _2722 = frontier_phi_69_pred_3;
                    _2720 = frontier_phi_69_pred_4;
                    _2718 = frontier_phi_69_pred_5;
                    uint _2863 = _2862 + 1u;
                    if (_2863 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2856 = _2718;
                        _2857 = _2720;
                        _2858 = _2722;
                        _2859 = _2724;
                        _2860 = _2726;
                        _2861 = _2728;
                        _2862 = _2863;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2728;
                frontier_phi_57_58_ladder_1 = _2726;
                frontier_phi_57_58_ladder_2 = _2724;
                frontier_phi_57_58_ladder_3 = _2722;
                frontier_phi_57_58_ladder_4 = _2720;
                frontier_phi_57_58_ladder_5 = _2718;
            }
            else
            {
                frontier_phi_57_58_ladder = _2615;
                frontier_phi_57_58_ladder_1 = _2613;
                frontier_phi_57_58_ladder_2 = _2611;
                frontier_phi_57_58_ladder_3 = _2609;
                frontier_phi_57_58_ladder_4 = _2607;
                frontier_phi_57_58_ladder_5 = _2605;
            }
            _2717 = frontier_phi_57_58_ladder_5;
            _2719 = frontier_phi_57_58_ladder_4;
            _2721 = frontier_phi_57_58_ladder_3;
            _2723 = frontier_phi_57_58_ladder_2;
            _2725 = frontier_phi_57_58_ladder_1;
            _2727 = frontier_phi_57_58_ladder;
        }
        float _2732 = isnan(1.0) ? _778 : (isnan(_778) ? 1.0 : min(_778, 1.0));
        _2515 = (_2732 * _2723) + _1952;
        _2517 = (_2732 * _2725) + _1954;
        _2519 = (_2732 * _2727) + _1956;
        _2521 = ((_2717 * _763) * _2732) + _2297;
        _2523 = ((_2719 * _765) * _2732) + _2299;
        _2525 = ((_2721 * _766) * _2732) + _2301;
    }
    else
    {
        _2515 = _1952;
        _2517 = _1954;
        _2519 = _1956;
        _2521 = _2297;
        _2523 = _2299;
        _2525 = _2301;
    }
    float _4448 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4459 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4470 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4481 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _2550 = cbInstanceData._m0[_738 + 6u].w * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)));
    float _2555 = _698 / cbSceneParam._m0[86u].x;
    float _2556 = _699 / cbSceneParam._m0[86u].y;
    vec4 _2570 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, (log2((isnan(cbSceneParam._m0[77u].w) ? _632 : (isnan(_632) ? cbSceneParam._m0[77u].w : min(_632, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2572 = _2570.x;
    float _2573 = _2570.y;
    float _2574 = _2570.z;
    float _2575 = _2570.w;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    if (_632 > cbSceneParam._m0[78u].w)
    {
        float _2630 = isnan(_632) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _632 : min(cbSceneParam._m0[80u].w, _632));
        float _2631 = _2630 / _632;
        float _2642 = _2631 * _683;
        float _2643 = _684 * _2631;
        float _2644 = (-0.0) - _2643;
        float _2645 = _2631 * _685;
        float _2647 = (cbSceneParam._m0[77u].w * _2644) / _2630;
        float _2648 = _2647 + cbSceneParam._m0[79u].w;
        float _2649 = cbSceneParam._m0[79u].w - _2643;
        float _2655 = sqrt(((_2642 * _2642) + (_2643 * _2643)) + (_2645 * _2645));
        float _2658 = (1.0 - (cbSceneParam._m0[77u].w / _2630)) * _2655;
        float _2663 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2665 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2818;
        if (abs((_2644 - _2647) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2818 = ((((_2648 > 0.0) ? exp2(_2663 * _2648) : (2.0 - exp2(_2665 * _2648))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2658;
        }
        else
        {
            float _2778 = 1.0 / cbSceneParam._m0[80u].x;
            float _2779 = isnan(_2649) ? _2648 : (isnan(_2648) ? _2649 : max(_2648, _2649));
            float _2780 = isnan(_2649) ? _2648 : (isnan(_2648) ? _2649 : min(_2648, _2649));
            float _2789 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : min(_2779, 0.0));
            float _2790 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : min(_2780, 0.0));
            _2818 = ((abs(_2655 / _2644) * cbSceneParam._m0[80u].y) * ((((_2789 - _2790) * 2.0) - ((exp2(_2663 * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0)))) - exp2(_2663 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0))))) * _2778)) - ((exp2(_2665 * _2789) - exp2(_2665 * _2790)) * _2778))) + (_2658 * cbSceneParam._m0[80u].z);
        }
        vec4 _2820 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, 1.0), 0.0);
        float _2829 = exp2((_2818 * (-1.44269502162933349609375)) * (1.0 - _2820.w));
        float _2830 = log2(_2829);
        float _2846 = log2(_2575);
        _2667 = (exp2(_2846 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].x)) * _2820.x) / cbSceneParam._m0[78u].x)) + _2572;
        _2669 = (exp2(_2846 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].y)) * _2820.y) / cbSceneParam._m0[78u].y)) + _2573;
        _2671 = (exp2(_2846 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].z)) * _2820.z) / cbSceneParam._m0[78u].z)) + _2574;
        _2673 = _2829 * _2575;
    }
    else
    {
        _2667 = _2572;
        _2669 = _2573;
        _2671 = _2574;
        _2673 = _2575;
    }
    float _2685 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2686 = _2685 == 3.0;
    float _2687 = log2(_2673);
    float _2694 = exp2(_2687 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2515 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _778))) + ((_2521 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2695 = exp2(_2687 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2517 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _778))) + ((_2523 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2696 = exp2(_2687 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2519 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _778))) + ((_2525 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2705 = (_2685 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2705 * (_2686 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2667)));
    SV_Target.y = _2705 * (_2686 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2669)));
    SV_Target.z = _2705 * (_2686 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2671)));
    SV_Target.w = _2550;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2550;
}


