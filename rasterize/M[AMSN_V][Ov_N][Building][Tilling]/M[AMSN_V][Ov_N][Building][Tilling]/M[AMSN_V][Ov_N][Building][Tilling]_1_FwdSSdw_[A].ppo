#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1200;
float _3613;
float _3614;
float _3615;
float _3616;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _214 = _213 * _206;
    float _215 = _213 * _207;
    float _216 = _213 * _208;
    float _226 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _227 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _228 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _232 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _233 = _232 * _226;
    float _234 = _232 * _227;
    float _235 = _232 * _228;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    float _253 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _254 = _253 * TANGENT_2.x;
    float _255 = _253 * TANGENT_2.y;
    float _256 = _253 * TANGENT_2.z;
    float _261;
    float _262;
    float _263;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _261 = (-0.0) - _240;
        _262 = (-0.0) - _241;
        _263 = (-0.0) - _242;
    }
    else
    {
        _261 = _240;
        _262 = _241;
        _263 = _242;
    }
    float _285 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[12u].y;
    float _297 = ((cbMtdParam._m0[13u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5.y - _285) + (cbMtdParam._m0[12u].w * TEXCOORD_5.y))) + 1.0;
    float _3625 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _300 = 1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)));
    float _301 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _302 = isnan(1.0) ? _301 : (isnan(_301) ? 1.0 : min(_301, 1.0));
    float _310 = ((cbMtdParam._m0[13u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.x - _285) + (cbMtdParam._m0[12u].z * TEXCOORD_5.x))) + 1.0;
    float _3646 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _312 = 1.0 - (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)));
    float _313 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _314 = isnan(1.0) ? _313 : (isnan(_313) ? 1.0 : min(_313, 1.0));
    vec4 _332 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _334 = _332.x;
    float _335 = _332.y;
    float _336 = _332.z;
    float _337 = cbMtdParam._m0[11u].x * _314;
    float _339 = cbMtdParam._m0[11u].y * _314;
    float _341 = cbMtdParam._m0[11u].z * _314;
    float _361 = _312 + _300;
    float _362 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _363 = isnan(1.0) ? _362 : (isnan(_362) ? 1.0 : min(_362, 1.0));
    vec4 _381 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _386 = _381.w;
    float _387 = _381.x * cbMtdParam._m0[10u].x;
    float _388 = _381.y * cbMtdParam._m0[10u].y;
    float _389 = _381.z * cbMtdParam._m0[10u].z;
    float _404 = (_387 - (_363 * _387)) + ((((((_334 * (cbMtdParam._m0[9u].x - _337)) * _302) + (_337 * _334)) * 4.55000019073486328125) * _363) * _387);
    float _406 = (((((((_335 * (cbMtdParam._m0[9u].y - _339)) * _302) + (_339 * _335)) * 4.55000019073486328125) * _363) * _388) + _388) - (_363 * _388);
    float _408 = (((((((_336 * (cbMtdParam._m0[9u].z - _341)) * _302) + (_341 * _336)) * 4.55000019073486328125) * _363) * _389) + _389) - (_363 * _389);
    vec4 _425 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _429 = _425.z;
    float _433 = (_425.x * 2.0) + (-1.0);
    float _435 = (_425.y * 2.0) + (-1.0);
    float _436 = dot(vec2(_433, _435), vec2(_433, _435));
    float _3677 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _441 = sqrt(1.0 - (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))));
    float _444 = fma(_441, _261, fma(_435, _254, _433 * _233));
    float _447 = fma(_441, _262, fma(_435, _255, _433 * _234));
    float _450 = fma(_441, _263, fma(_435, _256, _433 * _235));
    float _454 = inversesqrt(dot(vec3(_444, _447, _450), vec3(_444, _447, _450)));
    float _455 = _454 * _444;
    float _456 = _454 * _447;
    float _457 = _454 * _450;
    vec4 _469 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _475 = (_469.x * 2.0) + (-1.0);
    float _476 = (_469.y * 2.0) + (-1.0);
    float _477 = dot(vec2(_475, _476), vec2(_475, _476));
    float _3688 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _482 = sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))));
    float _485 = fma(_482, _261, fma(_476, _254, _475 * _233));
    float _488 = fma(_482, _262, fma(_476, _255, _475 * _234));
    float _491 = fma(_482, _263, fma(_476, _256, _475 * _235));
    float _495 = inversesqrt(dot(vec3(_485, _488, _491), vec3(_485, _488, _491)));
    float _496 = _495 * _485;
    float _497 = _495 * _488;
    float _498 = _495 * _491;
    float _501 = fma(_498, _216, fma(_497, _215, _496 * _214));
    float _504 = fma(_498, _249, fma(_497, _248, _496 * _247));
    float _507 = fma(_498, _263, fma(_497, _262, _496 * _261));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    float _515 = fma(_457, _216, fma(_456, _215, _455 * _214));
    float _518 = fma(_457, _249, fma(_456, _248, _455 * _247));
    float _521 = fma(_457, _263, fma(_456, _262, _455 * _261));
    float _525 = inversesqrt(dot(vec3(_515, _518, _521), vec3(_515, _518, _521)));
    float _528 = _525 * _521;
    vec4 _541 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _547 = (_541.x * 2.0) + (-1.0);
    float _548 = (_541.y * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3699 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _554 = sqrt(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))));
    float _557 = fma(_554, _261, fma(_548, _254, _547 * _233));
    float _560 = fma(_554, _262, fma(_548, _255, _547 * _234));
    float _563 = fma(_554, _263, fma(_548, _256, _547 * _235));
    float _567 = inversesqrt(dot(vec3(_557, _560, _563), vec3(_557, _560, _563)));
    float _568 = _567 * _557;
    float _569 = _567 * _560;
    float _570 = _567 * _563;
    float _573 = fma(_570, _216, fma(_569, _215, _568 * _214));
    float _576 = fma(_570, _249, fma(_569, _248, _568 * _247));
    float _579 = fma(_570, _263, fma(_569, _262, _568 * _261));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    float _598 = ((_525 * _515) + (((_501 * _302) * _511) * cbMtdParam._m0[13u].w)) + (((_573 * _314) * _583) * cbMtdParam._m0[13u].z);
    float _600 = ((_525 * _518) + (((_504 * _302) * _511) * cbMtdParam._m0[13u].w)) + (((_576 * _314) * _583) * cbMtdParam._m0[13u].z);
    float _603 = fma(_528, _261, fma(_600, _247, _598 * _214));
    float _606 = fma(_528, _262, fma(_600, _248, _598 * _215));
    float _609 = fma(_528, _263, fma(_600, _249, _598 * _216));
    float _613 = inversesqrt(dot(vec3(_603, _606, _609), vec3(_603, _606, _609)));
    float _614 = _613 * _603;
    float _615 = _613 * _606;
    float _616 = _613 * _609;
    float _3710 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _617 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _618 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3743 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3754 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3765 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _622 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _638 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _689 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _679);
    float _690 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _679);
    float _691 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _679);
    float _695 = inversesqrt(dot(vec3(_689, _690, _691), vec3(_689, _690, _691)));
    float _696 = _689 * _695;
    float _697 = _690 * _695;
    float _698 = _691 * _695;
    vec4 _703 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _705 = _703.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _879 = sqrt(((_689 * _689) + (_690 * _690)) + (_691 * _691));
        float _885 = (cbMatDynParam._m0[5u].x * _879) + cbMatDynParam._m0[5u].y;
        float _3776 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _890 = (cbMatDynParam._m0[5u].z * _879) + cbMatDynParam._m0[5u].w;
        float _3787 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) - _886)) + _886) < ((_705 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _737 = fma(_616, cbSceneParam._m0[5u].z, fma(_615, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _614));
    float _740 = fma(_616, cbSceneParam._m0[6u].z, fma(_615, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _614));
    float _743 = fma(_616, cbSceneParam._m0[7u].z, fma(_615, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _614));
    uint _756 = uint(roundEven(NORMAL.w)) * 13u;
    uint _757 = _756 + 9u;
    uint _758 = _757 + uint(cbMatDynParam._m0[0u].w);
    float _764 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_758].x;
    float _765 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_758].y;
    float _766 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * cbInstanceData._m0[_758].z;
    float _3798 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _770 = 1.0 - _622;
    float _771 = _767 * _770;
    float _772 = _768 * _770;
    float _773 = _769 * _770;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _622;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _622;
    float _780 = (_769 + (-0.039999999105930328369140625)) * _622;
    float _781 = _778 + 0.039999999105930328369140625;
    float _783 = _779 + 0.039999999105930328369140625;
    float _784 = _780 + 0.039999999105930328369140625;
    vec4 _793 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _796 = _793.x * TEXCOORD_5.z;
    float _797 = dot(vec3(_614, _615, _616), vec3(_696, _697, _698));
    float _800 = _797 * 2.0;
    float _804 = (_800 * _614) - _696;
    float _805 = (_800 * _615) - _697;
    float _806 = (_800 * _616) - _698;
    float _810 = abs(dot(vec3(_696, _697, _698), vec3(_614, _615, _616)));
    float _3831 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _812 = sqrt(_618);
    float _825 = exp2((_812 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_812 * 3.0));
    float _831 = (1.0 - _825) * ((_812 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _832 = _825 * _812;
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1199;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _924 = fma(_868, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860));
        float _928 = fma(_868, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860));
        float _932 = fma(_868, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860));
        float _957 = _860 + _614;
        float _958 = _864 + _615;
        float _959 = _868 + _616;
        float _969 = fma(_959, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _957)) - _924;
        float _970 = fma(_959, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _957)) - _928;
        float _971 = fma(_959, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _957)) - _932;
        float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
        float _988 = ((_975 * _969) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_924 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_975 * _970) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_928 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_975 * _971) / cbModelParam._m0[34u].z) + ((((((_932 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        float _1027 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_993.x + (-0.5));
        float _1029 = _1027 * (_993.y + (-0.5));
        float _1030 = _1027 * (_993.z + (-0.5));
        float _1037 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1000.x + (-0.5));
        float _1039 = _1037 * (_1000.y + (-0.5));
        float _1040 = _1037 * (_1000.z + (-0.5));
        float _1047 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1007.x + (-0.5));
        float _1049 = _1047 * (_1007.y + (-0.5));
        float _1050 = _1047 * (_1007.z + (-0.5));
        float _1057 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1014.x + (-0.5));
        float _1059 = _1057 * (_1014.y + (-0.5));
        float _1060 = _1057 * (_1014.z + (-0.5));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = _1028 * 0.5;
        float _1065 = _1038 * 0.5;
        float _1066 = _1048 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1081 = (dot(vec3(_614, _615, _616), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1091 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3879 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1093 + 1.0))) + _1098) * _1061;
        float _1108 = _1029 * 0.5;
        float _1109 = _1039 * 0.5;
        float _1110 = _1049 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_614, _615, _616), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3912 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1135 + 1.0))) + _1140) * _1062;
        float _1150 = _1030 * 0.5;
        float _1151 = _1040 * 0.5;
        float _1152 = _1050 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_614, _615, _616), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3945 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1177 + 1.0))) + _1182) * _1063;
        _1199 = _1030;
        _1201 = _1029;
        _1202 = _1028;
        _1203 = _1040;
        _1204 = _1039;
        _1205 = _1038;
        _1206 = _1050;
        _1207 = _1049;
        _1208 = _1048;
        _1209 = _1063;
        _1210 = _1062;
        _1211 = _1061;
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
    }
    else
    {
        _1199 = _1200;
        _1201 = _1200;
        _1202 = _1200;
        _1203 = _1200;
        _1204 = _1200;
        _1205 = _1200;
        _1206 = _1200;
        _1207 = _1200;
        _1208 = _1200;
        _1209 = _1200;
        _1210 = _1200;
        _1211 = _1200;
        _1212 = 0.0;
        _1213 = 0.0;
        _1214 = 0.0;
    }
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1243 = fma(_868, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _860));
        float _1247 = fma(_868, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _860));
        float _1251 = fma(_868, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _860));
        float _1274 = _860 + _614;
        float _1275 = _864 + _615;
        float _1276 = _868 + _616;
        float _1286 = fma(_1276, cbModelParam._m0[30u].z, fma(_1275, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1274)) - _1243;
        float _1287 = fma(_1276, cbModelParam._m0[31u].z, fma(_1275, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1274)) - _1247;
        float _1288 = fma(_1276, cbModelParam._m0[32u].z, fma(_1275, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1274)) - _1251;
        float _1292 = inversesqrt(dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288)));
        float _1305 = ((_1292 * _1286) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1243 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1292 * _1287) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1247 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1292 * _1288) / cbModelParam._m0[35u].z) + ((((((_1251 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        float _1342 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1309.x + (-0.5));
        float _1344 = _1342 * (_1309.y + (-0.5));
        float _1345 = _1342 * (_1309.z + (-0.5));
        float _1352 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1316.x + (-0.5));
        float _1354 = _1352 * (_1316.y + (-0.5));
        float _1355 = _1352 * (_1316.z + (-0.5));
        float _1362 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1323.x + (-0.5));
        float _1364 = _1362 * (_1323.y + (-0.5));
        float _1365 = _1362 * (_1323.z + (-0.5));
        float _1372 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1330.x + (-0.5));
        float _1374 = _1372 * (_1330.y + (-0.5));
        float _1375 = _1372 * (_1330.z + (-0.5));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = _1343 * 0.5;
        float _1380 = _1353 * 0.5;
        float _1381 = _1363 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_614, _615, _616), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4008 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1406 + 1.0))) + _1411) * _1376;
        float _1421 = _1344 * 0.5;
        float _1422 = _1354 * 0.5;
        float _1423 = _1364 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_614, _615, _616), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4041 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1448 + 1.0))) + _1453) * _1377;
        float _1463 = _1345 * 0.5;
        float _1464 = _1355 * 0.5;
        float _1465 = _1365 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_614, _615, _616), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4074 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1490 + 1.0))) + _1495) * _1378;
        _1512 = _1345;
        _1513 = _1344;
        _1514 = _1343;
        _1515 = _1355;
        _1516 = _1354;
        _1517 = _1353;
        _1518 = _1365;
        _1519 = _1364;
        _1520 = _1363;
        _1521 = _1378;
        _1522 = _1377;
        _1523 = _1376;
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
    }
    else
    {
        _1512 = _1200;
        _1513 = _1200;
        _1514 = _1200;
        _1515 = _1200;
        _1516 = _1200;
        _1517 = _1200;
        _1518 = _1200;
        _1519 = _1200;
        _1520 = _1200;
        _1521 = _1200;
        _1522 = _1200;
        _1523 = _1200;
        _1524 = 0.0;
        _1525 = 0.0;
        _1526 = 0.0;
    }
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1212)) + _1212;
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1213)) + _1213;
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1214)) + _1214;
    float _1559 = fma(_1538, cbSceneParam._m0[89u].z, fma(_1537, cbSceneParam._m0[89u].y, _1536 * cbSceneParam._m0[89u].x));
    float _1562 = fma(_1538, cbSceneParam._m0[90u].z, fma(_1537, cbSceneParam._m0[90u].y, _1536 * cbSceneParam._m0[90u].x));
    float _1565 = fma(_1538, cbSceneParam._m0[91u].z, fma(_1537, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1536));
    float _1580 = _804 * 0.5;
    float _1581 = _805 * 0.5;
    float _1582 = _806 * 0.5;
    float _1583 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1586 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1589 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1623;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1596 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1199, _1203, _1206, _1209));
        float _1600 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1604 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1202, _1205, _1208, _1211));
        float _1611 = dot(vec4(cbModelParam._m0[39u]), vec4(_1580, _1581, _1582, 1.0));
        _1623 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1623 = 1.0;
    }
    float _1634;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1625 = dot(vec4(cbModelParam._m0[40u]), vec4(_1580, _1581, _1582, 1.0));
        _1634 = dot(vec3(isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1625) ? 0.0 : (isnan(0.0) ? _1625 : max(0.0, _1625))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1634 = 1.0;
    }
    float _1638 = (_1634 * cbModelParam._m0[1u].x) + (_1623 * (1.0 - cbModelParam._m0[1u].x));
    float _1648 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _618);
    float _1649 = isnan(_1648) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1648 : min(cbModelParam._m0[25u].z, _1648));
    float _1729;
    float _1731;
    float _1733;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1696 = fma(_868, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860)) + cbModelParam._m0[13u].w;
        float _1700 = fma(_868, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860)) + cbModelParam._m0[14u].w;
        float _1704 = fma(_868, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860)) + cbModelParam._m0[15u].w;
        float _1707 = fma(_806, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804));
        float _1710 = fma(_806, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804));
        float _1713 = fma(_806, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804));
        float _1741;
        if (_1707 > 0.0)
        {
            _1741 = abs((1.0 - _1696) / _1707);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1696 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1741 = frontier_phi_19_17_ladder;
        }
        float _1968;
        if (_1710 > 0.0)
        {
            _1968 = abs((1.0 - _1700) / _1710);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1700 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1968 = frontier_phi_28_24_ladder;
        }
        float _2225;
        if (_1713 > 0.0)
        {
            _2225 = abs((1.0 - _1704) / _1713);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1704 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2225 = frontier_phi_40_35_ladder;
        }
        float _2227 = isnan(_1968) ? _1741 : (isnan(_1741) ? _1968 : min(_1741, _1968));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1707) + _1696;
        float _2233 = (_2228 * _1710) + _1700;
        float _2234 = (_2228 * _1713) + _1704;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2235;
        float _2239 = _2235 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 > _2239) || ((_2233 < _2237) || ((_2232 < _2237) || (_2232 > _2239))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2234, cbModelParam._m0[9u].z, fma(_2233, cbModelParam._m0[9u].y, _2232 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2234, cbModelParam._m0[10u].z, fma(_2233, cbModelParam._m0[10u].y, _2232 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2234, cbModelParam._m0[11u].z, fma(_2233, cbModelParam._m0[11u].y, _2232 * cbModelParam._m0[11u].x))), _1649);
            frontier_phi_18_40_ladder = _2362.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2362.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2362.x * cbModelParam._m0[1u].y;
        }
        _1729 = frontier_phi_18_40_ladder_2;
        _1731 = frontier_phi_18_40_ladder_1;
        _1733 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_804, _805, _806), _1649);
        _1729 = _1717.x * cbModelParam._m0[1u].y;
        _1731 = _1717.y * cbModelParam._m0[1u].y;
        _1733 = _1717.z * cbModelParam._m0[1u].y;
    }
    float _1737 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _618);
    float _1738 = isnan(_1737) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1737 : min(cbModelParam._m0[25u].w, _1737));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1795 = fma(_868, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860)) + cbModelParam._m0[21u].w;
        float _1799 = fma(_868, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860)) + cbModelParam._m0[22u].w;
        float _1803 = fma(_868, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860)) + cbModelParam._m0[23u].w;
        float _1806 = fma(_806, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804));
        float _1809 = fma(_806, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804));
        float _1812 = fma(_806, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804));
        float _1973;
        if (_1806 > 0.0)
        {
            _1973 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1973 = frontier_phi_30_26_ladder;
        }
        float _2252;
        if (_1809 > 0.0)
        {
            _2252 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2252 = frontier_phi_42_37_ladder;
        }
        float _2465;
        if (_1812 > 0.0)
        {
            _2465 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2465 = frontier_phi_51_48_ladder;
        }
        float _2467 = isnan(_2252) ? _1973 : (isnan(_1973) ? _2252 : min(_1973, _2252));
        float _2468 = isnan(_2465) ? _2467 : (isnan(_2467) ? _2465 : min(_2467, _2465));
        float _2472 = (_2468 * _1806) + _1795;
        float _2473 = (_2468 * _1809) + _1799;
        float _2474 = (_2468 * _1812) + _1803;
        float _2475 = _2468 * 9.9999997473787516355514526367188e-05;
        float _2476 = (-1.0) - _2475;
        float _2478 = _2475 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2474 > _2478) || ((_2474 < _2476) || ((_2473 > _2478) || ((_2473 < _2476) || ((_2472 < _2476) || (_2472 > _2478))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2474, cbModelParam._m0[17u].z, fma(_2473, cbModelParam._m0[17u].y, _2472 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2474, cbModelParam._m0[18u].z, fma(_2473, cbModelParam._m0[18u].y, _2472 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2474, cbModelParam._m0[19u].z, fma(_2473, cbModelParam._m0[19u].y, _2472 * cbModelParam._m0[19u].x))), _1738);
            frontier_phi_27_51_ladder = _2674.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2674.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2674.x * cbModelParam._m0[1u].z;
        }
        _1831 = frontier_phi_27_51_ladder_2;
        _1833 = frontier_phi_27_51_ladder_1;
        _1835 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_804, _805, _806), _1738);
        _1831 = _1815.x * cbModelParam._m0[1u].z;
        _1833 = _1815.y * cbModelParam._m0[1u].z;
        _1835 = _1815.z * cbModelParam._m0[1u].z;
    }
    float _1848 = (((_831 * _781) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1831 - _1729)) + _1729);
    float _1850 = (((_831 * _783) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1833 - _1731)) + _1731);
    float _1852 = (((_831 * _784) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1835 - _1733)) + _1733);
    float _1855 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1850, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1858 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1850, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1861 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1850, cbSceneParam._m0[91u].y, _1848 * cbSceneParam._m0[91u].x));
    vec4 _1869 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_717, _718));
    float _1871 = _1869.w;
    float _1883 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1871);
    float _1884 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1871);
    float _1885 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1871);
    uvec4 _1889 = floatBitsToUint(cbInstanceData._m0[_756 + 5u]);
    uint _1891 = _1889.x * 14u;
    uint _1892 = _1891 + 13u;
    float _1899 = _796 + (-1.0);
    float _1904 = (cbLight._m0[_1892].x * _1899) + 1.0;
    float _1905 = (cbLight._m0[_1892].y * _1899) + 1.0;
    float _1906 = (cbLight._m0[_1892].z * _1899) + 1.0;
    float _1907 = (cbLight._m0[_1892].w * _1899) + 1.0;
    uint _1908 = _1891 + 5u;
    float _1914 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
    uint _1918 = _1891 + 4u;
    float _1927 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
    uint _1931 = _1891 | 1u;
    float _1942 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_614, _615, _616));
    float _1945 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_614, _615, _616));
    float _4210 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _4221 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1950 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _1952 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _1959 = ((cbLight._m0[_1908].x * _1914) * _1952) + (((cbLight._m0[_1918].x * _1883) * _1927) * _1950);
    float _1960 = ((_1914 * cbLight._m0[_1908].y) * _1952) + (((cbLight._m0[_1918].y * _1884) * _1927) * _1950);
    float _1961 = ((_1914 * cbLight._m0[_1908].z) * _1952) + (((cbLight._m0[_1918].z * _1885) * _1927) * _1950);
    uvec4 _1965 = floatBitsToUint(cbLight._m0[_1891 + 12u]);
    bool _1967 = _1965.x == 0u;
    float _1978;
    float _1980;
    float _1982;
    if (_1967)
    {
        _1978 = _1959;
        _1980 = _1960;
        _1982 = _1961;
    }
    else
    {
        uint _1986 = _1891 + 6u;
        float _2002 = (dot(vec3(cbLight._m0[_1891 + 2u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _2003 = _2002 * _2002;
        float _4232 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2004 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2005 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _1978 = (((cbLight._m0[_1986].x * 0.3183098733425140380859375) * _2004) * _2005) + _1959;
        _1980 = (((cbLight._m0[_1986].y * 0.3183098733425140380859375) * _2004) * _2005) + _1960;
        _1982 = (((cbLight._m0[_1986].z * 0.3183098733425140380859375) * _2004) * _2005) + _1961;
    }
    bool _1985 = _1965.y == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1985)
    {
        _2023 = _1978;
        _2025 = _1980;
        _2027 = _1982;
    }
    else
    {
        uint _2196 = _1891 + 7u;
        float _2212 = (dot(vec3(cbLight._m0[_1891 + 3u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _2213 = _2212 * _2212;
        float _4248 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2214 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2215 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2023 = (((cbLight._m0[_2196].x * 0.3183098733425140380859375) * _2214) * _2215) + _1978;
        _2025 = (((cbLight._m0[_2196].y * 0.3183098733425140380859375) * _2214) * _2215) + _1980;
        _2027 = (((cbLight._m0[_2196].z * 0.3183098733425140380859375) * _2214) * _2215) + _1982;
    }
    uint _2030 = _1891 + 8u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _618) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1891].x + _696;
    float _2046 = cbLight._m0[_1891].y + _697;
    float _2047 = cbLight._m0[_1891].z + _698;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_1891].xyz));
    float _4264 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2059 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2060 = dot(vec3(_614, _615, _616), vec3(_2052, _2053, _2054));
    float _4286 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2052, _2053, _2054));
    float _4297 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2044 * _2044;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2080 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
    float _2081 = 0.959999978542327880859375 - _778;
    float _2083 = 0.959999978542327880859375 - _779;
    float _2084 = 0.959999978542327880859375 - _780;
    float _2091 = 1.0 - _2044;
    float _2102 = (0.5 / (((_2059 * ((_2058 * _2091) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2091) + _2044) * _2058))) * _2058;
    float _4308 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2104 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    uint _2118 = _1891 + 9u;
    float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _618) * 0.949999988079071044921875);
    float _2130 = _2129 * _2129;
    float _2131 = cbLight._m0[_1931].x + _696;
    float _2132 = cbLight._m0[_1931].y + _697;
    float _2133 = cbLight._m0[_1931].z + _698;
    float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
    float _2138 = _2137 * _2131;
    float _2139 = _2137 * _2132;
    float _2140 = _2137 * _2133;
    float _2141 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_1931].xyz));
    float _4319 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2145 = dot(vec3(_614, _615, _616), vec3(_2138, _2139, _2140));
    float _4330 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_2138, _2139, _2140));
    float _4341 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2130 * _2130;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2164 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
    float _2171 = 1.0 - _2130;
    float _2181 = (0.5 / (((_2059 * ((_2144 * _2171) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2171) + _2130) * _2144))) * _2144;
    float _4352 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    float _2193 = (((((_2164 * _2081) + _781) * cbLight._m0[_2118].x) * _2183) * _1914) + ((((cbLight._m0[_2030].x * _1883) * ((_2080 * _2081) + _781)) * _2104) * _1927);
    float _2194 = (((((_2164 * _2083) + _783) * cbLight._m0[_2118].y) * _2183) * _1914) + ((((cbLight._m0[_2030].y * _1884) * ((_2080 * _2083) + _783)) * _2104) * _1927);
    float _2195 = (((((_2164 * _2084) + _784) * cbLight._m0[_2118].z) * _2183) * _1914) + ((((cbLight._m0[_2030].z * _1885) * ((_2080 * _2084) + _784)) * _2104) * _1927);
    float _2257;
    float _2259;
    float _2261;
    if (_1967)
    {
        _2257 = _2193;
        _2259 = _2194;
        _2261 = _2195;
    }
    else
    {
        uint _2263 = _1891 + 2u;
        uint _2267 = _1891 + 10u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _618) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _696;
        float _2284 = cbLight._m0[_2263].y + _697;
        float _2285 = cbLight._m0[_2263].z + _698;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2263].xyz));
        float _4363 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2297 = dot(vec3(_614, _615, _616), vec3(_2290, _2291, _2292));
        float _4374 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4385 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
        float _2323 = 1.0 - _2282;
        float _2333 = (0.5 / (((_2059 * ((_2296 * _2323) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2323) + _2282) * _2296))) * _2296;
        float _4396 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2257 = (((((_2316 * _2081) + _781) * cbLight._m0[_2267].x) * _2335) * _2336) + _2193;
        _2259 = (((((_2316 * _2083) + _783) * cbLight._m0[_2267].y) * _2335) * _2336) + _2194;
        _2261 = (((((_2316 * _2084) + _784) * cbLight._m0[_2267].z) * _2335) * _2336) + _2195;
    }
    float _2371;
    float _2373;
    float _2375;
    if (_1985)
    {
        _2371 = _2257;
        _2373 = _2259;
        _2375 = _2261;
    }
    else
    {
        uint _2382 = _1891 + 3u;
        uint _2386 = _1891 + 11u;
        float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _618) * 0.949999988079071044921875);
        float _2401 = _2400 * _2400;
        float _2402 = cbLight._m0[_2382].x + _696;
        float _2403 = cbLight._m0[_2382].y + _697;
        float _2404 = cbLight._m0[_2382].z + _698;
        float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
        float _2409 = _2408 * _2402;
        float _2410 = _2408 * _2403;
        float _2411 = _2408 * _2404;
        float _2412 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2382].xyz));
        float _4412 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2416 = dot(vec3(_614, _615, _616), vec3(_2409, _2410, _2411));
        float _4423 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2420 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2409, _2410, _2411));
        float _4434 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2424 = _2401 * _2401;
        float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
        float _2435 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
        float _2442 = 1.0 - _2401;
        float _2452 = (0.5 / (((_2059 * ((_2415 * _2442) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2442) + _2401) * _2415))) * _2415;
        float _4445 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2454 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
        float _2455 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2371 = (((((_2435 * _2081) + _781) * cbLight._m0[_2386].x) * _2454) * _2455) + _2257;
        _2373 = (((((_2435 * _2083) + _783) * cbLight._m0[_2386].y) * _2454) * _2455) + _2259;
        _2375 = (((((_2435 * _2084) + _784) * cbLight._m0[_2386].z) * _2454) * _2455) + _2261;
    }
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    if (_1889.y == 0u)
    {
        float _2530 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2531 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2530;
        float _2532 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2530;
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2530;
        uvec4 _2545 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2546 = _2545.x;
        uint _2557 = uint((float(_2545.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2546))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2546)));
        float _2567 = (log2(_2533 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2568 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        uint _2571 = uint(isnan(14.0) ? _2568 : (isnan(_2568) ? 14.0 : min(_2568, 14.0)));
        uvec4 _2576 = texelFetch(g_lightClusterGridBuffer, int(((_2571 << 2u) + (_2557 << 6u)) >> 2u));
        uint _2577 = _2576.x;
        uint _2578 = _2545.z;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        if (((((1u << ((_2578 >> 4u) & 15u)) + 4294967295u) & _2577) == 0u) || ((_2578 & 240u) == 0u))
        {
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
        }
        else
        {
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            uint _2837 = 0u;
            uint _2846;
            bool _2847;
            for (;;)
            {
                _2846 = texelFetch(g_lightClassification, int((((_2571 << 5u) + (_2557 << 9u)) + (_2837 << 2u)) >> 2u)).x;
                _2847 = _2846 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2847)
                {
                    frontier_phi_68_pred = _2833;
                    frontier_phi_68_pred_1 = _2836;
                    frontier_phi_68_pred_2 = _2835;
                    frontier_phi_68_pred_3 = _2834;
                    frontier_phi_68_pred_4 = _2832;
                    frontier_phi_68_pred_5 = _2831;
                }
                else
                {
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    uint _2982;
                    _2976 = _2831;
                    _2977 = _2832;
                    _2978 = _2833;
                    _2979 = _2834;
                    _2980 = _2835;
                    _2981 = _2836;
                    _2982 = _2846;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    for (;;)
                    {
                        uint _2986 = uint(findLSB(_2982)) + (_2837 << 5u);
                        uint _2983 = (_2982 + 4294967295u) & _2982;
                        uint _2988 = _2986 * 48u;
                        vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 3u)).x));
                        uint _3008 = (_2986 * 48u) + 4u;
                        vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 3u)).x));
                        uint _3027 = (_2986 * 48u) + 8u;
                        vec3 _3038 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x));
                        float _3042 = _3002.x - _2531;
                        float _3043 = _3002.y - _2532;
                        float _3044 = _3002.z - _2533;
                        float _3045 = dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044));
                        float _3048 = inversesqrt(_3045);
                        float _3049 = _3048 * _3042;
                        float _3050 = _3048 * _3043;
                        float _3051 = _3048 * _3044;
                        float _3052 = dot(vec3(_737, _740, _743), vec3(_3049, _3050, _3051));
                        float _3057 = 1.0 - (_3045 * _3002.w);
                        float _4471 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3058 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3059 = sqrt(_3045) * _3021.w;
                        float _3062 = 1.39999997615814208984375 / (_3059 + 1.39999997615814208984375);
                        float _3063 = _3062 * _3062;
                        float _3066 = ((1.0 - _3063) * _3052) + _3063;
                        float _3069 = _3059 * _3059;
                        float _3073 = ((isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))) * _3058) / ((_3069 * 0.699999988079071044921875) + 1.0);
                        float _3077 = (-0.0) - _2531;
                        float _3078 = (-0.0) - _2532;
                        float _3079 = (-0.0) - _2533;
                        float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                        float _3084 = _3083 * _3077;
                        float _3085 = _3083 * _3078;
                        float _3086 = _3083 * _3079;
                        float _3094 = exp2(log2(1.0 / ((_3069 * 3.5) + 5.0)) * 0.25);
                        float _3095 = 1.0 - _812;
                        float _3102 = sqrt(1.0 - ((1.0 - (_3095 * _3095)) * (1.0 - (_3094 * _3094))));
                        float _3103 = _3102 * _3102;
                        float _3104 = _3103 * _3103;
                        float _3105 = _3084 + _3049;
                        float _3106 = _3085 + _3050;
                        float _3107 = _3086 + _3051;
                        float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                        float _3115 = dot(vec3(_737, _740, _743), vec3(_3084, _3085, _3086));
                        float _4487 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3119 = dot(vec3(_737, _740, _743), vec3(_3111 * _3105, _3111 * _3106, _3111 * _3107));
                        float _4498 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3122 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3126 = ((_3122 * _3122) * (_3104 + (-1.0))) + 1.0;
                        float _3127 = _3062 * _3103;
                        float _3128 = _3127 * _3127;
                        float _3131 = ((1.0 - _3128) * _3052) + _3128;
                        float _4509 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3132 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3133 = 1.0 - _3103;
                        float _3143 = (0.5 / (((_3132 * ((_3118 * _3133) + _3103)) + 9.9999999392252902907785028219223e-09) + (((_3132 * _3133) + _3103) * _3118))) * _3132;
                        float _4520 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3154 = (((_3104 * 3.1415927410125732421875) * (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) / ((_3126 * _3126) * ((_3069 * 2.1991131305694580078125) + 3.141590118408203125))) * _3058;
                        _2906 = (_3073 * _3021.x) + _2979;
                        _2907 = (_3073 * _3021.y) + _2980;
                        _2908 = (_3073 * _3021.z) + _2981;
                        _2903 = (_3154 * _3038.x) + _2976;
                        _2904 = (_3154 * _3038.y) + _2977;
                        _2905 = (_3154 * _3038.z) + _2978;
                        if (_2983 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2976 = _2903;
                            _2977 = _2904;
                            _2978 = _2905;
                            _2979 = _2906;
                            _2980 = _2907;
                            _2981 = _2908;
                            _2982 = _2983;
                        }
                    }
                    frontier_phi_68_pred = _2905;
                    frontier_phi_68_pred_1 = _2908;
                    frontier_phi_68_pred_2 = _2907;
                    frontier_phi_68_pred_3 = _2906;
                    frontier_phi_68_pred_4 = _2904;
                    frontier_phi_68_pred_5 = _2903;
                }
                _2684 = frontier_phi_68_pred;
                _2690 = frontier_phi_68_pred_1;
                _2688 = frontier_phi_68_pred_2;
                _2686 = frontier_phi_68_pred_3;
                _2682 = frontier_phi_68_pred_4;
                _2680 = frontier_phi_68_pred_5;
                uint _2838 = _2837 + 1u;
                if (_2838 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2831 = _2680;
                    _2832 = _2682;
                    _2833 = _2684;
                    _2834 = _2686;
                    _2835 = _2688;
                    _2836 = _2690;
                    _2837 = _2838;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
        }
        uvec4 _2693 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2694 = _2693.z;
        uint _2696 = (_2694 >> 8u) & 15u;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        if (((4294967295u << _2696) & _2577) == 0u)
        {
            _2799 = _2679;
            _2801 = _2681;
            _2803 = _2683;
            _2805 = _2685;
            _2807 = _2687;
            _2809 = _2689;
        }
        else
        {
            float _2824 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
            float _2825 = _2824 * _2531;
            float _2826 = _2824 * _2532;
            float _2827 = _2824 * _2533;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2696 < ((_2694 >> 12u) & 15u))
            {
                float _2800;
                float _2802;
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2959 = _2679;
                float _2960 = _2681;
                float _2961 = _2683;
                float _2962 = _2685;
                float _2963 = _2687;
                float _2964 = _2689;
                uint _2965 = _2696;
                uint _2974;
                bool _2975;
                for (;;)
                {
                    _2974 = texelFetch(g_lightClassification, int((((_2571 << 5u) + (_2557 << 9u)) + (_2965 << 2u)) >> 2u)).x;
                    _2975 = _2974 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2975)
                    {
                        frontier_phi_79_pred = _2964;
                        frontier_phi_79_pred_1 = _2963;
                        frontier_phi_79_pred_2 = _2962;
                        frontier_phi_79_pred_3 = _2961;
                        frontier_phi_79_pred_4 = _2960;
                        frontier_phi_79_pred_5 = _2959;
                    }
                    else
                    {
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3181 = _2959;
                        float _3182 = _2960;
                        float _3183 = _2961;
                        float _3184 = _2962;
                        float _3185 = _2963;
                        float _3186 = _2964;
                        uint _3187 = _2974;
                        uint _3188;
                        vec4 _3213;
                        float _3214;
                        vec4 _3229;
                        vec3 _3241;
                        vec4 _3257;
                        vec4 _3273;
                        float _3320;
                        bool _3321;
                        for (;;)
                        {
                            uint _3198 = ((_2965 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3187));
                            _3188 = (_3187 + 4294967295u) & _3187;
                            uint _3200 = _3198 * 40u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3214 = _3213.w;
                            uint _3216 = (_3198 * 40u) + 4u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3231 = (_3198 * 40u) + 8u;
                            _3241 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x));
                            uint _3244 = (_3198 * 40u) + 16u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3260 = (_3198 * 40u) + 20u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3276 = (_3198 * 40u) + 24u;
                            vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3295 = (_3198 * 40u) + 28u;
                            vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3320 = fma(_2533, _3308.z, fma(_2532, _3308.y, _3308.x * _2531)) + _3308.w;
                            _3321 = !((fma(_2533, _3289.z, fma(_2532, _3289.y, _3289.x * _2531)) + _3289.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3321)
                            {
                                float _3348 = _3213.x - _2531;
                                float _3349 = _3213.y - _2532;
                                float _3350 = _3213.z - _2533;
                                float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                                float _3354 = inversesqrt(_3351);
                                float _3355 = _3354 * _3348;
                                float _3356 = _3354 * _3349;
                                float _3357 = _3354 * _3350;
                                float _3361 = 1.0 - (_3351 / (_3214 * _3214));
                                float _4531 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3366 = sqrt(_3351) * _3229.w;
                                float _3368 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                                float _3369 = _3368 * _3368;
                                float _3372 = ((1.0 - _3369) * dot(vec3(_3355, _3356, _3357), vec3(_737, _740, _743))) + _3369;
                                float _3375 = _3366 * _3366;
                                float _3379 = (fma(_2533, _3257.z, fma(_2532, _3257.y, _3257.x * _2531)) + _3257.w) / _3320;
                                float _3380 = (fma(_2533, _3273.z, fma(_2532, _3273.y, _3273.x * _2531)) + _3273.w) / _3320;
                                float _3384 = 1.0 - dot(vec2(_3379, _3380), vec2(_3379, _3380));
                                float _4547 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3385 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3386 = _3385 * (((isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))) * _3362) / ((_3375 * 0.699999988079071044921875) + 1.0));
                                float _3398 = exp2(log2(1.0 / ((_3375 * 3.5) + 5.0)) * 0.25);
                                float _3399 = 1.0 - _812;
                                float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                                float _3407 = _3406 * _3406;
                                float _3408 = _3407 * _3407;
                                float _3409 = _3355 - _2825;
                                float _3410 = _3356 - _2826;
                                float _3411 = _3357 - _2827;
                                float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                                float _3419 = dot(vec3(_737, _740, _743), vec3((-0.0) - _2825, (-0.0) - _2826, (-0.0) - _2827));
                                float _4558 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3422 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3423 = dot(vec3(_737, _740, _743), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                                float _4569 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                                float _3431 = _3368 * _3407;
                                float _3432 = _3431 * _3431;
                                float _3438 = ((1.0 - _3432) * dot(vec3(_737, _740, _743), vec3(_3355, _3356, _3357))) + _3432;
                                float _4580 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3440 = 1.0 - _3407;
                                float _3450 = (0.5 / (((_3439 * ((_3422 * _3440) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3407) * _3422))) * _3439;
                                float _4591 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3460 = (_3385 * _3362) * (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3430 * _3430) * ((_3375 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3386 * _3229.z;
                                frontier_phi_85_pred_1 = _3386 * _3229.y;
                                frontier_phi_85_pred_2 = _3386 * _3229.x;
                                frontier_phi_85_pred_3 = _3460 * _3241.z;
                                frontier_phi_85_pred_4 = _3460 * _3241.y;
                                frontier_phi_85_pred_5 = _3460 * _3241.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3469 = frontier_phi_85_pred;
                            _3468 = frontier_phi_85_pred_1;
                            _3467 = frontier_phi_85_pred_2;
                            _3466 = frontier_phi_85_pred_3;
                            _3465 = frontier_phi_85_pred_4;
                            _3464 = frontier_phi_85_pred_5;
                            _3171 = _3467 + _3184;
                            _3172 = _3468 + _3185;
                            _3173 = _3469 + _3186;
                            _3168 = _3464 + _3181;
                            _3169 = _3465 + _3182;
                            _3170 = _3466 + _3183;
                            if (_3188 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3188;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3173;
                        frontier_phi_79_pred_1 = _3172;
                        frontier_phi_79_pred_2 = _3171;
                        frontier_phi_79_pred_3 = _3170;
                        frontier_phi_79_pred_4 = _3169;
                        frontier_phi_79_pred_5 = _3168;
                    }
                    _2810 = frontier_phi_79_pred;
                    _2808 = frontier_phi_79_pred_1;
                    _2806 = frontier_phi_79_pred_2;
                    _2804 = frontier_phi_79_pred_3;
                    _2802 = frontier_phi_79_pred_4;
                    _2800 = frontier_phi_79_pred_5;
                    uint _2966 = _2965 + 1u;
                    if (_2966 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2959 = _2800;
                        _2960 = _2802;
                        _2961 = _2804;
                        _2962 = _2806;
                        _2963 = _2808;
                        _2964 = _2810;
                        _2965 = _2966;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2806;
                frontier_phi_60_61_ladder_1 = _2810;
                frontier_phi_60_61_ladder_2 = _2808;
                frontier_phi_60_61_ladder_3 = _2804;
                frontier_phi_60_61_ladder_4 = _2802;
                frontier_phi_60_61_ladder_5 = _2800;
            }
            else
            {
                frontier_phi_60_61_ladder = _2685;
                frontier_phi_60_61_ladder_1 = _2689;
                frontier_phi_60_61_ladder_2 = _2687;
                frontier_phi_60_61_ladder_3 = _2683;
                frontier_phi_60_61_ladder_4 = _2681;
                frontier_phi_60_61_ladder_5 = _2679;
            }
            _2799 = frontier_phi_60_61_ladder_5;
            _2801 = frontier_phi_60_61_ladder_4;
            _2803 = frontier_phi_60_61_ladder_3;
            _2805 = frontier_phi_60_61_ladder;
            _2807 = frontier_phi_60_61_ladder_2;
            _2809 = frontier_phi_60_61_ladder_1;
        }
        float _2814 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
        _2589 = (_2814 * _2805) + _2023;
        _2591 = (_2814 * _2807) + _2025;
        _2593 = (_2814 * _2809) + _2027;
        _2595 = ((_2799 * _781) * _2814) + _2371;
        _2597 = ((_2801 * _783) * _2814) + _2373;
        _2599 = ((_2803 * _784) * _2814) + _2375;
    }
    else
    {
        _2589 = _2023;
        _2591 = _2025;
        _2593 = _2027;
        _2595 = _2371;
        _2597 = _2373;
        _2599 = _2375;
    }
    float _4607 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4618 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4629 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4640 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _2617 = ((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2589 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _796))) + ((_2595 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1638)) * cbPerFrame._m0[3u].x);
    float _2618 = ((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2591 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _796))) + ((_2597 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1638)) * cbPerFrame._m0[3u].x);
    float _2619 = ((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2593 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _796))) + ((_2599 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1638)) * cbPerFrame._m0[3u].x);
    float _2624 = cbInstanceData._m0[_756 + 6u].w * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)));
    float _2629 = _717 / cbSceneParam._m0[86u].x;
    float _2630 = _718 / cbSceneParam._m0[86u].y;
    vec4 _2644 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2629, _2630, (log2((isnan(cbSceneParam._m0[77u].w) ? _638 : (isnan(_638) ? cbSceneParam._m0[77u].w : min(_638, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2646 = _2644.x;
    float _2647 = _2644.y;
    float _2648 = _2644.z;
    float _2649 = _2644.w;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    if (_638 > cbSceneParam._m0[78u].w)
    {
        float _2704 = isnan(_638) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _638 : min(cbSceneParam._m0[80u].w, _638));
        float _2705 = _2704 / _638;
        float _2716 = _2705 * _689;
        float _2717 = _690 * _2705;
        float _2718 = (-0.0) - _2717;
        float _2719 = _2705 * _691;
        float _2721 = (cbSceneParam._m0[77u].w * _2718) / _2704;
        float _2722 = _2721 + cbSceneParam._m0[79u].w;
        float _2723 = cbSceneParam._m0[79u].w - _2717;
        float _2729 = sqrt(((_2716 * _2716) + (_2717 * _2717)) + (_2719 * _2719));
        float _2732 = (1.0 - (cbSceneParam._m0[77u].w / _2704)) * _2729;
        float _2737 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2739 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2916;
        if (abs((_2718 - _2721) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2916 = ((((_2722 > 0.0) ? exp2(_2737 * _2722) : (2.0 - exp2(_2739 * _2722))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2732;
        }
        else
        {
            float _2860 = 1.0 / cbSceneParam._m0[80u].x;
            float _2861 = isnan(_2723) ? _2722 : (isnan(_2722) ? _2723 : max(_2722, _2723));
            float _2862 = isnan(_2723) ? _2722 : (isnan(_2722) ? _2723 : min(_2722, _2723));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            float _2872 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : min(_2862, 0.0));
            _2916 = ((abs(_2729 / _2718) * cbSceneParam._m0[80u].y) * ((((_2871 - _2872) * 2.0) - ((exp2(_2737 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0)))) - exp2(_2737 * (isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0))))) * _2860)) - ((exp2(_2739 * _2871) - exp2(_2739 * _2872)) * _2860))) + (_2732 * cbSceneParam._m0[80u].z);
        }
        vec4 _2918 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2629, _2630, 1.0), 0.0);
        float _2927 = exp2((_2916 * (-1.44269502162933349609375)) * (1.0 - _2918.w));
        float _2928 = log2(_2927);
        float _2944 = log2(_2649);
        _2741 = (exp2(_2944 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2928 * cbSceneParam._m0[78u].x)) * _2918.x) / cbSceneParam._m0[78u].x)) + _2646;
        _2743 = (exp2(_2944 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2928 * cbSceneParam._m0[78u].y)) * _2918.y) / cbSceneParam._m0[78u].y)) + _2647;
        _2745 = (exp2(_2944 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2928 * cbSceneParam._m0[78u].z)) * _2918.z) / cbSceneParam._m0[78u].z)) + _2648;
        _2747 = _2927 * _2649;
    }
    else
    {
        _2741 = _2646;
        _2743 = _2647;
        _2745 = _2648;
        _2747 = _2649;
    }
    bool _2954;
    vec4 _2757;
    vec4 _2779;
    float _2781;
    float _2785;
    float _2786;
    float _2787;
    float _2788;
    bool _2798;
    for (;;)
    {
        _2757 = cbMatDynParam._m0[0u];
        float _2759 = roundEven(_2757.y);
        bool _2760 = _2759 == 3.0;
        float _2761 = log2(_2747);
        float _2768 = exp2(_2761 * cbSceneParam._m0[78u].x) * _2617;
        float _2769 = exp2(_2761 * cbSceneParam._m0[78u].y) * _2618;
        float _2770 = exp2(_2761 * cbSceneParam._m0[78u].z) * _2619;
        float _2777 = _705 + (-0.5);
        _2779 = cbMtdParam._m0[1u];
        _2781 = _2779.y * _2777;
        float _2784 = (_2759 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2785 = _2784 * (_2760 ? _2768 : (_2768 + (cbSceneParam._m0[72u].w * _2741)));
        _2786 = _2784 * (_2760 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2743)));
        _2787 = _2784 * (_2760 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2745)));
        _2788 = _2777 * 0.999000012874603271484375;
        _2798 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2798)
        {
            if ((cbInstanceData._m0[_756 + 7u].x + _2788) < 0.5)
            {
                _2954 = true;
                break;
            }
        }
        uint _2895 = _757 + uint(_2757.w);
        if ((cbInstanceData._m0[_2895].w < 1.0) && ((cbInstanceData._m0[_2895].w + _2788) < 0.5))
        {
            _2954 = true;
            break;
        }
        if ((_2781 + _386) < _2779.x)
        {
            _2954 = true;
            break;
        }
        _2954 = false;
        break;
    }
    float _3159;
    if (_2954)
    {
        discard_state = true;
        _3159 = 0.0;
    }
    else
    {
        _3159 = _2624;
    }
    SV_Target.x = _2785;
    SV_Target.y = _2786;
    SV_Target.z = _2787;
    SV_Target.w = _3159;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2624;
    discard_exit();
}


