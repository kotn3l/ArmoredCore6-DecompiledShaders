#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1155;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _210 = _209 * _202;
    float _211 = _209 * _203;
    float _212 = _209 * _204;
    float _222 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _223 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _224 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _228 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _229 = _228 * _222;
    float _230 = _228 * _223;
    float _231 = _228 * _224;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _249 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _250 = _249 * TANGENT_2.x;
    float _251 = _249 * TANGENT_2.y;
    float _252 = _249 * TANGENT_2.z;
    float _257;
    float _258;
    float _259;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _257 = (-0.0) - _236;
        _258 = (-0.0) - _237;
        _259 = (-0.0) - _238;
    }
    else
    {
        _257 = _236;
        _258 = _237;
        _259 = _238;
    }
    float _281 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[12u].y;
    float _293 = ((cbMtdParam._m0[13u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5.y - _281) + (cbMtdParam._m0[12u].w * TEXCOORD_5.y))) + 1.0;
    float _3514 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _296 = 1.0 - (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)));
    float _297 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _298 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    float _306 = ((cbMtdParam._m0[13u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.x - _281) + (cbMtdParam._m0[12u].z * TEXCOORD_5.x))) + 1.0;
    float _3535 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _308 = 1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)));
    float _309 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _310 = isnan(1.0) ? _309 : (isnan(_309) ? 1.0 : min(_309, 1.0));
    vec4 _328 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _330 = _328.x;
    float _331 = _328.y;
    float _332 = _328.z;
    float _333 = cbMtdParam._m0[11u].x * _310;
    float _335 = cbMtdParam._m0[11u].y * _310;
    float _337 = cbMtdParam._m0[11u].z * _310;
    float _357 = _308 + _296;
    float _358 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _359 = isnan(1.0) ? _358 : (isnan(_358) ? 1.0 : min(_358, 1.0));
    vec4 _377 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _382 = _377.w;
    float _383 = _377.x * cbMtdParam._m0[10u].x;
    float _384 = _377.y * cbMtdParam._m0[10u].y;
    float _385 = _377.z * cbMtdParam._m0[10u].z;
    float _400 = (_383 - (_359 * _383)) + ((((((_330 * (cbMtdParam._m0[9u].x - _333)) * _298) + (_333 * _330)) * 4.55000019073486328125) * _359) * _383);
    float _402 = (((((((_331 * (cbMtdParam._m0[9u].y - _335)) * _298) + (_335 * _331)) * 4.55000019073486328125) * _359) * _384) + _384) - (_359 * _384);
    float _404 = (((((((_332 * (cbMtdParam._m0[9u].z - _337)) * _298) + (_337 * _332)) * 4.55000019073486328125) * _359) * _385) + _385) - (_359 * _385);
    vec4 _421 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _425 = _421.z;
    float _429 = (_421.x * 2.0) + (-1.0);
    float _431 = (_421.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_429, _431), vec2(_429, _431));
    float _3566 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))));
    float _440 = fma(_437, _257, fma(_431, _250, _429 * _229));
    float _443 = fma(_437, _258, fma(_431, _251, _429 * _230));
    float _446 = fma(_437, _259, fma(_431, _252, _429 * _231));
    float _450 = inversesqrt(dot(vec3(_440, _443, _446), vec3(_440, _443, _446)));
    float _451 = _450 * _440;
    float _452 = _450 * _443;
    float _453 = _450 * _446;
    vec4 _465 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _471 = (_465.x * 2.0) + (-1.0);
    float _472 = (_465.y * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3577 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _478 = sqrt(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))));
    float _481 = fma(_478, _257, fma(_472, _250, _471 * _229));
    float _484 = fma(_478, _258, fma(_472, _251, _471 * _230));
    float _487 = fma(_478, _259, fma(_472, _252, _471 * _231));
    float _491 = inversesqrt(dot(vec3(_481, _484, _487), vec3(_481, _484, _487)));
    float _492 = _491 * _481;
    float _493 = _491 * _484;
    float _494 = _491 * _487;
    float _497 = fma(_494, _212, fma(_493, _211, _492 * _210));
    float _500 = fma(_494, _245, fma(_493, _244, _492 * _243));
    float _503 = fma(_494, _259, fma(_493, _258, _492 * _257));
    float _507 = inversesqrt(dot(vec3(_497, _500, _503), vec3(_497, _500, _503)));
    float _511 = fma(_453, _212, fma(_452, _211, _451 * _210));
    float _514 = fma(_453, _245, fma(_452, _244, _451 * _243));
    float _517 = fma(_453, _259, fma(_452, _258, _451 * _257));
    float _521 = inversesqrt(dot(vec3(_511, _514, _517), vec3(_511, _514, _517)));
    float _524 = _521 * _517;
    vec4 _537 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _543 = (_537.x * 2.0) + (-1.0);
    float _544 = (_537.y * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _3588 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _550 = sqrt(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))));
    float _553 = fma(_550, _257, fma(_544, _250, _543 * _229));
    float _556 = fma(_550, _258, fma(_544, _251, _543 * _230));
    float _559 = fma(_550, _259, fma(_544, _252, _543 * _231));
    float _563 = inversesqrt(dot(vec3(_553, _556, _559), vec3(_553, _556, _559)));
    float _564 = _563 * _553;
    float _565 = _563 * _556;
    float _566 = _563 * _559;
    float _569 = fma(_566, _212, fma(_565, _211, _564 * _210));
    float _572 = fma(_566, _245, fma(_565, _244, _564 * _243));
    float _575 = fma(_566, _259, fma(_565, _258, _564 * _257));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    float _594 = ((_521 * _511) + (((_497 * _298) * _507) * cbMtdParam._m0[13u].w)) + (((_569 * _310) * _579) * cbMtdParam._m0[13u].z);
    float _596 = ((_521 * _514) + (((_500 * _298) * _507) * cbMtdParam._m0[13u].w)) + (((_572 * _310) * _579) * cbMtdParam._m0[13u].z);
    float _599 = fma(_524, _257, fma(_596, _243, _594 * _210));
    float _602 = fma(_524, _258, fma(_596, _244, _594 * _211));
    float _605 = fma(_524, _259, fma(_596, _245, _594 * _212));
    float _609 = inversesqrt(dot(vec3(_599, _602, _605), vec3(_599, _602, _605)));
    float _610 = _609 * _599;
    float _611 = _609 * _602;
    float _612 = _609 * _605;
    float _3599 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _613 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _614 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3632 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3643 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3654 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _618 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _634 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _685 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _675);
    float _686 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _675);
    float _687 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _675);
    float _691 = inversesqrt(dot(vec3(_685, _686, _687), vec3(_685, _686, _687)));
    float _692 = _685 * _691;
    float _693 = _686 * _691;
    float _694 = _687 * _691;
    float _700 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _701 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_612, cbSceneParam._m0[5u].z, fma(_611, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _610));
    float _724 = fma(_612, cbSceneParam._m0[6u].z, fma(_611, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _610));
    float _727 = fma(_612, cbSceneParam._m0[7u].z, fma(_611, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _610));
    uint _740 = uint(roundEven(NORMAL.w)) * 13u;
    uint _742 = (_740 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _748 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_742].x;
    float _749 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_742].y;
    float _750 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_742].z;
    float _3665 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _754 = 1.0 - _618;
    float _755 = _751 * _754;
    float _756 = _752 * _754;
    float _757 = _753 * _754;
    float _762 = (_751 + (-0.039999999105930328369140625)) * _618;
    float _763 = (_752 + (-0.039999999105930328369140625)) * _618;
    float _764 = (_753 + (-0.039999999105930328369140625)) * _618;
    float _765 = _762 + 0.039999999105930328369140625;
    float _767 = _763 + 0.039999999105930328369140625;
    float _768 = _764 + 0.039999999105930328369140625;
    vec4 _777 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _700, cbSceneParam._m0[86u].y * _701));
    float _780 = _777.x * TEXCOORD_5.z;
    float _781 = dot(vec3(_610, _611, _612), vec3(_692, _693, _694));
    float _784 = _781 * 2.0;
    float _788 = (_784 * _610) - _692;
    float _789 = (_784 * _611) - _693;
    float _790 = (_784 * _612) - _694;
    float _794 = abs(dot(vec3(_692, _693, _694), vec3(_610, _611, _612)));
    float _3698 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _796 = sqrt(_614);
    float _809 = exp2((_796 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_796 * 3.0));
    float _815 = (1.0 - _809) * ((_796 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _816 = _809 * _796;
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1154;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _879 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _883 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _887 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _912 = _844 + _610;
        float _913 = _848 + _611;
        float _914 = _852 + _612;
        float _924 = fma(_914, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912)) - _879;
        float _925 = fma(_914, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912)) - _883;
        float _926 = fma(_914, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912)) - _887;
        float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
        float _943 = ((_930 * _924) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_879 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_930 * _925) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_883 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_930 * _926) / cbModelParam._m0[34u].z) + ((((((_887 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        float _982 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_948.x + (-0.5));
        float _984 = _982 * (_948.y + (-0.5));
        float _985 = _982 * (_948.z + (-0.5));
        float _992 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_955.x + (-0.5));
        float _994 = _992 * (_955.y + (-0.5));
        float _995 = _992 * (_955.z + (-0.5));
        float _1002 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_962.x + (-0.5));
        float _1004 = _1002 * (_962.y + (-0.5));
        float _1005 = _1002 * (_962.z + (-0.5));
        float _1012 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_969.x + (-0.5));
        float _1014 = _1012 * (_969.y + (-0.5));
        float _1015 = _1012 * (_969.z + (-0.5));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = _983 * 0.5;
        float _1020 = _993 * 0.5;
        float _1021 = _1003 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1036 = (dot(vec3(_610, _611, _612), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1046 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3746 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1048 + 1.0))) + _1053) * _1016;
        float _1063 = _984 * 0.5;
        float _1064 = _994 * 0.5;
        float _1065 = _1004 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_610, _611, _612), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3779 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1090 + 1.0))) + _1095) * _1017;
        float _1105 = _985 * 0.5;
        float _1106 = _995 * 0.5;
        float _1107 = _1005 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_610, _611, _612), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3812 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1132 + 1.0))) + _1137) * _1018;
        _1154 = _985;
        _1156 = _984;
        _1157 = _983;
        _1158 = _995;
        _1159 = _994;
        _1160 = _993;
        _1161 = _1005;
        _1162 = _1004;
        _1163 = _1003;
        _1164 = _1018;
        _1165 = _1017;
        _1166 = _1016;
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _1155;
        _1156 = _1155;
        _1157 = _1155;
        _1158 = _1155;
        _1159 = _1155;
        _1160 = _1155;
        _1161 = _1155;
        _1162 = _1155;
        _1163 = _1155;
        _1164 = _1155;
        _1165 = _1155;
        _1166 = _1155;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1195 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1199 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1203 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1226 = _844 + _610;
        float _1227 = _848 + _611;
        float _1228 = _852 + _612;
        float _1238 = fma(_1228, cbModelParam._m0[30u].z, fma(_1227, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1226)) - _1195;
        float _1239 = fma(_1228, cbModelParam._m0[31u].z, fma(_1227, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1226)) - _1199;
        float _1240 = fma(_1228, cbModelParam._m0[32u].z, fma(_1227, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1226)) - _1203;
        float _1244 = inversesqrt(dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240)));
        float _1257 = ((_1244 * _1238) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1195 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1244 * _1239) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1199 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1244 * _1240) / cbModelParam._m0[35u].z) + ((((((_1203 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        float _1294 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1261.x + (-0.5));
        float _1296 = _1294 * (_1261.y + (-0.5));
        float _1297 = _1294 * (_1261.z + (-0.5));
        float _1304 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1268.x + (-0.5));
        float _1306 = _1304 * (_1268.y + (-0.5));
        float _1307 = _1304 * (_1268.z + (-0.5));
        float _1314 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1275.x + (-0.5));
        float _1316 = _1314 * (_1275.y + (-0.5));
        float _1317 = _1314 * (_1275.z + (-0.5));
        float _1324 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1282.x + (-0.5));
        float _1326 = _1324 * (_1282.y + (-0.5));
        float _1327 = _1324 * (_1282.z + (-0.5));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = _1295 * 0.5;
        float _1332 = _1305 * 0.5;
        float _1333 = _1315 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_610, _611, _612), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3875 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1358 + 1.0))) + _1363) * _1328;
        float _1373 = _1296 * 0.5;
        float _1374 = _1306 * 0.5;
        float _1375 = _1316 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_610, _611, _612), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _3908 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1400 + 1.0))) + _1405) * _1329;
        float _1415 = _1297 * 0.5;
        float _1416 = _1307 * 0.5;
        float _1417 = _1317 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_610, _611, _612), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3941 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1442 + 1.0))) + _1447) * _1330;
        _1464 = _1297;
        _1465 = _1296;
        _1466 = _1295;
        _1467 = _1307;
        _1468 = _1306;
        _1469 = _1305;
        _1470 = _1317;
        _1471 = _1316;
        _1472 = _1315;
        _1473 = _1330;
        _1474 = _1329;
        _1475 = _1328;
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
    }
    else
    {
        _1464 = _1155;
        _1465 = _1155;
        _1466 = _1155;
        _1467 = _1155;
        _1468 = _1155;
        _1469 = _1155;
        _1470 = _1155;
        _1471 = _1155;
        _1472 = _1155;
        _1473 = _1155;
        _1474 = _1155;
        _1475 = _1155;
        _1476 = 0.0;
        _1477 = 0.0;
        _1478 = 0.0;
    }
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1167)) + _1167;
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1168)) + _1168;
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1169)) + _1169;
    float _1511 = fma(_1490, cbSceneParam._m0[89u].z, fma(_1489, cbSceneParam._m0[89u].y, _1488 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1490, cbSceneParam._m0[90u].z, fma(_1489, cbSceneParam._m0[90u].y, _1488 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1490, cbSceneParam._m0[91u].z, fma(_1489, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1488));
    float _1532 = _788 * 0.5;
    float _1533 = _789 * 0.5;
    float _1534 = _790 * 0.5;
    float _1535 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1538 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1541 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1575;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1548 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1154, _1158, _1161, _1164));
        float _1552 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1556 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1563 = dot(vec4(cbModelParam._m0[39u]), vec4(_1532, _1533, _1534, 1.0));
        _1575 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1563) ? 0.0 : (isnan(0.0) ? _1563 : max(0.0, _1563))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1575 = 1.0;
    }
    float _1586;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1577 = dot(vec4(cbModelParam._m0[40u]), vec4(_1532, _1533, _1534, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1577) ? 0.0 : (isnan(0.0) ? _1577 : max(0.0, _1577))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1590 = (_1586 * cbModelParam._m0[1u].x) + (_1575 * (1.0 - cbModelParam._m0[1u].x));
    float _1600 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _614);
    float _1601 = isnan(_1600) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1600 : min(cbModelParam._m0[25u].z, _1600));
    float _1681;
    float _1683;
    float _1685;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1648 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1652 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1656 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1659 = fma(_790, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788));
        float _1662 = fma(_790, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788));
        float _1665 = fma(_790, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788));
        float _1693;
        if (_1659 > 0.0)
        {
            _1693 = abs((1.0 - _1648) / _1659);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1648 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1693 = frontier_phi_16_14_ladder;
        }
        float _1920;
        if (_1662 > 0.0)
        {
            _1920 = abs((1.0 - _1652) / _1662);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1652 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1920 = frontier_phi_25_21_ladder;
        }
        float _2177;
        if (_1665 > 0.0)
        {
            _2177 = abs((1.0 - _1656) / _1665);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1656 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2177 = frontier_phi_37_32_ladder;
        }
        float _2179 = isnan(_1920) ? _1693 : (isnan(_1693) ? _1920 : min(_1693, _1920));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1659) + _1648;
        float _2185 = (_2180 * _1662) + _1652;
        float _2186 = (_2180 * _1665) + _1656;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2187;
        float _2191 = _2187 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 > _2191) || ((_2185 < _2189) || ((_2184 < _2189) || (_2184 > _2191))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2186, cbModelParam._m0[9u].z, fma(_2185, cbModelParam._m0[9u].y, _2184 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2186, cbModelParam._m0[10u].z, fma(_2185, cbModelParam._m0[10u].y, _2184 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2186, cbModelParam._m0[11u].z, fma(_2185, cbModelParam._m0[11u].y, _2184 * cbModelParam._m0[11u].x))), _1601);
            frontier_phi_15_37_ladder = _2314.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2314.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2314.x * cbModelParam._m0[1u].y;
        }
        _1681 = frontier_phi_15_37_ladder_2;
        _1683 = frontier_phi_15_37_ladder_1;
        _1685 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1669 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_788, _789, _790), _1601);
        _1681 = _1669.x * cbModelParam._m0[1u].y;
        _1683 = _1669.y * cbModelParam._m0[1u].y;
        _1685 = _1669.z * cbModelParam._m0[1u].y;
    }
    float _1689 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _614);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1689 : min(cbModelParam._m0[25u].w, _1689));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1747 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1751 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1755 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1758 = fma(_790, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788));
        float _1761 = fma(_790, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788));
        float _1764 = fma(_790, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788));
        float _1925;
        if (_1758 > 0.0)
        {
            _1925 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1925 = frontier_phi_27_23_ladder;
        }
        float _2204;
        if (_1761 > 0.0)
        {
            _2204 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2204 = frontier_phi_39_34_ladder;
        }
        float _2417;
        if (_1764 > 0.0)
        {
            _2417 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2417 = frontier_phi_48_45_ladder;
        }
        float _2419 = isnan(_2204) ? _1925 : (isnan(_1925) ? _2204 : min(_1925, _2204));
        float _2420 = isnan(_2417) ? _2419 : (isnan(_2419) ? _2417 : min(_2419, _2417));
        float _2424 = (_2420 * _1758) + _1747;
        float _2425 = (_2420 * _1761) + _1751;
        float _2426 = (_2420 * _1764) + _1755;
        float _2427 = _2420 * 9.9999997473787516355514526367188e-05;
        float _2428 = (-1.0) - _2427;
        float _2430 = _2427 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2426 > _2430) || ((_2426 < _2428) || ((_2425 > _2430) || ((_2425 < _2428) || ((_2424 < _2428) || (_2424 > _2430))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2626 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2426, cbModelParam._m0[17u].z, fma(_2425, cbModelParam._m0[17u].y, _2424 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2426, cbModelParam._m0[18u].z, fma(_2425, cbModelParam._m0[18u].y, _2424 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2426, cbModelParam._m0[19u].z, fma(_2425, cbModelParam._m0[19u].y, _2424 * cbModelParam._m0[19u].x))), _1690);
            frontier_phi_24_48_ladder = _2626.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2626.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2626.x * cbModelParam._m0[1u].z;
        }
        _1783 = frontier_phi_24_48_ladder_2;
        _1785 = frontier_phi_24_48_ladder_1;
        _1787 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_788, _789, _790), _1690);
        _1783 = _1767.x * cbModelParam._m0[1u].z;
        _1785 = _1767.y * cbModelParam._m0[1u].z;
        _1787 = _1767.z * cbModelParam._m0[1u].z;
    }
    float _1800 = (((_815 * _765) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1783 - _1681)) + _1681);
    float _1802 = (((_815 * _767) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1785 - _1683)) + _1683);
    float _1804 = (((_815 * _768) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1787 - _1685)) + _1685);
    float _1807 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1802, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1802, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1802, cbSceneParam._m0[91u].y, _1800 * cbSceneParam._m0[91u].x));
    vec4 _1821 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_700, _701));
    float _1823 = _1821.w;
    float _1835 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1823);
    float _1836 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1823);
    float _1837 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1823);
    uvec4 _1841 = floatBitsToUint(cbInstanceData._m0[_740 + 5u]);
    uint _1843 = _1841.x * 14u;
    uint _1844 = _1843 + 13u;
    float _1851 = _780 + (-1.0);
    float _1856 = (cbLight._m0[_1844].x * _1851) + 1.0;
    float _1857 = (cbLight._m0[_1844].y * _1851) + 1.0;
    float _1858 = (cbLight._m0[_1844].z * _1851) + 1.0;
    float _1859 = (cbLight._m0[_1844].w * _1851) + 1.0;
    uint _1860 = _1843 + 5u;
    float _1866 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1870 = _1843 + 4u;
    float _1879 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
    uint _1883 = _1843 | 1u;
    float _1894 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_610, _611, _612));
    float _1897 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_610, _611, _612));
    float _4077 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _4088 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1902 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.3183098733425140380859375;
    float _1904 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * 0.3183098733425140380859375;
    float _1911 = ((cbLight._m0[_1860].x * _1866) * _1904) + (((cbLight._m0[_1870].x * _1835) * _1879) * _1902);
    float _1912 = ((_1866 * cbLight._m0[_1860].y) * _1904) + (((cbLight._m0[_1870].y * _1836) * _1879) * _1902);
    float _1913 = ((_1866 * cbLight._m0[_1860].z) * _1904) + (((cbLight._m0[_1870].z * _1837) * _1879) * _1902);
    uvec4 _1917 = floatBitsToUint(cbLight._m0[_1843 + 12u]);
    bool _1919 = _1917.x == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1919)
    {
        _1930 = _1911;
        _1932 = _1912;
        _1934 = _1913;
    }
    else
    {
        uint _1938 = _1843 + 6u;
        float _1954 = (dot(vec3(cbLight._m0[_1843 + 2u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _1955 = _1954 * _1954;
        float _4099 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1957 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _1930 = (((cbLight._m0[_1938].x * 0.3183098733425140380859375) * _1956) * _1957) + _1911;
        _1932 = (((cbLight._m0[_1938].y * 0.3183098733425140380859375) * _1956) * _1957) + _1912;
        _1934 = (((cbLight._m0[_1938].z * 0.3183098733425140380859375) * _1956) * _1957) + _1913;
    }
    bool _1937 = _1917.y == 0u;
    float _1975;
    float _1977;
    float _1979;
    if (_1937)
    {
        _1975 = _1930;
        _1977 = _1932;
        _1979 = _1934;
    }
    else
    {
        uint _2148 = _1843 + 7u;
        float _2164 = (dot(vec3(cbLight._m0[_1843 + 3u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _2165 = _2164 * _2164;
        float _4115 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2166 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2167 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _1975 = (((cbLight._m0[_2148].x * 0.3183098733425140380859375) * _2166) * _2167) + _1930;
        _1977 = (((cbLight._m0[_2148].y * 0.3183098733425140380859375) * _2166) * _2167) + _1932;
        _1979 = (((cbLight._m0[_2148].z * 0.3183098733425140380859375) * _2166) * _2167) + _1934;
    }
    uint _1982 = _1843 + 8u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _614) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1843].x + _692;
    float _1998 = cbLight._m0[_1843].y + _693;
    float _1999 = cbLight._m0[_1843].z + _694;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_1843].xyz));
    float _4131 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _2011 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2012 = dot(vec3(_610, _611, _612), vec3(_2004, _2005, _2006));
    float _4153 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2016 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_2004, _2005, _2006));
    float _4164 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2020 = _1996 * _1996;
    float _2024 = ((_2015 * _2015) * (_2020 + (-1.0))) + 1.0;
    float _2032 = exp2(log2(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * 5.0);
    float _2033 = 0.959999978542327880859375 - _762;
    float _2035 = 0.959999978542327880859375 - _763;
    float _2036 = 0.959999978542327880859375 - _764;
    float _2043 = 1.0 - _1996;
    float _2054 = (0.5 / (((_2011 * ((_2010 * _2043) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2043) + _1996) * _2010))) * _2010;
    float _4175 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2056 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2020 / ((_2024 * _2024) * 3.141590118408203125));
    uint _2070 = _1843 + 9u;
    float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _614) * 0.949999988079071044921875);
    float _2082 = _2081 * _2081;
    float _2083 = cbLight._m0[_1883].x + _692;
    float _2084 = cbLight._m0[_1883].y + _693;
    float _2085 = cbLight._m0[_1883].z + _694;
    float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
    float _2090 = _2089 * _2083;
    float _2091 = _2089 * _2084;
    float _2092 = _2089 * _2085;
    float _2093 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_1883].xyz));
    float _4186 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2097 = dot(vec3(_610, _611, _612), vec3(_2090, _2091, _2092));
    float _4197 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2101 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_2090, _2091, _2092));
    float _4208 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2105 = _2082 * _2082;
    float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
    float _2116 = exp2(log2(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * 5.0);
    float _2123 = 1.0 - _2082;
    float _2133 = (0.5 / (((_2011 * ((_2096 * _2123) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2123) + _2082) * _2096))) * _2096;
    float _4219 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2135 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
    float _2145 = (((((_2116 * _2033) + _765) * cbLight._m0[_2070].x) * _2135) * _1866) + ((((cbLight._m0[_1982].x * _1835) * ((_2032 * _2033) + _765)) * _2056) * _1879);
    float _2146 = (((((_2116 * _2035) + _767) * cbLight._m0[_2070].y) * _2135) * _1866) + ((((cbLight._m0[_1982].y * _1836) * ((_2032 * _2035) + _767)) * _2056) * _1879);
    float _2147 = (((((_2116 * _2036) + _768) * cbLight._m0[_2070].z) * _2135) * _1866) + ((((cbLight._m0[_1982].z * _1837) * ((_2032 * _2036) + _768)) * _2056) * _1879);
    float _2209;
    float _2211;
    float _2213;
    if (_1919)
    {
        _2209 = _2145;
        _2211 = _2146;
        _2213 = _2147;
    }
    else
    {
        uint _2215 = _1843 + 2u;
        uint _2219 = _1843 + 10u;
        float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _614) * 0.949999988079071044921875);
        float _2234 = _2233 * _2233;
        float _2235 = cbLight._m0[_2215].x + _692;
        float _2236 = cbLight._m0[_2215].y + _693;
        float _2237 = cbLight._m0[_2215].z + _694;
        float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
        float _2242 = _2241 * _2235;
        float _2243 = _2241 * _2236;
        float _2244 = _2241 * _2237;
        float _2245 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2215].xyz));
        float _4230 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2249 = dot(vec3(_610, _611, _612), vec3(_2242, _2243, _2244));
        float _4241 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2253 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2242, _2243, _2244));
        float _4252 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2257 = _2234 * _2234;
        float _2261 = ((_2252 * _2252) * (_2257 + (-1.0))) + 1.0;
        float _2268 = exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0);
        float _2275 = 1.0 - _2234;
        float _2285 = (0.5 / (((_2011 * ((_2248 * _2275) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2275) + _2234) * _2248))) * _2248;
        float _4263 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2287 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2257 / ((_2261 * _2261) * 3.141590118408203125));
        float _2288 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2209 = (((((_2268 * _2033) + _765) * cbLight._m0[_2219].x) * _2287) * _2288) + _2145;
        _2211 = (((((_2268 * _2035) + _767) * cbLight._m0[_2219].y) * _2287) * _2288) + _2146;
        _2213 = (((((_2268 * _2036) + _768) * cbLight._m0[_2219].z) * _2287) * _2288) + _2147;
    }
    float _2323;
    float _2325;
    float _2327;
    if (_1937)
    {
        _2323 = _2209;
        _2325 = _2211;
        _2327 = _2213;
    }
    else
    {
        uint _2334 = _1843 + 3u;
        uint _2338 = _1843 + 11u;
        float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _614) * 0.949999988079071044921875);
        float _2353 = _2352 * _2352;
        float _2354 = cbLight._m0[_2334].x + _692;
        float _2355 = cbLight._m0[_2334].y + _693;
        float _2356 = cbLight._m0[_2334].z + _694;
        float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
        float _2361 = _2360 * _2354;
        float _2362 = _2360 * _2355;
        float _2363 = _2360 * _2356;
        float _2364 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2334].xyz));
        float _4279 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2368 = dot(vec3(_610, _611, _612), vec3(_2361, _2362, _2363));
        float _4290 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2372 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2361, _2362, _2363));
        float _4301 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2376 = _2353 * _2353;
        float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
        float _2387 = exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0);
        float _2394 = 1.0 - _2353;
        float _2404 = (0.5 / (((_2011 * ((_2367 * _2394) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2394) + _2353) * _2367))) * _2367;
        float _4312 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2406 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
        float _2407 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2323 = (((((_2387 * _2033) + _765) * cbLight._m0[_2338].x) * _2406) * _2407) + _2209;
        _2325 = (((((_2387 * _2035) + _767) * cbLight._m0[_2338].y) * _2406) * _2407) + _2211;
        _2327 = (((((_2387 * _2036) + _768) * cbLight._m0[_2338].z) * _2406) * _2407) + _2213;
    }
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    if (_1841.y == 0u)
    {
        float _2482 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2483 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2482;
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2482;
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2482;
        uvec4 _2497 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2498 = _2497.x;
        uint _2509 = uint((float(_2497.y) * floor(float(uint(cbSceneParam._m0[85u].y * _701) / _2498))) + floor(float(uint(cbSceneParam._m0[85u].x * _700) / _2498)));
        float _2519 = (log2(_2485 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2520 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        uint _2523 = uint(isnan(14.0) ? _2520 : (isnan(_2520) ? 14.0 : min(_2520, 14.0)));
        uvec4 _2528 = texelFetch(g_lightClusterGridBuffer, int(((_2523 << 2u) + (_2509 << 6u)) >> 2u));
        uint _2529 = _2528.x;
        uint _2530 = _2497.z;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        if (((((1u << ((_2530 >> 4u) & 15u)) + 4294967295u) & _2529) == 0u) || ((_2530 & 240u) == 0u))
        {
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
        }
        else
        {
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            uint _2781 = 0u;
            uint _2790;
            bool _2791;
            for (;;)
            {
                _2790 = texelFetch(g_lightClassification, int((((_2523 << 5u) + (_2509 << 9u)) + (_2781 << 2u)) >> 2u)).x;
                _2791 = _2790 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2791)
                {
                    frontier_phi_63_pred = _2780;
                    frontier_phi_63_pred_1 = _2779;
                    frontier_phi_63_pred_2 = _2778;
                    frontier_phi_63_pred_3 = _2777;
                    frontier_phi_63_pred_4 = _2776;
                    frontier_phi_63_pred_5 = _2775;
                }
                else
                {
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    uint _2905;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2790;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    for (;;)
                    {
                        uint _2909 = uint(findLSB(_2905)) + (_2781 << 5u);
                        uint _2906 = (_2905 + 4294967295u) & _2905;
                        uint _2911 = _2909 * 48u;
                        vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2931 = (_2909 * 48u) + 4u;
                        vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2931)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 3u)).x));
                        uint _2950 = (_2909 * 48u) + 8u;
                        vec3 _2961 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x));
                        float _2965 = _2925.x - _2483;
                        float _2966 = _2925.y - _2484;
                        float _2967 = _2925.z - _2485;
                        float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                        float _2971 = inversesqrt(_2968);
                        float _2972 = _2971 * _2965;
                        float _2973 = _2971 * _2966;
                        float _2974 = _2971 * _2967;
                        float _2975 = dot(vec3(_721, _724, _727), vec3(_2972, _2973, _2974));
                        float _2980 = 1.0 - (_2968 * _2925.w);
                        float _4338 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2981 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _2982 = sqrt(_2968) * _2944.w;
                        float _2985 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2975) + _2986;
                        float _2992 = _2982 * _2982;
                        float _2996 = ((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2981) / ((_2992 * 0.699999988079071044921875) + 1.0);
                        float _3000 = (-0.0) - _2483;
                        float _3001 = (-0.0) - _2484;
                        float _3002 = (-0.0) - _2485;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3017 = exp2(log2(1.0 / ((_2992 * 3.5) + 5.0)) * 0.25);
                        float _3018 = 1.0 - _796;
                        float _3025 = sqrt(1.0 - ((1.0 - (_3018 * _3018)) * (1.0 - (_3017 * _3017))));
                        float _3026 = _3025 * _3025;
                        float _3027 = _3026 * _3026;
                        float _3028 = _3007 + _2972;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3038 = dot(vec3(_721, _724, _727), vec3(_3007, _3008, _3009));
                        float _4354 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3042 = dot(vec3(_721, _724, _727), vec3(_3034 * _3028, _3034 * _3029, _3034 * _3030));
                        float _4365 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3049 = ((_3045 * _3045) * (_3027 + (-1.0))) + 1.0;
                        float _3050 = _2985 * _3026;
                        float _3051 = _3050 * _3050;
                        float _3054 = ((1.0 - _3051) * _2975) + _3051;
                        float _4376 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3055 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3056 = 1.0 - _3026;
                        float _3066 = (0.5 / (((_3055 * ((_3041 * _3056) + _3026)) + 9.9999999392252902907785028219223e-09) + (((_3055 * _3056) + _3026) * _3041))) * _3055;
                        float _4387 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3077 = (((_3027 * 3.1415927410125732421875) * (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) / ((_3049 * _3049) * ((_2992 * 2.1991131305694580078125) + 3.141590118408203125))) * _2981;
                        _2834 = (_2996 * _2944.x) + _2902;
                        _2835 = (_2996 * _2944.y) + _2903;
                        _2836 = (_2996 * _2944.z) + _2904;
                        _2831 = (_3077 * _2961.x) + _2899;
                        _2832 = (_3077 * _2961.y) + _2900;
                        _2833 = (_3077 * _2961.z) + _2901;
                        if (_2906 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2906;
                        }
                    }
                    frontier_phi_63_pred = _2836;
                    frontier_phi_63_pred_1 = _2835;
                    frontier_phi_63_pred_2 = _2834;
                    frontier_phi_63_pred_3 = _2833;
                    frontier_phi_63_pred_4 = _2832;
                    frontier_phi_63_pred_5 = _2831;
                }
                _2642 = frontier_phi_63_pred;
                _2640 = frontier_phi_63_pred_1;
                _2638 = frontier_phi_63_pred_2;
                _2636 = frontier_phi_63_pred_3;
                _2634 = frontier_phi_63_pred_4;
                _2632 = frontier_phi_63_pred_5;
                uint _2782 = _2781 + 1u;
                if (_2782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2775 = _2632;
                    _2776 = _2634;
                    _2777 = _2636;
                    _2778 = _2638;
                    _2779 = _2640;
                    _2780 = _2642;
                    _2781 = _2782;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
        }
        uvec4 _2645 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2646 = _2645.z;
        uint _2648 = (_2646 >> 8u) & 15u;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((4294967295u << _2648) & _2529) == 0u)
        {
            _2743 = _2631;
            _2745 = _2633;
            _2747 = _2635;
            _2749 = _2637;
            _2751 = _2639;
            _2753 = _2641;
        }
        else
        {
            float _2768 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
            float _2769 = _2768 * _2483;
            float _2770 = _2768 * _2484;
            float _2771 = _2768 * _2485;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2648 < ((_2646 >> 12u) & 15u))
            {
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2882 = _2631;
                float _2883 = _2633;
                float _2884 = _2635;
                float _2885 = _2637;
                float _2886 = _2639;
                float _2887 = _2641;
                uint _2888 = _2648;
                uint _2897;
                bool _2898;
                for (;;)
                {
                    _2897 = texelFetch(g_lightClassification, int((((_2523 << 5u) + (_2509 << 9u)) + (_2888 << 2u)) >> 2u)).x;
                    _2898 = _2897 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2898)
                    {
                        frontier_phi_69_pred = _2887;
                        frontier_phi_69_pred_1 = _2886;
                        frontier_phi_69_pred_2 = _2885;
                        frontier_phi_69_pred_3 = _2884;
                        frontier_phi_69_pred_4 = _2883;
                        frontier_phi_69_pred_5 = _2882;
                    }
                    else
                    {
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3095 = _2882;
                        float _3096 = _2883;
                        float _3097 = _2884;
                        float _3098 = _2885;
                        float _3099 = _2886;
                        float _3100 = _2887;
                        uint _3101 = _2897;
                        uint _3102;
                        vec4 _3127;
                        float _3128;
                        vec4 _3143;
                        vec3 _3155;
                        vec4 _3171;
                        vec4 _3187;
                        float _3234;
                        bool _3235;
                        for (;;)
                        {
                            uint _3112 = ((_2888 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3101));
                            _3102 = (_3101 + 4294967295u) & _3101;
                            uint _3114 = _3112 * 40u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3128 = _3127.w;
                            uint _3130 = (_3112 * 40u) + 4u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3112 * 40u) + 8u;
                            _3155 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x));
                            uint _3158 = (_3112 * 40u) + 16u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3174 = (_3112 * 40u) + 20u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3190 = (_3112 * 40u) + 24u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3209 = (_3112 * 40u) + 28u;
                            vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            _3234 = fma(_2485, _3222.z, fma(_2484, _3222.y, _3222.x * _2483)) + _3222.w;
                            _3235 = !((fma(_2485, _3203.z, fma(_2484, _3203.y, _3203.x * _2483)) + _3203.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3235)
                            {
                                float _3262 = _3127.x - _2483;
                                float _3263 = _3127.y - _2484;
                                float _3264 = _3127.z - _2485;
                                float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                                float _3268 = inversesqrt(_3265);
                                float _3269 = _3268 * _3262;
                                float _3270 = _3268 * _3263;
                                float _3271 = _3268 * _3264;
                                float _3275 = 1.0 - (_3265 / (_3128 * _3128));
                                float _4398 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3280 = sqrt(_3265) * _3143.w;
                                float _3282 = 1.39999997615814208984375 / (_3280 + 1.39999997615814208984375);
                                float _3283 = _3282 * _3282;
                                float _3286 = ((1.0 - _3283) * dot(vec3(_3269, _3270, _3271), vec3(_721, _724, _727))) + _3283;
                                float _3289 = _3280 * _3280;
                                float _3293 = (fma(_2485, _3171.z, fma(_2484, _3171.y, _3171.x * _2483)) + _3171.w) / _3234;
                                float _3294 = (fma(_2485, _3187.z, fma(_2484, _3187.y, _3187.x * _2483)) + _3187.w) / _3234;
                                float _3298 = 1.0 - dot(vec2(_3293, _3294), vec2(_3293, _3294));
                                float _4414 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3300 = _3299 * (((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3276) / ((_3289 * 0.699999988079071044921875) + 1.0));
                                float _3312 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                                float _3313 = 1.0 - _796;
                                float _3320 = sqrt(1.0 - ((1.0 - (_3313 * _3313)) * (1.0 - (_3312 * _3312))));
                                float _3321 = _3320 * _3320;
                                float _3322 = _3321 * _3321;
                                float _3323 = _3269 - _2769;
                                float _3324 = _3270 - _2770;
                                float _3325 = _3271 - _2771;
                                float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                                float _3333 = dot(vec3(_721, _724, _727), vec3((-0.0) - _2769, (-0.0) - _2770, (-0.0) - _2771));
                                float _4425 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3336 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3337 = dot(vec3(_721, _724, _727), vec3(_3329 * _3323, _3329 * _3324, _3329 * _3325));
                                float _4436 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3340 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3344 = ((_3340 * _3340) * (_3322 + (-1.0))) + 1.0;
                                float _3345 = _3282 * _3321;
                                float _3346 = _3345 * _3345;
                                float _3352 = ((1.0 - _3346) * dot(vec3(_721, _724, _727), vec3(_3269, _3270, _3271))) + _3346;
                                float _4447 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3354 = 1.0 - _3321;
                                float _3364 = (0.5 / (((_3353 * ((_3336 * _3354) + _3321)) + 9.9999999392252902907785028219223e-09) + (((_3353 * _3354) + _3321) * _3336))) * _3353;
                                float _4458 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3374 = (_3299 * _3276) * (((_3322 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3344 * _3344) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3300 * _3143.z;
                                frontier_phi_75_pred_1 = _3300 * _3143.y;
                                frontier_phi_75_pred_2 = _3300 * _3143.x;
                                frontier_phi_75_pred_3 = _3374 * _3155.z;
                                frontier_phi_75_pred_4 = _3374 * _3155.y;
                                frontier_phi_75_pred_5 = _3374 * _3155.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3383 = frontier_phi_75_pred;
                            _3382 = frontier_phi_75_pred_1;
                            _3381 = frontier_phi_75_pred_2;
                            _3380 = frontier_phi_75_pred_3;
                            _3379 = frontier_phi_75_pred_4;
                            _3378 = frontier_phi_75_pred_5;
                            _3085 = _3381 + _3098;
                            _3086 = _3382 + _3099;
                            _3087 = _3383 + _3100;
                            _3082 = _3378 + _3095;
                            _3083 = _3379 + _3096;
                            _3084 = _3380 + _3097;
                            if (_3102 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3102;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3087;
                        frontier_phi_69_pred_1 = _3086;
                        frontier_phi_69_pred_2 = _3085;
                        frontier_phi_69_pred_3 = _3084;
                        frontier_phi_69_pred_4 = _3083;
                        frontier_phi_69_pred_5 = _3082;
                    }
                    _2754 = frontier_phi_69_pred;
                    _2752 = frontier_phi_69_pred_1;
                    _2750 = frontier_phi_69_pred_2;
                    _2748 = frontier_phi_69_pred_3;
                    _2746 = frontier_phi_69_pred_4;
                    _2744 = frontier_phi_69_pred_5;
                    uint _2889 = _2888 + 1u;
                    if (_2889 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2882 = _2744;
                        _2883 = _2746;
                        _2884 = _2748;
                        _2885 = _2750;
                        _2886 = _2752;
                        _2887 = _2754;
                        _2888 = _2889;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2754;
                frontier_phi_57_58_ladder_1 = _2752;
                frontier_phi_57_58_ladder_2 = _2750;
                frontier_phi_57_58_ladder_3 = _2748;
                frontier_phi_57_58_ladder_4 = _2746;
                frontier_phi_57_58_ladder_5 = _2744;
            }
            else
            {
                frontier_phi_57_58_ladder = _2641;
                frontier_phi_57_58_ladder_1 = _2639;
                frontier_phi_57_58_ladder_2 = _2637;
                frontier_phi_57_58_ladder_3 = _2635;
                frontier_phi_57_58_ladder_4 = _2633;
                frontier_phi_57_58_ladder_5 = _2631;
            }
            _2743 = frontier_phi_57_58_ladder_5;
            _2745 = frontier_phi_57_58_ladder_4;
            _2747 = frontier_phi_57_58_ladder_3;
            _2749 = frontier_phi_57_58_ladder_2;
            _2751 = frontier_phi_57_58_ladder_1;
            _2753 = frontier_phi_57_58_ladder;
        }
        float _2758 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
        _2541 = (_2758 * _2749) + _1975;
        _2543 = (_2758 * _2751) + _1977;
        _2545 = (_2758 * _2753) + _1979;
        _2547 = ((_2743 * _765) * _2758) + _2323;
        _2549 = ((_2745 * _767) * _2758) + _2325;
        _2551 = ((_2747 * _768) * _2758) + _2327;
    }
    else
    {
        _2541 = _1975;
        _2543 = _1977;
        _2545 = _1979;
        _2547 = _2323;
        _2549 = _2325;
        _2551 = _2327;
    }
    float _4474 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4485 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4496 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4507 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _2576 = cbInstanceData._m0[_740 + 6u].w * (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)));
    float _2581 = _700 / cbSceneParam._m0[86u].x;
    float _2582 = _701 / cbSceneParam._m0[86u].y;
    vec4 _2596 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, (log2((isnan(cbSceneParam._m0[77u].w) ? _634 : (isnan(_634) ? cbSceneParam._m0[77u].w : min(_634, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2598 = _2596.x;
    float _2599 = _2596.y;
    float _2600 = _2596.z;
    float _2601 = _2596.w;
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    if (_634 > cbSceneParam._m0[78u].w)
    {
        float _2656 = isnan(_634) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _634 : min(cbSceneParam._m0[80u].w, _634));
        float _2657 = _2656 / _634;
        float _2668 = _2657 * _685;
        float _2669 = _686 * _2657;
        float _2670 = (-0.0) - _2669;
        float _2671 = _2657 * _687;
        float _2673 = (cbSceneParam._m0[77u].w * _2670) / _2656;
        float _2674 = _2673 + cbSceneParam._m0[79u].w;
        float _2675 = cbSceneParam._m0[79u].w - _2669;
        float _2681 = sqrt(((_2668 * _2668) + (_2669 * _2669)) + (_2671 * _2671));
        float _2684 = (1.0 - (cbSceneParam._m0[77u].w / _2656)) * _2681;
        float _2689 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2691 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2844;
        if (abs((_2670 - _2673) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2844 = ((((_2674 > 0.0) ? exp2(_2689 * _2674) : (2.0 - exp2(_2691 * _2674))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2684;
        }
        else
        {
            float _2804 = 1.0 / cbSceneParam._m0[80u].x;
            float _2805 = isnan(_2675) ? _2674 : (isnan(_2674) ? _2675 : max(_2674, _2675));
            float _2806 = isnan(_2675) ? _2674 : (isnan(_2674) ? _2675 : min(_2674, _2675));
            float _2815 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : min(_2805, 0.0));
            float _2816 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : min(_2806, 0.0));
            _2844 = ((abs(_2681 / _2670) * cbSceneParam._m0[80u].y) * ((((_2815 - _2816) * 2.0) - ((exp2(_2689 * (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0)))) - exp2(_2689 * (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))))) * _2804)) - ((exp2(_2691 * _2815) - exp2(_2691 * _2816)) * _2804))) + (_2684 * cbSceneParam._m0[80u].z);
        }
        vec4 _2846 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, 1.0), 0.0);
        float _2855 = exp2((_2844 * (-1.44269502162933349609375)) * (1.0 - _2846.w));
        float _2856 = log2(_2855);
        float _2872 = log2(_2601);
        _2693 = (exp2(_2872 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].x)) * _2846.x) / cbSceneParam._m0[78u].x)) + _2598;
        _2695 = (exp2(_2872 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].y)) * _2846.y) / cbSceneParam._m0[78u].y)) + _2599;
        _2697 = (exp2(_2872 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].z)) * _2846.z) / cbSceneParam._m0[78u].z)) + _2600;
        _2699 = _2855 * _2601;
    }
    else
    {
        _2693 = _2598;
        _2695 = _2599;
        _2697 = _2600;
        _2699 = _2601;
    }
    float _2711 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2712 = _2711 == 3.0;
    float _2713 = log2(_2699);
    float _2720 = exp2(_2713 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2541 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _780))) + ((_2547 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1590)) * cbPerFrame._m0[3u].x));
    float _2721 = exp2(_2713 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2543 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _780))) + ((_2549 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1590)) * cbPerFrame._m0[3u].x));
    float _2722 = exp2(_2713 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2545 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _780))) + ((_2551 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1590)) * cbPerFrame._m0[3u].x));
    float _2731 = (_2711 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2731 * (_2712 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2693)));
    SV_Target.y = _2731 * (_2712 ? _2721 : (_2721 + (cbSceneParam._m0[72u].w * _2695)));
    SV_Target.z = _2731 * (_2712 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2697)));
    SV_Target.w = _2576;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2576;
}


