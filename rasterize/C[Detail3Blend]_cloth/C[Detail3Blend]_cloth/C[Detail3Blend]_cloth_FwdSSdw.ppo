#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Detail3Blend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D C_Detail3Blend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Detail3Blend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Detail3Blend_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Detail3Blend_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Detail3Blend_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_Detail3Blend_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D C_Detail3Blend_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1175;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _246.w;
    float _258 = exp2(log2(1.0 - _252) * 10.0);
    vec4 _271 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _296 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _307 = cbMtdParam._m0[9u].x * _296.x;
    float _308 = cbMtdParam._m0[9u].y * _296.y;
    float _309 = cbMtdParam._m0[9u].z * _296.z;
    float _316 = (((cbMtdParam._m0[10u].x * _271.x) - _307) * _258) + _307;
    float _317 = (((cbMtdParam._m0[10u].y * _271.y) - _308) * _258) + _308;
    float _318 = (((cbMtdParam._m0[10u].z * _271.z) - _309) * _258) + _309;
    float _321 = exp2(log2(_252) * 10.0);
    vec4 _333 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _367 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _372 = _367.w;
    float _375 = (((((cbMtdParam._m0[11u].x * _333.x) - _316) * _321) + _316) * 4.55000019073486328125) * _367.x;
    float _377 = (((((cbMtdParam._m0[11u].y * _333.y) - _317) * _321) + _317) * 4.55000019073486328125) * _367.y;
    float _379 = (((((cbMtdParam._m0[11u].z * _333.z) - _318) * _321) + _318) * 4.55000019073486328125) * _367.z;
    vec4 _396 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _415 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _417 = _415.x;
    float _418 = _415.y;
    float _421 = cbMtdParam._m0[12u].x + _415.z;
    float _424 = (((cbMtdParam._m0[12u].y + _396.z) - _421) * _258) + _421;
    vec4 _437 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _452 = (_246.z * 2.0) * ((((_437.z - _424) + cbMtdParam._m0[13u].x) * _321) + _424);
    float _463 = ((_396.x - _417) * _258) + _417;
    float _464 = ((_396.y - _418) * _258) + _418;
    float _473 = ((((_437.x - _463) * _321) + _463) * 2.0) + (-1.0);
    float _474 = ((((_437.y - _464) * _321) + _464) * 2.0) + (-1.0);
    float _475 = dot(vec2(_473, _474), vec2(_473, _474));
    float _3530 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _480 = sqrt(1.0 - (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))));
    float _483 = _473 + (cbMtdParam._m0[12u].z * ((_246.x * 2.0) + (-1.0)));
    float _484 = _474 + (cbMtdParam._m0[12u].z * ((_246.y * 2.0) + (-1.0)));
    float _487 = fma(_480, _230, fma(_484, _222 * TANGENT.x, (_208 * _200) * _483));
    float _490 = fma(_480, _231, fma(_484, _222 * TANGENT.y, (_208 * _201) * _483));
    float _493 = fma(_480, _232, fma(_484, _222 * TANGENT.z, (_208 * _202) * _483));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    float _498 = _497 * _487;
    float _499 = _497 * _490;
    float _500 = _497 * _493;
    float _3541 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _501 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _502 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _503 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _3574 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _504 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _505 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? cbMtdParam._m0[12u].w : (isnan(cbMtdParam._m0[12u].w) ? 0.0 : max(cbMtdParam._m0[12u].w, 0.0));
    float _506 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _522 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _573 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _563);
    float _574 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _563);
    float _575 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _563);
    float _579 = inversesqrt(dot(vec3(_573, _574, _575), vec3(_573, _574, _575)));
    float _580 = _573 * _579;
    float _581 = _574 * _579;
    float _582 = _575 * _579;
    float _588 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _589 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _591 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _593 = _591.w;
    float _611 = fma(_500, cbSceneParam._m0[5u].z, fma(_499, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _498));
    float _614 = fma(_500, cbSceneParam._m0[6u].z, fma(_499, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _498));
    float _617 = fma(_500, cbSceneParam._m0[7u].z, fma(_499, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _498));
    vec4 _619 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _621 = _619.x;
    float _633 = (((_619.y - _502) + (_619.w * _502)) * cbMtdParam._m0[3u].x) + _502;
    vec4 _634 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _650 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_621 * _621)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _634.z;
    float _659 = (((cbMatDynParam._m0[15u].x - _506) * cbMatDynParam._m0[15u].w) * _650) + _506;
    float _668 = ((_650 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _633)) + _633;
    uint _692 = uint(roundEven(NORMAL.w)) * 13u;
    uint _694 = (_692 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _700 = (cbMtdParam._m0[0u].x * _503) * cbInstanceData._m0[_694].x;
    float _701 = (cbMtdParam._m0[0u].y * _504) * cbInstanceData._m0[_694].y;
    float _702 = (cbMtdParam._m0[0u].z * _505) * cbInstanceData._m0[_694].z;
    float _3607 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _703 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    vec4 _706 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _711 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _722 = (((_711.x - _659) + (_711.w * _659)) * cbMtdParam._m0[3u].x) + _659;
    float _735 = (cbMtdParam._m0[3u].x * (((_703 * _593) - _703) + _706.x)) + _703;
    float _736 = (cbMtdParam._m0[3u].x * (((_704 * _593) - _704) + _706.y)) + _704;
    float _737 = (cbMtdParam._m0[3u].x * (((_705 * _593) - _705) + _706.z)) + _705;
    float _751 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_659 * (_503 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_659 * (_504 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_659 * (_505 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _755 = _751 * cbMatDynParam._m0[13u].w;
    float _765 = (_755 * (cbMatDynParam._m0[13u].x - _735)) + _735;
    float _766 = (_755 * (cbMatDynParam._m0[13u].y - _736)) + _736;
    float _767 = (_755 * (cbMatDynParam._m0[13u].z - _737)) + _737;
    float _775 = ((_751 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _722)) + _722;
    float _776 = 1.0 - _775;
    float _777 = _776 * _765;
    float _778 = _776 * _766;
    float _779 = _776 * _767;
    float _783 = (_765 + (-0.039999999105930328369140625)) * _775;
    float _784 = (_766 + (-0.039999999105930328369140625)) * _775;
    float _785 = (_767 + (-0.039999999105930328369140625)) * _775;
    float _786 = _783 + 0.039999999105930328369140625;
    float _787 = _784 + 0.039999999105930328369140625;
    float _788 = _785 + 0.039999999105930328369140625;
    vec4 _797 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _588, cbSceneParam._m0[86u].y * _589));
    float _800 = _797.x * TEXCOORD_4;
    float _801 = dot(vec3(_498, _499, _500), vec3(_580, _581, _582));
    float _804 = _801 * 2.0;
    float _808 = (_804 * _498) - _580;
    float _809 = (_804 * _499) - _581;
    float _810 = (_804 * _500) - _582;
    float _814 = abs(dot(vec3(_580, _581, _582), vec3(_498, _499, _500)));
    float _3640 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _816 = sqrt(_668);
    float _829 = exp2((_816 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_816 * 3.0));
    float _835 = (1.0 - _829) * ((_816 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _836 = _829 * _816;
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1174;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _899 = fma(_872, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _864));
        float _903 = fma(_872, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _864));
        float _907 = fma(_872, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _864));
        float _932 = _864 + _498;
        float _933 = _868 + _499;
        float _934 = _872 + _500;
        float _944 = fma(_934, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932)) - _899;
        float _945 = fma(_934, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932)) - _903;
        float _946 = fma(_934, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932)) - _907;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_899 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_903 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[34u].z) + ((((((_907 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1002 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_968.x + (-0.5));
        float _1004 = _1002 * (_968.y + (-0.5));
        float _1005 = _1002 * (_968.z + (-0.5));
        float _1012 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_975.x + (-0.5));
        float _1014 = _1012 * (_975.y + (-0.5));
        float _1015 = _1012 * (_975.z + (-0.5));
        float _1022 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_982.x + (-0.5));
        float _1024 = _1022 * (_982.y + (-0.5));
        float _1025 = _1022 * (_982.z + (-0.5));
        float _1032 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_989.x + (-0.5));
        float _1034 = _1032 * (_989.y + (-0.5));
        float _1035 = _1032 * (_989.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1056 = (dot(vec3(_498, _499, _500), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1066 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3688 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1068 + 1.0))) + _1073) * _1036;
        float _1083 = _1004 * 0.5;
        float _1084 = _1014 * 0.5;
        float _1085 = _1024 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_498, _499, _500), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3721 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1110 + 1.0))) + _1115) * _1037;
        float _1125 = _1005 * 0.5;
        float _1126 = _1015 * 0.5;
        float _1127 = _1025 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_498, _499, _500), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3754 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1152 + 1.0))) + _1157) * _1038;
        _1174 = _1005;
        _1176 = _1004;
        _1177 = _1003;
        _1178 = _1015;
        _1179 = _1014;
        _1180 = _1013;
        _1181 = _1025;
        _1182 = _1024;
        _1183 = _1023;
        _1184 = _1038;
        _1185 = _1037;
        _1186 = _1036;
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _1175;
        _1176 = _1175;
        _1177 = _1175;
        _1178 = _1175;
        _1179 = _1175;
        _1180 = _1175;
        _1181 = _1175;
        _1182 = _1175;
        _1183 = _1175;
        _1184 = _1175;
        _1185 = _1175;
        _1186 = _1175;
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
    }
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1215 = fma(_872, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _864));
        float _1219 = fma(_872, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _864));
        float _1223 = fma(_872, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _864));
        float _1246 = _864 + _498;
        float _1247 = _868 + _499;
        float _1248 = _872 + _500;
        float _1258 = fma(_1248, cbModelParam._m0[30u].z, fma(_1247, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1246)) - _1215;
        float _1259 = fma(_1248, cbModelParam._m0[31u].z, fma(_1247, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1246)) - _1219;
        float _1260 = fma(_1248, cbModelParam._m0[32u].z, fma(_1247, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1246)) - _1223;
        float _1264 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
        float _1277 = ((_1264 * _1258) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1215 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1264 * _1259) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1219 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1264 * _1260) / cbModelParam._m0[35u].z) + ((((((_1223 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        float _1314 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1281.x + (-0.5));
        float _1316 = _1314 * (_1281.y + (-0.5));
        float _1317 = _1314 * (_1281.z + (-0.5));
        float _1324 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1288.x + (-0.5));
        float _1326 = _1324 * (_1288.y + (-0.5));
        float _1327 = _1324 * (_1288.z + (-0.5));
        float _1334 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1295.x + (-0.5));
        float _1336 = _1334 * (_1295.y + (-0.5));
        float _1337 = _1334 * (_1295.z + (-0.5));
        float _1344 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1302.x + (-0.5));
        float _1346 = _1344 * (_1302.y + (-0.5));
        float _1347 = _1344 * (_1302.z + (-0.5));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = _1315 * 0.5;
        float _1352 = _1325 * 0.5;
        float _1353 = _1335 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_498, _499, _500), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3817 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1378 + 1.0))) + _1383) * _1348;
        float _1393 = _1316 * 0.5;
        float _1394 = _1326 * 0.5;
        float _1395 = _1336 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_498, _499, _500), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3850 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1420 + 1.0))) + _1425) * _1349;
        float _1435 = _1317 * 0.5;
        float _1436 = _1327 * 0.5;
        float _1437 = _1337 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_498, _499, _500), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _3883 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1462 + 1.0))) + _1467) * _1350;
        _1484 = _1317;
        _1485 = _1316;
        _1486 = _1315;
        _1487 = _1327;
        _1488 = _1326;
        _1489 = _1325;
        _1490 = _1337;
        _1491 = _1336;
        _1492 = _1335;
        _1493 = _1350;
        _1494 = _1349;
        _1495 = _1348;
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
    }
    else
    {
        _1484 = _1175;
        _1485 = _1175;
        _1486 = _1175;
        _1487 = _1175;
        _1488 = _1175;
        _1489 = _1175;
        _1490 = _1175;
        _1491 = _1175;
        _1492 = _1175;
        _1493 = _1175;
        _1494 = _1175;
        _1495 = _1175;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1187)) + _1187;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1188)) + _1188;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1189)) + _1189;
    float _1531 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1534 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1537 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1508));
    float _1552 = _808 * 0.5;
    float _1553 = _809 * 0.5;
    float _1554 = _810 * 0.5;
    float _1555 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1558 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1561 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1568 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1174, _1178, _1181, _1184));
        float _1572 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1576 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1583 = dot(vec4(cbModelParam._m0[39u]), vec4(_1552, _1553, _1554, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1583) ? 0.0 : (isnan(0.0) ? _1583 : max(0.0, _1583))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1552, _1553, _1554, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _668);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_872, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_872, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_872, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_810, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808));
        float _1679 = fma(_810, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808));
        float _1682 = fma(_810, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1710 = frontier_phi_16_14_ladder;
        }
        float _1937;
        if (_1679 > 0.0)
        {
            _1937 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1937 = frontier_phi_25_21_ladder;
        }
        float _2194;
        if (_1682 > 0.0)
        {
            _2194 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2194 = frontier_phi_37_32_ladder;
        }
        float _2196 = isnan(_1937) ? _1710 : (isnan(_1710) ? _1937 : min(_1710, _1937));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1676) + _1665;
        float _2202 = (_2197 * _1679) + _1669;
        float _2203 = (_2197 * _1682) + _1673;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2204;
        float _2208 = _2204 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 > _2208) || ((_2202 < _2206) || ((_2201 < _2206) || (_2201 > _2208))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2331 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2203, cbModelParam._m0[9u].z, fma(_2202, cbModelParam._m0[9u].y, _2201 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2203, cbModelParam._m0[10u].z, fma(_2202, cbModelParam._m0[10u].y, _2201 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2203, cbModelParam._m0[11u].z, fma(_2202, cbModelParam._m0[11u].y, _2201 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_15_37_ladder = _2331.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2331.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2331.x * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_15_37_ladder_2;
        _1700 = frontier_phi_15_37_ladder_1;
        _1702 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_808, _809, _810), _1618);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _668);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1764 = fma(_872, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864)) + cbModelParam._m0[21u].w;
        float _1768 = fma(_872, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864)) + cbModelParam._m0[22u].w;
        float _1772 = fma(_872, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864)) + cbModelParam._m0[23u].w;
        float _1775 = fma(_810, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808));
        float _1778 = fma(_810, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808));
        float _1781 = fma(_810, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808));
        float _1942;
        if (_1775 > 0.0)
        {
            _1942 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1942 = frontier_phi_27_23_ladder;
        }
        float _2221;
        if (_1778 > 0.0)
        {
            _2221 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2221 = frontier_phi_39_34_ladder;
        }
        float _2434;
        if (_1781 > 0.0)
        {
            _2434 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2434 = frontier_phi_48_45_ladder;
        }
        float _2436 = isnan(_2221) ? _1942 : (isnan(_1942) ? _2221 : min(_1942, _2221));
        float _2437 = isnan(_2434) ? _2436 : (isnan(_2436) ? _2434 : min(_2436, _2434));
        float _2441 = (_2437 * _1775) + _1764;
        float _2442 = (_2437 * _1778) + _1768;
        float _2443 = (_2437 * _1781) + _1772;
        float _2444 = _2437 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2444;
        float _2447 = _2444 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2443 > _2447) || ((_2443 < _2445) || ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 < _2445) || (_2441 > _2447))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2643 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2443, cbModelParam._m0[17u].z, fma(_2442, cbModelParam._m0[17u].y, _2441 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2443, cbModelParam._m0[18u].z, fma(_2442, cbModelParam._m0[18u].y, _2441 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2443, cbModelParam._m0[19u].z, fma(_2442, cbModelParam._m0[19u].y, _2441 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_24_48_ladder = _2643.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2643.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2643.x * cbModelParam._m0[1u].z;
        }
        _1800 = frontier_phi_24_48_ladder_2;
        _1802 = frontier_phi_24_48_ladder_1;
        _1804 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_808, _809, _810), _1707);
        _1800 = _1784.x * cbModelParam._m0[1u].z;
        _1802 = _1784.y * cbModelParam._m0[1u].z;
        _1804 = _1784.z * cbModelParam._m0[1u].z;
    }
    float _1817 = (((_835 * _786) + _836) * _800) * ((cbModelParam._m0[1u].w * (_1800 - _1698)) + _1698);
    float _1819 = (((_835 * _787) + _836) * _800) * ((cbModelParam._m0[1u].w * (_1802 - _1700)) + _1700);
    float _1821 = (((_835 * _788) + _836) * _800) * ((cbModelParam._m0[1u].w * (_1804 - _1702)) + _1702);
    float _1824 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1827 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1830 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, _1817 * cbSceneParam._m0[91u].x));
    vec4 _1838 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_588, _589));
    float _1840 = _1838.w;
    float _1852 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1840);
    float _1853 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1840);
    float _1854 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1840);
    uvec4 _1858 = floatBitsToUint(cbInstanceData._m0[_692 + 5u]);
    uint _1860 = _1858.x * 14u;
    uint _1861 = _1860 + 13u;
    float _1868 = _800 + (-1.0);
    float _1873 = (cbLight._m0[_1861].x * _1868) + 1.0;
    float _1874 = (cbLight._m0[_1861].y * _1868) + 1.0;
    float _1875 = (cbLight._m0[_1861].z * _1868) + 1.0;
    float _1876 = (cbLight._m0[_1861].w * _1868) + 1.0;
    uint _1877 = _1860 + 5u;
    float _1883 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1887 = _1860 + 4u;
    float _1896 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
    uint _1900 = _1860 | 1u;
    float _1911 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_498, _499, _500));
    float _1914 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_498, _499, _500));
    float _4019 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _4030 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1919 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.3183098733425140380859375;
    float _1921 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.3183098733425140380859375;
    float _1928 = ((cbLight._m0[_1877].x * _1883) * _1921) + (((cbLight._m0[_1887].x * _1852) * _1896) * _1919);
    float _1929 = ((_1883 * cbLight._m0[_1877].y) * _1921) + (((cbLight._m0[_1887].y * _1853) * _1896) * _1919);
    float _1930 = ((_1883 * cbLight._m0[_1877].z) * _1921) + (((cbLight._m0[_1887].z * _1854) * _1896) * _1919);
    uvec4 _1934 = floatBitsToUint(cbLight._m0[_1860 + 12u]);
    bool _1936 = _1934.x == 0u;
    float _1947;
    float _1949;
    float _1951;
    if (_1936)
    {
        _1947 = _1928;
        _1949 = _1929;
        _1951 = _1930;
    }
    else
    {
        uint _1955 = _1860 + 6u;
        float _1971 = (dot(vec3(cbLight._m0[_1860 + 2u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _1972 = _1971 * _1971;
        float _4041 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1973 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1974 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _1947 = (((cbLight._m0[_1955].x * 0.3183098733425140380859375) * _1973) * _1974) + _1928;
        _1949 = (((cbLight._m0[_1955].y * 0.3183098733425140380859375) * _1973) * _1974) + _1929;
        _1951 = (((cbLight._m0[_1955].z * 0.3183098733425140380859375) * _1973) * _1974) + _1930;
    }
    bool _1954 = _1934.y == 0u;
    float _1992;
    float _1994;
    float _1996;
    if (_1954)
    {
        _1992 = _1947;
        _1994 = _1949;
        _1996 = _1951;
    }
    else
    {
        uint _2165 = _1860 + 7u;
        float _2181 = (dot(vec3(cbLight._m0[_1860 + 3u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4057 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2184 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _1992 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _1947;
        _1994 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _1949;
        _1996 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _1951;
    }
    uint _1999 = _1860 + 8u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _668) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1860].x + _580;
    float _2015 = cbLight._m0[_1860].y + _581;
    float _2016 = cbLight._m0[_1860].z + _582;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1860].xyz));
    float _4073 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2028 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _2029 = dot(vec3(_498, _499, _500), vec3(_2021, _2022, _2023));
    float _4095 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2021, _2022, _2023));
    float _4106 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2013 * _2013;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2049 = exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0);
    float _2050 = 0.959999978542327880859375 - _783;
    float _2052 = 0.959999978542327880859375 - _784;
    float _2053 = 0.959999978542327880859375 - _785;
    float _2060 = 1.0 - _2013;
    float _2071 = (0.5 / (((_2028 * ((_2027 * _2060) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2060) + _2013) * _2027))) * _2027;
    float _4117 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    uint _2087 = _1860 + 9u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _668) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1900].x + _580;
    float _2101 = cbLight._m0[_1900].y + _581;
    float _2102 = cbLight._m0[_1900].z + _582;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1900].xyz));
    float _4128 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2114 = dot(vec3(_498, _499, _500), vec3(_2107, _2108, _2109));
    float _4139 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_2107, _2108, _2109));
    float _4150 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2099 * _2099;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2133 = exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0);
    float _2140 = 1.0 - _2099;
    float _2150 = (0.5 / (((_2028 * ((_2113 * _2140) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2140) + _2099) * _2113))) * _2113;
    float _4161 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    float _2162 = (((((_2133 * _2050) + _786) * cbLight._m0[_2087].x) * _2152) * _1883) + ((((cbLight._m0[_1999].x * _1852) * ((_2049 * _2050) + _786)) * _2073) * _1896);
    float _2163 = (((((_2133 * _2052) + _787) * cbLight._m0[_2087].y) * _2152) * _1883) + ((((cbLight._m0[_1999].y * _1853) * ((_2049 * _2052) + _787)) * _2073) * _1896);
    float _2164 = (((((_2133 * _2053) + _788) * cbLight._m0[_2087].z) * _2152) * _1883) + ((((cbLight._m0[_1999].z * _1854) * ((_2049 * _2053) + _788)) * _2073) * _1896);
    float _2226;
    float _2228;
    float _2230;
    if (_1936)
    {
        _2226 = _2162;
        _2228 = _2163;
        _2230 = _2164;
    }
    else
    {
        uint _2232 = _1860 + 2u;
        uint _2236 = _1860 + 10u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _668) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _580;
        float _2253 = cbLight._m0[_2232].y + _581;
        float _2254 = cbLight._m0[_2232].z + _582;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2232].xyz));
        float _4172 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2266 = dot(vec3(_498, _499, _500), vec3(_2259, _2260, _2261));
        float _4183 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4194 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2285 = exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0);
        float _2292 = 1.0 - _2251;
        float _2302 = (0.5 / (((_2028 * ((_2265 * _2292) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2292) + _2251) * _2265))) * _2265;
        float _4205 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2304 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2305 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2226 = (((((_2285 * _2050) + _786) * cbLight._m0[_2236].x) * _2304) * _2305) + _2162;
        _2228 = (((((_2285 * _2052) + _787) * cbLight._m0[_2236].y) * _2304) * _2305) + _2163;
        _2230 = (((((_2285 * _2053) + _788) * cbLight._m0[_2236].z) * _2304) * _2305) + _2164;
    }
    float _2340;
    float _2342;
    float _2344;
    if (_1954)
    {
        _2340 = _2226;
        _2342 = _2228;
        _2344 = _2230;
    }
    else
    {
        uint _2351 = _1860 + 3u;
        uint _2355 = _1860 + 11u;
        float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _668) * 0.949999988079071044921875);
        float _2370 = _2369 * _2369;
        float _2371 = cbLight._m0[_2351].x + _580;
        float _2372 = cbLight._m0[_2351].y + _581;
        float _2373 = cbLight._m0[_2351].z + _582;
        float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
        float _2378 = _2377 * _2371;
        float _2379 = _2377 * _2372;
        float _2380 = _2377 * _2373;
        float _2381 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2351].xyz));
        float _4221 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2385 = dot(vec3(_498, _499, _500), vec3(_2378, _2379, _2380));
        float _4232 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2389 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2378, _2379, _2380));
        float _4243 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2393 = _2370 * _2370;
        float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
        float _2404 = exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0);
        float _2411 = 1.0 - _2370;
        float _2421 = (0.5 / (((_2028 * ((_2384 * _2411) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2411) + _2370) * _2384))) * _2384;
        float _4254 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2423 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
        float _2424 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2340 = (((((_2404 * _2050) + _786) * cbLight._m0[_2355].x) * _2423) * _2424) + _2226;
        _2342 = (((((_2404 * _2052) + _787) * cbLight._m0[_2355].y) * _2423) * _2424) + _2228;
        _2344 = (((((_2404 * _2053) + _788) * cbLight._m0[_2355].z) * _2423) * _2424) + _2230;
    }
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    if (_1858.y == 0u)
    {
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2499;
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2499;
        float _2502 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2499;
        uvec4 _2514 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2515 = _2514.x;
        uint _2526 = uint((float(_2514.y) * floor(float(uint(cbSceneParam._m0[85u].y * _589) / _2515))) + floor(float(uint(cbSceneParam._m0[85u].x * _588) / _2515)));
        float _2536 = (log2(_2502 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2537 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        uint _2540 = uint(isnan(14.0) ? _2537 : (isnan(_2537) ? 14.0 : min(_2537, 14.0)));
        uvec4 _2545 = texelFetch(g_lightClusterGridBuffer, int(((_2540 << 2u) + (_2526 << 6u)) >> 2u));
        uint _2546 = _2545.x;
        uint _2547 = _2514.z;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        if (((((1u << ((_2547 >> 4u) & 15u)) + 4294967295u) & _2546) == 0u) || ((_2547 & 240u) == 0u))
        {
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
        }
        else
        {
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            float _2796 = 0.0;
            float _2797 = 0.0;
            uint _2798 = 0u;
            uint _2807;
            bool _2808;
            for (;;)
            {
                _2807 = texelFetch(g_lightClassification, int((((_2540 << 5u) + (_2526 << 9u)) + (_2798 << 2u)) >> 2u)).x;
                _2808 = _2807 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2808)
                {
                    frontier_phi_63_pred = _2797;
                    frontier_phi_63_pred_1 = _2796;
                    frontier_phi_63_pred_2 = _2795;
                    frontier_phi_63_pred_3 = _2794;
                    frontier_phi_63_pred_4 = _2793;
                    frontier_phi_63_pred_5 = _2792;
                }
                else
                {
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    uint _2922;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2795;
                    _2920 = _2796;
                    _2921 = _2797;
                    _2922 = _2807;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    for (;;)
                    {
                        uint _2926 = uint(findLSB(_2922)) + (_2798 << 5u);
                        uint _2923 = (_2922 + 4294967295u) & _2922;
                        uint _2928 = _2926 * 48u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2948 = (_2926 * 48u) + 4u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2967 = (_2926 * 48u) + 8u;
                        vec3 _2978 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x));
                        float _2982 = _2942.x - _2500;
                        float _2983 = _2942.y - _2501;
                        float _2984 = _2942.z - _2502;
                        float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                        float _2988 = inversesqrt(_2985);
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2992 = dot(vec3(_611, _614, _617), vec3(_2989, _2990, _2991));
                        float _2997 = 1.0 - (_2985 * _2942.w);
                        float _4280 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _2998 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _2999 = sqrt(_2985) * _2961.w;
                        float _3002 = 1.39999997615814208984375 / (_2999 + 1.39999997615814208984375);
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2992) + _3003;
                        float _3009 = _2999 * _2999;
                        float _3013 = ((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2998) / ((_3009 * 0.699999988079071044921875) + 1.0);
                        float _3017 = (-0.0) - _2500;
                        float _3018 = (-0.0) - _2501;
                        float _3019 = (-0.0) - _2502;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3024 = _3023 * _3017;
                        float _3025 = _3023 * _3018;
                        float _3026 = _3023 * _3019;
                        float _3034 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                        float _3035 = 1.0 - _816;
                        float _3042 = sqrt(1.0 - ((1.0 - (_3035 * _3035)) * (1.0 - (_3034 * _3034))));
                        float _3043 = _3042 * _3042;
                        float _3044 = _3043 * _3043;
                        float _3045 = _3024 + _2989;
                        float _3046 = _3025 + _2990;
                        float _3047 = _3026 + _2991;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3055 = dot(vec3(_611, _614, _617), vec3(_3024, _3025, _3026));
                        float _4296 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3058 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _3059 = dot(vec3(_611, _614, _617), vec3(_3051 * _3045, _3051 * _3046, _3051 * _3047));
                        float _4307 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _3066 = ((_3062 * _3062) * (_3044 + (-1.0))) + 1.0;
                        float _3067 = _3002 * _3043;
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _2992) + _3068;
                        float _4318 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3073 = 1.0 - _3043;
                        float _3083 = (0.5 / (((_3072 * ((_3058 * _3073) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_3072 * _3073) + _3043) * _3058))) * _3072;
                        float _4329 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3094 = (((_3044 * 3.1415927410125732421875) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) / ((_3066 * _3066) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125))) * _2998;
                        _2851 = (_3013 * _2961.x) + _2919;
                        _2852 = (_3013 * _2961.y) + _2920;
                        _2853 = (_3013 * _2961.z) + _2921;
                        _2848 = (_3094 * _2978.x) + _2916;
                        _2849 = (_3094 * _2978.y) + _2917;
                        _2850 = (_3094 * _2978.z) + _2918;
                        if (_2923 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2851;
                            _2920 = _2852;
                            _2921 = _2853;
                            _2922 = _2923;
                        }
                    }
                    frontier_phi_63_pred = _2853;
                    frontier_phi_63_pred_1 = _2852;
                    frontier_phi_63_pred_2 = _2851;
                    frontier_phi_63_pred_3 = _2850;
                    frontier_phi_63_pred_4 = _2849;
                    frontier_phi_63_pred_5 = _2848;
                }
                _2659 = frontier_phi_63_pred;
                _2657 = frontier_phi_63_pred_1;
                _2655 = frontier_phi_63_pred_2;
                _2653 = frontier_phi_63_pred_3;
                _2651 = frontier_phi_63_pred_4;
                _2649 = frontier_phi_63_pred_5;
                uint _2799 = _2798 + 1u;
                if (_2799 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2792 = _2649;
                    _2793 = _2651;
                    _2794 = _2653;
                    _2795 = _2655;
                    _2796 = _2657;
                    _2797 = _2659;
                    _2798 = _2799;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
        }
        uvec4 _2662 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2663 = _2662.z;
        uint _2665 = (_2663 >> 8u) & 15u;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        if (((4294967295u << _2665) & _2546) == 0u)
        {
            _2760 = _2648;
            _2762 = _2650;
            _2764 = _2652;
            _2766 = _2654;
            _2768 = _2656;
            _2770 = _2658;
        }
        else
        {
            float _2785 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
            float _2786 = _2785 * _2500;
            float _2787 = _2785 * _2501;
            float _2788 = _2785 * _2502;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2665 < ((_2663 >> 12u) & 15u))
            {
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2769;
                float _2771;
                float _2899 = _2648;
                float _2900 = _2650;
                float _2901 = _2652;
                float _2902 = _2654;
                float _2903 = _2656;
                float _2904 = _2658;
                uint _2905 = _2665;
                uint _2914;
                bool _2915;
                for (;;)
                {
                    _2914 = texelFetch(g_lightClassification, int((((_2540 << 5u) + (_2526 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                    _2915 = _2914 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2915)
                    {
                        frontier_phi_69_pred = _2904;
                        frontier_phi_69_pred_1 = _2903;
                        frontier_phi_69_pred_2 = _2902;
                        frontier_phi_69_pred_3 = _2901;
                        frontier_phi_69_pred_4 = _2900;
                        frontier_phi_69_pred_5 = _2899;
                    }
                    else
                    {
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3112 = _2899;
                        float _3113 = _2900;
                        float _3114 = _2901;
                        float _3115 = _2902;
                        float _3116 = _2903;
                        float _3117 = _2904;
                        uint _3118 = _2914;
                        uint _3119;
                        vec4 _3144;
                        float _3145;
                        vec4 _3160;
                        vec3 _3172;
                        vec4 _3187;
                        vec4 _3203;
                        float _3250;
                        bool _3251;
                        for (;;)
                        {
                            uint _3129 = ((_2905 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3118));
                            _3119 = (_3118 + 4294967295u) & _3118;
                            uint _3131 = _3129 * 40u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            _3145 = _3144.w;
                            uint _3147 = (_3129 * 40u) + 4u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3162 = (_3129 * 40u) + 8u;
                            _3172 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x));
                            uint _3174 = (_3129 * 40u) + 16u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3190 = (_3129 * 40u) + 20u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3206 = (_3129 * 40u) + 24u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3225 = (_3129 * 40u) + 28u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            _3250 = fma(_2502, _3238.z, fma(_2501, _3238.y, _3238.x * _2500)) + _3238.w;
                            _3251 = !((fma(_2502, _3219.z, fma(_2501, _3219.y, _3219.x * _2500)) + _3219.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3251)
                            {
                                float _3278 = _3144.x - _2500;
                                float _3279 = _3144.y - _2501;
                                float _3280 = _3144.z - _2502;
                                float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                                float _3284 = inversesqrt(_3281);
                                float _3285 = _3284 * _3278;
                                float _3286 = _3284 * _3279;
                                float _3287 = _3284 * _3280;
                                float _3291 = 1.0 - (_3281 / (_3145 * _3145));
                                float _4340 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3296 = sqrt(_3281) * _3160.w;
                                float _3298 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                                float _3299 = _3298 * _3298;
                                float _3302 = ((1.0 - _3299) * dot(vec3(_3285, _3286, _3287), vec3(_611, _614, _617))) + _3299;
                                float _3305 = _3296 * _3296;
                                float _3309 = (fma(_2502, _3187.z, fma(_2501, _3187.y, _3187.x * _2500)) + _3187.w) / _3250;
                                float _3310 = (fma(_2502, _3203.z, fma(_2501, _3203.y, _3203.x * _2500)) + _3203.w) / _3250;
                                float _3314 = 1.0 - dot(vec2(_3309, _3310), vec2(_3309, _3310));
                                float _4356 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3316 = _3315 * (((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3292) / ((_3305 * 0.699999988079071044921875) + 1.0));
                                float _3328 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                                float _3329 = 1.0 - _816;
                                float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                                float _3337 = _3336 * _3336;
                                float _3338 = _3337 * _3337;
                                float _3339 = _3285 - _2786;
                                float _3340 = _3286 - _2787;
                                float _3341 = _3287 - _2788;
                                float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                                float _3349 = dot(vec3(_611, _614, _617), vec3((-0.0) - _2786, (-0.0) - _2787, (-0.0) - _2788));
                                float _4367 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3353 = dot(vec3(_611, _614, _617), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                                float _4378 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3356 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                                float _3361 = _3298 * _3337;
                                float _3362 = _3361 * _3361;
                                float _3368 = ((1.0 - _3362) * dot(vec3(_611, _614, _617), vec3(_3285, _3286, _3287))) + _3362;
                                float _4389 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3370 = 1.0 - _3337;
                                float _3380 = (0.5 / (((_3369 * ((_3352 * _3370) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3369 * _3370) + _3337) * _3352))) * _3369;
                                float _4400 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3390 = (_3315 * _3292) * (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) / ((_3360 * _3360) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3316 * _3160.z;
                                frontier_phi_75_pred_1 = _3316 * _3160.y;
                                frontier_phi_75_pred_2 = _3316 * _3160.x;
                                frontier_phi_75_pred_3 = _3390 * _3172.z;
                                frontier_phi_75_pred_4 = _3390 * _3172.y;
                                frontier_phi_75_pred_5 = _3390 * _3172.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3399 = frontier_phi_75_pred;
                            _3398 = frontier_phi_75_pred_1;
                            _3397 = frontier_phi_75_pred_2;
                            _3396 = frontier_phi_75_pred_3;
                            _3395 = frontier_phi_75_pred_4;
                            _3394 = frontier_phi_75_pred_5;
                            _3102 = _3397 + _3115;
                            _3103 = _3398 + _3116;
                            _3104 = _3399 + _3117;
                            _3099 = _3394 + _3112;
                            _3100 = _3395 + _3113;
                            _3101 = _3396 + _3114;
                            if (_3119 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3119;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3104;
                        frontier_phi_69_pred_1 = _3103;
                        frontier_phi_69_pred_2 = _3102;
                        frontier_phi_69_pred_3 = _3101;
                        frontier_phi_69_pred_4 = _3100;
                        frontier_phi_69_pred_5 = _3099;
                    }
                    _2771 = frontier_phi_69_pred;
                    _2769 = frontier_phi_69_pred_1;
                    _2767 = frontier_phi_69_pred_2;
                    _2765 = frontier_phi_69_pred_3;
                    _2763 = frontier_phi_69_pred_4;
                    _2761 = frontier_phi_69_pred_5;
                    uint _2906 = _2905 + 1u;
                    if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2899 = _2761;
                        _2900 = _2763;
                        _2901 = _2765;
                        _2902 = _2767;
                        _2903 = _2769;
                        _2904 = _2771;
                        _2905 = _2906;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2771;
                frontier_phi_57_58_ladder_1 = _2769;
                frontier_phi_57_58_ladder_2 = _2767;
                frontier_phi_57_58_ladder_3 = _2765;
                frontier_phi_57_58_ladder_4 = _2763;
                frontier_phi_57_58_ladder_5 = _2761;
            }
            else
            {
                frontier_phi_57_58_ladder = _2658;
                frontier_phi_57_58_ladder_1 = _2656;
                frontier_phi_57_58_ladder_2 = _2654;
                frontier_phi_57_58_ladder_3 = _2652;
                frontier_phi_57_58_ladder_4 = _2650;
                frontier_phi_57_58_ladder_5 = _2648;
            }
            _2760 = frontier_phi_57_58_ladder_5;
            _2762 = frontier_phi_57_58_ladder_4;
            _2764 = frontier_phi_57_58_ladder_3;
            _2766 = frontier_phi_57_58_ladder_2;
            _2768 = frontier_phi_57_58_ladder_1;
            _2770 = frontier_phi_57_58_ladder;
        }
        float _2775 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
        _2558 = (_2775 * _2766) + _1992;
        _2560 = (_2775 * _2768) + _1994;
        _2562 = (_2775 * _2770) + _1996;
        _2564 = ((_2760 * _786) * _2775) + _2340;
        _2566 = ((_2762 * _787) * _2775) + _2342;
        _2568 = ((_2764 * _788) * _2775) + _2344;
    }
    else
    {
        _2558 = _1992;
        _2560 = _1994;
        _2562 = _1996;
        _2564 = _2340;
        _2566 = _2342;
        _2568 = _2344;
    }
    float _4416 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4427 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4438 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4449 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _2593 = cbInstanceData._m0[_692 + 6u].w * (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)));
    float _2598 = _588 / cbSceneParam._m0[86u].x;
    float _2599 = _589 / cbSceneParam._m0[86u].y;
    vec4 _2613 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2598, _2599, (log2((isnan(cbSceneParam._m0[77u].w) ? _522 : (isnan(_522) ? cbSceneParam._m0[77u].w : min(_522, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2615 = _2613.x;
    float _2616 = _2613.y;
    float _2617 = _2613.z;
    float _2618 = _2613.w;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    if (_522 > cbSceneParam._m0[78u].w)
    {
        float _2673 = isnan(_522) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _522 : min(cbSceneParam._m0[80u].w, _522));
        float _2674 = _2673 / _522;
        float _2685 = _2674 * _573;
        float _2686 = _574 * _2674;
        float _2687 = (-0.0) - _2686;
        float _2688 = _2674 * _575;
        float _2690 = (cbSceneParam._m0[77u].w * _2687) / _2673;
        float _2691 = _2690 + cbSceneParam._m0[79u].w;
        float _2692 = cbSceneParam._m0[79u].w - _2686;
        float _2698 = sqrt(((_2685 * _2685) + (_2686 * _2686)) + (_2688 * _2688));
        float _2701 = (1.0 - (cbSceneParam._m0[77u].w / _2673)) * _2698;
        float _2706 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2708 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2861;
        if (abs((_2687 - _2690) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2861 = ((((_2691 > 0.0) ? exp2(_2706 * _2691) : (2.0 - exp2(_2708 * _2691))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2701;
        }
        else
        {
            float _2821 = 1.0 / cbSceneParam._m0[80u].x;
            float _2822 = isnan(_2692) ? _2691 : (isnan(_2691) ? _2692 : max(_2691, _2692));
            float _2823 = isnan(_2692) ? _2691 : (isnan(_2691) ? _2692 : min(_2691, _2692));
            float _2832 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : min(_2822, 0.0));
            float _2833 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : min(_2823, 0.0));
            _2861 = ((abs(_2698 / _2687) * cbSceneParam._m0[80u].y) * ((((_2832 - _2833) * 2.0) - ((exp2(_2706 * (isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0)))) - exp2(_2706 * (isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))))) * _2821)) - ((exp2(_2708 * _2832) - exp2(_2708 * _2833)) * _2821))) + (_2701 * cbSceneParam._m0[80u].z);
        }
        vec4 _2863 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2598, _2599, 1.0), 0.0);
        float _2872 = exp2((_2861 * (-1.44269502162933349609375)) * (1.0 - _2863.w));
        float _2873 = log2(_2872);
        float _2889 = log2(_2618);
        _2710 = (exp2(_2889 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].x)) * _2863.x) / cbSceneParam._m0[78u].x)) + _2615;
        _2712 = (exp2(_2889 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].y)) * _2863.y) / cbSceneParam._m0[78u].y)) + _2616;
        _2714 = (exp2(_2889 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].z)) * _2863.z) / cbSceneParam._m0[78u].z)) + _2617;
        _2716 = _2872 * _2618;
    }
    else
    {
        _2710 = _2615;
        _2712 = _2616;
        _2714 = _2617;
        _2716 = _2618;
    }
    float _2728 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2729 = _2728 == 3.0;
    float _2730 = log2(_2716);
    float _2737 = exp2(_2730 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2558 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _800))) + ((_2564 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2738 = exp2(_2730 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2560 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _800))) + ((_2566 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2739 = exp2(_2730 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2562 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _800))) + ((_2568 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2748 = (_2728 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2748 * (_2729 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2710)));
    SV_Target.y = _2748 * (_2729 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2712)));
    SV_Target.z = _2748 * (_2729 ? _2739 : (_2739 + (cbSceneParam._m0[72u].w * _2714)));
    SV_Target.w = _2593;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2593;
}


