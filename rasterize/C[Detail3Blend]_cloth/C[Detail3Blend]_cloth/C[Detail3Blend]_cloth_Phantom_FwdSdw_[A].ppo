#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Detail3Blend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D C_Detail3Blend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Detail3Blend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Detail3Blend_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Detail3Blend_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Detail3Blend_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_Detail3Blend_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D C_Detail3Blend_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1222;
float _3973;
float _3974;
float _3975;
float _3976;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _252 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _252.w;
    float _264 = exp2(log2(1.0 - _258) * 10.0);
    vec4 _277 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _302 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _313 = cbMtdParam._m0[9u].x * _302.x;
    float _314 = cbMtdParam._m0[9u].y * _302.y;
    float _315 = cbMtdParam._m0[9u].z * _302.z;
    float _322 = (((cbMtdParam._m0[10u].x * _277.x) - _313) * _264) + _313;
    float _323 = (((cbMtdParam._m0[10u].y * _277.y) - _314) * _264) + _314;
    float _324 = (((cbMtdParam._m0[10u].z * _277.z) - _315) * _264) + _315;
    float _327 = exp2(log2(_258) * 10.0);
    vec4 _339 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _373 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _378 = _373.w;
    float _381 = (((((cbMtdParam._m0[11u].x * _339.x) - _322) * _327) + _322) * 4.55000019073486328125) * _373.x;
    float _383 = (((((cbMtdParam._m0[11u].y * _339.y) - _323) * _327) + _323) * 4.55000019073486328125) * _373.y;
    float _385 = (((((cbMtdParam._m0[11u].z * _339.z) - _324) * _327) + _324) * 4.55000019073486328125) * _373.z;
    vec4 _402 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _421 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _423 = _421.x;
    float _424 = _421.y;
    float _427 = cbMtdParam._m0[12u].x + _421.z;
    float _430 = (((cbMtdParam._m0[12u].y + _402.z) - _427) * _264) + _427;
    vec4 _443 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _458 = (_252.z * 2.0) * ((((_443.z - _430) + cbMtdParam._m0[13u].x) * _327) + _430);
    float _469 = ((_402.x - _423) * _264) + _423;
    float _470 = ((_402.y - _424) * _264) + _424;
    float _479 = ((((_443.x - _469) * _327) + _469) * 2.0) + (-1.0);
    float _480 = ((((_443.y - _470) * _327) + _470) * 2.0) + (-1.0);
    float _481 = dot(vec2(_479, _480), vec2(_479, _480));
    float _3985 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))));
    float _489 = _479 + (cbMtdParam._m0[12u].z * ((_252.x * 2.0) + (-1.0)));
    float _490 = _480 + (cbMtdParam._m0[12u].z * ((_252.y * 2.0) + (-1.0)));
    float _493 = fma(_486, _236, fma(_490, _228 * TANGENT.x, (_214 * _206) * _489));
    float _496 = fma(_486, _237, fma(_490, _228 * TANGENT.y, (_214 * _207) * _489));
    float _499 = fma(_486, _238, fma(_490, _228 * TANGENT.z, (_214 * _208) * _489));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    float _504 = _503 * _493;
    float _505 = _503 * _496;
    float _506 = _503 * _499;
    float _3996 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _507 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _508 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _509 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _510 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _511 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? cbMtdParam._m0[12u].w : (isnan(cbMtdParam._m0[12u].w) ? 0.0 : max(cbMtdParam._m0[12u].w, 0.0));
    float _512 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _528 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _579 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _569);
    float _580 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _569);
    float _581 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _569);
    float _585 = inversesqrt(dot(vec3(_579, _580, _581), vec3(_579, _580, _581)));
    float _586 = _579 * _585;
    float _587 = _580 * _585;
    float _588 = _581 * _585;
    vec4 _593 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _595 = _593.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _901 = sqrt(((_579 * _579) + (_580 * _580)) + (_581 * _581));
        float _907 = (cbMatDynParam._m0[5u].x * _901) + cbMatDynParam._m0[5u].y;
        float _4062 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _912 = (cbMatDynParam._m0[5u].z * _901) + cbMatDynParam._m0[5u].w;
        float _4073 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) - _908)) + _908) < ((_595 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _606 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _607 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _609 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _611 = _609.w;
    float _629 = fma(_506, cbSceneParam._m0[5u].z, fma(_505, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _504));
    float _632 = fma(_506, cbSceneParam._m0[6u].z, fma(_505, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _504));
    float _635 = fma(_506, cbSceneParam._m0[7u].z, fma(_505, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _504));
    vec4 _637 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _639 = _637.x;
    float _651 = (((_637.y - _508) + (_637.w * _508)) * cbMtdParam._m0[3u].x) + _508;
    vec4 _652 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _668 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_639 * _639)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _652.z;
    float _677 = (((cbMatDynParam._m0[15u].x - _512) * cbMatDynParam._m0[15u].w) * _668) + _512;
    float _686 = ((_668 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _651)) + _651;
    uint _710 = uint(roundEven(NORMAL.w)) * 13u;
    uint _711 = _710 + 9u;
    uint _712 = _711 + uint(cbMatDynParam._m0[0u].w);
    float _718 = (cbMtdParam._m0[0u].x * _509) * cbInstanceData._m0[_712].x;
    float _719 = (cbMtdParam._m0[0u].y * _510) * cbInstanceData._m0[_712].y;
    float _720 = (cbMtdParam._m0[0u].z * _511) * cbInstanceData._m0[_712].z;
    float _4084 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    vec4 _724 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _729 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _740 = (((_729.x - _677) + (_729.w * _677)) * cbMtdParam._m0[3u].x) + _677;
    float _753 = (cbMtdParam._m0[3u].x * (((_721 * _611) - _721) + _724.x)) + _721;
    float _754 = (cbMtdParam._m0[3u].x * (((_722 * _611) - _722) + _724.y)) + _722;
    float _755 = (cbMtdParam._m0[3u].x * (((_723 * _611) - _723) + _724.z)) + _723;
    float _769 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_677 * (_509 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_677 * (_510 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_677 * (_511 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _773 = _769 * cbMatDynParam._m0[13u].w;
    float _783 = (_773 * (cbMatDynParam._m0[13u].x - _753)) + _753;
    float _784 = (_773 * (cbMatDynParam._m0[13u].y - _754)) + _754;
    float _785 = (_773 * (cbMatDynParam._m0[13u].z - _755)) + _755;
    float _793 = ((_769 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _740)) + _740;
    float _794 = 1.0 - _793;
    float _801 = (_783 + (-0.039999999105930328369140625)) * _793;
    float _802 = (_784 + (-0.039999999105930328369140625)) * _793;
    float _803 = (_785 + (-0.039999999105930328369140625)) * _793;
    float _804 = _801 + 0.039999999105930328369140625;
    float _805 = _802 + 0.039999999105930328369140625;
    float _806 = _803 + 0.039999999105930328369140625;
    vec4 _815 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _606, cbSceneParam._m0[86u].y * _607));
    float _818 = _815.x * TEXCOORD_4;
    float _819 = dot(vec3(_504, _505, _506), vec3(_586, _587, _588));
    float _822 = _819 * 2.0;
    float _826 = (_822 * _504) - _586;
    float _827 = (_822 * _505) - _587;
    float _828 = (_822 * _506) - _588;
    float _832 = abs(dot(vec3(_586, _587, _588), vec3(_504, _505, _506)));
    float _4117 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _834 = sqrt(_686);
    float _847 = exp2((_834 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_834 * 3.0));
    float _853 = (1.0 - _847) * ((_834 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _854 = _847 * _834;
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1221;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _946 = fma(_890, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _882));
        float _950 = fma(_890, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _882));
        float _954 = fma(_890, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _882));
        float _979 = _882 + _504;
        float _980 = _886 + _505;
        float _981 = _890 + _506;
        float _991 = fma(_981, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979)) - _946;
        float _992 = fma(_981, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979)) - _950;
        float _993 = fma(_981, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979)) - _954;
        float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
        float _1010 = ((_997 * _991) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_946 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_997 * _992) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_950 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_997 * _993) / cbModelParam._m0[34u].z) + ((((((_954 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        float _1049 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1015.x + (-0.5));
        float _1051 = _1049 * (_1015.y + (-0.5));
        float _1052 = _1049 * (_1015.z + (-0.5));
        float _1059 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1022.x + (-0.5));
        float _1061 = _1059 * (_1022.y + (-0.5));
        float _1062 = _1059 * (_1022.z + (-0.5));
        float _1069 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1029.x + (-0.5));
        float _1071 = _1069 * (_1029.y + (-0.5));
        float _1072 = _1069 * (_1029.z + (-0.5));
        float _1079 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1036.x + (-0.5));
        float _1081 = _1079 * (_1036.y + (-0.5));
        float _1082 = _1079 * (_1036.z + (-0.5));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = _1050 * 0.5;
        float _1087 = _1060 * 0.5;
        float _1088 = _1070 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1103 = (dot(vec3(_504, _505, _506), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1113 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _4165 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1115 + 1.0))) + _1120) * _1083;
        float _1130 = _1051 * 0.5;
        float _1131 = _1061 * 0.5;
        float _1132 = _1071 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_504, _505, _506), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _4198 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1157 + 1.0))) + _1162) * _1084;
        float _1172 = _1052 * 0.5;
        float _1173 = _1062 * 0.5;
        float _1174 = _1072 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_504, _505, _506), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _4231 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1199 + 1.0))) + _1204) * _1085;
        _1221 = _1052;
        _1223 = _1051;
        _1224 = _1050;
        _1225 = _1062;
        _1226 = _1061;
        _1227 = _1060;
        _1228 = _1072;
        _1229 = _1071;
        _1230 = _1070;
        _1231 = _1085;
        _1232 = _1084;
        _1233 = _1083;
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
    }
    else
    {
        _1221 = _1222;
        _1223 = _1222;
        _1224 = _1222;
        _1225 = _1222;
        _1226 = _1222;
        _1227 = _1222;
        _1228 = _1222;
        _1229 = _1222;
        _1230 = _1222;
        _1231 = _1222;
        _1232 = _1222;
        _1233 = _1222;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1265 = fma(_890, cbModelParam._m0[30u].z, fma(_886, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _882));
        float _1269 = fma(_890, cbModelParam._m0[31u].z, fma(_886, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _882));
        float _1273 = fma(_890, cbModelParam._m0[32u].z, fma(_886, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _882));
        float _1296 = _882 + _504;
        float _1297 = _886 + _505;
        float _1298 = _890 + _506;
        float _1308 = fma(_1298, cbModelParam._m0[30u].z, fma(_1297, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1296)) - _1265;
        float _1309 = fma(_1298, cbModelParam._m0[31u].z, fma(_1297, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1296)) - _1269;
        float _1310 = fma(_1298, cbModelParam._m0[32u].z, fma(_1297, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1296)) - _1273;
        float _1314 = inversesqrt(dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310)));
        float _1327 = ((_1314 * _1308) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1265 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1314 * _1309) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1269 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1314 * _1310) / cbModelParam._m0[35u].z) + ((((((_1273 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        float _1364 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1331.x + (-0.5));
        float _1366 = _1364 * (_1331.y + (-0.5));
        float _1367 = _1364 * (_1331.z + (-0.5));
        float _1374 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1338.x + (-0.5));
        float _1376 = _1374 * (_1338.y + (-0.5));
        float _1377 = _1374 * (_1338.z + (-0.5));
        float _1384 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1345.x + (-0.5));
        float _1386 = _1384 * (_1345.y + (-0.5));
        float _1387 = _1384 * (_1345.z + (-0.5));
        float _1394 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1352.x + (-0.5));
        float _1396 = _1394 * (_1352.y + (-0.5));
        float _1397 = _1394 * (_1352.z + (-0.5));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = _1365 * 0.5;
        float _1402 = _1375 * 0.5;
        float _1403 = _1385 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_504, _505, _506), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4294 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1428 + 1.0))) + _1433) * _1398;
        float _1443 = _1366 * 0.5;
        float _1444 = _1376 * 0.5;
        float _1445 = _1386 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_504, _505, _506), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4327 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1470 + 1.0))) + _1475) * _1399;
        float _1485 = _1367 * 0.5;
        float _1486 = _1377 * 0.5;
        float _1487 = _1387 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_504, _505, _506), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4360 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1512 + 1.0))) + _1517) * _1400;
        _1534 = _1367;
        _1535 = _1366;
        _1536 = _1365;
        _1537 = _1377;
        _1538 = _1376;
        _1539 = _1375;
        _1540 = _1387;
        _1541 = _1386;
        _1542 = _1385;
        _1543 = _1400;
        _1544 = _1399;
        _1545 = _1398;
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
    }
    else
    {
        _1534 = _1222;
        _1535 = _1222;
        _1536 = _1222;
        _1537 = _1222;
        _1538 = _1222;
        _1539 = _1222;
        _1540 = _1222;
        _1541 = _1222;
        _1542 = _1222;
        _1543 = _1222;
        _1544 = _1222;
        _1545 = _1222;
        _1546 = 0.0;
        _1547 = 0.0;
        _1548 = 0.0;
    }
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1234)) + _1234;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1235)) + _1235;
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1236)) + _1236;
    float _1581 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1558));
    float _1602 = _826 * 0.5;
    float _1603 = _827 * 0.5;
    float _1604 = _828 * 0.5;
    float _1605 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1608 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1611 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1642;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1618 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1221, _1225, _1228, _1231));
        float _1622 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1223, _1226, _1229, _1232));
        float _1626 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1224, _1227, _1230, _1233));
        float _1633 = dot(vec4(cbModelParam._m0[39u]), vec4(_1602, _1603, _1604, 1.0));
        _1642 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1633) ? 0.0 : (isnan(0.0) ? _1633 : max(0.0, _1633))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1642 = 1.0;
    }
    float _1653;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1644 = dot(vec4(cbModelParam._m0[40u]), vec4(_1602, _1603, _1604, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1644) ? 0.0 : (isnan(0.0) ? _1644 : max(0.0, _1644))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1657 = (_1653 * cbModelParam._m0[1u].x) + (_1642 * (1.0 - cbModelParam._m0[1u].x));
    float _1667 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _686);
    float _1668 = isnan(_1667) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1667 : min(cbModelParam._m0[25u].z, _1667));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1715 = fma(_890, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _882)) + cbModelParam._m0[13u].w;
        float _1719 = fma(_890, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _882)) + cbModelParam._m0[14u].w;
        float _1723 = fma(_890, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _882)) + cbModelParam._m0[15u].w;
        float _1726 = fma(_828, cbModelParam._m0[13u].z, fma(_827, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _826));
        float _1729 = fma(_828, cbModelParam._m0[14u].z, fma(_827, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _826));
        float _1732 = fma(_828, cbModelParam._m0[15u].z, fma(_827, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _826));
        float _1760;
        if (_1726 > 0.0)
        {
            _1760 = abs((1.0 - _1715) / _1726);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1715 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1760 = frontier_phi_19_17_ladder;
        }
        float _1935;
        if (_1729 > 0.0)
        {
            _1935 = abs((1.0 - _1719) / _1729);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1719 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1935 = frontier_phi_28_24_ladder;
        }
        float _2230;
        if (_1732 > 0.0)
        {
            _2230 = abs((1.0 - _1723) / _1732);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1723 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2230 = frontier_phi_40_35_ladder;
        }
        float _2232 = isnan(_1935) ? _1760 : (isnan(_1760) ? _1935 : min(_1760, _1935));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1726) + _1715;
        float _2238 = (_2233 * _1729) + _1719;
        float _2239 = (_2233 * _1732) + _1723;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2242 = (-1.0) - _2240;
        float _2244 = _2240 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2239 > _2244) || ((_2239 < _2242) || ((_2238 > _2244) || ((_2238 < _2242) || ((_2237 < _2242) || (_2237 > _2244))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2239, cbModelParam._m0[9u].z, fma(_2238, cbModelParam._m0[9u].y, _2237 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2239, cbModelParam._m0[10u].z, fma(_2238, cbModelParam._m0[10u].y, _2237 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2239, cbModelParam._m0[11u].z, fma(_2238, cbModelParam._m0[11u].y, _2237 * cbModelParam._m0[11u].x))), _1668);
            frontier_phi_18_40_ladder = _2384.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2384.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2384.x * cbModelParam._m0[1u].y;
        }
        _1748 = frontier_phi_18_40_ladder_2;
        _1750 = frontier_phi_18_40_ladder_1;
        _1752 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_826, _827, _828), _1668);
        _1748 = _1736.x * cbModelParam._m0[1u].y;
        _1750 = _1736.y * cbModelParam._m0[1u].y;
        _1752 = _1736.z * cbModelParam._m0[1u].y;
    }
    float _1756 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _686);
    float _1757 = isnan(_1756) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1756 : min(cbModelParam._m0[25u].w, _1756));
    float _1850;
    float _1852;
    float _1854;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1814 = fma(_890, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _882)) + cbModelParam._m0[21u].w;
        float _1818 = fma(_890, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _882)) + cbModelParam._m0[22u].w;
        float _1822 = fma(_890, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _882)) + cbModelParam._m0[23u].w;
        float _1825 = fma(_828, cbModelParam._m0[21u].z, fma(_827, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _826));
        float _1828 = fma(_828, cbModelParam._m0[22u].z, fma(_827, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _826));
        float _1831 = fma(_828, cbModelParam._m0[23u].z, fma(_827, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _826));
        float _1940;
        if (_1825 > 0.0)
        {
            _1940 = abs((1.0 - _1814) / _1825);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1814 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1940 = frontier_phi_30_26_ladder;
        }
        float _2257;
        if (_1828 > 0.0)
        {
            _2257 = abs((1.0 - _1818) / _1828);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1818 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2257 = frontier_phi_42_37_ladder;
        }
        float _2595;
        if (_1831 > 0.0)
        {
            _2595 = abs((1.0 - _1822) / _1831);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1822 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2595 = frontier_phi_52_49_ladder;
        }
        float _2597 = isnan(_2257) ? _1940 : (isnan(_1940) ? _2257 : min(_1940, _2257));
        float _2598 = isnan(_2595) ? _2597 : (isnan(_2597) ? _2595 : min(_2597, _2595));
        float _2602 = (_2598 * _1825) + _1814;
        float _2603 = (_2598 * _1828) + _1818;
        float _2604 = (_2598 * _1831) + _1822;
        float _2605 = _2598 * 9.9999997473787516355514526367188e-05;
        float _2606 = (-1.0) - _2605;
        float _2608 = _2605 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2604 > _2608) || ((_2604 < _2606) || ((_2603 > _2608) || ((_2603 < _2606) || ((_2602 < _2606) || (_2602 > _2608))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2604, cbModelParam._m0[17u].z, fma(_2603, cbModelParam._m0[17u].y, _2602 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2604, cbModelParam._m0[18u].z, fma(_2603, cbModelParam._m0[18u].y, _2602 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2604, cbModelParam._m0[19u].z, fma(_2603, cbModelParam._m0[19u].y, _2602 * cbModelParam._m0[19u].x))), _1757);
            frontier_phi_27_52_ladder = _2726.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2726.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2726.x * cbModelParam._m0[1u].z;
        }
        _1850 = frontier_phi_27_52_ladder_2;
        _1852 = frontier_phi_27_52_ladder_1;
        _1854 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_826, _827, _828), _1757);
        _1850 = _1834.x * cbModelParam._m0[1u].z;
        _1852 = _1834.y * cbModelParam._m0[1u].z;
        _1854 = _1834.z * cbModelParam._m0[1u].z;
    }
    float _1867 = (((_853 * _804) + _854) * _818) * ((cbModelParam._m0[1u].w * (_1850 - _1748)) + _1748);
    float _1869 = (((_853 * _805) + _854) * _818) * ((cbModelParam._m0[1u].w * (_1852 - _1750)) + _1750);
    float _1871 = (((_853 * _806) + _854) * _818) * ((cbModelParam._m0[1u].w * (_1854 - _1752)) + _1752);
    float _1874 = fma(_1871, cbSceneParam._m0[89u].z, fma(_1869, cbSceneParam._m0[89u].y, _1867 * cbSceneParam._m0[89u].x));
    float _1877 = fma(_1871, cbSceneParam._m0[90u].z, fma(_1869, cbSceneParam._m0[90u].y, _1867 * cbSceneParam._m0[90u].x));
    float _1880 = fma(_1871, cbSceneParam._m0[91u].z, fma(_1869, cbSceneParam._m0[91u].y, _1867 * cbSceneParam._m0[91u].x));
    float _1914 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1918 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1922 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1926 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1927 = _1914 / _1926;
    float _1928 = _1918 / _1926;
    float _1929 = _1922 / _1926;
    float _2076;
    float _2077;
    float _2078;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1956 = ((uint(_1929 > cbSceneParam._m0[59u].y) + uint(_1929 > cbSceneParam._m0[59u].x)) + uint(_1929 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1957 = _1956 + 43u;
        uint _1965 = _1956 + 44u;
        uint _1973 = _1956 + 45u;
        uint _1981 = _1956 + 46u;
        float _1992 = fma(_1926, cbSceneParam._m0[_1957].w, fma(_1922, cbSceneParam._m0[_1957].z, fma(_1918, cbSceneParam._m0[_1957].y, _1914 * cbSceneParam._m0[_1957].x)));
        float _1996 = fma(_1926, cbSceneParam._m0[_1965].w, fma(_1922, cbSceneParam._m0[_1965].z, fma(_1918, cbSceneParam._m0[_1965].y, _1914 * cbSceneParam._m0[_1965].x)));
        float _2004 = fma(_1926, cbSceneParam._m0[_1981].w, fma(_1922, cbSceneParam._m0[_1981].z, fma(_1918, cbSceneParam._m0[_1981].y, _1914 * cbSceneParam._m0[_1981].x)));
        float _2009 = cbSceneParam._m0[33u].z * _2004;
        float _2011 = cbSceneParam._m0[33u].w * _2004;
        float _2014 = fma(_1926, cbSceneParam._m0[_1973].w, fma(_1922, cbSceneParam._m0[_1973].z, fma(_1918, cbSceneParam._m0[_1973].y, _1914 * cbSceneParam._m0[_1973].x))) / _2004;
        float _2062 = (cbSceneParam._m0[33u].x - sqrt(((_1928 * _1928) + (_1927 * _1927)) + (_1929 * _1929))) * cbSceneParam._m0[33u].y;
        float _4486 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2069 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2009 + _1992) / _2004, (_2011 + _1996) / _2004), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2011 + _1992) / _2004, (_1996 - _2009) / _2004), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1992 - _2009) / _2004, (_1996 - _2011) / _2004), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1992 - _2011) / _2004, (_2009 + _1996) / _2004), _2014), 0.0)).x), vec4(0.25)));
        _2076 = 1.0 - (_2069 * cbSceneParam._m0[34u].x);
        _2077 = 1.0 - (_2069 * cbSceneParam._m0[34u].y);
        _2078 = 1.0 - (_2069 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2076 = 1.0;
        _2077 = 1.0;
        _2078 = 1.0;
    }
    float _2142;
    float _2144;
    float _2146;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2130 = fma(_1926, cbSceneParam._m0[63u].w, fma(_1922, cbSceneParam._m0[63u].z, fma(_1918, cbSceneParam._m0[63u].y, _1914 * cbSceneParam._m0[63u].x)));
        float _2131 = fma(_1926, cbSceneParam._m0[60u].w, fma(_1922, cbSceneParam._m0[60u].z, fma(_1918, cbSceneParam._m0[60u].y, _1914 * cbSceneParam._m0[60u].x))) / _2130;
        float _2132 = fma(_1926, cbSceneParam._m0[61u].w, fma(_1922, cbSceneParam._m0[61u].z, fma(_1918, cbSceneParam._m0[61u].y, _1914 * cbSceneParam._m0[61u].x))) / _2130;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2131 >= cbSceneParam._m0[64u].x) && (_2132 >= cbSceneParam._m0[64u].y)) && (_2131 <= cbSceneParam._m0[64u].z)) && (_2132 <= cbSceneParam._m0[64u].w))
        {
            float _2270 = fma(_1926, cbSceneParam._m0[62u].w, fma(_1922, cbSceneParam._m0[62u].z, fma(_1918, cbSceneParam._m0[62u].y, _1914 * cbSceneParam._m0[62u].x))) / _2130;
            float _2274 = isnan(cbSceneParam._m0[41u].w) ? _2270 : (isnan(_2270) ? cbSceneParam._m0[41u].w : max(_2270, cbSceneParam._m0[41u].w));
            float _2317 = (cbSceneParam._m0[33u].x - sqrt(((_1928 * _1928) + (_1927 * _1927)) + (_1929 * _1929))) * cbSceneParam._m0[33u].y;
            float _4502 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
            float _2324 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2131, cbSceneParam._m0[33u].w + _2132), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2131, _2132 - cbSceneParam._m0[33u].z), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2131 - cbSceneParam._m0[33u].z, _2132 - cbSceneParam._m0[33u].w), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2131 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2132), _2274), 0.0)).x), vec4(0.25)));
            float _2328 = 1.0 - (_2324 * cbSceneParam._m0[34u].x);
            float _2329 = 1.0 - (_2324 * cbSceneParam._m0[34u].y);
            float _2330 = 1.0 - (_2324 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2329) ? _2077 : (isnan(_2077) ? _2329 : min(_2077, _2329));
            frontier_phi_39_38_ladder_1 = isnan(_2328) ? _2076 : (isnan(_2076) ? _2328 : min(_2076, _2328));
            frontier_phi_39_38_ladder_2 = isnan(_2330) ? _2078 : (isnan(_2078) ? _2330 : min(_2078, _2330));
        }
        else
        {
            frontier_phi_39_38_ladder = _2077;
            frontier_phi_39_38_ladder_1 = _2076;
            frontier_phi_39_38_ladder_2 = _2078;
        }
        _2142 = frontier_phi_39_38_ladder_1;
        _2144 = frontier_phi_39_38_ladder;
        _2146 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2142 = _2076;
        _2144 = _2077;
        _2146 = _2078;
    }
    uvec4 _2151 = floatBitsToUint(cbInstanceData._m0[_710 + 5u]);
    uint _2153 = _2151.x * 14u;
    uint _2154 = _2153 + 13u;
    float _2161 = _818 + (-1.0);
    float _2166 = (cbLight._m0[_2154].x * _2161) + 1.0;
    float _2167 = (cbLight._m0[_2154].y * _2161) + 1.0;
    float _2168 = (cbLight._m0[_2154].z * _2161) + 1.0;
    float _2169 = (cbLight._m0[_2154].w * _2161) + 1.0;
    uint _2170 = _2153 + 5u;
    float _2176 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
    uint _2180 = _2153 + 4u;
    float _2189 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2193 = _2153 | 1u;
    float _2204 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_504, _505, _506));
    float _2207 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_504, _505, _506));
    float _4538 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _4549 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2212 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * 0.3183098733425140380859375;
    float _2214 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * 0.3183098733425140380859375;
    float _2221 = ((cbLight._m0[_2170].x * _2176) * _2214) + (((cbLight._m0[_2180].x * _2142) * _2189) * _2212);
    float _2222 = ((_2176 * cbLight._m0[_2170].y) * _2214) + (((cbLight._m0[_2180].y * _2144) * _2189) * _2212);
    float _2223 = ((_2176 * cbLight._m0[_2170].z) * _2214) + (((cbLight._m0[_2180].z * _2146) * _2189) * _2212);
    uvec4 _2227 = floatBitsToUint(cbLight._m0[_2153 + 12u]);
    bool _2229 = _2227.x == 0u;
    float _2331;
    float _2333;
    float _2335;
    if (_2229)
    {
        _2331 = _2221;
        _2333 = _2222;
        _2335 = _2223;
    }
    else
    {
        uint _2339 = _2153 + 6u;
        float _2355 = (dot(vec3(cbLight._m0[_2153 + 2u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2356 = _2355 * _2355;
        float _4560 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2357 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2358 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2331 = (((cbLight._m0[_2339].x * 0.3183098733425140380859375) * _2357) * _2358) + _2221;
        _2333 = (((cbLight._m0[_2339].y * 0.3183098733425140380859375) * _2357) * _2358) + _2222;
        _2335 = (((cbLight._m0[_2339].z * 0.3183098733425140380859375) * _2357) * _2358) + _2223;
    }
    bool _2338 = _2227.y == 0u;
    float _2393;
    float _2395;
    float _2397;
    if (_2338)
    {
        _2393 = _2331;
        _2395 = _2333;
        _2397 = _2335;
    }
    else
    {
        uint _2566 = _2153 + 7u;
        float _2582 = (dot(vec3(cbLight._m0[_2153 + 3u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2583 = _2582 * _2582;
        float _4576 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2584 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2585 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2393 = (((cbLight._m0[_2566].x * 0.3183098733425140380859375) * _2584) * _2585) + _2331;
        _2395 = (((cbLight._m0[_2566].y * 0.3183098733425140380859375) * _2584) * _2585) + _2333;
        _2397 = (((cbLight._m0[_2566].z * 0.3183098733425140380859375) * _2584) * _2585) + _2335;
    }
    uint _2400 = _2153 + 8u;
    float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _686) * 0.949999988079071044921875);
    float _2414 = _2413 * _2413;
    float _2415 = cbLight._m0[_2153].x + _586;
    float _2416 = cbLight._m0[_2153].y + _587;
    float _2417 = cbLight._m0[_2153].z + _588;
    float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
    float _2422 = _2421 * _2415;
    float _2423 = _2421 * _2416;
    float _2424 = _2421 * _2417;
    float _2425 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2153].xyz));
    float _4592 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _4603 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _2429 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2430 = dot(vec3(_504, _505, _506), vec3(_2422, _2423, _2424));
    float _4614 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2434 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2422, _2423, _2424));
    float _4625 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2438 = _2414 * _2414;
    float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
    float _2450 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
    float _2451 = 0.959999978542327880859375 - _801;
    float _2453 = 0.959999978542327880859375 - _802;
    float _2454 = 0.959999978542327880859375 - _803;
    float _2461 = 1.0 - _2414;
    float _2472 = (0.5 / (((_2429 * ((_2428 * _2461) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2429 * _2461) + _2414) * _2428))) * _2428;
    float _4636 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2474 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
    uint _2488 = _2153 + 9u;
    float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _686) * 0.949999988079071044921875);
    float _2500 = _2499 * _2499;
    float _2501 = cbLight._m0[_2193].x + _586;
    float _2502 = cbLight._m0[_2193].y + _587;
    float _2503 = cbLight._m0[_2193].z + _588;
    float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
    float _2508 = _2507 * _2501;
    float _2509 = _2507 * _2502;
    float _2510 = _2507 * _2503;
    float _2511 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2193].xyz));
    float _4647 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2514 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2515 = dot(vec3(_504, _505, _506), vec3(_2508, _2509, _2510));
    float _4658 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2519 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2508, _2509, _2510));
    float _4669 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2523 = _2500 * _2500;
    float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
    float _2534 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
    float _2541 = 1.0 - _2500;
    float _2551 = (0.5 / (((_2429 * ((_2514 * _2541) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2429 * _2541) + _2500) * _2514))) * _2514;
    float _4680 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2553 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
    float _2563 = (((((_2534 * _2451) + _804) * cbLight._m0[_2488].x) * _2553) * _2176) + ((((cbLight._m0[_2400].x * _2142) * ((_2450 * _2451) + _804)) * _2474) * _2189);
    float _2564 = (((((_2534 * _2453) + _805) * cbLight._m0[_2488].y) * _2553) * _2176) + ((((cbLight._m0[_2400].y * _2144) * ((_2450 * _2453) + _805)) * _2474) * _2189);
    float _2565 = (((((_2534 * _2454) + _806) * cbLight._m0[_2488].z) * _2553) * _2176) + ((((cbLight._m0[_2400].z * _2146) * ((_2450 * _2454) + _806)) * _2474) * _2189);
    float _2621;
    float _2623;
    float _2625;
    if (_2229)
    {
        _2621 = _2563;
        _2623 = _2564;
        _2625 = _2565;
    }
    else
    {
        uint _2627 = _2153 + 2u;
        uint _2631 = _2153 + 10u;
        float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2627].w)) * _686) * 0.949999988079071044921875);
        float _2646 = _2645 * _2645;
        float _2647 = cbLight._m0[_2627].x + _586;
        float _2648 = cbLight._m0[_2627].y + _587;
        float _2649 = cbLight._m0[_2627].z + _588;
        float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
        float _2654 = _2653 * _2647;
        float _2655 = _2653 * _2648;
        float _2656 = _2653 * _2649;
        float _2657 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2627].xyz));
        float _4691 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2660 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2661 = dot(vec3(_504, _505, _506), vec3(_2654, _2655, _2656));
        float _4702 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2664 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2665 = dot(vec3(cbLight._m0[_2627].xyz), vec3(_2654, _2655, _2656));
        float _4713 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2669 = _2646 * _2646;
        float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
        float _2680 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
        float _2687 = 1.0 - _2646;
        float _2697 = (0.5 / (((_2429 * ((_2660 * _2687) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2429 * _2687) + _2646) * _2660))) * _2660;
        float _4724 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2699 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
        float _2700 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2621 = (((((_2680 * _2451) + _804) * cbLight._m0[_2631].x) * _2699) * _2700) + _2563;
        _2623 = (((((_2680 * _2453) + _805) * cbLight._m0[_2631].y) * _2699) * _2700) + _2564;
        _2625 = (((((_2680 * _2454) + _806) * cbLight._m0[_2631].z) * _2699) * _2700) + _2565;
    }
    float _2731;
    float _2733;
    float _2735;
    if (_2338)
    {
        _2731 = _2621;
        _2733 = _2623;
        _2735 = _2625;
    }
    else
    {
        uint _2742 = _2153 + 3u;
        uint _2746 = _2153 + 11u;
        float _2760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2742].w)) * _686) * 0.949999988079071044921875);
        float _2761 = _2760 * _2760;
        float _2762 = cbLight._m0[_2742].x + _586;
        float _2763 = cbLight._m0[_2742].y + _587;
        float _2764 = cbLight._m0[_2742].z + _588;
        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
        float _2769 = _2768 * _2762;
        float _2770 = _2768 * _2763;
        float _2771 = _2768 * _2764;
        float _2772 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2742].xyz));
        float _4740 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2775 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2776 = dot(vec3(_504, _505, _506), vec3(_2769, _2770, _2771));
        float _4751 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2780 = dot(vec3(cbLight._m0[_2742].xyz), vec3(_2769, _2770, _2771));
        float _4762 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2784 = _2761 * _2761;
        float _2788 = ((_2779 * _2779) * (_2784 + (-1.0))) + 1.0;
        float _2795 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
        float _2802 = 1.0 - _2761;
        float _2812 = (0.5 / (((_2429 * ((_2775 * _2802) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2429 * _2802) + _2761) * _2775))) * _2775;
        float _4773 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2814 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2784 / ((_2788 * _2788) * 3.141590118408203125));
        float _2815 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2731 = (((((_2795 * _2451) + _804) * cbLight._m0[_2746].x) * _2814) * _2815) + _2621;
        _2733 = (((((_2795 * _2453) + _805) * cbLight._m0[_2746].y) * _2814) * _2815) + _2623;
        _2735 = (((((_2795 * _2454) + _806) * cbLight._m0[_2746].z) * _2814) * _2815) + _2625;
    }
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    if (_2151.y == 0u)
    {
        uvec4 _2836 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2837 = _2836.x;
        uint _2848 = uint((float(_2836.y) * floor(float(uint(cbSceneParam._m0[85u].y * _607) / _2837))) + floor(float(uint(cbSceneParam._m0[85u].x * _606) / _2837)));
        float _2858 = (log2(_1929 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2859 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        uint _2862 = uint(isnan(14.0) ? _2859 : (isnan(_2859) ? 14.0 : min(_2859, 14.0)));
        uvec4 _2867 = texelFetch(g_lightClusterGridBuffer, int(((_2862 << 2u) + (_2848 << 6u)) >> 2u));
        uint _2868 = _2867.x;
        uint _2869 = _2836.z;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        if (((((1u << ((_2869 >> 4u) & 15u)) + 4294967295u) & _2868) == 0u) || ((_2869 & 240u) == 0u))
        {
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
        }
        else
        {
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3044;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            uint _3191 = 0u;
            uint _3200;
            bool _3201;
            for (;;)
            {
                _3200 = texelFetch(g_lightClassification, int((((_2862 << 5u) + (_2848 << 9u)) + (_3191 << 2u)) >> 2u)).x;
                _3201 = _3200 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3201)
                {
                    frontier_phi_73_pred = _3190;
                    frontier_phi_73_pred_1 = _3189;
                    frontier_phi_73_pred_2 = _3188;
                    frontier_phi_73_pred_3 = _3187;
                    frontier_phi_73_pred_4 = _3186;
                    frontier_phi_73_pred_5 = _3185;
                }
                else
                {
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    uint _3336;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3188;
                    _3334 = _3189;
                    _3335 = _3190;
                    _3336 = _3200;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    for (;;)
                    {
                        uint _3340 = uint(findLSB(_3336)) + (_3191 << 5u);
                        uint _3337 = (_3336 + 4294967295u) & _3336;
                        uint _3342 = _3340 * 48u;
                        vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 3u)).x));
                        uint _3362 = (_3340 * 48u) + 4u;
                        vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 3u)).x));
                        uint _3381 = (_3340 * 48u) + 8u;
                        vec3 _3392 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3381)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 2u)).x));
                        float _3396 = _3356.x - _1927;
                        float _3397 = _3356.y - _1928;
                        float _3398 = _3356.z - _1929;
                        float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                        float _3402 = inversesqrt(_3399);
                        float _3403 = _3402 * _3396;
                        float _3404 = _3402 * _3397;
                        float _3405 = _3402 * _3398;
                        float _3406 = dot(vec3(_629, _632, _635), vec3(_3403, _3404, _3405));
                        float _3411 = 1.0 - (_3399 * _3356.w);
                        float _4799 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3412 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3413 = sqrt(_3399) * _3375.w;
                        float _3416 = 1.39999997615814208984375 / (_3413 + 1.39999997615814208984375);
                        float _3417 = _3416 * _3416;
                        float _3420 = ((1.0 - _3417) * _3406) + _3417;
                        float _3423 = _3413 * _3413;
                        float _3426 = ((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3412) / ((_3423 * 0.699999988079071044921875) + 1.0);
                        float _3430 = (-0.0) - _1927;
                        float _3431 = (-0.0) - _1928;
                        float _3432 = (-0.0) - _1929;
                        float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                        float _3447 = 1.0 - _834;
                        float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                        float _3455 = _3454 * _3454;
                        float _3456 = _3455 * _3455;
                        float _3457 = _3437 + _3403;
                        float _3458 = _3438 + _3404;
                        float _3459 = _3439 + _3405;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3467 = dot(vec3(_629, _632, _635), vec3(_3437, _3438, _3439));
                        float _4815 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3470 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3471 = dot(vec3(_629, _632, _635), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                        float _4826 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3474 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                        float _3479 = _3416 * _3455;
                        float _3480 = _3479 * _3479;
                        float _3483 = ((1.0 - _3480) * _3406) + _3480;
                        float _4837 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3484 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3485 = 1.0 - _3455;
                        float _3495 = (0.5 / (((_3484 * ((_3470 * _3485) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3484 * _3485) + _3455) * _3470))) * _3484;
                        float _4848 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3506 = (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125))) * _3412;
                        _3260 = (_3426 * _3375.x) + _3333;
                        _3261 = (_3426 * _3375.y) + _3334;
                        _3262 = (_3426 * _3375.z) + _3335;
                        _3257 = (_3506 * _3392.x) + _3330;
                        _3258 = (_3506 * _3392.y) + _3331;
                        _3259 = (_3506 * _3392.z) + _3332;
                        if (_3337 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3260;
                            _3334 = _3261;
                            _3335 = _3262;
                            _3336 = _3337;
                        }
                    }
                    frontier_phi_73_pred = _3262;
                    frontier_phi_73_pred_1 = _3261;
                    frontier_phi_73_pred_2 = _3260;
                    frontier_phi_73_pred_3 = _3259;
                    frontier_phi_73_pred_4 = _3258;
                    frontier_phi_73_pred_5 = _3257;
                }
                _3044 = frontier_phi_73_pred;
                _3042 = frontier_phi_73_pred_1;
                _3040 = frontier_phi_73_pred_2;
                _3038 = frontier_phi_73_pred_3;
                _3036 = frontier_phi_73_pred_4;
                _3034 = frontier_phi_73_pred_5;
                uint _3192 = _3191 + 1u;
                if (_3192 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3185 = _3034;
                    _3186 = _3036;
                    _3187 = _3038;
                    _3188 = _3040;
                    _3189 = _3042;
                    _3190 = _3044;
                    _3191 = _3192;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
        }
        uvec4 _3047 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3048 = _3047.z;
        uint _3050 = (_3048 >> 8u) & 15u;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        if (((4294967295u << _3050) & _2868) == 0u)
        {
            _3153 = _3033;
            _3155 = _3035;
            _3157 = _3037;
            _3159 = _3039;
            _3161 = _3041;
            _3163 = _3043;
        }
        else
        {
            float _3178 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
            float _3179 = _3178 * _1927;
            float _3180 = _3178 * _1928;
            float _3181 = _3178 * _1929;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3050 < ((_3048 >> 12u) & 15u))
            {
                float _3154;
                float _3156;
                float _3158;
                float _3160;
                float _3162;
                float _3164;
                float _3313 = _3033;
                float _3314 = _3035;
                float _3315 = _3037;
                float _3316 = _3039;
                float _3317 = _3041;
                float _3318 = _3043;
                uint _3319 = _3050;
                uint _3328;
                bool _3329;
                for (;;)
                {
                    _3328 = texelFetch(g_lightClassification, int((((_2862 << 5u) + (_2848 << 9u)) + (_3319 << 2u)) >> 2u)).x;
                    _3329 = _3328 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3329)
                    {
                        frontier_phi_84_pred = _3317;
                        frontier_phi_84_pred_1 = _3316;
                        frontier_phi_84_pred_2 = _3315;
                        frontier_phi_84_pred_3 = _3314;
                        frontier_phi_84_pred_4 = _3313;
                        frontier_phi_84_pred_5 = _3318;
                    }
                    else
                    {
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3820;
                        float _3533 = _3313;
                        float _3534 = _3314;
                        float _3535 = _3315;
                        float _3536 = _3316;
                        float _3537 = _3317;
                        float _3538 = _3318;
                        uint _3539 = _3328;
                        uint _3540;
                        vec4 _3565;
                        float _3566;
                        vec4 _3581;
                        vec3 _3593;
                        vec4 _3608;
                        vec4 _3624;
                        float _3671;
                        bool _3672;
                        for (;;)
                        {
                            uint _3550 = ((_3319 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3539));
                            _3540 = (_3539 + 4294967295u) & _3539;
                            uint _3552 = _3550 * 40u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            _3566 = _3565.w;
                            uint _3568 = (_3550 * 40u) + 4u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3550 * 40u) + 8u;
                            _3593 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x));
                            uint _3595 = (_3550 * 40u) + 16u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3611 = (_3550 * 40u) + 20u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3627 = (_3550 * 40u) + 24u;
                            vec4 _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3646 = (_3550 * 40u) + 28u;
                            vec4 _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            _3671 = fma(_1929, _3659.z, fma(_1928, _3659.y, _3659.x * _1927)) + _3659.w;
                            _3672 = !((fma(_1929, _3640.z, fma(_1928, _3640.y, _3640.x * _1927)) + _3640.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3672)
                            {
                                float _3699 = _3565.x - _1927;
                                float _3700 = _3565.y - _1928;
                                float _3701 = _3565.z - _1929;
                                float _3702 = dot(vec3(_3699, _3700, _3701), vec3(_3699, _3700, _3701));
                                float _3705 = inversesqrt(_3702);
                                float _3706 = _3705 * _3699;
                                float _3707 = _3705 * _3700;
                                float _3708 = _3705 * _3701;
                                float _3712 = 1.0 - (_3702 / (_3566 * _3566));
                                float _4859 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3713 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3717 = sqrt(_3702) * _3581.w;
                                float _3719 = 1.39999997615814208984375 / (_3717 + 1.39999997615814208984375);
                                float _3720 = _3719 * _3719;
                                float _3723 = ((1.0 - _3720) * dot(vec3(_3706, _3707, _3708), vec3(_629, _632, _635))) + _3720;
                                float _3726 = _3717 * _3717;
                                float _3730 = (fma(_1929, _3608.z, fma(_1928, _3608.y, _3608.x * _1927)) + _3608.w) / _3671;
                                float _3731 = (fma(_1929, _3624.z, fma(_1928, _3624.y, _3624.x * _1927)) + _3624.w) / _3671;
                                float _3735 = 1.0 - dot(vec2(_3730, _3731), vec2(_3730, _3731));
                                float _4875 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3737 = _3736 * (((isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0))) * _3713) / ((_3726 * 0.699999988079071044921875) + 1.0));
                                float _3749 = exp2(log2(1.0 / ((_3726 * 3.5) + 5.0)) * 0.25);
                                float _3750 = 1.0 - _834;
                                float _3757 = sqrt(1.0 - ((1.0 - (_3750 * _3750)) * (1.0 - (_3749 * _3749))));
                                float _3758 = _3757 * _3757;
                                float _3759 = _3758 * _3758;
                                float _3760 = _3706 - _3179;
                                float _3761 = _3707 - _3180;
                                float _3762 = _3708 - _3181;
                                float _3766 = inversesqrt(dot(vec3(_3760, _3761, _3762), vec3(_3760, _3761, _3762)));
                                float _3770 = dot(vec3(_629, _632, _635), vec3((-0.0) - _3179, (-0.0) - _3180, (-0.0) - _3181));
                                float _4886 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3773 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3774 = dot(vec3(_629, _632, _635), vec3(_3766 * _3760, _3766 * _3761, _3766 * _3762));
                                float _4897 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3777 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3781 = ((_3777 * _3777) * (_3759 + (-1.0))) + 1.0;
                                float _3782 = _3719 * _3758;
                                float _3783 = _3782 * _3782;
                                float _3789 = ((1.0 - _3783) * dot(vec3(_629, _632, _635), vec3(_3706, _3707, _3708))) + _3783;
                                float _4908 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3790 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3791 = 1.0 - _3758;
                                float _3801 = (0.5 / (((_3790 * ((_3773 * _3791) + _3758)) + 9.9999999392252902907785028219223e-09) + (((_3790 * _3791) + _3758) * _3773))) * _3790;
                                float _4919 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3811 = (_3736 * _3713) * (((_3759 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3781 * _3781) * ((_3726 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3737 * _3581.y;
                                frontier_phi_90_pred_1 = _3737 * _3581.x;
                                frontier_phi_90_pred_2 = _3811 * _3593.z;
                                frontier_phi_90_pred_3 = _3811 * _3593.y;
                                frontier_phi_90_pred_4 = _3811 * _3593.x;
                                frontier_phi_90_pred_5 = _3737 * _3581.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3819 = frontier_phi_90_pred;
                            _3818 = frontier_phi_90_pred_1;
                            _3817 = frontier_phi_90_pred_2;
                            _3816 = frontier_phi_90_pred_3;
                            _3815 = frontier_phi_90_pred_4;
                            _3820 = frontier_phi_90_pred_5;
                            _3523 = _3818 + _3536;
                            _3524 = _3819 + _3537;
                            _3525 = _3820 + _3538;
                            _3520 = _3815 + _3533;
                            _3521 = _3816 + _3534;
                            _3522 = _3817 + _3535;
                            if (_3540 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3540;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3524;
                        frontier_phi_84_pred_1 = _3523;
                        frontier_phi_84_pred_2 = _3522;
                        frontier_phi_84_pred_3 = _3521;
                        frontier_phi_84_pred_4 = _3520;
                        frontier_phi_84_pred_5 = _3525;
                    }
                    _3162 = frontier_phi_84_pred;
                    _3160 = frontier_phi_84_pred_1;
                    _3158 = frontier_phi_84_pred_2;
                    _3156 = frontier_phi_84_pred_3;
                    _3154 = frontier_phi_84_pred_4;
                    _3164 = frontier_phi_84_pred_5;
                    uint _3320 = _3319 + 1u;
                    if (_3320 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3313 = _3154;
                        _3314 = _3156;
                        _3315 = _3158;
                        _3316 = _3160;
                        _3317 = _3162;
                        _3318 = _3164;
                        _3319 = _3320;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3164;
                frontier_phi_65_66_ladder_1 = _3160;
                frontier_phi_65_66_ladder_2 = _3162;
                frontier_phi_65_66_ladder_3 = _3156;
                frontier_phi_65_66_ladder_4 = _3154;
                frontier_phi_65_66_ladder_5 = _3158;
            }
            else
            {
                frontier_phi_65_66_ladder = _3043;
                frontier_phi_65_66_ladder_1 = _3039;
                frontier_phi_65_66_ladder_2 = _3041;
                frontier_phi_65_66_ladder_3 = _3035;
                frontier_phi_65_66_ladder_4 = _3033;
                frontier_phi_65_66_ladder_5 = _3037;
            }
            _3153 = frontier_phi_65_66_ladder_4;
            _3155 = frontier_phi_65_66_ladder_3;
            _3157 = frontier_phi_65_66_ladder_5;
            _3159 = frontier_phi_65_66_ladder_1;
            _3161 = frontier_phi_65_66_ladder_2;
            _3163 = frontier_phi_65_66_ladder;
        }
        float _3168 = isnan(1.0) ? _818 : (isnan(_818) ? 1.0 : min(_818, 1.0));
        _2880 = (_3168 * _3159) + _2393;
        _2882 = (_3168 * _3161) + _2395;
        _2884 = (_3168 * _3163) + _2397;
        _2886 = ((_3153 * _804) * _3168) + _2731;
        _2888 = ((_3155 * _805) * _3168) + _2733;
        _2890 = ((_3157 * _806) * _3168) + _2735;
    }
    else
    {
        _2880 = _2393;
        _2882 = _2395;
        _2884 = _2397;
        _2886 = _2731;
        _2888 = _2733;
        _2890 = _2735;
    }
    float _2897 = (_794 * _783) * cbMatDynParam._m0[9u].x;
    float _2898 = (_794 * _784) * cbMatDynParam._m0[9u].y;
    float _2899 = (_794 * _785) * cbMatDynParam._m0[9u].z;
    float _2910 = dot(vec3(_504, _505, _506), vec3(0.0, -1.0, 0.0));
    float _4935 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
    float _2913 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
    float _2917 = dot(vec3(_826, _827, _828), vec3(0.0, -1.0, 0.0));
    float _4946 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
    float _2923 = exp2(log2(isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * 4.0);
    float _4957 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
    float _4968 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
    float _4979 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
    float _4990 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2968 = abs(exp2(log2(_819) * cbMatDynParam._m0[12u].x));
    float _2969 = isnan(0.100000001490116119384765625) ? _2968 : (isnan(_2968) ? 0.100000001490116119384765625 : max(_2968, 0.100000001490116119384765625));
    float _2975 = ((isnan(0.699999988079071044921875) ? _2969 : (isnan(_2969) ? 0.699999988079071044921875 : min(_2969, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _2985 = ((((cbMatDynParam._m0[10u].x * cbPerFrame._m0[3u].x) * ((_2886 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1657)) + (_2923 * cbMatDynParam._m0[11u].x))) + ((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * ((_2880 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _818)) + (_2913 * cbMatDynParam._m0[11u].x)))) + cbMatDynParam._m0[7u].x) + (_2975 * (cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x));
    float _2988 = ((((cbMatDynParam._m0[10u].y * cbPerFrame._m0[3u].x) * ((_2888 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1657)) + (_2923 * cbMatDynParam._m0[11u].y))) + ((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * ((_2882 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _818)) + (_2913 * cbMatDynParam._m0[11u].y)))) + cbMatDynParam._m0[7u].y) + (_2975 * (cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y));
    float _2991 = ((((cbMatDynParam._m0[10u].z * cbPerFrame._m0[3u].x) * ((_2890 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1657)) + (_2923 * cbMatDynParam._m0[11u].z))) + ((isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * ((_2884 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _818)) + (_2913 * cbMatDynParam._m0[11u].z)))) + cbMatDynParam._m0[7u].z) + (_2975 * (cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z));
    float _2992 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
    float _2993 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
    float _2994 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
    float _2999 = cbInstanceData._m0[_710 + 6u].w * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)));
    float _3004 = _606 / cbSceneParam._m0[86u].x;
    float _3005 = _607 / cbSceneParam._m0[86u].y;
    vec4 _3019 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3004, _3005, (log2((isnan(cbSceneParam._m0[77u].w) ? _528 : (isnan(_528) ? cbSceneParam._m0[77u].w : min(_528, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3021 = _3019.x;
    float _3022 = _3019.y;
    float _3023 = _3019.z;
    float _3024 = _3019.w;
    float _3095;
    float _3097;
    float _3099;
    float _3101;
    if (_528 > cbSceneParam._m0[78u].w)
    {
        float _3058 = isnan(_528) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _528 : min(cbSceneParam._m0[80u].w, _528));
        float _3059 = _3058 / _528;
        float _3070 = _3059 * _579;
        float _3071 = _580 * _3059;
        float _3072 = (-0.0) - _3071;
        float _3073 = _3059 * _581;
        float _3075 = (cbSceneParam._m0[77u].w * _3072) / _3058;
        float _3076 = _3075 + cbSceneParam._m0[79u].w;
        float _3077 = cbSceneParam._m0[79u].w - _3071;
        float _3083 = sqrt(((_3070 * _3070) + (_3071 * _3071)) + (_3073 * _3073));
        float _3086 = (1.0 - (cbSceneParam._m0[77u].w / _3058)) * _3083;
        float _3091 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3093 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3270;
        if (abs((_3072 - _3075) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3270 = ((((_3076 > 0.0) ? exp2(_3091 * _3076) : (2.0 - exp2(_3093 * _3076))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3086;
        }
        else
        {
            float _3214 = 1.0 / cbSceneParam._m0[80u].x;
            float _3215 = isnan(_3077) ? _3076 : (isnan(_3076) ? _3077 : max(_3076, _3077));
            float _3216 = isnan(_3077) ? _3076 : (isnan(_3076) ? _3077 : min(_3076, _3077));
            float _3225 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : min(_3215, 0.0));
            float _3226 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : min(_3216, 0.0));
            _3270 = ((abs(_3083 / _3072) * cbSceneParam._m0[80u].y) * ((((_3225 - _3226) * 2.0) - ((exp2(_3091 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0)))) - exp2(_3091 * (isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))))) * _3214)) - ((exp2(_3093 * _3225) - exp2(_3093 * _3226)) * _3214))) + (_3086 * cbSceneParam._m0[80u].z);
        }
        vec4 _3272 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3004, _3005, 1.0), 0.0);
        float _3281 = exp2((_3270 * (-1.44269502162933349609375)) * (1.0 - _3272.w));
        float _3282 = log2(_3281);
        float _3298 = log2(_3024);
        _3095 = (exp2(_3298 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].x)) * _3272.x) / cbSceneParam._m0[78u].x)) + _3021;
        _3097 = (exp2(_3298 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].y)) * _3272.y) / cbSceneParam._m0[78u].y)) + _3022;
        _3099 = (exp2(_3298 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].z)) * _3272.z) / cbSceneParam._m0[78u].z)) + _3023;
        _3101 = _3281 * _3024;
    }
    else
    {
        _3095 = _3021;
        _3097 = _3022;
        _3099 = _3023;
        _3101 = _3024;
    }
    bool _3308;
    vec4 _3111;
    vec4 _3133;
    float _3135;
    float _3139;
    float _3140;
    float _3141;
    float _3142;
    bool _3152;
    for (;;)
    {
        _3111 = cbMatDynParam._m0[0u];
        float _3113 = roundEven(_3111.y);
        bool _3114 = _3113 == 3.0;
        float _3115 = log2(_3101);
        float _3122 = exp2(_3115 * cbSceneParam._m0[78u].x) * _2992;
        float _3123 = exp2(_3115 * cbSceneParam._m0[78u].y) * _2993;
        float _3124 = exp2(_3115 * cbSceneParam._m0[78u].z) * _2994;
        float _3131 = _595 + (-0.5);
        _3133 = cbMtdParam._m0[1u];
        _3135 = _3133.y * _3131;
        float _3138 = (_3113 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3139 = _3138 * (_3114 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3095)));
        _3140 = _3138 * (_3114 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3097)));
        _3141 = _3138 * (_3114 ? _3124 : (_3124 + (cbSceneParam._m0[72u].w * _3099)));
        _3142 = _3131 * 0.999000012874603271484375;
        _3152 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3152)
        {
            if ((cbInstanceData._m0[_710 + 7u].x + _3142) < 0.5)
            {
                _3308 = true;
                break;
            }
        }
        uint _3249 = _711 + uint(_3111.w);
        if ((cbInstanceData._m0[_3249].w < 1.0) && ((cbInstanceData._m0[_3249].w + _3142) < 0.5))
        {
            _3308 = true;
            break;
        }
        if ((_3135 + _378) < _3133.x)
        {
            _3308 = true;
            break;
        }
        _3308 = false;
        break;
    }
    float _3511;
    if (_3308)
    {
        discard_state = true;
        _3511 = 0.0;
    }
    else
    {
        _3511 = _2999;
    }
    SV_Target.x = _3139;
    SV_Target.y = _3140;
    SV_Target.z = _3141;
    SV_Target.w = _3511;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2999;
    discard_exit();
}


