#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _851;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = ((cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.x;
    float _225 = ((cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.y;
    vec4 _238 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_224 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_225 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.x * cbMtdParam._m0[9u].x;
    float _245 = _238.y * cbMtdParam._m0[9u].y;
    float _246 = _238.z * cbMtdParam._m0[9u].z;
    vec4 _258 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _224) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _225) + cbTextureTilingScale._m0[2u].w));
    float _262 = cbMtdParam._m0[10u].x + _258.x;
    vec4 _274 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _224) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _225) + cbTextureTilingScale._m0[1u].w));
    float _278 = _274.z;
    float _282 = (_274.x * 2.0) + (-1.0);
    float _284 = (_274.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3211 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0))));
    float _294 = fma(_291, _197 * NORMAL.x, fma(_284, _204 * TANGENT.x, (_190 * _183) * _282));
    float _297 = fma(_291, _197 * NORMAL.y, fma(_284, _204 * TANGENT.y, (_190 * _184) * _282));
    float _300 = fma(_291, _197 * NORMAL.z, fma(_284, _204 * TANGENT.z, (_190 * _185) * _282));
    float _304 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _305 = _304 * _294;
    float _306 = _304 * _297;
    float _307 = _304 * _300;
    float _3222 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _308 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    float _3233 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3244 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3255 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3266 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _312 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _369 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _379 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _369);
    float _380 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _369);
    float _381 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _369);
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _386 = _379 * _385;
    float _387 = _380 * _385;
    float _388 = _381 * _385;
    float _394 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _395 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _416 = fma(_307, cbSceneParam._m0[5u].z, fma(_306, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _305));
    float _419 = fma(_307, cbSceneParam._m0[6u].z, fma(_306, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _305));
    float _422 = fma(_307, cbSceneParam._m0[7u].z, fma(_306, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _305));
    uint _435 = uint(roundEven(NORMAL.w)) * 13u;
    uint _438 = (_435 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _444 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0)))) * cbInstanceData._m0[_438].x;
    float _445 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0)))) * cbInstanceData._m0[_438].y;
    float _446 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0)))) * cbInstanceData._m0[_438].z;
    float _3277 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
    float _3288 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
    float _3299 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _450 = 1.0 - _312;
    float _451 = _447 * _450;
    float _452 = _448 * _450;
    float _453 = _449 * _450;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _312;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _312;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _312;
    float _461 = _458 + 0.039999999105930328369140625;
    float _463 = _459 + 0.039999999105930328369140625;
    float _464 = _460 + 0.039999999105930328369140625;
    vec4 _473 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _394, cbSceneParam._m0[86u].y * _395));
    float _476 = _473.x * TEXCOORD.z;
    float _477 = dot(vec3(_305, _306, _307), vec3(_386, _387, _388));
    float _480 = _477 * 2.0;
    float _484 = (_480 * _305) - _386;
    float _485 = (_480 * _306) - _387;
    float _486 = (_480 * _307) - _388;
    float _490 = abs(dot(vec3(_386, _387, _388), vec3(_305, _306, _307)));
    float _3310 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _492 = sqrt(_308);
    float _505 = exp2((_492 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_492 * 3.0));
    float _511 = (1.0 - _505) * ((_492 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _512 = _505 * _492;
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _850;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _575 = fma(_548, cbModelParam._m0[26u].z, fma(_544, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _540));
        float _579 = fma(_548, cbModelParam._m0[27u].z, fma(_544, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _540));
        float _583 = fma(_548, cbModelParam._m0[28u].z, fma(_544, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _540));
        float _608 = _540 + _305;
        float _609 = _544 + _306;
        float _610 = _548 + _307;
        float _620 = fma(_610, cbModelParam._m0[26u].z, fma(_609, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _608)) - _575;
        float _621 = fma(_610, cbModelParam._m0[27u].z, fma(_609, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _608)) - _579;
        float _622 = fma(_610, cbModelParam._m0[28u].z, fma(_609, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _608)) - _583;
        float _626 = inversesqrt(dot(vec3(_620, _621, _622), vec3(_620, _621, _622)));
        float _639 = ((_626 * _620) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_575 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _640 = ((_626 * _621) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_579 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _641 = ((_626 * _622) / cbModelParam._m0[34u].z) + ((((((_583 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        float _678 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_644.x + (-0.5));
        float _680 = _678 * (_644.y + (-0.5));
        float _681 = _678 * (_644.z + (-0.5));
        float _688 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_651.x + (-0.5));
        float _690 = _688 * (_651.y + (-0.5));
        float _691 = _688 * (_651.z + (-0.5));
        float _698 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_658.x + (-0.5));
        float _700 = _698 * (_658.y + (-0.5));
        float _701 = _698 * (_658.z + (-0.5));
        float _708 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_665.x + (-0.5));
        float _710 = _708 * (_665.y + (-0.5));
        float _711 = _708 * (_665.z + (-0.5));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = _679 * 0.5;
        float _716 = _689 * 0.5;
        float _717 = _699 * 0.5;
        float _718 = dot(vec3(_715, _716, _717), vec3(_715, _716, _717));
        float _723 = (_718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_718);
        float _732 = (dot(vec3(_305, _306, _307), vec3(_723 * _715, _723 * _716, _723 * _717)) + 1.0) * 0.5;
        float _3336 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _742 = sqrt(((_716 * _716) + (_715 * _715)) + (_717 * _717)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3347 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _744 = _743 * 2.0;
        float _748 = (1.0 - _743) / (_743 + 1.0);
        float _3358 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _758 = ((((1.0 - _749) * (_744 + 2.0)) * exp2(log2(isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))) * (_744 + 1.0))) + _749) * _712;
        float _759 = _680 * 0.5;
        float _760 = _690 * 0.5;
        float _761 = _700 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _775 = (dot(vec3(_305, _306, _307), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3369 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _784 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3380 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3391 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) * (_786 + 1.0))) + _791) * _713;
        float _801 = _681 * 0.5;
        float _802 = _691 * 0.5;
        float _803 = _701 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_305, _306, _307), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3402 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3413 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3424 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * (_828 + 1.0))) + _833) * _714;
        _850 = _681;
        _852 = _680;
        _853 = _679;
        _854 = _691;
        _855 = _690;
        _856 = _689;
        _857 = _701;
        _858 = _700;
        _859 = _699;
        _860 = _714;
        _861 = _713;
        _862 = _712;
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
    }
    else
    {
        _850 = _851;
        _852 = _851;
        _853 = _851;
        _854 = _851;
        _855 = _851;
        _856 = _851;
        _857 = _851;
        _858 = _851;
        _859 = _851;
        _860 = _851;
        _861 = _851;
        _862 = _851;
        _863 = 0.0;
        _864 = 0.0;
        _865 = 0.0;
    }
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _891 = fma(_548, cbModelParam._m0[30u].z, fma(_544, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _540));
        float _895 = fma(_548, cbModelParam._m0[31u].z, fma(_544, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _540));
        float _899 = fma(_548, cbModelParam._m0[32u].z, fma(_544, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _540));
        float _922 = _540 + _305;
        float _923 = _544 + _306;
        float _924 = _548 + _307;
        float _934 = fma(_924, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922)) - _891;
        float _935 = fma(_924, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922)) - _895;
        float _936 = fma(_924, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922)) - _899;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_891 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_895 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[35u].z) + ((((((_899 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _990 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_957.x + (-0.5));
        float _992 = _990 * (_957.y + (-0.5));
        float _993 = _990 * (_957.z + (-0.5));
        float _1000 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_964.x + (-0.5));
        float _1002 = _1000 * (_964.y + (-0.5));
        float _1003 = _1000 * (_964.z + (-0.5));
        float _1010 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_971.x + (-0.5));
        float _1012 = _1010 * (_971.y + (-0.5));
        float _1013 = _1010 * (_971.z + (-0.5));
        float _1020 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_978.x + (-0.5));
        float _1022 = _1020 * (_978.y + (-0.5));
        float _1023 = _1020 * (_978.z + (-0.5));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = _991 * 0.5;
        float _1028 = _1001 * 0.5;
        float _1029 = _1011 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_305, _306, _307), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3465 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3476 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3487 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * (_1054 + 1.0))) + _1059) * _1024;
        float _1069 = _992 * 0.5;
        float _1070 = _1002 * 0.5;
        float _1071 = _1012 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_305, _306, _307), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3498 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3509 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3520 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * (_1096 + 1.0))) + _1101) * _1025;
        float _1111 = _993 * 0.5;
        float _1112 = _1003 * 0.5;
        float _1113 = _1013 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_305, _306, _307), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3553 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_1138 + 1.0))) + _1143) * _1026;
        _1160 = _993;
        _1161 = _992;
        _1162 = _991;
        _1163 = _1003;
        _1164 = _1002;
        _1165 = _1001;
        _1166 = _1013;
        _1167 = _1012;
        _1168 = _1011;
        _1169 = _1026;
        _1170 = _1025;
        _1171 = _1024;
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
    }
    else
    {
        _1160 = _851;
        _1161 = _851;
        _1162 = _851;
        _1163 = _851;
        _1164 = _851;
        _1165 = _851;
        _1166 = _851;
        _1167 = _851;
        _1168 = _851;
        _1169 = _851;
        _1170 = _851;
        _1171 = _851;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _863)) + _863;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _864)) + _864;
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _865)) + _865;
    float _1207 = fma(_1186, cbSceneParam._m0[89u].z, fma(_1185, cbSceneParam._m0[89u].y, _1184 * cbSceneParam._m0[89u].x));
    float _1210 = fma(_1186, cbSceneParam._m0[90u].z, fma(_1185, cbSceneParam._m0[90u].y, _1184 * cbSceneParam._m0[90u].x));
    float _1213 = fma(_1186, cbSceneParam._m0[91u].z, fma(_1185, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1184));
    float _1228 = _484 * 0.5;
    float _1229 = _485 * 0.5;
    float _1230 = _486 * 0.5;
    float _1231 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1234 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1237 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1271;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1244 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_850, _854, _857, _860));
        float _1248 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_852, _855, _858, _861));
        float _1252 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_853, _856, _859, _862));
        float _1259 = dot(vec4(cbModelParam._m0[39u]), vec4(_1228, _1229, _1230, 1.0));
        _1271 = dot(vec3(isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1259) ? 0.0 : (isnan(0.0) ? _1259 : max(0.0, _1259))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1271 = 1.0;
    }
    float _1282;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1273 = dot(vec4(cbModelParam._m0[40u]), vec4(_1228, _1229, _1230, 1.0));
        _1282 = dot(vec3(isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1282 = 1.0;
    }
    float _1286 = (_1282 * cbModelParam._m0[1u].x) + (_1271 * (1.0 - cbModelParam._m0[1u].x));
    float _1296 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _308);
    float _1297 = isnan(_1296) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1296 : min(cbModelParam._m0[25u].z, _1296));
    float _1379;
    float _1381;
    float _1383;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1346 = fma(_548, cbModelParam._m0[13u].z, fma(_544, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540)) + cbModelParam._m0[13u].w;
        float _1350 = fma(_548, cbModelParam._m0[14u].z, fma(_544, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540)) + cbModelParam._m0[14u].w;
        float _1354 = fma(_548, cbModelParam._m0[15u].z, fma(_544, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540)) + cbModelParam._m0[15u].w;
        float _1357 = fma(_486, cbModelParam._m0[13u].z, fma(_485, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _484));
        float _1360 = fma(_486, cbModelParam._m0[14u].z, fma(_485, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _484));
        float _1363 = fma(_486, cbModelParam._m0[15u].z, fma(_485, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _484));
        float _1391;
        if (_1357 > 0.0)
        {
            _1391 = abs((1.0 - _1346) / _1357);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1346 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1391 = frontier_phi_14_12_ladder;
        }
        float _1619;
        if (_1360 > 0.0)
        {
            _1619 = abs((1.0 - _1350) / _1360);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1350 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1619 = frontier_phi_23_19_ladder;
        }
        float _1876;
        if (_1363 > 0.0)
        {
            _1876 = abs((1.0 - _1354) / _1363);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1354 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1876 = frontier_phi_35_30_ladder;
        }
        float _1878 = isnan(_1619) ? _1391 : (isnan(_1391) ? _1619 : min(_1391, _1619));
        float _1879 = isnan(_1876) ? _1878 : (isnan(_1878) ? _1876 : min(_1878, _1876));
        float _1883 = (_1879 * _1357) + _1346;
        float _1884 = (_1879 * _1360) + _1350;
        float _1885 = (_1879 * _1363) + _1354;
        float _1886 = _1879 * 9.9999997473787516355514526367188e-05;
        float _1888 = (-1.0) - _1886;
        float _1890 = _1886 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1885 > _1890) || ((_1885 < _1888) || ((_1884 > _1890) || ((_1884 < _1888) || ((_1883 < _1888) || (_1883 > _1890))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2013 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1885, cbModelParam._m0[9u].z, fma(_1884, cbModelParam._m0[9u].y, _1883 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1885, cbModelParam._m0[10u].z, fma(_1884, cbModelParam._m0[10u].y, _1883 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1885, cbModelParam._m0[11u].z, fma(_1884, cbModelParam._m0[11u].y, _1883 * cbModelParam._m0[11u].x))), _1297);
            frontier_phi_13_35_ladder = _2013.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2013.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2013.x * cbModelParam._m0[1u].y;
        }
        _1379 = frontier_phi_13_35_ladder_2;
        _1381 = frontier_phi_13_35_ladder_1;
        _1383 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_484, _485, _486), _1297);
        _1379 = _1367.x * cbModelParam._m0[1u].y;
        _1381 = _1367.y * cbModelParam._m0[1u].y;
        _1383 = _1367.z * cbModelParam._m0[1u].y;
    }
    float _1387 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _308);
    float _1388 = isnan(_1387) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1387 : min(cbModelParam._m0[25u].w, _1387));
    float _1480;
    float _1482;
    float _1484;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1444 = fma(_548, cbModelParam._m0[21u].z, fma(_544, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540)) + cbModelParam._m0[21u].w;
        float _1448 = fma(_548, cbModelParam._m0[22u].z, fma(_544, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540)) + cbModelParam._m0[22u].w;
        float _1452 = fma(_548, cbModelParam._m0[23u].z, fma(_544, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540)) + cbModelParam._m0[23u].w;
        float _1455 = fma(_486, cbModelParam._m0[21u].z, fma(_485, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _484));
        float _1458 = fma(_486, cbModelParam._m0[22u].z, fma(_485, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _484));
        float _1461 = fma(_486, cbModelParam._m0[23u].z, fma(_485, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _484));
        float _1624;
        if (_1455 > 0.0)
        {
            _1624 = abs((1.0 - _1444) / _1455);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1444 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1624 = frontier_phi_25_21_ladder;
        }
        float _1903;
        if (_1458 > 0.0)
        {
            _1903 = abs((1.0 - _1448) / _1458);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1448 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1903 = frontier_phi_37_32_ladder;
        }
        float _2116;
        if (_1461 > 0.0)
        {
            _2116 = abs((1.0 - _1452) / _1461);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1452 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2116 = frontier_phi_46_43_ladder;
        }
        float _2118 = isnan(_1903) ? _1624 : (isnan(_1624) ? _1903 : min(_1624, _1903));
        float _2119 = isnan(_2116) ? _2118 : (isnan(_2118) ? _2116 : min(_2118, _2116));
        float _2123 = (_2119 * _1455) + _1444;
        float _2124 = (_2119 * _1458) + _1448;
        float _2125 = (_2119 * _1461) + _1452;
        float _2126 = _2119 * 9.9999997473787516355514526367188e-05;
        float _2127 = (-1.0) - _2126;
        float _2129 = _2126 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2125 > _2129) || ((_2125 < _2127) || ((_2124 > _2129) || ((_2124 < _2127) || ((_2123 < _2127) || (_2123 > _2129))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2324 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2125, cbModelParam._m0[17u].z, fma(_2124, cbModelParam._m0[17u].y, _2123 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2125, cbModelParam._m0[18u].z, fma(_2124, cbModelParam._m0[18u].y, _2123 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2125, cbModelParam._m0[19u].z, fma(_2124, cbModelParam._m0[19u].y, _2123 * cbModelParam._m0[19u].x))), _1388);
            frontier_phi_22_46_ladder = _2324.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2324.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2324.x * cbModelParam._m0[1u].z;
        }
        _1480 = frontier_phi_22_46_ladder_2;
        _1482 = frontier_phi_22_46_ladder_1;
        _1484 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_484, _485, _486), _1388);
        _1480 = _1464.x * cbModelParam._m0[1u].z;
        _1482 = _1464.y * cbModelParam._m0[1u].z;
        _1484 = _1464.z * cbModelParam._m0[1u].z;
    }
    float _1497 = (((_511 * _461) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1480 - _1379)) + _1379);
    float _1499 = (((_511 * _463) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1482 - _1381)) + _1381);
    float _1501 = (((_511 * _464) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1484 - _1383)) + _1383);
    float _1504 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1497 * cbSceneParam._m0[89u].x));
    float _1507 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1497 * cbSceneParam._m0[90u].x));
    float _1510 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, _1497 * cbSceneParam._m0[91u].x));
    vec4 _1518 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_394, _395));
    float _1520 = _1518.w;
    float _1532 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1520);
    float _1533 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1520);
    float _1534 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1520);
    uvec4 _1538 = floatBitsToUint(cbInstanceData._m0[_435 + 5u]);
    uint _1540 = _1538.x * 14u;
    uint _1541 = _1540 + 13u;
    float _1548 = _476 + (-1.0);
    float _1553 = (cbLight._m0[_1541].x * _1548) + 1.0;
    float _1554 = (cbLight._m0[_1541].y * _1548) + 1.0;
    float _1555 = (cbLight._m0[_1541].z * _1548) + 1.0;
    float _1556 = (cbLight._m0[_1541].w * _1548) + 1.0;
    uint _1557 = _1540 + 5u;
    float _1563 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
    uint _1567 = _1540 + 4u;
    float _1577 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
    uint _1581 = _1540 | 1u;
    float _1592 = dot(vec3(cbLight._m0[_1540].xyz), vec3(_305, _306, _307));
    float _1595 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_305, _306, _307));
    float _3689 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _3700 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1600 = (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * 0.3183098733425140380859375;
    float _1602 = (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * 0.3183098733425140380859375;
    float _1609 = ((cbLight._m0[_1557].x * _1563) * _1602) + (((cbLight._m0[_1567].x * _1532) * _1577) * _1600);
    float _1610 = ((_1563 * cbLight._m0[_1557].y) * _1602) + (((cbLight._m0[_1567].y * _1533) * _1577) * _1600);
    float _1611 = ((_1563 * cbLight._m0[_1557].z) * _1602) + (((cbLight._m0[_1567].z * _1534) * _1577) * _1600);
    uvec4 _1616 = floatBitsToUint(cbLight._m0[_1540 + 12u]);
    bool _1618 = _1616.x == 0u;
    float _1629;
    float _1631;
    float _1633;
    if (_1618)
    {
        _1629 = _1609;
        _1631 = _1610;
        _1633 = _1611;
    }
    else
    {
        uint _1637 = _1540 + 6u;
        float _1653 = (dot(vec3(cbLight._m0[_1540 + 2u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _1654 = _1653 * _1653;
        float _3711 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1656 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _1629 = (((cbLight._m0[_1637].x * 0.3183098733425140380859375) * _1655) * _1656) + _1609;
        _1631 = (((cbLight._m0[_1637].y * 0.3183098733425140380859375) * _1655) * _1656) + _1610;
        _1633 = (((cbLight._m0[_1637].z * 0.3183098733425140380859375) * _1655) * _1656) + _1611;
    }
    bool _1636 = _1616.y == 0u;
    float _1674;
    float _1676;
    float _1678;
    if (_1636)
    {
        _1674 = _1629;
        _1676 = _1631;
        _1678 = _1633;
    }
    else
    {
        uint _1847 = _1540 + 7u;
        float _1863 = (dot(vec3(cbLight._m0[_1540 + 3u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _1864 = _1863 * _1863;
        float _3727 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1866 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
        _1674 = (((cbLight._m0[_1847].x * 0.3183098733425140380859375) * _1865) * _1866) + _1629;
        _1676 = (((cbLight._m0[_1847].y * 0.3183098733425140380859375) * _1865) * _1866) + _1631;
        _1678 = (((cbLight._m0[_1847].z * 0.3183098733425140380859375) * _1865) * _1866) + _1633;
    }
    uint _1681 = _1540 + 8u;
    float _1694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1540].w)) * _308) * 0.949999988079071044921875);
    float _1695 = _1694 * _1694;
    float _1696 = cbLight._m0[_1540].x + _386;
    float _1697 = cbLight._m0[_1540].y + _387;
    float _1698 = cbLight._m0[_1540].z + _388;
    float _1702 = inversesqrt(dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698)));
    float _1703 = _1702 * _1696;
    float _1704 = _1702 * _1697;
    float _1705 = _1702 * _1698;
    float _1706 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1540].xyz));
    float _3743 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1709 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _3754 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _1710 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _1711 = dot(vec3(_305, _306, _307), vec3(_1703, _1704, _1705));
    float _3765 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1714 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _1715 = dot(vec3(cbLight._m0[_1540].xyz), vec3(_1703, _1704, _1705));
    float _3776 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1719 = _1695 * _1695;
    float _1723 = ((_1714 * _1714) * (_1719 + (-1.0))) + 1.0;
    float _1731 = exp2(log2(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) * 5.0);
    float _1732 = 0.959999978542327880859375 - _458;
    float _1734 = 0.959999978542327880859375 - _459;
    float _1735 = 0.959999978542327880859375 - _460;
    float _1742 = 1.0 - _1695;
    float _1753 = (0.5 / (((_1710 * ((_1709 * _1742) + _1695)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1742) + _1695) * _1709))) * _1709;
    float _3787 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1755 = (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1719 / ((_1723 * _1723) * 3.141590118408203125));
    uint _1769 = _1540 + 9u;
    float _1780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1581].w)) * _308) * 0.949999988079071044921875);
    float _1781 = _1780 * _1780;
    float _1782 = cbLight._m0[_1581].x + _386;
    float _1783 = cbLight._m0[_1581].y + _387;
    float _1784 = cbLight._m0[_1581].z + _388;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1789 = _1788 * _1782;
    float _1790 = _1788 * _1783;
    float _1791 = _1788 * _1784;
    float _1792 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1581].xyz));
    float _3798 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _1796 = dot(vec3(_305, _306, _307), vec3(_1789, _1790, _1791));
    float _3809 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _1800 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_1789, _1790, _1791));
    float _3820 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1804 = _1781 * _1781;
    float _1808 = ((_1799 * _1799) * (_1804 + (-1.0))) + 1.0;
    float _1815 = exp2(log2(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * 5.0);
    float _1822 = 1.0 - _1781;
    float _1832 = (0.5 / (((_1710 * ((_1795 * _1822) + _1781)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1822) + _1781) * _1795))) * _1795;
    float _3831 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1804 / ((_1808 * _1808) * 3.141590118408203125));
    float _1844 = (((((_1815 * _1732) + _461) * cbLight._m0[_1769].x) * _1834) * _1563) + ((((cbLight._m0[_1681].x * _1532) * ((_1731 * _1732) + _461)) * _1755) * _1577);
    float _1845 = (((((_1815 * _1734) + _463) * cbLight._m0[_1769].y) * _1834) * _1563) + ((((cbLight._m0[_1681].y * _1533) * ((_1731 * _1734) + _463)) * _1755) * _1577);
    float _1846 = (((((_1815 * _1735) + _464) * cbLight._m0[_1769].z) * _1834) * _1563) + ((((cbLight._m0[_1681].z * _1534) * ((_1731 * _1735) + _464)) * _1755) * _1577);
    float _1908;
    float _1910;
    float _1912;
    if (_1618)
    {
        _1908 = _1844;
        _1910 = _1845;
        _1912 = _1846;
    }
    else
    {
        uint _1914 = _1540 + 2u;
        uint _1918 = _1540 + 10u;
        float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _308) * 0.949999988079071044921875);
        float _1933 = _1932 * _1932;
        float _1934 = cbLight._m0[_1914].x + _386;
        float _1935 = cbLight._m0[_1914].y + _387;
        float _1936 = cbLight._m0[_1914].z + _388;
        float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
        float _1941 = _1940 * _1934;
        float _1942 = _1940 * _1935;
        float _1943 = _1940 * _1936;
        float _1944 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1914].xyz));
        float _3842 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1947 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1948 = dot(vec3(_305, _306, _307), vec3(_1941, _1942, _1943));
        float _3853 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1951 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1952 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_1941, _1942, _1943));
        float _3864 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1956 = _1933 * _1933;
        float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
        float _1967 = exp2(log2(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * 5.0);
        float _1974 = 1.0 - _1933;
        float _1984 = (0.5 / (((_1710 * ((_1947 * _1974) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1974) + _1933) * _1947))) * _1947;
        float _3875 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1986 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
        float _1987 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _1908 = (((((_1967 * _1732) + _461) * cbLight._m0[_1918].x) * _1986) * _1987) + _1844;
        _1910 = (((((_1967 * _1734) + _463) * cbLight._m0[_1918].y) * _1986) * _1987) + _1845;
        _1912 = (((((_1967 * _1735) + _464) * cbLight._m0[_1918].z) * _1986) * _1987) + _1846;
    }
    float _2022;
    float _2024;
    float _2026;
    if (_1636)
    {
        _2022 = _1908;
        _2024 = _1910;
        _2026 = _1912;
    }
    else
    {
        uint _2033 = _1540 + 3u;
        uint _2037 = _1540 + 11u;
        float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _308) * 0.949999988079071044921875);
        float _2052 = _2051 * _2051;
        float _2053 = cbLight._m0[_2033].x + _386;
        float _2054 = cbLight._m0[_2033].y + _387;
        float _2055 = cbLight._m0[_2033].z + _388;
        float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
        float _2060 = _2059 * _2053;
        float _2061 = _2059 * _2054;
        float _2062 = _2059 * _2055;
        float _2063 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2033].xyz));
        float _3891 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2066 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _2067 = dot(vec3(_305, _306, _307), vec3(_2060, _2061, _2062));
        float _3902 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2070 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _2071 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2060, _2061, _2062));
        float _3913 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2075 = _2052 * _2052;
        float _2079 = ((_2070 * _2070) * (_2075 + (-1.0))) + 1.0;
        float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * 5.0);
        float _2093 = 1.0 - _2052;
        float _2103 = (0.5 / (((_1710 * ((_2066 * _2093) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _2093) + _2052) * _2066))) * _2066;
        float _3924 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2105 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_2075 / ((_2079 * _2079) * 3.141590118408203125));
        float _2106 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
        _2022 = (((((_2086 * _1732) + _461) * cbLight._m0[_2037].x) * _2105) * _2106) + _1908;
        _2024 = (((((_2086 * _1734) + _463) * cbLight._m0[_2037].y) * _2105) * _2106) + _1910;
        _2026 = (((((_2086 * _1735) + _464) * cbLight._m0[_2037].z) * _2105) * _2106) + _1912;
    }
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    if (_1538.y == 0u)
    {
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2181;
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2181;
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2181;
        uvec4 _2196 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2197 = _2196.x;
        uint _2208 = uint((float(_2196.y) * floor(float(uint(cbSceneParam._m0[85u].y * _395) / _2197))) + floor(float(uint(cbSceneParam._m0[85u].x * _394) / _2197)));
        float _2218 = (log2(_2184 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2219 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        uint _2222 = uint(isnan(14.0) ? _2219 : (isnan(_2219) ? 14.0 : min(_2219, 14.0)));
        uvec4 _2227 = texelFetch(g_lightClusterGridBuffer, int(((_2222 << 2u) + (_2208 << 6u)) >> 2u));
        uint _2228 = _2227.x;
        uint _2229 = _2196.z;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        if (((((1u << ((_2229 >> 4u) & 15u)) + 4294967295u) & _2228) == 0u) || ((_2229 & 240u) == 0u))
        {
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
        }
        else
        {
            float _2330;
            float _2332;
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            uint _2480 = 0u;
            uint _2489;
            bool _2490;
            for (;;)
            {
                _2489 = texelFetch(g_lightClassification, int((((_2222 << 5u) + (_2208 << 9u)) + (_2480 << 2u)) >> 2u)).x;
                _2490 = _2489 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2490)
                {
                    frontier_phi_61_pred = _2474;
                    frontier_phi_61_pred_1 = _2479;
                    frontier_phi_61_pred_2 = _2478;
                    frontier_phi_61_pred_3 = _2477;
                    frontier_phi_61_pred_4 = _2476;
                    frontier_phi_61_pred_5 = _2475;
                }
                else
                {
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    uint _2604;
                    _2598 = _2474;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2478;
                    _2603 = _2479;
                    _2604 = _2489;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    for (;;)
                    {
                        uint _2608 = uint(findLSB(_2604)) + (_2480 << 5u);
                        uint _2605 = (_2604 + 4294967295u) & _2604;
                        uint _2610 = _2608 * 48u;
                        vec4 _2624 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2610)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 3u)).x));
                        uint _2630 = (_2608 * 48u) + 4u;
                        vec4 _2643 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2630)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 3u)).x));
                        uint _2649 = (_2608 * 48u) + 8u;
                        vec3 _2660 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x));
                        float _2664 = _2624.x - _2182;
                        float _2665 = _2624.y - _2183;
                        float _2666 = _2624.z - _2184;
                        float _2667 = dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666));
                        float _2670 = inversesqrt(_2667);
                        float _2671 = _2670 * _2664;
                        float _2672 = _2670 * _2665;
                        float _2673 = _2670 * _2666;
                        float _2674 = dot(vec3(_416, _419, _422), vec3(_2671, _2672, _2673));
                        float _2679 = 1.0 - (_2667 * _2624.w);
                        float _3950 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
                        float _2680 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
                        float _2681 = sqrt(_2667) * _2643.w;
                        float _2684 = 1.39999997615814208984375 / (_2681 + 1.39999997615814208984375);
                        float _2685 = _2684 * _2684;
                        float _2688 = ((1.0 - _2685) * _2674) + _2685;
                        float _2691 = _2681 * _2681;
                        float _2695 = ((isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0))) * _2680) / ((_2691 * 0.699999988079071044921875) + 1.0);
                        float _2699 = (-0.0) - _2182;
                        float _2700 = (-0.0) - _2183;
                        float _2701 = (-0.0) - _2184;
                        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
                        float _2706 = _2705 * _2699;
                        float _2707 = _2705 * _2700;
                        float _2708 = _2705 * _2701;
                        float _2716 = exp2(log2(1.0 / ((_2691 * 3.5) + 5.0)) * 0.25);
                        float _2717 = 1.0 - _492;
                        float _2724 = sqrt(1.0 - ((1.0 - (_2717 * _2717)) * (1.0 - (_2716 * _2716))));
                        float _2725 = _2724 * _2724;
                        float _2726 = _2725 * _2725;
                        float _2727 = _2706 + _2671;
                        float _2728 = _2707 + _2672;
                        float _2729 = _2708 + _2673;
                        float _2733 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
                        float _2737 = dot(vec3(_416, _419, _422), vec3(_2706, _2707, _2708));
                        float _3966 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2740 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
                        float _2741 = dot(vec3(_416, _419, _422), vec3(_2733 * _2727, _2733 * _2728, _2733 * _2729));
                        float _3977 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2744 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                        float _2748 = ((_2744 * _2744) * (_2726 + (-1.0))) + 1.0;
                        float _2749 = _2684 * _2725;
                        float _2750 = _2749 * _2749;
                        float _2753 = ((1.0 - _2750) * _2674) + _2750;
                        float _3988 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2754 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                        float _2755 = 1.0 - _2725;
                        float _2765 = (0.5 / (((_2754 * ((_2740 * _2755) + _2725)) + 9.9999999392252902907785028219223e-09) + (((_2754 * _2755) + _2725) * _2740))) * _2754;
                        float _3999 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2776 = (((_2726 * 3.1415927410125732421875) * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) / ((_2748 * _2748) * ((_2691 * 2.1991131305694580078125) + 3.141590118408203125))) * _2680;
                        _2533 = (_2695 * _2643.x) + _2601;
                        _2534 = (_2695 * _2643.y) + _2602;
                        _2535 = (_2695 * _2643.z) + _2603;
                        _2530 = (_2776 * _2660.x) + _2598;
                        _2531 = (_2776 * _2660.y) + _2599;
                        _2532 = (_2776 * _2660.z) + _2600;
                        if (_2605 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2598 = _2530;
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2534;
                            _2603 = _2535;
                            _2604 = _2605;
                        }
                    }
                    frontier_phi_61_pred = _2530;
                    frontier_phi_61_pred_1 = _2535;
                    frontier_phi_61_pred_2 = _2534;
                    frontier_phi_61_pred_3 = _2533;
                    frontier_phi_61_pred_4 = _2532;
                    frontier_phi_61_pred_5 = _2531;
                }
                _2330 = frontier_phi_61_pred;
                _2340 = frontier_phi_61_pred_1;
                _2338 = frontier_phi_61_pred_2;
                _2336 = frontier_phi_61_pred_3;
                _2334 = frontier_phi_61_pred_4;
                _2332 = frontier_phi_61_pred_5;
                uint _2481 = _2480 + 1u;
                if (_2481 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2474 = _2330;
                    _2475 = _2332;
                    _2476 = _2334;
                    _2477 = _2336;
                    _2478 = _2338;
                    _2479 = _2340;
                    _2480 = _2481;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
        }
        uvec4 _2343 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2344 = _2343.z;
        uint _2346 = (_2344 >> 8u) & 15u;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        if (((4294967295u << _2346) & _2228) == 0u)
        {
            _2442 = _2329;
            _2444 = _2331;
            _2446 = _2333;
            _2448 = _2335;
            _2450 = _2337;
            _2452 = _2339;
        }
        else
        {
            float _2467 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
            float _2468 = _2467 * _2182;
            float _2469 = _2467 * _2183;
            float _2470 = _2467 * _2184;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2346 < ((_2344 >> 12u) & 15u))
            {
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2453;
                float _2581 = _2329;
                float _2582 = _2331;
                float _2583 = _2333;
                float _2584 = _2335;
                float _2585 = _2337;
                float _2586 = _2339;
                uint _2587 = _2346;
                uint _2596;
                bool _2597;
                for (;;)
                {
                    _2596 = texelFetch(g_lightClassification, int((((_2222 << 5u) + (_2208 << 9u)) + (_2587 << 2u)) >> 2u)).x;
                    _2597 = _2596 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2597)
                    {
                        frontier_phi_67_pred = _2584;
                        frontier_phi_67_pred_1 = _2585;
                        frontier_phi_67_pred_2 = _2586;
                        frontier_phi_67_pred_3 = _2583;
                        frontier_phi_67_pred_4 = _2582;
                        frontier_phi_67_pred_5 = _2581;
                    }
                    else
                    {
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _2794 = _2581;
                        float _2795 = _2582;
                        float _2796 = _2583;
                        float _2797 = _2584;
                        float _2798 = _2585;
                        float _2799 = _2586;
                        uint _2800 = _2596;
                        uint _2801;
                        vec4 _2826;
                        float _2827;
                        vec4 _2842;
                        vec3 _2854;
                        vec4 _2870;
                        vec4 _2886;
                        float _2933;
                        bool _2934;
                        for (;;)
                        {
                            uint _2811 = ((_2587 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2800));
                            _2801 = (_2800 + 4294967295u) & _2800;
                            uint _2813 = _2811 * 40u;
                            _2826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 3u)).x));
                            _2827 = _2826.w;
                            uint _2829 = (_2811 * 40u) + 4u;
                            _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            uint _2844 = (_2811 * 40u) + 8u;
                            _2854 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x));
                            uint _2857 = (_2811 * 40u) + 16u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            uint _2873 = (_2811 * 40u) + 20u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            uint _2889 = (_2811 * 40u) + 24u;
                            vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2908 = (_2811 * 40u) + 28u;
                            vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            _2933 = fma(_2184, _2921.z, fma(_2183, _2921.y, _2921.x * _2182)) + _2921.w;
                            _2934 = !((fma(_2184, _2902.z, fma(_2183, _2902.y, _2902.x * _2182)) + _2902.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2934)
                            {
                                float _2961 = _2826.x - _2182;
                                float _2962 = _2826.y - _2183;
                                float _2963 = _2826.z - _2184;
                                float _2964 = dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963));
                                float _2967 = inversesqrt(_2964);
                                float _2968 = _2967 * _2961;
                                float _2969 = _2967 * _2962;
                                float _2970 = _2967 * _2963;
                                float _2974 = 1.0 - (_2964 / (_2827 * _2827));
                                float _4010 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2975 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                                float _2979 = sqrt(_2964) * _2842.w;
                                float _2981 = 1.39999997615814208984375 / (_2979 + 1.39999997615814208984375);
                                float _2982 = _2981 * _2981;
                                float _2985 = ((1.0 - _2982) * dot(vec3(_2968, _2969, _2970), vec3(_416, _419, _422))) + _2982;
                                float _2988 = _2979 * _2979;
                                float _2992 = (fma(_2184, _2870.z, fma(_2183, _2870.y, _2870.x * _2182)) + _2870.w) / _2933;
                                float _2993 = (fma(_2184, _2886.z, fma(_2183, _2886.y, _2886.x * _2182)) + _2886.w) / _2933;
                                float _2997 = 1.0 - dot(vec2(_2992, _2993), vec2(_2992, _2993));
                                float _4026 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _2998 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                                float _2999 = _2998 * (((isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))) * _2975) / ((_2988 * 0.699999988079071044921875) + 1.0));
                                float _3011 = exp2(log2(1.0 / ((_2988 * 3.5) + 5.0)) * 0.25);
                                float _3012 = 1.0 - _492;
                                float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                                float _3020 = _3019 * _3019;
                                float _3021 = _3020 * _3020;
                                float _3022 = _2968 - _2468;
                                float _3023 = _2969 - _2469;
                                float _3024 = _2970 - _2470;
                                float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                                float _3032 = dot(vec3(_416, _419, _422), vec3((-0.0) - _2468, (-0.0) - _2469, (-0.0) - _2470));
                                float _4037 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3035 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                                float _3036 = dot(vec3(_416, _419, _422), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                                float _4048 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3039 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                                float _3044 = _2981 * _3020;
                                float _3045 = _3044 * _3044;
                                float _3051 = ((1.0 - _3045) * dot(vec3(_416, _419, _422), vec3(_2968, _2969, _2970))) + _3045;
                                float _4059 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3053 = 1.0 - _3020;
                                float _3063 = (0.5 / (((_3052 * ((_3035 * _3053) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3052 * _3053) + _3020) * _3035))) * _3052;
                                float _4070 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3073 = (_2998 * _2975) * (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) / ((_3043 * _3043) * ((_2988 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3073 * _2854.x;
                                frontier_phi_73_pred_1 = _3073 * _2854.y;
                                frontier_phi_73_pred_2 = _2999 * _2842.z;
                                frontier_phi_73_pred_3 = _2999 * _2842.y;
                                frontier_phi_73_pred_4 = _2999 * _2842.x;
                                frontier_phi_73_pred_5 = _3073 * _2854.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3077 = frontier_phi_73_pred;
                            _3078 = frontier_phi_73_pred_1;
                            _3082 = frontier_phi_73_pred_2;
                            _3081 = frontier_phi_73_pred_3;
                            _3080 = frontier_phi_73_pred_4;
                            _3079 = frontier_phi_73_pred_5;
                            _2784 = _3080 + _2797;
                            _2785 = _3081 + _2798;
                            _2786 = _3082 + _2799;
                            _2781 = _3077 + _2794;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            if (_2801 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2801;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2784;
                        frontier_phi_67_pred_1 = _2785;
                        frontier_phi_67_pred_2 = _2786;
                        frontier_phi_67_pred_3 = _2783;
                        frontier_phi_67_pred_4 = _2782;
                        frontier_phi_67_pred_5 = _2781;
                    }
                    _2449 = frontier_phi_67_pred;
                    _2451 = frontier_phi_67_pred_1;
                    _2453 = frontier_phi_67_pred_2;
                    _2447 = frontier_phi_67_pred_3;
                    _2445 = frontier_phi_67_pred_4;
                    _2443 = frontier_phi_67_pred_5;
                    uint _2588 = _2587 + 1u;
                    if (_2588 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2581 = _2443;
                        _2582 = _2445;
                        _2583 = _2447;
                        _2584 = _2449;
                        _2585 = _2451;
                        _2586 = _2453;
                        _2587 = _2588;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2451;
                frontier_phi_55_56_ladder_1 = _2453;
                frontier_phi_55_56_ladder_2 = _2449;
                frontier_phi_55_56_ladder_3 = _2447;
                frontier_phi_55_56_ladder_4 = _2445;
                frontier_phi_55_56_ladder_5 = _2443;
            }
            else
            {
                frontier_phi_55_56_ladder = _2337;
                frontier_phi_55_56_ladder_1 = _2339;
                frontier_phi_55_56_ladder_2 = _2335;
                frontier_phi_55_56_ladder_3 = _2333;
                frontier_phi_55_56_ladder_4 = _2331;
                frontier_phi_55_56_ladder_5 = _2329;
            }
            _2442 = frontier_phi_55_56_ladder_5;
            _2444 = frontier_phi_55_56_ladder_4;
            _2446 = frontier_phi_55_56_ladder_3;
            _2448 = frontier_phi_55_56_ladder_2;
            _2450 = frontier_phi_55_56_ladder;
            _2452 = frontier_phi_55_56_ladder_1;
        }
        float _2457 = isnan(1.0) ? _476 : (isnan(_476) ? 1.0 : min(_476, 1.0));
        _2241 = (_2457 * _2448) + _1674;
        _2243 = (_2457 * _2450) + _1676;
        _2245 = (_2457 * _2452) + _1678;
        _2247 = ((_2442 * _461) * _2457) + _2022;
        _2249 = ((_2444 * _463) * _2457) + _2024;
        _2251 = ((_2446 * _464) * _2457) + _2026;
    }
    else
    {
        _2241 = _1674;
        _2243 = _1676;
        _2245 = _1678;
        _2247 = _2022;
        _2249 = _2024;
        _2251 = _2026;
    }
    float _4086 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4097 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4108 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    uint _2271 = _435 + 6u;
    float _2279 = _394 / cbSceneParam._m0[86u].x;
    float _2280 = _395 / cbSceneParam._m0[86u].y;
    vec4 _2294 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2279, _2280, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2296 = _2294.x;
    float _2297 = _2294.y;
    float _2298 = _2294.z;
    float _2299 = _2294.w;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2354 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2355 = _2354 / _328;
        float _2366 = _2355 * _379;
        float _2367 = _380 * _2355;
        float _2368 = (-0.0) - _2367;
        float _2370 = _2355 * _381;
        float _2372 = (cbSceneParam._m0[77u].w * _2368) / _2354;
        float _2373 = _2372 + cbSceneParam._m0[79u].w;
        float _2374 = cbSceneParam._m0[79u].w - _2367;
        float _2380 = sqrt(((_2366 * _2366) + (_2367 * _2367)) + (_2370 * _2370));
        float _2383 = (1.0 - (cbSceneParam._m0[77u].w / _2354)) * _2380;
        float _2388 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2390 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2543;
        if (abs((_2368 - _2372) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2543 = ((((_2373 > 0.0) ? exp2(_2388 * _2373) : (2.0 - exp2(_2390 * _2373))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2383;
        }
        else
        {
            float _2503 = 1.0 / cbSceneParam._m0[80u].x;
            float _2504 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : max(_2373, _2374));
            float _2505 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : min(_2373, _2374));
            float _2514 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : min(_2504, 0.0));
            float _2515 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : min(_2505, 0.0));
            _2543 = ((abs(_2380 / _2368) * cbSceneParam._m0[80u].y) * ((((_2514 - _2515) * 2.0) - ((exp2(_2388 * (isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0)))) - exp2(_2388 * (isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0))))) * _2503)) - ((exp2(_2390 * _2514) - exp2(_2390 * _2515)) * _2503))) + (_2383 * cbSceneParam._m0[80u].z);
        }
        vec4 _2545 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2279, _2280, 1.0), 0.0);
        float _2554 = exp2((_2543 * (-1.44269502162933349609375)) * (1.0 - _2545.w));
        float _2555 = log2(_2554);
        float _2571 = log2(_2299);
        _2392 = (exp2(_2571 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2555 * cbSceneParam._m0[78u].x)) * _2545.x) / cbSceneParam._m0[78u].x)) + _2296;
        _2394 = (exp2(_2571 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2555 * cbSceneParam._m0[78u].y)) * _2545.y) / cbSceneParam._m0[78u].y)) + _2297;
        _2396 = (exp2(_2571 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2555 * cbSceneParam._m0[78u].z)) * _2545.z) / cbSceneParam._m0[78u].z)) + _2298;
        _2398 = _2554 * _2299;
    }
    else
    {
        _2392 = _2296;
        _2394 = _2297;
        _2396 = _2298;
        _2398 = _2299;
    }
    float _2410 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2411 = _2410 == 3.0;
    float _2412 = log2(_2398);
    float _2419 = exp2(_2412 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2241 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _476))) + ((_2247 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1286)) * cbPerFrame._m0[3u].x));
    float _2420 = exp2(_2412 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2243 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _476))) + ((_2249 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1286)) * cbPerFrame._m0[3u].x));
    float _2421 = exp2(_2412 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2245 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _476))) + ((_2251 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1286)) * cbPerFrame._m0[3u].x));
    float _2430 = (_2410 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2430 * (_2411 ? _2419 : (_2419 + (cbSceneParam._m0[72u].w * _2392)));
    SV_Target.y = _2430 * (_2411 ? _2420 : (_2420 + (cbSceneParam._m0[72u].w * _2394)));
    SV_Target.z = _2430 * (_2411 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2396)));
    SV_Target.w = cbInstanceData._m0[_2271].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2271].w;
}


