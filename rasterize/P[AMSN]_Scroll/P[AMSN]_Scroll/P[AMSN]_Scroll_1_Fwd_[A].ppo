#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _864;
float _3255;
float _3256;
float _3257;
float _3258;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _246.z;
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3267 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))));
    float _266 = fma(_263, _192 * NORMAL.x, fma(_256, _199 * TANGENT.x, (_185 * _178) * _254));
    float _269 = fma(_263, _192 * NORMAL.y, fma(_256, _199 * TANGENT.y, (_185 * _179) * _254));
    float _272 = fma(_263, _192 * NORMAL.z, fma(_256, _199 * TANGENT.z, (_185 * _180) * _254));
    float _276 = inversesqrt(dot(vec3(_266, _269, _272), vec3(_266, _269, _272)));
    float _277 = _276 * _266;
    float _278 = _276 * _269;
    float _279 = _276 * _272;
    float _3278 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _280 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
    float _3289 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3300 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3311 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3322 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _284 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _300 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _341 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _351 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _341);
    float _352 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _341);
    float _353 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _341);
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _351 * _357;
    float _359 = _352 * _357;
    float _360 = _353 * _357;
    vec4 _365 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _367 = _365.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _543 = sqrt(((_351 * _351) + (_352 * _352)) + (_353 * _353));
        float _549 = (cbMatDynParam._m0[5u].x * _543) + cbMatDynParam._m0[5u].y;
        float _3333 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
        float _550 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
        float _554 = (cbMatDynParam._m0[5u].z * _543) + cbMatDynParam._m0[5u].w;
        float _3344 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) - _550)) + _550) < ((_367 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _379 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _380 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _400 = fma(_279, cbSceneParam._m0[5u].z, fma(_278, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _277));
    float _403 = fma(_279, cbSceneParam._m0[6u].z, fma(_278, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _277));
    float _406 = fma(_279, cbSceneParam._m0[7u].z, fma(_278, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _277));
    uint _419 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = _419 + 9u;
    uint _422 = _421 + uint(cbMatDynParam._m0[0u].w);
    float _428 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0)))) * cbInstanceData._m0[_422].x;
    float _429 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0)))) * cbInstanceData._m0[_422].y;
    float _430 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) * cbInstanceData._m0[_422].z;
    float _3355 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _3366 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _3377 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _434 = 1.0 - _284;
    float _435 = _431 * _434;
    float _436 = _432 * _434;
    float _437 = _433 * _434;
    float _442 = (_431 + (-0.039999999105930328369140625)) * _284;
    float _443 = (_432 + (-0.039999999105930328369140625)) * _284;
    float _444 = (_433 + (-0.039999999105930328369140625)) * _284;
    float _445 = _442 + 0.039999999105930328369140625;
    float _447 = _443 + 0.039999999105930328369140625;
    float _448 = _444 + 0.039999999105930328369140625;
    vec4 _457 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _379, cbSceneParam._m0[86u].y * _380));
    float _460 = _457.x * TEXCOORD.z;
    float _461 = dot(vec3(_277, _278, _279), vec3(_358, _359, _360));
    float _464 = _461 * 2.0;
    float _468 = (_464 * _277) - _358;
    float _469 = (_464 * _278) - _359;
    float _470 = (_464 * _279) - _360;
    float _474 = abs(dot(vec3(_358, _359, _360), vec3(_277, _278, _279)));
    float _3388 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _476 = sqrt(_280);
    float _489 = exp2((_476 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_476 * 3.0));
    float _495 = (1.0 - _489) * ((_476 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _496 = _489 * _476;
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _863;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _588 = fma(_532, cbModelParam._m0[26u].z, fma(_528, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _524));
        float _592 = fma(_532, cbModelParam._m0[27u].z, fma(_528, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _524));
        float _596 = fma(_532, cbModelParam._m0[28u].z, fma(_528, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _524));
        float _621 = _524 + _277;
        float _622 = _528 + _278;
        float _623 = _532 + _279;
        float _633 = fma(_623, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _621)) - _588;
        float _634 = fma(_623, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _621)) - _592;
        float _635 = fma(_623, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _621)) - _596;
        float _639 = inversesqrt(dot(vec3(_633, _634, _635), vec3(_633, _634, _635)));
        float _652 = ((_639 * _633) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_588 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _653 = ((_639 * _634) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_592 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_639 * _635) / cbModelParam._m0[34u].z) + ((((((_596 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        float _691 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_657.x + (-0.5));
        float _693 = _691 * (_657.y + (-0.5));
        float _694 = _691 * (_657.z + (-0.5));
        float _701 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_664.x + (-0.5));
        float _703 = _701 * (_664.y + (-0.5));
        float _704 = _701 * (_664.z + (-0.5));
        float _711 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_671.x + (-0.5));
        float _713 = _711 * (_671.y + (-0.5));
        float _714 = _711 * (_671.z + (-0.5));
        float _721 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_678.x + (-0.5));
        float _723 = _721 * (_678.y + (-0.5));
        float _724 = _721 * (_678.z + (-0.5));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = _692 * 0.5;
        float _729 = _702 * 0.5;
        float _730 = _712 * 0.5;
        float _731 = dot(vec3(_728, _729, _730), vec3(_728, _729, _730));
        float _736 = (_731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_731);
        float _745 = (dot(vec3(_277, _278, _279), vec3(_736 * _728, _736 * _729, _736 * _730)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _755 = sqrt(((_729 * _729) + (_728 * _728)) + (_730 * _730)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _3436 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_757 + 1.0))) + _762) * _725;
        float _772 = _693 * 0.5;
        float _773 = _703 * 0.5;
        float _774 = _713 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _788 = (dot(vec3(_277, _278, _279), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _797 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3469 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_799 + 1.0))) + _804) * _726;
        float _814 = _694 * 0.5;
        float _815 = _704 * 0.5;
        float _816 = _714 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _830 = (dot(vec3(_277, _278, _279), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _839 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3502 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_841 + 1.0))) + _846) * _727;
        _863 = _694;
        _865 = _693;
        _866 = _692;
        _867 = _704;
        _868 = _703;
        _869 = _702;
        _870 = _714;
        _871 = _713;
        _872 = _712;
        _873 = _727;
        _874 = _726;
        _875 = _725;
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
    }
    else
    {
        _863 = _864;
        _865 = _864;
        _866 = _864;
        _867 = _864;
        _868 = _864;
        _869 = _864;
        _870 = _864;
        _871 = _864;
        _872 = _864;
        _873 = _864;
        _874 = _864;
        _875 = _864;
        _876 = 0.0;
        _877 = 0.0;
        _878 = 0.0;
    }
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _907 = fma(_532, cbModelParam._m0[30u].z, fma(_528, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _524));
        float _911 = fma(_532, cbModelParam._m0[31u].z, fma(_528, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _524));
        float _915 = fma(_532, cbModelParam._m0[32u].z, fma(_528, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _524));
        float _938 = _524 + _277;
        float _939 = _528 + _278;
        float _940 = _532 + _279;
        float _950 = fma(_940, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938)) - _907;
        float _951 = fma(_940, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938)) - _911;
        float _952 = fma(_940, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938)) - _915;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_907 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_911 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[35u].z) + ((((((_915 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1006 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_973.x + (-0.5));
        float _1008 = _1006 * (_973.y + (-0.5));
        float _1009 = _1006 * (_973.z + (-0.5));
        float _1016 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_980.x + (-0.5));
        float _1018 = _1016 * (_980.y + (-0.5));
        float _1019 = _1016 * (_980.z + (-0.5));
        float _1026 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_987.x + (-0.5));
        float _1028 = _1026 * (_987.y + (-0.5));
        float _1029 = _1026 * (_987.z + (-0.5));
        float _1036 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_994.x + (-0.5));
        float _1038 = _1036 * (_994.y + (-0.5));
        float _1039 = _1036 * (_994.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_277, _278, _279), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3565 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_1070 + 1.0))) + _1075) * _1040;
        float _1085 = _1008 * 0.5;
        float _1086 = _1018 * 0.5;
        float _1087 = _1028 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_277, _278, _279), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3598 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_1112 + 1.0))) + _1117) * _1041;
        float _1127 = _1009 * 0.5;
        float _1128 = _1019 * 0.5;
        float _1129 = _1029 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_277, _278, _279), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3631 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1154 + 1.0))) + _1159) * _1042;
        _1176 = _1009;
        _1177 = _1008;
        _1178 = _1007;
        _1179 = _1019;
        _1180 = _1018;
        _1181 = _1017;
        _1182 = _1029;
        _1183 = _1028;
        _1184 = _1027;
        _1185 = _1042;
        _1186 = _1041;
        _1187 = _1040;
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _864;
        _1177 = _864;
        _1178 = _864;
        _1179 = _864;
        _1180 = _864;
        _1181 = _864;
        _1182 = _864;
        _1183 = _864;
        _1184 = _864;
        _1185 = _864;
        _1186 = _864;
        _1187 = _864;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _876)) + _876;
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _877)) + _877;
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _878)) + _878;
    float _1223 = fma(_1202, cbSceneParam._m0[89u].z, fma(_1201, cbSceneParam._m0[89u].y, _1200 * cbSceneParam._m0[89u].x));
    float _1226 = fma(_1202, cbSceneParam._m0[90u].z, fma(_1201, cbSceneParam._m0[90u].y, _1200 * cbSceneParam._m0[90u].x));
    float _1229 = fma(_1202, cbSceneParam._m0[91u].z, fma(_1201, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1200));
    float _1244 = _468 * 0.5;
    float _1245 = _469 * 0.5;
    float _1246 = _470 * 0.5;
    float _1247 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1250 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1253 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1287;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1260 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_863, _867, _870, _873));
        float _1264 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_865, _868, _871, _874));
        float _1268 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_866, _869, _872, _875));
        float _1275 = dot(vec4(cbModelParam._m0[39u]), vec4(_1244, _1245, _1246, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1298;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1289 = dot(vec4(cbModelParam._m0[40u]), vec4(_1244, _1245, _1246, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1302 = (_1298 * cbModelParam._m0[1u].x) + (_1287 * (1.0 - cbModelParam._m0[1u].x));
    float _1312 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _280);
    float _1313 = isnan(_1312) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1312 : min(cbModelParam._m0[25u].z, _1312));
    float _1395;
    float _1397;
    float _1399;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1362 = fma(_532, cbModelParam._m0[13u].z, fma(_528, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _524)) + cbModelParam._m0[13u].w;
        float _1366 = fma(_532, cbModelParam._m0[14u].z, fma(_528, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _524)) + cbModelParam._m0[14u].w;
        float _1370 = fma(_532, cbModelParam._m0[15u].z, fma(_528, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _524)) + cbModelParam._m0[15u].w;
        float _1373 = fma(_470, cbModelParam._m0[13u].z, fma(_469, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _468));
        float _1376 = fma(_470, cbModelParam._m0[14u].z, fma(_469, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _468));
        float _1379 = fma(_470, cbModelParam._m0[15u].z, fma(_469, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _468));
        float _1407;
        if (_1373 > 0.0)
        {
            _1407 = abs((1.0 - _1362) / _1373);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1362 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1407 = frontier_phi_17_15_ladder;
        }
        float _1615;
        if (_1376 > 0.0)
        {
            _1615 = abs((1.0 - _1366) / _1376);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1366 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1615 = frontier_phi_26_22_ladder;
        }
        float _1869;
        if (_1379 > 0.0)
        {
            _1869 = abs((1.0 - _1370) / _1379);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1370 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1869 = frontier_phi_38_33_ladder;
        }
        float _1871 = isnan(_1615) ? _1407 : (isnan(_1407) ? _1615 : min(_1407, _1615));
        float _1872 = isnan(_1869) ? _1871 : (isnan(_1871) ? _1869 : min(_1871, _1869));
        float _1876 = (_1872 * _1373) + _1362;
        float _1877 = (_1872 * _1376) + _1366;
        float _1878 = (_1872 * _1379) + _1370;
        float _1879 = _1872 * 9.9999997473787516355514526367188e-05;
        float _1881 = (-1.0) - _1879;
        float _1883 = _1879 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1878 > _1883) || ((_1878 < _1881) || ((_1877 > _1883) || ((_1877 < _1881) || ((_1876 < _1881) || (_1876 > _1883))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2006 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1878, cbModelParam._m0[9u].z, fma(_1877, cbModelParam._m0[9u].y, _1876 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1878, cbModelParam._m0[10u].z, fma(_1877, cbModelParam._m0[10u].y, _1876 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1878, cbModelParam._m0[11u].z, fma(_1877, cbModelParam._m0[11u].y, _1876 * cbModelParam._m0[11u].x))), _1313);
            frontier_phi_16_38_ladder = _2006.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2006.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2006.x * cbModelParam._m0[1u].y;
        }
        _1395 = frontier_phi_16_38_ladder_2;
        _1397 = frontier_phi_16_38_ladder_1;
        _1399 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_468, _469, _470), _1313);
        _1395 = _1383.x * cbModelParam._m0[1u].y;
        _1397 = _1383.y * cbModelParam._m0[1u].y;
        _1399 = _1383.z * cbModelParam._m0[1u].y;
    }
    float _1403 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _280);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1403 : min(cbModelParam._m0[25u].w, _1403));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1461 = fma(_532, cbModelParam._m0[21u].z, fma(_528, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _524)) + cbModelParam._m0[21u].w;
        float _1465 = fma(_532, cbModelParam._m0[22u].z, fma(_528, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _524)) + cbModelParam._m0[22u].w;
        float _1469 = fma(_532, cbModelParam._m0[23u].z, fma(_528, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _524)) + cbModelParam._m0[23u].w;
        float _1472 = fma(_470, cbModelParam._m0[21u].z, fma(_469, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _468));
        float _1475 = fma(_470, cbModelParam._m0[22u].z, fma(_469, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _468));
        float _1478 = fma(_470, cbModelParam._m0[23u].z, fma(_469, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _468));
        float _1620;
        if (_1472 > 0.0)
        {
            _1620 = abs((1.0 - _1461) / _1472);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1461 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1620 = frontier_phi_28_24_ladder;
        }
        float _1896;
        if (_1475 > 0.0)
        {
            _1896 = abs((1.0 - _1465) / _1475);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1465 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1896 = frontier_phi_40_35_ladder;
        }
        float _2109;
        if (_1478 > 0.0)
        {
            _2109 = abs((1.0 - _1469) / _1478);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1469 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2109 = frontier_phi_49_46_ladder;
        }
        float _2111 = isnan(_1896) ? _1620 : (isnan(_1620) ? _1896 : min(_1620, _1896));
        float _2112 = isnan(_2109) ? _2111 : (isnan(_2111) ? _2109 : min(_2111, _2109));
        float _2116 = (_2112 * _1472) + _1461;
        float _2117 = (_2112 * _1475) + _1465;
        float _2118 = (_2112 * _1478) + _1469;
        float _2119 = _2112 * 9.9999997473787516355514526367188e-05;
        float _2120 = (-1.0) - _2119;
        float _2122 = _2119 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2118 > _2122) || ((_2118 < _2120) || ((_2117 > _2122) || ((_2117 < _2120) || ((_2116 < _2120) || (_2116 > _2122))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2317 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2118, cbModelParam._m0[17u].z, fma(_2117, cbModelParam._m0[17u].y, _2116 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2118, cbModelParam._m0[18u].z, fma(_2117, cbModelParam._m0[18u].y, _2116 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2118, cbModelParam._m0[19u].z, fma(_2117, cbModelParam._m0[19u].y, _2116 * cbModelParam._m0[19u].x))), _1404);
            frontier_phi_25_49_ladder = _2317.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2317.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2317.x * cbModelParam._m0[1u].z;
        }
        _1497 = frontier_phi_25_49_ladder_2;
        _1499 = frontier_phi_25_49_ladder_1;
        _1501 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_468, _469, _470), _1404);
        _1497 = _1481.x * cbModelParam._m0[1u].z;
        _1499 = _1481.y * cbModelParam._m0[1u].z;
        _1501 = _1481.z * cbModelParam._m0[1u].z;
    }
    float _1514 = (((_495 * _445) + _496) * _460) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1516 = (((_495 * _447) + _496) * _460) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1518 = (((_495 * _448) + _496) * _460) * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1521 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1516, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1516, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1516, cbSceneParam._m0[91u].y, _1514 * cbSceneParam._m0[91u].x));
    uvec4 _1537 = floatBitsToUint(cbInstanceData._m0[_419 + 5u]);
    uint _1539 = _1537.x * 14u;
    uint _1540 = _1539 + 13u;
    float _1547 = _460 + (-1.0);
    float _1552 = (cbLight._m0[_1540].x * _1547) + 1.0;
    float _1553 = (cbLight._m0[_1540].y * _1547) + 1.0;
    float _1554 = (cbLight._m0[_1540].z * _1547) + 1.0;
    float _1555 = (cbLight._m0[_1540].w * _1547) + 1.0;
    uint _1556 = _1539 + 5u;
    float _1562 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
    uint _1566 = _1539 + 4u;
    float _1573 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
    uint _1577 = _1539 | 1u;
    float _1588 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_277, _278, _279));
    float _1591 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_277, _278, _279));
    float _3767 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _3778 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1596 = (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.3183098733425140380859375;
    float _1598 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.3183098733425140380859375;
    float _1605 = ((cbLight._m0[_1556].x * _1562) * _1598) + ((cbLight._m0[_1566].x * _1573) * _1596);
    float _1606 = ((_1562 * cbLight._m0[_1556].y) * _1598) + ((_1573 * cbLight._m0[_1566].y) * _1596);
    float _1607 = ((_1562 * cbLight._m0[_1556].z) * _1598) + ((_1573 * cbLight._m0[_1566].z) * _1596);
    uvec4 _1612 = floatBitsToUint(cbLight._m0[_1539 + 12u]);
    bool _1614 = _1612.x == 0u;
    float _1625;
    float _1627;
    float _1629;
    if (_1614)
    {
        _1625 = _1605;
        _1627 = _1606;
        _1629 = _1607;
    }
    else
    {
        uint _1633 = _1539 + 6u;
        float _1649 = (dot(vec3(cbLight._m0[_1539 + 2u].xyz), vec3(_277, _278, _279)) * 0.5) + 0.5;
        float _1650 = _1649 * _1649;
        float _3789 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1652 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1625 = (((cbLight._m0[_1633].x * 0.3183098733425140380859375) * _1651) * _1652) + _1605;
        _1627 = (((cbLight._m0[_1633].y * 0.3183098733425140380859375) * _1651) * _1652) + _1606;
        _1629 = (((cbLight._m0[_1633].z * 0.3183098733425140380859375) * _1651) * _1652) + _1607;
    }
    bool _1632 = _1612.y == 0u;
    float _1670;
    float _1672;
    float _1674;
    if (_1632)
    {
        _1670 = _1625;
        _1672 = _1627;
        _1674 = _1629;
    }
    else
    {
        uint _1840 = _1539 + 7u;
        float _1856 = (dot(vec3(cbLight._m0[_1539 + 3u].xyz), vec3(_277, _278, _279)) * 0.5) + 0.5;
        float _1857 = _1856 * _1856;
        float _3805 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1859 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _1670 = (((cbLight._m0[_1840].x * 0.3183098733425140380859375) * _1858) * _1859) + _1625;
        _1672 = (((cbLight._m0[_1840].y * 0.3183098733425140380859375) * _1858) * _1859) + _1627;
        _1674 = (((cbLight._m0[_1840].z * 0.3183098733425140380859375) * _1858) * _1859) + _1629;
    }
    uint _1677 = _1539 + 8u;
    float _1690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1539].w)) * _280) * 0.949999988079071044921875);
    float _1691 = _1690 * _1690;
    float _1692 = cbLight._m0[_1539].x + _358;
    float _1693 = cbLight._m0[_1539].y + _359;
    float _1694 = cbLight._m0[_1539].z + _360;
    float _1698 = inversesqrt(dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694)));
    float _1699 = _1698 * _1692;
    float _1700 = _1698 * _1693;
    float _1701 = _1698 * _1694;
    float _1702 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1539].xyz));
    float _3821 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1705 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _1706 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1707 = dot(vec3(_277, _278, _279), vec3(_1699, _1700, _1701));
    float _3843 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1710 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _1711 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_1699, _1700, _1701));
    float _3854 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1715 = _1691 * _1691;
    float _1719 = ((_1710 * _1710) * (_1715 + (-1.0))) + 1.0;
    float _1727 = exp2(log2(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * 5.0);
    float _1728 = 0.959999978542327880859375 - _442;
    float _1730 = 0.959999978542327880859375 - _443;
    float _1731 = 0.959999978542327880859375 - _444;
    float _1738 = 1.0 - _1691;
    float _1749 = (0.5 / (((_1706 * ((_1705 * _1738) + _1691)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _1738) + _1691) * _1705))) * _1705;
    float _3865 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1751 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1715 / ((_1719 * _1719) * 3.141590118408203125));
    uint _1762 = _1539 + 9u;
    float _1773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1577].w)) * _280) * 0.949999988079071044921875);
    float _1774 = _1773 * _1773;
    float _1775 = cbLight._m0[_1577].x + _358;
    float _1776 = cbLight._m0[_1577].y + _359;
    float _1777 = cbLight._m0[_1577].z + _360;
    float _1781 = inversesqrt(dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777)));
    float _1782 = _1781 * _1775;
    float _1783 = _1781 * _1776;
    float _1784 = _1781 * _1777;
    float _1785 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1577].xyz));
    float _3876 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _1789 = dot(vec3(_277, _278, _279), vec3(_1782, _1783, _1784));
    float _3887 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _1793 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_1782, _1783, _1784));
    float _3898 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1797 = _1774 * _1774;
    float _1801 = ((_1792 * _1792) * (_1797 + (-1.0))) + 1.0;
    float _1808 = exp2(log2(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * 5.0);
    float _1815 = 1.0 - _1774;
    float _1825 = (0.5 / (((_1706 * ((_1788 * _1815) + _1774)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _1815) + _1774) * _1788))) * _1788;
    float _3909 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1827 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1797 / ((_1801 * _1801) * 3.141590118408203125));
    float _1837 = (((((_1808 * _1728) + _445) * cbLight._m0[_1762].x) * _1827) * _1562) + (((((_1727 * _1728) + _445) * cbLight._m0[_1677].x) * _1751) * _1573);
    float _1838 = (((((_1808 * _1730) + _447) * cbLight._m0[_1762].y) * _1827) * _1562) + (((((_1727 * _1730) + _447) * cbLight._m0[_1677].y) * _1751) * _1573);
    float _1839 = (((((_1808 * _1731) + _448) * cbLight._m0[_1762].z) * _1827) * _1562) + (((((_1727 * _1731) + _448) * cbLight._m0[_1677].z) * _1751) * _1573);
    float _1901;
    float _1903;
    float _1905;
    if (_1614)
    {
        _1901 = _1837;
        _1903 = _1838;
        _1905 = _1839;
    }
    else
    {
        uint _1907 = _1539 + 2u;
        uint _1911 = _1539 + 10u;
        float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1907].w)) * _280) * 0.949999988079071044921875);
        float _1926 = _1925 * _1925;
        float _1927 = cbLight._m0[_1907].x + _358;
        float _1928 = cbLight._m0[_1907].y + _359;
        float _1929 = cbLight._m0[_1907].z + _360;
        float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
        float _1934 = _1933 * _1927;
        float _1935 = _1933 * _1928;
        float _1936 = _1933 * _1929;
        float _1937 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1907].xyz));
        float _3920 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1940 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1941 = dot(vec3(_277, _278, _279), vec3(_1934, _1935, _1936));
        float _3931 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1944 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1945 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_1934, _1935, _1936));
        float _3942 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1949 = _1926 * _1926;
        float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
        float _1960 = exp2(log2(1.0 - (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * 5.0);
        float _1967 = 1.0 - _1926;
        float _1977 = (0.5 / (((_1706 * ((_1940 * _1967) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _1967) + _1926) * _1940))) * _1940;
        float _3953 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1979 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
        float _1980 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1901 = (((((_1960 * _1728) + _445) * cbLight._m0[_1911].x) * _1979) * _1980) + _1837;
        _1903 = (((((_1960 * _1730) + _447) * cbLight._m0[_1911].y) * _1979) * _1980) + _1838;
        _1905 = (((((_1960 * _1731) + _448) * cbLight._m0[_1911].z) * _1979) * _1980) + _1839;
    }
    float _2015;
    float _2017;
    float _2019;
    if (_1632)
    {
        _2015 = _1901;
        _2017 = _1903;
        _2019 = _1905;
    }
    else
    {
        uint _2026 = _1539 + 3u;
        uint _2030 = _1539 + 11u;
        float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _280) * 0.949999988079071044921875);
        float _2045 = _2044 * _2044;
        float _2046 = cbLight._m0[_2026].x + _358;
        float _2047 = cbLight._m0[_2026].y + _359;
        float _2048 = cbLight._m0[_2026].z + _360;
        float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
        float _2053 = _2052 * _2046;
        float _2054 = _2052 * _2047;
        float _2055 = _2052 * _2048;
        float _2056 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_2026].xyz));
        float _3969 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2059 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _2060 = dot(vec3(_277, _278, _279), vec3(_2053, _2054, _2055));
        float _3980 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2063 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2064 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2053, _2054, _2055));
        float _3991 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2068 = _2045 * _2045;
        float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
        float _2079 = exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0);
        float _2086 = 1.0 - _2045;
        float _2096 = (0.5 / (((_1706 * ((_2059 * _2086) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _2086) + _2045) * _2059))) * _2059;
        float _4002 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2098 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
        float _2099 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _2015 = (((((_2079 * _1728) + _445) * cbLight._m0[_2030].x) * _2098) * _2099) + _1901;
        _2017 = (((((_2079 * _1730) + _447) * cbLight._m0[_2030].y) * _2098) * _2099) + _1903;
        _2019 = (((((_2079 * _1731) + _448) * cbLight._m0[_2030].z) * _2098) * _2099) + _1905;
    }
    float _2234;
    float _2236;
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    if (_1537.y == 0u)
    {
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2175 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2174;
        float _2176 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2174;
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2174;
        uvec4 _2189 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2190 = _2189.x;
        uint _2201 = uint((float(_2189.y) * floor(float(uint(cbSceneParam._m0[85u].y * _380) / _2190))) + floor(float(uint(cbSceneParam._m0[85u].x * _379) / _2190)));
        float _2211 = (log2(_2177 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2212 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        uint _2215 = uint(isnan(14.0) ? _2212 : (isnan(_2212) ? 14.0 : min(_2212, 14.0)));
        uvec4 _2220 = texelFetch(g_lightClusterGridBuffer, int(((_2215 << 2u) + (_2201 << 6u)) >> 2u));
        uint _2221 = _2220.x;
        uint _2222 = _2189.z;
        float _2322;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        if (((((1u << ((_2222 >> 4u) & 15u)) + 4294967295u) & _2221) == 0u) || ((_2222 & 240u) == 0u))
        {
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
        }
        else
        {
            float _2323;
            float _2325;
            float _2327;
            float _2329;
            float _2331;
            float _2333;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            uint _2481 = 0u;
            uint _2490;
            bool _2491;
            for (;;)
            {
                _2490 = texelFetch(g_lightClassification, int((((_2215 << 5u) + (_2201 << 9u)) + (_2481 << 2u)) >> 2u)).x;
                _2491 = _2490 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2491)
                {
                    frontier_phi_66_pred = _2475;
                    frontier_phi_66_pred_1 = _2480;
                    frontier_phi_66_pred_2 = _2479;
                    frontier_phi_66_pred_3 = _2478;
                    frontier_phi_66_pred_4 = _2477;
                    frontier_phi_66_pred_5 = _2476;
                }
                else
                {
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    uint _2626;
                    _2620 = _2475;
                    _2621 = _2476;
                    _2622 = _2477;
                    _2623 = _2478;
                    _2624 = _2479;
                    _2625 = _2480;
                    _2626 = _2490;
                    float _2547;
                    float _2548;
                    float _2549;
                    float _2550;
                    float _2551;
                    float _2552;
                    for (;;)
                    {
                        uint _2630 = uint(findLSB(_2626)) + (_2481 << 5u);
                        uint _2627 = (_2626 + 4294967295u) & _2626;
                        uint _2632 = _2630 * 48u;
                        vec4 _2646 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 3u)).x));
                        uint _2652 = (_2630 * 48u) + 4u;
                        vec4 _2665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2652)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 3u)).x));
                        uint _2671 = (_2630 * 48u) + 8u;
                        vec3 _2682 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2671)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 2u)).x));
                        float _2686 = _2646.x - _2175;
                        float _2687 = _2646.y - _2176;
                        float _2688 = _2646.z - _2177;
                        float _2689 = dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688));
                        float _2692 = inversesqrt(_2689);
                        float _2693 = _2692 * _2686;
                        float _2694 = _2692 * _2687;
                        float _2695 = _2692 * _2688;
                        float _2696 = dot(vec3(_400, _403, _406), vec3(_2693, _2694, _2695));
                        float _2701 = 1.0 - (_2689 * _2646.w);
                        float _4028 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
                        float _2702 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2703 = sqrt(_2689) * _2665.w;
                        float _2706 = 1.39999997615814208984375 / (_2703 + 1.39999997615814208984375);
                        float _2707 = _2706 * _2706;
                        float _2710 = ((1.0 - _2707) * _2696) + _2707;
                        float _2713 = _2703 * _2703;
                        float _2717 = ((isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0))) * _2702) / ((_2713 * 0.699999988079071044921875) + 1.0);
                        float _2721 = (-0.0) - _2175;
                        float _2722 = (-0.0) - _2176;
                        float _2723 = (-0.0) - _2177;
                        float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
                        float _2728 = _2727 * _2721;
                        float _2729 = _2727 * _2722;
                        float _2730 = _2727 * _2723;
                        float _2738 = exp2(log2(1.0 / ((_2713 * 3.5) + 5.0)) * 0.25);
                        float _2739 = 1.0 - _476;
                        float _2746 = sqrt(1.0 - ((1.0 - (_2739 * _2739)) * (1.0 - (_2738 * _2738))));
                        float _2747 = _2746 * _2746;
                        float _2748 = _2747 * _2747;
                        float _2749 = _2728 + _2693;
                        float _2750 = _2729 + _2694;
                        float _2751 = _2730 + _2695;
                        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
                        float _2759 = dot(vec3(_400, _403, _406), vec3(_2728, _2729, _2730));
                        float _4044 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2762 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                        float _2763 = dot(vec3(_400, _403, _406), vec3(_2755 * _2749, _2755 * _2750, _2755 * _2751));
                        float _4055 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2766 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2770 = ((_2766 * _2766) * (_2748 + (-1.0))) + 1.0;
                        float _2771 = _2706 * _2747;
                        float _2772 = _2771 * _2771;
                        float _2775 = ((1.0 - _2772) * _2696) + _2772;
                        float _4066 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2776 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2777 = 1.0 - _2747;
                        float _2787 = (0.5 / (((_2776 * ((_2762 * _2777) + _2747)) + 9.9999999392252902907785028219223e-09) + (((_2776 * _2777) + _2747) * _2762))) * _2776;
                        float _4077 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2798 = (((_2748 * 3.1415927410125732421875) * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) / ((_2770 * _2770) * ((_2713 * 2.1991131305694580078125) + 3.141590118408203125))) * _2702;
                        _2550 = (_2717 * _2665.x) + _2623;
                        _2551 = (_2717 * _2665.y) + _2624;
                        _2552 = (_2717 * _2665.z) + _2625;
                        _2547 = (_2798 * _2682.x) + _2620;
                        _2548 = (_2798 * _2682.y) + _2621;
                        _2549 = (_2798 * _2682.z) + _2622;
                        if (_2627 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2620 = _2547;
                            _2621 = _2548;
                            _2622 = _2549;
                            _2623 = _2550;
                            _2624 = _2551;
                            _2625 = _2552;
                            _2626 = _2627;
                        }
                    }
                    frontier_phi_66_pred = _2547;
                    frontier_phi_66_pred_1 = _2552;
                    frontier_phi_66_pred_2 = _2551;
                    frontier_phi_66_pred_3 = _2550;
                    frontier_phi_66_pred_4 = _2549;
                    frontier_phi_66_pred_5 = _2548;
                }
                _2323 = frontier_phi_66_pred;
                _2333 = frontier_phi_66_pred_1;
                _2331 = frontier_phi_66_pred_2;
                _2329 = frontier_phi_66_pred_3;
                _2327 = frontier_phi_66_pred_4;
                _2325 = frontier_phi_66_pred_5;
                uint _2482 = _2481 + 1u;
                if (_2482 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2475 = _2323;
                    _2476 = _2325;
                    _2477 = _2327;
                    _2478 = _2329;
                    _2479 = _2331;
                    _2480 = _2333;
                    _2481 = _2482;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
        }
        uvec4 _2336 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2337 = _2336.z;
        uint _2339 = (_2337 >> 8u) & 15u;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        if (((4294967295u << _2339) & _2221) == 0u)
        {
            _2443 = _2322;
            _2445 = _2324;
            _2447 = _2326;
            _2449 = _2328;
            _2451 = _2330;
            _2453 = _2332;
        }
        else
        {
            float _2468 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
            float _2469 = _2468 * _2175;
            float _2470 = _2468 * _2176;
            float _2471 = _2468 * _2177;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2339 < ((_2337 >> 12u) & 15u))
            {
                float _2444;
                float _2446;
                float _2448;
                float _2450;
                float _2452;
                float _2454;
                float _2603 = _2322;
                float _2604 = _2324;
                float _2605 = _2326;
                float _2606 = _2328;
                float _2607 = _2330;
                float _2608 = _2332;
                uint _2609 = _2339;
                uint _2618;
                bool _2619;
                for (;;)
                {
                    _2618 = texelFetch(g_lightClassification, int((((_2215 << 5u) + (_2201 << 9u)) + (_2609 << 2u)) >> 2u)).x;
                    _2619 = _2618 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2619)
                    {
                        frontier_phi_77_pred = _2608;
                        frontier_phi_77_pred_1 = _2607;
                        frontier_phi_77_pred_2 = _2606;
                        frontier_phi_77_pred_3 = _2605;
                        frontier_phi_77_pred_4 = _2604;
                        frontier_phi_77_pred_5 = _2603;
                    }
                    else
                    {
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _2825 = _2603;
                        float _2826 = _2604;
                        float _2827 = _2605;
                        float _2828 = _2606;
                        float _2829 = _2607;
                        float _2830 = _2608;
                        uint _2831 = _2618;
                        uint _2832;
                        vec4 _2857;
                        float _2858;
                        vec4 _2873;
                        vec3 _2885;
                        vec4 _2901;
                        vec4 _2917;
                        float _2964;
                        bool _2965;
                        for (;;)
                        {
                            uint _2842 = ((_2609 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2831));
                            _2832 = (_2831 + 4294967295u) & _2831;
                            uint _2844 = _2842 * 40u;
                            _2857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 3u)).x));
                            _2858 = _2857.w;
                            uint _2860 = (_2842 * 40u) + 4u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            uint _2875 = (_2842 * 40u) + 8u;
                            _2885 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x));
                            uint _2888 = (_2842 * 40u) + 16u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            uint _2904 = (_2842 * 40u) + 20u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2920 = (_2842 * 40u) + 24u;
                            vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            uint _2939 = (_2842 * 40u) + 28u;
                            vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            _2964 = fma(_2177, _2952.z, fma(_2176, _2952.y, _2952.x * _2175)) + _2952.w;
                            _2965 = !((fma(_2177, _2933.z, fma(_2176, _2933.y, _2933.x * _2175)) + _2933.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2965)
                            {
                                float _2992 = _2857.x - _2175;
                                float _2993 = _2857.y - _2176;
                                float _2994 = _2857.z - _2177;
                                float _2995 = dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994));
                                float _2998 = inversesqrt(_2995);
                                float _2999 = _2998 * _2992;
                                float _3000 = _2998 * _2993;
                                float _3001 = _2998 * _2994;
                                float _3005 = 1.0 - (_2995 / (_2858 * _2858));
                                float _4088 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3006 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3010 = sqrt(_2995) * _2873.w;
                                float _3012 = 1.39999997615814208984375 / (_3010 + 1.39999997615814208984375);
                                float _3013 = _3012 * _3012;
                                float _3016 = ((1.0 - _3013) * dot(vec3(_2999, _3000, _3001), vec3(_400, _403, _406))) + _3013;
                                float _3019 = _3010 * _3010;
                                float _3023 = (fma(_2177, _2901.z, fma(_2176, _2901.y, _2901.x * _2175)) + _2901.w) / _2964;
                                float _3024 = (fma(_2177, _2917.z, fma(_2176, _2917.y, _2917.x * _2175)) + _2917.w) / _2964;
                                float _3028 = 1.0 - dot(vec2(_3023, _3024), vec2(_3023, _3024));
                                float _4104 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3029 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3030 = _3029 * (((isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))) * _3006) / ((_3019 * 0.699999988079071044921875) + 1.0));
                                float _3042 = exp2(log2(1.0 / ((_3019 * 3.5) + 5.0)) * 0.25);
                                float _3043 = 1.0 - _476;
                                float _3050 = sqrt(1.0 - ((1.0 - (_3043 * _3043)) * (1.0 - (_3042 * _3042))));
                                float _3051 = _3050 * _3050;
                                float _3052 = _3051 * _3051;
                                float _3053 = _2999 - _2469;
                                float _3054 = _3000 - _2470;
                                float _3055 = _3001 - _2471;
                                float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                                float _3063 = dot(vec3(_400, _403, _406), vec3((-0.0) - _2469, (-0.0) - _2470, (-0.0) - _2471));
                                float _4115 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3066 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3067 = dot(vec3(_400, _403, _406), vec3(_3059 * _3053, _3059 * _3054, _3059 * _3055));
                                float _4126 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3070 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3074 = ((_3070 * _3070) * (_3052 + (-1.0))) + 1.0;
                                float _3075 = _3012 * _3051;
                                float _3076 = _3075 * _3075;
                                float _3082 = ((1.0 - _3076) * dot(vec3(_400, _403, _406), vec3(_2999, _3000, _3001))) + _3076;
                                float _4137 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3083 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3084 = 1.0 - _3051;
                                float _3094 = (0.5 / (((_3083 * ((_3066 * _3084) + _3051)) + 9.9999999392252902907785028219223e-09) + (((_3083 * _3084) + _3051) * _3066))) * _3083;
                                float _4148 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3104 = (_3029 * _3006) * (((_3052 * 3.1415927410125732421875) * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) / ((_3074 * _3074) * ((_3019 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3030 * _2873.y;
                                frontier_phi_83_pred_1 = _3030 * _2873.x;
                                frontier_phi_83_pred_2 = _3104 * _2885.z;
                                frontier_phi_83_pred_3 = _3104 * _2885.y;
                                frontier_phi_83_pred_4 = _3104 * _2885.x;
                                frontier_phi_83_pred_5 = _3030 * _2873.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3112 = frontier_phi_83_pred;
                            _3111 = frontier_phi_83_pred_1;
                            _3110 = frontier_phi_83_pred_2;
                            _3109 = frontier_phi_83_pred_3;
                            _3108 = frontier_phi_83_pred_4;
                            _3113 = frontier_phi_83_pred_5;
                            _2815 = _3111 + _2828;
                            _2816 = _3112 + _2829;
                            _2817 = _3113 + _2830;
                            _2812 = _3108 + _2825;
                            _2813 = _3109 + _2826;
                            _2814 = _3110 + _2827;
                            if (_2832 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2832;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2817;
                        frontier_phi_77_pred_1 = _2816;
                        frontier_phi_77_pred_2 = _2815;
                        frontier_phi_77_pred_3 = _2814;
                        frontier_phi_77_pred_4 = _2813;
                        frontier_phi_77_pred_5 = _2812;
                    }
                    _2454 = frontier_phi_77_pred;
                    _2452 = frontier_phi_77_pred_1;
                    _2450 = frontier_phi_77_pred_2;
                    _2448 = frontier_phi_77_pred_3;
                    _2446 = frontier_phi_77_pred_4;
                    _2444 = frontier_phi_77_pred_5;
                    uint _2610 = _2609 + 1u;
                    if (_2610 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2603 = _2444;
                        _2604 = _2446;
                        _2605 = _2448;
                        _2606 = _2450;
                        _2607 = _2452;
                        _2608 = _2454;
                        _2609 = _2610;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2448;
                frontier_phi_58_59_ladder_1 = _2454;
                frontier_phi_58_59_ladder_2 = _2452;
                frontier_phi_58_59_ladder_3 = _2450;
                frontier_phi_58_59_ladder_4 = _2446;
                frontier_phi_58_59_ladder_5 = _2444;
            }
            else
            {
                frontier_phi_58_59_ladder = _2326;
                frontier_phi_58_59_ladder_1 = _2332;
                frontier_phi_58_59_ladder_2 = _2330;
                frontier_phi_58_59_ladder_3 = _2328;
                frontier_phi_58_59_ladder_4 = _2324;
                frontier_phi_58_59_ladder_5 = _2322;
            }
            _2443 = frontier_phi_58_59_ladder_5;
            _2445 = frontier_phi_58_59_ladder_4;
            _2447 = frontier_phi_58_59_ladder;
            _2449 = frontier_phi_58_59_ladder_3;
            _2451 = frontier_phi_58_59_ladder_2;
            _2453 = frontier_phi_58_59_ladder_1;
        }
        float _2458 = isnan(1.0) ? _460 : (isnan(_460) ? 1.0 : min(_460, 1.0));
        _2234 = (_2458 * _2449) + _1670;
        _2236 = (_2458 * _2451) + _1672;
        _2238 = (_2458 * _2453) + _1674;
        _2240 = ((_2443 * _445) * _2458) + _2015;
        _2242 = ((_2445 * _447) * _2458) + _2017;
        _2244 = ((_2447 * _448) * _2458) + _2019;
    }
    else
    {
        _2234 = _1670;
        _2236 = _1672;
        _2238 = _1674;
        _2240 = _2015;
        _2242 = _2017;
        _2244 = _2019;
    }
    float _4164 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4175 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4186 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _2261 = ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2234 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _460))) + ((_2240 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1302)) * cbPerFrame._m0[3u].x);
    float _2262 = ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2236 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _460))) + ((_2242 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _1302)) * cbPerFrame._m0[3u].x);
    float _2263 = ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2238 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _460))) + ((_2244 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1302)) * cbPerFrame._m0[3u].x);
    uint _2264 = _419 + 6u;
    float _2272 = _379 / cbSceneParam._m0[86u].x;
    float _2273 = _380 / cbSceneParam._m0[86u].y;
    vec4 _2287 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2272, _2273, (log2((isnan(cbSceneParam._m0[77u].w) ? _300 : (isnan(_300) ? cbSceneParam._m0[77u].w : min(_300, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2289 = _2287.x;
    float _2290 = _2287.y;
    float _2291 = _2287.z;
    float _2292 = _2287.w;
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    if (_300 > cbSceneParam._m0[78u].w)
    {
        float _2347 = isnan(_300) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _300 : min(cbSceneParam._m0[80u].w, _300));
        float _2348 = _2347 / _300;
        float _2359 = _2348 * _351;
        float _2360 = _352 * _2348;
        float _2361 = (-0.0) - _2360;
        float _2363 = _2348 * _353;
        float _2365 = (cbSceneParam._m0[77u].w * _2361) / _2347;
        float _2366 = _2365 + cbSceneParam._m0[79u].w;
        float _2367 = cbSceneParam._m0[79u].w - _2360;
        float _2373 = sqrt(((_2359 * _2359) + (_2360 * _2360)) + (_2363 * _2363));
        float _2376 = (1.0 - (cbSceneParam._m0[77u].w / _2347)) * _2373;
        float _2381 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2383 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2560;
        if (abs((_2361 - _2365) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2560 = ((((_2366 > 0.0) ? exp2(_2381 * _2366) : (2.0 - exp2(_2383 * _2366))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2376;
        }
        else
        {
            float _2504 = 1.0 / cbSceneParam._m0[80u].x;
            float _2505 = isnan(_2367) ? _2366 : (isnan(_2366) ? _2367 : max(_2366, _2367));
            float _2506 = isnan(_2367) ? _2366 : (isnan(_2366) ? _2367 : min(_2366, _2367));
            float _2515 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : min(_2505, 0.0));
            float _2516 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : min(_2506, 0.0));
            _2560 = ((abs(_2373 / _2361) * cbSceneParam._m0[80u].y) * ((((_2515 - _2516) * 2.0) - ((exp2(_2381 * (isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0)))) - exp2(_2381 * (isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0))))) * _2504)) - ((exp2(_2383 * _2515) - exp2(_2383 * _2516)) * _2504))) + (_2376 * cbSceneParam._m0[80u].z);
        }
        vec4 _2562 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2272, _2273, 1.0), 0.0);
        float _2571 = exp2((_2560 * (-1.44269502162933349609375)) * (1.0 - _2562.w));
        float _2572 = log2(_2571);
        float _2588 = log2(_2292);
        _2385 = (exp2(_2588 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].x)) * _2562.x) / cbSceneParam._m0[78u].x)) + _2289;
        _2387 = (exp2(_2588 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].y)) * _2562.y) / cbSceneParam._m0[78u].y)) + _2290;
        _2389 = (exp2(_2588 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].z)) * _2562.z) / cbSceneParam._m0[78u].z)) + _2291;
        _2391 = _2571 * _2292;
    }
    else
    {
        _2385 = _2289;
        _2387 = _2290;
        _2389 = _2291;
        _2391 = _2292;
    }
    bool _2598;
    vec4 _2401;
    vec4 _2423;
    float _2425;
    float _2429;
    float _2430;
    float _2431;
    float _2432;
    bool _2442;
    for (;;)
    {
        _2401 = cbMatDynParam._m0[0u];
        float _2403 = roundEven(_2401.y);
        bool _2404 = _2403 == 3.0;
        float _2405 = log2(_2391);
        float _2412 = exp2(_2405 * cbSceneParam._m0[78u].x) * _2261;
        float _2413 = exp2(_2405 * cbSceneParam._m0[78u].y) * _2262;
        float _2414 = exp2(_2405 * cbSceneParam._m0[78u].z) * _2263;
        float _2421 = _367 + (-0.5);
        _2423 = cbMtdParam._m0[1u];
        _2425 = _2423.y * _2421;
        float _2428 = (_2403 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2429 = _2428 * (_2404 ? _2412 : (_2412 + (cbSceneParam._m0[72u].w * _2385)));
        _2430 = _2428 * (_2404 ? _2413 : (_2413 + (cbSceneParam._m0[72u].w * _2387)));
        _2431 = _2428 * (_2404 ? _2414 : (_2414 + (cbSceneParam._m0[72u].w * _2389)));
        _2432 = _2421 * 0.999000012874603271484375;
        _2442 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2442)
        {
            if ((cbInstanceData._m0[_419 + 7u].x + _2432) < 0.5)
            {
                _2598 = true;
                break;
            }
        }
        uint _2539 = _421 + uint(_2401.w);
        if ((cbInstanceData._m0[_2539].w < 1.0) && ((cbInstanceData._m0[_2539].w + _2432) < 0.5))
        {
            _2598 = true;
            break;
        }
        if ((_2425 + 1.0) < _2423.x)
        {
            _2598 = true;
            break;
        }
        _2598 = false;
        break;
    }
    float _2803;
    if (_2598)
    {
        discard_state = true;
        _2803 = 0.0;
    }
    else
    {
        _2803 = cbInstanceData._m0[_2264].w;
    }
    SV_Target.x = _2429;
    SV_Target.y = _2430;
    SV_Target.z = _2431;
    SV_Target.w = _2803;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2264].w;
    discard_exit();
}


