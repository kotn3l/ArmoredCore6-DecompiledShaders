#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _883;
float _3298;
float _3299;
float _3300;
float _3301;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = cbMtdParam._m0[10u].x + _246.x;
    vec4 _265 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3310 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))));
    float _285 = fma(_282, _196 * NORMAL.x, fma(_275, _203 * TANGENT.x, (_189 * _182) * _273));
    float _288 = fma(_282, _196 * NORMAL.y, fma(_275, _203 * TANGENT.y, (_189 * _183) * _273));
    float _291 = fma(_282, _196 * NORMAL.z, fma(_275, _203 * TANGENT.z, (_189 * _184) * _273));
    float _295 = inversesqrt(dot(vec3(_285, _288, _291), vec3(_285, _288, _291)));
    float _296 = _295 * _285;
    float _297 = _295 * _288;
    float _298 = _295 * _291;
    float _3321 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _299 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3343 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3354 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3365 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _303 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _319 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _360 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _370 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _360);
    float _371 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _360);
    float _372 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _360);
    float _376 = inversesqrt(dot(vec3(_370, _371, _372), vec3(_370, _371, _372)));
    float _377 = _370 * _376;
    float _378 = _371 * _376;
    float _379 = _372 * _376;
    vec4 _384 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _386 = _384.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _562 = sqrt(((_370 * _370) + (_371 * _371)) + (_372 * _372));
        float _568 = (cbMatDynParam._m0[5u].x * _562) + cbMatDynParam._m0[5u].y;
        float _3376 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
        float _569 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _573 = (cbMatDynParam._m0[5u].z * _562) + cbMatDynParam._m0[5u].w;
        float _3387 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) - _569)) + _569) < ((_386 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _398 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _399 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _419 = fma(_298, cbSceneParam._m0[5u].z, fma(_297, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _296));
    float _422 = fma(_298, cbSceneParam._m0[6u].z, fma(_297, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _296));
    float _425 = fma(_298, cbSceneParam._m0[7u].z, fma(_297, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _296));
    uint _438 = uint(roundEven(NORMAL.w)) * 13u;
    uint _440 = _438 + 9u;
    uint _441 = _440 + uint(cbMatDynParam._m0[0u].w);
    float _447 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)))) * cbInstanceData._m0[_441].x;
    float _448 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) * cbInstanceData._m0[_441].y;
    float _449 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0)))) * cbInstanceData._m0[_441].z;
    float _3398 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _3409 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _3420 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _453 = 1.0 - _303;
    float _454 = _450 * _453;
    float _455 = _451 * _453;
    float _456 = _452 * _453;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _303;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _303;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _303;
    float _464 = _461 + 0.039999999105930328369140625;
    float _466 = _462 + 0.039999999105930328369140625;
    float _467 = _463 + 0.039999999105930328369140625;
    vec4 _476 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _398, cbSceneParam._m0[86u].y * _399));
    float _479 = _476.x * TEXCOORD.z;
    float _480 = dot(vec3(_296, _297, _298), vec3(_377, _378, _379));
    float _483 = _480 * 2.0;
    float _487 = (_483 * _296) - _377;
    float _488 = (_483 * _297) - _378;
    float _489 = (_483 * _298) - _379;
    float _493 = abs(dot(vec3(_377, _378, _379), vec3(_296, _297, _298)));
    float _3431 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _495 = sqrt(_299);
    float _508 = exp2((_495 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_495 * 3.0));
    float _514 = (1.0 - _508) * ((_495 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _515 = _508 * _495;
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _882;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _607 = fma(_551, cbModelParam._m0[26u].z, fma(_547, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _543));
        float _611 = fma(_551, cbModelParam._m0[27u].z, fma(_547, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _543));
        float _615 = fma(_551, cbModelParam._m0[28u].z, fma(_547, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _543));
        float _640 = _543 + _296;
        float _641 = _547 + _297;
        float _642 = _551 + _298;
        float _652 = fma(_642, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _640)) - _607;
        float _653 = fma(_642, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _640)) - _611;
        float _654 = fma(_642, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _640)) - _615;
        float _658 = inversesqrt(dot(vec3(_652, _653, _654), vec3(_652, _653, _654)));
        float _671 = ((_658 * _652) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_607 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _672 = ((_658 * _653) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_611 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _673 = ((_658 * _654) / cbModelParam._m0[34u].z) + ((((((_615 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        float _710 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_676.x + (-0.5));
        float _712 = _710 * (_676.y + (-0.5));
        float _713 = _710 * (_676.z + (-0.5));
        float _720 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_683.x + (-0.5));
        float _722 = _720 * (_683.y + (-0.5));
        float _723 = _720 * (_683.z + (-0.5));
        float _730 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_690.x + (-0.5));
        float _732 = _730 * (_690.y + (-0.5));
        float _733 = _730 * (_690.z + (-0.5));
        float _740 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_697.x + (-0.5));
        float _742 = _740 * (_697.y + (-0.5));
        float _743 = _740 * (_697.z + (-0.5));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = _711 * 0.5;
        float _748 = _721 * 0.5;
        float _749 = _731 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _764 = (dot(vec3(_296, _297, _298), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3457 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _774 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3468 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3479 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * (_776 + 1.0))) + _781) * _744;
        float _791 = _712 * 0.5;
        float _792 = _722 * 0.5;
        float _793 = _732 * 0.5;
        float _794 = dot(vec3(_791, _792, _793), vec3(_791, _792, _793));
        float _799 = (_794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_794);
        float _807 = (dot(vec3(_296, _297, _298), vec3(_799 * _791, _799 * _792, _799 * _793)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _816 = sqrt(((_792 * _792) + (_791 * _791)) + (_793 * _793)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _818 = _817 * 2.0;
        float _822 = (1.0 - _817) / (_817 + 1.0);
        float _3512 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _832 = ((((1.0 - _823) * (_818 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_818 + 1.0))) + _823) * _745;
        float _833 = _713 * 0.5;
        float _834 = _723 * 0.5;
        float _835 = _733 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _849 = (dot(vec3(_296, _297, _298), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _858 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3545 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_860 + 1.0))) + _865) * _746;
        _882 = _713;
        _884 = _712;
        _885 = _711;
        _886 = _723;
        _887 = _722;
        _888 = _721;
        _889 = _733;
        _890 = _732;
        _891 = _731;
        _892 = _746;
        _893 = _745;
        _894 = _744;
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0)));
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
    }
    else
    {
        _882 = _883;
        _884 = _883;
        _885 = _883;
        _886 = _883;
        _887 = _883;
        _888 = _883;
        _889 = _883;
        _890 = _883;
        _891 = _883;
        _892 = _883;
        _893 = _883;
        _894 = _883;
        _895 = 0.0;
        _896 = 0.0;
        _897 = 0.0;
    }
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _926 = fma(_551, cbModelParam._m0[30u].z, fma(_547, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _543));
        float _930 = fma(_551, cbModelParam._m0[31u].z, fma(_547, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _543));
        float _934 = fma(_551, cbModelParam._m0[32u].z, fma(_547, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _543));
        float _957 = _543 + _296;
        float _958 = _547 + _297;
        float _959 = _551 + _298;
        float _969 = fma(_959, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _957)) - _926;
        float _970 = fma(_959, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _957)) - _930;
        float _971 = fma(_959, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _957)) - _934;
        float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
        float _988 = ((_975 * _969) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_926 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_975 * _970) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_930 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_975 * _971) / cbModelParam._m0[35u].z) + ((((((_934 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        float _1025 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_992.x + (-0.5));
        float _1027 = _1025 * (_992.y + (-0.5));
        float _1028 = _1025 * (_992.z + (-0.5));
        float _1035 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_999.x + (-0.5));
        float _1037 = _1035 * (_999.y + (-0.5));
        float _1038 = _1035 * (_999.z + (-0.5));
        float _1045 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1006.x + (-0.5));
        float _1047 = _1045 * (_1006.y + (-0.5));
        float _1048 = _1045 * (_1006.z + (-0.5));
        float _1055 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1013.x + (-0.5));
        float _1057 = _1055 * (_1013.y + (-0.5));
        float _1058 = _1055 * (_1013.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_296, _297, _298), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3608 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_1089 + 1.0))) + _1094) * _1059;
        float _1104 = _1027 * 0.5;
        float _1105 = _1037 * 0.5;
        float _1106 = _1047 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_296, _297, _298), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3641 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1131 + 1.0))) + _1136) * _1060;
        float _1146 = _1028 * 0.5;
        float _1147 = _1038 * 0.5;
        float _1148 = _1048 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_296, _297, _298), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3674 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1173 + 1.0))) + _1178) * _1061;
        _1195 = _1028;
        _1196 = _1027;
        _1197 = _1026;
        _1198 = _1038;
        _1199 = _1037;
        _1200 = _1036;
        _1201 = _1048;
        _1202 = _1047;
        _1203 = _1046;
        _1204 = _1061;
        _1205 = _1060;
        _1206 = _1059;
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _883;
        _1196 = _883;
        _1197 = _883;
        _1198 = _883;
        _1199 = _883;
        _1200 = _883;
        _1201 = _883;
        _1202 = _883;
        _1203 = _883;
        _1204 = _883;
        _1205 = _883;
        _1206 = _883;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _895)) + _895;
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _896)) + _896;
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _897)) + _897;
    float _1242 = fma(_1221, cbSceneParam._m0[89u].z, fma(_1220, cbSceneParam._m0[89u].y, _1219 * cbSceneParam._m0[89u].x));
    float _1245 = fma(_1221, cbSceneParam._m0[90u].z, fma(_1220, cbSceneParam._m0[90u].y, _1219 * cbSceneParam._m0[90u].x));
    float _1248 = fma(_1221, cbSceneParam._m0[91u].z, fma(_1220, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1219));
    float _1263 = _487 * 0.5;
    float _1264 = _488 * 0.5;
    float _1265 = _489 * 0.5;
    float _1266 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1269 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1272 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1306;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1279 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_882, _886, _889, _892));
        float _1283 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_884, _887, _890, _893));
        float _1287 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_885, _888, _891, _894));
        float _1294 = dot(vec4(cbModelParam._m0[39u]), vec4(_1263, _1264, _1265, 1.0));
        _1306 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1294) ? 0.0 : (isnan(0.0) ? _1294 : max(0.0, _1294))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1306 = 1.0;
    }
    float _1317;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1308 = dot(vec4(cbModelParam._m0[40u]), vec4(_1263, _1264, _1265, 1.0));
        _1317 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1308) ? 0.0 : (isnan(0.0) ? _1308 : max(0.0, _1308))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1317 = 1.0;
    }
    float _1321 = (_1317 * cbModelParam._m0[1u].x) + (_1306 * (1.0 - cbModelParam._m0[1u].x));
    float _1331 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _299);
    float _1332 = isnan(_1331) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1331 : min(cbModelParam._m0[25u].z, _1331));
    float _1414;
    float _1416;
    float _1418;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1381 = fma(_551, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _543)) + cbModelParam._m0[13u].w;
        float _1385 = fma(_551, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _543)) + cbModelParam._m0[14u].w;
        float _1389 = fma(_551, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _543)) + cbModelParam._m0[15u].w;
        float _1392 = fma(_489, cbModelParam._m0[13u].z, fma(_488, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _487));
        float _1395 = fma(_489, cbModelParam._m0[14u].z, fma(_488, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _487));
        float _1398 = fma(_489, cbModelParam._m0[15u].z, fma(_488, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _487));
        float _1426;
        if (_1392 > 0.0)
        {
            _1426 = abs((1.0 - _1381) / _1392);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1381 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1426 = frontier_phi_17_15_ladder;
        }
        float _1655;
        if (_1395 > 0.0)
        {
            _1655 = abs((1.0 - _1385) / _1395);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1385 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1655 = frontier_phi_26_22_ladder;
        }
        float _1912;
        if (_1398 > 0.0)
        {
            _1912 = abs((1.0 - _1389) / _1398);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1389 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1912 = frontier_phi_38_33_ladder;
        }
        float _1914 = isnan(_1655) ? _1426 : (isnan(_1426) ? _1655 : min(_1426, _1655));
        float _1915 = isnan(_1912) ? _1914 : (isnan(_1914) ? _1912 : min(_1914, _1912));
        float _1919 = (_1915 * _1392) + _1381;
        float _1920 = (_1915 * _1395) + _1385;
        float _1921 = (_1915 * _1398) + _1389;
        float _1922 = _1915 * 9.9999997473787516355514526367188e-05;
        float _1924 = (-1.0) - _1922;
        float _1926 = _1922 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1921 > _1926) || ((_1921 < _1924) || ((_1920 > _1926) || ((_1920 < _1924) || ((_1919 < _1924) || (_1919 > _1926))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2049 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1921, cbModelParam._m0[9u].z, fma(_1920, cbModelParam._m0[9u].y, _1919 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1921, cbModelParam._m0[10u].z, fma(_1920, cbModelParam._m0[10u].y, _1919 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1921, cbModelParam._m0[11u].z, fma(_1920, cbModelParam._m0[11u].y, _1919 * cbModelParam._m0[11u].x))), _1332);
            frontier_phi_16_38_ladder = _2049.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2049.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2049.x * cbModelParam._m0[1u].y;
        }
        _1414 = frontier_phi_16_38_ladder_2;
        _1416 = frontier_phi_16_38_ladder_1;
        _1418 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_487, _488, _489), _1332);
        _1414 = _1402.x * cbModelParam._m0[1u].y;
        _1416 = _1402.y * cbModelParam._m0[1u].y;
        _1418 = _1402.z * cbModelParam._m0[1u].y;
    }
    float _1422 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _299);
    float _1423 = isnan(_1422) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1422 : min(cbModelParam._m0[25u].w, _1422));
    float _1516;
    float _1518;
    float _1520;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1480 = fma(_551, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _543)) + cbModelParam._m0[21u].w;
        float _1484 = fma(_551, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _543)) + cbModelParam._m0[22u].w;
        float _1488 = fma(_551, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _543)) + cbModelParam._m0[23u].w;
        float _1491 = fma(_489, cbModelParam._m0[21u].z, fma(_488, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _487));
        float _1494 = fma(_489, cbModelParam._m0[22u].z, fma(_488, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _487));
        float _1497 = fma(_489, cbModelParam._m0[23u].z, fma(_488, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _487));
        float _1660;
        if (_1491 > 0.0)
        {
            _1660 = abs((1.0 - _1480) / _1491);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1480 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1660 = frontier_phi_28_24_ladder;
        }
        float _1939;
        if (_1494 > 0.0)
        {
            _1939 = abs((1.0 - _1484) / _1494);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1484 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1939 = frontier_phi_40_35_ladder;
        }
        float _2152;
        if (_1497 > 0.0)
        {
            _2152 = abs((1.0 - _1488) / _1497);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1488 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2152 = frontier_phi_49_46_ladder;
        }
        float _2154 = isnan(_1939) ? _1660 : (isnan(_1660) ? _1939 : min(_1660, _1939));
        float _2155 = isnan(_2152) ? _2154 : (isnan(_2154) ? _2152 : min(_2154, _2152));
        float _2159 = (_2155 * _1491) + _1480;
        float _2160 = (_2155 * _1494) + _1484;
        float _2161 = (_2155 * _1497) + _1488;
        float _2162 = _2155 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2162;
        float _2165 = _2162 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2161 > _2165) || ((_2161 < _2163) || ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 < _2163) || (_2159 > _2165))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2161, cbModelParam._m0[17u].z, fma(_2160, cbModelParam._m0[17u].y, _2159 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2161, cbModelParam._m0[18u].z, fma(_2160, cbModelParam._m0[18u].y, _2159 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2161, cbModelParam._m0[19u].z, fma(_2160, cbModelParam._m0[19u].y, _2159 * cbModelParam._m0[19u].x))), _1423);
            frontier_phi_25_49_ladder = _2360.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2360.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2360.x * cbModelParam._m0[1u].z;
        }
        _1516 = frontier_phi_25_49_ladder_2;
        _1518 = frontier_phi_25_49_ladder_1;
        _1520 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_487, _488, _489), _1423);
        _1516 = _1500.x * cbModelParam._m0[1u].z;
        _1518 = _1500.y * cbModelParam._m0[1u].z;
        _1520 = _1500.z * cbModelParam._m0[1u].z;
    }
    float _1533 = (((_514 * _464) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1516 - _1414)) + _1414);
    float _1535 = (((_514 * _466) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1518 - _1416)) + _1416);
    float _1537 = (((_514 * _467) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1520 - _1418)) + _1418);
    float _1540 = fma(_1537, cbSceneParam._m0[89u].z, fma(_1535, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1543 = fma(_1537, cbSceneParam._m0[90u].z, fma(_1535, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1546 = fma(_1537, cbSceneParam._m0[91u].z, fma(_1535, cbSceneParam._m0[91u].y, _1533 * cbSceneParam._m0[91u].x));
    vec4 _1554 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_398, _399));
    float _1556 = _1554.w;
    float _1568 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1556);
    float _1569 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1556);
    float _1570 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1556);
    uvec4 _1574 = floatBitsToUint(cbInstanceData._m0[_438 + 5u]);
    uint _1576 = _1574.x * 14u;
    uint _1577 = _1576 + 13u;
    float _1584 = _479 + (-1.0);
    float _1589 = (cbLight._m0[_1577].x * _1584) + 1.0;
    float _1590 = (cbLight._m0[_1577].y * _1584) + 1.0;
    float _1591 = (cbLight._m0[_1577].z * _1584) + 1.0;
    float _1592 = (cbLight._m0[_1577].w * _1584) + 1.0;
    uint _1593 = _1576 + 5u;
    float _1599 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
    uint _1603 = _1576 + 4u;
    float _1613 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
    uint _1617 = _1576 | 1u;
    float _1628 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_296, _297, _298));
    float _1631 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_296, _297, _298));
    float _3810 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _3821 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1636 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * 0.3183098733425140380859375;
    float _1638 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 0.3183098733425140380859375;
    float _1645 = ((cbLight._m0[_1593].x * _1599) * _1638) + (((cbLight._m0[_1603].x * _1568) * _1613) * _1636);
    float _1646 = ((_1599 * cbLight._m0[_1593].y) * _1638) + (((cbLight._m0[_1603].y * _1569) * _1613) * _1636);
    float _1647 = ((_1599 * cbLight._m0[_1593].z) * _1638) + (((cbLight._m0[_1603].z * _1570) * _1613) * _1636);
    uvec4 _1652 = floatBitsToUint(cbLight._m0[_1576 + 12u]);
    bool _1654 = _1652.x == 0u;
    float _1665;
    float _1667;
    float _1669;
    if (_1654)
    {
        _1665 = _1645;
        _1667 = _1646;
        _1669 = _1647;
    }
    else
    {
        uint _1673 = _1576 + 6u;
        float _1689 = (dot(vec3(cbLight._m0[_1576 + 2u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1690 = _1689 * _1689;
        float _3832 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1692 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _1665 = (((cbLight._m0[_1673].x * 0.3183098733425140380859375) * _1691) * _1692) + _1645;
        _1667 = (((cbLight._m0[_1673].y * 0.3183098733425140380859375) * _1691) * _1692) + _1646;
        _1669 = (((cbLight._m0[_1673].z * 0.3183098733425140380859375) * _1691) * _1692) + _1647;
    }
    bool _1672 = _1652.y == 0u;
    float _1710;
    float _1712;
    float _1714;
    if (_1672)
    {
        _1710 = _1665;
        _1712 = _1667;
        _1714 = _1669;
    }
    else
    {
        uint _1883 = _1576 + 7u;
        float _1899 = (dot(vec3(cbLight._m0[_1576 + 3u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1900 = _1899 * _1899;
        float _3848 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1902 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _1710 = (((cbLight._m0[_1883].x * 0.3183098733425140380859375) * _1901) * _1902) + _1665;
        _1712 = (((cbLight._m0[_1883].y * 0.3183098733425140380859375) * _1901) * _1902) + _1667;
        _1714 = (((cbLight._m0[_1883].z * 0.3183098733425140380859375) * _1901) * _1902) + _1669;
    }
    uint _1717 = _1576 + 8u;
    float _1730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1576].w)) * _299) * 0.949999988079071044921875);
    float _1731 = _1730 * _1730;
    float _1732 = cbLight._m0[_1576].x + _377;
    float _1733 = cbLight._m0[_1576].y + _378;
    float _1734 = cbLight._m0[_1576].z + _379;
    float _1738 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
    float _1739 = _1738 * _1732;
    float _1740 = _1738 * _1733;
    float _1741 = _1738 * _1734;
    float _1742 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1576].xyz));
    float _3864 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _1746 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _1747 = dot(vec3(_296, _297, _298), vec3(_1739, _1740, _1741));
    float _3886 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _1751 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_1739, _1740, _1741));
    float _3897 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1755 = _1731 * _1731;
    float _1759 = ((_1750 * _1750) * (_1755 + (-1.0))) + 1.0;
    float _1767 = exp2(log2(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * 5.0);
    float _1768 = 0.959999978542327880859375 - _461;
    float _1770 = 0.959999978542327880859375 - _462;
    float _1771 = 0.959999978542327880859375 - _463;
    float _1778 = 1.0 - _1731;
    float _1789 = (0.5 / (((_1746 * ((_1745 * _1778) + _1731)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1778) + _1731) * _1745))) * _1745;
    float _3908 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1791 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1755 / ((_1759 * _1759) * 3.141590118408203125));
    uint _1805 = _1576 + 9u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1617].w)) * _299) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1617].x + _377;
    float _1819 = cbLight._m0[_1617].y + _378;
    float _1820 = cbLight._m0[_1617].z + _379;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1617].xyz));
    float _3919 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _1832 = dot(vec3(_296, _297, _298), vec3(_1825, _1826, _1827));
    float _3930 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_1825, _1826, _1827));
    float _3941 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1817 * _1817;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1851 = exp2(log2(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * 5.0);
    float _1858 = 1.0 - _1817;
    float _1868 = (0.5 / (((_1746 * ((_1831 * _1858) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1858) + _1817) * _1831))) * _1831;
    float _3952 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    float _1880 = (((((_1851 * _1768) + _464) * cbLight._m0[_1805].x) * _1870) * _1599) + ((((cbLight._m0[_1717].x * _1568) * ((_1767 * _1768) + _464)) * _1791) * _1613);
    float _1881 = (((((_1851 * _1770) + _466) * cbLight._m0[_1805].y) * _1870) * _1599) + ((((cbLight._m0[_1717].y * _1569) * ((_1767 * _1770) + _466)) * _1791) * _1613);
    float _1882 = (((((_1851 * _1771) + _467) * cbLight._m0[_1805].z) * _1870) * _1599) + ((((cbLight._m0[_1717].z * _1570) * ((_1767 * _1771) + _467)) * _1791) * _1613);
    float _1944;
    float _1946;
    float _1948;
    if (_1654)
    {
        _1944 = _1880;
        _1946 = _1881;
        _1948 = _1882;
    }
    else
    {
        uint _1950 = _1576 + 2u;
        uint _1954 = _1576 + 10u;
        float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _299) * 0.949999988079071044921875);
        float _1969 = _1968 * _1968;
        float _1970 = cbLight._m0[_1950].x + _377;
        float _1971 = cbLight._m0[_1950].y + _378;
        float _1972 = cbLight._m0[_1950].z + _379;
        float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
        float _1977 = _1976 * _1970;
        float _1978 = _1976 * _1971;
        float _1979 = _1976 * _1972;
        float _1980 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1950].xyz));
        float _3963 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1984 = dot(vec3(_296, _297, _298), vec3(_1977, _1978, _1979));
        float _3974 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1987 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1988 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_1977, _1978, _1979));
        float _3985 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1992 = _1969 * _1969;
        float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
        float _2003 = exp2(log2(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * 5.0);
        float _2010 = 1.0 - _1969;
        float _2020 = (0.5 / (((_1746 * ((_1983 * _2010) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _2010) + _1969) * _1983))) * _1983;
        float _3996 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2022 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
        float _2023 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _1944 = (((((_2003 * _1768) + _464) * cbLight._m0[_1954].x) * _2022) * _2023) + _1880;
        _1946 = (((((_2003 * _1770) + _466) * cbLight._m0[_1954].y) * _2022) * _2023) + _1881;
        _1948 = (((((_2003 * _1771) + _467) * cbLight._m0[_1954].z) * _2022) * _2023) + _1882;
    }
    float _2058;
    float _2060;
    float _2062;
    if (_1672)
    {
        _2058 = _1944;
        _2060 = _1946;
        _2062 = _1948;
    }
    else
    {
        uint _2069 = _1576 + 3u;
        uint _2073 = _1576 + 11u;
        float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _299) * 0.949999988079071044921875);
        float _2088 = _2087 * _2087;
        float _2089 = cbLight._m0[_2069].x + _377;
        float _2090 = cbLight._m0[_2069].y + _378;
        float _2091 = cbLight._m0[_2069].z + _379;
        float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
        float _2096 = _2095 * _2089;
        float _2097 = _2095 * _2090;
        float _2098 = _2095 * _2091;
        float _2099 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_2069].xyz));
        float _4012 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _2103 = dot(vec3(_296, _297, _298), vec3(_2096, _2097, _2098));
        float _4023 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _2107 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2096, _2097, _2098));
        float _4034 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2111 = _2088 * _2088;
        float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
        float _2122 = exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0);
        float _2129 = 1.0 - _2088;
        float _2139 = (0.5 / (((_1746 * ((_2102 * _2129) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _2129) + _2088) * _2102))) * _2102;
        float _4045 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2141 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
        float _2142 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _2058 = (((((_2122 * _1768) + _464) * cbLight._m0[_2073].x) * _2141) * _2142) + _1944;
        _2060 = (((((_2122 * _1770) + _466) * cbLight._m0[_2073].y) * _2141) * _2142) + _1946;
        _2062 = (((((_2122 * _1771) + _467) * cbLight._m0[_2073].z) * _2141) * _2142) + _1948;
    }
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    if (_1574.y == 0u)
    {
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2217;
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2217;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2217;
        uvec4 _2232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2233 = _2232.x;
        uint _2244 = uint((float(_2232.y) * floor(float(uint(cbSceneParam._m0[85u].y * _399) / _2233))) + floor(float(uint(cbSceneParam._m0[85u].x * _398) / _2233)));
        float _2254 = (log2(_2220 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2255 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        uint _2258 = uint(isnan(14.0) ? _2255 : (isnan(_2255) ? 14.0 : min(_2255, 14.0)));
        uvec4 _2263 = texelFetch(g_lightClusterGridBuffer, int(((_2258 << 2u) + (_2244 << 6u)) >> 2u));
        uint _2264 = _2263.x;
        uint _2265 = _2232.z;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        if (((((1u << ((_2265 >> 4u) & 15u)) + 4294967295u) & _2264) == 0u) || ((_2265 & 240u) == 0u))
        {
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
        }
        else
        {
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            uint _2524 = 0u;
            uint _2533;
            bool _2534;
            for (;;)
            {
                _2533 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2524 << 2u)) >> 2u)).x;
                _2534 = _2533 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2534)
                {
                    frontier_phi_66_pred = _2518;
                    frontier_phi_66_pred_1 = _2523;
                    frontier_phi_66_pred_2 = _2522;
                    frontier_phi_66_pred_3 = _2521;
                    frontier_phi_66_pred_4 = _2520;
                    frontier_phi_66_pred_5 = _2519;
                }
                else
                {
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    uint _2669;
                    _2663 = _2518;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2522;
                    _2668 = _2523;
                    _2669 = _2533;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    for (;;)
                    {
                        uint _2673 = uint(findLSB(_2669)) + (_2524 << 5u);
                        uint _2670 = (_2669 + 4294967295u) & _2669;
                        uint _2675 = _2673 * 48u;
                        vec4 _2689 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 3u)).x));
                        uint _2695 = (_2673 * 48u) + 4u;
                        vec4 _2708 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 3u)).x));
                        uint _2714 = (_2673 * 48u) + 8u;
                        vec3 _2725 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x));
                        float _2729 = _2689.x - _2218;
                        float _2730 = _2689.y - _2219;
                        float _2731 = _2689.z - _2220;
                        float _2732 = dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731));
                        float _2735 = inversesqrt(_2732);
                        float _2736 = _2735 * _2729;
                        float _2737 = _2735 * _2730;
                        float _2738 = _2735 * _2731;
                        float _2739 = dot(vec3(_419, _422, _425), vec3(_2736, _2737, _2738));
                        float _2744 = 1.0 - (_2732 * _2689.w);
                        float _4071 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _2745 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2746 = sqrt(_2732) * _2708.w;
                        float _2749 = 1.39999997615814208984375 / (_2746 + 1.39999997615814208984375);
                        float _2750 = _2749 * _2749;
                        float _2753 = ((1.0 - _2750) * _2739) + _2750;
                        float _2756 = _2746 * _2746;
                        float _2760 = ((isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))) * _2745) / ((_2756 * 0.699999988079071044921875) + 1.0);
                        float _2764 = (-0.0) - _2218;
                        float _2765 = (-0.0) - _2219;
                        float _2766 = (-0.0) - _2220;
                        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
                        float _2771 = _2770 * _2764;
                        float _2772 = _2770 * _2765;
                        float _2773 = _2770 * _2766;
                        float _2781 = exp2(log2(1.0 / ((_2756 * 3.5) + 5.0)) * 0.25);
                        float _2782 = 1.0 - _495;
                        float _2789 = sqrt(1.0 - ((1.0 - (_2782 * _2782)) * (1.0 - (_2781 * _2781))));
                        float _2790 = _2789 * _2789;
                        float _2791 = _2790 * _2790;
                        float _2792 = _2771 + _2736;
                        float _2793 = _2772 + _2737;
                        float _2794 = _2773 + _2738;
                        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
                        float _2802 = dot(vec3(_419, _422, _425), vec3(_2771, _2772, _2773));
                        float _4087 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2805 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2806 = dot(vec3(_419, _422, _425), vec3(_2798 * _2792, _2798 * _2793, _2798 * _2794));
                        float _4098 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2809 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                        float _2813 = ((_2809 * _2809) * (_2791 + (-1.0))) + 1.0;
                        float _2814 = _2749 * _2790;
                        float _2815 = _2814 * _2814;
                        float _2818 = ((1.0 - _2815) * _2739) + _2815;
                        float _4109 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2819 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                        float _2820 = 1.0 - _2790;
                        float _2830 = (0.5 / (((_2819 * ((_2805 * _2820) + _2790)) + 9.9999999392252902907785028219223e-09) + (((_2819 * _2820) + _2790) * _2805))) * _2819;
                        float _4120 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2841 = (((_2791 * 3.1415927410125732421875) * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) / ((_2813 * _2813) * ((_2756 * 2.1991131305694580078125) + 3.141590118408203125))) * _2745;
                        _2593 = (_2760 * _2708.x) + _2666;
                        _2594 = (_2760 * _2708.y) + _2667;
                        _2595 = (_2760 * _2708.z) + _2668;
                        _2590 = (_2841 * _2725.x) + _2663;
                        _2591 = (_2841 * _2725.y) + _2664;
                        _2592 = (_2841 * _2725.z) + _2665;
                        if (_2670 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2663 = _2590;
                            _2664 = _2591;
                            _2665 = _2592;
                            _2666 = _2593;
                            _2667 = _2594;
                            _2668 = _2595;
                            _2669 = _2670;
                        }
                    }
                    frontier_phi_66_pred = _2590;
                    frontier_phi_66_pred_1 = _2595;
                    frontier_phi_66_pred_2 = _2594;
                    frontier_phi_66_pred_3 = _2593;
                    frontier_phi_66_pred_4 = _2592;
                    frontier_phi_66_pred_5 = _2591;
                }
                _2366 = frontier_phi_66_pred;
                _2376 = frontier_phi_66_pred_1;
                _2374 = frontier_phi_66_pred_2;
                _2372 = frontier_phi_66_pred_3;
                _2370 = frontier_phi_66_pred_4;
                _2368 = frontier_phi_66_pred_5;
                uint _2525 = _2524 + 1u;
                if (_2525 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2518 = _2366;
                    _2519 = _2368;
                    _2520 = _2370;
                    _2521 = _2372;
                    _2522 = _2374;
                    _2523 = _2376;
                    _2524 = _2525;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
        }
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.z;
        uint _2382 = (_2380 >> 8u) & 15u;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        if (((4294967295u << _2382) & _2264) == 0u)
        {
            _2486 = _2365;
            _2488 = _2367;
            _2490 = _2369;
            _2492 = _2371;
            _2494 = _2373;
            _2496 = _2375;
        }
        else
        {
            float _2511 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
            float _2512 = _2511 * _2218;
            float _2513 = _2511 * _2219;
            float _2514 = _2511 * _2220;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2382 < ((_2380 >> 12u) & 15u))
            {
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2646 = _2365;
                float _2647 = _2367;
                float _2648 = _2369;
                float _2649 = _2371;
                float _2650 = _2373;
                float _2651 = _2375;
                uint _2652 = _2382;
                uint _2661;
                bool _2662;
                for (;;)
                {
                    _2661 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2652 << 2u)) >> 2u)).x;
                    _2662 = _2661 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2662)
                    {
                        frontier_phi_77_pred = _2651;
                        frontier_phi_77_pred_1 = _2650;
                        frontier_phi_77_pred_2 = _2649;
                        frontier_phi_77_pred_3 = _2648;
                        frontier_phi_77_pred_4 = _2647;
                        frontier_phi_77_pred_5 = _2646;
                    }
                    else
                    {
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _2868 = _2646;
                        float _2869 = _2647;
                        float _2870 = _2648;
                        float _2871 = _2649;
                        float _2872 = _2650;
                        float _2873 = _2651;
                        uint _2874 = _2661;
                        uint _2875;
                        vec4 _2900;
                        float _2901;
                        vec4 _2916;
                        vec3 _2928;
                        vec4 _2944;
                        vec4 _2960;
                        float _3007;
                        bool _3008;
                        for (;;)
                        {
                            uint _2885 = ((_2652 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2874));
                            _2875 = (_2874 + 4294967295u) & _2874;
                            uint _2887 = _2885 * 40u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            _2901 = _2900.w;
                            uint _2903 = (_2885 * 40u) + 4u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2918 = (_2885 * 40u) + 8u;
                            _2928 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x));
                            uint _2931 = (_2885 * 40u) + 16u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2947 = (_2885 * 40u) + 20u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2963 = (_2885 * 40u) + 24u;
                            vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2982 = (_2885 * 40u) + 28u;
                            vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            _3007 = fma(_2220, _2995.z, fma(_2219, _2995.y, _2995.x * _2218)) + _2995.w;
                            _3008 = !((fma(_2220, _2976.z, fma(_2219, _2976.y, _2976.x * _2218)) + _2976.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3008)
                            {
                                float _3035 = _2900.x - _2218;
                                float _3036 = _2900.y - _2219;
                                float _3037 = _2900.z - _2220;
                                float _3038 = dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037));
                                float _3041 = inversesqrt(_3038);
                                float _3042 = _3041 * _3035;
                                float _3043 = _3041 * _3036;
                                float _3044 = _3041 * _3037;
                                float _3048 = 1.0 - (_3038 / (_2901 * _2901));
                                float _4131 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3049 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3053 = sqrt(_3038) * _2916.w;
                                float _3055 = 1.39999997615814208984375 / (_3053 + 1.39999997615814208984375);
                                float _3056 = _3055 * _3055;
                                float _3059 = ((1.0 - _3056) * dot(vec3(_3042, _3043, _3044), vec3(_419, _422, _425))) + _3056;
                                float _3062 = _3053 * _3053;
                                float _3066 = (fma(_2220, _2944.z, fma(_2219, _2944.y, _2944.x * _2218)) + _2944.w) / _3007;
                                float _3067 = (fma(_2220, _2960.z, fma(_2219, _2960.y, _2960.x * _2218)) + _2960.w) / _3007;
                                float _3071 = 1.0 - dot(vec2(_3066, _3067), vec2(_3066, _3067));
                                float _4147 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3073 = _3072 * (((isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))) * _3049) / ((_3062 * 0.699999988079071044921875) + 1.0));
                                float _3085 = exp2(log2(1.0 / ((_3062 * 3.5) + 5.0)) * 0.25);
                                float _3086 = 1.0 - _495;
                                float _3093 = sqrt(1.0 - ((1.0 - (_3086 * _3086)) * (1.0 - (_3085 * _3085))));
                                float _3094 = _3093 * _3093;
                                float _3095 = _3094 * _3094;
                                float _3096 = _3042 - _2512;
                                float _3097 = _3043 - _2513;
                                float _3098 = _3044 - _2514;
                                float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                                float _3106 = dot(vec3(_419, _422, _425), vec3((-0.0) - _2512, (-0.0) - _2513, (-0.0) - _2514));
                                float _4158 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3109 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3110 = dot(vec3(_419, _422, _425), vec3(_3102 * _3096, _3102 * _3097, _3102 * _3098));
                                float _4169 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3113 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                                float _3117 = ((_3113 * _3113) * (_3095 + (-1.0))) + 1.0;
                                float _3118 = _3055 * _3094;
                                float _3119 = _3118 * _3118;
                                float _3125 = ((1.0 - _3119) * dot(vec3(_419, _422, _425), vec3(_3042, _3043, _3044))) + _3119;
                                float _4180 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                                float _3127 = 1.0 - _3094;
                                float _3137 = (0.5 / (((_3126 * ((_3109 * _3127) + _3094)) + 9.9999999392252902907785028219223e-09) + (((_3126 * _3127) + _3094) * _3109))) * _3126;
                                float _4191 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3147 = (_3072 * _3049) * (((_3095 * 3.1415927410125732421875) * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) / ((_3117 * _3117) * ((_3062 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3073 * _2916.y;
                                frontier_phi_83_pred_1 = _3073 * _2916.x;
                                frontier_phi_83_pred_2 = _3147 * _2928.z;
                                frontier_phi_83_pred_3 = _3147 * _2928.y;
                                frontier_phi_83_pred_4 = _3147 * _2928.x;
                                frontier_phi_83_pred_5 = _3073 * _2916.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3155 = frontier_phi_83_pred;
                            _3154 = frontier_phi_83_pred_1;
                            _3153 = frontier_phi_83_pred_2;
                            _3152 = frontier_phi_83_pred_3;
                            _3151 = frontier_phi_83_pred_4;
                            _3156 = frontier_phi_83_pred_5;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            if (_2875 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2875;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2860;
                        frontier_phi_77_pred_1 = _2859;
                        frontier_phi_77_pred_2 = _2858;
                        frontier_phi_77_pred_3 = _2857;
                        frontier_phi_77_pred_4 = _2856;
                        frontier_phi_77_pred_5 = _2855;
                    }
                    _2497 = frontier_phi_77_pred;
                    _2495 = frontier_phi_77_pred_1;
                    _2493 = frontier_phi_77_pred_2;
                    _2491 = frontier_phi_77_pred_3;
                    _2489 = frontier_phi_77_pred_4;
                    _2487 = frontier_phi_77_pred_5;
                    uint _2653 = _2652 + 1u;
                    if (_2653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2646 = _2487;
                        _2647 = _2489;
                        _2648 = _2491;
                        _2649 = _2493;
                        _2650 = _2495;
                        _2651 = _2497;
                        _2652 = _2653;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2491;
                frontier_phi_58_59_ladder_1 = _2497;
                frontier_phi_58_59_ladder_2 = _2495;
                frontier_phi_58_59_ladder_3 = _2493;
                frontier_phi_58_59_ladder_4 = _2489;
                frontier_phi_58_59_ladder_5 = _2487;
            }
            else
            {
                frontier_phi_58_59_ladder = _2369;
                frontier_phi_58_59_ladder_1 = _2375;
                frontier_phi_58_59_ladder_2 = _2373;
                frontier_phi_58_59_ladder_3 = _2371;
                frontier_phi_58_59_ladder_4 = _2367;
                frontier_phi_58_59_ladder_5 = _2365;
            }
            _2486 = frontier_phi_58_59_ladder_5;
            _2488 = frontier_phi_58_59_ladder_4;
            _2490 = frontier_phi_58_59_ladder;
            _2492 = frontier_phi_58_59_ladder_3;
            _2494 = frontier_phi_58_59_ladder_2;
            _2496 = frontier_phi_58_59_ladder_1;
        }
        float _2501 = isnan(1.0) ? _479 : (isnan(_479) ? 1.0 : min(_479, 1.0));
        _2277 = (_2501 * _2492) + _1710;
        _2279 = (_2501 * _2494) + _1712;
        _2281 = (_2501 * _2496) + _1714;
        _2283 = ((_2486 * _464) * _2501) + _2058;
        _2285 = ((_2488 * _466) * _2501) + _2060;
        _2287 = ((_2490 * _467) * _2501) + _2062;
    }
    else
    {
        _2277 = _1710;
        _2279 = _1712;
        _2281 = _1714;
        _2283 = _2058;
        _2285 = _2060;
        _2287 = _2062;
    }
    float _4207 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4218 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4229 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _2304 = ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2277 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _479))) + ((_2283 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    float _2305 = ((isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2279 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _479))) + ((_2285 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    float _2306 = ((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2281 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _479))) + ((_2287 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    uint _2307 = _438 + 6u;
    float _2315 = _398 / cbSceneParam._m0[86u].x;
    float _2316 = _399 / cbSceneParam._m0[86u].y;
    vec4 _2330 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, (log2((isnan(cbSceneParam._m0[77u].w) ? _319 : (isnan(_319) ? cbSceneParam._m0[77u].w : min(_319, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2332 = _2330.x;
    float _2333 = _2330.y;
    float _2334 = _2330.z;
    float _2335 = _2330.w;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_319 > cbSceneParam._m0[78u].w)
    {
        float _2390 = isnan(_319) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _319 : min(cbSceneParam._m0[80u].w, _319));
        float _2391 = _2390 / _319;
        float _2402 = _2391 * _370;
        float _2403 = _371 * _2391;
        float _2404 = (-0.0) - _2403;
        float _2406 = _2391 * _372;
        float _2408 = (cbSceneParam._m0[77u].w * _2404) / _2390;
        float _2409 = _2408 + cbSceneParam._m0[79u].w;
        float _2410 = cbSceneParam._m0[79u].w - _2403;
        float _2416 = sqrt(((_2402 * _2402) + (_2403 * _2403)) + (_2406 * _2406));
        float _2419 = (1.0 - (cbSceneParam._m0[77u].w / _2390)) * _2416;
        float _2424 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2426 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2603;
        if (abs((_2404 - _2408) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2603 = ((((_2409 > 0.0) ? exp2(_2424 * _2409) : (2.0 - exp2(_2426 * _2409))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2419;
        }
        else
        {
            float _2547 = 1.0 / cbSceneParam._m0[80u].x;
            float _2548 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : max(_2409, _2410));
            float _2549 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : min(_2409, _2410));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            float _2559 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : min(_2549, 0.0));
            _2603 = ((abs(_2416 / _2404) * cbSceneParam._m0[80u].y) * ((((_2558 - _2559) * 2.0) - ((exp2(_2424 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0)))) - exp2(_2424 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0))))) * _2547)) - ((exp2(_2426 * _2558) - exp2(_2426 * _2559)) * _2547))) + (_2419 * cbSceneParam._m0[80u].z);
        }
        vec4 _2605 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, 1.0), 0.0);
        float _2614 = exp2((_2603 * (-1.44269502162933349609375)) * (1.0 - _2605.w));
        float _2615 = log2(_2614);
        float _2631 = log2(_2335);
        _2428 = (exp2(_2631 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].x)) * _2605.x) / cbSceneParam._m0[78u].x)) + _2332;
        _2430 = (exp2(_2631 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].y)) * _2605.y) / cbSceneParam._m0[78u].y)) + _2333;
        _2432 = (exp2(_2631 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].z)) * _2605.z) / cbSceneParam._m0[78u].z)) + _2334;
        _2434 = _2614 * _2335;
    }
    else
    {
        _2428 = _2332;
        _2430 = _2333;
        _2432 = _2334;
        _2434 = _2335;
    }
    bool _2641;
    vec4 _2444;
    vec4 _2466;
    float _2468;
    float _2472;
    float _2473;
    float _2474;
    float _2475;
    bool _2485;
    for (;;)
    {
        _2444 = cbMatDynParam._m0[0u];
        float _2446 = roundEven(_2444.y);
        bool _2447 = _2446 == 3.0;
        float _2448 = log2(_2434);
        float _2455 = exp2(_2448 * cbSceneParam._m0[78u].x) * _2304;
        float _2456 = exp2(_2448 * cbSceneParam._m0[78u].y) * _2305;
        float _2457 = exp2(_2448 * cbSceneParam._m0[78u].z) * _2306;
        float _2464 = _386 + (-0.5);
        _2466 = cbMtdParam._m0[1u];
        _2468 = _2466.y * _2464;
        float _2471 = (_2446 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2472 = _2471 * (_2447 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2428)));
        _2473 = _2471 * (_2447 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2430)));
        _2474 = _2471 * (_2447 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2432)));
        _2475 = _2464 * 0.999000012874603271484375;
        _2485 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2485)
        {
            if ((cbInstanceData._m0[_438 + 7u].x + _2475) < 0.5)
            {
                _2641 = true;
                break;
            }
        }
        uint _2582 = _440 + uint(_2444.w);
        if ((cbInstanceData._m0[_2582].w < 1.0) && ((cbInstanceData._m0[_2582].w + _2475) < 0.5))
        {
            _2641 = true;
            break;
        }
        if ((_2468 + 1.0) < _2466.x)
        {
            _2641 = true;
            break;
        }
        _2641 = false;
        break;
    }
    float _2846;
    if (_2641)
    {
        discard_state = true;
        _2846 = 0.0;
    }
    else
    {
        _2846 = cbInstanceData._m0[_2307].w;
    }
    SV_Target.x = _2472;
    SV_Target.y = _2473;
    SV_Target.z = _2474;
    SV_Target.w = _2846;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2307].w;
    discard_exit();
}


