#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _881;
float _3554;
float _3555;
float _3556;
float _3557;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = ((cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.x;
    float _229 = ((cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.y;
    vec4 _242 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_228 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_229 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _263 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _228) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _229) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3566 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))));
    float _283 = fma(_280, _201 * NORMAL.x, fma(_273, _208 * TANGENT.x, (_194 * _187) * _271));
    float _286 = fma(_280, _201 * NORMAL.y, fma(_273, _208 * TANGENT.y, (_194 * _188) * _271));
    float _289 = fma(_280, _201 * NORMAL.z, fma(_273, _208 * TANGENT.z, (_194 * _189) * _271));
    float _293 = inversesqrt(dot(vec3(_283, _286, _289), vec3(_283, _286, _289)));
    float _294 = _293 * _283;
    float _295 = _293 * _286;
    float _296 = _293 * _289;
    float _3577 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _297 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3599 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3610 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3621 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _301 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _317 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _358 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _368 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _358);
    float _369 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _358);
    float _370 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _358);
    float _374 = inversesqrt(dot(vec3(_368, _369, _370), vec3(_368, _369, _370)));
    float _375 = _368 * _374;
    float _376 = _369 * _374;
    float _377 = _370 * _374;
    vec4 _382 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _384 = _382.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _560 = sqrt(((_368 * _368) + (_369 * _369)) + (_370 * _370));
        float _566 = (cbMatDynParam._m0[5u].x * _560) + cbMatDynParam._m0[5u].y;
        float _3632 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
        float _567 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _571 = (cbMatDynParam._m0[5u].z * _560) + cbMatDynParam._m0[5u].w;
        float _3643 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) - _567)) + _567) < ((_384 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _396 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _397 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _417 = fma(_296, cbSceneParam._m0[5u].z, fma(_295, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _294));
    float _420 = fma(_296, cbSceneParam._m0[6u].z, fma(_295, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _294));
    float _423 = fma(_296, cbSceneParam._m0[7u].z, fma(_295, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _294));
    uint _436 = uint(roundEven(NORMAL.w)) * 13u;
    uint _438 = _436 + 9u;
    uint _439 = _438 + uint(cbMatDynParam._m0[0u].w);
    float _445 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_439].x;
    float _446 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_439].y;
    float _447 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_439].z;
    float _3654 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _451 = 1.0 - _301;
    float _452 = _448 * _451;
    float _453 = _449 * _451;
    float _454 = _450 * _451;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _301;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _301;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _301;
    float _462 = _459 + 0.039999999105930328369140625;
    float _464 = _460 + 0.039999999105930328369140625;
    float _465 = _461 + 0.039999999105930328369140625;
    vec4 _474 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _396, cbSceneParam._m0[86u].y * _397));
    float _477 = _474.x * TEXCOORD.z;
    float _478 = dot(vec3(_294, _295, _296), vec3(_375, _376, _377));
    float _481 = _478 * 2.0;
    float _485 = (_481 * _294) - _375;
    float _486 = (_481 * _295) - _376;
    float _487 = (_481 * _296) - _377;
    float _491 = abs(dot(vec3(_375, _376, _377), vec3(_294, _295, _296)));
    float _3687 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _493 = sqrt(_297);
    float _506 = exp2((_493 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_493 * 3.0));
    float _512 = (1.0 - _506) * ((_493 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _513 = _506 * _493;
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _880;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _605 = fma(_549, cbModelParam._m0[26u].z, fma(_545, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _541));
        float _609 = fma(_549, cbModelParam._m0[27u].z, fma(_545, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _541));
        float _613 = fma(_549, cbModelParam._m0[28u].z, fma(_545, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _541));
        float _638 = _541 + _294;
        float _639 = _545 + _295;
        float _640 = _549 + _296;
        float _650 = fma(_640, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638)) - _605;
        float _651 = fma(_640, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638)) - _609;
        float _652 = fma(_640, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638)) - _613;
        float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
        float _669 = ((_656 * _650) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_605 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_656 * _651) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_609 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_656 * _652) / cbModelParam._m0[34u].z) + ((((((_613 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        float _708 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_674.x + (-0.5));
        float _710 = _708 * (_674.y + (-0.5));
        float _711 = _708 * (_674.z + (-0.5));
        float _718 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_681.x + (-0.5));
        float _720 = _718 * (_681.y + (-0.5));
        float _721 = _718 * (_681.z + (-0.5));
        float _728 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_688.x + (-0.5));
        float _730 = _728 * (_688.y + (-0.5));
        float _731 = _728 * (_688.z + (-0.5));
        float _738 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_695.x + (-0.5));
        float _740 = _738 * (_695.y + (-0.5));
        float _741 = _738 * (_695.z + (-0.5));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = _709 * 0.5;
        float _746 = _719 * 0.5;
        float _747 = _729 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _762 = (dot(vec3(_294, _295, _296), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _772 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3735 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_774 + 1.0))) + _779) * _742;
        float _789 = _710 * 0.5;
        float _790 = _720 * 0.5;
        float _791 = _730 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _805 = (dot(vec3(_294, _295, _296), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _814 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3768 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_816 + 1.0))) + _821) * _743;
        float _831 = _711 * 0.5;
        float _832 = _721 * 0.5;
        float _833 = _731 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_294, _295, _296), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3801 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_858 + 1.0))) + _863) * _744;
        _880 = _711;
        _882 = _710;
        _883 = _709;
        _884 = _721;
        _885 = _720;
        _886 = _719;
        _887 = _731;
        _888 = _730;
        _889 = _729;
        _890 = _744;
        _891 = _743;
        _892 = _742;
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
    }
    else
    {
        _880 = _881;
        _882 = _881;
        _883 = _881;
        _884 = _881;
        _885 = _881;
        _886 = _881;
        _887 = _881;
        _888 = _881;
        _889 = _881;
        _890 = _881;
        _891 = _881;
        _892 = _881;
        _893 = 0.0;
        _894 = 0.0;
        _895 = 0.0;
    }
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _924 = fma(_549, cbModelParam._m0[30u].z, fma(_545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _541));
        float _928 = fma(_549, cbModelParam._m0[31u].z, fma(_545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _541));
        float _932 = fma(_549, cbModelParam._m0[32u].z, fma(_545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _541));
        float _955 = _541 + _294;
        float _956 = _545 + _295;
        float _957 = _549 + _296;
        float _967 = fma(_957, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955)) - _924;
        float _968 = fma(_957, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955)) - _928;
        float _969 = fma(_957, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955)) - _932;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_924 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_928 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[35u].z) + ((((((_932 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1023 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_990.x + (-0.5));
        float _1025 = _1023 * (_990.y + (-0.5));
        float _1026 = _1023 * (_990.z + (-0.5));
        float _1033 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_997.x + (-0.5));
        float _1035 = _1033 * (_997.y + (-0.5));
        float _1036 = _1033 * (_997.z + (-0.5));
        float _1043 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1004.x + (-0.5));
        float _1045 = _1043 * (_1004.y + (-0.5));
        float _1046 = _1043 * (_1004.z + (-0.5));
        float _1053 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1011.x + (-0.5));
        float _1055 = _1053 * (_1011.y + (-0.5));
        float _1056 = _1053 * (_1011.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_294, _295, _296), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3864 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1087 + 1.0))) + _1092) * _1057;
        float _1102 = _1025 * 0.5;
        float _1103 = _1035 * 0.5;
        float _1104 = _1045 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_294, _295, _296), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3897 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1129 + 1.0))) + _1134) * _1058;
        float _1144 = _1026 * 0.5;
        float _1145 = _1036 * 0.5;
        float _1146 = _1046 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_294, _295, _296), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3930 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1171 + 1.0))) + _1176) * _1059;
        _1193 = _1026;
        _1194 = _1025;
        _1195 = _1024;
        _1196 = _1036;
        _1197 = _1035;
        _1198 = _1034;
        _1199 = _1046;
        _1200 = _1045;
        _1201 = _1044;
        _1202 = _1059;
        _1203 = _1058;
        _1204 = _1057;
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
    }
    else
    {
        _1193 = _881;
        _1194 = _881;
        _1195 = _881;
        _1196 = _881;
        _1197 = _881;
        _1198 = _881;
        _1199 = _881;
        _1200 = _881;
        _1201 = _881;
        _1202 = _881;
        _1203 = _881;
        _1204 = _881;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _893)) + _893;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _894)) + _894;
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _895)) + _895;
    float _1240 = fma(_1219, cbSceneParam._m0[89u].z, fma(_1218, cbSceneParam._m0[89u].y, _1217 * cbSceneParam._m0[89u].x));
    float _1243 = fma(_1219, cbSceneParam._m0[90u].z, fma(_1218, cbSceneParam._m0[90u].y, _1217 * cbSceneParam._m0[90u].x));
    float _1246 = fma(_1219, cbSceneParam._m0[91u].z, fma(_1218, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1217));
    float _1261 = _485 * 0.5;
    float _1262 = _486 * 0.5;
    float _1263 = _487 * 0.5;
    float _1264 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1267 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1270 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1304;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1277 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_880, _884, _887, _890));
        float _1281 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_882, _885, _888, _891));
        float _1285 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_883, _886, _889, _892));
        float _1292 = dot(vec4(cbModelParam._m0[39u]), vec4(_1261, _1262, _1263, 1.0));
        _1304 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1292) ? 0.0 : (isnan(0.0) ? _1292 : max(0.0, _1292))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1304 = 1.0;
    }
    float _1315;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1306 = dot(vec4(cbModelParam._m0[40u]), vec4(_1261, _1262, _1263, 1.0));
        _1315 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1315 = 1.0;
    }
    float _1319 = (_1315 * cbModelParam._m0[1u].x) + (_1304 * (1.0 - cbModelParam._m0[1u].x));
    float _1329 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _297);
    float _1330 = isnan(_1329) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1329 : min(cbModelParam._m0[25u].z, _1329));
    float _1412;
    float _1414;
    float _1416;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1379 = fma(_549, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _541)) + cbModelParam._m0[13u].w;
        float _1383 = fma(_549, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _541)) + cbModelParam._m0[14u].w;
        float _1387 = fma(_549, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _541)) + cbModelParam._m0[15u].w;
        float _1390 = fma(_487, cbModelParam._m0[13u].z, fma(_486, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485));
        float _1393 = fma(_487, cbModelParam._m0[14u].z, fma(_486, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485));
        float _1396 = fma(_487, cbModelParam._m0[15u].z, fma(_486, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485));
        float _1424;
        if (_1390 > 0.0)
        {
            _1424 = abs((1.0 - _1379) / _1390);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1379 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1424 = frontier_phi_17_15_ladder;
        }
        float _1599;
        if (_1393 > 0.0)
        {
            _1599 = abs((1.0 - _1383) / _1393);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1383 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1599 = frontier_phi_26_22_ladder;
        }
        float _1895;
        if (_1396 > 0.0)
        {
            _1895 = abs((1.0 - _1387) / _1396);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1387 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1895 = frontier_phi_38_33_ladder;
        }
        float _1897 = isnan(_1599) ? _1424 : (isnan(_1424) ? _1599 : min(_1424, _1599));
        float _1898 = isnan(_1895) ? _1897 : (isnan(_1897) ? _1895 : min(_1897, _1895));
        float _1902 = (_1898 * _1390) + _1379;
        float _1903 = (_1898 * _1393) + _1383;
        float _1904 = (_1898 * _1396) + _1387;
        float _1905 = _1898 * 9.9999997473787516355514526367188e-05;
        float _1907 = (-1.0) - _1905;
        float _1909 = _1905 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1904 > _1909) || ((_1904 < _1907) || ((_1903 > _1909) || ((_1903 < _1907) || ((_1902 < _1907) || (_1902 > _1909))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2049 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1904, cbModelParam._m0[9u].z, fma(_1903, cbModelParam._m0[9u].y, _1902 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1904, cbModelParam._m0[10u].z, fma(_1903, cbModelParam._m0[10u].y, _1902 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1904, cbModelParam._m0[11u].z, fma(_1903, cbModelParam._m0[11u].y, _1902 * cbModelParam._m0[11u].x))), _1330);
            frontier_phi_16_38_ladder = _2049.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2049.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2049.x * cbModelParam._m0[1u].y;
        }
        _1412 = frontier_phi_16_38_ladder_2;
        _1414 = frontier_phi_16_38_ladder_1;
        _1416 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_485, _486, _487), _1330);
        _1412 = _1400.x * cbModelParam._m0[1u].y;
        _1414 = _1400.y * cbModelParam._m0[1u].y;
        _1416 = _1400.z * cbModelParam._m0[1u].y;
    }
    float _1420 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _297);
    float _1421 = isnan(_1420) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1420 : min(cbModelParam._m0[25u].w, _1420));
    float _1513;
    float _1515;
    float _1517;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1477 = fma(_549, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _541)) + cbModelParam._m0[21u].w;
        float _1481 = fma(_549, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _541)) + cbModelParam._m0[22u].w;
        float _1485 = fma(_549, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _541)) + cbModelParam._m0[23u].w;
        float _1488 = fma(_487, cbModelParam._m0[21u].z, fma(_486, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485));
        float _1491 = fma(_487, cbModelParam._m0[22u].z, fma(_486, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485));
        float _1494 = fma(_487, cbModelParam._m0[23u].z, fma(_486, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485));
        float _1604;
        if (_1488 > 0.0)
        {
            _1604 = abs((1.0 - _1477) / _1488);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1477 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1604 = frontier_phi_28_24_ladder;
        }
        float _1922;
        if (_1491 > 0.0)
        {
            _1922 = abs((1.0 - _1481) / _1491);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1481 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1922 = frontier_phi_40_35_ladder;
        }
        float _2260;
        if (_1494 > 0.0)
        {
            _2260 = abs((1.0 - _1485) / _1494);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1485 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2260 = frontier_phi_50_47_ladder;
        }
        float _2262 = isnan(_1922) ? _1604 : (isnan(_1604) ? _1922 : min(_1604, _1922));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1488) + _1477;
        float _2268 = (_2263 * _1491) + _1481;
        float _2269 = (_2263 * _1494) + _1485;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2270;
        float _2273 = _2270 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2269 > _2273) || ((_2269 < _2271) || ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 < _2271) || (_2267 > _2273))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2269, cbModelParam._m0[17u].z, fma(_2268, cbModelParam._m0[17u].y, _2267 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2269, cbModelParam._m0[18u].z, fma(_2268, cbModelParam._m0[18u].y, _2267 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2269, cbModelParam._m0[19u].z, fma(_2268, cbModelParam._m0[19u].y, _2267 * cbModelParam._m0[19u].x))), _1421);
            frontier_phi_25_50_ladder = _2391.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2391.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2391.x * cbModelParam._m0[1u].z;
        }
        _1513 = frontier_phi_25_50_ladder_2;
        _1515 = frontier_phi_25_50_ladder_1;
        _1517 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1497 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_485, _486, _487), _1421);
        _1513 = _1497.x * cbModelParam._m0[1u].z;
        _1515 = _1497.y * cbModelParam._m0[1u].z;
        _1517 = _1497.z * cbModelParam._m0[1u].z;
    }
    float _1530 = (((_512 * _462) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1513 - _1412)) + _1412);
    float _1532 = (((_512 * _464) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1515 - _1414)) + _1414);
    float _1534 = (((_512 * _465) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1517 - _1416)) + _1416);
    float _1537 = fma(_1534, cbSceneParam._m0[89u].z, fma(_1532, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1540 = fma(_1534, cbSceneParam._m0[90u].z, fma(_1532, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1543 = fma(_1534, cbSceneParam._m0[91u].z, fma(_1532, cbSceneParam._m0[91u].y, _1530 * cbSceneParam._m0[91u].x));
    float _1578 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1582 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1586 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1590 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1591 = _1578 / _1590;
    float _1592 = _1582 / _1590;
    float _1593 = _1586 / _1590;
    float _1740;
    float _1741;
    float _1742;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1620 = ((uint(_1593 > cbSceneParam._m0[59u].y) + uint(_1593 > cbSceneParam._m0[59u].x)) + uint(_1593 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1621 = _1620 + 43u;
        uint _1629 = _1620 + 44u;
        uint _1637 = _1620 + 45u;
        uint _1645 = _1620 + 46u;
        float _1656 = fma(_1590, cbSceneParam._m0[_1621].w, fma(_1586, cbSceneParam._m0[_1621].z, fma(_1582, cbSceneParam._m0[_1621].y, _1578 * cbSceneParam._m0[_1621].x)));
        float _1660 = fma(_1590, cbSceneParam._m0[_1629].w, fma(_1586, cbSceneParam._m0[_1629].z, fma(_1582, cbSceneParam._m0[_1629].y, _1578 * cbSceneParam._m0[_1629].x)));
        float _1668 = fma(_1590, cbSceneParam._m0[_1645].w, fma(_1586, cbSceneParam._m0[_1645].z, fma(_1582, cbSceneParam._m0[_1645].y, _1578 * cbSceneParam._m0[_1645].x)));
        float _1673 = cbSceneParam._m0[33u].z * _1668;
        float _1675 = cbSceneParam._m0[33u].w * _1668;
        float _1678 = fma(_1590, cbSceneParam._m0[_1637].w, fma(_1586, cbSceneParam._m0[_1637].z, fma(_1582, cbSceneParam._m0[_1637].y, _1578 * cbSceneParam._m0[_1637].x))) / _1668;
        float _1726 = (cbSceneParam._m0[33u].x - sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593))) * cbSceneParam._m0[33u].y;
        float _4056 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1733 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1673 + _1656) / _1668, (_1675 + _1660) / _1668), _1678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1675 + _1656) / _1668, (_1660 - _1673) / _1668), _1678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1656 - _1673) / _1668, (_1660 - _1675) / _1668), _1678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1656 - _1675) / _1668, (_1673 + _1660) / _1668), _1678), 0.0)).x), vec4(0.25)));
        _1740 = 1.0 - (_1733 * cbSceneParam._m0[34u].x);
        _1741 = 1.0 - (_1733 * cbSceneParam._m0[34u].y);
        _1742 = 1.0 - (_1733 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1740 = 1.0;
        _1741 = 1.0;
        _1742 = 1.0;
    }
    float _1806;
    float _1808;
    float _1810;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1794 = fma(_1590, cbSceneParam._m0[63u].w, fma(_1586, cbSceneParam._m0[63u].z, fma(_1582, cbSceneParam._m0[63u].y, _1578 * cbSceneParam._m0[63u].x)));
        float _1795 = fma(_1590, cbSceneParam._m0[60u].w, fma(_1586, cbSceneParam._m0[60u].z, fma(_1582, cbSceneParam._m0[60u].y, _1578 * cbSceneParam._m0[60u].x))) / _1794;
        float _1796 = fma(_1590, cbSceneParam._m0[61u].w, fma(_1586, cbSceneParam._m0[61u].z, fma(_1582, cbSceneParam._m0[61u].y, _1578 * cbSceneParam._m0[61u].x))) / _1794;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1795 >= cbSceneParam._m0[64u].x) && (_1796 >= cbSceneParam._m0[64u].y)) && (_1795 <= cbSceneParam._m0[64u].z)) && (_1796 <= cbSceneParam._m0[64u].w))
        {
            float _1935 = fma(_1590, cbSceneParam._m0[62u].w, fma(_1586, cbSceneParam._m0[62u].z, fma(_1582, cbSceneParam._m0[62u].y, _1578 * cbSceneParam._m0[62u].x))) / _1794;
            float _1939 = isnan(cbSceneParam._m0[41u].w) ? _1935 : (isnan(_1935) ? cbSceneParam._m0[41u].w : max(_1935, cbSceneParam._m0[41u].w));
            float _1982 = (cbSceneParam._m0[33u].x - sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593))) * cbSceneParam._m0[33u].y;
            float _4072 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
            float _1989 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1795, cbSceneParam._m0[33u].w + _1796), _1939), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1795, _1796 - cbSceneParam._m0[33u].z), _1939), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1795 - cbSceneParam._m0[33u].z, _1796 - cbSceneParam._m0[33u].w), _1939), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1795 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1796), _1939), 0.0)).x), vec4(0.25)));
            float _1993 = 1.0 - (_1989 * cbSceneParam._m0[34u].x);
            float _1994 = 1.0 - (_1989 * cbSceneParam._m0[34u].y);
            float _1995 = 1.0 - (_1989 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1995) ? _1742 : (isnan(_1742) ? _1995 : min(_1742, _1995));
            frontier_phi_37_36_ladder_1 = isnan(_1994) ? _1741 : (isnan(_1741) ? _1994 : min(_1741, _1994));
            frontier_phi_37_36_ladder_2 = isnan(_1993) ? _1740 : (isnan(_1740) ? _1993 : min(_1740, _1993));
        }
        else
        {
            frontier_phi_37_36_ladder = _1742;
            frontier_phi_37_36_ladder_1 = _1741;
            frontier_phi_37_36_ladder_2 = _1740;
        }
        _1806 = frontier_phi_37_36_ladder_2;
        _1808 = frontier_phi_37_36_ladder_1;
        _1810 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1806 = _1740;
        _1808 = _1741;
        _1810 = _1742;
    }
    uvec4 _1815 = floatBitsToUint(cbInstanceData._m0[_436 + 5u]);
    uint _1817 = _1815.x * 14u;
    uint _1818 = _1817 + 13u;
    float _1825 = _477 + (-1.0);
    float _1830 = (cbLight._m0[_1818].x * _1825) + 1.0;
    float _1831 = (cbLight._m0[_1818].y * _1825) + 1.0;
    float _1832 = (cbLight._m0[_1818].z * _1825) + 1.0;
    float _1833 = (cbLight._m0[_1818].w * _1825) + 1.0;
    uint _1834 = _1817 + 5u;
    float _1840 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
    uint _1844 = _1817 + 4u;
    float _1854 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1858 = _1817 | 1u;
    float _1869 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_294, _295, _296));
    float _1872 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_294, _295, _296));
    float _4108 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _4119 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1877 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.3183098733425140380859375;
    float _1879 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.3183098733425140380859375;
    float _1886 = ((cbLight._m0[_1834].x * _1840) * _1879) + (((cbLight._m0[_1844].x * _1806) * _1854) * _1877);
    float _1887 = ((_1840 * cbLight._m0[_1834].y) * _1879) + (((cbLight._m0[_1844].y * _1808) * _1854) * _1877);
    float _1888 = ((_1840 * cbLight._m0[_1834].z) * _1879) + (((cbLight._m0[_1844].z * _1810) * _1854) * _1877);
    uvec4 _1892 = floatBitsToUint(cbLight._m0[_1817 + 12u]);
    bool _1894 = _1892.x == 0u;
    float _1996;
    float _1998;
    float _2000;
    if (_1894)
    {
        _1996 = _1886;
        _1998 = _1887;
        _2000 = _1888;
    }
    else
    {
        uint _2004 = _1817 + 6u;
        float _2020 = (dot(vec3(cbLight._m0[_1817 + 2u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _2021 = _2020 * _2020;
        float _4130 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2022 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2023 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _1996 = (((cbLight._m0[_2004].x * 0.3183098733425140380859375) * _2022) * _2023) + _1886;
        _1998 = (((cbLight._m0[_2004].y * 0.3183098733425140380859375) * _2022) * _2023) + _1887;
        _2000 = (((cbLight._m0[_2004].z * 0.3183098733425140380859375) * _2022) * _2023) + _1888;
    }
    bool _2003 = _1892.y == 0u;
    float _2058;
    float _2060;
    float _2062;
    if (_2003)
    {
        _2058 = _1996;
        _2060 = _1998;
        _2062 = _2000;
    }
    else
    {
        uint _2231 = _1817 + 7u;
        float _2247 = (dot(vec3(cbLight._m0[_1817 + 3u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _2248 = _2247 * _2247;
        float _4146 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2249 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2250 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2058 = (((cbLight._m0[_2231].x * 0.3183098733425140380859375) * _2249) * _2250) + _1996;
        _2060 = (((cbLight._m0[_2231].y * 0.3183098733425140380859375) * _2249) * _2250) + _1998;
        _2062 = (((cbLight._m0[_2231].z * 0.3183098733425140380859375) * _2249) * _2250) + _2000;
    }
    uint _2065 = _1817 + 8u;
    float _2078 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1817].w)) * _297) * 0.949999988079071044921875);
    float _2079 = _2078 * _2078;
    float _2080 = cbLight._m0[_1817].x + _375;
    float _2081 = cbLight._m0[_1817].y + _376;
    float _2082 = cbLight._m0[_1817].z + _377;
    float _2086 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
    float _2087 = _2086 * _2080;
    float _2088 = _2086 * _2081;
    float _2089 = _2086 * _2082;
    float _2090 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1817].xyz));
    float _4162 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _2094 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2095 = dot(vec3(_294, _295, _296), vec3(_2087, _2088, _2089));
    float _4184 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2099 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_2087, _2088, _2089));
    float _4195 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2103 = _2079 * _2079;
    float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
    float _2115 = exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0);
    float _2116 = 0.959999978542327880859375 - _459;
    float _2118 = 0.959999978542327880859375 - _460;
    float _2119 = 0.959999978542327880859375 - _461;
    float _2126 = 1.0 - _2079;
    float _2137 = (0.5 / (((_2094 * ((_2093 * _2126) + _2079)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2126) + _2079) * _2093))) * _2093;
    float _4206 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2139 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
    uint _2153 = _1817 + 9u;
    float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1858].w)) * _297) * 0.949999988079071044921875);
    float _2165 = _2164 * _2164;
    float _2166 = cbLight._m0[_1858].x + _375;
    float _2167 = cbLight._m0[_1858].y + _376;
    float _2168 = cbLight._m0[_1858].z + _377;
    float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
    float _2173 = _2172 * _2166;
    float _2174 = _2172 * _2167;
    float _2175 = _2172 * _2168;
    float _2176 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1858].xyz));
    float _4217 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2180 = dot(vec3(_294, _295, _296), vec3(_2173, _2174, _2175));
    float _4228 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2184 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_2173, _2174, _2175));
    float _4239 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2188 = _2165 * _2165;
    float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
    float _2199 = exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0);
    float _2206 = 1.0 - _2165;
    float _2216 = (0.5 / (((_2094 * ((_2179 * _2206) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2206) + _2165) * _2179))) * _2179;
    float _4250 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2218 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
    float _2228 = (((((_2199 * _2116) + _462) * cbLight._m0[_2153].x) * _2218) * _1840) + ((((cbLight._m0[_2065].x * _1806) * ((_2115 * _2116) + _462)) * _2139) * _1854);
    float _2229 = (((((_2199 * _2118) + _464) * cbLight._m0[_2153].y) * _2218) * _1840) + ((((cbLight._m0[_2065].y * _1808) * ((_2115 * _2118) + _464)) * _2139) * _1854);
    float _2230 = (((((_2199 * _2119) + _465) * cbLight._m0[_2153].z) * _2218) * _1840) + ((((cbLight._m0[_2065].z * _1810) * ((_2115 * _2119) + _465)) * _2139) * _1854);
    float _2286;
    float _2288;
    float _2290;
    if (_1894)
    {
        _2286 = _2228;
        _2288 = _2229;
        _2290 = _2230;
    }
    else
    {
        uint _2292 = _1817 + 2u;
        uint _2296 = _1817 + 10u;
        float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _297) * 0.949999988079071044921875);
        float _2311 = _2310 * _2310;
        float _2312 = cbLight._m0[_2292].x + _375;
        float _2313 = cbLight._m0[_2292].y + _376;
        float _2314 = cbLight._m0[_2292].z + _377;
        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
        float _2319 = _2318 * _2312;
        float _2320 = _2318 * _2313;
        float _2321 = _2318 * _2314;
        float _2322 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2292].xyz));
        float _4261 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2326 = dot(vec3(_294, _295, _296), vec3(_2319, _2320, _2321));
        float _4272 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2330 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2319, _2320, _2321));
        float _4283 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2334 = _2311 * _2311;
        float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
        float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0);
        float _2352 = 1.0 - _2311;
        float _2362 = (0.5 / (((_2094 * ((_2325 * _2352) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2352) + _2311) * _2325))) * _2325;
        float _4294 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2364 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
        float _2365 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2286 = (((((_2345 * _2116) + _462) * cbLight._m0[_2296].x) * _2364) * _2365) + _2228;
        _2288 = (((((_2345 * _2118) + _464) * cbLight._m0[_2296].y) * _2364) * _2365) + _2229;
        _2290 = (((((_2345 * _2119) + _465) * cbLight._m0[_2296].z) * _2364) * _2365) + _2230;
    }
    float _2396;
    float _2398;
    float _2400;
    if (_2003)
    {
        _2396 = _2286;
        _2398 = _2288;
        _2400 = _2290;
    }
    else
    {
        uint _2407 = _1817 + 3u;
        uint _2411 = _1817 + 11u;
        float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _297) * 0.949999988079071044921875);
        float _2426 = _2425 * _2425;
        float _2427 = cbLight._m0[_2407].x + _375;
        float _2428 = cbLight._m0[_2407].y + _376;
        float _2429 = cbLight._m0[_2407].z + _377;
        float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
        float _2434 = _2433 * _2427;
        float _2435 = _2433 * _2428;
        float _2436 = _2433 * _2429;
        float _2437 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2407].xyz));
        float _4310 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2441 = dot(vec3(_294, _295, _296), vec3(_2434, _2435, _2436));
        float _4321 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2445 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2434, _2435, _2436));
        float _4332 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2449 = _2426 * _2426;
        float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
        float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0);
        float _2467 = 1.0 - _2426;
        float _2477 = (0.5 / (((_2094 * ((_2440 * _2467) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2467) + _2426) * _2440))) * _2440;
        float _4343 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2479 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
        float _2480 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2396 = (((((_2460 * _2116) + _462) * cbLight._m0[_2411].x) * _2479) * _2480) + _2286;
        _2398 = (((((_2460 * _2118) + _464) * cbLight._m0[_2411].y) * _2479) * _2480) + _2288;
        _2400 = (((((_2460 * _2119) + _465) * cbLight._m0[_2411].z) * _2479) * _2480) + _2290;
    }
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    if (_1815.y == 0u)
    {
        uvec4 _2501 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2502 = _2501.x;
        uint _2513 = uint((float(_2501.y) * floor(float(uint(cbSceneParam._m0[85u].y * _397) / _2502))) + floor(float(uint(cbSceneParam._m0[85u].x * _396) / _2502)));
        float _2523 = (log2(_1593 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2524 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        uint _2527 = uint(isnan(14.0) ? _2524 : (isnan(_2524) ? 14.0 : min(_2524, 14.0)));
        uvec4 _2532 = texelFetch(g_lightClusterGridBuffer, int(((_2527 << 2u) + (_2513 << 6u)) >> 2u));
        uint _2533 = _2532.x;
        uint _2534 = _2501.z;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        if (((((1u << ((_2534 >> 4u) & 15u)) + 4294967295u) & _2533) == 0u) || ((_2534 & 240u) == 0u))
        {
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
        }
        else
        {
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            uint _2772 = 0u;
            uint _2781;
            bool _2782;
            for (;;)
            {
                _2781 = texelFetch(g_lightClassification, int((((_2527 << 5u) + (_2513 << 9u)) + (_2772 << 2u)) >> 2u)).x;
                _2782 = _2781 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2782)
                {
                    frontier_phi_71_pred = _2771;
                    frontier_phi_71_pred_1 = _2770;
                    frontier_phi_71_pred_2 = _2769;
                    frontier_phi_71_pred_3 = _2768;
                    frontier_phi_71_pred_4 = _2767;
                    frontier_phi_71_pred_5 = _2766;
                }
                else
                {
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    uint _2917;
                    _2911 = _2766;
                    _2912 = _2767;
                    _2913 = _2768;
                    _2914 = _2769;
                    _2915 = _2770;
                    _2916 = _2771;
                    _2917 = _2781;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    for (;;)
                    {
                        uint _2921 = uint(findLSB(_2917)) + (_2772 << 5u);
                        uint _2918 = (_2917 + 4294967295u) & _2917;
                        uint _2923 = _2921 * 48u;
                        vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2943 = (_2921 * 48u) + 4u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 3u)).x));
                        uint _2962 = (_2921 * 48u) + 8u;
                        vec3 _2973 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x));
                        float _2977 = _2937.x - _1591;
                        float _2978 = _2937.y - _1592;
                        float _2979 = _2937.z - _1593;
                        float _2980 = dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979));
                        float _2983 = inversesqrt(_2980);
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2987 = dot(vec3(_417, _420, _423), vec3(_2984, _2985, _2986));
                        float _2992 = 1.0 - (_2980 * _2937.w);
                        float _4369 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _2994 = sqrt(_2980) * _2956.w;
                        float _2997 = 1.39999997615814208984375 / (_2994 + 1.39999997615814208984375);
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2987) + _2998;
                        float _3004 = _2994 * _2994;
                        float _3008 = ((isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))) * _2993) / ((_3004 * 0.699999988079071044921875) + 1.0);
                        float _3012 = (-0.0) - _1591;
                        float _3013 = (-0.0) - _1592;
                        float _3014 = (-0.0) - _1593;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3028 = exp2(log2(1.0 / ((_3004 * 3.5) + 5.0)) * 0.25);
                        float _3029 = 1.0 - _493;
                        float _3036 = sqrt(1.0 - ((1.0 - (_3029 * _3029)) * (1.0 - (_3028 * _3028))));
                        float _3037 = _3036 * _3036;
                        float _3038 = _3037 * _3037;
                        float _3039 = _3019 + _2984;
                        float _3040 = _3020 + _2985;
                        float _3041 = _3021 + _2986;
                        float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
                        float _3049 = dot(vec3(_417, _420, _423), vec3(_3019, _3020, _3021));
                        float _4385 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3052 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3053 = dot(vec3(_417, _420, _423), vec3(_3045 * _3039, _3045 * _3040, _3045 * _3041));
                        float _4396 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3056 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3060 = ((_3056 * _3056) * (_3038 + (-1.0))) + 1.0;
                        float _3061 = _2997 * _3037;
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _2987) + _3062;
                        float _4407 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3067 = 1.0 - _3037;
                        float _3077 = (0.5 / (((_3066 * ((_3052 * _3067) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_3066 * _3067) + _3037) * _3052))) * _3066;
                        float _4418 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3088 = (((_3038 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3060 * _3060) * ((_3004 * 2.1991131305694580078125) + 3.141590118408203125))) * _2993;
                        _2841 = (_3008 * _2956.x) + _2914;
                        _2842 = (_3008 * _2956.y) + _2915;
                        _2843 = (_3008 * _2956.z) + _2916;
                        _2838 = (_3088 * _2973.x) + _2911;
                        _2839 = (_3088 * _2973.y) + _2912;
                        _2840 = (_3088 * _2973.z) + _2913;
                        if (_2918 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2911 = _2838;
                            _2912 = _2839;
                            _2913 = _2840;
                            _2914 = _2841;
                            _2915 = _2842;
                            _2916 = _2843;
                            _2917 = _2918;
                        }
                    }
                    frontier_phi_71_pred = _2843;
                    frontier_phi_71_pred_1 = _2842;
                    frontier_phi_71_pred_2 = _2841;
                    frontier_phi_71_pred_3 = _2840;
                    frontier_phi_71_pred_4 = _2839;
                    frontier_phi_71_pred_5 = _2838;
                }
                _2624 = frontier_phi_71_pred;
                _2622 = frontier_phi_71_pred_1;
                _2620 = frontier_phi_71_pred_2;
                _2618 = frontier_phi_71_pred_3;
                _2616 = frontier_phi_71_pred_4;
                _2614 = frontier_phi_71_pred_5;
                uint _2773 = _2772 + 1u;
                if (_2773 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2766 = _2614;
                    _2767 = _2616;
                    _2768 = _2618;
                    _2769 = _2620;
                    _2770 = _2622;
                    _2771 = _2624;
                    _2772 = _2773;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
        }
        uvec4 _2627 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2628 = _2627.z;
        uint _2630 = (_2628 >> 8u) & 15u;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        if (((4294967295u << _2630) & _2533) == 0u)
        {
            _2734 = _2613;
            _2736 = _2615;
            _2738 = _2617;
            _2740 = _2619;
            _2742 = _2621;
            _2744 = _2623;
        }
        else
        {
            float _2759 = inversesqrt(dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593)));
            float _2760 = _2759 * _1591;
            float _2761 = _2759 * _1592;
            float _2762 = _2759 * _1593;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2630 < ((_2628 >> 12u) & 15u))
            {
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2894 = _2613;
                float _2895 = _2615;
                float _2896 = _2617;
                float _2897 = _2619;
                float _2898 = _2621;
                float _2899 = _2623;
                uint _2900 = _2630;
                uint _2909;
                bool _2910;
                for (;;)
                {
                    _2909 = texelFetch(g_lightClassification, int((((_2527 << 5u) + (_2513 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                    _2910 = _2909 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2910)
                    {
                        frontier_phi_82_pred = _2899;
                        frontier_phi_82_pred_1 = _2898;
                        frontier_phi_82_pred_2 = _2897;
                        frontier_phi_82_pred_3 = _2896;
                        frontier_phi_82_pred_4 = _2895;
                        frontier_phi_82_pred_5 = _2894;
                    }
                    else
                    {
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3115 = _2894;
                        float _3116 = _2895;
                        float _3117 = _2896;
                        float _3118 = _2897;
                        float _3119 = _2898;
                        float _3120 = _2899;
                        uint _3121 = _2909;
                        uint _3122;
                        vec4 _3147;
                        float _3148;
                        vec4 _3163;
                        vec3 _3175;
                        vec4 _3191;
                        vec4 _3207;
                        float _3254;
                        bool _3255;
                        for (;;)
                        {
                            uint _3132 = ((_2900 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3121));
                            _3122 = (_3121 + 4294967295u) & _3121;
                            uint _3134 = _3132 * 40u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3148 = _3147.w;
                            uint _3150 = (_3132 * 40u) + 4u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3165 = (_3132 * 40u) + 8u;
                            _3175 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x));
                            uint _3178 = (_3132 * 40u) + 16u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3194 = (_3132 * 40u) + 20u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3210 = (_3132 * 40u) + 24u;
                            vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3229 = (_3132 * 40u) + 28u;
                            vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            _3254 = fma(_1593, _3242.z, fma(_1592, _3242.y, _3242.x * _1591)) + _3242.w;
                            _3255 = !((fma(_1593, _3223.z, fma(_1592, _3223.y, _3223.x * _1591)) + _3223.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3255)
                            {
                                float _3282 = _3147.x - _1591;
                                float _3283 = _3147.y - _1592;
                                float _3284 = _3147.z - _1593;
                                float _3285 = dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284));
                                float _3288 = inversesqrt(_3285);
                                float _3289 = _3288 * _3282;
                                float _3290 = _3288 * _3283;
                                float _3291 = _3288 * _3284;
                                float _3295 = 1.0 - (_3285 / (_3148 * _3148));
                                float _4429 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3296 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3300 = sqrt(_3285) * _3163.w;
                                float _3302 = 1.39999997615814208984375 / (_3300 + 1.39999997615814208984375);
                                float _3303 = _3302 * _3302;
                                float _3306 = ((1.0 - _3303) * dot(vec3(_3289, _3290, _3291), vec3(_417, _420, _423))) + _3303;
                                float _3309 = _3300 * _3300;
                                float _3313 = (fma(_1593, _3191.z, fma(_1592, _3191.y, _3191.x * _1591)) + _3191.w) / _3254;
                                float _3314 = (fma(_1593, _3207.z, fma(_1592, _3207.y, _3207.x * _1591)) + _3207.w) / _3254;
                                float _3318 = 1.0 - dot(vec2(_3313, _3314), vec2(_3313, _3314));
                                float _4445 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3320 = _3319 * (((isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0))) * _3296) / ((_3309 * 0.699999988079071044921875) + 1.0));
                                float _3332 = exp2(log2(1.0 / ((_3309 * 3.5) + 5.0)) * 0.25);
                                float _3333 = 1.0 - _493;
                                float _3340 = sqrt(1.0 - ((1.0 - (_3333 * _3333)) * (1.0 - (_3332 * _3332))));
                                float _3341 = _3340 * _3340;
                                float _3342 = _3341 * _3341;
                                float _3343 = _3289 - _2760;
                                float _3344 = _3290 - _2761;
                                float _3345 = _3291 - _2762;
                                float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                                float _3353 = dot(vec3(_417, _420, _423), vec3((-0.0) - _2760, (-0.0) - _2761, (-0.0) - _2762));
                                float _4456 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3356 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3357 = dot(vec3(_417, _420, _423), vec3(_3349 * _3343, _3349 * _3344, _3349 * _3345));
                                float _4467 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3364 = ((_3360 * _3360) * (_3342 + (-1.0))) + 1.0;
                                float _3365 = _3302 * _3341;
                                float _3366 = _3365 * _3365;
                                float _3372 = ((1.0 - _3366) * dot(vec3(_417, _420, _423), vec3(_3289, _3290, _3291))) + _3366;
                                float _4478 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3374 = 1.0 - _3341;
                                float _3384 = (0.5 / (((_3373 * ((_3356 * _3374) + _3341)) + 9.9999999392252902907785028219223e-09) + (((_3373 * _3374) + _3341) * _3356))) * _3373;
                                float _4489 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3394 = (_3319 * _3296) * (((_3342 * 3.1415927410125732421875) * (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) / ((_3364 * _3364) * ((_3309 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3320 * _3163.z;
                                frontier_phi_88_pred_1 = _3320 * _3163.y;
                                frontier_phi_88_pred_2 = _3320 * _3163.x;
                                frontier_phi_88_pred_3 = _3394 * _3175.z;
                                frontier_phi_88_pred_4 = _3394 * _3175.y;
                                frontier_phi_88_pred_5 = _3394 * _3175.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3403 = frontier_phi_88_pred;
                            _3402 = frontier_phi_88_pred_1;
                            _3401 = frontier_phi_88_pred_2;
                            _3400 = frontier_phi_88_pred_3;
                            _3399 = frontier_phi_88_pred_4;
                            _3398 = frontier_phi_88_pred_5;
                            _3105 = _3401 + _3118;
                            _3106 = _3402 + _3119;
                            _3107 = _3403 + _3120;
                            _3102 = _3398 + _3115;
                            _3103 = _3399 + _3116;
                            _3104 = _3400 + _3117;
                            if (_3122 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3122;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3107;
                        frontier_phi_82_pred_1 = _3106;
                        frontier_phi_82_pred_2 = _3105;
                        frontier_phi_82_pred_3 = _3104;
                        frontier_phi_82_pred_4 = _3103;
                        frontier_phi_82_pred_5 = _3102;
                    }
                    _2745 = frontier_phi_82_pred;
                    _2743 = frontier_phi_82_pred_1;
                    _2741 = frontier_phi_82_pred_2;
                    _2739 = frontier_phi_82_pred_3;
                    _2737 = frontier_phi_82_pred_4;
                    _2735 = frontier_phi_82_pred_5;
                    uint _2901 = _2900 + 1u;
                    if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2894 = _2735;
                        _2895 = _2737;
                        _2896 = _2739;
                        _2897 = _2741;
                        _2898 = _2743;
                        _2899 = _2745;
                        _2900 = _2901;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2741;
                frontier_phi_63_64_ladder_1 = _2745;
                frontier_phi_63_64_ladder_2 = _2743;
                frontier_phi_63_64_ladder_3 = _2739;
                frontier_phi_63_64_ladder_4 = _2737;
                frontier_phi_63_64_ladder_5 = _2735;
            }
            else
            {
                frontier_phi_63_64_ladder = _2619;
                frontier_phi_63_64_ladder_1 = _2623;
                frontier_phi_63_64_ladder_2 = _2621;
                frontier_phi_63_64_ladder_3 = _2617;
                frontier_phi_63_64_ladder_4 = _2615;
                frontier_phi_63_64_ladder_5 = _2613;
            }
            _2734 = frontier_phi_63_64_ladder_5;
            _2736 = frontier_phi_63_64_ladder_4;
            _2738 = frontier_phi_63_64_ladder_3;
            _2740 = frontier_phi_63_64_ladder;
            _2742 = frontier_phi_63_64_ladder_2;
            _2744 = frontier_phi_63_64_ladder_1;
        }
        float _2749 = isnan(1.0) ? _477 : (isnan(_477) ? 1.0 : min(_477, 1.0));
        _2546 = (_2749 * _2740) + _2058;
        _2548 = (_2749 * _2742) + _2060;
        _2550 = (_2749 * _2744) + _2062;
        _2552 = ((_2734 * _462) * _2749) + _2396;
        _2554 = ((_2736 * _464) * _2749) + _2398;
        _2556 = ((_2738 * _465) * _2749) + _2400;
    }
    else
    {
        _2546 = _2058;
        _2548 = _2060;
        _2550 = _2062;
        _2552 = _2396;
        _2554 = _2398;
        _2556 = _2400;
    }
    float _4505 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4516 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4527 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _2573 = ((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2546 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _477))) + ((_2552 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2574 = ((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2548 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _477))) + ((_2554 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2575 = ((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2550 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _477))) + ((_2556 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    uint _2576 = _436 + 6u;
    float _2584 = _396 / cbSceneParam._m0[86u].x;
    float _2585 = _397 / cbSceneParam._m0[86u].y;
    vec4 _2599 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, (log2((isnan(cbSceneParam._m0[77u].w) ? _317 : (isnan(_317) ? cbSceneParam._m0[77u].w : min(_317, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2601 = _2599.x;
    float _2602 = _2599.y;
    float _2603 = _2599.z;
    float _2604 = _2599.w;
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    if (_317 > cbSceneParam._m0[78u].w)
    {
        float _2638 = isnan(_317) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _317 : min(cbSceneParam._m0[80u].w, _317));
        float _2639 = _2638 / _317;
        float _2650 = _2639 * _368;
        float _2651 = _369 * _2639;
        float _2652 = (-0.0) - _2651;
        float _2654 = _2639 * _370;
        float _2656 = (cbSceneParam._m0[77u].w * _2652) / _2638;
        float _2657 = _2656 + cbSceneParam._m0[79u].w;
        float _2658 = cbSceneParam._m0[79u].w - _2651;
        float _2664 = sqrt(((_2650 * _2650) + (_2651 * _2651)) + (_2654 * _2654));
        float _2667 = (1.0 - (cbSceneParam._m0[77u].w / _2638)) * _2664;
        float _2672 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2674 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2851;
        if (abs((_2652 - _2656) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2851 = ((((_2657 > 0.0) ? exp2(_2672 * _2657) : (2.0 - exp2(_2674 * _2657))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2667;
        }
        else
        {
            float _2795 = 1.0 / cbSceneParam._m0[80u].x;
            float _2796 = isnan(_2658) ? _2657 : (isnan(_2657) ? _2658 : max(_2657, _2658));
            float _2797 = isnan(_2658) ? _2657 : (isnan(_2657) ? _2658 : min(_2657, _2658));
            float _2806 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : min(_2796, 0.0));
            float _2807 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : min(_2797, 0.0));
            _2851 = ((abs(_2664 / _2652) * cbSceneParam._m0[80u].y) * ((((_2806 - _2807) * 2.0) - ((exp2(_2672 * (isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0)))) - exp2(_2672 * (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))))) * _2795)) - ((exp2(_2674 * _2806) - exp2(_2674 * _2807)) * _2795))) + (_2667 * cbSceneParam._m0[80u].z);
        }
        vec4 _2853 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, 1.0), 0.0);
        float _2862 = exp2((_2851 * (-1.44269502162933349609375)) * (1.0 - _2853.w));
        float _2863 = log2(_2862);
        float _2879 = log2(_2604);
        _2676 = (exp2(_2879 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].x)) * _2853.x) / cbSceneParam._m0[78u].x)) + _2601;
        _2678 = (exp2(_2879 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].y)) * _2853.y) / cbSceneParam._m0[78u].y)) + _2602;
        _2680 = (exp2(_2879 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].z)) * _2853.z) / cbSceneParam._m0[78u].z)) + _2603;
        _2682 = _2862 * _2604;
    }
    else
    {
        _2676 = _2601;
        _2678 = _2602;
        _2680 = _2603;
        _2682 = _2604;
    }
    bool _2889;
    vec4 _2692;
    vec4 _2714;
    float _2716;
    float _2720;
    float _2721;
    float _2722;
    float _2723;
    bool _2733;
    for (;;)
    {
        _2692 = cbMatDynParam._m0[0u];
        float _2694 = roundEven(_2692.y);
        bool _2695 = _2694 == 3.0;
        float _2696 = log2(_2682);
        float _2703 = exp2(_2696 * cbSceneParam._m0[78u].x) * _2573;
        float _2704 = exp2(_2696 * cbSceneParam._m0[78u].y) * _2574;
        float _2705 = exp2(_2696 * cbSceneParam._m0[78u].z) * _2575;
        float _2712 = _384 + (-0.5);
        _2714 = cbMtdParam._m0[1u];
        _2716 = _2714.y * _2712;
        float _2719 = (_2694 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2720 = _2719 * (_2695 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2676)));
        _2721 = _2719 * (_2695 ? _2704 : (_2704 + (cbSceneParam._m0[72u].w * _2678)));
        _2722 = _2719 * (_2695 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2680)));
        _2723 = _2712 * 0.999000012874603271484375;
        _2733 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2733)
        {
            if ((cbInstanceData._m0[_436 + 7u].x + _2723) < 0.5)
            {
                _2889 = true;
                break;
            }
        }
        uint _2830 = _438 + uint(_2692.w);
        if ((cbInstanceData._m0[_2830].w < 1.0) && ((cbInstanceData._m0[_2830].w + _2723) < 0.5))
        {
            _2889 = true;
            break;
        }
        if ((_2716 + 1.0) < _2714.x)
        {
            _2889 = true;
            break;
        }
        _2889 = false;
        break;
    }
    float _3093;
    if (_2889)
    {
        discard_state = true;
        _3093 = 0.0;
    }
    else
    {
        _3093 = cbInstanceData._m0[_2576].w;
    }
    SV_Target.x = _2720;
    SV_Target.y = _2721;
    SV_Target.z = _2722;
    SV_Target.w = _3093;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2576].w;
    discard_exit();
}


