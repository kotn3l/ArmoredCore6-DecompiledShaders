#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _821;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _220 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _226 = _220.x * cbMtdParam._m0[9u].x;
    float _227 = _220.y * cbMtdParam._m0[9u].y;
    float _228 = _220.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3182 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0))));
    float _264 = fma(_261, _190 * NORMAL.x, fma(_254, _197 * TANGENT.x, (_183 * _176) * _252));
    float _267 = fma(_261, _190 * NORMAL.y, fma(_254, _197 * TANGENT.y, (_183 * _177) * _252));
    float _270 = fma(_261, _190 * NORMAL.z, fma(_254, _197 * TANGENT.z, (_183 * _178) * _252));
    float _274 = inversesqrt(dot(vec3(_264, _267, _270), vec3(_264, _267, _270)));
    float _275 = _274 * _264;
    float _276 = _274 * _267;
    float _277 = _274 * _270;
    float _3193 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _278 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
    float _3204 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3215 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3226 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3237 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _282 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
    float _298 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _339 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _349 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _339);
    float _350 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _339);
    float _351 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _339);
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _349 * _355;
    float _357 = _350 * _355;
    float _358 = _351 * _355;
    float _364 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _365 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _386 = fma(_277, cbSceneParam._m0[5u].z, fma(_276, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _275));
    float _389 = fma(_277, cbSceneParam._m0[6u].z, fma(_276, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _275));
    float _392 = fma(_277, cbSceneParam._m0[7u].z, fma(_276, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _275));
    uint _405 = uint(roundEven(NORMAL.w)) * 13u;
    uint _408 = (_405 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _414 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0)))) * cbInstanceData._m0[_408].x;
    float _415 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0)))) * cbInstanceData._m0[_408].y;
    float _416 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_408].z;
    float _3248 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _3259 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _418 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    float _3270 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
    float _420 = 1.0 - _282;
    float _421 = _417 * _420;
    float _422 = _418 * _420;
    float _423 = _419 * _420;
    float _428 = (_417 + (-0.039999999105930328369140625)) * _282;
    float _429 = (_418 + (-0.039999999105930328369140625)) * _282;
    float _430 = (_419 + (-0.039999999105930328369140625)) * _282;
    float _431 = _428 + 0.039999999105930328369140625;
    float _433 = _429 + 0.039999999105930328369140625;
    float _434 = _430 + 0.039999999105930328369140625;
    vec4 _443 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _364, cbSceneParam._m0[86u].y * _365));
    float _446 = _443.x * TEXCOORD.z;
    float _447 = dot(vec3(_275, _276, _277), vec3(_356, _357, _358));
    float _450 = _447 * 2.0;
    float _454 = (_450 * _275) - _356;
    float _455 = (_450 * _276) - _357;
    float _456 = (_450 * _277) - _358;
    float _460 = abs(dot(vec3(_356, _357, _358), vec3(_275, _276, _277)));
    float _3281 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _462 = sqrt(_278);
    float _475 = exp2((_462 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_462 * 3.0));
    float _481 = (1.0 - _475) * ((_462 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _482 = _475 * _462;
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _820;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _545 = fma(_518, cbModelParam._m0[26u].z, fma(_514, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _510));
        float _549 = fma(_518, cbModelParam._m0[27u].z, fma(_514, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _510));
        float _553 = fma(_518, cbModelParam._m0[28u].z, fma(_514, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _510));
        float _578 = _510 + _275;
        float _579 = _514 + _276;
        float _580 = _518 + _277;
        float _590 = fma(_580, cbModelParam._m0[26u].z, fma(_579, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _578)) - _545;
        float _591 = fma(_580, cbModelParam._m0[27u].z, fma(_579, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _578)) - _549;
        float _592 = fma(_580, cbModelParam._m0[28u].z, fma(_579, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _578)) - _553;
        float _596 = inversesqrt(dot(vec3(_590, _591, _592), vec3(_590, _591, _592)));
        float _609 = ((_596 * _590) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_545 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _610 = ((_596 * _591) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_549 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _611 = ((_596 * _592) / cbModelParam._m0[34u].z) + ((((((_553 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _614 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_609, _610, _611), 0.0);
        vec4 _621 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_609, _610, _611), 0.0);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_609, _610, _611), 0.0);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_609, _610, _611), 0.0);
        float _648 = exp2((_614.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_614.x + (-0.5));
        float _650 = _648 * (_614.y + (-0.5));
        float _651 = _648 * (_614.z + (-0.5));
        float _658 = exp2((_621.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_621.x + (-0.5));
        float _660 = _658 * (_621.y + (-0.5));
        float _661 = _658 * (_621.z + (-0.5));
        float _668 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_628.x + (-0.5));
        float _670 = _668 * (_628.y + (-0.5));
        float _671 = _668 * (_628.z + (-0.5));
        float _678 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_635.x + (-0.5));
        float _680 = _678 * (_635.y + (-0.5));
        float _681 = _678 * (_635.z + (-0.5));
        float _682 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _683 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _685 = _649 * 0.5;
        float _686 = _659 * 0.5;
        float _687 = _669 * 0.5;
        float _688 = dot(vec3(_685, _686, _687), vec3(_685, _686, _687));
        float _693 = (_688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_688);
        float _702 = (dot(vec3(_275, _276, _277), vec3(_693 * _685, _693 * _686, _693 * _687)) + 1.0) * 0.5;
        float _3307 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _712 = sqrt(((_686 * _686) + (_685 * _685)) + (_687 * _687)) / (_682 + 9.9999997473787516355514526367188e-06);
        float _3318 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _714 = _713 * 2.0;
        float _718 = (1.0 - _713) / (_713 + 1.0);
        float _3329 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _728 = ((((1.0 - _719) * (_714 + 2.0)) * exp2(log2(isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * (_714 + 1.0))) + _719) * _682;
        float _729 = _650 * 0.5;
        float _730 = _660 * 0.5;
        float _731 = _670 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _745 = (dot(vec3(_275, _276, _277), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3340 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _754 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_683 + 9.9999997473787516355514526367188e-06);
        float _3351 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3362 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * (_756 + 1.0))) + _761) * _683;
        float _771 = _651 * 0.5;
        float _772 = _661 * 0.5;
        float _773 = _671 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _787 = (dot(vec3(_275, _276, _277), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _796 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_684 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3395 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_798 + 1.0))) + _803) * _684;
        _820 = _651;
        _822 = _650;
        _823 = _649;
        _824 = _661;
        _825 = _660;
        _826 = _659;
        _827 = _671;
        _828 = _670;
        _829 = _669;
        _830 = _684;
        _831 = _683;
        _832 = _682;
        _833 = cbModelParam._m0[36u].z * (isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0)));
        _834 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
        _835 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
    }
    else
    {
        _820 = _821;
        _822 = _821;
        _823 = _821;
        _824 = _821;
        _825 = _821;
        _826 = _821;
        _827 = _821;
        _828 = _821;
        _829 = _821;
        _830 = _821;
        _831 = _821;
        _832 = _821;
        _833 = 0.0;
        _834 = 0.0;
        _835 = 0.0;
    }
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _861 = fma(_518, cbModelParam._m0[30u].z, fma(_514, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _510));
        float _865 = fma(_518, cbModelParam._m0[31u].z, fma(_514, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _510));
        float _869 = fma(_518, cbModelParam._m0[32u].z, fma(_514, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _510));
        float _892 = _510 + _275;
        float _893 = _514 + _276;
        float _894 = _518 + _277;
        float _904 = fma(_894, cbModelParam._m0[30u].z, fma(_893, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _892)) - _861;
        float _905 = fma(_894, cbModelParam._m0[31u].z, fma(_893, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _892)) - _865;
        float _906 = fma(_894, cbModelParam._m0[32u].z, fma(_893, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _892)) - _869;
        float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
        float _923 = ((_910 * _904) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_861 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_910 * _905) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_865 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_910 * _906) / cbModelParam._m0[35u].z) + ((((((_869 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        float _960 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_927.x + (-0.5));
        float _962 = _960 * (_927.y + (-0.5));
        float _963 = _960 * (_927.z + (-0.5));
        float _970 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_934.x + (-0.5));
        float _972 = _970 * (_934.y + (-0.5));
        float _973 = _970 * (_934.z + (-0.5));
        float _980 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_941.x + (-0.5));
        float _982 = _980 * (_941.y + (-0.5));
        float _983 = _980 * (_941.z + (-0.5));
        float _990 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_948.x + (-0.5));
        float _992 = _990 * (_948.y + (-0.5));
        float _993 = _990 * (_948.z + (-0.5));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = _961 * 0.5;
        float _998 = _971 * 0.5;
        float _999 = _981 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_275, _276, _277), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3458 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_1024 + 1.0))) + _1029) * _994;
        float _1039 = _962 * 0.5;
        float _1040 = _972 * 0.5;
        float _1041 = _982 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_275, _276, _277), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3491 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_1066 + 1.0))) + _1071) * _995;
        float _1081 = _963 * 0.5;
        float _1082 = _973 * 0.5;
        float _1083 = _983 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_275, _276, _277), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3524 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_1108 + 1.0))) + _1113) * _996;
        _1130 = _963;
        _1131 = _962;
        _1132 = _961;
        _1133 = _973;
        _1134 = _972;
        _1135 = _971;
        _1136 = _983;
        _1137 = _982;
        _1138 = _981;
        _1139 = _996;
        _1140 = _995;
        _1141 = _994;
        _1142 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1143 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1144 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
    }
    else
    {
        _1130 = _821;
        _1131 = _821;
        _1132 = _821;
        _1133 = _821;
        _1134 = _821;
        _1135 = _821;
        _1136 = _821;
        _1137 = _821;
        _1138 = _821;
        _1139 = _821;
        _1140 = _821;
        _1141 = _821;
        _1142 = 0.0;
        _1143 = 0.0;
        _1144 = 0.0;
    }
    float _1154 = (cbModelParam._m0[1u].x * (_1142 - _833)) + _833;
    float _1155 = (cbModelParam._m0[1u].x * (_1143 - _834)) + _834;
    float _1156 = (cbModelParam._m0[1u].x * (_1144 - _835)) + _835;
    float _1177 = fma(_1156, cbSceneParam._m0[89u].z, fma(_1155, cbSceneParam._m0[89u].y, _1154 * cbSceneParam._m0[89u].x));
    float _1180 = fma(_1156, cbSceneParam._m0[90u].z, fma(_1155, cbSceneParam._m0[90u].y, _1154 * cbSceneParam._m0[90u].x));
    float _1183 = fma(_1156, cbSceneParam._m0[91u].z, fma(_1155, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1154));
    float _1198 = _454 * 0.5;
    float _1199 = _455 * 0.5;
    float _1200 = _456 * 0.5;
    float _1201 = dot(vec4(_1198, _1199, _1200, 1.0), vec4(_1132, _1135, _1138, _1141));
    float _1204 = dot(vec4(_1198, _1199, _1200, 1.0), vec4(_1131, _1134, _1137, _1140));
    float _1207 = dot(vec4(_1198, _1199, _1200, 1.0), vec4(_1130, _1133, _1136, _1139));
    float _1241;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1214 = dot(vec4(_1198, _1199, _1200, 1.0), vec4(_820, _824, _827, _830));
        float _1218 = dot(vec4(_1198, _1199, _1200, 1.0), vec4(_822, _825, _828, _831));
        float _1222 = dot(vec4(_1198, _1199, _1200, 1.0), vec4(_823, _826, _829, _832));
        float _1229 = dot(vec4(cbModelParam._m0[39u]), vec4(_1198, _1199, _1200, 1.0));
        _1241 = dot(vec3(isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)), isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1229) ? 0.0 : (isnan(0.0) ? _1229 : max(0.0, _1229))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1241 = 1.0;
    }
    float _1252;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1243 = dot(vec4(cbModelParam._m0[40u]), vec4(_1198, _1199, _1200, 1.0));
        _1252 = dot(vec3(isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)), isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1243) ? 0.0 : (isnan(0.0) ? _1243 : max(0.0, _1243))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1252 = 1.0;
    }
    float _1256 = (_1252 * cbModelParam._m0[1u].x) + (_1241 * (1.0 - cbModelParam._m0[1u].x));
    float _1266 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _278);
    float _1267 = isnan(_1266) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1266 : min(cbModelParam._m0[25u].z, _1266));
    float _1349;
    float _1351;
    float _1353;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1316 = fma(_518, cbModelParam._m0[13u].z, fma(_514, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510)) + cbModelParam._m0[13u].w;
        float _1320 = fma(_518, cbModelParam._m0[14u].z, fma(_514, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510)) + cbModelParam._m0[14u].w;
        float _1324 = fma(_518, cbModelParam._m0[15u].z, fma(_514, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510)) + cbModelParam._m0[15u].w;
        float _1327 = fma(_456, cbModelParam._m0[13u].z, fma(_455, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _454));
        float _1330 = fma(_456, cbModelParam._m0[14u].z, fma(_455, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _454));
        float _1333 = fma(_456, cbModelParam._m0[15u].z, fma(_455, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _454));
        float _1361;
        if (_1327 > 0.0)
        {
            _1361 = abs((1.0 - _1316) / _1327);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1316 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1361 = frontier_phi_14_12_ladder;
        }
        float _1590;
        if (_1330 > 0.0)
        {
            _1590 = abs((1.0 - _1320) / _1330);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1320 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1590 = frontier_phi_23_19_ladder;
        }
        float _1847;
        if (_1333 > 0.0)
        {
            _1847 = abs((1.0 - _1324) / _1333);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1324 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1847 = frontier_phi_35_30_ladder;
        }
        float _1849 = isnan(_1590) ? _1361 : (isnan(_1361) ? _1590 : min(_1361, _1590));
        float _1850 = isnan(_1847) ? _1849 : (isnan(_1849) ? _1847 : min(_1849, _1847));
        float _1854 = (_1850 * _1327) + _1316;
        float _1855 = (_1850 * _1330) + _1320;
        float _1856 = (_1850 * _1333) + _1324;
        float _1857 = _1850 * 9.9999997473787516355514526367188e-05;
        float _1859 = (-1.0) - _1857;
        float _1861 = _1857 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1856 > _1861) || ((_1856 < _1859) || ((_1855 > _1861) || ((_1855 < _1859) || ((_1854 < _1859) || (_1854 > _1861))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1984 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1856, cbModelParam._m0[9u].z, fma(_1855, cbModelParam._m0[9u].y, _1854 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1856, cbModelParam._m0[10u].z, fma(_1855, cbModelParam._m0[10u].y, _1854 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1856, cbModelParam._m0[11u].z, fma(_1855, cbModelParam._m0[11u].y, _1854 * cbModelParam._m0[11u].x))), _1267);
            frontier_phi_13_35_ladder = _1984.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1984.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1984.x * cbModelParam._m0[1u].y;
        }
        _1349 = frontier_phi_13_35_ladder_2;
        _1351 = frontier_phi_13_35_ladder_1;
        _1353 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1337 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_454, _455, _456), _1267);
        _1349 = _1337.x * cbModelParam._m0[1u].y;
        _1351 = _1337.y * cbModelParam._m0[1u].y;
        _1353 = _1337.z * cbModelParam._m0[1u].y;
    }
    float _1357 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _278);
    float _1358 = isnan(_1357) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1357 : min(cbModelParam._m0[25u].w, _1357));
    float _1451;
    float _1453;
    float _1455;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1415 = fma(_518, cbModelParam._m0[21u].z, fma(_514, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510)) + cbModelParam._m0[21u].w;
        float _1419 = fma(_518, cbModelParam._m0[22u].z, fma(_514, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510)) + cbModelParam._m0[22u].w;
        float _1423 = fma(_518, cbModelParam._m0[23u].z, fma(_514, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510)) + cbModelParam._m0[23u].w;
        float _1426 = fma(_456, cbModelParam._m0[21u].z, fma(_455, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _454));
        float _1429 = fma(_456, cbModelParam._m0[22u].z, fma(_455, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _454));
        float _1432 = fma(_456, cbModelParam._m0[23u].z, fma(_455, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _454));
        float _1595;
        if (_1426 > 0.0)
        {
            _1595 = abs((1.0 - _1415) / _1426);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1415 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1595 = frontier_phi_25_21_ladder;
        }
        float _1874;
        if (_1429 > 0.0)
        {
            _1874 = abs((1.0 - _1419) / _1429);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1419 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1874 = frontier_phi_37_32_ladder;
        }
        float _2087;
        if (_1432 > 0.0)
        {
            _2087 = abs((1.0 - _1423) / _1432);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1423 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2087 = frontier_phi_46_43_ladder;
        }
        float _2089 = isnan(_1874) ? _1595 : (isnan(_1595) ? _1874 : min(_1595, _1874));
        float _2090 = isnan(_2087) ? _2089 : (isnan(_2089) ? _2087 : min(_2089, _2087));
        float _2094 = (_2090 * _1426) + _1415;
        float _2095 = (_2090 * _1429) + _1419;
        float _2096 = (_2090 * _1432) + _1423;
        float _2097 = _2090 * 9.9999997473787516355514526367188e-05;
        float _2098 = (-1.0) - _2097;
        float _2100 = _2097 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2096 > _2100) || ((_2096 < _2098) || ((_2095 > _2100) || ((_2095 < _2098) || ((_2094 < _2098) || (_2094 > _2100))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2295 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2096, cbModelParam._m0[17u].z, fma(_2095, cbModelParam._m0[17u].y, _2094 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2096, cbModelParam._m0[18u].z, fma(_2095, cbModelParam._m0[18u].y, _2094 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2096, cbModelParam._m0[19u].z, fma(_2095, cbModelParam._m0[19u].y, _2094 * cbModelParam._m0[19u].x))), _1358);
            frontier_phi_22_46_ladder = _2295.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2295.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2295.x * cbModelParam._m0[1u].z;
        }
        _1451 = frontier_phi_22_46_ladder_2;
        _1453 = frontier_phi_22_46_ladder_1;
        _1455 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1435 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_454, _455, _456), _1358);
        _1451 = _1435.x * cbModelParam._m0[1u].z;
        _1453 = _1435.y * cbModelParam._m0[1u].z;
        _1455 = _1435.z * cbModelParam._m0[1u].z;
    }
    float _1468 = (((_481 * _431) + _482) * _446) * ((cbModelParam._m0[1u].w * (_1451 - _1349)) + _1349);
    float _1470 = (((_481 * _433) + _482) * _446) * ((cbModelParam._m0[1u].w * (_1453 - _1351)) + _1351);
    float _1472 = (((_481 * _434) + _482) * _446) * ((cbModelParam._m0[1u].w * (_1455 - _1353)) + _1353);
    float _1475 = fma(_1472, cbSceneParam._m0[89u].z, fma(_1470, cbSceneParam._m0[89u].y, _1468 * cbSceneParam._m0[89u].x));
    float _1478 = fma(_1472, cbSceneParam._m0[90u].z, fma(_1470, cbSceneParam._m0[90u].y, _1468 * cbSceneParam._m0[90u].x));
    float _1481 = fma(_1472, cbSceneParam._m0[91u].z, fma(_1470, cbSceneParam._m0[91u].y, _1468 * cbSceneParam._m0[91u].x));
    vec4 _1489 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_364, _365));
    float _1491 = _1489.w;
    float _1503 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1491);
    float _1504 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1491);
    float _1505 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1491);
    uvec4 _1509 = floatBitsToUint(cbInstanceData._m0[_405 + 5u]);
    uint _1511 = _1509.x * 14u;
    uint _1512 = _1511 + 13u;
    float _1519 = _446 + (-1.0);
    float _1524 = (cbLight._m0[_1512].x * _1519) + 1.0;
    float _1525 = (cbLight._m0[_1512].y * _1519) + 1.0;
    float _1526 = (cbLight._m0[_1512].z * _1519) + 1.0;
    float _1527 = (cbLight._m0[_1512].w * _1519) + 1.0;
    uint _1528 = _1511 + 5u;
    float _1534 = isnan(1.0) ? _1525 : (isnan(_1525) ? 1.0 : min(_1525, 1.0));
    uint _1538 = _1511 + 4u;
    float _1548 = isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0));
    uint _1552 = _1511 | 1u;
    float _1563 = dot(vec3(cbLight._m0[_1511].xyz), vec3(_275, _276, _277));
    float _1566 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_275, _276, _277));
    float _3660 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
    float _3671 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1571 = (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * 0.3183098733425140380859375;
    float _1573 = (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * 0.3183098733425140380859375;
    float _1580 = ((cbLight._m0[_1528].x * _1534) * _1573) + (((cbLight._m0[_1538].x * _1503) * _1548) * _1571);
    float _1581 = ((_1534 * cbLight._m0[_1528].y) * _1573) + (((cbLight._m0[_1538].y * _1504) * _1548) * _1571);
    float _1582 = ((_1534 * cbLight._m0[_1528].z) * _1573) + (((cbLight._m0[_1538].z * _1505) * _1548) * _1571);
    uvec4 _1587 = floatBitsToUint(cbLight._m0[_1511 + 12u]);
    bool _1589 = _1587.x == 0u;
    float _1600;
    float _1602;
    float _1604;
    if (_1589)
    {
        _1600 = _1580;
        _1602 = _1581;
        _1604 = _1582;
    }
    else
    {
        uint _1608 = _1511 + 6u;
        float _1624 = (dot(vec3(cbLight._m0[_1511 + 2u].xyz), vec3(_275, _276, _277)) * 0.5) + 0.5;
        float _1625 = _1624 * _1624;
        float _3682 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1627 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
        _1600 = (((cbLight._m0[_1608].x * 0.3183098733425140380859375) * _1626) * _1627) + _1580;
        _1602 = (((cbLight._m0[_1608].y * 0.3183098733425140380859375) * _1626) * _1627) + _1581;
        _1604 = (((cbLight._m0[_1608].z * 0.3183098733425140380859375) * _1626) * _1627) + _1582;
    }
    bool _1607 = _1587.y == 0u;
    float _1645;
    float _1647;
    float _1649;
    if (_1607)
    {
        _1645 = _1600;
        _1647 = _1602;
        _1649 = _1604;
    }
    else
    {
        uint _1818 = _1511 + 7u;
        float _1834 = (dot(vec3(cbLight._m0[_1511 + 3u].xyz), vec3(_275, _276, _277)) * 0.5) + 0.5;
        float _1835 = _1834 * _1834;
        float _3698 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1837 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
        _1645 = (((cbLight._m0[_1818].x * 0.3183098733425140380859375) * _1836) * _1837) + _1600;
        _1647 = (((cbLight._m0[_1818].y * 0.3183098733425140380859375) * _1836) * _1837) + _1602;
        _1649 = (((cbLight._m0[_1818].z * 0.3183098733425140380859375) * _1836) * _1837) + _1604;
    }
    uint _1652 = _1511 + 8u;
    float _1665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1511].w)) * _278) * 0.949999988079071044921875);
    float _1666 = _1665 * _1665;
    float _1667 = cbLight._m0[_1511].x + _356;
    float _1668 = cbLight._m0[_1511].y + _357;
    float _1669 = cbLight._m0[_1511].z + _358;
    float _1673 = inversesqrt(dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669)));
    float _1674 = _1673 * _1667;
    float _1675 = _1673 * _1668;
    float _1676 = _1673 * _1669;
    float _1677 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1511].xyz));
    float _3714 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1680 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _1681 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _1682 = dot(vec3(_275, _276, _277), vec3(_1674, _1675, _1676));
    float _3736 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1685 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _1686 = dot(vec3(cbLight._m0[_1511].xyz), vec3(_1674, _1675, _1676));
    float _3747 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _1690 = _1666 * _1666;
    float _1694 = ((_1685 * _1685) * (_1690 + (-1.0))) + 1.0;
    float _1702 = exp2(log2(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * 5.0);
    float _1703 = 0.959999978542327880859375 - _428;
    float _1705 = 0.959999978542327880859375 - _429;
    float _1706 = 0.959999978542327880859375 - _430;
    float _1713 = 1.0 - _1666;
    float _1724 = (0.5 / (((_1681 * ((_1680 * _1713) + _1666)) + 9.9999999392252902907785028219223e-09) + (((_1681 * _1713) + _1666) * _1680))) * _1680;
    float _3758 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1726 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1690 / ((_1694 * _1694) * 3.141590118408203125));
    uint _1740 = _1511 + 9u;
    float _1751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1552].w)) * _278) * 0.949999988079071044921875);
    float _1752 = _1751 * _1751;
    float _1753 = cbLight._m0[_1552].x + _356;
    float _1754 = cbLight._m0[_1552].y + _357;
    float _1755 = cbLight._m0[_1552].z + _358;
    float _1759 = inversesqrt(dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755)));
    float _1760 = _1759 * _1753;
    float _1761 = _1759 * _1754;
    float _1762 = _1759 * _1755;
    float _1763 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1552].xyz));
    float _3769 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1766 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _1767 = dot(vec3(_275, _276, _277), vec3(_1760, _1761, _1762));
    float _3780 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _1771 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_1760, _1761, _1762));
    float _3791 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1775 = _1752 * _1752;
    float _1779 = ((_1770 * _1770) * (_1775 + (-1.0))) + 1.0;
    float _1786 = exp2(log2(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * 5.0);
    float _1793 = 1.0 - _1752;
    float _1803 = (0.5 / (((_1681 * ((_1766 * _1793) + _1752)) + 9.9999999392252902907785028219223e-09) + (((_1681 * _1793) + _1752) * _1766))) * _1766;
    float _3802 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1805 = (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1775 / ((_1779 * _1779) * 3.141590118408203125));
    float _1815 = (((((_1786 * _1703) + _431) * cbLight._m0[_1740].x) * _1805) * _1534) + ((((cbLight._m0[_1652].x * _1503) * ((_1702 * _1703) + _431)) * _1726) * _1548);
    float _1816 = (((((_1786 * _1705) + _433) * cbLight._m0[_1740].y) * _1805) * _1534) + ((((cbLight._m0[_1652].y * _1504) * ((_1702 * _1705) + _433)) * _1726) * _1548);
    float _1817 = (((((_1786 * _1706) + _434) * cbLight._m0[_1740].z) * _1805) * _1534) + ((((cbLight._m0[_1652].z * _1505) * ((_1702 * _1706) + _434)) * _1726) * _1548);
    float _1879;
    float _1881;
    float _1883;
    if (_1589)
    {
        _1879 = _1815;
        _1881 = _1816;
        _1883 = _1817;
    }
    else
    {
        uint _1885 = _1511 + 2u;
        uint _1889 = _1511 + 10u;
        float _1903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _278) * 0.949999988079071044921875);
        float _1904 = _1903 * _1903;
        float _1905 = cbLight._m0[_1885].x + _356;
        float _1906 = cbLight._m0[_1885].y + _357;
        float _1907 = cbLight._m0[_1885].z + _358;
        float _1911 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
        float _1912 = _1911 * _1905;
        float _1913 = _1911 * _1906;
        float _1914 = _1911 * _1907;
        float _1915 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1885].xyz));
        float _3813 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1918 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1919 = dot(vec3(_275, _276, _277), vec3(_1912, _1913, _1914));
        float _3824 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1922 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1923 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_1912, _1913, _1914));
        float _3835 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1927 = _1904 * _1904;
        float _1931 = ((_1922 * _1922) * (_1927 + (-1.0))) + 1.0;
        float _1938 = exp2(log2(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * 5.0);
        float _1945 = 1.0 - _1904;
        float _1955 = (0.5 / (((_1681 * ((_1918 * _1945) + _1904)) + 9.9999999392252902907785028219223e-09) + (((_1681 * _1945) + _1904) * _1918))) * _1918;
        float _3846 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1957 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1927 / ((_1931 * _1931) * 3.141590118408203125));
        float _1958 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
        _1879 = (((((_1938 * _1703) + _431) * cbLight._m0[_1889].x) * _1957) * _1958) + _1815;
        _1881 = (((((_1938 * _1705) + _433) * cbLight._m0[_1889].y) * _1957) * _1958) + _1816;
        _1883 = (((((_1938 * _1706) + _434) * cbLight._m0[_1889].z) * _1957) * _1958) + _1817;
    }
    float _1993;
    float _1995;
    float _1997;
    if (_1607)
    {
        _1993 = _1879;
        _1995 = _1881;
        _1997 = _1883;
    }
    else
    {
        uint _2004 = _1511 + 3u;
        uint _2008 = _1511 + 11u;
        float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _278) * 0.949999988079071044921875);
        float _2023 = _2022 * _2022;
        float _2024 = cbLight._m0[_2004].x + _356;
        float _2025 = cbLight._m0[_2004].y + _357;
        float _2026 = cbLight._m0[_2004].z + _358;
        float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
        float _2031 = _2030 * _2024;
        float _2032 = _2030 * _2025;
        float _2033 = _2030 * _2026;
        float _2034 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_2004].xyz));
        float _3862 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2037 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _2038 = dot(vec3(_275, _276, _277), vec3(_2031, _2032, _2033));
        float _3873 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2041 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _2042 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2031, _2032, _2033));
        float _3884 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2046 = _2023 * _2023;
        float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
        float _2057 = exp2(log2(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * 5.0);
        float _2064 = 1.0 - _2023;
        float _2074 = (0.5 / (((_1681 * ((_2037 * _2064) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_1681 * _2064) + _2023) * _2037))) * _2037;
        float _3895 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2076 = (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
        float _2077 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
        _1993 = (((((_2057 * _1703) + _431) * cbLight._m0[_2008].x) * _2076) * _2077) + _1879;
        _1995 = (((((_2057 * _1705) + _433) * cbLight._m0[_2008].y) * _2076) * _2077) + _1881;
        _1997 = (((((_2057 * _1706) + _434) * cbLight._m0[_2008].z) * _2076) * _2077) + _1883;
    }
    float _2212;
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    float _2222;
    if (_1509.y == 0u)
    {
        float _2152 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2152;
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2152;
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2152;
        uvec4 _2167 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2168 = _2167.x;
        uint _2179 = uint((float(_2167.y) * floor(float(uint(cbSceneParam._m0[85u].y * _365) / _2168))) + floor(float(uint(cbSceneParam._m0[85u].x * _364) / _2168)));
        float _2189 = (log2(_2155 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2190 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        uint _2193 = uint(isnan(14.0) ? _2190 : (isnan(_2190) ? 14.0 : min(_2190, 14.0)));
        uvec4 _2198 = texelFetch(g_lightClusterGridBuffer, int(((_2193 << 2u) + (_2179 << 6u)) >> 2u));
        uint _2199 = _2198.x;
        uint _2200 = _2167.z;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        if (((((1u << ((_2200 >> 4u) & 15u)) + 4294967295u) & _2199) == 0u) || ((_2200 & 240u) == 0u))
        {
            _2300 = 0.0;
            _2302 = 0.0;
            _2304 = 0.0;
            _2306 = 0.0;
            _2308 = 0.0;
            _2310 = 0.0;
        }
        else
        {
            float _2301;
            float _2303;
            float _2305;
            float _2307;
            float _2309;
            float _2311;
            float _2445 = 0.0;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            uint _2451 = 0u;
            uint _2460;
            bool _2461;
            for (;;)
            {
                _2460 = texelFetch(g_lightClassification, int((((_2193 << 5u) + (_2179 << 9u)) + (_2451 << 2u)) >> 2u)).x;
                _2461 = _2460 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2461)
                {
                    frontier_phi_61_pred = _2445;
                    frontier_phi_61_pred_1 = _2450;
                    frontier_phi_61_pred_2 = _2449;
                    frontier_phi_61_pred_3 = _2448;
                    frontier_phi_61_pred_4 = _2447;
                    frontier_phi_61_pred_5 = _2446;
                }
                else
                {
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    uint _2575;
                    _2569 = _2445;
                    _2570 = _2446;
                    _2571 = _2447;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2460;
                    float _2501;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    for (;;)
                    {
                        uint _2579 = uint(findLSB(_2575)) + (_2451 << 5u);
                        uint _2576 = (_2575 + 4294967295u) & _2575;
                        uint _2581 = _2579 * 48u;
                        vec4 _2595 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2581)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 3u)).x));
                        uint _2601 = (_2579 * 48u) + 4u;
                        vec4 _2614 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2601)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 3u)).x));
                        uint _2620 = (_2579 * 48u) + 8u;
                        vec3 _2631 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x));
                        float _2635 = _2595.x - _2153;
                        float _2636 = _2595.y - _2154;
                        float _2637 = _2595.z - _2155;
                        float _2638 = dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637));
                        float _2641 = inversesqrt(_2638);
                        float _2642 = _2641 * _2635;
                        float _2643 = _2641 * _2636;
                        float _2644 = _2641 * _2637;
                        float _2645 = dot(vec3(_386, _389, _392), vec3(_2642, _2643, _2644));
                        float _2650 = 1.0 - (_2638 * _2595.w);
                        float _3921 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
                        float _2651 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
                        float _2652 = sqrt(_2638) * _2614.w;
                        float _2655 = 1.39999997615814208984375 / (_2652 + 1.39999997615814208984375);
                        float _2656 = _2655 * _2655;
                        float _2659 = ((1.0 - _2656) * _2645) + _2656;
                        float _2662 = _2652 * _2652;
                        float _2666 = ((isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0))) * _2651) / ((_2662 * 0.699999988079071044921875) + 1.0);
                        float _2670 = (-0.0) - _2153;
                        float _2671 = (-0.0) - _2154;
                        float _2672 = (-0.0) - _2155;
                        float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
                        float _2677 = _2676 * _2670;
                        float _2678 = _2676 * _2671;
                        float _2679 = _2676 * _2672;
                        float _2687 = exp2(log2(1.0 / ((_2662 * 3.5) + 5.0)) * 0.25);
                        float _2688 = 1.0 - _462;
                        float _2695 = sqrt(1.0 - ((1.0 - (_2688 * _2688)) * (1.0 - (_2687 * _2687))));
                        float _2696 = _2695 * _2695;
                        float _2697 = _2696 * _2696;
                        float _2698 = _2677 + _2642;
                        float _2699 = _2678 + _2643;
                        float _2700 = _2679 + _2644;
                        float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
                        float _2708 = dot(vec3(_386, _389, _392), vec3(_2677, _2678, _2679));
                        float _3937 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                        float _2711 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
                        float _2712 = dot(vec3(_386, _389, _392), vec3(_2704 * _2698, _2704 * _2699, _2704 * _2700));
                        float _3948 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                        float _2715 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                        float _2719 = ((_2715 * _2715) * (_2697 + (-1.0))) + 1.0;
                        float _2720 = _2655 * _2696;
                        float _2721 = _2720 * _2720;
                        float _2724 = ((1.0 - _2721) * _2645) + _2721;
                        float _3959 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2725 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                        float _2726 = 1.0 - _2696;
                        float _2736 = (0.5 / (((_2725 * ((_2711 * _2726) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2725 * _2726) + _2696) * _2711))) * _2725;
                        float _3970 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2747 = (((_2697 * 3.1415927410125732421875) * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) / ((_2719 * _2719) * ((_2662 * 2.1991131305694580078125) + 3.141590118408203125))) * _2651;
                        _2504 = (_2666 * _2614.x) + _2572;
                        _2505 = (_2666 * _2614.y) + _2573;
                        _2506 = (_2666 * _2614.z) + _2574;
                        _2501 = (_2747 * _2631.x) + _2569;
                        _2502 = (_2747 * _2631.y) + _2570;
                        _2503 = (_2747 * _2631.z) + _2571;
                        if (_2576 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2569 = _2501;
                            _2570 = _2502;
                            _2571 = _2503;
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2576;
                        }
                    }
                    frontier_phi_61_pred = _2501;
                    frontier_phi_61_pred_1 = _2506;
                    frontier_phi_61_pred_2 = _2505;
                    frontier_phi_61_pred_3 = _2504;
                    frontier_phi_61_pred_4 = _2503;
                    frontier_phi_61_pred_5 = _2502;
                }
                _2301 = frontier_phi_61_pred;
                _2311 = frontier_phi_61_pred_1;
                _2309 = frontier_phi_61_pred_2;
                _2307 = frontier_phi_61_pred_3;
                _2305 = frontier_phi_61_pred_4;
                _2303 = frontier_phi_61_pred_5;
                uint _2452 = _2451 + 1u;
                if (_2452 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2445 = _2301;
                    _2446 = _2303;
                    _2447 = _2305;
                    _2448 = _2307;
                    _2449 = _2309;
                    _2450 = _2311;
                    _2451 = _2452;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2300 = _2301;
            _2302 = _2303;
            _2304 = _2305;
            _2306 = _2307;
            _2308 = _2309;
            _2310 = _2311;
        }
        uvec4 _2314 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2315 = _2314.z;
        uint _2317 = (_2315 >> 8u) & 15u;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        if (((4294967295u << _2317) & _2199) == 0u)
        {
            _2413 = _2300;
            _2415 = _2302;
            _2417 = _2304;
            _2419 = _2306;
            _2421 = _2308;
            _2423 = _2310;
        }
        else
        {
            float _2438 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
            float _2439 = _2438 * _2153;
            float _2440 = _2438 * _2154;
            float _2441 = _2438 * _2155;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2317 < ((_2315 >> 12u) & 15u))
            {
                float _2414;
                float _2416;
                float _2418;
                float _2420;
                float _2422;
                float _2424;
                float _2552 = _2300;
                float _2553 = _2302;
                float _2554 = _2304;
                float _2555 = _2306;
                float _2556 = _2308;
                float _2557 = _2310;
                uint _2558 = _2317;
                uint _2567;
                bool _2568;
                for (;;)
                {
                    _2567 = texelFetch(g_lightClassification, int((((_2193 << 5u) + (_2179 << 9u)) + (_2558 << 2u)) >> 2u)).x;
                    _2568 = _2567 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2568)
                    {
                        frontier_phi_67_pred = _2555;
                        frontier_phi_67_pred_1 = _2556;
                        frontier_phi_67_pred_2 = _2557;
                        frontier_phi_67_pred_3 = _2554;
                        frontier_phi_67_pred_4 = _2553;
                        frontier_phi_67_pred_5 = _2552;
                    }
                    else
                    {
                        float _2752;
                        float _2753;
                        float _2754;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _2765 = _2552;
                        float _2766 = _2553;
                        float _2767 = _2554;
                        float _2768 = _2555;
                        float _2769 = _2556;
                        float _2770 = _2557;
                        uint _2771 = _2567;
                        uint _2772;
                        vec4 _2797;
                        float _2798;
                        vec4 _2813;
                        vec3 _2825;
                        vec4 _2841;
                        vec4 _2857;
                        float _2904;
                        bool _2905;
                        for (;;)
                        {
                            uint _2782 = ((_2558 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2771));
                            _2772 = (_2771 + 4294967295u) & _2771;
                            uint _2784 = _2782 * 40u;
                            _2797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 3u)).x));
                            _2798 = _2797.w;
                            uint _2800 = (_2782 * 40u) + 4u;
                            _2813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 3u)).x));
                            uint _2815 = (_2782 * 40u) + 8u;
                            _2825 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x));
                            uint _2828 = (_2782 * 40u) + 16u;
                            _2841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 3u)).x));
                            uint _2844 = (_2782 * 40u) + 20u;
                            _2857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 3u)).x));
                            uint _2860 = (_2782 * 40u) + 24u;
                            vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            uint _2879 = (_2782 * 40u) + 28u;
                            vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            _2904 = fma(_2155, _2892.z, fma(_2154, _2892.y, _2892.x * _2153)) + _2892.w;
                            _2905 = !((fma(_2155, _2873.z, fma(_2154, _2873.y, _2873.x * _2153)) + _2873.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2905)
                            {
                                float _2932 = _2797.x - _2153;
                                float _2933 = _2797.y - _2154;
                                float _2934 = _2797.z - _2155;
                                float _2935 = dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934));
                                float _2938 = inversesqrt(_2935);
                                float _2939 = _2938 * _2932;
                                float _2940 = _2938 * _2933;
                                float _2941 = _2938 * _2934;
                                float _2945 = 1.0 - (_2935 / (_2798 * _2798));
                                float _3981 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                                float _2946 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
                                float _2950 = sqrt(_2935) * _2813.w;
                                float _2952 = 1.39999997615814208984375 / (_2950 + 1.39999997615814208984375);
                                float _2953 = _2952 * _2952;
                                float _2956 = ((1.0 - _2953) * dot(vec3(_2939, _2940, _2941), vec3(_386, _389, _392))) + _2953;
                                float _2959 = _2950 * _2950;
                                float _2963 = (fma(_2155, _2841.z, fma(_2154, _2841.y, _2841.x * _2153)) + _2841.w) / _2904;
                                float _2964 = (fma(_2155, _2857.z, fma(_2154, _2857.y, _2857.x * _2153)) + _2857.w) / _2904;
                                float _2968 = 1.0 - dot(vec2(_2963, _2964), vec2(_2963, _2964));
                                float _3997 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                                float _2969 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                                float _2970 = _2969 * (((isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))) * _2946) / ((_2959 * 0.699999988079071044921875) + 1.0));
                                float _2982 = exp2(log2(1.0 / ((_2959 * 3.5) + 5.0)) * 0.25);
                                float _2983 = 1.0 - _462;
                                float _2990 = sqrt(1.0 - ((1.0 - (_2983 * _2983)) * (1.0 - (_2982 * _2982))));
                                float _2991 = _2990 * _2990;
                                float _2992 = _2991 * _2991;
                                float _2993 = _2939 - _2439;
                                float _2994 = _2940 - _2440;
                                float _2995 = _2941 - _2441;
                                float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
                                float _3003 = dot(vec3(_386, _389, _392), vec3((-0.0) - _2439, (-0.0) - _2440, (-0.0) - _2441));
                                float _4008 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3006 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                                float _3007 = dot(vec3(_386, _389, _392), vec3(_2999 * _2993, _2999 * _2994, _2999 * _2995));
                                float _4019 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                                float _3010 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                                float _3014 = ((_3010 * _3010) * (_2992 + (-1.0))) + 1.0;
                                float _3015 = _2952 * _2991;
                                float _3016 = _3015 * _3015;
                                float _3022 = ((1.0 - _3016) * dot(vec3(_386, _389, _392), vec3(_2939, _2940, _2941))) + _3016;
                                float _4030 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3023 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                                float _3024 = 1.0 - _2991;
                                float _3034 = (0.5 / (((_3023 * ((_3006 * _3024) + _2991)) + 9.9999999392252902907785028219223e-09) + (((_3023 * _3024) + _2991) * _3006))) * _3023;
                                float _4041 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3044 = (_2969 * _2946) * (((_2992 * 3.1415927410125732421875) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) / ((_3014 * _3014) * ((_2959 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3044 * _2825.x;
                                frontier_phi_73_pred_1 = _3044 * _2825.y;
                                frontier_phi_73_pred_2 = _2970 * _2813.z;
                                frontier_phi_73_pred_3 = _2970 * _2813.y;
                                frontier_phi_73_pred_4 = _2970 * _2813.x;
                                frontier_phi_73_pred_5 = _3044 * _2825.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3048 = frontier_phi_73_pred;
                            _3049 = frontier_phi_73_pred_1;
                            _3053 = frontier_phi_73_pred_2;
                            _3052 = frontier_phi_73_pred_3;
                            _3051 = frontier_phi_73_pred_4;
                            _3050 = frontier_phi_73_pred_5;
                            _2755 = _3051 + _2768;
                            _2756 = _3052 + _2769;
                            _2757 = _3053 + _2770;
                            _2752 = _3048 + _2765;
                            _2753 = _3049 + _2766;
                            _2754 = _3050 + _2767;
                            if (_2772 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2765 = _2752;
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2757;
                                _2771 = _2772;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2755;
                        frontier_phi_67_pred_1 = _2756;
                        frontier_phi_67_pred_2 = _2757;
                        frontier_phi_67_pred_3 = _2754;
                        frontier_phi_67_pred_4 = _2753;
                        frontier_phi_67_pred_5 = _2752;
                    }
                    _2420 = frontier_phi_67_pred;
                    _2422 = frontier_phi_67_pred_1;
                    _2424 = frontier_phi_67_pred_2;
                    _2418 = frontier_phi_67_pred_3;
                    _2416 = frontier_phi_67_pred_4;
                    _2414 = frontier_phi_67_pred_5;
                    uint _2559 = _2558 + 1u;
                    if (_2559 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2552 = _2414;
                        _2553 = _2416;
                        _2554 = _2418;
                        _2555 = _2420;
                        _2556 = _2422;
                        _2557 = _2424;
                        _2558 = _2559;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2422;
                frontier_phi_55_56_ladder_1 = _2424;
                frontier_phi_55_56_ladder_2 = _2420;
                frontier_phi_55_56_ladder_3 = _2418;
                frontier_phi_55_56_ladder_4 = _2416;
                frontier_phi_55_56_ladder_5 = _2414;
            }
            else
            {
                frontier_phi_55_56_ladder = _2308;
                frontier_phi_55_56_ladder_1 = _2310;
                frontier_phi_55_56_ladder_2 = _2306;
                frontier_phi_55_56_ladder_3 = _2304;
                frontier_phi_55_56_ladder_4 = _2302;
                frontier_phi_55_56_ladder_5 = _2300;
            }
            _2413 = frontier_phi_55_56_ladder_5;
            _2415 = frontier_phi_55_56_ladder_4;
            _2417 = frontier_phi_55_56_ladder_3;
            _2419 = frontier_phi_55_56_ladder_2;
            _2421 = frontier_phi_55_56_ladder;
            _2423 = frontier_phi_55_56_ladder_1;
        }
        float _2428 = isnan(1.0) ? _446 : (isnan(_446) ? 1.0 : min(_446, 1.0));
        _2212 = (_2428 * _2419) + _1645;
        _2214 = (_2428 * _2421) + _1647;
        _2216 = (_2428 * _2423) + _1649;
        _2218 = ((_2413 * _431) * _2428) + _1993;
        _2220 = ((_2415 * _433) * _2428) + _1995;
        _2222 = ((_2417 * _434) * _2428) + _1997;
    }
    else
    {
        _2212 = _1645;
        _2214 = _1647;
        _2216 = _1649;
        _2218 = _1993;
        _2220 = _1995;
        _2222 = _1997;
    }
    float _4057 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _4068 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _4079 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    uint _2242 = _405 + 6u;
    float _2250 = _364 / cbSceneParam._m0[86u].x;
    float _2251 = _365 / cbSceneParam._m0[86u].y;
    vec4 _2265 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2250, _2251, (log2((isnan(cbSceneParam._m0[77u].w) ? _298 : (isnan(_298) ? cbSceneParam._m0[77u].w : min(_298, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2267 = _2265.x;
    float _2268 = _2265.y;
    float _2269 = _2265.z;
    float _2270 = _2265.w;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    if (_298 > cbSceneParam._m0[78u].w)
    {
        float _2325 = isnan(_298) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _298 : min(cbSceneParam._m0[80u].w, _298));
        float _2326 = _2325 / _298;
        float _2337 = _2326 * _349;
        float _2338 = _350 * _2326;
        float _2339 = (-0.0) - _2338;
        float _2341 = _2326 * _351;
        float _2343 = (cbSceneParam._m0[77u].w * _2339) / _2325;
        float _2344 = _2343 + cbSceneParam._m0[79u].w;
        float _2345 = cbSceneParam._m0[79u].w - _2338;
        float _2351 = sqrt(((_2337 * _2337) + (_2338 * _2338)) + (_2341 * _2341));
        float _2354 = (1.0 - (cbSceneParam._m0[77u].w / _2325)) * _2351;
        float _2359 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2361 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2514;
        if (abs((_2339 - _2343) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2514 = ((((_2344 > 0.0) ? exp2(_2359 * _2344) : (2.0 - exp2(_2361 * _2344))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2354;
        }
        else
        {
            float _2474 = 1.0 / cbSceneParam._m0[80u].x;
            float _2475 = isnan(_2345) ? _2344 : (isnan(_2344) ? _2345 : max(_2344, _2345));
            float _2476 = isnan(_2345) ? _2344 : (isnan(_2344) ? _2345 : min(_2344, _2345));
            float _2485 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : min(_2475, 0.0));
            float _2486 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : min(_2476, 0.0));
            _2514 = ((abs(_2351 / _2339) * cbSceneParam._m0[80u].y) * ((((_2485 - _2486) * 2.0) - ((exp2(_2359 * (isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0)))) - exp2(_2359 * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0))))) * _2474)) - ((exp2(_2361 * _2485) - exp2(_2361 * _2486)) * _2474))) + (_2354 * cbSceneParam._m0[80u].z);
        }
        vec4 _2516 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2250, _2251, 1.0), 0.0);
        float _2525 = exp2((_2514 * (-1.44269502162933349609375)) * (1.0 - _2516.w));
        float _2526 = log2(_2525);
        float _2542 = log2(_2270);
        _2363 = (exp2(_2542 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2526 * cbSceneParam._m0[78u].x)) * _2516.x) / cbSceneParam._m0[78u].x)) + _2267;
        _2365 = (exp2(_2542 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2526 * cbSceneParam._m0[78u].y)) * _2516.y) / cbSceneParam._m0[78u].y)) + _2268;
        _2367 = (exp2(_2542 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2526 * cbSceneParam._m0[78u].z)) * _2516.z) / cbSceneParam._m0[78u].z)) + _2269;
        _2369 = _2525 * _2270;
    }
    else
    {
        _2363 = _2267;
        _2365 = _2268;
        _2367 = _2269;
        _2369 = _2270;
    }
    float _2381 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2382 = _2381 == 3.0;
    float _2383 = log2(_2369);
    float _2390 = exp2(_2383 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_2212 + ((isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0))) * _446))) + ((_2218 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _1256)) * cbPerFrame._m0[3u].x));
    float _2391 = exp2(_2383 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2214 + ((isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0))) * _446))) + ((_2220 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _1256)) * cbPerFrame._m0[3u].x));
    float _2392 = exp2(_2383 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_2216 + ((isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0))) * _446))) + ((_2222 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _1256)) * cbPerFrame._m0[3u].x));
    float _2401 = (_2381 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2401 * (_2382 ? _2390 : (_2390 + (cbSceneParam._m0[72u].w * _2363)));
    SV_Target.y = _2401 * (_2382 ? _2391 : (_2391 + (cbSceneParam._m0[72u].w * _2365)));
    SV_Target.z = _2401 * (_2382 ? _2392 : (_2392 + (cbSceneParam._m0[72u].w * _2367)));
    SV_Target.w = cbInstanceData._m0[_2242].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2242].w;
}


