#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _840;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = cbMtdParam._m0[10u].x + _244.x;
    vec4 _263 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3460 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))));
    float _283 = fma(_280, _194 * NORMAL.x, fma(_273, _201 * TANGENT.x, (_187 * _180) * _271));
    float _286 = fma(_280, _194 * NORMAL.y, fma(_273, _201 * TANGENT.y, (_187 * _181) * _271));
    float _289 = fma(_280, _194 * NORMAL.z, fma(_273, _201 * TANGENT.z, (_187 * _182) * _271));
    float _293 = inversesqrt(dot(vec3(_283, _286, _289), vec3(_283, _286, _289)));
    float _294 = _293 * _283;
    float _295 = _293 * _286;
    float _296 = _293 * _289;
    float _3471 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _297 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3493 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3504 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3515 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _301 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _317 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _358 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _368 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _358);
    float _369 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _358);
    float _370 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _358);
    float _374 = inversesqrt(dot(vec3(_368, _369, _370), vec3(_368, _369, _370)));
    float _375 = _368 * _374;
    float _376 = _369 * _374;
    float _377 = _370 * _374;
    float _383 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _384 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _405 = fma(_296, cbSceneParam._m0[5u].z, fma(_295, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _294));
    float _408 = fma(_296, cbSceneParam._m0[6u].z, fma(_295, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _294));
    float _411 = fma(_296, cbSceneParam._m0[7u].z, fma(_295, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _294));
    uint _424 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = (_424 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _433 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_427].x;
    float _434 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_427].y;
    float _435 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_427].z;
    float _3526 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _439 = 1.0 - _301;
    float _440 = _436 * _439;
    float _441 = _437 * _439;
    float _442 = _438 * _439;
    float _447 = (_436 + (-0.039999999105930328369140625)) * _301;
    float _448 = (_437 + (-0.039999999105930328369140625)) * _301;
    float _449 = (_438 + (-0.039999999105930328369140625)) * _301;
    float _450 = _447 + 0.039999999105930328369140625;
    float _452 = _448 + 0.039999999105930328369140625;
    float _453 = _449 + 0.039999999105930328369140625;
    vec4 _462 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _383, cbSceneParam._m0[86u].y * _384));
    float _465 = _462.x * TEXCOORD.z;
    float _466 = dot(vec3(_294, _295, _296), vec3(_375, _376, _377));
    float _469 = _466 * 2.0;
    float _473 = (_469 * _294) - _375;
    float _474 = (_469 * _295) - _376;
    float _475 = (_469 * _296) - _377;
    float _479 = abs(dot(vec3(_375, _376, _377), vec3(_294, _295, _296)));
    float _3559 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _481 = sqrt(_297);
    float _494 = exp2((_481 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_481 * 3.0));
    float _500 = (1.0 - _494) * ((_481 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _501 = _494 * _481;
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _839;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _564 = fma(_537, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _529));
        float _568 = fma(_537, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _529));
        float _572 = fma(_537, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _529));
        float _597 = _529 + _294;
        float _598 = _533 + _295;
        float _599 = _537 + _296;
        float _609 = fma(_599, cbModelParam._m0[26u].z, fma(_598, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _597)) - _564;
        float _610 = fma(_599, cbModelParam._m0[27u].z, fma(_598, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _597)) - _568;
        float _611 = fma(_599, cbModelParam._m0[28u].z, fma(_598, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _597)) - _572;
        float _615 = inversesqrt(dot(vec3(_609, _610, _611), vec3(_609, _610, _611)));
        float _628 = ((_615 * _609) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_564 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _629 = ((_615 * _610) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_568 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _630 = ((_615 * _611) / cbModelParam._m0[34u].z) + ((((((_572 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        float _667 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _668 = _667 * (_633.x + (-0.5));
        float _669 = _667 * (_633.y + (-0.5));
        float _670 = _667 * (_633.z + (-0.5));
        float _677 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_640.x + (-0.5));
        float _679 = _677 * (_640.y + (-0.5));
        float _680 = _677 * (_640.z + (-0.5));
        float _687 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_647.x + (-0.5));
        float _689 = _687 * (_647.y + (-0.5));
        float _690 = _687 * (_647.z + (-0.5));
        float _697 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_654.x + (-0.5));
        float _699 = _697 * (_654.y + (-0.5));
        float _700 = _697 * (_654.z + (-0.5));
        float _701 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _702 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _703 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _704 = _668 * 0.5;
        float _705 = _678 * 0.5;
        float _706 = _688 * 0.5;
        float _707 = dot(vec3(_704, _705, _706), vec3(_704, _705, _706));
        float _712 = (_707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_707);
        float _721 = (dot(vec3(_294, _295, _296), vec3(_712 * _704, _712 * _705, _712 * _706)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _731 = sqrt(((_705 * _705) + (_704 * _704)) + (_706 * _706)) / (_701 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _733 = _732 * 2.0;
        float _737 = (1.0 - _732) / (_732 + 1.0);
        float _3607 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _747 = ((((1.0 - _738) * (_733 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_733 + 1.0))) + _738) * _701;
        float _748 = _669 * 0.5;
        float _749 = _679 * 0.5;
        float _750 = _689 * 0.5;
        float _751 = dot(vec3(_748, _749, _750), vec3(_748, _749, _750));
        float _756 = (_751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_751);
        float _764 = (dot(vec3(_294, _295, _296), vec3(_756 * _748, _756 * _749, _756 * _750)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _773 = sqrt(((_749 * _749) + (_748 * _748)) + (_750 * _750)) / (_702 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _775 = _774 * 2.0;
        float _779 = (1.0 - _774) / (_774 + 1.0);
        float _3640 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _789 = ((((1.0 - _780) * (_775 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_775 + 1.0))) + _780) * _702;
        float _790 = _670 * 0.5;
        float _791 = _680 * 0.5;
        float _792 = _690 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _806 = (dot(vec3(_294, _295, _296), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _815 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_703 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3673 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_817 + 1.0))) + _822) * _703;
        _839 = _670;
        _841 = _669;
        _842 = _668;
        _843 = _680;
        _844 = _679;
        _845 = _678;
        _846 = _690;
        _847 = _689;
        _848 = _688;
        _849 = _703;
        _850 = _702;
        _851 = _701;
        _852 = cbModelParam._m0[36u].z * (isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0)));
        _853 = cbModelParam._m0[36u].z * (isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)));
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
    }
    else
    {
        _839 = _840;
        _841 = _840;
        _842 = _840;
        _843 = _840;
        _844 = _840;
        _845 = _840;
        _846 = _840;
        _847 = _840;
        _848 = _840;
        _849 = _840;
        _850 = _840;
        _851 = _840;
        _852 = 0.0;
        _853 = 0.0;
        _854 = 0.0;
    }
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _880 = fma(_537, cbModelParam._m0[30u].z, fma(_533, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _529));
        float _884 = fma(_537, cbModelParam._m0[31u].z, fma(_533, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _529));
        float _888 = fma(_537, cbModelParam._m0[32u].z, fma(_533, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _529));
        float _911 = _529 + _294;
        float _912 = _533 + _295;
        float _913 = _537 + _296;
        float _923 = fma(_913, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _911)) - _880;
        float _924 = fma(_913, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _911)) - _884;
        float _925 = fma(_913, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _911)) - _888;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_880 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_884 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[35u].z) + ((((((_888 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _979 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_946.x + (-0.5));
        float _981 = _979 * (_946.y + (-0.5));
        float _982 = _979 * (_946.z + (-0.5));
        float _989 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_953.x + (-0.5));
        float _991 = _989 * (_953.y + (-0.5));
        float _992 = _989 * (_953.z + (-0.5));
        float _999 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_960.x + (-0.5));
        float _1001 = _999 * (_960.y + (-0.5));
        float _1002 = _999 * (_960.z + (-0.5));
        float _1009 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_967.x + (-0.5));
        float _1011 = _1009 * (_967.y + (-0.5));
        float _1012 = _1009 * (_967.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = _980 * 0.5;
        float _1017 = _990 * 0.5;
        float _1018 = _1000 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_294, _295, _296), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3736 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1043 + 1.0))) + _1048) * _1013;
        float _1058 = _981 * 0.5;
        float _1059 = _991 * 0.5;
        float _1060 = _1001 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_294, _295, _296), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3769 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1085 + 1.0))) + _1090) * _1014;
        float _1100 = _982 * 0.5;
        float _1101 = _992 * 0.5;
        float _1102 = _1002 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_294, _295, _296), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3802 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1127 + 1.0))) + _1132) * _1015;
        _1149 = _982;
        _1150 = _981;
        _1151 = _980;
        _1152 = _992;
        _1153 = _991;
        _1154 = _990;
        _1155 = _1002;
        _1156 = _1001;
        _1157 = _1000;
        _1158 = _1015;
        _1159 = _1014;
        _1160 = _1013;
        _1161 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1162 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1163 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
    }
    else
    {
        _1149 = _840;
        _1150 = _840;
        _1151 = _840;
        _1152 = _840;
        _1153 = _840;
        _1154 = _840;
        _1155 = _840;
        _1156 = _840;
        _1157 = _840;
        _1158 = _840;
        _1159 = _840;
        _1160 = _840;
        _1161 = 0.0;
        _1162 = 0.0;
        _1163 = 0.0;
    }
    float _1173 = (cbModelParam._m0[1u].x * (_1161 - _852)) + _852;
    float _1174 = (cbModelParam._m0[1u].x * (_1162 - _853)) + _853;
    float _1175 = (cbModelParam._m0[1u].x * (_1163 - _854)) + _854;
    float _1196 = fma(_1175, cbSceneParam._m0[89u].z, fma(_1174, cbSceneParam._m0[89u].y, _1173 * cbSceneParam._m0[89u].x));
    float _1199 = fma(_1175, cbSceneParam._m0[90u].z, fma(_1174, cbSceneParam._m0[90u].y, _1173 * cbSceneParam._m0[90u].x));
    float _1202 = fma(_1175, cbSceneParam._m0[91u].z, fma(_1174, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1173));
    float _1217 = _473 * 0.5;
    float _1218 = _474 * 0.5;
    float _1219 = _475 * 0.5;
    float _1220 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1151, _1154, _1157, _1160));
    float _1223 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1150, _1153, _1156, _1159));
    float _1226 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1149, _1152, _1155, _1158));
    float _1260;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1233 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_839, _843, _846, _849));
        float _1237 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_841, _844, _847, _850));
        float _1241 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_842, _845, _848, _851));
        float _1248 = dot(vec4(cbModelParam._m0[39u]), vec4(_1217, _1218, _1219, 1.0));
        _1260 = dot(vec3(isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1248) ? 0.0 : (isnan(0.0) ? _1248 : max(0.0, _1248))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1260 = 1.0;
    }
    float _1271;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1262 = dot(vec4(cbModelParam._m0[40u]), vec4(_1217, _1218, _1219, 1.0));
        _1271 = dot(vec3(isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1262) ? 0.0 : (isnan(0.0) ? _1262 : max(0.0, _1262))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1271 = 1.0;
    }
    float _1275 = (_1271 * cbModelParam._m0[1u].x) + (_1260 * (1.0 - cbModelParam._m0[1u].x));
    float _1285 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _297);
    float _1286 = isnan(_1285) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1285 : min(cbModelParam._m0[25u].z, _1285));
    float _1368;
    float _1370;
    float _1372;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1335 = fma(_537, cbModelParam._m0[13u].z, fma(_533, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529)) + cbModelParam._m0[13u].w;
        float _1339 = fma(_537, cbModelParam._m0[14u].z, fma(_533, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529)) + cbModelParam._m0[14u].w;
        float _1343 = fma(_537, cbModelParam._m0[15u].z, fma(_533, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529)) + cbModelParam._m0[15u].w;
        float _1346 = fma(_475, cbModelParam._m0[13u].z, fma(_474, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _473));
        float _1349 = fma(_475, cbModelParam._m0[14u].z, fma(_474, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _473));
        float _1352 = fma(_475, cbModelParam._m0[15u].z, fma(_474, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _473));
        float _1380;
        if (_1346 > 0.0)
        {
            _1380 = abs((1.0 - _1335) / _1346);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1335 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1380 = frontier_phi_14_12_ladder;
        }
        float _1556;
        if (_1349 > 0.0)
        {
            _1556 = abs((1.0 - _1339) / _1349);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1339 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1556 = frontier_phi_23_19_ladder;
        }
        float _1852;
        if (_1352 > 0.0)
        {
            _1852 = abs((1.0 - _1343) / _1352);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1343 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1852 = frontier_phi_35_30_ladder;
        }
        float _1854 = isnan(_1556) ? _1380 : (isnan(_1380) ? _1556 : min(_1380, _1556));
        float _1855 = isnan(_1852) ? _1854 : (isnan(_1854) ? _1852 : min(_1854, _1852));
        float _1859 = (_1855 * _1346) + _1335;
        float _1860 = (_1855 * _1349) + _1339;
        float _1861 = (_1855 * _1352) + _1343;
        float _1862 = _1855 * 9.9999997473787516355514526367188e-05;
        float _1864 = (-1.0) - _1862;
        float _1866 = _1862 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1861 > _1866) || ((_1861 < _1864) || ((_1860 > _1866) || ((_1860 < _1864) || ((_1859 < _1864) || (_1859 > _1866))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2006 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1861, cbModelParam._m0[9u].z, fma(_1860, cbModelParam._m0[9u].y, _1859 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1861, cbModelParam._m0[10u].z, fma(_1860, cbModelParam._m0[10u].y, _1859 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1861, cbModelParam._m0[11u].z, fma(_1860, cbModelParam._m0[11u].y, _1859 * cbModelParam._m0[11u].x))), _1286);
            frontier_phi_13_35_ladder = _2006.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2006.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2006.x * cbModelParam._m0[1u].y;
        }
        _1368 = frontier_phi_13_35_ladder_2;
        _1370 = frontier_phi_13_35_ladder_1;
        _1372 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1356 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_473, _474, _475), _1286);
        _1368 = _1356.x * cbModelParam._m0[1u].y;
        _1370 = _1356.y * cbModelParam._m0[1u].y;
        _1372 = _1356.z * cbModelParam._m0[1u].y;
    }
    float _1376 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _297);
    float _1377 = isnan(_1376) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1376 : min(cbModelParam._m0[25u].w, _1376));
    float _1470;
    float _1472;
    float _1474;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1434 = fma(_537, cbModelParam._m0[21u].z, fma(_533, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529)) + cbModelParam._m0[21u].w;
        float _1438 = fma(_537, cbModelParam._m0[22u].z, fma(_533, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529)) + cbModelParam._m0[22u].w;
        float _1442 = fma(_537, cbModelParam._m0[23u].z, fma(_533, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529)) + cbModelParam._m0[23u].w;
        float _1445 = fma(_475, cbModelParam._m0[21u].z, fma(_474, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _473));
        float _1448 = fma(_475, cbModelParam._m0[22u].z, fma(_474, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _473));
        float _1451 = fma(_475, cbModelParam._m0[23u].z, fma(_474, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _473));
        float _1561;
        if (_1445 > 0.0)
        {
            _1561 = abs((1.0 - _1434) / _1445);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1434 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1561 = frontier_phi_25_21_ladder;
        }
        float _1879;
        if (_1448 > 0.0)
        {
            _1879 = abs((1.0 - _1438) / _1448);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1438 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1879 = frontier_phi_37_32_ladder;
        }
        float _2217;
        if (_1451 > 0.0)
        {
            _2217 = abs((1.0 - _1442) / _1451);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1442 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2217 = frontier_phi_47_44_ladder;
        }
        float _2219 = isnan(_1879) ? _1561 : (isnan(_1561) ? _1879 : min(_1561, _1879));
        float _2220 = isnan(_2217) ? _2219 : (isnan(_2219) ? _2217 : min(_2219, _2217));
        float _2224 = (_2220 * _1445) + _1434;
        float _2225 = (_2220 * _1448) + _1438;
        float _2226 = (_2220 * _1451) + _1442;
        float _2227 = _2220 * 9.9999997473787516355514526367188e-05;
        float _2228 = (-1.0) - _2227;
        float _2230 = _2227 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2226 > _2230) || ((_2226 < _2228) || ((_2225 > _2230) || ((_2225 < _2228) || ((_2224 < _2228) || (_2224 > _2230))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2348 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2226, cbModelParam._m0[17u].z, fma(_2225, cbModelParam._m0[17u].y, _2224 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2226, cbModelParam._m0[18u].z, fma(_2225, cbModelParam._m0[18u].y, _2224 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2226, cbModelParam._m0[19u].z, fma(_2225, cbModelParam._m0[19u].y, _2224 * cbModelParam._m0[19u].x))), _1377);
            frontier_phi_22_47_ladder = _2348.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2348.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2348.x * cbModelParam._m0[1u].z;
        }
        _1470 = frontier_phi_22_47_ladder_2;
        _1472 = frontier_phi_22_47_ladder_1;
        _1474 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1454 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_473, _474, _475), _1377);
        _1470 = _1454.x * cbModelParam._m0[1u].z;
        _1472 = _1454.y * cbModelParam._m0[1u].z;
        _1474 = _1454.z * cbModelParam._m0[1u].z;
    }
    float _1487 = (((_500 * _450) + _501) * _465) * ((cbModelParam._m0[1u].w * (_1470 - _1368)) + _1368);
    float _1489 = (((_500 * _452) + _501) * _465) * ((cbModelParam._m0[1u].w * (_1472 - _1370)) + _1370);
    float _1491 = (((_500 * _453) + _501) * _465) * ((cbModelParam._m0[1u].w * (_1474 - _1372)) + _1372);
    float _1494 = fma(_1491, cbSceneParam._m0[89u].z, fma(_1489, cbSceneParam._m0[89u].y, _1487 * cbSceneParam._m0[89u].x));
    float _1497 = fma(_1491, cbSceneParam._m0[90u].z, fma(_1489, cbSceneParam._m0[90u].y, _1487 * cbSceneParam._m0[90u].x));
    float _1500 = fma(_1491, cbSceneParam._m0[91u].z, fma(_1489, cbSceneParam._m0[91u].y, _1487 * cbSceneParam._m0[91u].x));
    float _1535 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1539 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1543 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1547 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1548 = _1535 / _1547;
    float _1549 = _1539 / _1547;
    float _1550 = _1543 / _1547;
    float _1697;
    float _1698;
    float _1699;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1577 = ((uint(_1550 > cbSceneParam._m0[59u].y) + uint(_1550 > cbSceneParam._m0[59u].x)) + uint(_1550 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1578 = _1577 + 43u;
        uint _1586 = _1577 + 44u;
        uint _1594 = _1577 + 45u;
        uint _1602 = _1577 + 46u;
        float _1613 = fma(_1547, cbSceneParam._m0[_1578].w, fma(_1543, cbSceneParam._m0[_1578].z, fma(_1539, cbSceneParam._m0[_1578].y, _1535 * cbSceneParam._m0[_1578].x)));
        float _1617 = fma(_1547, cbSceneParam._m0[_1586].w, fma(_1543, cbSceneParam._m0[_1586].z, fma(_1539, cbSceneParam._m0[_1586].y, _1535 * cbSceneParam._m0[_1586].x)));
        float _1625 = fma(_1547, cbSceneParam._m0[_1602].w, fma(_1543, cbSceneParam._m0[_1602].z, fma(_1539, cbSceneParam._m0[_1602].y, _1535 * cbSceneParam._m0[_1602].x)));
        float _1630 = cbSceneParam._m0[33u].z * _1625;
        float _1632 = cbSceneParam._m0[33u].w * _1625;
        float _1635 = fma(_1547, cbSceneParam._m0[_1594].w, fma(_1543, cbSceneParam._m0[_1594].z, fma(_1539, cbSceneParam._m0[_1594].y, _1535 * cbSceneParam._m0[_1594].x))) / _1625;
        float _1683 = (cbSceneParam._m0[33u].x - sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550))) * cbSceneParam._m0[33u].y;
        float _3928 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1690 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1630 + _1613) / _1625, (_1632 + _1617) / _1625), _1635), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1632 + _1613) / _1625, (_1617 - _1630) / _1625), _1635), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1613 - _1630) / _1625, (_1617 - _1632) / _1625), _1635), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1613 - _1632) / _1625, (_1630 + _1617) / _1625), _1635), 0.0)).x), vec4(0.25)));
        _1697 = 1.0 - (_1690 * cbSceneParam._m0[34u].x);
        _1698 = 1.0 - (_1690 * cbSceneParam._m0[34u].y);
        _1699 = 1.0 - (_1690 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1697 = 1.0;
        _1698 = 1.0;
        _1699 = 1.0;
    }
    float _1763;
    float _1765;
    float _1767;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1751 = fma(_1547, cbSceneParam._m0[63u].w, fma(_1543, cbSceneParam._m0[63u].z, fma(_1539, cbSceneParam._m0[63u].y, _1535 * cbSceneParam._m0[63u].x)));
        float _1752 = fma(_1547, cbSceneParam._m0[60u].w, fma(_1543, cbSceneParam._m0[60u].z, fma(_1539, cbSceneParam._m0[60u].y, _1535 * cbSceneParam._m0[60u].x))) / _1751;
        float _1753 = fma(_1547, cbSceneParam._m0[61u].w, fma(_1543, cbSceneParam._m0[61u].z, fma(_1539, cbSceneParam._m0[61u].y, _1535 * cbSceneParam._m0[61u].x))) / _1751;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1752 >= cbSceneParam._m0[64u].x) && (_1753 >= cbSceneParam._m0[64u].y)) && (_1752 <= cbSceneParam._m0[64u].z)) && (_1753 <= cbSceneParam._m0[64u].w))
        {
            float _1892 = fma(_1547, cbSceneParam._m0[62u].w, fma(_1543, cbSceneParam._m0[62u].z, fma(_1539, cbSceneParam._m0[62u].y, _1535 * cbSceneParam._m0[62u].x))) / _1751;
            float _1896 = isnan(cbSceneParam._m0[41u].w) ? _1892 : (isnan(_1892) ? cbSceneParam._m0[41u].w : max(_1892, cbSceneParam._m0[41u].w));
            float _1939 = (cbSceneParam._m0[33u].x - sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550))) * cbSceneParam._m0[33u].y;
            float _3944 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
            float _1946 = (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1752, cbSceneParam._m0[33u].w + _1753), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1752, _1753 - cbSceneParam._m0[33u].z), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1752 - cbSceneParam._m0[33u].z, _1753 - cbSceneParam._m0[33u].w), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1752 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1753), _1896), 0.0)).x), vec4(0.25)));
            float _1950 = 1.0 - (_1946 * cbSceneParam._m0[34u].x);
            float _1951 = 1.0 - (_1946 * cbSceneParam._m0[34u].y);
            float _1952 = 1.0 - (_1946 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1952) ? _1699 : (isnan(_1699) ? _1952 : min(_1699, _1952));
            frontier_phi_34_33_ladder_1 = isnan(_1951) ? _1698 : (isnan(_1698) ? _1951 : min(_1698, _1951));
            frontier_phi_34_33_ladder_2 = isnan(_1950) ? _1697 : (isnan(_1697) ? _1950 : min(_1697, _1950));
        }
        else
        {
            frontier_phi_34_33_ladder = _1699;
            frontier_phi_34_33_ladder_1 = _1698;
            frontier_phi_34_33_ladder_2 = _1697;
        }
        _1763 = frontier_phi_34_33_ladder_2;
        _1765 = frontier_phi_34_33_ladder_1;
        _1767 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1763 = _1697;
        _1765 = _1698;
        _1767 = _1699;
    }
    uvec4 _1772 = floatBitsToUint(cbInstanceData._m0[_424 + 5u]);
    uint _1774 = _1772.x * 14u;
    uint _1775 = _1774 + 13u;
    float _1782 = _465 + (-1.0);
    float _1787 = (cbLight._m0[_1775].x * _1782) + 1.0;
    float _1788 = (cbLight._m0[_1775].y * _1782) + 1.0;
    float _1789 = (cbLight._m0[_1775].z * _1782) + 1.0;
    float _1790 = (cbLight._m0[_1775].w * _1782) + 1.0;
    uint _1791 = _1774 + 5u;
    float _1797 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
    uint _1801 = _1774 + 4u;
    float _1811 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1815 = _1774 | 1u;
    float _1826 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_294, _295, _296));
    float _1829 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_294, _295, _296));
    float _3980 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _3991 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1834 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.3183098733425140380859375;
    float _1836 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.3183098733425140380859375;
    float _1843 = ((cbLight._m0[_1791].x * _1797) * _1836) + (((cbLight._m0[_1801].x * _1763) * _1811) * _1834);
    float _1844 = ((_1797 * cbLight._m0[_1791].y) * _1836) + (((cbLight._m0[_1801].y * _1765) * _1811) * _1834);
    float _1845 = ((_1797 * cbLight._m0[_1791].z) * _1836) + (((cbLight._m0[_1801].z * _1767) * _1811) * _1834);
    uvec4 _1849 = floatBitsToUint(cbLight._m0[_1774 + 12u]);
    bool _1851 = _1849.x == 0u;
    float _1953;
    float _1955;
    float _1957;
    if (_1851)
    {
        _1953 = _1843;
        _1955 = _1844;
        _1957 = _1845;
    }
    else
    {
        uint _1961 = _1774 + 6u;
        float _1977 = (dot(vec3(cbLight._m0[_1774 + 2u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _1978 = _1977 * _1977;
        float _4002 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1979 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1980 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _1953 = (((cbLight._m0[_1961].x * 0.3183098733425140380859375) * _1979) * _1980) + _1843;
        _1955 = (((cbLight._m0[_1961].y * 0.3183098733425140380859375) * _1979) * _1980) + _1844;
        _1957 = (((cbLight._m0[_1961].z * 0.3183098733425140380859375) * _1979) * _1980) + _1845;
    }
    bool _1960 = _1849.y == 0u;
    float _2015;
    float _2017;
    float _2019;
    if (_1960)
    {
        _2015 = _1953;
        _2017 = _1955;
        _2019 = _1957;
    }
    else
    {
        uint _2188 = _1774 + 7u;
        float _2204 = (dot(vec3(cbLight._m0[_1774 + 3u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _2205 = _2204 * _2204;
        float _4018 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2206 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2207 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2015 = (((cbLight._m0[_2188].x * 0.3183098733425140380859375) * _2206) * _2207) + _1953;
        _2017 = (((cbLight._m0[_2188].y * 0.3183098733425140380859375) * _2206) * _2207) + _1955;
        _2019 = (((cbLight._m0[_2188].z * 0.3183098733425140380859375) * _2206) * _2207) + _1957;
    }
    uint _2022 = _1774 + 8u;
    float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1774].w)) * _297) * 0.949999988079071044921875);
    float _2036 = _2035 * _2035;
    float _2037 = cbLight._m0[_1774].x + _375;
    float _2038 = cbLight._m0[_1774].y + _376;
    float _2039 = cbLight._m0[_1774].z + _377;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2044 = _2043 * _2037;
    float _2045 = _2043 * _2038;
    float _2046 = _2043 * _2039;
    float _2047 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1774].xyz));
    float _4034 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _2051 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _2052 = dot(vec3(_294, _295, _296), vec3(_2044, _2045, _2046));
    float _4056 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _2056 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_2044, _2045, _2046));
    float _4067 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2060 = _2036 * _2036;
    float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
    float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0);
    float _2073 = 0.959999978542327880859375 - _447;
    float _2075 = 0.959999978542327880859375 - _448;
    float _2076 = 0.959999978542327880859375 - _449;
    float _2083 = 1.0 - _2036;
    float _2094 = (0.5 / (((_2051 * ((_2050 * _2083) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2083) + _2036) * _2050))) * _2050;
    float _4078 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2096 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
    uint _2110 = _1774 + 9u;
    float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _297) * 0.949999988079071044921875);
    float _2122 = _2121 * _2121;
    float _2123 = cbLight._m0[_1815].x + _375;
    float _2124 = cbLight._m0[_1815].y + _376;
    float _2125 = cbLight._m0[_1815].z + _377;
    float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
    float _2130 = _2129 * _2123;
    float _2131 = _2129 * _2124;
    float _2132 = _2129 * _2125;
    float _2133 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1815].xyz));
    float _4089 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _2137 = dot(vec3(_294, _295, _296), vec3(_2130, _2131, _2132));
    float _4100 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_2130, _2131, _2132));
    float _4111 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2122 * _2122;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2156 = exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0);
    float _2163 = 1.0 - _2122;
    float _2173 = (0.5 / (((_2051 * ((_2136 * _2163) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2163) + _2122) * _2136))) * _2136;
    float _4122 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2175 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    float _2185 = (((((_2156 * _2073) + _450) * cbLight._m0[_2110].x) * _2175) * _1797) + ((((cbLight._m0[_2022].x * _1763) * ((_2072 * _2073) + _450)) * _2096) * _1811);
    float _2186 = (((((_2156 * _2075) + _452) * cbLight._m0[_2110].y) * _2175) * _1797) + ((((cbLight._m0[_2022].y * _1765) * ((_2072 * _2075) + _452)) * _2096) * _1811);
    float _2187 = (((((_2156 * _2076) + _453) * cbLight._m0[_2110].z) * _2175) * _1797) + ((((cbLight._m0[_2022].z * _1767) * ((_2072 * _2076) + _453)) * _2096) * _1811);
    float _2243;
    float _2245;
    float _2247;
    if (_1851)
    {
        _2243 = _2185;
        _2245 = _2186;
        _2247 = _2187;
    }
    else
    {
        uint _2249 = _1774 + 2u;
        uint _2253 = _1774 + 10u;
        float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _297) * 0.949999988079071044921875);
        float _2268 = _2267 * _2267;
        float _2269 = cbLight._m0[_2249].x + _375;
        float _2270 = cbLight._m0[_2249].y + _376;
        float _2271 = cbLight._m0[_2249].z + _377;
        float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
        float _2276 = _2275 * _2269;
        float _2277 = _2275 * _2270;
        float _2278 = _2275 * _2271;
        float _2279 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2249].xyz));
        float _4133 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2283 = dot(vec3(_294, _295, _296), vec3(_2276, _2277, _2278));
        float _4144 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2287 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2276, _2277, _2278));
        float _4155 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2291 = _2268 * _2268;
        float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
        float _2302 = exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0);
        float _2309 = 1.0 - _2268;
        float _2319 = (0.5 / (((_2051 * ((_2282 * _2309) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2309) + _2268) * _2282))) * _2282;
        float _4166 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2321 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
        float _2322 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2243 = (((((_2302 * _2073) + _450) * cbLight._m0[_2253].x) * _2321) * _2322) + _2185;
        _2245 = (((((_2302 * _2075) + _452) * cbLight._m0[_2253].y) * _2321) * _2322) + _2186;
        _2247 = (((((_2302 * _2076) + _453) * cbLight._m0[_2253].z) * _2321) * _2322) + _2187;
    }
    float _2353;
    float _2355;
    float _2357;
    if (_1960)
    {
        _2353 = _2243;
        _2355 = _2245;
        _2357 = _2247;
    }
    else
    {
        uint _2364 = _1774 + 3u;
        uint _2368 = _1774 + 11u;
        float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _297) * 0.949999988079071044921875);
        float _2383 = _2382 * _2382;
        float _2384 = cbLight._m0[_2364].x + _375;
        float _2385 = cbLight._m0[_2364].y + _376;
        float _2386 = cbLight._m0[_2364].z + _377;
        float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
        float _2391 = _2390 * _2384;
        float _2392 = _2390 * _2385;
        float _2393 = _2390 * _2386;
        float _2394 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2364].xyz));
        float _4182 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2398 = dot(vec3(_294, _295, _296), vec3(_2391, _2392, _2393));
        float _4193 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2402 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2391, _2392, _2393));
        float _4204 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2406 = _2383 * _2383;
        float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
        float _2417 = exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0);
        float _2424 = 1.0 - _2383;
        float _2434 = (0.5 / (((_2051 * ((_2397 * _2424) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2424) + _2383) * _2397))) * _2397;
        float _4215 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2436 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
        float _2437 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2353 = (((((_2417 * _2073) + _450) * cbLight._m0[_2368].x) * _2436) * _2437) + _2243;
        _2355 = (((((_2417 * _2075) + _452) * cbLight._m0[_2368].y) * _2436) * _2437) + _2245;
        _2357 = (((((_2417 * _2076) + _453) * cbLight._m0[_2368].z) * _2436) * _2437) + _2247;
    }
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    if (_1772.y == 0u)
    {
        uvec4 _2458 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2459 = _2458.x;
        uint _2470 = uint((float(_2458.y) * floor(float(uint(cbSceneParam._m0[85u].y * _384) / _2459))) + floor(float(uint(cbSceneParam._m0[85u].x * _383) / _2459)));
        float _2480 = (log2(_1550 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2481 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        uint _2484 = uint(isnan(14.0) ? _2481 : (isnan(_2481) ? 14.0 : min(_2481, 14.0)));
        uvec4 _2489 = texelFetch(g_lightClusterGridBuffer, int(((_2484 << 2u) + (_2470 << 6u)) >> 2u));
        uint _2490 = _2489.x;
        uint _2491 = _2458.z;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        if (((((1u << ((_2491 >> 4u) & 15u)) + 4294967295u) & _2490) == 0u) || ((_2491 & 240u) == 0u))
        {
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
        }
        else
        {
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            uint _2721 = 0u;
            uint _2730;
            bool _2731;
            for (;;)
            {
                _2730 = texelFetch(g_lightClassification, int((((_2484 << 5u) + (_2470 << 9u)) + (_2721 << 2u)) >> 2u)).x;
                _2731 = _2730 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2731)
                {
                    frontier_phi_66_pred = _2720;
                    frontier_phi_66_pred_1 = _2719;
                    frontier_phi_66_pred_2 = _2718;
                    frontier_phi_66_pred_3 = _2717;
                    frontier_phi_66_pred_4 = _2716;
                    frontier_phi_66_pred_5 = _2715;
                }
                else
                {
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    uint _2845;
                    _2839 = _2715;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2720;
                    _2845 = _2730;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    for (;;)
                    {
                        uint _2849 = uint(findLSB(_2845)) + (_2721 << 5u);
                        uint _2846 = (_2845 + 4294967295u) & _2845;
                        uint _2851 = _2849 * 48u;
                        vec4 _2865 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 3u)).x));
                        uint _2871 = (_2849 * 48u) + 4u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 3u)).x));
                        uint _2890 = (_2849 * 48u) + 8u;
                        vec3 _2901 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x));
                        float _2905 = _2865.x - _1548;
                        float _2906 = _2865.y - _1549;
                        float _2907 = _2865.z - _1550;
                        float _2908 = dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907));
                        float _2911 = inversesqrt(_2908);
                        float _2912 = _2911 * _2905;
                        float _2913 = _2911 * _2906;
                        float _2914 = _2911 * _2907;
                        float _2915 = dot(vec3(_405, _408, _411), vec3(_2912, _2913, _2914));
                        float _2920 = 1.0 - (_2908 * _2865.w);
                        float _4241 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2921 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2922 = sqrt(_2908) * _2884.w;
                        float _2925 = 1.39999997615814208984375 / (_2922 + 1.39999997615814208984375);
                        float _2926 = _2925 * _2925;
                        float _2929 = ((1.0 - _2926) * _2915) + _2926;
                        float _2932 = _2922 * _2922;
                        float _2936 = ((isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0))) * _2921) / ((_2932 * 0.699999988079071044921875) + 1.0);
                        float _2940 = (-0.0) - _1548;
                        float _2941 = (-0.0) - _1549;
                        float _2942 = (-0.0) - _1550;
                        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                        float _2947 = _2946 * _2940;
                        float _2948 = _2946 * _2941;
                        float _2949 = _2946 * _2942;
                        float _2956 = exp2(log2(1.0 / ((_2932 * 3.5) + 5.0)) * 0.25);
                        float _2957 = 1.0 - _481;
                        float _2964 = sqrt(1.0 - ((1.0 - (_2957 * _2957)) * (1.0 - (_2956 * _2956))));
                        float _2965 = _2964 * _2964;
                        float _2966 = _2965 * _2965;
                        float _2967 = _2947 + _2912;
                        float _2968 = _2948 + _2913;
                        float _2969 = _2949 + _2914;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2977 = dot(vec3(_405, _408, _411), vec3(_2947, _2948, _2949));
                        float _4257 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _2981 = dot(vec3(_405, _408, _411), vec3(_2973 * _2967, _2973 * _2968, _2973 * _2969));
                        float _4268 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2984 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2988 = ((_2984 * _2984) * (_2966 + (-1.0))) + 1.0;
                        float _2989 = _2925 * _2965;
                        float _2990 = _2989 * _2989;
                        float _2993 = ((1.0 - _2990) * _2915) + _2990;
                        float _4279 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2994 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2995 = 1.0 - _2965;
                        float _3005 = (0.5 / (((_2994 * ((_2980 * _2995) + _2965)) + 9.9999999392252902907785028219223e-09) + (((_2994 * _2995) + _2965) * _2980))) * _2994;
                        float _4290 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3016 = (((_2966 * 3.1415927410125732421875) * (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) / ((_2988 * _2988) * ((_2932 * 2.1991131305694580078125) + 3.141590118408203125))) * _2921;
                        _2774 = (_2936 * _2884.x) + _2842;
                        _2775 = (_2936 * _2884.y) + _2843;
                        _2776 = (_2936 * _2884.z) + _2844;
                        _2771 = (_3016 * _2901.x) + _2839;
                        _2772 = (_3016 * _2901.y) + _2840;
                        _2773 = (_3016 * _2901.z) + _2841;
                        if (_2846 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2846;
                        }
                    }
                    frontier_phi_66_pred = _2776;
                    frontier_phi_66_pred_1 = _2775;
                    frontier_phi_66_pred_2 = _2774;
                    frontier_phi_66_pred_3 = _2773;
                    frontier_phi_66_pred_4 = _2772;
                    frontier_phi_66_pred_5 = _2771;
                }
                _2581 = frontier_phi_66_pred;
                _2579 = frontier_phi_66_pred_1;
                _2577 = frontier_phi_66_pred_2;
                _2575 = frontier_phi_66_pred_3;
                _2573 = frontier_phi_66_pred_4;
                _2571 = frontier_phi_66_pred_5;
                uint _2722 = _2721 + 1u;
                if (_2722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2715 = _2571;
                    _2716 = _2573;
                    _2717 = _2575;
                    _2718 = _2577;
                    _2719 = _2579;
                    _2720 = _2581;
                    _2721 = _2722;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
        }
        uvec4 _2584 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2585 = _2584.z;
        uint _2587 = (_2585 >> 8u) & 15u;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((4294967295u << _2587) & _2490) == 0u)
        {
            _2683 = _2570;
            _2685 = _2572;
            _2687 = _2574;
            _2689 = _2576;
            _2691 = _2578;
            _2693 = _2580;
        }
        else
        {
            float _2708 = inversesqrt(dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550)));
            float _2709 = _2708 * _1548;
            float _2710 = _2708 * _1549;
            float _2711 = _2708 * _1550;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2587 < ((_2585 >> 12u) & 15u))
            {
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2822 = _2570;
                float _2823 = _2572;
                float _2824 = _2574;
                float _2825 = _2576;
                float _2826 = _2578;
                float _2827 = _2580;
                uint _2828 = _2587;
                uint _2837;
                bool _2838;
                for (;;)
                {
                    _2837 = texelFetch(g_lightClassification, int((((_2484 << 5u) + (_2470 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                    _2838 = _2837 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2838)
                    {
                        frontier_phi_72_pred = _2827;
                        frontier_phi_72_pred_1 = _2826;
                        frontier_phi_72_pred_2 = _2825;
                        frontier_phi_72_pred_3 = _2824;
                        frontier_phi_72_pred_4 = _2823;
                        frontier_phi_72_pred_5 = _2822;
                    }
                    else
                    {
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3034 = _2822;
                        float _3035 = _2823;
                        float _3036 = _2824;
                        float _3037 = _2825;
                        float _3038 = _2826;
                        float _3039 = _2827;
                        uint _3040 = _2837;
                        uint _3041;
                        vec4 _3066;
                        float _3067;
                        vec4 _3082;
                        vec3 _3094;
                        vec4 _3110;
                        vec4 _3126;
                        float _3173;
                        bool _3174;
                        for (;;)
                        {
                            uint _3051 = ((_2828 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3040));
                            _3041 = (_3040 + 4294967295u) & _3040;
                            uint _3053 = _3051 * 40u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            _3067 = _3066.w;
                            uint _3069 = (_3051 * 40u) + 4u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3084 = (_3051 * 40u) + 8u;
                            _3094 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x));
                            uint _3097 = (_3051 * 40u) + 16u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3113 = (_3051 * 40u) + 20u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3129 = (_3051 * 40u) + 24u;
                            vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3148 = (_3051 * 40u) + 28u;
                            vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            _3173 = fma(_1550, _3161.z, fma(_1549, _3161.y, _3161.x * _1548)) + _3161.w;
                            _3174 = !((fma(_1550, _3142.z, fma(_1549, _3142.y, _3142.x * _1548)) + _3142.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3174)
                            {
                                float _3201 = _3066.x - _1548;
                                float _3202 = _3066.y - _1549;
                                float _3203 = _3066.z - _1550;
                                float _3204 = dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203));
                                float _3207 = inversesqrt(_3204);
                                float _3208 = _3207 * _3201;
                                float _3209 = _3207 * _3202;
                                float _3210 = _3207 * _3203;
                                float _3214 = 1.0 - (_3204 / (_3067 * _3067));
                                float _4301 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3219 = sqrt(_3204) * _3082.w;
                                float _3221 = 1.39999997615814208984375 / (_3219 + 1.39999997615814208984375);
                                float _3222 = _3221 * _3221;
                                float _3225 = ((1.0 - _3222) * dot(vec3(_3208, _3209, _3210), vec3(_405, _408, _411))) + _3222;
                                float _3228 = _3219 * _3219;
                                float _3232 = (fma(_1550, _3110.z, fma(_1549, _3110.y, _3110.x * _1548)) + _3110.w) / _3173;
                                float _3233 = (fma(_1550, _3126.z, fma(_1549, _3126.y, _3126.x * _1548)) + _3126.w) / _3173;
                                float _3237 = 1.0 - dot(vec2(_3232, _3233), vec2(_3232, _3233));
                                float _4317 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3238 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3239 = _3238 * (((isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))) * _3215) / ((_3228 * 0.699999988079071044921875) + 1.0));
                                float _3251 = exp2(log2(1.0 / ((_3228 * 3.5) + 5.0)) * 0.25);
                                float _3252 = 1.0 - _481;
                                float _3259 = sqrt(1.0 - ((1.0 - (_3252 * _3252)) * (1.0 - (_3251 * _3251))));
                                float _3260 = _3259 * _3259;
                                float _3261 = _3260 * _3260;
                                float _3262 = _3208 - _2709;
                                float _3263 = _3209 - _2710;
                                float _3264 = _3210 - _2711;
                                float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                                float _3272 = dot(vec3(_405, _408, _411), vec3((-0.0) - _2709, (-0.0) - _2710, (-0.0) - _2711));
                                float _4328 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3275 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3276 = dot(vec3(_405, _408, _411), vec3(_3268 * _3262, _3268 * _3263, _3268 * _3264));
                                float _4339 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3279 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3283 = ((_3279 * _3279) * (_3261 + (-1.0))) + 1.0;
                                float _3284 = _3221 * _3260;
                                float _3285 = _3284 * _3284;
                                float _3291 = ((1.0 - _3285) * dot(vec3(_405, _408, _411), vec3(_3208, _3209, _3210))) + _3285;
                                float _4350 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3293 = 1.0 - _3260;
                                float _3303 = (0.5 / (((_3292 * ((_3275 * _3293) + _3260)) + 9.9999999392252902907785028219223e-09) + (((_3292 * _3293) + _3260) * _3275))) * _3292;
                                float _4361 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3313 = (_3238 * _3215) * (((_3261 * 3.1415927410125732421875) * (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) / ((_3283 * _3283) * ((_3228 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3239 * _3082.y;
                                frontier_phi_78_pred_1 = _3239 * _3082.x;
                                frontier_phi_78_pred_2 = _3313 * _3094.z;
                                frontier_phi_78_pred_3 = _3313 * _3094.y;
                                frontier_phi_78_pred_4 = _3313 * _3094.x;
                                frontier_phi_78_pred_5 = _3239 * _3082.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3321 = frontier_phi_78_pred;
                            _3320 = frontier_phi_78_pred_1;
                            _3319 = frontier_phi_78_pred_2;
                            _3318 = frontier_phi_78_pred_3;
                            _3317 = frontier_phi_78_pred_4;
                            _3322 = frontier_phi_78_pred_5;
                            _3024 = _3320 + _3037;
                            _3025 = _3321 + _3038;
                            _3026 = _3322 + _3039;
                            _3021 = _3317 + _3034;
                            _3022 = _3318 + _3035;
                            _3023 = _3319 + _3036;
                            if (_3041 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3041;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3026;
                        frontier_phi_72_pred_1 = _3025;
                        frontier_phi_72_pred_2 = _3024;
                        frontier_phi_72_pred_3 = _3023;
                        frontier_phi_72_pred_4 = _3022;
                        frontier_phi_72_pred_5 = _3021;
                    }
                    _2694 = frontier_phi_72_pred;
                    _2692 = frontier_phi_72_pred_1;
                    _2690 = frontier_phi_72_pred_2;
                    _2688 = frontier_phi_72_pred_3;
                    _2686 = frontier_phi_72_pred_4;
                    _2684 = frontier_phi_72_pred_5;
                    uint _2829 = _2828 + 1u;
                    if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2822 = _2684;
                        _2823 = _2686;
                        _2824 = _2688;
                        _2825 = _2690;
                        _2826 = _2692;
                        _2827 = _2694;
                        _2828 = _2829;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2694;
                frontier_phi_60_61_ladder_1 = _2692;
                frontier_phi_60_61_ladder_2 = _2688;
                frontier_phi_60_61_ladder_3 = _2686;
                frontier_phi_60_61_ladder_4 = _2684;
                frontier_phi_60_61_ladder_5 = _2690;
            }
            else
            {
                frontier_phi_60_61_ladder = _2580;
                frontier_phi_60_61_ladder_1 = _2578;
                frontier_phi_60_61_ladder_2 = _2574;
                frontier_phi_60_61_ladder_3 = _2572;
                frontier_phi_60_61_ladder_4 = _2570;
                frontier_phi_60_61_ladder_5 = _2576;
            }
            _2683 = frontier_phi_60_61_ladder_4;
            _2685 = frontier_phi_60_61_ladder_3;
            _2687 = frontier_phi_60_61_ladder_2;
            _2689 = frontier_phi_60_61_ladder_5;
            _2691 = frontier_phi_60_61_ladder_1;
            _2693 = frontier_phi_60_61_ladder;
        }
        float _2698 = isnan(1.0) ? _465 : (isnan(_465) ? 1.0 : min(_465, 1.0));
        _2503 = (_2698 * _2689) + _2015;
        _2505 = (_2698 * _2691) + _2017;
        _2507 = (_2698 * _2693) + _2019;
        _2509 = ((_2683 * _450) * _2698) + _2353;
        _2511 = ((_2685 * _452) * _2698) + _2355;
        _2513 = ((_2687 * _453) * _2698) + _2357;
    }
    else
    {
        _2503 = _2015;
        _2505 = _2017;
        _2507 = _2019;
        _2509 = _2353;
        _2511 = _2355;
        _2513 = _2357;
    }
    float _4377 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4388 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _4399 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    uint _2533 = _424 + 6u;
    float _2541 = _383 / cbSceneParam._m0[86u].x;
    float _2542 = _384 / cbSceneParam._m0[86u].y;
    vec4 _2556 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2541, _2542, (log2((isnan(cbSceneParam._m0[77u].w) ? _317 : (isnan(_317) ? cbSceneParam._m0[77u].w : min(_317, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2558 = _2556.x;
    float _2559 = _2556.y;
    float _2560 = _2556.z;
    float _2561 = _2556.w;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    if (_317 > cbSceneParam._m0[78u].w)
    {
        float _2595 = isnan(_317) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _317 : min(cbSceneParam._m0[80u].w, _317));
        float _2596 = _2595 / _317;
        float _2607 = _2596 * _368;
        float _2608 = _369 * _2596;
        float _2609 = (-0.0) - _2608;
        float _2611 = _2596 * _370;
        float _2613 = (cbSceneParam._m0[77u].w * _2609) / _2595;
        float _2614 = _2613 + cbSceneParam._m0[79u].w;
        float _2615 = cbSceneParam._m0[79u].w - _2608;
        float _2621 = sqrt(((_2607 * _2607) + (_2608 * _2608)) + (_2611 * _2611));
        float _2624 = (1.0 - (cbSceneParam._m0[77u].w / _2595)) * _2621;
        float _2629 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2631 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2784;
        if (abs((_2609 - _2613) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2784 = ((((_2614 > 0.0) ? exp2(_2629 * _2614) : (2.0 - exp2(_2631 * _2614))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2624;
        }
        else
        {
            float _2744 = 1.0 / cbSceneParam._m0[80u].x;
            float _2745 = isnan(_2615) ? _2614 : (isnan(_2614) ? _2615 : max(_2614, _2615));
            float _2746 = isnan(_2615) ? _2614 : (isnan(_2614) ? _2615 : min(_2614, _2615));
            float _2755 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : min(_2745, 0.0));
            float _2756 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : min(_2746, 0.0));
            _2784 = ((abs(_2621 / _2609) * cbSceneParam._m0[80u].y) * ((((_2755 - _2756) * 2.0) - ((exp2(_2629 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0)))) - exp2(_2629 * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))))) * _2744)) - ((exp2(_2631 * _2755) - exp2(_2631 * _2756)) * _2744))) + (_2624 * cbSceneParam._m0[80u].z);
        }
        vec4 _2786 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2541, _2542, 1.0), 0.0);
        float _2795 = exp2((_2784 * (-1.44269502162933349609375)) * (1.0 - _2786.w));
        float _2796 = log2(_2795);
        float _2812 = log2(_2561);
        _2633 = (exp2(_2812 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2796 * cbSceneParam._m0[78u].x)) * _2786.x) / cbSceneParam._m0[78u].x)) + _2558;
        _2635 = (exp2(_2812 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2796 * cbSceneParam._m0[78u].y)) * _2786.y) / cbSceneParam._m0[78u].y)) + _2559;
        _2637 = (exp2(_2812 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2796 * cbSceneParam._m0[78u].z)) * _2786.z) / cbSceneParam._m0[78u].z)) + _2560;
        _2639 = _2795 * _2561;
    }
    else
    {
        _2633 = _2558;
        _2635 = _2559;
        _2637 = _2560;
        _2639 = _2561;
    }
    float _2651 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2652 = _2651 == 3.0;
    float _2653 = log2(_2639);
    float _2660 = exp2(_2653 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2503 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _465))) + ((_2509 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1275)) * cbPerFrame._m0[3u].x));
    float _2661 = exp2(_2653 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2505 + ((isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0))) * _465))) + ((_2511 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1275)) * cbPerFrame._m0[3u].x));
    float _2662 = exp2(_2653 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2507 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _465))) + ((_2513 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1275)) * cbPerFrame._m0[3u].x));
    float _2671 = (_2651 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2671 * (_2652 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2633)));
    SV_Target.y = _2671 * (_2652 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2635)));
    SV_Target.z = _2671 * (_2652 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2637)));
    SV_Target.w = cbInstanceData._m0[_2533].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2533].w;
}


