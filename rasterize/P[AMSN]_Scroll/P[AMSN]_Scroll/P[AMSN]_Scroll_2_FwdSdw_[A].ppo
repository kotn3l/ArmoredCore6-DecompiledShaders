#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _898;
float _3571;
float _3572;
float _3573;
float _3574;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = ((cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.x;
    float _231 = ((cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.y;
    vec4 _244 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_230 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_231 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _230) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _231) + cbTextureTilingScale._m0[2u].w));
    float _268 = cbMtdParam._m0[10u].x + _264.x;
    vec4 _280 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _230) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _231) + cbTextureTilingScale._m0[1u].w));
    float _284 = _280.z;
    float _288 = (_280.x * 2.0) + (-1.0);
    float _290 = (_280.y * 2.0) + (-1.0);
    float _291 = dot(vec2(_288, _290), vec2(_288, _290));
    float _3583 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _297 = sqrt(1.0 - (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))));
    float _300 = fma(_297, _203 * NORMAL.x, fma(_290, _210 * TANGENT.x, (_196 * _189) * _288));
    float _303 = fma(_297, _203 * NORMAL.y, fma(_290, _210 * TANGENT.y, (_196 * _190) * _288));
    float _306 = fma(_297, _203 * NORMAL.z, fma(_290, _210 * TANGENT.z, (_196 * _191) * _288));
    float _310 = inversesqrt(dot(vec3(_300, _303, _306), vec3(_300, _303, _306)));
    float _311 = _310 * _300;
    float _312 = _310 * _303;
    float _313 = _310 * _306;
    float _3594 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _314 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3616 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3627 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3638 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _318 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _334 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _375 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _385 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _375);
    float _386 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _375);
    float _387 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _375);
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _392 = _385 * _391;
    float _393 = _386 * _391;
    float _394 = _387 * _391;
    vec4 _399 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _401 = _399.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _577 = sqrt(((_385 * _385) + (_386 * _386)) + (_387 * _387));
        float _583 = (cbMatDynParam._m0[5u].x * _577) + cbMatDynParam._m0[5u].y;
        float _3649 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        float _584 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _588 = (cbMatDynParam._m0[5u].z * _577) + cbMatDynParam._m0[5u].w;
        float _3660 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) - _584)) + _584) < ((_401 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _413 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _414 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _434 = fma(_313, cbSceneParam._m0[5u].z, fma(_312, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _311));
    float _437 = fma(_313, cbSceneParam._m0[6u].z, fma(_312, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _311));
    float _440 = fma(_313, cbSceneParam._m0[7u].z, fma(_312, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _311));
    uint _453 = uint(roundEven(NORMAL.w)) * 13u;
    uint _455 = _453 + 9u;
    uint _456 = _455 + uint(cbMatDynParam._m0[0u].w);
    float _462 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_456].x;
    float _463 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_456].y;
    float _464 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_456].z;
    float _3671 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _3682 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _466 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _468 = 1.0 - _318;
    float _469 = _465 * _468;
    float _470 = _466 * _468;
    float _471 = _467 * _468;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _318;
    float _477 = (_466 + (-0.039999999105930328369140625)) * _318;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _318;
    float _479 = _476 + 0.039999999105930328369140625;
    float _481 = _477 + 0.039999999105930328369140625;
    float _482 = _478 + 0.039999999105930328369140625;
    vec4 _491 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _413, cbSceneParam._m0[86u].y * _414));
    float _494 = _491.x * TEXCOORD.z;
    float _495 = dot(vec3(_311, _312, _313), vec3(_392, _393, _394));
    float _498 = _495 * 2.0;
    float _502 = (_498 * _311) - _392;
    float _503 = (_498 * _312) - _393;
    float _504 = (_498 * _313) - _394;
    float _508 = abs(dot(vec3(_392, _393, _394), vec3(_311, _312, _313)));
    float _3704 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _510 = sqrt(_314);
    float _523 = exp2((_510 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_510 * 3.0));
    float _529 = (1.0 - _523) * ((_510 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _530 = _523 * _510;
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _897;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _622 = fma(_566, cbModelParam._m0[26u].z, fma(_562, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _558));
        float _626 = fma(_566, cbModelParam._m0[27u].z, fma(_562, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _558));
        float _630 = fma(_566, cbModelParam._m0[28u].z, fma(_562, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _558));
        float _655 = _558 + _311;
        float _656 = _562 + _312;
        float _657 = _566 + _313;
        float _667 = fma(_657, cbModelParam._m0[26u].z, fma(_656, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _655)) - _622;
        float _668 = fma(_657, cbModelParam._m0[27u].z, fma(_656, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _655)) - _626;
        float _669 = fma(_657, cbModelParam._m0[28u].z, fma(_656, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _655)) - _630;
        float _673 = inversesqrt(dot(vec3(_667, _668, _669), vec3(_667, _668, _669)));
        float _686 = ((_673 * _667) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_622 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _687 = ((_673 * _668) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_626 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _688 = ((_673 * _669) / cbModelParam._m0[34u].z) + ((((((_630 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        float _725 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_691.x + (-0.5));
        float _727 = _725 * (_691.y + (-0.5));
        float _728 = _725 * (_691.z + (-0.5));
        float _735 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_698.x + (-0.5));
        float _737 = _735 * (_698.y + (-0.5));
        float _738 = _735 * (_698.z + (-0.5));
        float _745 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_705.x + (-0.5));
        float _747 = _745 * (_705.y + (-0.5));
        float _748 = _745 * (_705.z + (-0.5));
        float _755 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_712.x + (-0.5));
        float _757 = _755 * (_712.y + (-0.5));
        float _758 = _755 * (_712.z + (-0.5));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = _726 * 0.5;
        float _763 = _736 * 0.5;
        float _764 = _746 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _779 = (dot(vec3(_311, _312, _313), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _789 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _791 = _790 * 2.0;
        float _795 = (1.0 - _790) / (_790 + 1.0);
        float _3752 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _805 = ((((1.0 - _796) * (_791 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_791 + 1.0))) + _796) * _759;
        float _806 = _727 * 0.5;
        float _807 = _737 * 0.5;
        float _808 = _747 * 0.5;
        float _809 = dot(vec3(_806, _807, _808), vec3(_806, _807, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _822 = (dot(vec3(_311, _312, _313), vec3(_814 * _806, _814 * _807, _814 * _808)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _831 = sqrt(((_807 * _807) + (_806 * _806)) + (_808 * _808)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3785 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_833 + 1.0))) + _838) * _760;
        float _848 = _728 * 0.5;
        float _849 = _738 * 0.5;
        float _850 = _748 * 0.5;
        float _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
        float _856 = (_851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_851);
        float _864 = (dot(vec3(_311, _312, _313), vec3(_856 * _848, _856 * _849, _856 * _850)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _873 = sqrt(((_849 * _849) + (_848 * _848)) + (_850 * _850)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3818 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_875 + 1.0))) + _880) * _761;
        _897 = _728;
        _899 = _727;
        _900 = _726;
        _901 = _738;
        _902 = _737;
        _903 = _736;
        _904 = _748;
        _905 = _747;
        _906 = _746;
        _907 = _761;
        _908 = _760;
        _909 = _759;
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)));
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
    }
    else
    {
        _897 = _898;
        _899 = _898;
        _900 = _898;
        _901 = _898;
        _902 = _898;
        _903 = _898;
        _904 = _898;
        _905 = _898;
        _906 = _898;
        _907 = _898;
        _908 = _898;
        _909 = _898;
        _910 = 0.0;
        _911 = 0.0;
        _912 = 0.0;
    }
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _941 = fma(_566, cbModelParam._m0[30u].z, fma(_562, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _558));
        float _945 = fma(_566, cbModelParam._m0[31u].z, fma(_562, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _558));
        float _949 = fma(_566, cbModelParam._m0[32u].z, fma(_562, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _558));
        float _972 = _558 + _311;
        float _973 = _562 + _312;
        float _974 = _566 + _313;
        float _984 = fma(_974, cbModelParam._m0[30u].z, fma(_973, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _972)) - _941;
        float _985 = fma(_974, cbModelParam._m0[31u].z, fma(_973, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _972)) - _945;
        float _986 = fma(_974, cbModelParam._m0[32u].z, fma(_973, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _972)) - _949;
        float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
        float _1003 = ((_990 * _984) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_941 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_990 * _985) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_945 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_990 * _986) / cbModelParam._m0[35u].z) + ((((((_949 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        float _1040 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1007.x + (-0.5));
        float _1042 = _1040 * (_1007.y + (-0.5));
        float _1043 = _1040 * (_1007.z + (-0.5));
        float _1050 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1014.x + (-0.5));
        float _1052 = _1050 * (_1014.y + (-0.5));
        float _1053 = _1050 * (_1014.z + (-0.5));
        float _1060 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1021.x + (-0.5));
        float _1062 = _1060 * (_1021.y + (-0.5));
        float _1063 = _1060 * (_1021.z + (-0.5));
        float _1070 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1028.x + (-0.5));
        float _1072 = _1070 * (_1028.y + (-0.5));
        float _1073 = _1070 * (_1028.z + (-0.5));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = _1041 * 0.5;
        float _1078 = _1051 * 0.5;
        float _1079 = _1061 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_311, _312, _313), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3881 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1104 + 1.0))) + _1109) * _1074;
        float _1119 = _1042 * 0.5;
        float _1120 = _1052 * 0.5;
        float _1121 = _1062 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_311, _312, _313), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3914 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1146 + 1.0))) + _1151) * _1075;
        float _1161 = _1043 * 0.5;
        float _1162 = _1053 * 0.5;
        float _1163 = _1063 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_311, _312, _313), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3947 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1188 + 1.0))) + _1193) * _1076;
        _1210 = _1043;
        _1211 = _1042;
        _1212 = _1041;
        _1213 = _1053;
        _1214 = _1052;
        _1215 = _1051;
        _1216 = _1063;
        _1217 = _1062;
        _1218 = _1061;
        _1219 = _1076;
        _1220 = _1075;
        _1221 = _1074;
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
    }
    else
    {
        _1210 = _898;
        _1211 = _898;
        _1212 = _898;
        _1213 = _898;
        _1214 = _898;
        _1215 = _898;
        _1216 = _898;
        _1217 = _898;
        _1218 = _898;
        _1219 = _898;
        _1220 = _898;
        _1221 = _898;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _910)) + _910;
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _911)) + _911;
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _912)) + _912;
    float _1257 = fma(_1236, cbSceneParam._m0[89u].z, fma(_1235, cbSceneParam._m0[89u].y, _1234 * cbSceneParam._m0[89u].x));
    float _1260 = fma(_1236, cbSceneParam._m0[90u].z, fma(_1235, cbSceneParam._m0[90u].y, _1234 * cbSceneParam._m0[90u].x));
    float _1263 = fma(_1236, cbSceneParam._m0[91u].z, fma(_1235, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1234));
    float _1278 = _502 * 0.5;
    float _1279 = _503 * 0.5;
    float _1280 = _504 * 0.5;
    float _1281 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1284 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1287 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1321;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1294 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_897, _901, _904, _907));
        float _1298 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_899, _902, _905, _908));
        float _1302 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_900, _903, _906, _909));
        float _1309 = dot(vec4(cbModelParam._m0[39u]), vec4(_1278, _1279, _1280, 1.0));
        _1321 = dot(vec3(isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1309) ? 0.0 : (isnan(0.0) ? _1309 : max(0.0, _1309))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1321 = 1.0;
    }
    float _1332;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1323 = dot(vec4(cbModelParam._m0[40u]), vec4(_1278, _1279, _1280, 1.0));
        _1332 = dot(vec3(isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1332 = 1.0;
    }
    float _1336 = (_1332 * cbModelParam._m0[1u].x) + (_1321 * (1.0 - cbModelParam._m0[1u].x));
    float _1346 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _314);
    float _1347 = isnan(_1346) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1346 : min(cbModelParam._m0[25u].z, _1346));
    float _1429;
    float _1431;
    float _1433;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1396 = fma(_566, cbModelParam._m0[13u].z, fma(_562, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558)) + cbModelParam._m0[13u].w;
        float _1400 = fma(_566, cbModelParam._m0[14u].z, fma(_562, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558)) + cbModelParam._m0[14u].w;
        float _1404 = fma(_566, cbModelParam._m0[15u].z, fma(_562, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558)) + cbModelParam._m0[15u].w;
        float _1407 = fma(_504, cbModelParam._m0[13u].z, fma(_503, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502));
        float _1410 = fma(_504, cbModelParam._m0[14u].z, fma(_503, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502));
        float _1413 = fma(_504, cbModelParam._m0[15u].z, fma(_503, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502));
        float _1441;
        if (_1407 > 0.0)
        {
            _1441 = abs((1.0 - _1396) / _1407);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1396 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1441 = frontier_phi_17_15_ladder;
        }
        float _1616;
        if (_1410 > 0.0)
        {
            _1616 = abs((1.0 - _1400) / _1410);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1400 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1616 = frontier_phi_26_22_ladder;
        }
        float _1912;
        if (_1413 > 0.0)
        {
            _1912 = abs((1.0 - _1404) / _1413);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1404 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1912 = frontier_phi_38_33_ladder;
        }
        float _1914 = isnan(_1616) ? _1441 : (isnan(_1441) ? _1616 : min(_1441, _1616));
        float _1915 = isnan(_1912) ? _1914 : (isnan(_1914) ? _1912 : min(_1914, _1912));
        float _1919 = (_1915 * _1407) + _1396;
        float _1920 = (_1915 * _1410) + _1400;
        float _1921 = (_1915 * _1413) + _1404;
        float _1922 = _1915 * 9.9999997473787516355514526367188e-05;
        float _1924 = (-1.0) - _1922;
        float _1926 = _1922 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1921 > _1926) || ((_1921 < _1924) || ((_1920 > _1926) || ((_1920 < _1924) || ((_1919 < _1924) || (_1919 > _1926))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1921, cbModelParam._m0[9u].z, fma(_1920, cbModelParam._m0[9u].y, _1919 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1921, cbModelParam._m0[10u].z, fma(_1920, cbModelParam._m0[10u].y, _1919 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1921, cbModelParam._m0[11u].z, fma(_1920, cbModelParam._m0[11u].y, _1919 * cbModelParam._m0[11u].x))), _1347);
            frontier_phi_16_38_ladder = _2066.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2066.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2066.x * cbModelParam._m0[1u].y;
        }
        _1429 = frontier_phi_16_38_ladder_2;
        _1431 = frontier_phi_16_38_ladder_1;
        _1433 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1417 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_502, _503, _504), _1347);
        _1429 = _1417.x * cbModelParam._m0[1u].y;
        _1431 = _1417.y * cbModelParam._m0[1u].y;
        _1433 = _1417.z * cbModelParam._m0[1u].y;
    }
    float _1437 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _314);
    float _1438 = isnan(_1437) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1437 : min(cbModelParam._m0[25u].w, _1437));
    float _1530;
    float _1532;
    float _1534;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1494 = fma(_566, cbModelParam._m0[21u].z, fma(_562, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558)) + cbModelParam._m0[21u].w;
        float _1498 = fma(_566, cbModelParam._m0[22u].z, fma(_562, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558)) + cbModelParam._m0[22u].w;
        float _1502 = fma(_566, cbModelParam._m0[23u].z, fma(_562, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558)) + cbModelParam._m0[23u].w;
        float _1505 = fma(_504, cbModelParam._m0[21u].z, fma(_503, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502));
        float _1508 = fma(_504, cbModelParam._m0[22u].z, fma(_503, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502));
        float _1511 = fma(_504, cbModelParam._m0[23u].z, fma(_503, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502));
        float _1621;
        if (_1505 > 0.0)
        {
            _1621 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1621 = frontier_phi_28_24_ladder;
        }
        float _1939;
        if (_1508 > 0.0)
        {
            _1939 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1939 = frontier_phi_40_35_ladder;
        }
        float _2277;
        if (_1511 > 0.0)
        {
            _2277 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2277 = frontier_phi_50_47_ladder;
        }
        float _2279 = isnan(_1939) ? _1621 : (isnan(_1621) ? _1939 : min(_1621, _1939));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1505) + _1494;
        float _2285 = (_2280 * _1508) + _1498;
        float _2286 = (_2280 * _1511) + _1502;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2288 = (-1.0) - _2287;
        float _2290 = _2287 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2286 > _2290) || ((_2286 < _2288) || ((_2285 > _2290) || ((_2285 < _2288) || ((_2284 < _2288) || (_2284 > _2290))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2286, cbModelParam._m0[17u].z, fma(_2285, cbModelParam._m0[17u].y, _2284 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2286, cbModelParam._m0[18u].z, fma(_2285, cbModelParam._m0[18u].y, _2284 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2286, cbModelParam._m0[19u].z, fma(_2285, cbModelParam._m0[19u].y, _2284 * cbModelParam._m0[19u].x))), _1438);
            frontier_phi_25_50_ladder = _2408.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2408.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2408.x * cbModelParam._m0[1u].z;
        }
        _1530 = frontier_phi_25_50_ladder_2;
        _1532 = frontier_phi_25_50_ladder_1;
        _1534 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_502, _503, _504), _1438);
        _1530 = _1514.x * cbModelParam._m0[1u].z;
        _1532 = _1514.y * cbModelParam._m0[1u].z;
        _1534 = _1514.z * cbModelParam._m0[1u].z;
    }
    float _1547 = (((_529 * _479) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1530 - _1429)) + _1429);
    float _1549 = (((_529 * _481) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1532 - _1431)) + _1431);
    float _1551 = (((_529 * _482) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1534 - _1433)) + _1433);
    float _1554 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1549, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1557 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1549, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1560 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1549, cbSceneParam._m0[91u].y, _1547 * cbSceneParam._m0[91u].x));
    float _1595 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1599 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1603 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1608 = _1595 / _1607;
    float _1609 = _1599 / _1607;
    float _1610 = _1603 / _1607;
    float _1757;
    float _1758;
    float _1759;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1637 = ((uint(_1610 > cbSceneParam._m0[59u].y) + uint(_1610 > cbSceneParam._m0[59u].x)) + uint(_1610 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1638 = _1637 + 43u;
        uint _1646 = _1637 + 44u;
        uint _1654 = _1637 + 45u;
        uint _1662 = _1637 + 46u;
        float _1673 = fma(_1607, cbSceneParam._m0[_1638].w, fma(_1603, cbSceneParam._m0[_1638].z, fma(_1599, cbSceneParam._m0[_1638].y, _1595 * cbSceneParam._m0[_1638].x)));
        float _1677 = fma(_1607, cbSceneParam._m0[_1646].w, fma(_1603, cbSceneParam._m0[_1646].z, fma(_1599, cbSceneParam._m0[_1646].y, _1595 * cbSceneParam._m0[_1646].x)));
        float _1685 = fma(_1607, cbSceneParam._m0[_1662].w, fma(_1603, cbSceneParam._m0[_1662].z, fma(_1599, cbSceneParam._m0[_1662].y, _1595 * cbSceneParam._m0[_1662].x)));
        float _1690 = cbSceneParam._m0[33u].z * _1685;
        float _1692 = cbSceneParam._m0[33u].w * _1685;
        float _1695 = fma(_1607, cbSceneParam._m0[_1654].w, fma(_1603, cbSceneParam._m0[_1654].z, fma(_1599, cbSceneParam._m0[_1654].y, _1595 * cbSceneParam._m0[_1654].x))) / _1685;
        float _1743 = (cbSceneParam._m0[33u].x - sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610))) * cbSceneParam._m0[33u].y;
        float _4073 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1750 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1690 + _1673) / _1685, (_1692 + _1677) / _1685), _1695), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1692 + _1673) / _1685, (_1677 - _1690) / _1685), _1695), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1673 - _1690) / _1685, (_1677 - _1692) / _1685), _1695), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1673 - _1692) / _1685, (_1690 + _1677) / _1685), _1695), 0.0)).x), vec4(0.25)));
        _1757 = 1.0 - (_1750 * cbSceneParam._m0[34u].x);
        _1758 = 1.0 - (_1750 * cbSceneParam._m0[34u].y);
        _1759 = 1.0 - (_1750 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1757 = 1.0;
        _1758 = 1.0;
        _1759 = 1.0;
    }
    float _1823;
    float _1825;
    float _1827;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1811 = fma(_1607, cbSceneParam._m0[63u].w, fma(_1603, cbSceneParam._m0[63u].z, fma(_1599, cbSceneParam._m0[63u].y, _1595 * cbSceneParam._m0[63u].x)));
        float _1812 = fma(_1607, cbSceneParam._m0[60u].w, fma(_1603, cbSceneParam._m0[60u].z, fma(_1599, cbSceneParam._m0[60u].y, _1595 * cbSceneParam._m0[60u].x))) / _1811;
        float _1813 = fma(_1607, cbSceneParam._m0[61u].w, fma(_1603, cbSceneParam._m0[61u].z, fma(_1599, cbSceneParam._m0[61u].y, _1595 * cbSceneParam._m0[61u].x))) / _1811;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1812 >= cbSceneParam._m0[64u].x) && (_1813 >= cbSceneParam._m0[64u].y)) && (_1812 <= cbSceneParam._m0[64u].z)) && (_1813 <= cbSceneParam._m0[64u].w))
        {
            float _1952 = fma(_1607, cbSceneParam._m0[62u].w, fma(_1603, cbSceneParam._m0[62u].z, fma(_1599, cbSceneParam._m0[62u].y, _1595 * cbSceneParam._m0[62u].x))) / _1811;
            float _1956 = isnan(cbSceneParam._m0[41u].w) ? _1952 : (isnan(_1952) ? cbSceneParam._m0[41u].w : max(_1952, cbSceneParam._m0[41u].w));
            float _1999 = (cbSceneParam._m0[33u].x - sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610))) * cbSceneParam._m0[33u].y;
            float _4089 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
            float _2006 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1812, cbSceneParam._m0[33u].w + _1813), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1812, _1813 - cbSceneParam._m0[33u].z), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1812 - cbSceneParam._m0[33u].z, _1813 - cbSceneParam._m0[33u].w), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1812 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1813), _1956), 0.0)).x), vec4(0.25)));
            float _2010 = 1.0 - (_2006 * cbSceneParam._m0[34u].x);
            float _2011 = 1.0 - (_2006 * cbSceneParam._m0[34u].y);
            float _2012 = 1.0 - (_2006 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2012) ? _1759 : (isnan(_1759) ? _2012 : min(_1759, _2012));
            frontier_phi_37_36_ladder_1 = isnan(_2011) ? _1758 : (isnan(_1758) ? _2011 : min(_1758, _2011));
            frontier_phi_37_36_ladder_2 = isnan(_2010) ? _1757 : (isnan(_1757) ? _2010 : min(_1757, _2010));
        }
        else
        {
            frontier_phi_37_36_ladder = _1759;
            frontier_phi_37_36_ladder_1 = _1758;
            frontier_phi_37_36_ladder_2 = _1757;
        }
        _1823 = frontier_phi_37_36_ladder_2;
        _1825 = frontier_phi_37_36_ladder_1;
        _1827 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1823 = _1757;
        _1825 = _1758;
        _1827 = _1759;
    }
    uvec4 _1832 = floatBitsToUint(cbInstanceData._m0[_453 + 5u]);
    uint _1834 = _1832.x * 14u;
    uint _1835 = _1834 + 13u;
    float _1842 = _494 + (-1.0);
    float _1847 = (cbLight._m0[_1835].x * _1842) + 1.0;
    float _1848 = (cbLight._m0[_1835].y * _1842) + 1.0;
    float _1849 = (cbLight._m0[_1835].z * _1842) + 1.0;
    float _1850 = (cbLight._m0[_1835].w * _1842) + 1.0;
    uint _1851 = _1834 + 5u;
    float _1857 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1861 = _1834 + 4u;
    float _1871 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1875 = _1834 | 1u;
    float _1886 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_311, _312, _313));
    float _1889 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_311, _312, _313));
    float _4125 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _4136 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1894 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.3183098733425140380859375;
    float _1896 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _1903 = ((cbLight._m0[_1851].x * _1857) * _1896) + (((cbLight._m0[_1861].x * _1823) * _1871) * _1894);
    float _1904 = ((_1857 * cbLight._m0[_1851].y) * _1896) + (((cbLight._m0[_1861].y * _1825) * _1871) * _1894);
    float _1905 = ((_1857 * cbLight._m0[_1851].z) * _1896) + (((cbLight._m0[_1861].z * _1827) * _1871) * _1894);
    uvec4 _1909 = floatBitsToUint(cbLight._m0[_1834 + 12u]);
    bool _1911 = _1909.x == 0u;
    float _2013;
    float _2015;
    float _2017;
    if (_1911)
    {
        _2013 = _1903;
        _2015 = _1904;
        _2017 = _1905;
    }
    else
    {
        uint _2021 = _1834 + 6u;
        float _2037 = (dot(vec3(cbLight._m0[_1834 + 2u].xyz), vec3(_311, _312, _313)) * 0.5) + 0.5;
        float _2038 = _2037 * _2037;
        float _4147 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2039 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2040 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2013 = (((cbLight._m0[_2021].x * 0.3183098733425140380859375) * _2039) * _2040) + _1903;
        _2015 = (((cbLight._m0[_2021].y * 0.3183098733425140380859375) * _2039) * _2040) + _1904;
        _2017 = (((cbLight._m0[_2021].z * 0.3183098733425140380859375) * _2039) * _2040) + _1905;
    }
    bool _2020 = _1909.y == 0u;
    float _2075;
    float _2077;
    float _2079;
    if (_2020)
    {
        _2075 = _2013;
        _2077 = _2015;
        _2079 = _2017;
    }
    else
    {
        uint _2248 = _1834 + 7u;
        float _2264 = (dot(vec3(cbLight._m0[_1834 + 3u].xyz), vec3(_311, _312, _313)) * 0.5) + 0.5;
        float _2265 = _2264 * _2264;
        float _4163 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2266 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2267 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2075 = (((cbLight._m0[_2248].x * 0.3183098733425140380859375) * _2266) * _2267) + _2013;
        _2077 = (((cbLight._m0[_2248].y * 0.3183098733425140380859375) * _2266) * _2267) + _2015;
        _2079 = (((cbLight._m0[_2248].z * 0.3183098733425140380859375) * _2266) * _2267) + _2017;
    }
    uint _2082 = _1834 + 8u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _314) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1834].x + _392;
    float _2098 = cbLight._m0[_1834].y + _393;
    float _2099 = cbLight._m0[_1834].z + _394;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1834].xyz));
    float _4179 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _2111 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2112 = dot(vec3(_311, _312, _313), vec3(_2104, _2105, _2106));
    float _4201 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2116 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_2104, _2105, _2106));
    float _4212 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2120 = _2096 * _2096;
    float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
    float _2132 = exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0);
    float _2133 = 0.959999978542327880859375 - _476;
    float _2135 = 0.959999978542327880859375 - _477;
    float _2136 = 0.959999978542327880859375 - _478;
    float _2143 = 1.0 - _2096;
    float _2154 = (0.5 / (((_2111 * ((_2110 * _2143) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2143) + _2096) * _2110))) * _2110;
    float _4223 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2156 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
    uint _2170 = _1834 + 9u;
    float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _314) * 0.949999988079071044921875);
    float _2182 = _2181 * _2181;
    float _2183 = cbLight._m0[_1875].x + _392;
    float _2184 = cbLight._m0[_1875].y + _393;
    float _2185 = cbLight._m0[_1875].z + _394;
    float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
    float _2190 = _2189 * _2183;
    float _2191 = _2189 * _2184;
    float _2192 = _2189 * _2185;
    float _2193 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1875].xyz));
    float _4234 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2197 = dot(vec3(_311, _312, _313), vec3(_2190, _2191, _2192));
    float _4245 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2201 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2190, _2191, _2192));
    float _4256 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2205 = _2182 * _2182;
    float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
    float _2216 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
    float _2223 = 1.0 - _2182;
    float _2233 = (0.5 / (((_2111 * ((_2196 * _2223) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2223) + _2182) * _2196))) * _2196;
    float _4267 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
    float _2245 = (((((_2216 * _2133) + _479) * cbLight._m0[_2170].x) * _2235) * _1857) + ((((cbLight._m0[_2082].x * _1823) * ((_2132 * _2133) + _479)) * _2156) * _1871);
    float _2246 = (((((_2216 * _2135) + _481) * cbLight._m0[_2170].y) * _2235) * _1857) + ((((cbLight._m0[_2082].y * _1825) * ((_2132 * _2135) + _481)) * _2156) * _1871);
    float _2247 = (((((_2216 * _2136) + _482) * cbLight._m0[_2170].z) * _2235) * _1857) + ((((cbLight._m0[_2082].z * _1827) * ((_2132 * _2136) + _482)) * _2156) * _1871);
    float _2303;
    float _2305;
    float _2307;
    if (_1911)
    {
        _2303 = _2245;
        _2305 = _2246;
        _2307 = _2247;
    }
    else
    {
        uint _2309 = _1834 + 2u;
        uint _2313 = _1834 + 10u;
        float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _314) * 0.949999988079071044921875);
        float _2328 = _2327 * _2327;
        float _2329 = cbLight._m0[_2309].x + _392;
        float _2330 = cbLight._m0[_2309].y + _393;
        float _2331 = cbLight._m0[_2309].z + _394;
        float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
        float _2336 = _2335 * _2329;
        float _2337 = _2335 * _2330;
        float _2338 = _2335 * _2331;
        float _2339 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_2309].xyz));
        float _4278 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2343 = dot(vec3(_311, _312, _313), vec3(_2336, _2337, _2338));
        float _4289 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2347 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2336, _2337, _2338));
        float _4300 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2351 = _2328 * _2328;
        float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
        float _2362 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
        float _2369 = 1.0 - _2328;
        float _2379 = (0.5 / (((_2111 * ((_2342 * _2369) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2369) + _2328) * _2342))) * _2342;
        float _4311 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2381 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
        float _2382 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2303 = (((((_2362 * _2133) + _479) * cbLight._m0[_2313].x) * _2381) * _2382) + _2245;
        _2305 = (((((_2362 * _2135) + _481) * cbLight._m0[_2313].y) * _2381) * _2382) + _2246;
        _2307 = (((((_2362 * _2136) + _482) * cbLight._m0[_2313].z) * _2381) * _2382) + _2247;
    }
    float _2413;
    float _2415;
    float _2417;
    if (_2020)
    {
        _2413 = _2303;
        _2415 = _2305;
        _2417 = _2307;
    }
    else
    {
        uint _2424 = _1834 + 3u;
        uint _2428 = _1834 + 11u;
        float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _314) * 0.949999988079071044921875);
        float _2443 = _2442 * _2442;
        float _2444 = cbLight._m0[_2424].x + _392;
        float _2445 = cbLight._m0[_2424].y + _393;
        float _2446 = cbLight._m0[_2424].z + _394;
        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
        float _2451 = _2450 * _2444;
        float _2452 = _2450 * _2445;
        float _2453 = _2450 * _2446;
        float _2454 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_2424].xyz));
        float _4327 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2458 = dot(vec3(_311, _312, _313), vec3(_2451, _2452, _2453));
        float _4338 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2462 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2451, _2452, _2453));
        float _4349 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2466 = _2443 * _2443;
        float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
        float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
        float _2484 = 1.0 - _2443;
        float _2494 = (0.5 / (((_2111 * ((_2457 * _2484) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2484) + _2443) * _2457))) * _2457;
        float _4360 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2496 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
        float _2497 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2413 = (((((_2477 * _2133) + _479) * cbLight._m0[_2428].x) * _2496) * _2497) + _2303;
        _2415 = (((((_2477 * _2135) + _481) * cbLight._m0[_2428].y) * _2496) * _2497) + _2305;
        _2417 = (((((_2477 * _2136) + _482) * cbLight._m0[_2428].z) * _2496) * _2497) + _2307;
    }
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    if (_1832.y == 0u)
    {
        uvec4 _2518 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2519 = _2518.x;
        uint _2530 = uint((float(_2518.y) * floor(float(uint(cbSceneParam._m0[85u].y * _414) / _2519))) + floor(float(uint(cbSceneParam._m0[85u].x * _413) / _2519)));
        float _2540 = (log2(_1610 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2541 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        uint _2544 = uint(isnan(14.0) ? _2541 : (isnan(_2541) ? 14.0 : min(_2541, 14.0)));
        uvec4 _2549 = texelFetch(g_lightClusterGridBuffer, int(((_2544 << 2u) + (_2530 << 6u)) >> 2u));
        uint _2550 = _2549.x;
        uint _2551 = _2518.z;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        if (((((1u << ((_2551 >> 4u) & 15u)) + 4294967295u) & _2550) == 0u) || ((_2551 & 240u) == 0u))
        {
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
        }
        else
        {
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            uint _2789 = 0u;
            uint _2798;
            bool _2799;
            for (;;)
            {
                _2798 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                _2799 = _2798 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2799)
                {
                    frontier_phi_71_pred = _2788;
                    frontier_phi_71_pred_1 = _2787;
                    frontier_phi_71_pred_2 = _2786;
                    frontier_phi_71_pred_3 = _2785;
                    frontier_phi_71_pred_4 = _2784;
                    frontier_phi_71_pred_5 = _2783;
                }
                else
                {
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    uint _2934;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2798;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    for (;;)
                    {
                        uint _2938 = uint(findLSB(_2934)) + (_2789 << 5u);
                        uint _2935 = (_2934 + 4294967295u) & _2934;
                        uint _2940 = _2938 * 48u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2960 = (_2938 * 48u) + 4u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2979 = (_2938 * 48u) + 8u;
                        vec3 _2990 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x));
                        float _2994 = _2954.x - _1608;
                        float _2995 = _2954.y - _1609;
                        float _2996 = _2954.z - _1610;
                        float _2997 = dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996));
                        float _3000 = inversesqrt(_2997);
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3004 = dot(vec3(_434, _437, _440), vec3(_3001, _3002, _3003));
                        float _3009 = 1.0 - (_2997 * _2954.w);
                        float _4386 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3011 = sqrt(_2997) * _2973.w;
                        float _3014 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _3004) + _3015;
                        float _3021 = _3011 * _3011;
                        float _3025 = ((isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))) * _3010) / ((_3021 * 0.699999988079071044921875) + 1.0);
                        float _3029 = (-0.0) - _1608;
                        float _3030 = (-0.0) - _1609;
                        float _3031 = (-0.0) - _1610;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3045 = exp2(log2(1.0 / ((_3021 * 3.5) + 5.0)) * 0.25);
                        float _3046 = 1.0 - _510;
                        float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                        float _3054 = _3053 * _3053;
                        float _3055 = _3054 * _3054;
                        float _3056 = _3036 + _3001;
                        float _3057 = _3037 + _3002;
                        float _3058 = _3038 + _3003;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3066 = dot(vec3(_434, _437, _440), vec3(_3036, _3037, _3038));
                        float _4402 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3070 = dot(vec3(_434, _437, _440), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                        float _4413 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                        float _3078 = _3014 * _3054;
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3004) + _3079;
                        float _4424 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3084 = 1.0 - _3054;
                        float _3094 = (0.5 / (((_3083 * ((_3069 * _3084) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3083 * _3084) + _3054) * _3069))) * _3083;
                        float _4435 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3105 = (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) / ((_3077 * _3077) * ((_3021 * 2.1991131305694580078125) + 3.141590118408203125))) * _3010;
                        _2858 = (_3025 * _2973.x) + _2931;
                        _2859 = (_3025 * _2973.y) + _2932;
                        _2860 = (_3025 * _2973.z) + _2933;
                        _2855 = (_3105 * _2990.x) + _2928;
                        _2856 = (_3105 * _2990.y) + _2929;
                        _2857 = (_3105 * _2990.z) + _2930;
                        if (_2935 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2935;
                        }
                    }
                    frontier_phi_71_pred = _2860;
                    frontier_phi_71_pred_1 = _2859;
                    frontier_phi_71_pred_2 = _2858;
                    frontier_phi_71_pred_3 = _2857;
                    frontier_phi_71_pred_4 = _2856;
                    frontier_phi_71_pred_5 = _2855;
                }
                _2641 = frontier_phi_71_pred;
                _2639 = frontier_phi_71_pred_1;
                _2637 = frontier_phi_71_pred_2;
                _2635 = frontier_phi_71_pred_3;
                _2633 = frontier_phi_71_pred_4;
                _2631 = frontier_phi_71_pred_5;
                uint _2790 = _2789 + 1u;
                if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2783 = _2631;
                    _2784 = _2633;
                    _2785 = _2635;
                    _2786 = _2637;
                    _2787 = _2639;
                    _2788 = _2641;
                    _2789 = _2790;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
        }
        uvec4 _2644 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2645 = _2644.z;
        uint _2647 = (_2645 >> 8u) & 15u;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((4294967295u << _2647) & _2550) == 0u)
        {
            _2751 = _2630;
            _2753 = _2632;
            _2755 = _2634;
            _2757 = _2636;
            _2759 = _2638;
            _2761 = _2640;
        }
        else
        {
            float _2776 = inversesqrt(dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610)));
            float _2777 = _2776 * _1608;
            float _2778 = _2776 * _1609;
            float _2779 = _2776 * _1610;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2647 < ((_2645 >> 12u) & 15u))
            {
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2911 = _2630;
                float _2912 = _2632;
                float _2913 = _2634;
                float _2914 = _2636;
                float _2915 = _2638;
                float _2916 = _2640;
                uint _2917 = _2647;
                uint _2926;
                bool _2927;
                for (;;)
                {
                    _2926 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                    _2927 = _2926 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2927)
                    {
                        frontier_phi_82_pred = _2916;
                        frontier_phi_82_pred_1 = _2915;
                        frontier_phi_82_pred_2 = _2914;
                        frontier_phi_82_pred_3 = _2913;
                        frontier_phi_82_pred_4 = _2912;
                        frontier_phi_82_pred_5 = _2911;
                    }
                    else
                    {
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3132 = _2911;
                        float _3133 = _2912;
                        float _3134 = _2913;
                        float _3135 = _2914;
                        float _3136 = _2915;
                        float _3137 = _2916;
                        uint _3138 = _2926;
                        uint _3139;
                        vec4 _3164;
                        float _3165;
                        vec4 _3180;
                        vec3 _3192;
                        vec4 _3208;
                        vec4 _3224;
                        float _3271;
                        bool _3272;
                        for (;;)
                        {
                            uint _3149 = ((_2917 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3138));
                            _3139 = (_3138 + 4294967295u) & _3138;
                            uint _3151 = _3149 * 40u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            _3165 = _3164.w;
                            uint _3167 = (_3149 * 40u) + 4u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3149 * 40u) + 8u;
                            _3192 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x));
                            uint _3195 = (_3149 * 40u) + 16u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3211 = (_3149 * 40u) + 20u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3227 = (_3149 * 40u) + 24u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3246 = (_3149 * 40u) + 28u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            _3271 = fma(_1610, _3259.z, fma(_1609, _3259.y, _3259.x * _1608)) + _3259.w;
                            _3272 = !((fma(_1610, _3240.z, fma(_1609, _3240.y, _3240.x * _1608)) + _3240.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3272)
                            {
                                float _3299 = _3164.x - _1608;
                                float _3300 = _3164.y - _1609;
                                float _3301 = _3164.z - _1610;
                                float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                                float _3305 = inversesqrt(_3302);
                                float _3306 = _3305 * _3299;
                                float _3307 = _3305 * _3300;
                                float _3308 = _3305 * _3301;
                                float _3312 = 1.0 - (_3302 / (_3165 * _3165));
                                float _4446 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3317 = sqrt(_3302) * _3180.w;
                                float _3319 = 1.39999997615814208984375 / (_3317 + 1.39999997615814208984375);
                                float _3320 = _3319 * _3319;
                                float _3323 = ((1.0 - _3320) * dot(vec3(_3306, _3307, _3308), vec3(_434, _437, _440))) + _3320;
                                float _3326 = _3317 * _3317;
                                float _3330 = (fma(_1610, _3208.z, fma(_1609, _3208.y, _3208.x * _1608)) + _3208.w) / _3271;
                                float _3331 = (fma(_1610, _3224.z, fma(_1609, _3224.y, _3224.x * _1608)) + _3224.w) / _3271;
                                float _3335 = 1.0 - dot(vec2(_3330, _3331), vec2(_3330, _3331));
                                float _4462 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3337 = _3336 * (((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3313) / ((_3326 * 0.699999988079071044921875) + 1.0));
                                float _3349 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                                float _3350 = 1.0 - _510;
                                float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                                float _3358 = _3357 * _3357;
                                float _3359 = _3358 * _3358;
                                float _3360 = _3306 - _2777;
                                float _3361 = _3307 - _2778;
                                float _3362 = _3308 - _2779;
                                float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                                float _3370 = dot(vec3(_434, _437, _440), vec3((-0.0) - _2777, (-0.0) - _2778, (-0.0) - _2779));
                                float _4473 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3374 = dot(vec3(_434, _437, _440), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                                float _4484 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                                float _3382 = _3319 * _3358;
                                float _3383 = _3382 * _3382;
                                float _3389 = ((1.0 - _3383) * dot(vec3(_434, _437, _440), vec3(_3306, _3307, _3308))) + _3383;
                                float _4495 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3391 = 1.0 - _3358;
                                float _3401 = (0.5 / (((_3390 * ((_3373 * _3391) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3390 * _3391) + _3358) * _3373))) * _3390;
                                float _4506 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3411 = (_3336 * _3313) * (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) / ((_3381 * _3381) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3337 * _3180.z;
                                frontier_phi_88_pred_1 = _3337 * _3180.y;
                                frontier_phi_88_pred_2 = _3337 * _3180.x;
                                frontier_phi_88_pred_3 = _3411 * _3192.z;
                                frontier_phi_88_pred_4 = _3411 * _3192.y;
                                frontier_phi_88_pred_5 = _3411 * _3192.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3420 = frontier_phi_88_pred;
                            _3419 = frontier_phi_88_pred_1;
                            _3418 = frontier_phi_88_pred_2;
                            _3417 = frontier_phi_88_pred_3;
                            _3416 = frontier_phi_88_pred_4;
                            _3415 = frontier_phi_88_pred_5;
                            _3122 = _3418 + _3135;
                            _3123 = _3419 + _3136;
                            _3124 = _3420 + _3137;
                            _3119 = _3415 + _3132;
                            _3120 = _3416 + _3133;
                            _3121 = _3417 + _3134;
                            if (_3139 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3139;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3124;
                        frontier_phi_82_pred_1 = _3123;
                        frontier_phi_82_pred_2 = _3122;
                        frontier_phi_82_pred_3 = _3121;
                        frontier_phi_82_pred_4 = _3120;
                        frontier_phi_82_pred_5 = _3119;
                    }
                    _2762 = frontier_phi_82_pred;
                    _2760 = frontier_phi_82_pred_1;
                    _2758 = frontier_phi_82_pred_2;
                    _2756 = frontier_phi_82_pred_3;
                    _2754 = frontier_phi_82_pred_4;
                    _2752 = frontier_phi_82_pred_5;
                    uint _2918 = _2917 + 1u;
                    if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2911 = _2752;
                        _2912 = _2754;
                        _2913 = _2756;
                        _2914 = _2758;
                        _2915 = _2760;
                        _2916 = _2762;
                        _2917 = _2918;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2758;
                frontier_phi_63_64_ladder_1 = _2762;
                frontier_phi_63_64_ladder_2 = _2760;
                frontier_phi_63_64_ladder_3 = _2756;
                frontier_phi_63_64_ladder_4 = _2754;
                frontier_phi_63_64_ladder_5 = _2752;
            }
            else
            {
                frontier_phi_63_64_ladder = _2636;
                frontier_phi_63_64_ladder_1 = _2640;
                frontier_phi_63_64_ladder_2 = _2638;
                frontier_phi_63_64_ladder_3 = _2634;
                frontier_phi_63_64_ladder_4 = _2632;
                frontier_phi_63_64_ladder_5 = _2630;
            }
            _2751 = frontier_phi_63_64_ladder_5;
            _2753 = frontier_phi_63_64_ladder_4;
            _2755 = frontier_phi_63_64_ladder_3;
            _2757 = frontier_phi_63_64_ladder;
            _2759 = frontier_phi_63_64_ladder_2;
            _2761 = frontier_phi_63_64_ladder_1;
        }
        float _2766 = isnan(1.0) ? _494 : (isnan(_494) ? 1.0 : min(_494, 1.0));
        _2563 = (_2766 * _2757) + _2075;
        _2565 = (_2766 * _2759) + _2077;
        _2567 = (_2766 * _2761) + _2079;
        _2569 = ((_2751 * _479) * _2766) + _2413;
        _2571 = ((_2753 * _481) * _2766) + _2415;
        _2573 = ((_2755 * _482) * _2766) + _2417;
    }
    else
    {
        _2563 = _2075;
        _2565 = _2077;
        _2567 = _2079;
        _2569 = _2413;
        _2571 = _2415;
        _2573 = _2417;
    }
    float _4522 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4533 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _4544 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _2590 = ((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2563 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _494))) + ((_2569 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1336)) * cbPerFrame._m0[3u].x);
    float _2591 = ((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2565 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _494))) + ((_2571 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1336)) * cbPerFrame._m0[3u].x);
    float _2592 = ((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2567 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _494))) + ((_2573 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1336)) * cbPerFrame._m0[3u].x);
    uint _2593 = _453 + 6u;
    float _2601 = _413 / cbSceneParam._m0[86u].x;
    float _2602 = _414 / cbSceneParam._m0[86u].y;
    vec4 _2616 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2601, _2602, (log2((isnan(cbSceneParam._m0[77u].w) ? _334 : (isnan(_334) ? cbSceneParam._m0[77u].w : min(_334, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2618 = _2616.x;
    float _2619 = _2616.y;
    float _2620 = _2616.z;
    float _2621 = _2616.w;
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    if (_334 > cbSceneParam._m0[78u].w)
    {
        float _2655 = isnan(_334) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _334 : min(cbSceneParam._m0[80u].w, _334));
        float _2656 = _2655 / _334;
        float _2667 = _2656 * _385;
        float _2668 = _386 * _2656;
        float _2669 = (-0.0) - _2668;
        float _2671 = _2656 * _387;
        float _2673 = (cbSceneParam._m0[77u].w * _2669) / _2655;
        float _2674 = _2673 + cbSceneParam._m0[79u].w;
        float _2675 = cbSceneParam._m0[79u].w - _2668;
        float _2681 = sqrt(((_2667 * _2667) + (_2668 * _2668)) + (_2671 * _2671));
        float _2684 = (1.0 - (cbSceneParam._m0[77u].w / _2655)) * _2681;
        float _2689 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2691 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2868;
        if (abs((_2669 - _2673) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2868 = ((((_2674 > 0.0) ? exp2(_2689 * _2674) : (2.0 - exp2(_2691 * _2674))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2684;
        }
        else
        {
            float _2812 = 1.0 / cbSceneParam._m0[80u].x;
            float _2813 = isnan(_2675) ? _2674 : (isnan(_2674) ? _2675 : max(_2674, _2675));
            float _2814 = isnan(_2675) ? _2674 : (isnan(_2674) ? _2675 : min(_2674, _2675));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            float _2824 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : min(_2814, 0.0));
            _2868 = ((abs(_2681 / _2669) * cbSceneParam._m0[80u].y) * ((((_2823 - _2824) * 2.0) - ((exp2(_2689 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0)))) - exp2(_2689 * (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))))) * _2812)) - ((exp2(_2691 * _2823) - exp2(_2691 * _2824)) * _2812))) + (_2684 * cbSceneParam._m0[80u].z);
        }
        vec4 _2870 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2601, _2602, 1.0), 0.0);
        float _2879 = exp2((_2868 * (-1.44269502162933349609375)) * (1.0 - _2870.w));
        float _2880 = log2(_2879);
        float _2896 = log2(_2621);
        _2693 = (exp2(_2896 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].x)) * _2870.x) / cbSceneParam._m0[78u].x)) + _2618;
        _2695 = (exp2(_2896 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].y)) * _2870.y) / cbSceneParam._m0[78u].y)) + _2619;
        _2697 = (exp2(_2896 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].z)) * _2870.z) / cbSceneParam._m0[78u].z)) + _2620;
        _2699 = _2879 * _2621;
    }
    else
    {
        _2693 = _2618;
        _2695 = _2619;
        _2697 = _2620;
        _2699 = _2621;
    }
    bool _2906;
    vec4 _2709;
    vec4 _2731;
    float _2733;
    float _2737;
    float _2738;
    float _2739;
    float _2740;
    bool _2750;
    for (;;)
    {
        _2709 = cbMatDynParam._m0[0u];
        float _2711 = roundEven(_2709.y);
        bool _2712 = _2711 == 3.0;
        float _2713 = log2(_2699);
        float _2720 = exp2(_2713 * cbSceneParam._m0[78u].x) * _2590;
        float _2721 = exp2(_2713 * cbSceneParam._m0[78u].y) * _2591;
        float _2722 = exp2(_2713 * cbSceneParam._m0[78u].z) * _2592;
        float _2729 = _401 + (-0.5);
        _2731 = cbMtdParam._m0[1u];
        _2733 = _2731.y * _2729;
        float _2736 = (_2711 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2737 = _2736 * (_2712 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2693)));
        _2738 = _2736 * (_2712 ? _2721 : (_2721 + (cbSceneParam._m0[72u].w * _2695)));
        _2739 = _2736 * (_2712 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2697)));
        _2740 = _2729 * 0.999000012874603271484375;
        _2750 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2750)
        {
            if ((cbInstanceData._m0[_453 + 7u].x + _2740) < 0.5)
            {
                _2906 = true;
                break;
            }
        }
        uint _2847 = _455 + uint(_2709.w);
        if ((cbInstanceData._m0[_2847].w < 1.0) && ((cbInstanceData._m0[_2847].w + _2740) < 0.5))
        {
            _2906 = true;
            break;
        }
        if ((_2733 + 1.0) < _2731.x)
        {
            _2906 = true;
            break;
        }
        _2906 = false;
        break;
    }
    float _3110;
    if (_2906)
    {
        discard_state = true;
        _3110 = 0.0;
    }
    else
    {
        _3110 = cbInstanceData._m0[_2593].w;
    }
    SV_Target.x = _2737;
    SV_Target.y = _2738;
    SV_Target.z = _2739;
    SV_Target.w = _3110;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2593].w;
    discard_exit();
}


