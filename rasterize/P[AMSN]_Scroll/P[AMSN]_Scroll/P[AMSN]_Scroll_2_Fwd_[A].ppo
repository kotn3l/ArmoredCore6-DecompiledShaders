#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _894;
float _3284;
float _3285;
float _3286;
float _3287;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = ((cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.x;
    float _227 = ((cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.y;
    vec4 _240 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_226 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_227 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _226) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _227) + cbTextureTilingScale._m0[2u].w));
    float _264 = cbMtdParam._m0[10u].x + _260.x;
    vec4 _276 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _226) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _227) + cbTextureTilingScale._m0[1u].w));
    float _280 = _276.z;
    float _284 = (_276.x * 2.0) + (-1.0);
    float _286 = (_276.y * 2.0) + (-1.0);
    float _287 = dot(vec2(_284, _286), vec2(_284, _286));
    float _3296 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _293 = sqrt(1.0 - (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0))));
    float _296 = fma(_293, _199 * NORMAL.x, fma(_286, _206 * TANGENT.x, (_192 * _185) * _284));
    float _299 = fma(_293, _199 * NORMAL.y, fma(_286, _206 * TANGENT.y, (_192 * _186) * _284));
    float _302 = fma(_293, _199 * NORMAL.z, fma(_286, _206 * TANGENT.z, (_192 * _187) * _284));
    float _306 = inversesqrt(dot(vec3(_296, _299, _302), vec3(_296, _299, _302)));
    float _307 = _306 * _296;
    float _308 = _306 * _299;
    float _309 = _306 * _302;
    float _3307 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _310 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _3318 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3329 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3340 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3351 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _314 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
    float _330 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _371 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _381 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _371);
    float _382 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _371);
    float _383 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _371);
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _388 = _381 * _387;
    float _389 = _382 * _387;
    float _390 = _383 * _387;
    vec4 _395 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _397 = _395.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _573 = sqrt(((_381 * _381) + (_382 * _382)) + (_383 * _383));
        float _579 = (cbMatDynParam._m0[5u].x * _573) + cbMatDynParam._m0[5u].y;
        float _3362 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        float _580 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _584 = (cbMatDynParam._m0[5u].z * _573) + cbMatDynParam._m0[5u].w;
        float _3373 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) - _580)) + _580) < ((_397 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _409 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _410 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_309, cbSceneParam._m0[5u].z, fma(_308, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _307));
    float _433 = fma(_309, cbSceneParam._m0[6u].z, fma(_308, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _307));
    float _436 = fma(_309, cbSceneParam._m0[7u].z, fma(_308, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _307));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = _449 + 9u;
    uint _452 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3384 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    float _3395 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _3406 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _464 = 1.0 - _314;
    float _465 = _461 * _464;
    float _466 = _462 * _464;
    float _467 = _463 * _464;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _314;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _314;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _314;
    float _475 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    vec4 _487 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _409, cbSceneParam._m0[86u].y * _410));
    float _490 = _487.x * TEXCOORD.z;
    float _491 = dot(vec3(_307, _308, _309), vec3(_388, _389, _390));
    float _494 = _491 * 2.0;
    float _498 = (_494 * _307) - _388;
    float _499 = (_494 * _308) - _389;
    float _500 = (_494 * _309) - _390;
    float _504 = abs(dot(vec3(_388, _389, _390), vec3(_307, _308, _309)));
    float _3417 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _506 = sqrt(_310);
    float _519 = exp2((_506 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_506 * 3.0));
    float _525 = (1.0 - _519) * ((_506 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _526 = _519 * _506;
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _893;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _618 = fma(_562, cbModelParam._m0[26u].z, fma(_558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554));
        float _622 = fma(_562, cbModelParam._m0[27u].z, fma(_558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554));
        float _626 = fma(_562, cbModelParam._m0[28u].z, fma(_558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554));
        float _651 = _554 + _307;
        float _652 = _558 + _308;
        float _653 = _562 + _309;
        float _663 = fma(_653, cbModelParam._m0[26u].z, fma(_652, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _651)) - _618;
        float _664 = fma(_653, cbModelParam._m0[27u].z, fma(_652, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _651)) - _622;
        float _665 = fma(_653, cbModelParam._m0[28u].z, fma(_652, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _651)) - _626;
        float _669 = inversesqrt(dot(vec3(_663, _664, _665), vec3(_663, _664, _665)));
        float _682 = ((_669 * _663) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_618 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_669 * _664) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_622 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _684 = ((_669 * _665) / cbModelParam._m0[34u].z) + ((((((_626 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        float _721 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_687.x + (-0.5));
        float _723 = _721 * (_687.y + (-0.5));
        float _724 = _721 * (_687.z + (-0.5));
        float _731 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_694.x + (-0.5));
        float _733 = _731 * (_694.y + (-0.5));
        float _734 = _731 * (_694.z + (-0.5));
        float _741 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_701.x + (-0.5));
        float _743 = _741 * (_701.y + (-0.5));
        float _744 = _741 * (_701.z + (-0.5));
        float _751 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_708.x + (-0.5));
        float _753 = _751 * (_708.y + (-0.5));
        float _754 = _751 * (_708.z + (-0.5));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = _722 * 0.5;
        float _759 = _732 * 0.5;
        float _760 = _742 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _775 = (dot(vec3(_307, _308, _309), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _785 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _787 = _786 * 2.0;
        float _791 = (1.0 - _786) / (_786 + 1.0);
        float _3465 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _801 = ((((1.0 - _792) * (_787 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_787 + 1.0))) + _792) * _755;
        float _802 = _723 * 0.5;
        float _803 = _733 * 0.5;
        float _804 = _743 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _818 = (dot(vec3(_307, _308, _309), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _827 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3498 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_829 + 1.0))) + _834) * _756;
        float _844 = _724 * 0.5;
        float _845 = _734 * 0.5;
        float _846 = _744 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _860 = (dot(vec3(_307, _308, _309), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _869 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3531 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_871 + 1.0))) + _876) * _757;
        _893 = _724;
        _895 = _723;
        _896 = _722;
        _897 = _734;
        _898 = _733;
        _899 = _732;
        _900 = _744;
        _901 = _743;
        _902 = _742;
        _903 = _757;
        _904 = _756;
        _905 = _755;
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
    }
    else
    {
        _893 = _894;
        _895 = _894;
        _896 = _894;
        _897 = _894;
        _898 = _894;
        _899 = _894;
        _900 = _894;
        _901 = _894;
        _902 = _894;
        _903 = _894;
        _904 = _894;
        _905 = _894;
        _906 = 0.0;
        _907 = 0.0;
        _908 = 0.0;
    }
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _937 = fma(_562, cbModelParam._m0[30u].z, fma(_558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _554));
        float _941 = fma(_562, cbModelParam._m0[31u].z, fma(_558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _554));
        float _945 = fma(_562, cbModelParam._m0[32u].z, fma(_558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _554));
        float _968 = _554 + _307;
        float _969 = _558 + _308;
        float _970 = _562 + _309;
        float _980 = fma(_970, cbModelParam._m0[30u].z, fma(_969, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _968)) - _937;
        float _981 = fma(_970, cbModelParam._m0[31u].z, fma(_969, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _968)) - _941;
        float _982 = fma(_970, cbModelParam._m0[32u].z, fma(_969, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _968)) - _945;
        float _986 = inversesqrt(dot(vec3(_980, _981, _982), vec3(_980, _981, _982)));
        float _999 = ((_986 * _980) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_937 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_986 * _981) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_941 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_986 * _982) / cbModelParam._m0[35u].z) + ((((((_945 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        float _1036 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_1003.x + (-0.5));
        float _1038 = _1036 * (_1003.y + (-0.5));
        float _1039 = _1036 * (_1003.z + (-0.5));
        float _1046 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1010.x + (-0.5));
        float _1048 = _1046 * (_1010.y + (-0.5));
        float _1049 = _1046 * (_1010.z + (-0.5));
        float _1056 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1017.x + (-0.5));
        float _1058 = _1056 * (_1017.y + (-0.5));
        float _1059 = _1056 * (_1017.z + (-0.5));
        float _1066 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1024.x + (-0.5));
        float _1068 = _1066 * (_1024.y + (-0.5));
        float _1069 = _1066 * (_1024.z + (-0.5));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = _1037 * 0.5;
        float _1074 = _1047 * 0.5;
        float _1075 = _1057 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_307, _308, _309), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3594 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1100 + 1.0))) + _1105) * _1070;
        float _1115 = _1038 * 0.5;
        float _1116 = _1048 * 0.5;
        float _1117 = _1058 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_307, _308, _309), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3627 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1142 + 1.0))) + _1147) * _1071;
        float _1157 = _1039 * 0.5;
        float _1158 = _1049 * 0.5;
        float _1159 = _1059 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_307, _308, _309), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3660 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1184 + 1.0))) + _1189) * _1072;
        _1206 = _1039;
        _1207 = _1038;
        _1208 = _1037;
        _1209 = _1049;
        _1210 = _1048;
        _1211 = _1047;
        _1212 = _1059;
        _1213 = _1058;
        _1214 = _1057;
        _1215 = _1072;
        _1216 = _1071;
        _1217 = _1070;
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
    }
    else
    {
        _1206 = _894;
        _1207 = _894;
        _1208 = _894;
        _1209 = _894;
        _1210 = _894;
        _1211 = _894;
        _1212 = _894;
        _1213 = _894;
        _1214 = _894;
        _1215 = _894;
        _1216 = _894;
        _1217 = _894;
        _1218 = 0.0;
        _1219 = 0.0;
        _1220 = 0.0;
    }
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _906)) + _906;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _908)) + _908;
    float _1253 = fma(_1232, cbSceneParam._m0[89u].z, fma(_1231, cbSceneParam._m0[89u].y, _1230 * cbSceneParam._m0[89u].x));
    float _1256 = fma(_1232, cbSceneParam._m0[90u].z, fma(_1231, cbSceneParam._m0[90u].y, _1230 * cbSceneParam._m0[90u].x));
    float _1259 = fma(_1232, cbSceneParam._m0[91u].z, fma(_1231, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1230));
    float _1274 = _498 * 0.5;
    float _1275 = _499 * 0.5;
    float _1276 = _500 * 0.5;
    float _1277 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1280 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1283 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1317;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1290 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_893, _897, _900, _903));
        float _1294 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_895, _898, _901, _904));
        float _1298 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_896, _899, _902, _905));
        float _1305 = dot(vec4(cbModelParam._m0[39u]), vec4(_1274, _1275, _1276, 1.0));
        _1317 = dot(vec3(isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1305) ? 0.0 : (isnan(0.0) ? _1305 : max(0.0, _1305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1317 = 1.0;
    }
    float _1328;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1319 = dot(vec4(cbModelParam._m0[40u]), vec4(_1274, _1275, _1276, 1.0));
        _1328 = dot(vec3(isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1328 = 1.0;
    }
    float _1332 = (_1328 * cbModelParam._m0[1u].x) + (_1317 * (1.0 - cbModelParam._m0[1u].x));
    float _1342 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _310);
    float _1343 = isnan(_1342) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1342 : min(cbModelParam._m0[25u].z, _1342));
    float _1425;
    float _1427;
    float _1429;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1392 = fma(_562, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554)) + cbModelParam._m0[13u].w;
        float _1396 = fma(_562, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554)) + cbModelParam._m0[14u].w;
        float _1400 = fma(_562, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554)) + cbModelParam._m0[15u].w;
        float _1403 = fma(_500, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498));
        float _1406 = fma(_500, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498));
        float _1409 = fma(_500, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498));
        float _1437;
        if (_1403 > 0.0)
        {
            _1437 = abs((1.0 - _1392) / _1403);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1392 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1437 = frontier_phi_17_15_ladder;
        }
        float _1644;
        if (_1406 > 0.0)
        {
            _1644 = abs((1.0 - _1396) / _1406);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1396 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1644 = frontier_phi_26_22_ladder;
        }
        float _1898;
        if (_1409 > 0.0)
        {
            _1898 = abs((1.0 - _1400) / _1409);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1400 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1898 = frontier_phi_38_33_ladder;
        }
        float _1900 = isnan(_1644) ? _1437 : (isnan(_1437) ? _1644 : min(_1437, _1644));
        float _1901 = isnan(_1898) ? _1900 : (isnan(_1900) ? _1898 : min(_1900, _1898));
        float _1905 = (_1901 * _1403) + _1392;
        float _1906 = (_1901 * _1406) + _1396;
        float _1907 = (_1901 * _1409) + _1400;
        float _1908 = _1901 * 9.9999997473787516355514526367188e-05;
        float _1910 = (-1.0) - _1908;
        float _1912 = _1908 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1907 > _1912) || ((_1907 < _1910) || ((_1906 > _1912) || ((_1906 < _1910) || ((_1905 < _1910) || (_1905 > _1912))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2035 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1907, cbModelParam._m0[9u].z, fma(_1906, cbModelParam._m0[9u].y, _1905 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1907, cbModelParam._m0[10u].z, fma(_1906, cbModelParam._m0[10u].y, _1905 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1907, cbModelParam._m0[11u].z, fma(_1906, cbModelParam._m0[11u].y, _1905 * cbModelParam._m0[11u].x))), _1343);
            frontier_phi_16_38_ladder = _2035.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2035.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2035.x * cbModelParam._m0[1u].y;
        }
        _1425 = frontier_phi_16_38_ladder_2;
        _1427 = frontier_phi_16_38_ladder_1;
        _1429 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1413 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_498, _499, _500), _1343);
        _1425 = _1413.x * cbModelParam._m0[1u].y;
        _1427 = _1413.y * cbModelParam._m0[1u].y;
        _1429 = _1413.z * cbModelParam._m0[1u].y;
    }
    float _1433 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _310);
    float _1434 = isnan(_1433) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1433 : min(cbModelParam._m0[25u].w, _1433));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1490 = fma(_562, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554)) + cbModelParam._m0[21u].w;
        float _1494 = fma(_562, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554)) + cbModelParam._m0[22u].w;
        float _1498 = fma(_562, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554)) + cbModelParam._m0[23u].w;
        float _1501 = fma(_500, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498));
        float _1504 = fma(_500, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498));
        float _1507 = fma(_500, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498));
        float _1649;
        if (_1501 > 0.0)
        {
            _1649 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1649 = frontier_phi_28_24_ladder;
        }
        float _1925;
        if (_1504 > 0.0)
        {
            _1925 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1925 = frontier_phi_40_35_ladder;
        }
        float _2138;
        if (_1507 > 0.0)
        {
            _2138 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2138 = frontier_phi_49_46_ladder;
        }
        float _2140 = isnan(_1925) ? _1649 : (isnan(_1649) ? _1925 : min(_1649, _1925));
        float _2141 = isnan(_2138) ? _2140 : (isnan(_2140) ? _2138 : min(_2140, _2138));
        float _2145 = (_2141 * _1501) + _1490;
        float _2146 = (_2141 * _1504) + _1494;
        float _2147 = (_2141 * _1507) + _1498;
        float _2148 = _2141 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2148;
        float _2151 = _2148 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2147 > _2151) || ((_2147 < _2149) || ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 < _2149) || (_2145 > _2151))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2346 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2147, cbModelParam._m0[17u].z, fma(_2146, cbModelParam._m0[17u].y, _2145 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2147, cbModelParam._m0[18u].z, fma(_2146, cbModelParam._m0[18u].y, _2145 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2147, cbModelParam._m0[19u].z, fma(_2146, cbModelParam._m0[19u].y, _2145 * cbModelParam._m0[19u].x))), _1434);
            frontier_phi_25_49_ladder = _2346.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2346.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2346.x * cbModelParam._m0[1u].z;
        }
        _1526 = frontier_phi_25_49_ladder_2;
        _1528 = frontier_phi_25_49_ladder_1;
        _1530 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_498, _499, _500), _1434);
        _1526 = _1510.x * cbModelParam._m0[1u].z;
        _1528 = _1510.y * cbModelParam._m0[1u].z;
        _1530 = _1510.z * cbModelParam._m0[1u].z;
    }
    float _1543 = (((_525 * _475) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1526 - _1425)) + _1425);
    float _1545 = (((_525 * _477) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1528 - _1427)) + _1427);
    float _1547 = (((_525 * _478) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1530 - _1429)) + _1429);
    float _1550 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1545, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1545, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1545, cbSceneParam._m0[91u].y, _1543 * cbSceneParam._m0[91u].x));
    uvec4 _1566 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1568 = _1566.x * 14u;
    uint _1569 = _1568 + 13u;
    float _1576 = _490 + (-1.0);
    float _1581 = (cbLight._m0[_1569].x * _1576) + 1.0;
    float _1582 = (cbLight._m0[_1569].y * _1576) + 1.0;
    float _1583 = (cbLight._m0[_1569].z * _1576) + 1.0;
    float _1584 = (cbLight._m0[_1569].w * _1576) + 1.0;
    uint _1585 = _1568 + 5u;
    float _1591 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
    uint _1595 = _1568 + 4u;
    float _1602 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
    uint _1606 = _1568 | 1u;
    float _1617 = dot(vec3(cbLight._m0[_1568].xyz), vec3(_307, _308, _309));
    float _1620 = dot(vec3(cbLight._m0[_1606].xyz), vec3(_307, _308, _309));
    float _3796 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _3807 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1625 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * 0.3183098733425140380859375;
    float _1627 = (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * 0.3183098733425140380859375;
    float _1634 = ((cbLight._m0[_1585].x * _1591) * _1627) + ((cbLight._m0[_1595].x * _1602) * _1625);
    float _1635 = ((_1591 * cbLight._m0[_1585].y) * _1627) + ((_1602 * cbLight._m0[_1595].y) * _1625);
    float _1636 = ((_1591 * cbLight._m0[_1585].z) * _1627) + ((_1602 * cbLight._m0[_1595].z) * _1625);
    uvec4 _1641 = floatBitsToUint(cbLight._m0[_1568 + 12u]);
    bool _1643 = _1641.x == 0u;
    float _1654;
    float _1656;
    float _1658;
    if (_1643)
    {
        _1654 = _1634;
        _1656 = _1635;
        _1658 = _1636;
    }
    else
    {
        uint _1662 = _1568 + 6u;
        float _1678 = (dot(vec3(cbLight._m0[_1568 + 2u].xyz), vec3(_307, _308, _309)) * 0.5) + 0.5;
        float _1679 = _1678 * _1678;
        float _3818 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1681 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _1654 = (((cbLight._m0[_1662].x * 0.3183098733425140380859375) * _1680) * _1681) + _1634;
        _1656 = (((cbLight._m0[_1662].y * 0.3183098733425140380859375) * _1680) * _1681) + _1635;
        _1658 = (((cbLight._m0[_1662].z * 0.3183098733425140380859375) * _1680) * _1681) + _1636;
    }
    bool _1661 = _1641.y == 0u;
    float _1699;
    float _1701;
    float _1703;
    if (_1661)
    {
        _1699 = _1654;
        _1701 = _1656;
        _1703 = _1658;
    }
    else
    {
        uint _1869 = _1568 + 7u;
        float _1885 = (dot(vec3(cbLight._m0[_1568 + 3u].xyz), vec3(_307, _308, _309)) * 0.5) + 0.5;
        float _1886 = _1885 * _1885;
        float _3834 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1888 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
        _1699 = (((cbLight._m0[_1869].x * 0.3183098733425140380859375) * _1887) * _1888) + _1654;
        _1701 = (((cbLight._m0[_1869].y * 0.3183098733425140380859375) * _1887) * _1888) + _1656;
        _1703 = (((cbLight._m0[_1869].z * 0.3183098733425140380859375) * _1887) * _1888) + _1658;
    }
    uint _1706 = _1568 + 8u;
    float _1719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1568].w)) * _310) * 0.949999988079071044921875);
    float _1720 = _1719 * _1719;
    float _1721 = cbLight._m0[_1568].x + _388;
    float _1722 = cbLight._m0[_1568].y + _389;
    float _1723 = cbLight._m0[_1568].z + _390;
    float _1727 = inversesqrt(dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723)));
    float _1728 = _1727 * _1721;
    float _1729 = _1727 * _1722;
    float _1730 = _1727 * _1723;
    float _1731 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1568].xyz));
    float _3850 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _1735 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _1736 = dot(vec3(_307, _308, _309), vec3(_1728, _1729, _1730));
    float _3872 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _1740 = dot(vec3(cbLight._m0[_1568].xyz), vec3(_1728, _1729, _1730));
    float _3883 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1744 = _1720 * _1720;
    float _1748 = ((_1739 * _1739) * (_1744 + (-1.0))) + 1.0;
    float _1756 = exp2(log2(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * 5.0);
    float _1757 = 0.959999978542327880859375 - _472;
    float _1759 = 0.959999978542327880859375 - _473;
    float _1760 = 0.959999978542327880859375 - _474;
    float _1767 = 1.0 - _1720;
    float _1778 = (0.5 / (((_1735 * ((_1734 * _1767) + _1720)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1767) + _1720) * _1734))) * _1734;
    float _3894 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1780 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1744 / ((_1748 * _1748) * 3.141590118408203125));
    uint _1791 = _1568 + 9u;
    float _1802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1606].w)) * _310) * 0.949999988079071044921875);
    float _1803 = _1802 * _1802;
    float _1804 = cbLight._m0[_1606].x + _388;
    float _1805 = cbLight._m0[_1606].y + _389;
    float _1806 = cbLight._m0[_1606].z + _390;
    float _1810 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
    float _1811 = _1810 * _1804;
    float _1812 = _1810 * _1805;
    float _1813 = _1810 * _1806;
    float _1814 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1606].xyz));
    float _3905 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _1818 = dot(vec3(_307, _308, _309), vec3(_1811, _1812, _1813));
    float _3916 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _1822 = dot(vec3(cbLight._m0[_1606].xyz), vec3(_1811, _1812, _1813));
    float _3927 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1826 = _1803 * _1803;
    float _1830 = ((_1821 * _1821) * (_1826 + (-1.0))) + 1.0;
    float _1837 = exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0);
    float _1844 = 1.0 - _1803;
    float _1854 = (0.5 / (((_1735 * ((_1817 * _1844) + _1803)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1844) + _1803) * _1817))) * _1817;
    float _3938 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1856 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1826 / ((_1830 * _1830) * 3.141590118408203125));
    float _1866 = (((((_1837 * _1757) + _475) * cbLight._m0[_1791].x) * _1856) * _1591) + (((((_1756 * _1757) + _475) * cbLight._m0[_1706].x) * _1780) * _1602);
    float _1867 = (((((_1837 * _1759) + _477) * cbLight._m0[_1791].y) * _1856) * _1591) + (((((_1756 * _1759) + _477) * cbLight._m0[_1706].y) * _1780) * _1602);
    float _1868 = (((((_1837 * _1760) + _478) * cbLight._m0[_1791].z) * _1856) * _1591) + (((((_1756 * _1760) + _478) * cbLight._m0[_1706].z) * _1780) * _1602);
    float _1930;
    float _1932;
    float _1934;
    if (_1643)
    {
        _1930 = _1866;
        _1932 = _1867;
        _1934 = _1868;
    }
    else
    {
        uint _1936 = _1568 + 2u;
        uint _1940 = _1568 + 10u;
        float _1954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _310) * 0.949999988079071044921875);
        float _1955 = _1954 * _1954;
        float _1956 = cbLight._m0[_1936].x + _388;
        float _1957 = cbLight._m0[_1936].y + _389;
        float _1958 = cbLight._m0[_1936].z + _390;
        float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
        float _1963 = _1962 * _1956;
        float _1964 = _1962 * _1957;
        float _1965 = _1962 * _1958;
        float _1966 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1936].xyz));
        float _3949 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1969 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1970 = dot(vec3(_307, _308, _309), vec3(_1963, _1964, _1965));
        float _3960 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1974 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_1963, _1964, _1965));
        float _3971 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1978 = _1955 * _1955;
        float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
        float _1989 = exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * 5.0);
        float _1996 = 1.0 - _1955;
        float _2006 = (0.5 / (((_1735 * ((_1969 * _1996) + _1955)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1996) + _1955) * _1969))) * _1969;
        float _3982 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2008 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
        float _2009 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _1930 = (((((_1989 * _1757) + _475) * cbLight._m0[_1940].x) * _2008) * _2009) + _1866;
        _1932 = (((((_1989 * _1759) + _477) * cbLight._m0[_1940].y) * _2008) * _2009) + _1867;
        _1934 = (((((_1989 * _1760) + _478) * cbLight._m0[_1940].z) * _2008) * _2009) + _1868;
    }
    float _2044;
    float _2046;
    float _2048;
    if (_1661)
    {
        _2044 = _1930;
        _2046 = _1932;
        _2048 = _1934;
    }
    else
    {
        uint _2055 = _1568 + 3u;
        uint _2059 = _1568 + 11u;
        float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _310) * 0.949999988079071044921875);
        float _2074 = _2073 * _2073;
        float _2075 = cbLight._m0[_2055].x + _388;
        float _2076 = cbLight._m0[_2055].y + _389;
        float _2077 = cbLight._m0[_2055].z + _390;
        float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
        float _2082 = _2081 * _2075;
        float _2083 = _2081 * _2076;
        float _2084 = _2081 * _2077;
        float _2085 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_2055].xyz));
        float _3998 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2089 = dot(vec3(_307, _308, _309), vec3(_2082, _2083, _2084));
        float _4009 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _2093 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2082, _2083, _2084));
        float _4020 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2097 = _2074 * _2074;
        float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
        float _2108 = exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0);
        float _2115 = 1.0 - _2074;
        float _2125 = (0.5 / (((_1735 * ((_2088 * _2115) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _2115) + _2074) * _2088))) * _2088;
        float _4031 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2127 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
        float _2128 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
        _2044 = (((((_2108 * _1757) + _475) * cbLight._m0[_2059].x) * _2127) * _2128) + _1930;
        _2046 = (((((_2108 * _1759) + _477) * cbLight._m0[_2059].y) * _2127) * _2128) + _1932;
        _2048 = (((((_2108 * _1760) + _478) * cbLight._m0[_2059].z) * _2127) * _2128) + _1934;
    }
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    if (_1566.y == 0u)
    {
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2203;
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2203;
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2203;
        uvec4 _2218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2219 = _2218.x;
        uint _2230 = uint((float(_2218.y) * floor(float(uint(cbSceneParam._m0[85u].y * _410) / _2219))) + floor(float(uint(cbSceneParam._m0[85u].x * _409) / _2219)));
        float _2240 = (log2(_2206 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2241 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        uint _2244 = uint(isnan(14.0) ? _2241 : (isnan(_2241) ? 14.0 : min(_2241, 14.0)));
        uvec4 _2249 = texelFetch(g_lightClusterGridBuffer, int(((_2244 << 2u) + (_2230 << 6u)) >> 2u));
        uint _2250 = _2249.x;
        uint _2251 = _2218.z;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        if (((((1u << ((_2251 >> 4u) & 15u)) + 4294967295u) & _2250) == 0u) || ((_2251 & 240u) == 0u))
        {
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
        }
        else
        {
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2362;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            uint _2510 = 0u;
            uint _2519;
            bool _2520;
            for (;;)
            {
                _2519 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2510 << 2u)) >> 2u)).x;
                _2520 = _2519 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2520)
                {
                    frontier_phi_66_pred = _2504;
                    frontier_phi_66_pred_1 = _2509;
                    frontier_phi_66_pred_2 = _2508;
                    frontier_phi_66_pred_3 = _2507;
                    frontier_phi_66_pred_4 = _2506;
                    frontier_phi_66_pred_5 = _2505;
                }
                else
                {
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    uint _2655;
                    _2649 = _2504;
                    _2650 = _2505;
                    _2651 = _2506;
                    _2652 = _2507;
                    _2653 = _2508;
                    _2654 = _2509;
                    _2655 = _2519;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    for (;;)
                    {
                        uint _2659 = uint(findLSB(_2655)) + (_2510 << 5u);
                        uint _2656 = (_2655 + 4294967295u) & _2655;
                        uint _2661 = _2659 * 48u;
                        vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 3u)).x));
                        uint _2681 = (_2659 * 48u) + 4u;
                        vec4 _2694 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 3u)).x));
                        uint _2700 = (_2659 * 48u) + 8u;
                        vec3 _2711 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x));
                        float _2715 = _2675.x - _2204;
                        float _2716 = _2675.y - _2205;
                        float _2717 = _2675.z - _2206;
                        float _2718 = dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717));
                        float _2721 = inversesqrt(_2718);
                        float _2722 = _2721 * _2715;
                        float _2723 = _2721 * _2716;
                        float _2724 = _2721 * _2717;
                        float _2725 = dot(vec3(_430, _433, _436), vec3(_2722, _2723, _2724));
                        float _2730 = 1.0 - (_2718 * _2675.w);
                        float _4057 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2731 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                        float _2732 = sqrt(_2718) * _2694.w;
                        float _2735 = 1.39999997615814208984375 / (_2732 + 1.39999997615814208984375);
                        float _2736 = _2735 * _2735;
                        float _2739 = ((1.0 - _2736) * _2725) + _2736;
                        float _2742 = _2732 * _2732;
                        float _2746 = ((isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))) * _2731) / ((_2742 * 0.699999988079071044921875) + 1.0);
                        float _2750 = (-0.0) - _2204;
                        float _2751 = (-0.0) - _2205;
                        float _2752 = (-0.0) - _2206;
                        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
                        float _2757 = _2756 * _2750;
                        float _2758 = _2756 * _2751;
                        float _2759 = _2756 * _2752;
                        float _2767 = exp2(log2(1.0 / ((_2742 * 3.5) + 5.0)) * 0.25);
                        float _2768 = 1.0 - _506;
                        float _2775 = sqrt(1.0 - ((1.0 - (_2768 * _2768)) * (1.0 - (_2767 * _2767))));
                        float _2776 = _2775 * _2775;
                        float _2777 = _2776 * _2776;
                        float _2778 = _2757 + _2722;
                        float _2779 = _2758 + _2723;
                        float _2780 = _2759 + _2724;
                        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
                        float _2788 = dot(vec3(_430, _433, _436), vec3(_2757, _2758, _2759));
                        float _4073 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2791 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                        float _2792 = dot(vec3(_430, _433, _436), vec3(_2784 * _2778, _2784 * _2779, _2784 * _2780));
                        float _4084 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2795 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                        float _2799 = ((_2795 * _2795) * (_2777 + (-1.0))) + 1.0;
                        float _2800 = _2735 * _2776;
                        float _2801 = _2800 * _2800;
                        float _2804 = ((1.0 - _2801) * _2725) + _2801;
                        float _4095 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2805 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                        float _2806 = 1.0 - _2776;
                        float _2816 = (0.5 / (((_2805 * ((_2791 * _2806) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2805 * _2806) + _2776) * _2791))) * _2805;
                        float _4106 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2827 = (((_2777 * 3.1415927410125732421875) * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) / ((_2799 * _2799) * ((_2742 * 2.1991131305694580078125) + 3.141590118408203125))) * _2731;
                        _2579 = (_2746 * _2694.x) + _2652;
                        _2580 = (_2746 * _2694.y) + _2653;
                        _2581 = (_2746 * _2694.z) + _2654;
                        _2576 = (_2827 * _2711.x) + _2649;
                        _2577 = (_2827 * _2711.y) + _2650;
                        _2578 = (_2827 * _2711.z) + _2651;
                        if (_2656 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2649 = _2576;
                            _2650 = _2577;
                            _2651 = _2578;
                            _2652 = _2579;
                            _2653 = _2580;
                            _2654 = _2581;
                            _2655 = _2656;
                        }
                    }
                    frontier_phi_66_pred = _2576;
                    frontier_phi_66_pred_1 = _2581;
                    frontier_phi_66_pred_2 = _2580;
                    frontier_phi_66_pred_3 = _2579;
                    frontier_phi_66_pred_4 = _2578;
                    frontier_phi_66_pred_5 = _2577;
                }
                _2352 = frontier_phi_66_pred;
                _2362 = frontier_phi_66_pred_1;
                _2360 = frontier_phi_66_pred_2;
                _2358 = frontier_phi_66_pred_3;
                _2356 = frontier_phi_66_pred_4;
                _2354 = frontier_phi_66_pred_5;
                uint _2511 = _2510 + 1u;
                if (_2511 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2504 = _2352;
                    _2505 = _2354;
                    _2506 = _2356;
                    _2507 = _2358;
                    _2508 = _2360;
                    _2509 = _2362;
                    _2510 = _2511;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
        }
        uvec4 _2365 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2366 = _2365.z;
        uint _2368 = (_2366 >> 8u) & 15u;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        if (((4294967295u << _2368) & _2250) == 0u)
        {
            _2472 = _2351;
            _2474 = _2353;
            _2476 = _2355;
            _2478 = _2357;
            _2480 = _2359;
            _2482 = _2361;
        }
        else
        {
            float _2497 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
            float _2498 = _2497 * _2204;
            float _2499 = _2497 * _2205;
            float _2500 = _2497 * _2206;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2368 < ((_2366 >> 12u) & 15u))
            {
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2632 = _2351;
                float _2633 = _2353;
                float _2634 = _2355;
                float _2635 = _2357;
                float _2636 = _2359;
                float _2637 = _2361;
                uint _2638 = _2368;
                uint _2647;
                bool _2648;
                for (;;)
                {
                    _2647 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2638 << 2u)) >> 2u)).x;
                    _2648 = _2647 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2648)
                    {
                        frontier_phi_77_pred = _2637;
                        frontier_phi_77_pred_1 = _2636;
                        frontier_phi_77_pred_2 = _2635;
                        frontier_phi_77_pred_3 = _2634;
                        frontier_phi_77_pred_4 = _2633;
                        frontier_phi_77_pred_5 = _2632;
                    }
                    else
                    {
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _2854 = _2632;
                        float _2855 = _2633;
                        float _2856 = _2634;
                        float _2857 = _2635;
                        float _2858 = _2636;
                        float _2859 = _2637;
                        uint _2860 = _2647;
                        uint _2861;
                        vec4 _2886;
                        float _2887;
                        vec4 _2902;
                        vec3 _2914;
                        vec4 _2930;
                        vec4 _2946;
                        float _2993;
                        bool _2994;
                        for (;;)
                        {
                            uint _2871 = ((_2638 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2860));
                            _2861 = (_2860 + 4294967295u) & _2860;
                            uint _2873 = _2871 * 40u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            _2887 = _2886.w;
                            uint _2889 = (_2871 * 40u) + 4u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2904 = (_2871 * 40u) + 8u;
                            _2914 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x));
                            uint _2917 = (_2871 * 40u) + 16u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2933 = (_2871 * 40u) + 20u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2949 = (_2871 * 40u) + 24u;
                            vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2968 = (_2871 * 40u) + 28u;
                            vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            _2993 = fma(_2206, _2981.z, fma(_2205, _2981.y, _2981.x * _2204)) + _2981.w;
                            _2994 = !((fma(_2206, _2962.z, fma(_2205, _2962.y, _2962.x * _2204)) + _2962.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2994)
                            {
                                float _3021 = _2886.x - _2204;
                                float _3022 = _2886.y - _2205;
                                float _3023 = _2886.z - _2206;
                                float _3024 = dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023));
                                float _3027 = inversesqrt(_3024);
                                float _3028 = _3027 * _3021;
                                float _3029 = _3027 * _3022;
                                float _3030 = _3027 * _3023;
                                float _3034 = 1.0 - (_3024 / (_2887 * _2887));
                                float _4117 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3035 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3039 = sqrt(_3024) * _2902.w;
                                float _3041 = 1.39999997615814208984375 / (_3039 + 1.39999997615814208984375);
                                float _3042 = _3041 * _3041;
                                float _3045 = ((1.0 - _3042) * dot(vec3(_3028, _3029, _3030), vec3(_430, _433, _436))) + _3042;
                                float _3048 = _3039 * _3039;
                                float _3052 = (fma(_2206, _2930.z, fma(_2205, _2930.y, _2930.x * _2204)) + _2930.w) / _2993;
                                float _3053 = (fma(_2206, _2946.z, fma(_2205, _2946.y, _2946.x * _2204)) + _2946.w) / _2993;
                                float _3057 = 1.0 - dot(vec2(_3052, _3053), vec2(_3052, _3053));
                                float _4133 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3058 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                                float _3059 = _3058 * (((isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0))) * _3035) / ((_3048 * 0.699999988079071044921875) + 1.0));
                                float _3071 = exp2(log2(1.0 / ((_3048 * 3.5) + 5.0)) * 0.25);
                                float _3072 = 1.0 - _506;
                                float _3079 = sqrt(1.0 - ((1.0 - (_3072 * _3072)) * (1.0 - (_3071 * _3071))));
                                float _3080 = _3079 * _3079;
                                float _3081 = _3080 * _3080;
                                float _3082 = _3028 - _2498;
                                float _3083 = _3029 - _2499;
                                float _3084 = _3030 - _2500;
                                float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                                float _3092 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2498, (-0.0) - _2499, (-0.0) - _2500));
                                float _4144 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3095 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                                float _3096 = dot(vec3(_430, _433, _436), vec3(_3088 * _3082, _3088 * _3083, _3088 * _3084));
                                float _4155 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3099 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                                float _3103 = ((_3099 * _3099) * (_3081 + (-1.0))) + 1.0;
                                float _3104 = _3041 * _3080;
                                float _3105 = _3104 * _3104;
                                float _3111 = ((1.0 - _3105) * dot(vec3(_430, _433, _436), vec3(_3028, _3029, _3030))) + _3105;
                                float _4166 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3113 = 1.0 - _3080;
                                float _3123 = (0.5 / (((_3112 * ((_3095 * _3113) + _3080)) + 9.9999999392252902907785028219223e-09) + (((_3112 * _3113) + _3080) * _3095))) * _3112;
                                float _4177 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3133 = (_3058 * _3035) * (((_3081 * 3.1415927410125732421875) * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) / ((_3103 * _3103) * ((_3048 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3059 * _2902.y;
                                frontier_phi_83_pred_1 = _3059 * _2902.x;
                                frontier_phi_83_pred_2 = _3133 * _2914.z;
                                frontier_phi_83_pred_3 = _3133 * _2914.y;
                                frontier_phi_83_pred_4 = _3133 * _2914.x;
                                frontier_phi_83_pred_5 = _3059 * _2902.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3141 = frontier_phi_83_pred;
                            _3140 = frontier_phi_83_pred_1;
                            _3139 = frontier_phi_83_pred_2;
                            _3138 = frontier_phi_83_pred_3;
                            _3137 = frontier_phi_83_pred_4;
                            _3142 = frontier_phi_83_pred_5;
                            _2844 = _3140 + _2857;
                            _2845 = _3141 + _2858;
                            _2846 = _3142 + _2859;
                            _2841 = _3137 + _2854;
                            _2842 = _3138 + _2855;
                            _2843 = _3139 + _2856;
                            if (_2861 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2861;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2846;
                        frontier_phi_77_pred_1 = _2845;
                        frontier_phi_77_pred_2 = _2844;
                        frontier_phi_77_pred_3 = _2843;
                        frontier_phi_77_pred_4 = _2842;
                        frontier_phi_77_pred_5 = _2841;
                    }
                    _2483 = frontier_phi_77_pred;
                    _2481 = frontier_phi_77_pred_1;
                    _2479 = frontier_phi_77_pred_2;
                    _2477 = frontier_phi_77_pred_3;
                    _2475 = frontier_phi_77_pred_4;
                    _2473 = frontier_phi_77_pred_5;
                    uint _2639 = _2638 + 1u;
                    if (_2639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2632 = _2473;
                        _2633 = _2475;
                        _2634 = _2477;
                        _2635 = _2479;
                        _2636 = _2481;
                        _2637 = _2483;
                        _2638 = _2639;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2477;
                frontier_phi_58_59_ladder_1 = _2483;
                frontier_phi_58_59_ladder_2 = _2481;
                frontier_phi_58_59_ladder_3 = _2479;
                frontier_phi_58_59_ladder_4 = _2475;
                frontier_phi_58_59_ladder_5 = _2473;
            }
            else
            {
                frontier_phi_58_59_ladder = _2355;
                frontier_phi_58_59_ladder_1 = _2361;
                frontier_phi_58_59_ladder_2 = _2359;
                frontier_phi_58_59_ladder_3 = _2357;
                frontier_phi_58_59_ladder_4 = _2353;
                frontier_phi_58_59_ladder_5 = _2351;
            }
            _2472 = frontier_phi_58_59_ladder_5;
            _2474 = frontier_phi_58_59_ladder_4;
            _2476 = frontier_phi_58_59_ladder;
            _2478 = frontier_phi_58_59_ladder_3;
            _2480 = frontier_phi_58_59_ladder_2;
            _2482 = frontier_phi_58_59_ladder_1;
        }
        float _2487 = isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0));
        _2263 = (_2487 * _2478) + _1699;
        _2265 = (_2487 * _2480) + _1701;
        _2267 = (_2487 * _2482) + _1703;
        _2269 = ((_2472 * _475) * _2487) + _2044;
        _2271 = ((_2474 * _477) * _2487) + _2046;
        _2273 = ((_2476 * _478) * _2487) + _2048;
    }
    else
    {
        _2263 = _1699;
        _2265 = _1701;
        _2267 = _1703;
        _2269 = _2044;
        _2271 = _2046;
        _2273 = _2048;
    }
    float _4193 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4204 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4215 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _2290 = ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2263 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _490))) + ((_2269 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1332)) * cbPerFrame._m0[3u].x);
    float _2291 = ((isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2265 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _490))) + ((_2271 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1332)) * cbPerFrame._m0[3u].x);
    float _2292 = ((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2267 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _490))) + ((_2273 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1332)) * cbPerFrame._m0[3u].x);
    uint _2293 = _449 + 6u;
    float _2301 = _409 / cbSceneParam._m0[86u].x;
    float _2302 = _410 / cbSceneParam._m0[86u].y;
    vec4 _2316 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, (log2((isnan(cbSceneParam._m0[77u].w) ? _330 : (isnan(_330) ? cbSceneParam._m0[77u].w : min(_330, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2318 = _2316.x;
    float _2319 = _2316.y;
    float _2320 = _2316.z;
    float _2321 = _2316.w;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    if (_330 > cbSceneParam._m0[78u].w)
    {
        float _2376 = isnan(_330) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _330 : min(cbSceneParam._m0[80u].w, _330));
        float _2377 = _2376 / _330;
        float _2388 = _2377 * _381;
        float _2389 = _382 * _2377;
        float _2390 = (-0.0) - _2389;
        float _2392 = _2377 * _383;
        float _2394 = (cbSceneParam._m0[77u].w * _2390) / _2376;
        float _2395 = _2394 + cbSceneParam._m0[79u].w;
        float _2396 = cbSceneParam._m0[79u].w - _2389;
        float _2402 = sqrt(((_2388 * _2388) + (_2389 * _2389)) + (_2392 * _2392));
        float _2405 = (1.0 - (cbSceneParam._m0[77u].w / _2376)) * _2402;
        float _2410 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2412 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2589;
        if (abs((_2390 - _2394) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2589 = ((((_2395 > 0.0) ? exp2(_2410 * _2395) : (2.0 - exp2(_2412 * _2395))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2405;
        }
        else
        {
            float _2533 = 1.0 / cbSceneParam._m0[80u].x;
            float _2534 = isnan(_2396) ? _2395 : (isnan(_2395) ? _2396 : max(_2395, _2396));
            float _2535 = isnan(_2396) ? _2395 : (isnan(_2395) ? _2396 : min(_2395, _2396));
            float _2544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : min(_2534, 0.0));
            float _2545 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : min(_2535, 0.0));
            _2589 = ((abs(_2402 / _2390) * cbSceneParam._m0[80u].y) * ((((_2544 - _2545) * 2.0) - ((exp2(_2410 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0)))) - exp2(_2410 * (isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0))))) * _2533)) - ((exp2(_2412 * _2544) - exp2(_2412 * _2545)) * _2533))) + (_2405 * cbSceneParam._m0[80u].z);
        }
        vec4 _2591 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, 1.0), 0.0);
        float _2600 = exp2((_2589 * (-1.44269502162933349609375)) * (1.0 - _2591.w));
        float _2601 = log2(_2600);
        float _2617 = log2(_2321);
        _2414 = (exp2(_2617 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2601 * cbSceneParam._m0[78u].x)) * _2591.x) / cbSceneParam._m0[78u].x)) + _2318;
        _2416 = (exp2(_2617 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2601 * cbSceneParam._m0[78u].y)) * _2591.y) / cbSceneParam._m0[78u].y)) + _2319;
        _2418 = (exp2(_2617 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2601 * cbSceneParam._m0[78u].z)) * _2591.z) / cbSceneParam._m0[78u].z)) + _2320;
        _2420 = _2600 * _2321;
    }
    else
    {
        _2414 = _2318;
        _2416 = _2319;
        _2418 = _2320;
        _2420 = _2321;
    }
    bool _2627;
    vec4 _2430;
    vec4 _2452;
    float _2454;
    float _2458;
    float _2459;
    float _2460;
    float _2461;
    bool _2471;
    for (;;)
    {
        _2430 = cbMatDynParam._m0[0u];
        float _2432 = roundEven(_2430.y);
        bool _2433 = _2432 == 3.0;
        float _2434 = log2(_2420);
        float _2441 = exp2(_2434 * cbSceneParam._m0[78u].x) * _2290;
        float _2442 = exp2(_2434 * cbSceneParam._m0[78u].y) * _2291;
        float _2443 = exp2(_2434 * cbSceneParam._m0[78u].z) * _2292;
        float _2450 = _397 + (-0.5);
        _2452 = cbMtdParam._m0[1u];
        _2454 = _2452.y * _2450;
        float _2457 = (_2432 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2458 = _2457 * (_2433 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2414)));
        _2459 = _2457 * (_2433 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2416)));
        _2460 = _2457 * (_2433 ? _2443 : (_2443 + (cbSceneParam._m0[72u].w * _2418)));
        _2461 = _2450 * 0.999000012874603271484375;
        _2471 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2471)
        {
            if ((cbInstanceData._m0[_449 + 7u].x + _2461) < 0.5)
            {
                _2627 = true;
                break;
            }
        }
        uint _2568 = _451 + uint(_2430.w);
        if ((cbInstanceData._m0[_2568].w < 1.0) && ((cbInstanceData._m0[_2568].w + _2461) < 0.5))
        {
            _2627 = true;
            break;
        }
        if ((_2454 + 1.0) < _2452.x)
        {
            _2627 = true;
            break;
        }
        _2627 = false;
        break;
    }
    float _2832;
    if (_2627)
    {
        discard_state = true;
        _2832 = 0.0;
    }
    else
    {
        _2832 = cbInstanceData._m0[_2293].w;
    }
    SV_Target.x = _2458;
    SV_Target.y = _2459;
    SV_Target.z = _2460;
    SV_Target.w = _2832;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2293].w;
    discard_exit();
}


