#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 NORMAL;
layout(location = 2) in vec4 TANGENT;
layout(location = 3) in vec3 TEXCOORD;
layout(location = 3, component = 3) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _139 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _140 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _141 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _146 = inversesqrt(dot(vec3(_139, _140, _141), vec3(_139, _140, _141)));
    float _153 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _160 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _180 = ((cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.x;
    float _181 = ((cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.y;
    vec4 _194 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_180 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_181 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _200 = _194.x * cbMtdParam._m0[9u].x;
    float _201 = _194.y * cbMtdParam._m0[9u].y;
    float _202 = _194.z * cbMtdParam._m0[9u].z;
    vec4 _215 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _180) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _181) + cbTextureTilingScale._m0[1u].w));
    float _219 = _215.z;
    float _223 = (_215.x * 2.0) + (-1.0);
    float _225 = (_215.y * 2.0) + (-1.0);
    float _226 = dot(vec2(_223, _225), vec2(_223, _225));
    float _429 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _232 = sqrt(1.0 - (isnan(1.0) ? _429 : (isnan(_429) ? 1.0 : min(_429, 1.0))));
    float _235 = fma(_232, _153 * NORMAL.x, fma(_225, _160 * TANGENT.x, (_146 * _139) * _223));
    float _238 = fma(_232, _153 * NORMAL.y, fma(_225, _160 * TANGENT.y, (_146 * _140) * _223));
    float _241 = fma(_232, _153 * NORMAL.z, fma(_225, _160 * TANGENT.z, (_146 * _141) * _223));
    float _245 = inversesqrt(dot(vec3(_235, _238, _241), vec3(_235, _238, _241)));
    float _440 = isnan(0.0) ? _219 : (isnan(_219) ? 0.0 : max(_219, 0.0));
    float _451 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _247 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
    float _462 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _248 = isnan(1.0) ? _462 : (isnan(_462) ? 1.0 : min(_462, 1.0));
    float _473 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _249 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
    float _484 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    uint _252 = uint(roundEven(NORMAL.w));
    vec4 _257 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _259 = _257.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _322 = (cbMatDynParam._m0[5u].x * TEXCOORD_8) + cbMatDynParam._m0[5u].y;
        float _495 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
        float _323 = isnan(1.0) ? _495 : (isnan(_495) ? 1.0 : min(_495, 1.0));
        float _327 = (cbMatDynParam._m0[5u].z * TEXCOORD_8) + cbMatDynParam._m0[5u].w;
        float _506 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0))) - _323)) + _323) < ((_259 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _356;
    uint _279;
    vec4 _284;
    float _291;
    float _292;
    float _293;
    float _297;
    vec4 _301;
    float _303;
    float _304;
    bool _315;
    for (;;)
    {
        _279 = _252 * 13u;
        _284 = cbInstanceData._m0[(_279 + 9u) + uint(cbMatDynParam._m0[0u].w)];
        float _288 = (cbMtdParam._m0[0u].x * _247) * _284.x;
        float _289 = (cbMtdParam._m0[0u].y * _248) * _284.y;
        float _290 = (cbMtdParam._m0[0u].z * _249) * _284.z;
        float _517 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
        _291 = isnan(1.0) ? _517 : (isnan(_517) ? 1.0 : min(_517, 1.0));
        float _528 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
        _292 = isnan(1.0) ? _528 : (isnan(_528) ? 1.0 : min(_528, 1.0));
        float _539 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
        _293 = isnan(1.0) ? _539 : (isnan(_539) ? 1.0 : min(_539, 1.0));
        _297 = cbInstanceData._m0[_279 + 6u].w;
        float _298 = _259 + (-0.5);
        _301 = cbMtdParam._m0[1u];
        _303 = _301.y * _298;
        _304 = _298 * 0.999000012874603271484375;
        _315 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_315)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _304) < 0.5)
            {
                _356 = true;
                break;
            }
        }
        if ((_284.w < 1.0) && ((_284.w + _304) < 0.5))
        {
            _356 = true;
            break;
        }
        if ((_303 + 1.0) < _301.x)
        {
            _356 = true;
            break;
        }
        _356 = false;
        break;
    }
    if (_356)
    {
        discard_state = true;
    }
    bool _382 = cbMtdParam._m0[1u].z != 0.0;
    float _383 = _382 ? _297 : 0.0;
    SV_Target.x = ((_235 * 0.5) * _245) + 0.500488758087158203125;
    SV_Target.y = ((_238 * 0.5) * _245) + 0.500488758087158203125;
    SV_Target.z = ((_241 * 0.5) * _245) + 0.500488758087158203125;
    SV_Target.w = _383;
    SV_Target_1.x = isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0));
    SV_Target_1.y = isnan(1.0) ? _440 : (isnan(_440) ? 1.0 : min(_440, 1.0));
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _382 ? _297 : TEXCOORD.z;
    SV_Target_2.x = _291;
    SV_Target_2.y = _292;
    SV_Target_2.z = _293;
    SV_Target_2.w = _382 ? _297 : (float(floatBitsToUint(cbInstanceData._m0[_279 + 5u]).x) * 0.0039215688593685626983642578125);
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _383;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = _383;
    discard_exit();
}


