#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _881;
float _3272;
float _3273;
float _3274;
float _3275;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = cbMtdParam._m0[10u].x + _244.x;
    vec4 _263 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3284 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0))));
    float _283 = fma(_280, _194 * NORMAL.x, fma(_273, _201 * TANGENT.x, (_187 * _180) * _271));
    float _286 = fma(_280, _194 * NORMAL.y, fma(_273, _201 * TANGENT.y, (_187 * _181) * _271));
    float _289 = fma(_280, _194 * NORMAL.z, fma(_273, _201 * TANGENT.z, (_187 * _182) * _271));
    float _293 = inversesqrt(dot(vec3(_283, _286, _289), vec3(_283, _286, _289)));
    float _294 = _293 * _283;
    float _295 = _293 * _286;
    float _296 = _293 * _289;
    float _3295 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _297 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
    float _3306 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3317 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3328 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3339 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _301 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _317 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _358 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _368 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _358);
    float _369 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _358);
    float _370 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _358);
    float _374 = inversesqrt(dot(vec3(_368, _369, _370), vec3(_368, _369, _370)));
    float _375 = _368 * _374;
    float _376 = _369 * _374;
    float _377 = _370 * _374;
    vec4 _382 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _384 = _382.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _560 = sqrt(((_368 * _368) + (_369 * _369)) + (_370 * _370));
        float _566 = (cbMatDynParam._m0[5u].x * _560) + cbMatDynParam._m0[5u].y;
        float _3350 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
        float _567 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
        float _571 = (cbMatDynParam._m0[5u].z * _560) + cbMatDynParam._m0[5u].w;
        float _3361 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) - _567)) + _567) < ((_384 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _396 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _397 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _417 = fma(_296, cbSceneParam._m0[5u].z, fma(_295, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _294));
    float _420 = fma(_296, cbSceneParam._m0[6u].z, fma(_295, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _294));
    float _423 = fma(_296, cbSceneParam._m0[7u].z, fma(_295, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _294));
    uint _436 = uint(roundEven(NORMAL.w)) * 13u;
    uint _438 = _436 + 9u;
    uint _439 = _438 + uint(cbMatDynParam._m0[0u].w);
    float _445 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_439].x;
    float _446 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0)))) * cbInstanceData._m0[_439].y;
    float _447 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0)))) * cbInstanceData._m0[_439].z;
    float _3372 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _3383 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _3394 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _451 = 1.0 - _301;
    float _452 = _448 * _451;
    float _453 = _449 * _451;
    float _454 = _450 * _451;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _301;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _301;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _301;
    float _462 = _459 + 0.039999999105930328369140625;
    float _464 = _460 + 0.039999999105930328369140625;
    float _465 = _461 + 0.039999999105930328369140625;
    vec4 _474 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _396, cbSceneParam._m0[86u].y * _397));
    float _477 = _474.x * TEXCOORD.z;
    float _478 = dot(vec3(_294, _295, _296), vec3(_375, _376, _377));
    float _481 = _478 * 2.0;
    float _485 = (_481 * _294) - _375;
    float _486 = (_481 * _295) - _376;
    float _487 = (_481 * _296) - _377;
    float _491 = abs(dot(vec3(_375, _376, _377), vec3(_294, _295, _296)));
    float _3405 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _493 = sqrt(_297);
    float _506 = exp2((_493 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_493 * 3.0));
    float _512 = (1.0 - _506) * ((_493 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _513 = _506 * _493;
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _880;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _605 = fma(_549, cbModelParam._m0[26u].z, fma(_545, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _541));
        float _609 = fma(_549, cbModelParam._m0[27u].z, fma(_545, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _541));
        float _613 = fma(_549, cbModelParam._m0[28u].z, fma(_545, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _541));
        float _638 = _541 + _294;
        float _639 = _545 + _295;
        float _640 = _549 + _296;
        float _650 = fma(_640, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638)) - _605;
        float _651 = fma(_640, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638)) - _609;
        float _652 = fma(_640, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638)) - _613;
        float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
        float _669 = ((_656 * _650) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_605 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_656 * _651) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_609 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_656 * _652) / cbModelParam._m0[34u].z) + ((((((_613 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        float _708 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_674.x + (-0.5));
        float _710 = _708 * (_674.y + (-0.5));
        float _711 = _708 * (_674.z + (-0.5));
        float _718 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_681.x + (-0.5));
        float _720 = _718 * (_681.y + (-0.5));
        float _721 = _718 * (_681.z + (-0.5));
        float _728 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_688.x + (-0.5));
        float _730 = _728 * (_688.y + (-0.5));
        float _731 = _728 * (_688.z + (-0.5));
        float _738 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_695.x + (-0.5));
        float _740 = _738 * (_695.y + (-0.5));
        float _741 = _738 * (_695.z + (-0.5));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = _709 * 0.5;
        float _746 = _719 * 0.5;
        float _747 = _729 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _762 = (dot(vec3(_294, _295, _296), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _772 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3453 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_774 + 1.0))) + _779) * _742;
        float _789 = _710 * 0.5;
        float _790 = _720 * 0.5;
        float _791 = _730 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _805 = (dot(vec3(_294, _295, _296), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _814 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3486 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_816 + 1.0))) + _821) * _743;
        float _831 = _711 * 0.5;
        float _832 = _721 * 0.5;
        float _833 = _731 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_294, _295, _296), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3519 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_858 + 1.0))) + _863) * _744;
        _880 = _711;
        _882 = _710;
        _883 = _709;
        _884 = _721;
        _885 = _720;
        _886 = _719;
        _887 = _731;
        _888 = _730;
        _889 = _729;
        _890 = _744;
        _891 = _743;
        _892 = _742;
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
    }
    else
    {
        _880 = _881;
        _882 = _881;
        _883 = _881;
        _884 = _881;
        _885 = _881;
        _886 = _881;
        _887 = _881;
        _888 = _881;
        _889 = _881;
        _890 = _881;
        _891 = _881;
        _892 = _881;
        _893 = 0.0;
        _894 = 0.0;
        _895 = 0.0;
    }
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _924 = fma(_549, cbModelParam._m0[30u].z, fma(_545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _541));
        float _928 = fma(_549, cbModelParam._m0[31u].z, fma(_545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _541));
        float _932 = fma(_549, cbModelParam._m0[32u].z, fma(_545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _541));
        float _955 = _541 + _294;
        float _956 = _545 + _295;
        float _957 = _549 + _296;
        float _967 = fma(_957, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955)) - _924;
        float _968 = fma(_957, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955)) - _928;
        float _969 = fma(_957, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955)) - _932;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_924 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_928 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[35u].z) + ((((((_932 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1023 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_990.x + (-0.5));
        float _1025 = _1023 * (_990.y + (-0.5));
        float _1026 = _1023 * (_990.z + (-0.5));
        float _1033 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_997.x + (-0.5));
        float _1035 = _1033 * (_997.y + (-0.5));
        float _1036 = _1033 * (_997.z + (-0.5));
        float _1043 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1004.x + (-0.5));
        float _1045 = _1043 * (_1004.y + (-0.5));
        float _1046 = _1043 * (_1004.z + (-0.5));
        float _1053 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1011.x + (-0.5));
        float _1055 = _1053 * (_1011.y + (-0.5));
        float _1056 = _1053 * (_1011.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_294, _295, _296), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3582 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_1087 + 1.0))) + _1092) * _1057;
        float _1102 = _1025 * 0.5;
        float _1103 = _1035 * 0.5;
        float _1104 = _1045 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_294, _295, _296), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3615 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_1129 + 1.0))) + _1134) * _1058;
        float _1144 = _1026 * 0.5;
        float _1145 = _1036 * 0.5;
        float _1146 = _1046 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_294, _295, _296), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3648 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1171 + 1.0))) + _1176) * _1059;
        _1193 = _1026;
        _1194 = _1025;
        _1195 = _1024;
        _1196 = _1036;
        _1197 = _1035;
        _1198 = _1034;
        _1199 = _1046;
        _1200 = _1045;
        _1201 = _1044;
        _1202 = _1059;
        _1203 = _1058;
        _1204 = _1057;
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
    }
    else
    {
        _1193 = _881;
        _1194 = _881;
        _1195 = _881;
        _1196 = _881;
        _1197 = _881;
        _1198 = _881;
        _1199 = _881;
        _1200 = _881;
        _1201 = _881;
        _1202 = _881;
        _1203 = _881;
        _1204 = _881;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _893)) + _893;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _894)) + _894;
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _895)) + _895;
    float _1240 = fma(_1219, cbSceneParam._m0[89u].z, fma(_1218, cbSceneParam._m0[89u].y, _1217 * cbSceneParam._m0[89u].x));
    float _1243 = fma(_1219, cbSceneParam._m0[90u].z, fma(_1218, cbSceneParam._m0[90u].y, _1217 * cbSceneParam._m0[90u].x));
    float _1246 = fma(_1219, cbSceneParam._m0[91u].z, fma(_1218, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1217));
    float _1261 = _485 * 0.5;
    float _1262 = _486 * 0.5;
    float _1263 = _487 * 0.5;
    float _1264 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1267 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1270 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1304;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1277 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_880, _884, _887, _890));
        float _1281 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_882, _885, _888, _891));
        float _1285 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_883, _886, _889, _892));
        float _1292 = dot(vec4(cbModelParam._m0[39u]), vec4(_1261, _1262, _1263, 1.0));
        _1304 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1292) ? 0.0 : (isnan(0.0) ? _1292 : max(0.0, _1292))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1304 = 1.0;
    }
    float _1315;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1306 = dot(vec4(cbModelParam._m0[40u]), vec4(_1261, _1262, _1263, 1.0));
        _1315 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1315 = 1.0;
    }
    float _1319 = (_1315 * cbModelParam._m0[1u].x) + (_1304 * (1.0 - cbModelParam._m0[1u].x));
    float _1329 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _297);
    float _1330 = isnan(_1329) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1329 : min(cbModelParam._m0[25u].z, _1329));
    float _1412;
    float _1414;
    float _1416;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1379 = fma(_549, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _541)) + cbModelParam._m0[13u].w;
        float _1383 = fma(_549, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _541)) + cbModelParam._m0[14u].w;
        float _1387 = fma(_549, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _541)) + cbModelParam._m0[15u].w;
        float _1390 = fma(_487, cbModelParam._m0[13u].z, fma(_486, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485));
        float _1393 = fma(_487, cbModelParam._m0[14u].z, fma(_486, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485));
        float _1396 = fma(_487, cbModelParam._m0[15u].z, fma(_486, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485));
        float _1424;
        if (_1390 > 0.0)
        {
            _1424 = abs((1.0 - _1379) / _1390);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1379 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1424 = frontier_phi_17_15_ladder;
        }
        float _1632;
        if (_1393 > 0.0)
        {
            _1632 = abs((1.0 - _1383) / _1393);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1383 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1632 = frontier_phi_26_22_ladder;
        }
        float _1886;
        if (_1396 > 0.0)
        {
            _1886 = abs((1.0 - _1387) / _1396);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1387 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1886 = frontier_phi_38_33_ladder;
        }
        float _1888 = isnan(_1632) ? _1424 : (isnan(_1424) ? _1632 : min(_1424, _1632));
        float _1889 = isnan(_1886) ? _1888 : (isnan(_1888) ? _1886 : min(_1888, _1886));
        float _1893 = (_1889 * _1390) + _1379;
        float _1894 = (_1889 * _1393) + _1383;
        float _1895 = (_1889 * _1396) + _1387;
        float _1896 = _1889 * 9.9999997473787516355514526367188e-05;
        float _1898 = (-1.0) - _1896;
        float _1900 = _1896 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1895 > _1900) || ((_1895 < _1898) || ((_1894 > _1900) || ((_1894 < _1898) || ((_1893 < _1898) || (_1893 > _1900))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2023 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1895, cbModelParam._m0[9u].z, fma(_1894, cbModelParam._m0[9u].y, _1893 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1895, cbModelParam._m0[10u].z, fma(_1894, cbModelParam._m0[10u].y, _1893 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1895, cbModelParam._m0[11u].z, fma(_1894, cbModelParam._m0[11u].y, _1893 * cbModelParam._m0[11u].x))), _1330);
            frontier_phi_16_38_ladder = _2023.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2023.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2023.x * cbModelParam._m0[1u].y;
        }
        _1412 = frontier_phi_16_38_ladder_2;
        _1414 = frontier_phi_16_38_ladder_1;
        _1416 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_485, _486, _487), _1330);
        _1412 = _1400.x * cbModelParam._m0[1u].y;
        _1414 = _1400.y * cbModelParam._m0[1u].y;
        _1416 = _1400.z * cbModelParam._m0[1u].y;
    }
    float _1420 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _297);
    float _1421 = isnan(_1420) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1420 : min(cbModelParam._m0[25u].w, _1420));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1478 = fma(_549, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _541)) + cbModelParam._m0[21u].w;
        float _1482 = fma(_549, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _541)) + cbModelParam._m0[22u].w;
        float _1486 = fma(_549, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _541)) + cbModelParam._m0[23u].w;
        float _1489 = fma(_487, cbModelParam._m0[21u].z, fma(_486, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485));
        float _1492 = fma(_487, cbModelParam._m0[22u].z, fma(_486, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485));
        float _1495 = fma(_487, cbModelParam._m0[23u].z, fma(_486, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485));
        float _1637;
        if (_1489 > 0.0)
        {
            _1637 = abs((1.0 - _1478) / _1489);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1478 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1637 = frontier_phi_28_24_ladder;
        }
        float _1913;
        if (_1492 > 0.0)
        {
            _1913 = abs((1.0 - _1482) / _1492);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1482 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1913 = frontier_phi_40_35_ladder;
        }
        float _2126;
        if (_1495 > 0.0)
        {
            _2126 = abs((1.0 - _1486) / _1495);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1486 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2126 = frontier_phi_49_46_ladder;
        }
        float _2128 = isnan(_1913) ? _1637 : (isnan(_1637) ? _1913 : min(_1637, _1913));
        float _2129 = isnan(_2126) ? _2128 : (isnan(_2128) ? _2126 : min(_2128, _2126));
        float _2133 = (_2129 * _1489) + _1478;
        float _2134 = (_2129 * _1492) + _1482;
        float _2135 = (_2129 * _1495) + _1486;
        float _2136 = _2129 * 9.9999997473787516355514526367188e-05;
        float _2137 = (-1.0) - _2136;
        float _2139 = _2136 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2135 > _2139) || ((_2135 < _2137) || ((_2134 > _2139) || ((_2134 < _2137) || ((_2133 < _2137) || (_2133 > _2139))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2334 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2135, cbModelParam._m0[17u].z, fma(_2134, cbModelParam._m0[17u].y, _2133 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2135, cbModelParam._m0[18u].z, fma(_2134, cbModelParam._m0[18u].y, _2133 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2135, cbModelParam._m0[19u].z, fma(_2134, cbModelParam._m0[19u].y, _2133 * cbModelParam._m0[19u].x))), _1421);
            frontier_phi_25_49_ladder = _2334.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2334.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2334.x * cbModelParam._m0[1u].z;
        }
        _1514 = frontier_phi_25_49_ladder_2;
        _1516 = frontier_phi_25_49_ladder_1;
        _1518 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1498 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_485, _486, _487), _1421);
        _1514 = _1498.x * cbModelParam._m0[1u].z;
        _1516 = _1498.y * cbModelParam._m0[1u].z;
        _1518 = _1498.z * cbModelParam._m0[1u].z;
    }
    float _1531 = (((_512 * _462) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1514 - _1412)) + _1412);
    float _1533 = (((_512 * _464) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1516 - _1414)) + _1414);
    float _1535 = (((_512 * _465) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1518 - _1416)) + _1416);
    float _1538 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1533, cbSceneParam._m0[89u].y, _1531 * cbSceneParam._m0[89u].x));
    float _1541 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1533, cbSceneParam._m0[90u].y, _1531 * cbSceneParam._m0[90u].x));
    float _1544 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1533, cbSceneParam._m0[91u].y, _1531 * cbSceneParam._m0[91u].x));
    uvec4 _1554 = floatBitsToUint(cbInstanceData._m0[_436 + 5u]);
    uint _1556 = _1554.x * 14u;
    uint _1557 = _1556 + 13u;
    float _1564 = _477 + (-1.0);
    float _1569 = (cbLight._m0[_1557].x * _1564) + 1.0;
    float _1570 = (cbLight._m0[_1557].y * _1564) + 1.0;
    float _1571 = (cbLight._m0[_1557].z * _1564) + 1.0;
    float _1572 = (cbLight._m0[_1557].w * _1564) + 1.0;
    uint _1573 = _1556 + 5u;
    float _1579 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
    uint _1583 = _1556 + 4u;
    float _1590 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
    uint _1594 = _1556 | 1u;
    float _1605 = dot(vec3(cbLight._m0[_1556].xyz), vec3(_294, _295, _296));
    float _1608 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_294, _295, _296));
    float _3784 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _3795 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _1613 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * 0.3183098733425140380859375;
    float _1615 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.3183098733425140380859375;
    float _1622 = ((cbLight._m0[_1573].x * _1579) * _1615) + ((cbLight._m0[_1583].x * _1590) * _1613);
    float _1623 = ((_1579 * cbLight._m0[_1573].y) * _1615) + ((_1590 * cbLight._m0[_1583].y) * _1613);
    float _1624 = ((_1579 * cbLight._m0[_1573].z) * _1615) + ((_1590 * cbLight._m0[_1583].z) * _1613);
    uvec4 _1629 = floatBitsToUint(cbLight._m0[_1556 + 12u]);
    bool _1631 = _1629.x == 0u;
    float _1642;
    float _1644;
    float _1646;
    if (_1631)
    {
        _1642 = _1622;
        _1644 = _1623;
        _1646 = _1624;
    }
    else
    {
        uint _1650 = _1556 + 6u;
        float _1666 = (dot(vec3(cbLight._m0[_1556 + 2u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _1667 = _1666 * _1666;
        float _3806 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1669 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
        _1642 = (((cbLight._m0[_1650].x * 0.3183098733425140380859375) * _1668) * _1669) + _1622;
        _1644 = (((cbLight._m0[_1650].y * 0.3183098733425140380859375) * _1668) * _1669) + _1623;
        _1646 = (((cbLight._m0[_1650].z * 0.3183098733425140380859375) * _1668) * _1669) + _1624;
    }
    bool _1649 = _1629.y == 0u;
    float _1687;
    float _1689;
    float _1691;
    if (_1649)
    {
        _1687 = _1642;
        _1689 = _1644;
        _1691 = _1646;
    }
    else
    {
        uint _1857 = _1556 + 7u;
        float _1873 = (dot(vec3(cbLight._m0[_1556 + 3u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _1874 = _1873 * _1873;
        float _3822 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1875 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1876 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1687 = (((cbLight._m0[_1857].x * 0.3183098733425140380859375) * _1875) * _1876) + _1642;
        _1689 = (((cbLight._m0[_1857].y * 0.3183098733425140380859375) * _1875) * _1876) + _1644;
        _1691 = (((cbLight._m0[_1857].z * 0.3183098733425140380859375) * _1875) * _1876) + _1646;
    }
    uint _1694 = _1556 + 8u;
    float _1707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1556].w)) * _297) * 0.949999988079071044921875);
    float _1708 = _1707 * _1707;
    float _1709 = cbLight._m0[_1556].x + _375;
    float _1710 = cbLight._m0[_1556].y + _376;
    float _1711 = cbLight._m0[_1556].z + _377;
    float _1715 = inversesqrt(dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711)));
    float _1716 = _1715 * _1709;
    float _1717 = _1715 * _1710;
    float _1718 = _1715 * _1711;
    float _1719 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1556].xyz));
    float _3838 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1722 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _1723 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1724 = dot(vec3(_294, _295, _296), vec3(_1716, _1717, _1718));
    float _3860 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1727 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _1728 = dot(vec3(cbLight._m0[_1556].xyz), vec3(_1716, _1717, _1718));
    float _3871 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1732 = _1708 * _1708;
    float _1736 = ((_1727 * _1727) * (_1732 + (-1.0))) + 1.0;
    float _1744 = exp2(log2(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * 5.0);
    float _1745 = 0.959999978542327880859375 - _459;
    float _1747 = 0.959999978542327880859375 - _460;
    float _1748 = 0.959999978542327880859375 - _461;
    float _1755 = 1.0 - _1708;
    float _1766 = (0.5 / (((_1723 * ((_1722 * _1755) + _1708)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1755) + _1708) * _1722))) * _1722;
    float _3882 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1768 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1732 / ((_1736 * _1736) * 3.141590118408203125));
    uint _1779 = _1556 + 9u;
    float _1790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1594].w)) * _297) * 0.949999988079071044921875);
    float _1791 = _1790 * _1790;
    float _1792 = cbLight._m0[_1594].x + _375;
    float _1793 = cbLight._m0[_1594].y + _376;
    float _1794 = cbLight._m0[_1594].z + _377;
    float _1798 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
    float _1799 = _1798 * _1792;
    float _1800 = _1798 * _1793;
    float _1801 = _1798 * _1794;
    float _1802 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1594].xyz));
    float _3893 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _1806 = dot(vec3(_294, _295, _296), vec3(_1799, _1800, _1801));
    float _3904 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _1810 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_1799, _1800, _1801));
    float _3915 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1814 = _1791 * _1791;
    float _1818 = ((_1809 * _1809) * (_1814 + (-1.0))) + 1.0;
    float _1825 = exp2(log2(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * 5.0);
    float _1832 = 1.0 - _1791;
    float _1842 = (0.5 / (((_1723 * ((_1805 * _1832) + _1791)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1832) + _1791) * _1805))) * _1805;
    float _3926 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1844 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1814 / ((_1818 * _1818) * 3.141590118408203125));
    float _1854 = (((((_1825 * _1745) + _462) * cbLight._m0[_1779].x) * _1844) * _1579) + (((((_1744 * _1745) + _462) * cbLight._m0[_1694].x) * _1768) * _1590);
    float _1855 = (((((_1825 * _1747) + _464) * cbLight._m0[_1779].y) * _1844) * _1579) + (((((_1744 * _1747) + _464) * cbLight._m0[_1694].y) * _1768) * _1590);
    float _1856 = (((((_1825 * _1748) + _465) * cbLight._m0[_1779].z) * _1844) * _1579) + (((((_1744 * _1748) + _465) * cbLight._m0[_1694].z) * _1768) * _1590);
    float _1918;
    float _1920;
    float _1922;
    if (_1631)
    {
        _1918 = _1854;
        _1920 = _1855;
        _1922 = _1856;
    }
    else
    {
        uint _1924 = _1556 + 2u;
        uint _1928 = _1556 + 10u;
        float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _297) * 0.949999988079071044921875);
        float _1943 = _1942 * _1942;
        float _1944 = cbLight._m0[_1924].x + _375;
        float _1945 = cbLight._m0[_1924].y + _376;
        float _1946 = cbLight._m0[_1924].z + _377;
        float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
        float _1951 = _1950 * _1944;
        float _1952 = _1950 * _1945;
        float _1953 = _1950 * _1946;
        float _1954 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1924].xyz));
        float _3937 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1957 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1958 = dot(vec3(_294, _295, _296), vec3(_1951, _1952, _1953));
        float _3948 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1961 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1962 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_1951, _1952, _1953));
        float _3959 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1966 = _1943 * _1943;
        float _1970 = ((_1961 * _1961) * (_1966 + (-1.0))) + 1.0;
        float _1977 = exp2(log2(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * 5.0);
        float _1984 = 1.0 - _1943;
        float _1994 = (0.5 / (((_1723 * ((_1957 * _1984) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1984) + _1943) * _1957))) * _1957;
        float _3970 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1996 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1966 / ((_1970 * _1970) * 3.141590118408203125));
        float _1997 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
        _1918 = (((((_1977 * _1745) + _462) * cbLight._m0[_1928].x) * _1996) * _1997) + _1854;
        _1920 = (((((_1977 * _1747) + _464) * cbLight._m0[_1928].y) * _1996) * _1997) + _1855;
        _1922 = (((((_1977 * _1748) + _465) * cbLight._m0[_1928].z) * _1996) * _1997) + _1856;
    }
    float _2032;
    float _2034;
    float _2036;
    if (_1649)
    {
        _2032 = _1918;
        _2034 = _1920;
        _2036 = _1922;
    }
    else
    {
        uint _2043 = _1556 + 3u;
        uint _2047 = _1556 + 11u;
        float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _297) * 0.949999988079071044921875);
        float _2062 = _2061 * _2061;
        float _2063 = cbLight._m0[_2043].x + _375;
        float _2064 = cbLight._m0[_2043].y + _376;
        float _2065 = cbLight._m0[_2043].z + _377;
        float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
        float _2070 = _2069 * _2063;
        float _2071 = _2069 * _2064;
        float _2072 = _2069 * _2065;
        float _2073 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2043].xyz));
        float _3986 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _2077 = dot(vec3(_294, _295, _296), vec3(_2070, _2071, _2072));
        float _3997 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _2081 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2070, _2071, _2072));
        float _4008 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2085 = _2062 * _2062;
        float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
        float _2096 = exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0);
        float _2103 = 1.0 - _2062;
        float _2113 = (0.5 / (((_1723 * ((_2076 * _2103) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _2103) + _2062) * _2076))) * _2076;
        float _4019 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2115 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
        float _2116 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _2032 = (((((_2096 * _1745) + _462) * cbLight._m0[_2047].x) * _2115) * _2116) + _1918;
        _2034 = (((((_2096 * _1747) + _464) * cbLight._m0[_2047].y) * _2115) * _2116) + _1920;
        _2036 = (((((_2096 * _1748) + _465) * cbLight._m0[_2047].z) * _2115) * _2116) + _1922;
    }
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    if (_1554.y == 0u)
    {
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2191;
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2191;
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2191;
        uvec4 _2206 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2207 = _2206.x;
        uint _2218 = uint((float(_2206.y) * floor(float(uint(cbSceneParam._m0[85u].y * _397) / _2207))) + floor(float(uint(cbSceneParam._m0[85u].x * _396) / _2207)));
        float _2228 = (log2(_2194 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2229 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        uint _2232 = uint(isnan(14.0) ? _2229 : (isnan(_2229) ? 14.0 : min(_2229, 14.0)));
        uvec4 _2237 = texelFetch(g_lightClusterGridBuffer, int(((_2232 << 2u) + (_2218 << 6u)) >> 2u));
        uint _2238 = _2237.x;
        uint _2239 = _2206.z;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        if (((((1u << ((_2239 >> 4u) & 15u)) + 4294967295u) & _2238) == 0u) || ((_2239 & 240u) == 0u))
        {
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
        }
        else
        {
            float _2340;
            float _2342;
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2492 = 0.0;
            float _2493 = 0.0;
            float _2494 = 0.0;
            float _2495 = 0.0;
            float _2496 = 0.0;
            float _2497 = 0.0;
            uint _2498 = 0u;
            uint _2507;
            bool _2508;
            for (;;)
            {
                _2507 = texelFetch(g_lightClassification, int((((_2232 << 5u) + (_2218 << 9u)) + (_2498 << 2u)) >> 2u)).x;
                _2508 = _2507 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2508)
                {
                    frontier_phi_66_pred = _2492;
                    frontier_phi_66_pred_1 = _2497;
                    frontier_phi_66_pred_2 = _2496;
                    frontier_phi_66_pred_3 = _2495;
                    frontier_phi_66_pred_4 = _2494;
                    frontier_phi_66_pred_5 = _2493;
                }
                else
                {
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    uint _2643;
                    _2637 = _2492;
                    _2638 = _2493;
                    _2639 = _2494;
                    _2640 = _2495;
                    _2641 = _2496;
                    _2642 = _2497;
                    _2643 = _2507;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    for (;;)
                    {
                        uint _2647 = uint(findLSB(_2643)) + (_2498 << 5u);
                        uint _2644 = (_2643 + 4294967295u) & _2643;
                        uint _2649 = _2647 * 48u;
                        vec4 _2663 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 3u)).x));
                        uint _2669 = (_2647 * 48u) + 4u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2669)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 3u)).x));
                        uint _2688 = (_2647 * 48u) + 8u;
                        vec3 _2699 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x));
                        float _2703 = _2663.x - _2192;
                        float _2704 = _2663.y - _2193;
                        float _2705 = _2663.z - _2194;
                        float _2706 = dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705));
                        float _2709 = inversesqrt(_2706);
                        float _2710 = _2709 * _2703;
                        float _2711 = _2709 * _2704;
                        float _2712 = _2709 * _2705;
                        float _2713 = dot(vec3(_417, _420, _423), vec3(_2710, _2711, _2712));
                        float _2718 = 1.0 - (_2706 * _2663.w);
                        float _4045 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                        float _2719 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2720 = sqrt(_2706) * _2682.w;
                        float _2723 = 1.39999997615814208984375 / (_2720 + 1.39999997615814208984375);
                        float _2724 = _2723 * _2723;
                        float _2727 = ((1.0 - _2724) * _2713) + _2724;
                        float _2730 = _2720 * _2720;
                        float _2734 = ((isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0))) * _2719) / ((_2730 * 0.699999988079071044921875) + 1.0);
                        float _2738 = (-0.0) - _2192;
                        float _2739 = (-0.0) - _2193;
                        float _2740 = (-0.0) - _2194;
                        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
                        float _2745 = _2744 * _2738;
                        float _2746 = _2744 * _2739;
                        float _2747 = _2744 * _2740;
                        float _2755 = exp2(log2(1.0 / ((_2730 * 3.5) + 5.0)) * 0.25);
                        float _2756 = 1.0 - _493;
                        float _2763 = sqrt(1.0 - ((1.0 - (_2756 * _2756)) * (1.0 - (_2755 * _2755))));
                        float _2764 = _2763 * _2763;
                        float _2765 = _2764 * _2764;
                        float _2766 = _2745 + _2710;
                        float _2767 = _2746 + _2711;
                        float _2768 = _2747 + _2712;
                        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
                        float _2776 = dot(vec3(_417, _420, _423), vec3(_2745, _2746, _2747));
                        float _4061 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2779 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                        float _2780 = dot(vec3(_417, _420, _423), vec3(_2772 * _2766, _2772 * _2767, _2772 * _2768));
                        float _4072 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2783 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                        float _2787 = ((_2783 * _2783) * (_2765 + (-1.0))) + 1.0;
                        float _2788 = _2723 * _2764;
                        float _2789 = _2788 * _2788;
                        float _2792 = ((1.0 - _2789) * _2713) + _2789;
                        float _4083 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2793 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                        float _2794 = 1.0 - _2764;
                        float _2804 = (0.5 / (((_2793 * ((_2779 * _2794) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2793 * _2794) + _2764) * _2779))) * _2793;
                        float _4094 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2815 = (((_2765 * 3.1415927410125732421875) * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) / ((_2787 * _2787) * ((_2730 * 2.1991131305694580078125) + 3.141590118408203125))) * _2719;
                        _2567 = (_2734 * _2682.x) + _2640;
                        _2568 = (_2734 * _2682.y) + _2641;
                        _2569 = (_2734 * _2682.z) + _2642;
                        _2564 = (_2815 * _2699.x) + _2637;
                        _2565 = (_2815 * _2699.y) + _2638;
                        _2566 = (_2815 * _2699.z) + _2639;
                        if (_2644 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2637 = _2564;
                            _2638 = _2565;
                            _2639 = _2566;
                            _2640 = _2567;
                            _2641 = _2568;
                            _2642 = _2569;
                            _2643 = _2644;
                        }
                    }
                    frontier_phi_66_pred = _2564;
                    frontier_phi_66_pred_1 = _2569;
                    frontier_phi_66_pred_2 = _2568;
                    frontier_phi_66_pred_3 = _2567;
                    frontier_phi_66_pred_4 = _2566;
                    frontier_phi_66_pred_5 = _2565;
                }
                _2340 = frontier_phi_66_pred;
                _2350 = frontier_phi_66_pred_1;
                _2348 = frontier_phi_66_pred_2;
                _2346 = frontier_phi_66_pred_3;
                _2344 = frontier_phi_66_pred_4;
                _2342 = frontier_phi_66_pred_5;
                uint _2499 = _2498 + 1u;
                if (_2499 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2492 = _2340;
                    _2493 = _2342;
                    _2494 = _2344;
                    _2495 = _2346;
                    _2496 = _2348;
                    _2497 = _2350;
                    _2498 = _2499;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
        }
        uvec4 _2353 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2354 = _2353.z;
        uint _2356 = (_2354 >> 8u) & 15u;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        if (((4294967295u << _2356) & _2238) == 0u)
        {
            _2460 = _2339;
            _2462 = _2341;
            _2464 = _2343;
            _2466 = _2345;
            _2468 = _2347;
            _2470 = _2349;
        }
        else
        {
            float _2485 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
            float _2486 = _2485 * _2192;
            float _2487 = _2485 * _2193;
            float _2488 = _2485 * _2194;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2356 < ((_2354 >> 12u) & 15u))
            {
                float _2461;
                float _2463;
                float _2465;
                float _2467;
                float _2469;
                float _2471;
                float _2620 = _2339;
                float _2621 = _2341;
                float _2622 = _2343;
                float _2623 = _2345;
                float _2624 = _2347;
                float _2625 = _2349;
                uint _2626 = _2356;
                uint _2635;
                bool _2636;
                for (;;)
                {
                    _2635 = texelFetch(g_lightClassification, int((((_2232 << 5u) + (_2218 << 9u)) + (_2626 << 2u)) >> 2u)).x;
                    _2636 = _2635 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2636)
                    {
                        frontier_phi_77_pred = _2625;
                        frontier_phi_77_pred_1 = _2624;
                        frontier_phi_77_pred_2 = _2623;
                        frontier_phi_77_pred_3 = _2622;
                        frontier_phi_77_pred_4 = _2621;
                        frontier_phi_77_pred_5 = _2620;
                    }
                    else
                    {
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _2842 = _2620;
                        float _2843 = _2621;
                        float _2844 = _2622;
                        float _2845 = _2623;
                        float _2846 = _2624;
                        float _2847 = _2625;
                        uint _2848 = _2635;
                        uint _2849;
                        vec4 _2874;
                        float _2875;
                        vec4 _2890;
                        vec3 _2902;
                        vec4 _2918;
                        vec4 _2934;
                        float _2981;
                        bool _2982;
                        for (;;)
                        {
                            uint _2859 = ((_2626 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2848));
                            _2849 = (_2848 + 4294967295u) & _2848;
                            uint _2861 = _2859 * 40u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            _2875 = _2874.w;
                            uint _2877 = (_2859 * 40u) + 4u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2892 = (_2859 * 40u) + 8u;
                            _2902 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x));
                            uint _2905 = (_2859 * 40u) + 16u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2921 = (_2859 * 40u) + 20u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2937 = (_2859 * 40u) + 24u;
                            vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2956 = (_2859 * 40u) + 28u;
                            vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            _2981 = fma(_2194, _2969.z, fma(_2193, _2969.y, _2969.x * _2192)) + _2969.w;
                            _2982 = !((fma(_2194, _2950.z, fma(_2193, _2950.y, _2950.x * _2192)) + _2950.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2982)
                            {
                                float _3009 = _2874.x - _2192;
                                float _3010 = _2874.y - _2193;
                                float _3011 = _2874.z - _2194;
                                float _3012 = dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011));
                                float _3015 = inversesqrt(_3012);
                                float _3016 = _3015 * _3009;
                                float _3017 = _3015 * _3010;
                                float _3018 = _3015 * _3011;
                                float _3022 = 1.0 - (_3012 / (_2875 * _2875));
                                float _4105 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3023 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3027 = sqrt(_3012) * _2890.w;
                                float _3029 = 1.39999997615814208984375 / (_3027 + 1.39999997615814208984375);
                                float _3030 = _3029 * _3029;
                                float _3033 = ((1.0 - _3030) * dot(vec3(_3016, _3017, _3018), vec3(_417, _420, _423))) + _3030;
                                float _3036 = _3027 * _3027;
                                float _3040 = (fma(_2194, _2918.z, fma(_2193, _2918.y, _2918.x * _2192)) + _2918.w) / _2981;
                                float _3041 = (fma(_2194, _2934.z, fma(_2193, _2934.y, _2934.x * _2192)) + _2934.w) / _2981;
                                float _3045 = 1.0 - dot(vec2(_3040, _3041), vec2(_3040, _3041));
                                float _4121 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3046 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3047 = _3046 * (((isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))) * _3023) / ((_3036 * 0.699999988079071044921875) + 1.0));
                                float _3059 = exp2(log2(1.0 / ((_3036 * 3.5) + 5.0)) * 0.25);
                                float _3060 = 1.0 - _493;
                                float _3067 = sqrt(1.0 - ((1.0 - (_3060 * _3060)) * (1.0 - (_3059 * _3059))));
                                float _3068 = _3067 * _3067;
                                float _3069 = _3068 * _3068;
                                float _3070 = _3016 - _2486;
                                float _3071 = _3017 - _2487;
                                float _3072 = _3018 - _2488;
                                float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
                                float _3080 = dot(vec3(_417, _420, _423), vec3((-0.0) - _2486, (-0.0) - _2487, (-0.0) - _2488));
                                float _4132 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3083 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3084 = dot(vec3(_417, _420, _423), vec3(_3076 * _3070, _3076 * _3071, _3076 * _3072));
                                float _4143 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3087 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3091 = ((_3087 * _3087) * (_3069 + (-1.0))) + 1.0;
                                float _3092 = _3029 * _3068;
                                float _3093 = _3092 * _3092;
                                float _3099 = ((1.0 - _3093) * dot(vec3(_417, _420, _423), vec3(_3016, _3017, _3018))) + _3093;
                                float _4154 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3101 = 1.0 - _3068;
                                float _3111 = (0.5 / (((_3100 * ((_3083 * _3101) + _3068)) + 9.9999999392252902907785028219223e-09) + (((_3100 * _3101) + _3068) * _3083))) * _3100;
                                float _4165 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3121 = (_3046 * _3023) * (((_3069 * 3.1415927410125732421875) * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) / ((_3091 * _3091) * ((_3036 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3047 * _2890.y;
                                frontier_phi_83_pred_1 = _3047 * _2890.x;
                                frontier_phi_83_pred_2 = _3121 * _2902.z;
                                frontier_phi_83_pred_3 = _3121 * _2902.y;
                                frontier_phi_83_pred_4 = _3121 * _2902.x;
                                frontier_phi_83_pred_5 = _3047 * _2890.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3129 = frontier_phi_83_pred;
                            _3128 = frontier_phi_83_pred_1;
                            _3127 = frontier_phi_83_pred_2;
                            _3126 = frontier_phi_83_pred_3;
                            _3125 = frontier_phi_83_pred_4;
                            _3130 = frontier_phi_83_pred_5;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            _2834 = _3130 + _2847;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            _2831 = _3127 + _2844;
                            if (_2849 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2849;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2834;
                        frontier_phi_77_pred_1 = _2833;
                        frontier_phi_77_pred_2 = _2832;
                        frontier_phi_77_pred_3 = _2831;
                        frontier_phi_77_pred_4 = _2830;
                        frontier_phi_77_pred_5 = _2829;
                    }
                    _2471 = frontier_phi_77_pred;
                    _2469 = frontier_phi_77_pred_1;
                    _2467 = frontier_phi_77_pred_2;
                    _2465 = frontier_phi_77_pred_3;
                    _2463 = frontier_phi_77_pred_4;
                    _2461 = frontier_phi_77_pred_5;
                    uint _2627 = _2626 + 1u;
                    if (_2627 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2620 = _2461;
                        _2621 = _2463;
                        _2622 = _2465;
                        _2623 = _2467;
                        _2624 = _2469;
                        _2625 = _2471;
                        _2626 = _2627;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2465;
                frontier_phi_58_59_ladder_1 = _2471;
                frontier_phi_58_59_ladder_2 = _2469;
                frontier_phi_58_59_ladder_3 = _2467;
                frontier_phi_58_59_ladder_4 = _2463;
                frontier_phi_58_59_ladder_5 = _2461;
            }
            else
            {
                frontier_phi_58_59_ladder = _2343;
                frontier_phi_58_59_ladder_1 = _2349;
                frontier_phi_58_59_ladder_2 = _2347;
                frontier_phi_58_59_ladder_3 = _2345;
                frontier_phi_58_59_ladder_4 = _2341;
                frontier_phi_58_59_ladder_5 = _2339;
            }
            _2460 = frontier_phi_58_59_ladder_5;
            _2462 = frontier_phi_58_59_ladder_4;
            _2464 = frontier_phi_58_59_ladder;
            _2466 = frontier_phi_58_59_ladder_3;
            _2468 = frontier_phi_58_59_ladder_2;
            _2470 = frontier_phi_58_59_ladder_1;
        }
        float _2475 = isnan(1.0) ? _477 : (isnan(_477) ? 1.0 : min(_477, 1.0));
        _2251 = (_2475 * _2466) + _1687;
        _2253 = (_2475 * _2468) + _1689;
        _2255 = (_2475 * _2470) + _1691;
        _2257 = ((_2460 * _462) * _2475) + _2032;
        _2259 = ((_2462 * _464) * _2475) + _2034;
        _2261 = ((_2464 * _465) * _2475) + _2036;
    }
    else
    {
        _2251 = _1687;
        _2253 = _1689;
        _2255 = _1691;
        _2257 = _2032;
        _2259 = _2034;
        _2261 = _2036;
    }
    float _4181 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4192 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4203 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _2278 = ((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2251 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _477))) + ((_2257 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2279 = ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2253 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _477))) + ((_2259 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2280 = ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2255 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _477))) + ((_2261 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    uint _2281 = _436 + 6u;
    float _2289 = _396 / cbSceneParam._m0[86u].x;
    float _2290 = _397 / cbSceneParam._m0[86u].y;
    vec4 _2304 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2289, _2290, (log2((isnan(cbSceneParam._m0[77u].w) ? _317 : (isnan(_317) ? cbSceneParam._m0[77u].w : min(_317, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2306 = _2304.x;
    float _2307 = _2304.y;
    float _2308 = _2304.z;
    float _2309 = _2304.w;
    float _2402;
    float _2404;
    float _2406;
    float _2408;
    if (_317 > cbSceneParam._m0[78u].w)
    {
        float _2364 = isnan(_317) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _317 : min(cbSceneParam._m0[80u].w, _317));
        float _2365 = _2364 / _317;
        float _2376 = _2365 * _368;
        float _2377 = _369 * _2365;
        float _2378 = (-0.0) - _2377;
        float _2380 = _2365 * _370;
        float _2382 = (cbSceneParam._m0[77u].w * _2378) / _2364;
        float _2383 = _2382 + cbSceneParam._m0[79u].w;
        float _2384 = cbSceneParam._m0[79u].w - _2377;
        float _2390 = sqrt(((_2376 * _2376) + (_2377 * _2377)) + (_2380 * _2380));
        float _2393 = (1.0 - (cbSceneParam._m0[77u].w / _2364)) * _2390;
        float _2398 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2400 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2577;
        if (abs((_2378 - _2382) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2577 = ((((_2383 > 0.0) ? exp2(_2398 * _2383) : (2.0 - exp2(_2400 * _2383))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2393;
        }
        else
        {
            float _2521 = 1.0 / cbSceneParam._m0[80u].x;
            float _2522 = isnan(_2384) ? _2383 : (isnan(_2383) ? _2384 : max(_2383, _2384));
            float _2523 = isnan(_2384) ? _2383 : (isnan(_2383) ? _2384 : min(_2383, _2384));
            float _2532 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : min(_2522, 0.0));
            float _2533 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : min(_2523, 0.0));
            _2577 = ((abs(_2390 / _2378) * cbSceneParam._m0[80u].y) * ((((_2532 - _2533) * 2.0) - ((exp2(_2398 * (isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0)))) - exp2(_2398 * (isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0))))) * _2521)) - ((exp2(_2400 * _2532) - exp2(_2400 * _2533)) * _2521))) + (_2393 * cbSceneParam._m0[80u].z);
        }
        vec4 _2579 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2289, _2290, 1.0), 0.0);
        float _2588 = exp2((_2577 * (-1.44269502162933349609375)) * (1.0 - _2579.w));
        float _2589 = log2(_2588);
        float _2605 = log2(_2309);
        _2402 = (exp2(_2605 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2589 * cbSceneParam._m0[78u].x)) * _2579.x) / cbSceneParam._m0[78u].x)) + _2306;
        _2404 = (exp2(_2605 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2589 * cbSceneParam._m0[78u].y)) * _2579.y) / cbSceneParam._m0[78u].y)) + _2307;
        _2406 = (exp2(_2605 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2589 * cbSceneParam._m0[78u].z)) * _2579.z) / cbSceneParam._m0[78u].z)) + _2308;
        _2408 = _2588 * _2309;
    }
    else
    {
        _2402 = _2306;
        _2404 = _2307;
        _2406 = _2308;
        _2408 = _2309;
    }
    bool _2615;
    vec4 _2418;
    vec4 _2440;
    float _2442;
    float _2446;
    float _2447;
    float _2448;
    float _2449;
    bool _2459;
    for (;;)
    {
        _2418 = cbMatDynParam._m0[0u];
        float _2420 = roundEven(_2418.y);
        bool _2421 = _2420 == 3.0;
        float _2422 = log2(_2408);
        float _2429 = exp2(_2422 * cbSceneParam._m0[78u].x) * _2278;
        float _2430 = exp2(_2422 * cbSceneParam._m0[78u].y) * _2279;
        float _2431 = exp2(_2422 * cbSceneParam._m0[78u].z) * _2280;
        float _2438 = _384 + (-0.5);
        _2440 = cbMtdParam._m0[1u];
        _2442 = _2440.y * _2438;
        float _2445 = (_2420 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2446 = _2445 * (_2421 ? _2429 : (_2429 + (cbSceneParam._m0[72u].w * _2402)));
        _2447 = _2445 * (_2421 ? _2430 : (_2430 + (cbSceneParam._m0[72u].w * _2404)));
        _2448 = _2445 * (_2421 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2406)));
        _2449 = _2438 * 0.999000012874603271484375;
        _2459 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2459)
        {
            if ((cbInstanceData._m0[_436 + 7u].x + _2449) < 0.5)
            {
                _2615 = true;
                break;
            }
        }
        uint _2556 = _438 + uint(_2418.w);
        if ((cbInstanceData._m0[_2556].w < 1.0) && ((cbInstanceData._m0[_2556].w + _2449) < 0.5))
        {
            _2615 = true;
            break;
        }
        if ((_2442 + 1.0) < _2440.x)
        {
            _2615 = true;
            break;
        }
        _2615 = false;
        break;
    }
    float _2820;
    if (_2615)
    {
        discard_state = true;
        _2820 = 0.0;
    }
    else
    {
        _2820 = cbInstanceData._m0[_2281].w;
    }
    SV_Target.x = _2446;
    SV_Target.y = _2447;
    SV_Target.z = _2448;
    SV_Target.w = _2820;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2281].w;
    discard_exit();
}


