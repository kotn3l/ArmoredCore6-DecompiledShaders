#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _879;
float _3293;
float _3294;
float _3295;
float _3296;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = ((cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.x;
    float _227 = ((cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.y;
    vec4 _240 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_226 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_227 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _261 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _226) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _227) + cbTextureTilingScale._m0[1u].w));
    float _265 = _261.z;
    float _269 = (_261.x * 2.0) + (-1.0);
    float _271 = (_261.y * 2.0) + (-1.0);
    float _272 = dot(vec2(_269, _271), vec2(_269, _271));
    float _3305 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _278 = sqrt(1.0 - (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))));
    float _281 = fma(_278, _199 * NORMAL.x, fma(_271, _206 * TANGENT.x, (_192 * _185) * _269));
    float _284 = fma(_278, _199 * NORMAL.y, fma(_271, _206 * TANGENT.y, (_192 * _186) * _269));
    float _287 = fma(_278, _199 * NORMAL.z, fma(_271, _206 * TANGENT.z, (_192 * _187) * _269));
    float _291 = inversesqrt(dot(vec3(_281, _284, _287), vec3(_281, _284, _287)));
    float _292 = _291 * _281;
    float _293 = _291 * _284;
    float _294 = _291 * _287;
    float _3316 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _295 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3338 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3349 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3360 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _299 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _315 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _356 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _366 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _356);
    float _367 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _356);
    float _368 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _356);
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _366 * _372;
    float _374 = _367 * _372;
    float _375 = _368 * _372;
    vec4 _380 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _382 = _380.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _558 = sqrt(((_366 * _366) + (_367 * _367)) + (_368 * _368));
        float _564 = (cbMatDynParam._m0[5u].x * _558) + cbMatDynParam._m0[5u].y;
        float _3371 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
        float _565 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _569 = (cbMatDynParam._m0[5u].z * _558) + cbMatDynParam._m0[5u].w;
        float _3382 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) - _565)) + _565) < ((_382 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _394 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _395 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _415 = fma(_294, cbSceneParam._m0[5u].z, fma(_293, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _292));
    float _418 = fma(_294, cbSceneParam._m0[6u].z, fma(_293, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _292));
    float _421 = fma(_294, cbSceneParam._m0[7u].z, fma(_293, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _292));
    uint _434 = uint(roundEven(NORMAL.w)) * 13u;
    uint _436 = _434 + 9u;
    uint _437 = _436 + uint(cbMatDynParam._m0[0u].w);
    float _443 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_437].x;
    float _444 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_437].y;
    float _445 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_437].z;
    float _3393 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _449 = 1.0 - _299;
    float _450 = _446 * _449;
    float _451 = _447 * _449;
    float _452 = _448 * _449;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _299;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _299;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _299;
    float _460 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    float _463 = _459 + 0.039999999105930328369140625;
    vec4 _472 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _394, cbSceneParam._m0[86u].y * _395));
    float _475 = _472.x * TEXCOORD.z;
    float _476 = dot(vec3(_292, _293, _294), vec3(_373, _374, _375));
    float _479 = _476 * 2.0;
    float _483 = (_479 * _292) - _373;
    float _484 = (_479 * _293) - _374;
    float _485 = (_479 * _294) - _375;
    float _489 = abs(dot(vec3(_373, _374, _375), vec3(_292, _293, _294)));
    float _3426 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _491 = sqrt(_295);
    float _504 = exp2((_491 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_491 * 3.0));
    float _510 = (1.0 - _504) * ((_491 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _511 = _504 * _491;
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _878;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _603 = fma(_547, cbModelParam._m0[26u].z, fma(_543, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _539));
        float _607 = fma(_547, cbModelParam._m0[27u].z, fma(_543, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _539));
        float _611 = fma(_547, cbModelParam._m0[28u].z, fma(_543, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _539));
        float _636 = _539 + _292;
        float _637 = _543 + _293;
        float _638 = _547 + _294;
        float _648 = fma(_638, cbModelParam._m0[26u].z, fma(_637, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _636)) - _603;
        float _649 = fma(_638, cbModelParam._m0[27u].z, fma(_637, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _636)) - _607;
        float _650 = fma(_638, cbModelParam._m0[28u].z, fma(_637, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _636)) - _611;
        float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
        float _667 = ((_654 * _648) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_603 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _668 = ((_654 * _649) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_607 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _669 = ((_654 * _650) / cbModelParam._m0[34u].z) + ((((((_611 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        float _706 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_672.x + (-0.5));
        float _708 = _706 * (_672.y + (-0.5));
        float _709 = _706 * (_672.z + (-0.5));
        float _716 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_679.x + (-0.5));
        float _718 = _716 * (_679.y + (-0.5));
        float _719 = _716 * (_679.z + (-0.5));
        float _726 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_686.x + (-0.5));
        float _728 = _726 * (_686.y + (-0.5));
        float _729 = _726 * (_686.z + (-0.5));
        float _736 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_693.x + (-0.5));
        float _738 = _736 * (_693.y + (-0.5));
        float _739 = _736 * (_693.z + (-0.5));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = _707 * 0.5;
        float _744 = _717 * 0.5;
        float _745 = _727 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _760 = (dot(vec3(_292, _293, _294), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _770 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _772 = _771 * 2.0;
        float _776 = (1.0 - _771) / (_771 + 1.0);
        float _3474 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _786 = ((((1.0 - _777) * (_772 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_772 + 1.0))) + _777) * _740;
        float _787 = _708 * 0.5;
        float _788 = _718 * 0.5;
        float _789 = _728 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _803 = (dot(vec3(_292, _293, _294), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _812 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3507 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_814 + 1.0))) + _819) * _741;
        float _829 = _709 * 0.5;
        float _830 = _719 * 0.5;
        float _831 = _729 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_292, _293, _294), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3540 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_856 + 1.0))) + _861) * _742;
        _878 = _709;
        _880 = _708;
        _881 = _707;
        _882 = _719;
        _883 = _718;
        _884 = _717;
        _885 = _729;
        _886 = _728;
        _887 = _727;
        _888 = _742;
        _889 = _741;
        _890 = _740;
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)));
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
    }
    else
    {
        _878 = _879;
        _880 = _879;
        _881 = _879;
        _882 = _879;
        _883 = _879;
        _884 = _879;
        _885 = _879;
        _886 = _879;
        _887 = _879;
        _888 = _879;
        _889 = _879;
        _890 = _879;
        _891 = 0.0;
        _892 = 0.0;
        _893 = 0.0;
    }
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _922 = fma(_547, cbModelParam._m0[30u].z, fma(_543, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _539));
        float _926 = fma(_547, cbModelParam._m0[31u].z, fma(_543, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _539));
        float _930 = fma(_547, cbModelParam._m0[32u].z, fma(_543, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _539));
        float _953 = _539 + _292;
        float _954 = _543 + _293;
        float _955 = _547 + _294;
        float _965 = fma(_955, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953)) - _922;
        float _966 = fma(_955, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953)) - _926;
        float _967 = fma(_955, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953)) - _930;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_922 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_926 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[35u].z) + ((((((_930 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1021 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_988.x + (-0.5));
        float _1023 = _1021 * (_988.y + (-0.5));
        float _1024 = _1021 * (_988.z + (-0.5));
        float _1031 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_995.x + (-0.5));
        float _1033 = _1031 * (_995.y + (-0.5));
        float _1034 = _1031 * (_995.z + (-0.5));
        float _1041 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1002.x + (-0.5));
        float _1043 = _1041 * (_1002.y + (-0.5));
        float _1044 = _1041 * (_1002.z + (-0.5));
        float _1051 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1009.x + (-0.5));
        float _1053 = _1051 * (_1009.y + (-0.5));
        float _1054 = _1051 * (_1009.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = _1022 * 0.5;
        float _1059 = _1032 * 0.5;
        float _1060 = _1042 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_292, _293, _294), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3603 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1085 + 1.0))) + _1090) * _1055;
        float _1100 = _1023 * 0.5;
        float _1101 = _1033 * 0.5;
        float _1102 = _1043 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_292, _293, _294), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3636 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1127 + 1.0))) + _1132) * _1056;
        float _1142 = _1024 * 0.5;
        float _1143 = _1034 * 0.5;
        float _1144 = _1044 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_292, _293, _294), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3669 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1169 + 1.0))) + _1174) * _1057;
        _1191 = _1024;
        _1192 = _1023;
        _1193 = _1022;
        _1194 = _1034;
        _1195 = _1033;
        _1196 = _1032;
        _1197 = _1044;
        _1198 = _1043;
        _1199 = _1042;
        _1200 = _1057;
        _1201 = _1056;
        _1202 = _1055;
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
    }
    else
    {
        _1191 = _879;
        _1192 = _879;
        _1193 = _879;
        _1194 = _879;
        _1195 = _879;
        _1196 = _879;
        _1197 = _879;
        _1198 = _879;
        _1199 = _879;
        _1200 = _879;
        _1201 = _879;
        _1202 = _879;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _891)) + _891;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _892)) + _892;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _893)) + _893;
    float _1238 = fma(_1217, cbSceneParam._m0[89u].z, fma(_1216, cbSceneParam._m0[89u].y, _1215 * cbSceneParam._m0[89u].x));
    float _1241 = fma(_1217, cbSceneParam._m0[90u].z, fma(_1216, cbSceneParam._m0[90u].y, _1215 * cbSceneParam._m0[90u].x));
    float _1244 = fma(_1217, cbSceneParam._m0[91u].z, fma(_1216, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1215));
    float _1259 = _483 * 0.5;
    float _1260 = _484 * 0.5;
    float _1261 = _485 * 0.5;
    float _1262 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1265 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1268 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1302;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1275 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_878, _882, _885, _888));
        float _1279 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_880, _883, _886, _889));
        float _1283 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_881, _884, _887, _890));
        float _1290 = dot(vec4(cbModelParam._m0[39u]), vec4(_1259, _1260, _1261, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1290) ? 0.0 : (isnan(0.0) ? _1290 : max(0.0, _1290))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1313;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1304 = dot(vec4(cbModelParam._m0[40u]), vec4(_1259, _1260, _1261, 1.0));
        _1313 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1313 = 1.0;
    }
    float _1317 = (_1313 * cbModelParam._m0[1u].x) + (_1302 * (1.0 - cbModelParam._m0[1u].x));
    float _1327 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _295);
    float _1328 = isnan(_1327) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1327 : min(cbModelParam._m0[25u].z, _1327));
    float _1410;
    float _1412;
    float _1414;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1377 = fma(_547, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _539)) + cbModelParam._m0[13u].w;
        float _1381 = fma(_547, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _539)) + cbModelParam._m0[14u].w;
        float _1385 = fma(_547, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _539)) + cbModelParam._m0[15u].w;
        float _1388 = fma(_485, cbModelParam._m0[13u].z, fma(_484, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _483));
        float _1391 = fma(_485, cbModelParam._m0[14u].z, fma(_484, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _483));
        float _1394 = fma(_485, cbModelParam._m0[15u].z, fma(_484, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _483));
        float _1422;
        if (_1388 > 0.0)
        {
            _1422 = abs((1.0 - _1377) / _1388);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1377 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1422 = frontier_phi_17_15_ladder;
        }
        float _1650;
        if (_1391 > 0.0)
        {
            _1650 = abs((1.0 - _1381) / _1391);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1381 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1650 = frontier_phi_26_22_ladder;
        }
        float _1907;
        if (_1394 > 0.0)
        {
            _1907 = abs((1.0 - _1385) / _1394);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1385 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1907 = frontier_phi_38_33_ladder;
        }
        float _1909 = isnan(_1650) ? _1422 : (isnan(_1422) ? _1650 : min(_1422, _1650));
        float _1910 = isnan(_1907) ? _1909 : (isnan(_1909) ? _1907 : min(_1909, _1907));
        float _1914 = (_1910 * _1388) + _1377;
        float _1915 = (_1910 * _1391) + _1381;
        float _1916 = (_1910 * _1394) + _1385;
        float _1917 = _1910 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1917;
        float _1921 = _1917 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 > _1921) || ((_1915 < _1919) || ((_1914 < _1919) || (_1914 > _1921))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1916, cbModelParam._m0[9u].z, fma(_1915, cbModelParam._m0[9u].y, _1914 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1916, cbModelParam._m0[10u].z, fma(_1915, cbModelParam._m0[10u].y, _1914 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1916, cbModelParam._m0[11u].z, fma(_1915, cbModelParam._m0[11u].y, _1914 * cbModelParam._m0[11u].x))), _1328);
            frontier_phi_16_38_ladder = _2044.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2044.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2044.x * cbModelParam._m0[1u].y;
        }
        _1410 = frontier_phi_16_38_ladder_2;
        _1412 = frontier_phi_16_38_ladder_1;
        _1414 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_483, _484, _485), _1328);
        _1410 = _1398.x * cbModelParam._m0[1u].y;
        _1412 = _1398.y * cbModelParam._m0[1u].y;
        _1414 = _1398.z * cbModelParam._m0[1u].y;
    }
    float _1418 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _295);
    float _1419 = isnan(_1418) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1418 : min(cbModelParam._m0[25u].w, _1418));
    float _1511;
    float _1513;
    float _1515;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1475 = fma(_547, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _539)) + cbModelParam._m0[21u].w;
        float _1479 = fma(_547, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _539)) + cbModelParam._m0[22u].w;
        float _1483 = fma(_547, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _539)) + cbModelParam._m0[23u].w;
        float _1486 = fma(_485, cbModelParam._m0[21u].z, fma(_484, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _483));
        float _1489 = fma(_485, cbModelParam._m0[22u].z, fma(_484, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _483));
        float _1492 = fma(_485, cbModelParam._m0[23u].z, fma(_484, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _483));
        float _1655;
        if (_1486 > 0.0)
        {
            _1655 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1655 = frontier_phi_28_24_ladder;
        }
        float _1934;
        if (_1489 > 0.0)
        {
            _1934 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1934 = frontier_phi_40_35_ladder;
        }
        float _2147;
        if (_1492 > 0.0)
        {
            _2147 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2147 = frontier_phi_49_46_ladder;
        }
        float _2149 = isnan(_1934) ? _1655 : (isnan(_1655) ? _1934 : min(_1655, _1934));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1486) + _1475;
        float _2155 = (_2150 * _1489) + _1479;
        float _2156 = (_2150 * _1492) + _1483;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2158 = (-1.0) - _2157;
        float _2160 = _2157 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2156 > _2160) || ((_2156 < _2158) || ((_2155 > _2160) || ((_2155 < _2158) || ((_2154 < _2158) || (_2154 > _2160))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2355 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2156, cbModelParam._m0[17u].z, fma(_2155, cbModelParam._m0[17u].y, _2154 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2156, cbModelParam._m0[18u].z, fma(_2155, cbModelParam._m0[18u].y, _2154 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2156, cbModelParam._m0[19u].z, fma(_2155, cbModelParam._m0[19u].y, _2154 * cbModelParam._m0[19u].x))), _1419);
            frontier_phi_25_49_ladder = _2355.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2355.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2355.x * cbModelParam._m0[1u].z;
        }
        _1511 = frontier_phi_25_49_ladder_2;
        _1513 = frontier_phi_25_49_ladder_1;
        _1515 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1495 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_483, _484, _485), _1419);
        _1511 = _1495.x * cbModelParam._m0[1u].z;
        _1513 = _1495.y * cbModelParam._m0[1u].z;
        _1515 = _1495.z * cbModelParam._m0[1u].z;
    }
    float _1528 = (((_510 * _460) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1511 - _1410)) + _1410);
    float _1530 = (((_510 * _462) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1513 - _1412)) + _1412);
    float _1532 = (((_510 * _463) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1515 - _1414)) + _1414);
    float _1535 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1528 * cbSceneParam._m0[89u].x));
    float _1538 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1528 * cbSceneParam._m0[90u].x));
    float _1541 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, _1528 * cbSceneParam._m0[91u].x));
    vec4 _1549 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_394, _395));
    float _1551 = _1549.w;
    float _1563 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1551);
    float _1564 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1551);
    float _1565 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1551);
    uvec4 _1569 = floatBitsToUint(cbInstanceData._m0[_434 + 5u]);
    uint _1571 = _1569.x * 14u;
    uint _1572 = _1571 + 13u;
    float _1579 = _475 + (-1.0);
    float _1584 = (cbLight._m0[_1572].x * _1579) + 1.0;
    float _1585 = (cbLight._m0[_1572].y * _1579) + 1.0;
    float _1586 = (cbLight._m0[_1572].z * _1579) + 1.0;
    float _1587 = (cbLight._m0[_1572].w * _1579) + 1.0;
    uint _1588 = _1571 + 5u;
    float _1594 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
    uint _1598 = _1571 + 4u;
    float _1608 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
    uint _1612 = _1571 | 1u;
    float _1623 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_292, _293, _294));
    float _1626 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_292, _293, _294));
    float _3805 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _3816 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1631 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
    float _1633 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.3183098733425140380859375;
    float _1640 = ((cbLight._m0[_1588].x * _1594) * _1633) + (((cbLight._m0[_1598].x * _1563) * _1608) * _1631);
    float _1641 = ((_1594 * cbLight._m0[_1588].y) * _1633) + (((cbLight._m0[_1598].y * _1564) * _1608) * _1631);
    float _1642 = ((_1594 * cbLight._m0[_1588].z) * _1633) + (((cbLight._m0[_1598].z * _1565) * _1608) * _1631);
    uvec4 _1647 = floatBitsToUint(cbLight._m0[_1571 + 12u]);
    bool _1649 = _1647.x == 0u;
    float _1660;
    float _1662;
    float _1664;
    if (_1649)
    {
        _1660 = _1640;
        _1662 = _1641;
        _1664 = _1642;
    }
    else
    {
        uint _1668 = _1571 + 6u;
        float _1684 = (dot(vec3(cbLight._m0[_1571 + 2u].xyz), vec3(_292, _293, _294)) * 0.5) + 0.5;
        float _1685 = _1684 * _1684;
        float _3827 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1687 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1660 = (((cbLight._m0[_1668].x * 0.3183098733425140380859375) * _1686) * _1687) + _1640;
        _1662 = (((cbLight._m0[_1668].y * 0.3183098733425140380859375) * _1686) * _1687) + _1641;
        _1664 = (((cbLight._m0[_1668].z * 0.3183098733425140380859375) * _1686) * _1687) + _1642;
    }
    bool _1667 = _1647.y == 0u;
    float _1705;
    float _1707;
    float _1709;
    if (_1667)
    {
        _1705 = _1660;
        _1707 = _1662;
        _1709 = _1664;
    }
    else
    {
        uint _1878 = _1571 + 7u;
        float _1894 = (dot(vec3(cbLight._m0[_1571 + 3u].xyz), vec3(_292, _293, _294)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _3843 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1897 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _1705 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1660;
        _1707 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1662;
        _1709 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1664;
    }
    uint _1712 = _1571 + 8u;
    float _1725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1571].w)) * _295) * 0.949999988079071044921875);
    float _1726 = _1725 * _1725;
    float _1727 = cbLight._m0[_1571].x + _373;
    float _1728 = cbLight._m0[_1571].y + _374;
    float _1729 = cbLight._m0[_1571].z + _375;
    float _1733 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
    float _1734 = _1733 * _1727;
    float _1735 = _1733 * _1728;
    float _1736 = _1733 * _1729;
    float _1737 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1571].xyz));
    float _3859 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1740 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _1741 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1742 = dot(vec3(_292, _293, _294), vec3(_1734, _1735, _1736));
    float _3881 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1746 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_1734, _1735, _1736));
    float _3892 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1750 = _1726 * _1726;
    float _1754 = ((_1745 * _1745) * (_1750 + (-1.0))) + 1.0;
    float _1762 = exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0);
    float _1763 = 0.959999978542327880859375 - _457;
    float _1765 = 0.959999978542327880859375 - _458;
    float _1766 = 0.959999978542327880859375 - _459;
    float _1773 = 1.0 - _1726;
    float _1784 = (0.5 / (((_1741 * ((_1740 * _1773) + _1726)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _1773) + _1726) * _1740))) * _1740;
    float _3903 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1786 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1750 / ((_1754 * _1754) * 3.141590118408203125));
    uint _1800 = _1571 + 9u;
    float _1811 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1612].w)) * _295) * 0.949999988079071044921875);
    float _1812 = _1811 * _1811;
    float _1813 = cbLight._m0[_1612].x + _373;
    float _1814 = cbLight._m0[_1612].y + _374;
    float _1815 = cbLight._m0[_1612].z + _375;
    float _1819 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
    float _1820 = _1819 * _1813;
    float _1821 = _1819 * _1814;
    float _1822 = _1819 * _1815;
    float _1823 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1612].xyz));
    float _3914 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1826 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1827 = dot(vec3(_292, _293, _294), vec3(_1820, _1821, _1822));
    float _3925 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1831 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_1820, _1821, _1822));
    float _3936 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1835 = _1812 * _1812;
    float _1839 = ((_1830 * _1830) * (_1835 + (-1.0))) + 1.0;
    float _1846 = exp2(log2(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * 5.0);
    float _1853 = 1.0 - _1812;
    float _1863 = (0.5 / (((_1741 * ((_1826 * _1853) + _1812)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _1853) + _1812) * _1826))) * _1826;
    float _3947 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1865 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1835 / ((_1839 * _1839) * 3.141590118408203125));
    float _1875 = (((((_1846 * _1763) + _460) * cbLight._m0[_1800].x) * _1865) * _1594) + ((((cbLight._m0[_1712].x * _1563) * ((_1762 * _1763) + _460)) * _1786) * _1608);
    float _1876 = (((((_1846 * _1765) + _462) * cbLight._m0[_1800].y) * _1865) * _1594) + ((((cbLight._m0[_1712].y * _1564) * ((_1762 * _1765) + _462)) * _1786) * _1608);
    float _1877 = (((((_1846 * _1766) + _463) * cbLight._m0[_1800].z) * _1865) * _1594) + ((((cbLight._m0[_1712].z * _1565) * ((_1762 * _1766) + _463)) * _1786) * _1608);
    float _1939;
    float _1941;
    float _1943;
    if (_1649)
    {
        _1939 = _1875;
        _1941 = _1876;
        _1943 = _1877;
    }
    else
    {
        uint _1945 = _1571 + 2u;
        uint _1949 = _1571 + 10u;
        float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _295) * 0.949999988079071044921875);
        float _1964 = _1963 * _1963;
        float _1965 = cbLight._m0[_1945].x + _373;
        float _1966 = cbLight._m0[_1945].y + _374;
        float _1967 = cbLight._m0[_1945].z + _375;
        float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
        float _1972 = _1971 * _1965;
        float _1973 = _1971 * _1966;
        float _1974 = _1971 * _1967;
        float _1975 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1945].xyz));
        float _3958 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1978 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1979 = dot(vec3(_292, _293, _294), vec3(_1972, _1973, _1974));
        float _3969 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1982 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1983 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_1972, _1973, _1974));
        float _3980 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1987 = _1964 * _1964;
        float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
        float _1998 = exp2(log2(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * 5.0);
        float _2005 = 1.0 - _1964;
        float _2015 = (0.5 / (((_1741 * ((_1978 * _2005) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _2005) + _1964) * _1978))) * _1978;
        float _3991 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2017 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
        float _2018 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1939 = (((((_1998 * _1763) + _460) * cbLight._m0[_1949].x) * _2017) * _2018) + _1875;
        _1941 = (((((_1998 * _1765) + _462) * cbLight._m0[_1949].y) * _2017) * _2018) + _1876;
        _1943 = (((((_1998 * _1766) + _463) * cbLight._m0[_1949].z) * _2017) * _2018) + _1877;
    }
    float _2053;
    float _2055;
    float _2057;
    if (_1667)
    {
        _2053 = _1939;
        _2055 = _1941;
        _2057 = _1943;
    }
    else
    {
        uint _2064 = _1571 + 3u;
        uint _2068 = _1571 + 11u;
        float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _295) * 0.949999988079071044921875);
        float _2083 = _2082 * _2082;
        float _2084 = cbLight._m0[_2064].x + _373;
        float _2085 = cbLight._m0[_2064].y + _374;
        float _2086 = cbLight._m0[_2064].z + _375;
        float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
        float _2091 = _2090 * _2084;
        float _2092 = _2090 * _2085;
        float _2093 = _2090 * _2086;
        float _2094 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_2064].xyz));
        float _4007 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2097 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2098 = dot(vec3(_292, _293, _294), vec3(_2091, _2092, _2093));
        float _4018 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2102 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2091, _2092, _2093));
        float _4029 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2106 = _2083 * _2083;
        float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
        float _2117 = exp2(log2(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * 5.0);
        float _2124 = 1.0 - _2083;
        float _2134 = (0.5 / (((_1741 * ((_2097 * _2124) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _2124) + _2083) * _2097))) * _2097;
        float _4040 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2136 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
        float _2137 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _2053 = (((((_2117 * _1763) + _460) * cbLight._m0[_2068].x) * _2136) * _2137) + _1939;
        _2055 = (((((_2117 * _1765) + _462) * cbLight._m0[_2068].y) * _2136) * _2137) + _1941;
        _2057 = (((((_2117 * _1766) + _463) * cbLight._m0[_2068].z) * _2136) * _2137) + _1943;
    }
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    float _2282;
    if (_1569.y == 0u)
    {
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2212;
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2212;
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2212;
        uvec4 _2227 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2228 = _2227.x;
        uint _2239 = uint((float(_2227.y) * floor(float(uint(cbSceneParam._m0[85u].y * _395) / _2228))) + floor(float(uint(cbSceneParam._m0[85u].x * _394) / _2228)));
        float _2249 = (log2(_2215 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2250 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        uint _2253 = uint(isnan(14.0) ? _2250 : (isnan(_2250) ? 14.0 : min(_2250, 14.0)));
        uvec4 _2258 = texelFetch(g_lightClusterGridBuffer, int(((_2253 << 2u) + (_2239 << 6u)) >> 2u));
        uint _2259 = _2258.x;
        uint _2260 = _2227.z;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        if (((((1u << ((_2260 >> 4u) & 15u)) + 4294967295u) & _2259) == 0u) || ((_2260 & 240u) == 0u))
        {
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
        }
        else
        {
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2369;
            float _2371;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            uint _2519 = 0u;
            uint _2528;
            bool _2529;
            for (;;)
            {
                _2528 = texelFetch(g_lightClassification, int((((_2253 << 5u) + (_2239 << 9u)) + (_2519 << 2u)) >> 2u)).x;
                _2529 = _2528 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2529)
                {
                    frontier_phi_66_pred = _2513;
                    frontier_phi_66_pred_1 = _2518;
                    frontier_phi_66_pred_2 = _2517;
                    frontier_phi_66_pred_3 = _2516;
                    frontier_phi_66_pred_4 = _2515;
                    frontier_phi_66_pred_5 = _2514;
                }
                else
                {
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    uint _2664;
                    _2658 = _2513;
                    _2659 = _2514;
                    _2660 = _2515;
                    _2661 = _2516;
                    _2662 = _2517;
                    _2663 = _2518;
                    _2664 = _2528;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    for (;;)
                    {
                        uint _2668 = uint(findLSB(_2664)) + (_2519 << 5u);
                        uint _2665 = (_2664 + 4294967295u) & _2664;
                        uint _2670 = _2668 * 48u;
                        vec4 _2684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2670)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 3u)).x));
                        uint _2690 = (_2668 * 48u) + 4u;
                        vec4 _2703 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 3u)).x));
                        uint _2709 = (_2668 * 48u) + 8u;
                        vec3 _2720 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x));
                        float _2724 = _2684.x - _2213;
                        float _2725 = _2684.y - _2214;
                        float _2726 = _2684.z - _2215;
                        float _2727 = dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726));
                        float _2730 = inversesqrt(_2727);
                        float _2731 = _2730 * _2724;
                        float _2732 = _2730 * _2725;
                        float _2733 = _2730 * _2726;
                        float _2734 = dot(vec3(_415, _418, _421), vec3(_2731, _2732, _2733));
                        float _2739 = 1.0 - (_2727 * _2684.w);
                        float _4066 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2740 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2741 = sqrt(_2727) * _2703.w;
                        float _2744 = 1.39999997615814208984375 / (_2741 + 1.39999997615814208984375);
                        float _2745 = _2744 * _2744;
                        float _2748 = ((1.0 - _2745) * _2734) + _2745;
                        float _2751 = _2741 * _2741;
                        float _2755 = ((isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))) * _2740) / ((_2751 * 0.699999988079071044921875) + 1.0);
                        float _2759 = (-0.0) - _2213;
                        float _2760 = (-0.0) - _2214;
                        float _2761 = (-0.0) - _2215;
                        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
                        float _2766 = _2765 * _2759;
                        float _2767 = _2765 * _2760;
                        float _2768 = _2765 * _2761;
                        float _2776 = exp2(log2(1.0 / ((_2751 * 3.5) + 5.0)) * 0.25);
                        float _2777 = 1.0 - _491;
                        float _2784 = sqrt(1.0 - ((1.0 - (_2777 * _2777)) * (1.0 - (_2776 * _2776))));
                        float _2785 = _2784 * _2784;
                        float _2786 = _2785 * _2785;
                        float _2787 = _2766 + _2731;
                        float _2788 = _2767 + _2732;
                        float _2789 = _2768 + _2733;
                        float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
                        float _2797 = dot(vec3(_415, _418, _421), vec3(_2766, _2767, _2768));
                        float _4082 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2800 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2801 = dot(vec3(_415, _418, _421), vec3(_2793 * _2787, _2793 * _2788, _2793 * _2789));
                        float _4093 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2804 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2808 = ((_2804 * _2804) * (_2786 + (-1.0))) + 1.0;
                        float _2809 = _2744 * _2785;
                        float _2810 = _2809 * _2809;
                        float _2813 = ((1.0 - _2810) * _2734) + _2810;
                        float _4104 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2814 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2815 = 1.0 - _2785;
                        float _2825 = (0.5 / (((_2814 * ((_2800 * _2815) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2814 * _2815) + _2785) * _2800))) * _2814;
                        float _4115 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2836 = (((_2786 * 3.1415927410125732421875) * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) / ((_2808 * _2808) * ((_2751 * 2.1991131305694580078125) + 3.141590118408203125))) * _2740;
                        _2588 = (_2755 * _2703.x) + _2661;
                        _2589 = (_2755 * _2703.y) + _2662;
                        _2590 = (_2755 * _2703.z) + _2663;
                        _2585 = (_2836 * _2720.x) + _2658;
                        _2586 = (_2836 * _2720.y) + _2659;
                        _2587 = (_2836 * _2720.z) + _2660;
                        if (_2665 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2658 = _2585;
                            _2659 = _2586;
                            _2660 = _2587;
                            _2661 = _2588;
                            _2662 = _2589;
                            _2663 = _2590;
                            _2664 = _2665;
                        }
                    }
                    frontier_phi_66_pred = _2585;
                    frontier_phi_66_pred_1 = _2590;
                    frontier_phi_66_pred_2 = _2589;
                    frontier_phi_66_pred_3 = _2588;
                    frontier_phi_66_pred_4 = _2587;
                    frontier_phi_66_pred_5 = _2586;
                }
                _2361 = frontier_phi_66_pred;
                _2371 = frontier_phi_66_pred_1;
                _2369 = frontier_phi_66_pred_2;
                _2367 = frontier_phi_66_pred_3;
                _2365 = frontier_phi_66_pred_4;
                _2363 = frontier_phi_66_pred_5;
                uint _2520 = _2519 + 1u;
                if (_2520 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2513 = _2361;
                    _2514 = _2363;
                    _2515 = _2365;
                    _2516 = _2367;
                    _2517 = _2369;
                    _2518 = _2371;
                    _2519 = _2520;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
        }
        uvec4 _2374 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2375 = _2374.z;
        uint _2377 = (_2375 >> 8u) & 15u;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        if (((4294967295u << _2377) & _2259) == 0u)
        {
            _2481 = _2360;
            _2483 = _2362;
            _2485 = _2364;
            _2487 = _2366;
            _2489 = _2368;
            _2491 = _2370;
        }
        else
        {
            float _2506 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
            float _2507 = _2506 * _2213;
            float _2508 = _2506 * _2214;
            float _2509 = _2506 * _2215;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2377 < ((_2375 >> 12u) & 15u))
            {
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2641 = _2360;
                float _2642 = _2362;
                float _2643 = _2364;
                float _2644 = _2366;
                float _2645 = _2368;
                float _2646 = _2370;
                uint _2647 = _2377;
                uint _2656;
                bool _2657;
                for (;;)
                {
                    _2656 = texelFetch(g_lightClassification, int((((_2253 << 5u) + (_2239 << 9u)) + (_2647 << 2u)) >> 2u)).x;
                    _2657 = _2656 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2657)
                    {
                        frontier_phi_77_pred = _2646;
                        frontier_phi_77_pred_1 = _2645;
                        frontier_phi_77_pred_2 = _2644;
                        frontier_phi_77_pred_3 = _2643;
                        frontier_phi_77_pred_4 = _2642;
                        frontier_phi_77_pred_5 = _2641;
                    }
                    else
                    {
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _2863 = _2641;
                        float _2864 = _2642;
                        float _2865 = _2643;
                        float _2866 = _2644;
                        float _2867 = _2645;
                        float _2868 = _2646;
                        uint _2869 = _2656;
                        uint _2870;
                        vec4 _2895;
                        float _2896;
                        vec4 _2911;
                        vec3 _2923;
                        vec4 _2939;
                        vec4 _2955;
                        float _3002;
                        bool _3003;
                        for (;;)
                        {
                            uint _2880 = ((_2647 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2869));
                            _2870 = (_2869 + 4294967295u) & _2869;
                            uint _2882 = _2880 * 40u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            _2896 = _2895.w;
                            uint _2898 = (_2880 * 40u) + 4u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2913 = (_2880 * 40u) + 8u;
                            _2923 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x));
                            uint _2926 = (_2880 * 40u) + 16u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2942 = (_2880 * 40u) + 20u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2958 = (_2880 * 40u) + 24u;
                            vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2977 = (_2880 * 40u) + 28u;
                            vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            _3002 = fma(_2215, _2990.z, fma(_2214, _2990.y, _2990.x * _2213)) + _2990.w;
                            _3003 = !((fma(_2215, _2971.z, fma(_2214, _2971.y, _2971.x * _2213)) + _2971.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3003)
                            {
                                float _3030 = _2895.x - _2213;
                                float _3031 = _2895.y - _2214;
                                float _3032 = _2895.z - _2215;
                                float _3033 = dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032));
                                float _3036 = inversesqrt(_3033);
                                float _3037 = _3036 * _3030;
                                float _3038 = _3036 * _3031;
                                float _3039 = _3036 * _3032;
                                float _3043 = 1.0 - (_3033 / (_2896 * _2896));
                                float _4126 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3044 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3048 = sqrt(_3033) * _2911.w;
                                float _3050 = 1.39999997615814208984375 / (_3048 + 1.39999997615814208984375);
                                float _3051 = _3050 * _3050;
                                float _3054 = ((1.0 - _3051) * dot(vec3(_3037, _3038, _3039), vec3(_415, _418, _421))) + _3051;
                                float _3057 = _3048 * _3048;
                                float _3061 = (fma(_2215, _2939.z, fma(_2214, _2939.y, _2939.x * _2213)) + _2939.w) / _3002;
                                float _3062 = (fma(_2215, _2955.z, fma(_2214, _2955.y, _2955.x * _2213)) + _2955.w) / _3002;
                                float _3066 = 1.0 - dot(vec2(_3061, _3062), vec2(_3061, _3062));
                                float _4142 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3067 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3068 = _3067 * (((isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))) * _3044) / ((_3057 * 0.699999988079071044921875) + 1.0));
                                float _3080 = exp2(log2(1.0 / ((_3057 * 3.5) + 5.0)) * 0.25);
                                float _3081 = 1.0 - _491;
                                float _3088 = sqrt(1.0 - ((1.0 - (_3081 * _3081)) * (1.0 - (_3080 * _3080))));
                                float _3089 = _3088 * _3088;
                                float _3090 = _3089 * _3089;
                                float _3091 = _3037 - _2507;
                                float _3092 = _3038 - _2508;
                                float _3093 = _3039 - _2509;
                                float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                                float _3101 = dot(vec3(_415, _418, _421), vec3((-0.0) - _2507, (-0.0) - _2508, (-0.0) - _2509));
                                float _4153 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3104 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3105 = dot(vec3(_415, _418, _421), vec3(_3097 * _3091, _3097 * _3092, _3097 * _3093));
                                float _4164 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3108 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3112 = ((_3108 * _3108) * (_3090 + (-1.0))) + 1.0;
                                float _3113 = _3050 * _3089;
                                float _3114 = _3113 * _3113;
                                float _3120 = ((1.0 - _3114) * dot(vec3(_415, _418, _421), vec3(_3037, _3038, _3039))) + _3114;
                                float _4175 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3122 = 1.0 - _3089;
                                float _3132 = (0.5 / (((_3121 * ((_3104 * _3122) + _3089)) + 9.9999999392252902907785028219223e-09) + (((_3121 * _3122) + _3089) * _3104))) * _3121;
                                float _4186 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3142 = (_3067 * _3044) * (((_3090 * 3.1415927410125732421875) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) / ((_3112 * _3112) * ((_3057 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3068 * _2911.y;
                                frontier_phi_83_pred_1 = _3068 * _2911.x;
                                frontier_phi_83_pred_2 = _3142 * _2923.z;
                                frontier_phi_83_pred_3 = _3142 * _2923.y;
                                frontier_phi_83_pred_4 = _3142 * _2923.x;
                                frontier_phi_83_pred_5 = _3068 * _2911.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3150 = frontier_phi_83_pred;
                            _3149 = frontier_phi_83_pred_1;
                            _3148 = frontier_phi_83_pred_2;
                            _3147 = frontier_phi_83_pred_3;
                            _3146 = frontier_phi_83_pred_4;
                            _3151 = frontier_phi_83_pred_5;
                            _2853 = _3149 + _2866;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            _2850 = _3146 + _2863;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            if (_2870 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2870;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2855;
                        frontier_phi_77_pred_1 = _2854;
                        frontier_phi_77_pred_2 = _2853;
                        frontier_phi_77_pred_3 = _2852;
                        frontier_phi_77_pred_4 = _2851;
                        frontier_phi_77_pred_5 = _2850;
                    }
                    _2492 = frontier_phi_77_pred;
                    _2490 = frontier_phi_77_pred_1;
                    _2488 = frontier_phi_77_pred_2;
                    _2486 = frontier_phi_77_pred_3;
                    _2484 = frontier_phi_77_pred_4;
                    _2482 = frontier_phi_77_pred_5;
                    uint _2648 = _2647 + 1u;
                    if (_2648 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2641 = _2482;
                        _2642 = _2484;
                        _2643 = _2486;
                        _2644 = _2488;
                        _2645 = _2490;
                        _2646 = _2492;
                        _2647 = _2648;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2486;
                frontier_phi_58_59_ladder_1 = _2492;
                frontier_phi_58_59_ladder_2 = _2490;
                frontier_phi_58_59_ladder_3 = _2488;
                frontier_phi_58_59_ladder_4 = _2484;
                frontier_phi_58_59_ladder_5 = _2482;
            }
            else
            {
                frontier_phi_58_59_ladder = _2364;
                frontier_phi_58_59_ladder_1 = _2370;
                frontier_phi_58_59_ladder_2 = _2368;
                frontier_phi_58_59_ladder_3 = _2366;
                frontier_phi_58_59_ladder_4 = _2362;
                frontier_phi_58_59_ladder_5 = _2360;
            }
            _2481 = frontier_phi_58_59_ladder_5;
            _2483 = frontier_phi_58_59_ladder_4;
            _2485 = frontier_phi_58_59_ladder;
            _2487 = frontier_phi_58_59_ladder_3;
            _2489 = frontier_phi_58_59_ladder_2;
            _2491 = frontier_phi_58_59_ladder_1;
        }
        float _2496 = isnan(1.0) ? _475 : (isnan(_475) ? 1.0 : min(_475, 1.0));
        _2272 = (_2496 * _2487) + _1705;
        _2274 = (_2496 * _2489) + _1707;
        _2276 = (_2496 * _2491) + _1709;
        _2278 = ((_2481 * _460) * _2496) + _2053;
        _2280 = ((_2483 * _462) * _2496) + _2055;
        _2282 = ((_2485 * _463) * _2496) + _2057;
    }
    else
    {
        _2272 = _1705;
        _2274 = _1707;
        _2276 = _1709;
        _2278 = _2053;
        _2280 = _2055;
        _2282 = _2057;
    }
    float _4202 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4213 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4224 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _2299 = ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2272 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _475))) + ((_2278 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    float _2300 = ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2274 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _475))) + ((_2280 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    float _2301 = ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2276 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _475))) + ((_2282 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    uint _2302 = _434 + 6u;
    float _2310 = _394 / cbSceneParam._m0[86u].x;
    float _2311 = _395 / cbSceneParam._m0[86u].y;
    vec4 _2325 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2310, _2311, (log2((isnan(cbSceneParam._m0[77u].w) ? _315 : (isnan(_315) ? cbSceneParam._m0[77u].w : min(_315, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2327 = _2325.x;
    float _2328 = _2325.y;
    float _2329 = _2325.z;
    float _2330 = _2325.w;
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    if (_315 > cbSceneParam._m0[78u].w)
    {
        float _2385 = isnan(_315) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _315 : min(cbSceneParam._m0[80u].w, _315));
        float _2386 = _2385 / _315;
        float _2397 = _2386 * _366;
        float _2398 = _367 * _2386;
        float _2399 = (-0.0) - _2398;
        float _2401 = _2386 * _368;
        float _2403 = (cbSceneParam._m0[77u].w * _2399) / _2385;
        float _2404 = _2403 + cbSceneParam._m0[79u].w;
        float _2405 = cbSceneParam._m0[79u].w - _2398;
        float _2411 = sqrt(((_2397 * _2397) + (_2398 * _2398)) + (_2401 * _2401));
        float _2414 = (1.0 - (cbSceneParam._m0[77u].w / _2385)) * _2411;
        float _2419 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2421 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2598;
        if (abs((_2399 - _2403) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2598 = ((((_2404 > 0.0) ? exp2(_2419 * _2404) : (2.0 - exp2(_2421 * _2404))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2414;
        }
        else
        {
            float _2542 = 1.0 / cbSceneParam._m0[80u].x;
            float _2543 = isnan(_2405) ? _2404 : (isnan(_2404) ? _2405 : max(_2404, _2405));
            float _2544 = isnan(_2405) ? _2404 : (isnan(_2404) ? _2405 : min(_2404, _2405));
            float _2553 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : min(_2543, 0.0));
            float _2554 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : min(_2544, 0.0));
            _2598 = ((abs(_2411 / _2399) * cbSceneParam._m0[80u].y) * ((((_2553 - _2554) * 2.0) - ((exp2(_2419 * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0)))) - exp2(_2419 * (isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0))))) * _2542)) - ((exp2(_2421 * _2553) - exp2(_2421 * _2554)) * _2542))) + (_2414 * cbSceneParam._m0[80u].z);
        }
        vec4 _2600 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2310, _2311, 1.0), 0.0);
        float _2609 = exp2((_2598 * (-1.44269502162933349609375)) * (1.0 - _2600.w));
        float _2610 = log2(_2609);
        float _2626 = log2(_2330);
        _2423 = (exp2(_2626 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].x)) * _2600.x) / cbSceneParam._m0[78u].x)) + _2327;
        _2425 = (exp2(_2626 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].y)) * _2600.y) / cbSceneParam._m0[78u].y)) + _2328;
        _2427 = (exp2(_2626 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].z)) * _2600.z) / cbSceneParam._m0[78u].z)) + _2329;
        _2429 = _2609 * _2330;
    }
    else
    {
        _2423 = _2327;
        _2425 = _2328;
        _2427 = _2329;
        _2429 = _2330;
    }
    bool _2636;
    vec4 _2439;
    vec4 _2461;
    float _2463;
    float _2467;
    float _2468;
    float _2469;
    float _2470;
    bool _2480;
    for (;;)
    {
        _2439 = cbMatDynParam._m0[0u];
        float _2441 = roundEven(_2439.y);
        bool _2442 = _2441 == 3.0;
        float _2443 = log2(_2429);
        float _2450 = exp2(_2443 * cbSceneParam._m0[78u].x) * _2299;
        float _2451 = exp2(_2443 * cbSceneParam._m0[78u].y) * _2300;
        float _2452 = exp2(_2443 * cbSceneParam._m0[78u].z) * _2301;
        float _2459 = _382 + (-0.5);
        _2461 = cbMtdParam._m0[1u];
        _2463 = _2461.y * _2459;
        float _2466 = (_2441 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2467 = _2466 * (_2442 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2423)));
        _2468 = _2466 * (_2442 ? _2451 : (_2451 + (cbSceneParam._m0[72u].w * _2425)));
        _2469 = _2466 * (_2442 ? _2452 : (_2452 + (cbSceneParam._m0[72u].w * _2427)));
        _2470 = _2459 * 0.999000012874603271484375;
        _2480 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2480)
        {
            if ((cbInstanceData._m0[_434 + 7u].x + _2470) < 0.5)
            {
                _2636 = true;
                break;
            }
        }
        uint _2577 = _436 + uint(_2439.w);
        if ((cbInstanceData._m0[_2577].w < 1.0) && ((cbInstanceData._m0[_2577].w + _2470) < 0.5))
        {
            _2636 = true;
            break;
        }
        if ((_2463 + 1.0) < _2461.x)
        {
            _2636 = true;
            break;
        }
        _2636 = false;
        break;
    }
    float _2841;
    if (_2636)
    {
        discard_state = true;
        _2841 = 0.0;
    }
    else
    {
        _2841 = cbInstanceData._m0[_2302].w;
    }
    SV_Target.x = _2467;
    SV_Target.y = _2468;
    SV_Target.z = _2469;
    SV_Target.w = _2841;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2302].w;
    discard_exit();
}


