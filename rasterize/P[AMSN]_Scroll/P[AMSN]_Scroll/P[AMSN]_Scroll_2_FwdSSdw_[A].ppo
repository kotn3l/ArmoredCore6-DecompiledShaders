#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _896;
float _3310;
float _3311;
float _3312;
float _3313;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = ((cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.x;
    float _229 = ((cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.y;
    vec4 _242 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_228 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_229 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _228) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _229) + cbTextureTilingScale._m0[2u].w));
    float _266 = cbMtdParam._m0[10u].x + _262.x;
    vec4 _278 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _228) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _229) + cbTextureTilingScale._m0[1u].w));
    float _282 = _278.z;
    float _286 = (_278.x * 2.0) + (-1.0);
    float _288 = (_278.y * 2.0) + (-1.0);
    float _289 = dot(vec2(_286, _288), vec2(_286, _288));
    float _3322 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _295 = sqrt(1.0 - (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))));
    float _298 = fma(_295, _201 * NORMAL.x, fma(_288, _208 * TANGENT.x, (_194 * _187) * _286));
    float _301 = fma(_295, _201 * NORMAL.y, fma(_288, _208 * TANGENT.y, (_194 * _188) * _286));
    float _304 = fma(_295, _201 * NORMAL.z, fma(_288, _208 * TANGENT.z, (_194 * _189) * _286));
    float _308 = inversesqrt(dot(vec3(_298, _301, _304), vec3(_298, _301, _304)));
    float _309 = _308 * _298;
    float _310 = _308 * _301;
    float _311 = _308 * _304;
    float _3333 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _312 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _3344 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3355 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3366 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3377 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _316 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _332 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _373 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _383 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _373);
    float _384 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _373);
    float _385 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _373);
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _390 = _383 * _389;
    float _391 = _384 * _389;
    float _392 = _385 * _389;
    vec4 _397 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _399 = _397.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _575 = sqrt(((_383 * _383) + (_384 * _384)) + (_385 * _385));
        float _581 = (cbMatDynParam._m0[5u].x * _575) + cbMatDynParam._m0[5u].y;
        float _3388 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        float _582 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _586 = (cbMatDynParam._m0[5u].z * _575) + cbMatDynParam._m0[5u].w;
        float _3399 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) - _582)) + _582) < ((_399 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _411 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _412 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _432 = fma(_311, cbSceneParam._m0[5u].z, fma(_310, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _309));
    float _435 = fma(_311, cbSceneParam._m0[6u].z, fma(_310, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _309));
    float _438 = fma(_311, cbSceneParam._m0[7u].z, fma(_310, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _309));
    uint _451 = uint(roundEven(NORMAL.w)) * 13u;
    uint _453 = _451 + 9u;
    uint _454 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _460 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0)))) * cbInstanceData._m0[_454].x;
    float _461 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) * cbInstanceData._m0[_454].y;
    float _462 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0)))) * cbInstanceData._m0[_454].z;
    float _3410 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _3421 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _466 = 1.0 - _316;
    float _467 = _463 * _466;
    float _468 = _464 * _466;
    float _469 = _465 * _466;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _316;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _316;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _316;
    float _477 = _474 + 0.039999999105930328369140625;
    float _479 = _475 + 0.039999999105930328369140625;
    float _480 = _476 + 0.039999999105930328369140625;
    vec4 _489 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _411, cbSceneParam._m0[86u].y * _412));
    float _492 = _489.x * TEXCOORD.z;
    float _493 = dot(vec3(_309, _310, _311), vec3(_390, _391, _392));
    float _496 = _493 * 2.0;
    float _500 = (_496 * _309) - _390;
    float _501 = (_496 * _310) - _391;
    float _502 = (_496 * _311) - _392;
    float _506 = abs(dot(vec3(_390, _391, _392), vec3(_309, _310, _311)));
    float _3443 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _508 = sqrt(_312);
    float _521 = exp2((_508 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_508 * 3.0));
    float _527 = (1.0 - _521) * ((_508 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _528 = _521 * _508;
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _895;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _620 = fma(_564, cbModelParam._m0[26u].z, fma(_560, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556));
        float _624 = fma(_564, cbModelParam._m0[27u].z, fma(_560, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556));
        float _628 = fma(_564, cbModelParam._m0[28u].z, fma(_560, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556));
        float _653 = _556 + _309;
        float _654 = _560 + _310;
        float _655 = _564 + _311;
        float _665 = fma(_655, cbModelParam._m0[26u].z, fma(_654, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653)) - _620;
        float _666 = fma(_655, cbModelParam._m0[27u].z, fma(_654, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653)) - _624;
        float _667 = fma(_655, cbModelParam._m0[28u].z, fma(_654, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653)) - _628;
        float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
        float _684 = ((_671 * _665) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_620 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _685 = ((_671 * _666) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_624 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_671 * _667) / cbModelParam._m0[34u].z) + ((((((_628 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        float _723 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_689.x + (-0.5));
        float _725 = _723 * (_689.y + (-0.5));
        float _726 = _723 * (_689.z + (-0.5));
        float _733 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_696.x + (-0.5));
        float _735 = _733 * (_696.y + (-0.5));
        float _736 = _733 * (_696.z + (-0.5));
        float _743 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_703.x + (-0.5));
        float _745 = _743 * (_703.y + (-0.5));
        float _746 = _743 * (_703.z + (-0.5));
        float _753 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_710.x + (-0.5));
        float _755 = _753 * (_710.y + (-0.5));
        float _756 = _753 * (_710.z + (-0.5));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = _724 * 0.5;
        float _761 = _734 * 0.5;
        float _762 = _744 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _777 = (dot(vec3(_309, _310, _311), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _787 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3491 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_789 + 1.0))) + _794) * _757;
        float _804 = _725 * 0.5;
        float _805 = _735 * 0.5;
        float _806 = _745 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_309, _310, _311), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3524 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_831 + 1.0))) + _836) * _758;
        float _846 = _726 * 0.5;
        float _847 = _736 * 0.5;
        float _848 = _746 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_309, _310, _311), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3557 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_873 + 1.0))) + _878) * _759;
        _895 = _726;
        _897 = _725;
        _898 = _724;
        _899 = _736;
        _900 = _735;
        _901 = _734;
        _902 = _746;
        _903 = _745;
        _904 = _744;
        _905 = _759;
        _906 = _758;
        _907 = _757;
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
    }
    else
    {
        _895 = _896;
        _897 = _896;
        _898 = _896;
        _899 = _896;
        _900 = _896;
        _901 = _896;
        _902 = _896;
        _903 = _896;
        _904 = _896;
        _905 = _896;
        _906 = _896;
        _907 = _896;
        _908 = 0.0;
        _909 = 0.0;
        _910 = 0.0;
    }
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _939 = fma(_564, cbModelParam._m0[30u].z, fma(_560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _556));
        float _943 = fma(_564, cbModelParam._m0[31u].z, fma(_560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _556));
        float _947 = fma(_564, cbModelParam._m0[32u].z, fma(_560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _556));
        float _970 = _556 + _309;
        float _971 = _560 + _310;
        float _972 = _564 + _311;
        float _982 = fma(_972, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _970)) - _939;
        float _983 = fma(_972, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _970)) - _943;
        float _984 = fma(_972, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _970)) - _947;
        float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
        float _1001 = ((_988 * _982) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_939 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_988 * _983) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_943 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_988 * _984) / cbModelParam._m0[35u].z) + ((((((_947 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        float _1038 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1005.x + (-0.5));
        float _1040 = _1038 * (_1005.y + (-0.5));
        float _1041 = _1038 * (_1005.z + (-0.5));
        float _1048 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1012.x + (-0.5));
        float _1050 = _1048 * (_1012.y + (-0.5));
        float _1051 = _1048 * (_1012.z + (-0.5));
        float _1058 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1019.x + (-0.5));
        float _1060 = _1058 * (_1019.y + (-0.5));
        float _1061 = _1058 * (_1019.z + (-0.5));
        float _1068 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1026.x + (-0.5));
        float _1070 = _1068 * (_1026.y + (-0.5));
        float _1071 = _1068 * (_1026.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_309, _310, _311), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3620 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1102 + 1.0))) + _1107) * _1072;
        float _1117 = _1040 * 0.5;
        float _1118 = _1050 * 0.5;
        float _1119 = _1060 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_309, _310, _311), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3653 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1144 + 1.0))) + _1149) * _1073;
        float _1159 = _1041 * 0.5;
        float _1160 = _1051 * 0.5;
        float _1161 = _1061 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_309, _310, _311), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3686 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1186 + 1.0))) + _1191) * _1074;
        _1208 = _1041;
        _1209 = _1040;
        _1210 = _1039;
        _1211 = _1051;
        _1212 = _1050;
        _1213 = _1049;
        _1214 = _1061;
        _1215 = _1060;
        _1216 = _1059;
        _1217 = _1074;
        _1218 = _1073;
        _1219 = _1072;
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
    }
    else
    {
        _1208 = _896;
        _1209 = _896;
        _1210 = _896;
        _1211 = _896;
        _1212 = _896;
        _1213 = _896;
        _1214 = _896;
        _1215 = _896;
        _1216 = _896;
        _1217 = _896;
        _1218 = _896;
        _1219 = _896;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _908)) + _908;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _909)) + _909;
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _910)) + _910;
    float _1255 = fma(_1234, cbSceneParam._m0[89u].z, fma(_1233, cbSceneParam._m0[89u].y, _1232 * cbSceneParam._m0[89u].x));
    float _1258 = fma(_1234, cbSceneParam._m0[90u].z, fma(_1233, cbSceneParam._m0[90u].y, _1232 * cbSceneParam._m0[90u].x));
    float _1261 = fma(_1234, cbSceneParam._m0[91u].z, fma(_1233, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1232));
    float _1276 = _500 * 0.5;
    float _1277 = _501 * 0.5;
    float _1278 = _502 * 0.5;
    float _1279 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1282 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1285 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1319;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1292 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_895, _899, _902, _905));
        float _1296 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_897, _900, _903, _906));
        float _1300 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_898, _901, _904, _907));
        float _1307 = dot(vec4(cbModelParam._m0[39u]), vec4(_1276, _1277, _1278, 1.0));
        _1319 = dot(vec3(isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1307) ? 0.0 : (isnan(0.0) ? _1307 : max(0.0, _1307))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1319 = 1.0;
    }
    float _1330;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1321 = dot(vec4(cbModelParam._m0[40u]), vec4(_1276, _1277, _1278, 1.0));
        _1330 = dot(vec3(isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1330 = 1.0;
    }
    float _1334 = (_1330 * cbModelParam._m0[1u].x) + (_1319 * (1.0 - cbModelParam._m0[1u].x));
    float _1344 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _312);
    float _1345 = isnan(_1344) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1344 : min(cbModelParam._m0[25u].z, _1344));
    float _1427;
    float _1429;
    float _1431;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1394 = fma(_564, cbModelParam._m0[13u].z, fma(_560, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556)) + cbModelParam._m0[13u].w;
        float _1398 = fma(_564, cbModelParam._m0[14u].z, fma(_560, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556)) + cbModelParam._m0[14u].w;
        float _1402 = fma(_564, cbModelParam._m0[15u].z, fma(_560, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556)) + cbModelParam._m0[15u].w;
        float _1405 = fma(_502, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500));
        float _1408 = fma(_502, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500));
        float _1411 = fma(_502, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500));
        float _1439;
        if (_1405 > 0.0)
        {
            _1439 = abs((1.0 - _1394) / _1405);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1394 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1439 = frontier_phi_17_15_ladder;
        }
        float _1667;
        if (_1408 > 0.0)
        {
            _1667 = abs((1.0 - _1398) / _1408);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1398 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1667 = frontier_phi_26_22_ladder;
        }
        float _1924;
        if (_1411 > 0.0)
        {
            _1924 = abs((1.0 - _1402) / _1411);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1402 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1924 = frontier_phi_38_33_ladder;
        }
        float _1926 = isnan(_1667) ? _1439 : (isnan(_1439) ? _1667 : min(_1439, _1667));
        float _1927 = isnan(_1924) ? _1926 : (isnan(_1926) ? _1924 : min(_1926, _1924));
        float _1931 = (_1927 * _1405) + _1394;
        float _1932 = (_1927 * _1408) + _1398;
        float _1933 = (_1927 * _1411) + _1402;
        float _1934 = _1927 * 9.9999997473787516355514526367188e-05;
        float _1936 = (-1.0) - _1934;
        float _1938 = _1934 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1933 > _1938) || ((_1933 < _1936) || ((_1932 > _1938) || ((_1932 < _1936) || ((_1931 < _1936) || (_1931 > _1938))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2061 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1933, cbModelParam._m0[9u].z, fma(_1932, cbModelParam._m0[9u].y, _1931 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1933, cbModelParam._m0[10u].z, fma(_1932, cbModelParam._m0[10u].y, _1931 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1933, cbModelParam._m0[11u].z, fma(_1932, cbModelParam._m0[11u].y, _1931 * cbModelParam._m0[11u].x))), _1345);
            frontier_phi_16_38_ladder = _2061.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2061.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2061.x * cbModelParam._m0[1u].y;
        }
        _1427 = frontier_phi_16_38_ladder_2;
        _1429 = frontier_phi_16_38_ladder_1;
        _1431 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_500, _501, _502), _1345);
        _1427 = _1415.x * cbModelParam._m0[1u].y;
        _1429 = _1415.y * cbModelParam._m0[1u].y;
        _1431 = _1415.z * cbModelParam._m0[1u].y;
    }
    float _1435 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _312);
    float _1436 = isnan(_1435) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1435 : min(cbModelParam._m0[25u].w, _1435));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1492 = fma(_564, cbModelParam._m0[21u].z, fma(_560, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556)) + cbModelParam._m0[21u].w;
        float _1496 = fma(_564, cbModelParam._m0[22u].z, fma(_560, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556)) + cbModelParam._m0[22u].w;
        float _1500 = fma(_564, cbModelParam._m0[23u].z, fma(_560, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556)) + cbModelParam._m0[23u].w;
        float _1503 = fma(_502, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500));
        float _1506 = fma(_502, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500));
        float _1509 = fma(_502, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500));
        float _1672;
        if (_1503 > 0.0)
        {
            _1672 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1672 = frontier_phi_28_24_ladder;
        }
        float _1951;
        if (_1506 > 0.0)
        {
            _1951 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1951 = frontier_phi_40_35_ladder;
        }
        float _2164;
        if (_1509 > 0.0)
        {
            _2164 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2164 = frontier_phi_49_46_ladder;
        }
        float _2166 = isnan(_1951) ? _1672 : (isnan(_1672) ? _1951 : min(_1672, _1951));
        float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
        float _2171 = (_2167 * _1503) + _1492;
        float _2172 = (_2167 * _1506) + _1496;
        float _2173 = (_2167 * _1509) + _1500;
        float _2174 = _2167 * 9.9999997473787516355514526367188e-05;
        float _2175 = (-1.0) - _2174;
        float _2177 = _2174 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2173 > _2177) || ((_2173 < _2175) || ((_2172 > _2177) || ((_2172 < _2175) || ((_2171 < _2175) || (_2171 > _2177))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2372 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2173, cbModelParam._m0[17u].z, fma(_2172, cbModelParam._m0[17u].y, _2171 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2173, cbModelParam._m0[18u].z, fma(_2172, cbModelParam._m0[18u].y, _2171 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2173, cbModelParam._m0[19u].z, fma(_2172, cbModelParam._m0[19u].y, _2171 * cbModelParam._m0[19u].x))), _1436);
            frontier_phi_25_49_ladder = _2372.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2372.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2372.x * cbModelParam._m0[1u].z;
        }
        _1528 = frontier_phi_25_49_ladder_2;
        _1530 = frontier_phi_25_49_ladder_1;
        _1532 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_500, _501, _502), _1436);
        _1528 = _1512.x * cbModelParam._m0[1u].z;
        _1530 = _1512.y * cbModelParam._m0[1u].z;
        _1532 = _1512.z * cbModelParam._m0[1u].z;
    }
    float _1545 = (((_527 * _477) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1528 - _1427)) + _1427);
    float _1547 = (((_527 * _479) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1530 - _1429)) + _1429);
    float _1549 = (((_527 * _480) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1532 - _1431)) + _1431);
    float _1552 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, _1545 * cbSceneParam._m0[91u].x));
    vec4 _1566 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_411, _412));
    float _1568 = _1566.w;
    float _1580 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1568);
    float _1581 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1568);
    float _1582 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1568);
    uvec4 _1586 = floatBitsToUint(cbInstanceData._m0[_451 + 5u]);
    uint _1588 = _1586.x * 14u;
    uint _1589 = _1588 + 13u;
    float _1596 = _492 + (-1.0);
    float _1601 = (cbLight._m0[_1589].x * _1596) + 1.0;
    float _1602 = (cbLight._m0[_1589].y * _1596) + 1.0;
    float _1603 = (cbLight._m0[_1589].z * _1596) + 1.0;
    float _1604 = (cbLight._m0[_1589].w * _1596) + 1.0;
    uint _1605 = _1588 + 5u;
    float _1611 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
    uint _1615 = _1588 + 4u;
    float _1625 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
    uint _1629 = _1588 | 1u;
    float _1640 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_309, _310, _311));
    float _1643 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_309, _310, _311));
    float _3822 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _3833 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1648 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * 0.3183098733425140380859375;
    float _1650 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.3183098733425140380859375;
    float _1657 = ((cbLight._m0[_1605].x * _1611) * _1650) + (((cbLight._m0[_1615].x * _1580) * _1625) * _1648);
    float _1658 = ((_1611 * cbLight._m0[_1605].y) * _1650) + (((cbLight._m0[_1615].y * _1581) * _1625) * _1648);
    float _1659 = ((_1611 * cbLight._m0[_1605].z) * _1650) + (((cbLight._m0[_1615].z * _1582) * _1625) * _1648);
    uvec4 _1664 = floatBitsToUint(cbLight._m0[_1588 + 12u]);
    bool _1666 = _1664.x == 0u;
    float _1677;
    float _1679;
    float _1681;
    if (_1666)
    {
        _1677 = _1657;
        _1679 = _1658;
        _1681 = _1659;
    }
    else
    {
        uint _1685 = _1588 + 6u;
        float _1701 = (dot(vec3(cbLight._m0[_1588 + 2u].xyz), vec3(_309, _310, _311)) * 0.5) + 0.5;
        float _1702 = _1701 * _1701;
        float _3844 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1704 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1677 = (((cbLight._m0[_1685].x * 0.3183098733425140380859375) * _1703) * _1704) + _1657;
        _1679 = (((cbLight._m0[_1685].y * 0.3183098733425140380859375) * _1703) * _1704) + _1658;
        _1681 = (((cbLight._m0[_1685].z * 0.3183098733425140380859375) * _1703) * _1704) + _1659;
    }
    bool _1684 = _1664.y == 0u;
    float _1722;
    float _1724;
    float _1726;
    if (_1684)
    {
        _1722 = _1677;
        _1724 = _1679;
        _1726 = _1681;
    }
    else
    {
        uint _1895 = _1588 + 7u;
        float _1911 = (dot(vec3(cbLight._m0[_1588 + 3u].xyz), vec3(_309, _310, _311)) * 0.5) + 0.5;
        float _1912 = _1911 * _1911;
        float _3860 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1914 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _1722 = (((cbLight._m0[_1895].x * 0.3183098733425140380859375) * _1913) * _1914) + _1677;
        _1724 = (((cbLight._m0[_1895].y * 0.3183098733425140380859375) * _1913) * _1914) + _1679;
        _1726 = (((cbLight._m0[_1895].z * 0.3183098733425140380859375) * _1913) * _1914) + _1681;
    }
    uint _1729 = _1588 + 8u;
    float _1742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1588].w)) * _312) * 0.949999988079071044921875);
    float _1743 = _1742 * _1742;
    float _1744 = cbLight._m0[_1588].x + _390;
    float _1745 = cbLight._m0[_1588].y + _391;
    float _1746 = cbLight._m0[_1588].z + _392;
    float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
    float _1751 = _1750 * _1744;
    float _1752 = _1750 * _1745;
    float _1753 = _1750 * _1746;
    float _1754 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1588].xyz));
    float _3876 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _1758 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _1759 = dot(vec3(_309, _310, _311), vec3(_1751, _1752, _1753));
    float _3898 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1762 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _1763 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_1751, _1752, _1753));
    float _3909 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1767 = _1743 * _1743;
    float _1771 = ((_1762 * _1762) * (_1767 + (-1.0))) + 1.0;
    float _1779 = exp2(log2(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * 5.0);
    float _1780 = 0.959999978542327880859375 - _474;
    float _1782 = 0.959999978542327880859375 - _475;
    float _1783 = 0.959999978542327880859375 - _476;
    float _1790 = 1.0 - _1743;
    float _1801 = (0.5 / (((_1758 * ((_1757 * _1790) + _1743)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1790) + _1743) * _1757))) * _1757;
    float _3920 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1767 / ((_1771 * _1771) * 3.141590118408203125));
    uint _1817 = _1588 + 9u;
    float _1828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _312) * 0.949999988079071044921875);
    float _1829 = _1828 * _1828;
    float _1830 = cbLight._m0[_1629].x + _390;
    float _1831 = cbLight._m0[_1629].y + _391;
    float _1832 = cbLight._m0[_1629].z + _392;
    float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
    float _1837 = _1836 * _1830;
    float _1838 = _1836 * _1831;
    float _1839 = _1836 * _1832;
    float _1840 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1629].xyz));
    float _3931 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _1844 = dot(vec3(_309, _310, _311), vec3(_1837, _1838, _1839));
    float _3942 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _1848 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1837, _1838, _1839));
    float _3953 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1852 = _1829 * _1829;
    float _1856 = ((_1847 * _1847) * (_1852 + (-1.0))) + 1.0;
    float _1863 = exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0);
    float _1870 = 1.0 - _1829;
    float _1880 = (0.5 / (((_1758 * ((_1843 * _1870) + _1829)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1870) + _1829) * _1843))) * _1843;
    float _3964 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1882 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1852 / ((_1856 * _1856) * 3.141590118408203125));
    float _1892 = (((((_1863 * _1780) + _477) * cbLight._m0[_1817].x) * _1882) * _1611) + ((((cbLight._m0[_1729].x * _1580) * ((_1779 * _1780) + _477)) * _1803) * _1625);
    float _1893 = (((((_1863 * _1782) + _479) * cbLight._m0[_1817].y) * _1882) * _1611) + ((((cbLight._m0[_1729].y * _1581) * ((_1779 * _1782) + _479)) * _1803) * _1625);
    float _1894 = (((((_1863 * _1783) + _480) * cbLight._m0[_1817].z) * _1882) * _1611) + ((((cbLight._m0[_1729].z * _1582) * ((_1779 * _1783) + _480)) * _1803) * _1625);
    float _1956;
    float _1958;
    float _1960;
    if (_1666)
    {
        _1956 = _1892;
        _1958 = _1893;
        _1960 = _1894;
    }
    else
    {
        uint _1962 = _1588 + 2u;
        uint _1966 = _1588 + 10u;
        float _1980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _312) * 0.949999988079071044921875);
        float _1981 = _1980 * _1980;
        float _1982 = cbLight._m0[_1962].x + _390;
        float _1983 = cbLight._m0[_1962].y + _391;
        float _1984 = cbLight._m0[_1962].z + _392;
        float _1988 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
        float _1989 = _1988 * _1982;
        float _1990 = _1988 * _1983;
        float _1991 = _1988 * _1984;
        float _1992 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1962].xyz));
        float _3975 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1995 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1996 = dot(vec3(_309, _310, _311), vec3(_1989, _1990, _1991));
        float _3986 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1999 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _2000 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_1989, _1990, _1991));
        float _3997 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2004 = _1981 * _1981;
        float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
        float _2015 = exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0);
        float _2022 = 1.0 - _1981;
        float _2032 = (0.5 / (((_1758 * ((_1995 * _2022) + _1981)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2022) + _1981) * _1995))) * _1995;
        float _4008 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2034 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
        float _2035 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1956 = (((((_2015 * _1780) + _477) * cbLight._m0[_1966].x) * _2034) * _2035) + _1892;
        _1958 = (((((_2015 * _1782) + _479) * cbLight._m0[_1966].y) * _2034) * _2035) + _1893;
        _1960 = (((((_2015 * _1783) + _480) * cbLight._m0[_1966].z) * _2034) * _2035) + _1894;
    }
    float _2070;
    float _2072;
    float _2074;
    if (_1684)
    {
        _2070 = _1956;
        _2072 = _1958;
        _2074 = _1960;
    }
    else
    {
        uint _2081 = _1588 + 3u;
        uint _2085 = _1588 + 11u;
        float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _312) * 0.949999988079071044921875);
        float _2100 = _2099 * _2099;
        float _2101 = cbLight._m0[_2081].x + _390;
        float _2102 = cbLight._m0[_2081].y + _391;
        float _2103 = cbLight._m0[_2081].z + _392;
        float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
        float _2108 = _2107 * _2101;
        float _2109 = _2107 * _2102;
        float _2110 = _2107 * _2103;
        float _2111 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_2081].xyz));
        float _4024 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2115 = dot(vec3(_309, _310, _311), vec3(_2108, _2109, _2110));
        float _4035 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2118 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2119 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2108, _2109, _2110));
        float _4046 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2123 = _2100 * _2100;
        float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
        float _2134 = exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0);
        float _2141 = 1.0 - _2100;
        float _2151 = (0.5 / (((_1758 * ((_2114 * _2141) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2141) + _2100) * _2114))) * _2114;
        float _4057 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2153 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
        float _2154 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _2070 = (((((_2134 * _1780) + _477) * cbLight._m0[_2085].x) * _2153) * _2154) + _1956;
        _2072 = (((((_2134 * _1782) + _479) * cbLight._m0[_2085].y) * _2153) * _2154) + _1958;
        _2074 = (((((_2134 * _1783) + _480) * cbLight._m0[_2085].z) * _2153) * _2154) + _1960;
    }
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    if (_1586.y == 0u)
    {
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2229;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2229;
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2229;
        uvec4 _2244 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2245 = _2244.x;
        uint _2256 = uint((float(_2244.y) * floor(float(uint(cbSceneParam._m0[85u].y * _412) / _2245))) + floor(float(uint(cbSceneParam._m0[85u].x * _411) / _2245)));
        float _2266 = (log2(_2232 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2267 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        uint _2270 = uint(isnan(14.0) ? _2267 : (isnan(_2267) ? 14.0 : min(_2267, 14.0)));
        uvec4 _2275 = texelFetch(g_lightClusterGridBuffer, int(((_2270 << 2u) + (_2256 << 6u)) >> 2u));
        uint _2276 = _2275.x;
        uint _2277 = _2244.z;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        if (((((1u << ((_2277 >> 4u) & 15u)) + 4294967295u) & _2276) == 0u) || ((_2277 & 240u) == 0u))
        {
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
        }
        else
        {
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            uint _2536 = 0u;
            uint _2545;
            bool _2546;
            for (;;)
            {
                _2545 = texelFetch(g_lightClassification, int((((_2270 << 5u) + (_2256 << 9u)) + (_2536 << 2u)) >> 2u)).x;
                _2546 = _2545 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2546)
                {
                    frontier_phi_66_pred = _2530;
                    frontier_phi_66_pred_1 = _2535;
                    frontier_phi_66_pred_2 = _2534;
                    frontier_phi_66_pred_3 = _2533;
                    frontier_phi_66_pred_4 = _2532;
                    frontier_phi_66_pred_5 = _2531;
                }
                else
                {
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    uint _2681;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2535;
                    _2681 = _2545;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    for (;;)
                    {
                        uint _2685 = uint(findLSB(_2681)) + (_2536 << 5u);
                        uint _2682 = (_2681 + 4294967295u) & _2681;
                        uint _2687 = _2685 * 48u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2707 = (_2685 * 48u) + 4u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 3u)).x));
                        uint _2726 = (_2685 * 48u) + 8u;
                        vec3 _2737 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x));
                        float _2741 = _2701.x - _2230;
                        float _2742 = _2701.y - _2231;
                        float _2743 = _2701.z - _2232;
                        float _2744 = dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743));
                        float _2747 = inversesqrt(_2744);
                        float _2748 = _2747 * _2741;
                        float _2749 = _2747 * _2742;
                        float _2750 = _2747 * _2743;
                        float _2751 = dot(vec3(_432, _435, _438), vec3(_2748, _2749, _2750));
                        float _2756 = 1.0 - (_2744 * _2701.w);
                        float _4083 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2757 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                        float _2758 = sqrt(_2744) * _2720.w;
                        float _2761 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2751) + _2762;
                        float _2768 = _2758 * _2758;
                        float _2772 = ((isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))) * _2757) / ((_2768 * 0.699999988079071044921875) + 1.0);
                        float _2776 = (-0.0) - _2230;
                        float _2777 = (-0.0) - _2231;
                        float _2778 = (-0.0) - _2232;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2783 = _2782 * _2776;
                        float _2784 = _2782 * _2777;
                        float _2785 = _2782 * _2778;
                        float _2793 = exp2(log2(1.0 / ((_2768 * 3.5) + 5.0)) * 0.25);
                        float _2794 = 1.0 - _508;
                        float _2801 = sqrt(1.0 - ((1.0 - (_2794 * _2794)) * (1.0 - (_2793 * _2793))));
                        float _2802 = _2801 * _2801;
                        float _2803 = _2802 * _2802;
                        float _2804 = _2783 + _2748;
                        float _2805 = _2784 + _2749;
                        float _2806 = _2785 + _2750;
                        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
                        float _2814 = dot(vec3(_432, _435, _438), vec3(_2783, _2784, _2785));
                        float _4099 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2817 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2818 = dot(vec3(_432, _435, _438), vec3(_2810 * _2804, _2810 * _2805, _2810 * _2806));
                        float _4110 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                        float _2825 = ((_2821 * _2821) * (_2803 + (-1.0))) + 1.0;
                        float _2826 = _2761 * _2802;
                        float _2827 = _2826 * _2826;
                        float _2830 = ((1.0 - _2827) * _2751) + _2827;
                        float _4121 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2831 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                        float _2832 = 1.0 - _2802;
                        float _2842 = (0.5 / (((_2831 * ((_2817 * _2832) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2831 * _2832) + _2802) * _2817))) * _2831;
                        float _4132 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2853 = (((_2803 * 3.1415927410125732421875) * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) / ((_2825 * _2825) * ((_2768 * 2.1991131305694580078125) + 3.141590118408203125))) * _2757;
                        _2605 = (_2772 * _2720.x) + _2678;
                        _2606 = (_2772 * _2720.y) + _2679;
                        _2607 = (_2772 * _2720.z) + _2680;
                        _2602 = (_2853 * _2737.x) + _2675;
                        _2603 = (_2853 * _2737.y) + _2676;
                        _2604 = (_2853 * _2737.z) + _2677;
                        if (_2682 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2606;
                            _2680 = _2607;
                            _2681 = _2682;
                        }
                    }
                    frontier_phi_66_pred = _2602;
                    frontier_phi_66_pred_1 = _2607;
                    frontier_phi_66_pred_2 = _2606;
                    frontier_phi_66_pred_3 = _2605;
                    frontier_phi_66_pred_4 = _2604;
                    frontier_phi_66_pred_5 = _2603;
                }
                _2378 = frontier_phi_66_pred;
                _2388 = frontier_phi_66_pred_1;
                _2386 = frontier_phi_66_pred_2;
                _2384 = frontier_phi_66_pred_3;
                _2382 = frontier_phi_66_pred_4;
                _2380 = frontier_phi_66_pred_5;
                uint _2537 = _2536 + 1u;
                if (_2537 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2530 = _2378;
                    _2531 = _2380;
                    _2532 = _2382;
                    _2533 = _2384;
                    _2534 = _2386;
                    _2535 = _2388;
                    _2536 = _2537;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
        }
        uvec4 _2391 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2392 = _2391.z;
        uint _2394 = (_2392 >> 8u) & 15u;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        if (((4294967295u << _2394) & _2276) == 0u)
        {
            _2498 = _2377;
            _2500 = _2379;
            _2502 = _2381;
            _2504 = _2383;
            _2506 = _2385;
            _2508 = _2387;
        }
        else
        {
            float _2523 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
            float _2524 = _2523 * _2230;
            float _2525 = _2523 * _2231;
            float _2526 = _2523 * _2232;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2394 < ((_2392 >> 12u) & 15u))
            {
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2658 = _2377;
                float _2659 = _2379;
                float _2660 = _2381;
                float _2661 = _2383;
                float _2662 = _2385;
                float _2663 = _2387;
                uint _2664 = _2394;
                uint _2673;
                bool _2674;
                for (;;)
                {
                    _2673 = texelFetch(g_lightClassification, int((((_2270 << 5u) + (_2256 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                    _2674 = _2673 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2674)
                    {
                        frontier_phi_77_pred = _2663;
                        frontier_phi_77_pred_1 = _2662;
                        frontier_phi_77_pred_2 = _2661;
                        frontier_phi_77_pred_3 = _2660;
                        frontier_phi_77_pred_4 = _2659;
                        frontier_phi_77_pred_5 = _2658;
                    }
                    else
                    {
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        float _2883 = _2661;
                        float _2884 = _2662;
                        float _2885 = _2663;
                        uint _2886 = _2673;
                        uint _2887;
                        vec4 _2912;
                        float _2913;
                        vec4 _2928;
                        vec3 _2940;
                        vec4 _2956;
                        vec4 _2972;
                        float _3019;
                        bool _3020;
                        for (;;)
                        {
                            uint _2897 = ((_2664 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2886));
                            _2887 = (_2886 + 4294967295u) & _2886;
                            uint _2899 = _2897 * 40u;
                            _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            _2913 = _2912.w;
                            uint _2915 = (_2897 * 40u) + 4u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            uint _2930 = (_2897 * 40u) + 8u;
                            _2940 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x));
                            uint _2943 = (_2897 * 40u) + 16u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2959 = (_2897 * 40u) + 20u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2975 = (_2897 * 40u) + 24u;
                            vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2994 = (_2897 * 40u) + 28u;
                            vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            _3019 = fma(_2232, _3007.z, fma(_2231, _3007.y, _3007.x * _2230)) + _3007.w;
                            _3020 = !((fma(_2232, _2988.z, fma(_2231, _2988.y, _2988.x * _2230)) + _2988.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3020)
                            {
                                float _3047 = _2912.x - _2230;
                                float _3048 = _2912.y - _2231;
                                float _3049 = _2912.z - _2232;
                                float _3050 = dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049));
                                float _3053 = inversesqrt(_3050);
                                float _3054 = _3053 * _3047;
                                float _3055 = _3053 * _3048;
                                float _3056 = _3053 * _3049;
                                float _3060 = 1.0 - (_3050 / (_2913 * _2913));
                                float _4143 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3061 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3065 = sqrt(_3050) * _2928.w;
                                float _3067 = 1.39999997615814208984375 / (_3065 + 1.39999997615814208984375);
                                float _3068 = _3067 * _3067;
                                float _3071 = ((1.0 - _3068) * dot(vec3(_3054, _3055, _3056), vec3(_432, _435, _438))) + _3068;
                                float _3074 = _3065 * _3065;
                                float _3078 = (fma(_2232, _2956.z, fma(_2231, _2956.y, _2956.x * _2230)) + _2956.w) / _3019;
                                float _3079 = (fma(_2232, _2972.z, fma(_2231, _2972.y, _2972.x * _2230)) + _2972.w) / _3019;
                                float _3083 = 1.0 - dot(vec2(_3078, _3079), vec2(_3078, _3079));
                                float _4159 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3085 = _3084 * (((isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * _3061) / ((_3074 * 0.699999988079071044921875) + 1.0));
                                float _3097 = exp2(log2(1.0 / ((_3074 * 3.5) + 5.0)) * 0.25);
                                float _3098 = 1.0 - _508;
                                float _3105 = sqrt(1.0 - ((1.0 - (_3098 * _3098)) * (1.0 - (_3097 * _3097))));
                                float _3106 = _3105 * _3105;
                                float _3107 = _3106 * _3106;
                                float _3108 = _3054 - _2524;
                                float _3109 = _3055 - _2525;
                                float _3110 = _3056 - _2526;
                                float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                                float _3118 = dot(vec3(_432, _435, _438), vec3((-0.0) - _2524, (-0.0) - _2525, (-0.0) - _2526));
                                float _4170 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3121 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                                float _3122 = dot(vec3(_432, _435, _438), vec3(_3114 * _3108, _3114 * _3109, _3114 * _3110));
                                float _4181 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3125 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3129 = ((_3125 * _3125) * (_3107 + (-1.0))) + 1.0;
                                float _3130 = _3067 * _3106;
                                float _3131 = _3130 * _3130;
                                float _3137 = ((1.0 - _3131) * dot(vec3(_432, _435, _438), vec3(_3054, _3055, _3056))) + _3131;
                                float _4192 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3139 = 1.0 - _3106;
                                float _3149 = (0.5 / (((_3138 * ((_3121 * _3139) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3106) * _3121))) * _3138;
                                float _4203 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3159 = (_3084 * _3061) * (((_3107 * 3.1415927410125732421875) * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) / ((_3129 * _3129) * ((_3074 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3085 * _2928.y;
                                frontier_phi_83_pred_1 = _3085 * _2928.x;
                                frontier_phi_83_pred_2 = _3159 * _2940.z;
                                frontier_phi_83_pred_3 = _3159 * _2940.y;
                                frontier_phi_83_pred_4 = _3159 * _2940.x;
                                frontier_phi_83_pred_5 = _3085 * _2928.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3167 = frontier_phi_83_pred;
                            _3166 = frontier_phi_83_pred_1;
                            _3165 = frontier_phi_83_pred_2;
                            _3164 = frontier_phi_83_pred_3;
                            _3163 = frontier_phi_83_pred_4;
                            _3168 = frontier_phi_83_pred_5;
                            _2870 = _3166 + _2883;
                            _2871 = _3167 + _2884;
                            _2872 = _3168 + _2885;
                            _2867 = _3163 + _2880;
                            _2868 = _3164 + _2881;
                            _2869 = _3165 + _2882;
                            if (_2887 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2887;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2872;
                        frontier_phi_77_pred_1 = _2871;
                        frontier_phi_77_pred_2 = _2870;
                        frontier_phi_77_pred_3 = _2869;
                        frontier_phi_77_pred_4 = _2868;
                        frontier_phi_77_pred_5 = _2867;
                    }
                    _2509 = frontier_phi_77_pred;
                    _2507 = frontier_phi_77_pred_1;
                    _2505 = frontier_phi_77_pred_2;
                    _2503 = frontier_phi_77_pred_3;
                    _2501 = frontier_phi_77_pred_4;
                    _2499 = frontier_phi_77_pred_5;
                    uint _2665 = _2664 + 1u;
                    if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2658 = _2499;
                        _2659 = _2501;
                        _2660 = _2503;
                        _2661 = _2505;
                        _2662 = _2507;
                        _2663 = _2509;
                        _2664 = _2665;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2503;
                frontier_phi_58_59_ladder_1 = _2509;
                frontier_phi_58_59_ladder_2 = _2507;
                frontier_phi_58_59_ladder_3 = _2505;
                frontier_phi_58_59_ladder_4 = _2501;
                frontier_phi_58_59_ladder_5 = _2499;
            }
            else
            {
                frontier_phi_58_59_ladder = _2381;
                frontier_phi_58_59_ladder_1 = _2387;
                frontier_phi_58_59_ladder_2 = _2385;
                frontier_phi_58_59_ladder_3 = _2383;
                frontier_phi_58_59_ladder_4 = _2379;
                frontier_phi_58_59_ladder_5 = _2377;
            }
            _2498 = frontier_phi_58_59_ladder_5;
            _2500 = frontier_phi_58_59_ladder_4;
            _2502 = frontier_phi_58_59_ladder;
            _2504 = frontier_phi_58_59_ladder_3;
            _2506 = frontier_phi_58_59_ladder_2;
            _2508 = frontier_phi_58_59_ladder_1;
        }
        float _2513 = isnan(1.0) ? _492 : (isnan(_492) ? 1.0 : min(_492, 1.0));
        _2289 = (_2513 * _2504) + _1722;
        _2291 = (_2513 * _2506) + _1724;
        _2293 = (_2513 * _2508) + _1726;
        _2295 = ((_2498 * _477) * _2513) + _2070;
        _2297 = ((_2500 * _479) * _2513) + _2072;
        _2299 = ((_2502 * _480) * _2513) + _2074;
    }
    else
    {
        _2289 = _1722;
        _2291 = _1724;
        _2293 = _1726;
        _2295 = _2070;
        _2297 = _2072;
        _2299 = _2074;
    }
    float _4219 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4230 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4241 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _2316 = ((isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2289 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _492))) + ((_2295 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2317 = ((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2291 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _492))) + ((_2297 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    float _2318 = ((isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2293 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _492))) + ((_2299 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1334)) * cbPerFrame._m0[3u].x);
    uint _2319 = _451 + 6u;
    float _2327 = _411 / cbSceneParam._m0[86u].x;
    float _2328 = _412 / cbSceneParam._m0[86u].y;
    vec4 _2342 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, (log2((isnan(cbSceneParam._m0[77u].w) ? _332 : (isnan(_332) ? cbSceneParam._m0[77u].w : min(_332, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2344 = _2342.x;
    float _2345 = _2342.y;
    float _2346 = _2342.z;
    float _2347 = _2342.w;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_332 > cbSceneParam._m0[78u].w)
    {
        float _2402 = isnan(_332) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _332 : min(cbSceneParam._m0[80u].w, _332));
        float _2403 = _2402 / _332;
        float _2414 = _2403 * _383;
        float _2415 = _384 * _2403;
        float _2416 = (-0.0) - _2415;
        float _2418 = _2403 * _385;
        float _2420 = (cbSceneParam._m0[77u].w * _2416) / _2402;
        float _2421 = _2420 + cbSceneParam._m0[79u].w;
        float _2422 = cbSceneParam._m0[79u].w - _2415;
        float _2428 = sqrt(((_2414 * _2414) + (_2415 * _2415)) + (_2418 * _2418));
        float _2431 = (1.0 - (cbSceneParam._m0[77u].w / _2402)) * _2428;
        float _2436 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2438 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2615;
        if (abs((_2416 - _2420) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2615 = ((((_2421 > 0.0) ? exp2(_2436 * _2421) : (2.0 - exp2(_2438 * _2421))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2431;
        }
        else
        {
            float _2559 = 1.0 / cbSceneParam._m0[80u].x;
            float _2560 = isnan(_2422) ? _2421 : (isnan(_2421) ? _2422 : max(_2421, _2422));
            float _2561 = isnan(_2422) ? _2421 : (isnan(_2421) ? _2422 : min(_2421, _2422));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            float _2571 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : min(_2561, 0.0));
            _2615 = ((abs(_2428 / _2416) * cbSceneParam._m0[80u].y) * ((((_2570 - _2571) * 2.0) - ((exp2(_2436 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0)))) - exp2(_2436 * (isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0))))) * _2559)) - ((exp2(_2438 * _2570) - exp2(_2438 * _2571)) * _2559))) + (_2431 * cbSceneParam._m0[80u].z);
        }
        vec4 _2617 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, 1.0), 0.0);
        float _2626 = exp2((_2615 * (-1.44269502162933349609375)) * (1.0 - _2617.w));
        float _2627 = log2(_2626);
        float _2643 = log2(_2347);
        _2440 = (exp2(_2643 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2627 * cbSceneParam._m0[78u].x)) * _2617.x) / cbSceneParam._m0[78u].x)) + _2344;
        _2442 = (exp2(_2643 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2627 * cbSceneParam._m0[78u].y)) * _2617.y) / cbSceneParam._m0[78u].y)) + _2345;
        _2444 = (exp2(_2643 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2627 * cbSceneParam._m0[78u].z)) * _2617.z) / cbSceneParam._m0[78u].z)) + _2346;
        _2446 = _2626 * _2347;
    }
    else
    {
        _2440 = _2344;
        _2442 = _2345;
        _2444 = _2346;
        _2446 = _2347;
    }
    bool _2653;
    vec4 _2456;
    vec4 _2478;
    float _2480;
    float _2484;
    float _2485;
    float _2486;
    float _2487;
    bool _2497;
    for (;;)
    {
        _2456 = cbMatDynParam._m0[0u];
        float _2458 = roundEven(_2456.y);
        bool _2459 = _2458 == 3.0;
        float _2460 = log2(_2446);
        float _2467 = exp2(_2460 * cbSceneParam._m0[78u].x) * _2316;
        float _2468 = exp2(_2460 * cbSceneParam._m0[78u].y) * _2317;
        float _2469 = exp2(_2460 * cbSceneParam._m0[78u].z) * _2318;
        float _2476 = _399 + (-0.5);
        _2478 = cbMtdParam._m0[1u];
        _2480 = _2478.y * _2476;
        float _2483 = (_2458 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2484 = _2483 * (_2459 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2440)));
        _2485 = _2483 * (_2459 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2442)));
        _2486 = _2483 * (_2459 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2444)));
        _2487 = _2476 * 0.999000012874603271484375;
        _2497 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2497)
        {
            if ((cbInstanceData._m0[_451 + 7u].x + _2487) < 0.5)
            {
                _2653 = true;
                break;
            }
        }
        uint _2594 = _453 + uint(_2456.w);
        if ((cbInstanceData._m0[_2594].w < 1.0) && ((cbInstanceData._m0[_2594].w + _2487) < 0.5))
        {
            _2653 = true;
            break;
        }
        if ((_2480 + 1.0) < _2478.x)
        {
            _2653 = true;
            break;
        }
        _2653 = false;
        break;
    }
    float _2858;
    if (_2653)
    {
        discard_state = true;
        _2858 = 0.0;
    }
    else
    {
        _2858 = cbInstanceData._m0[_2319].w;
    }
    SV_Target.x = _2484;
    SV_Target.y = _2485;
    SV_Target.z = _2486;
    SV_Target.w = _2858;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2319].w;
    discard_exit();
}


