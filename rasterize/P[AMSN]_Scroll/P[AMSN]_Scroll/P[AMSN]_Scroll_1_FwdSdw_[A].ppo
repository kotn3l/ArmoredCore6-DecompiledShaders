#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _868;
float _3542;
float _3543;
float _3544;
float _3545;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _250.z;
    float _258 = (_250.x * 2.0) + (-1.0);
    float _260 = (_250.y * 2.0) + (-1.0);
    float _261 = dot(vec2(_258, _260), vec2(_258, _260));
    float _3554 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _267 = sqrt(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))));
    float _270 = fma(_267, _196 * NORMAL.x, fma(_260, _203 * TANGENT.x, (_189 * _182) * _258));
    float _273 = fma(_267, _196 * NORMAL.y, fma(_260, _203 * TANGENT.y, (_189 * _183) * _258));
    float _276 = fma(_267, _196 * NORMAL.z, fma(_260, _203 * TANGENT.z, (_189 * _184) * _258));
    float _280 = inversesqrt(dot(vec3(_270, _273, _276), vec3(_270, _273, _276)));
    float _281 = _280 * _270;
    float _282 = _280 * _273;
    float _283 = _280 * _276;
    float _3565 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _284 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3587 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3598 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3609 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _288 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _304 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _345 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _355 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _345);
    float _356 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _345);
    float _357 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _345);
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _362 = _355 * _361;
    float _363 = _356 * _361;
    float _364 = _357 * _361;
    vec4 _369 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _371 = _369.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _547 = sqrt(((_355 * _355) + (_356 * _356)) + (_357 * _357));
        float _553 = (cbMatDynParam._m0[5u].x * _547) + cbMatDynParam._m0[5u].y;
        float _3620 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        float _554 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _558 = (cbMatDynParam._m0[5u].z * _547) + cbMatDynParam._m0[5u].w;
        float _3631 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) - _554)) + _554) < ((_371 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _383 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _384 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _404 = fma(_283, cbSceneParam._m0[5u].z, fma(_282, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _281));
    float _407 = fma(_283, cbSceneParam._m0[6u].z, fma(_282, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _281));
    float _410 = fma(_283, cbSceneParam._m0[7u].z, fma(_282, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _281));
    uint _423 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = _423 + 9u;
    uint _426 = _425 + uint(cbMatDynParam._m0[0u].w);
    float _432 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) * cbInstanceData._m0[_426].x;
    float _433 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_426].y;
    float _434 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_426].z;
    float _3642 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _3664 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _438 = 1.0 - _288;
    float _439 = _435 * _438;
    float _440 = _436 * _438;
    float _441 = _437 * _438;
    float _446 = (_435 + (-0.039999999105930328369140625)) * _288;
    float _447 = (_436 + (-0.039999999105930328369140625)) * _288;
    float _448 = (_437 + (-0.039999999105930328369140625)) * _288;
    float _449 = _446 + 0.039999999105930328369140625;
    float _451 = _447 + 0.039999999105930328369140625;
    float _452 = _448 + 0.039999999105930328369140625;
    vec4 _461 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _383, cbSceneParam._m0[86u].y * _384));
    float _464 = _461.x * TEXCOORD.z;
    float _465 = dot(vec3(_281, _282, _283), vec3(_362, _363, _364));
    float _468 = _465 * 2.0;
    float _472 = (_468 * _281) - _362;
    float _473 = (_468 * _282) - _363;
    float _474 = (_468 * _283) - _364;
    float _478 = abs(dot(vec3(_362, _363, _364), vec3(_281, _282, _283)));
    float _3675 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _480 = sqrt(_284);
    float _493 = exp2((_480 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_480 * 3.0));
    float _499 = (1.0 - _493) * ((_480 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _500 = _493 * _480;
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _867;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _592 = fma(_536, cbModelParam._m0[26u].z, fma(_532, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528));
        float _596 = fma(_536, cbModelParam._m0[27u].z, fma(_532, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528));
        float _600 = fma(_536, cbModelParam._m0[28u].z, fma(_532, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528));
        float _625 = _528 + _281;
        float _626 = _532 + _282;
        float _627 = _536 + _283;
        float _637 = fma(_627, cbModelParam._m0[26u].z, fma(_626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625)) - _592;
        float _638 = fma(_627, cbModelParam._m0[27u].z, fma(_626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625)) - _596;
        float _639 = fma(_627, cbModelParam._m0[28u].z, fma(_626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625)) - _600;
        float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
        float _656 = ((_643 * _637) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_592 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_643 * _638) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_596 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _658 = ((_643 * _639) / cbModelParam._m0[34u].z) + ((((((_600 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        float _695 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_661.x + (-0.5));
        float _697 = _695 * (_661.y + (-0.5));
        float _698 = _695 * (_661.z + (-0.5));
        float _705 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_668.x + (-0.5));
        float _707 = _705 * (_668.y + (-0.5));
        float _708 = _705 * (_668.z + (-0.5));
        float _715 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_675.x + (-0.5));
        float _717 = _715 * (_675.y + (-0.5));
        float _718 = _715 * (_675.z + (-0.5));
        float _725 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_682.x + (-0.5));
        float _727 = _725 * (_682.y + (-0.5));
        float _728 = _725 * (_682.z + (-0.5));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = _696 * 0.5;
        float _733 = _706 * 0.5;
        float _734 = _716 * 0.5;
        float _735 = dot(vec3(_732, _733, _734), vec3(_732, _733, _734));
        float _740 = (_735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_735);
        float _749 = (dot(vec3(_281, _282, _283), vec3(_740 * _732, _740 * _733, _740 * _734)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _759 = sqrt(((_733 * _733) + (_732 * _732)) + (_734 * _734)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _761 = _760 * 2.0;
        float _765 = (1.0 - _760) / (_760 + 1.0);
        float _3723 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _775 = ((((1.0 - _766) * (_761 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_761 + 1.0))) + _766) * _729;
        float _776 = _697 * 0.5;
        float _777 = _707 * 0.5;
        float _778 = _717 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _792 = (dot(vec3(_281, _282, _283), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _801 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3756 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_803 + 1.0))) + _808) * _730;
        float _818 = _698 * 0.5;
        float _819 = _708 * 0.5;
        float _820 = _718 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(_281, _282, _283), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3789 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_845 + 1.0))) + _850) * _731;
        _867 = _698;
        _869 = _697;
        _870 = _696;
        _871 = _708;
        _872 = _707;
        _873 = _706;
        _874 = _718;
        _875 = _717;
        _876 = _716;
        _877 = _731;
        _878 = _730;
        _879 = _729;
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
    }
    else
    {
        _867 = _868;
        _869 = _868;
        _870 = _868;
        _871 = _868;
        _872 = _868;
        _873 = _868;
        _874 = _868;
        _875 = _868;
        _876 = _868;
        _877 = _868;
        _878 = _868;
        _879 = _868;
        _880 = 0.0;
        _881 = 0.0;
        _882 = 0.0;
    }
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _911 = fma(_536, cbModelParam._m0[30u].z, fma(_532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _528));
        float _915 = fma(_536, cbModelParam._m0[31u].z, fma(_532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _528));
        float _919 = fma(_536, cbModelParam._m0[32u].z, fma(_532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _528));
        float _942 = _528 + _281;
        float _943 = _532 + _282;
        float _944 = _536 + _283;
        float _954 = fma(_944, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942)) - _911;
        float _955 = fma(_944, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942)) - _915;
        float _956 = fma(_944, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942)) - _919;
        float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
        float _973 = ((_960 * _954) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_911 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_960 * _955) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_915 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_960 * _956) / cbModelParam._m0[35u].z) + ((((((_919 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        float _1010 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_977.x + (-0.5));
        float _1012 = _1010 * (_977.y + (-0.5));
        float _1013 = _1010 * (_977.z + (-0.5));
        float _1020 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_984.x + (-0.5));
        float _1022 = _1020 * (_984.y + (-0.5));
        float _1023 = _1020 * (_984.z + (-0.5));
        float _1030 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_991.x + (-0.5));
        float _1032 = _1030 * (_991.y + (-0.5));
        float _1033 = _1030 * (_991.z + (-0.5));
        float _1040 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_998.x + (-0.5));
        float _1042 = _1040 * (_998.y + (-0.5));
        float _1043 = _1040 * (_998.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_281, _282, _283), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3852 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1074 + 1.0))) + _1079) * _1044;
        float _1089 = _1012 * 0.5;
        float _1090 = _1022 * 0.5;
        float _1091 = _1032 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_281, _282, _283), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3885 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1116 + 1.0))) + _1121) * _1045;
        float _1131 = _1013 * 0.5;
        float _1132 = _1023 * 0.5;
        float _1133 = _1033 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_281, _282, _283), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3918 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1158 + 1.0))) + _1163) * _1046;
        _1180 = _1013;
        _1181 = _1012;
        _1182 = _1011;
        _1183 = _1023;
        _1184 = _1022;
        _1185 = _1021;
        _1186 = _1033;
        _1187 = _1032;
        _1188 = _1031;
        _1189 = _1046;
        _1190 = _1045;
        _1191 = _1044;
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
    }
    else
    {
        _1180 = _868;
        _1181 = _868;
        _1182 = _868;
        _1183 = _868;
        _1184 = _868;
        _1185 = _868;
        _1186 = _868;
        _1187 = _868;
        _1188 = _868;
        _1189 = _868;
        _1190 = _868;
        _1191 = _868;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _880)) + _880;
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _881)) + _881;
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _882)) + _882;
    float _1227 = fma(_1206, cbSceneParam._m0[89u].z, fma(_1205, cbSceneParam._m0[89u].y, _1204 * cbSceneParam._m0[89u].x));
    float _1230 = fma(_1206, cbSceneParam._m0[90u].z, fma(_1205, cbSceneParam._m0[90u].y, _1204 * cbSceneParam._m0[90u].x));
    float _1233 = fma(_1206, cbSceneParam._m0[91u].z, fma(_1205, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1204));
    float _1248 = _472 * 0.5;
    float _1249 = _473 * 0.5;
    float _1250 = _474 * 0.5;
    float _1251 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1254 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1257 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1291;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1264 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_867, _871, _874, _877));
        float _1268 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_869, _872, _875, _878));
        float _1272 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_870, _873, _876, _879));
        float _1279 = dot(vec4(cbModelParam._m0[39u]), vec4(_1248, _1249, _1250, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1302;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1293 = dot(vec4(cbModelParam._m0[40u]), vec4(_1248, _1249, _1250, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1293) ? 0.0 : (isnan(0.0) ? _1293 : max(0.0, _1293))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1306 = (_1302 * cbModelParam._m0[1u].x) + (_1291 * (1.0 - cbModelParam._m0[1u].x));
    float _1316 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _284);
    float _1317 = isnan(_1316) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1316 : min(cbModelParam._m0[25u].z, _1316));
    float _1399;
    float _1401;
    float _1403;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1366 = fma(_536, cbModelParam._m0[13u].z, fma(_532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _528)) + cbModelParam._m0[13u].w;
        float _1370 = fma(_536, cbModelParam._m0[14u].z, fma(_532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _528)) + cbModelParam._m0[14u].w;
        float _1374 = fma(_536, cbModelParam._m0[15u].z, fma(_532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _528)) + cbModelParam._m0[15u].w;
        float _1377 = fma(_474, cbModelParam._m0[13u].z, fma(_473, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _472));
        float _1380 = fma(_474, cbModelParam._m0[14u].z, fma(_473, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _472));
        float _1383 = fma(_474, cbModelParam._m0[15u].z, fma(_473, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _472));
        float _1411;
        if (_1377 > 0.0)
        {
            _1411 = abs((1.0 - _1366) / _1377);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1366 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1411 = frontier_phi_17_15_ladder;
        }
        float _1587;
        if (_1380 > 0.0)
        {
            _1587 = abs((1.0 - _1370) / _1380);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1370 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1587 = frontier_phi_26_22_ladder;
        }
        float _1883;
        if (_1383 > 0.0)
        {
            _1883 = abs((1.0 - _1374) / _1383);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1374 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1883 = frontier_phi_38_33_ladder;
        }
        float _1885 = isnan(_1587) ? _1411 : (isnan(_1411) ? _1587 : min(_1411, _1587));
        float _1886 = isnan(_1883) ? _1885 : (isnan(_1885) ? _1883 : min(_1885, _1883));
        float _1890 = (_1886 * _1377) + _1366;
        float _1891 = (_1886 * _1380) + _1370;
        float _1892 = (_1886 * _1383) + _1374;
        float _1893 = _1886 * 9.9999997473787516355514526367188e-05;
        float _1895 = (-1.0) - _1893;
        float _1897 = _1893 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1892 > _1897) || ((_1892 < _1895) || ((_1891 > _1897) || ((_1891 < _1895) || ((_1890 < _1895) || (_1890 > _1897))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2037 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1892, cbModelParam._m0[9u].z, fma(_1891, cbModelParam._m0[9u].y, _1890 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1892, cbModelParam._m0[10u].z, fma(_1891, cbModelParam._m0[10u].y, _1890 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1892, cbModelParam._m0[11u].z, fma(_1891, cbModelParam._m0[11u].y, _1890 * cbModelParam._m0[11u].x))), _1317);
            frontier_phi_16_38_ladder = _2037.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2037.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2037.x * cbModelParam._m0[1u].y;
        }
        _1399 = frontier_phi_16_38_ladder_2;
        _1401 = frontier_phi_16_38_ladder_1;
        _1403 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1387 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_472, _473, _474), _1317);
        _1399 = _1387.x * cbModelParam._m0[1u].y;
        _1401 = _1387.y * cbModelParam._m0[1u].y;
        _1403 = _1387.z * cbModelParam._m0[1u].y;
    }
    float _1407 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _284);
    float _1408 = isnan(_1407) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1407 : min(cbModelParam._m0[25u].w, _1407));
    float _1501;
    float _1503;
    float _1505;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1465 = fma(_536, cbModelParam._m0[21u].z, fma(_532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _528)) + cbModelParam._m0[21u].w;
        float _1469 = fma(_536, cbModelParam._m0[22u].z, fma(_532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _528)) + cbModelParam._m0[22u].w;
        float _1473 = fma(_536, cbModelParam._m0[23u].z, fma(_532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _528)) + cbModelParam._m0[23u].w;
        float _1476 = fma(_474, cbModelParam._m0[21u].z, fma(_473, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _472));
        float _1479 = fma(_474, cbModelParam._m0[22u].z, fma(_473, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _472));
        float _1482 = fma(_474, cbModelParam._m0[23u].z, fma(_473, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _472));
        float _1592;
        if (_1476 > 0.0)
        {
            _1592 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1592 = frontier_phi_28_24_ladder;
        }
        float _1910;
        if (_1479 > 0.0)
        {
            _1910 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1910 = frontier_phi_40_35_ladder;
        }
        float _2248;
        if (_1482 > 0.0)
        {
            _2248 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2248 = frontier_phi_50_47_ladder;
        }
        float _2250 = isnan(_1910) ? _1592 : (isnan(_1592) ? _1910 : min(_1592, _1910));
        float _2251 = isnan(_2248) ? _2250 : (isnan(_2250) ? _2248 : min(_2250, _2248));
        float _2255 = (_2251 * _1476) + _1465;
        float _2256 = (_2251 * _1479) + _1469;
        float _2257 = (_2251 * _1482) + _1473;
        float _2258 = _2251 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2258;
        float _2261 = _2258 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2257 > _2261) || ((_2257 < _2259) || ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 < _2259) || (_2255 > _2261))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2379 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2257, cbModelParam._m0[17u].z, fma(_2256, cbModelParam._m0[17u].y, _2255 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2257, cbModelParam._m0[18u].z, fma(_2256, cbModelParam._m0[18u].y, _2255 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2257, cbModelParam._m0[19u].z, fma(_2256, cbModelParam._m0[19u].y, _2255 * cbModelParam._m0[19u].x))), _1408);
            frontier_phi_25_50_ladder = _2379.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2379.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2379.x * cbModelParam._m0[1u].z;
        }
        _1501 = frontier_phi_25_50_ladder_2;
        _1503 = frontier_phi_25_50_ladder_1;
        _1505 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_472, _473, _474), _1408);
        _1501 = _1485.x * cbModelParam._m0[1u].z;
        _1503 = _1485.y * cbModelParam._m0[1u].z;
        _1505 = _1485.z * cbModelParam._m0[1u].z;
    }
    float _1518 = (((_499 * _449) + _500) * _464) * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1520 = (((_499 * _451) + _500) * _464) * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1522 = (((_499 * _452) + _500) * _464) * ((cbModelParam._m0[1u].w * (_1505 - _1403)) + _1403);
    float _1525 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1520, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1528 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1520, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1531 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1520, cbSceneParam._m0[91u].y, _1518 * cbSceneParam._m0[91u].x));
    float _1566 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1570 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1574 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1578 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1579 = _1566 / _1578;
    float _1580 = _1570 / _1578;
    float _1581 = _1574 / _1578;
    float _1728;
    float _1729;
    float _1730;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1608 = ((uint(_1581 > cbSceneParam._m0[59u].y) + uint(_1581 > cbSceneParam._m0[59u].x)) + uint(_1581 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1609 = _1608 + 43u;
        uint _1617 = _1608 + 44u;
        uint _1625 = _1608 + 45u;
        uint _1633 = _1608 + 46u;
        float _1644 = fma(_1578, cbSceneParam._m0[_1609].w, fma(_1574, cbSceneParam._m0[_1609].z, fma(_1570, cbSceneParam._m0[_1609].y, _1566 * cbSceneParam._m0[_1609].x)));
        float _1648 = fma(_1578, cbSceneParam._m0[_1617].w, fma(_1574, cbSceneParam._m0[_1617].z, fma(_1570, cbSceneParam._m0[_1617].y, _1566 * cbSceneParam._m0[_1617].x)));
        float _1656 = fma(_1578, cbSceneParam._m0[_1633].w, fma(_1574, cbSceneParam._m0[_1633].z, fma(_1570, cbSceneParam._m0[_1633].y, _1566 * cbSceneParam._m0[_1633].x)));
        float _1661 = cbSceneParam._m0[33u].z * _1656;
        float _1663 = cbSceneParam._m0[33u].w * _1656;
        float _1666 = fma(_1578, cbSceneParam._m0[_1625].w, fma(_1574, cbSceneParam._m0[_1625].z, fma(_1570, cbSceneParam._m0[_1625].y, _1566 * cbSceneParam._m0[_1625].x))) / _1656;
        float _1714 = (cbSceneParam._m0[33u].x - sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581))) * cbSceneParam._m0[33u].y;
        float _4044 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1721 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1661 + _1644) / _1656, (_1663 + _1648) / _1656), _1666), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1663 + _1644) / _1656, (_1648 - _1661) / _1656), _1666), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1644 - _1661) / _1656, (_1648 - _1663) / _1656), _1666), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1644 - _1663) / _1656, (_1661 + _1648) / _1656), _1666), 0.0)).x), vec4(0.25)));
        _1728 = 1.0 - (_1721 * cbSceneParam._m0[34u].x);
        _1729 = 1.0 - (_1721 * cbSceneParam._m0[34u].y);
        _1730 = 1.0 - (_1721 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1728 = 1.0;
        _1729 = 1.0;
        _1730 = 1.0;
    }
    float _1794;
    float _1796;
    float _1798;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1782 = fma(_1578, cbSceneParam._m0[63u].w, fma(_1574, cbSceneParam._m0[63u].z, fma(_1570, cbSceneParam._m0[63u].y, _1566 * cbSceneParam._m0[63u].x)));
        float _1783 = fma(_1578, cbSceneParam._m0[60u].w, fma(_1574, cbSceneParam._m0[60u].z, fma(_1570, cbSceneParam._m0[60u].y, _1566 * cbSceneParam._m0[60u].x))) / _1782;
        float _1784 = fma(_1578, cbSceneParam._m0[61u].w, fma(_1574, cbSceneParam._m0[61u].z, fma(_1570, cbSceneParam._m0[61u].y, _1566 * cbSceneParam._m0[61u].x))) / _1782;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1783 >= cbSceneParam._m0[64u].x) && (_1784 >= cbSceneParam._m0[64u].y)) && (_1783 <= cbSceneParam._m0[64u].z)) && (_1784 <= cbSceneParam._m0[64u].w))
        {
            float _1923 = fma(_1578, cbSceneParam._m0[62u].w, fma(_1574, cbSceneParam._m0[62u].z, fma(_1570, cbSceneParam._m0[62u].y, _1566 * cbSceneParam._m0[62u].x))) / _1782;
            float _1927 = isnan(cbSceneParam._m0[41u].w) ? _1923 : (isnan(_1923) ? cbSceneParam._m0[41u].w : max(_1923, cbSceneParam._m0[41u].w));
            float _1970 = (cbSceneParam._m0[33u].x - sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581))) * cbSceneParam._m0[33u].y;
            float _4060 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
            float _1977 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1783, cbSceneParam._m0[33u].w + _1784), _1927), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1783, _1784 - cbSceneParam._m0[33u].z), _1927), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1783 - cbSceneParam._m0[33u].z, _1784 - cbSceneParam._m0[33u].w), _1927), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1783 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1784), _1927), 0.0)).x), vec4(0.25)));
            float _1981 = 1.0 - (_1977 * cbSceneParam._m0[34u].x);
            float _1982 = 1.0 - (_1977 * cbSceneParam._m0[34u].y);
            float _1983 = 1.0 - (_1977 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1983) ? _1730 : (isnan(_1730) ? _1983 : min(_1730, _1983));
            frontier_phi_37_36_ladder_1 = isnan(_1982) ? _1729 : (isnan(_1729) ? _1982 : min(_1729, _1982));
            frontier_phi_37_36_ladder_2 = isnan(_1981) ? _1728 : (isnan(_1728) ? _1981 : min(_1728, _1981));
        }
        else
        {
            frontier_phi_37_36_ladder = _1730;
            frontier_phi_37_36_ladder_1 = _1729;
            frontier_phi_37_36_ladder_2 = _1728;
        }
        _1794 = frontier_phi_37_36_ladder_2;
        _1796 = frontier_phi_37_36_ladder_1;
        _1798 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1794 = _1728;
        _1796 = _1729;
        _1798 = _1730;
    }
    uvec4 _1803 = floatBitsToUint(cbInstanceData._m0[_423 + 5u]);
    uint _1805 = _1803.x * 14u;
    uint _1806 = _1805 + 13u;
    float _1813 = _464 + (-1.0);
    float _1818 = (cbLight._m0[_1806].x * _1813) + 1.0;
    float _1819 = (cbLight._m0[_1806].y * _1813) + 1.0;
    float _1820 = (cbLight._m0[_1806].z * _1813) + 1.0;
    float _1821 = (cbLight._m0[_1806].w * _1813) + 1.0;
    uint _1822 = _1805 + 5u;
    float _1828 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1832 = _1805 + 4u;
    float _1842 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
    uint _1846 = _1805 | 1u;
    float _1857 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_281, _282, _283));
    float _1860 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_281, _282, _283));
    float _4096 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _4107 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1865 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.3183098733425140380859375;
    float _1867 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * 0.3183098733425140380859375;
    float _1874 = ((cbLight._m0[_1822].x * _1828) * _1867) + (((cbLight._m0[_1832].x * _1794) * _1842) * _1865);
    float _1875 = ((_1828 * cbLight._m0[_1822].y) * _1867) + (((cbLight._m0[_1832].y * _1796) * _1842) * _1865);
    float _1876 = ((_1828 * cbLight._m0[_1822].z) * _1867) + (((cbLight._m0[_1832].z * _1798) * _1842) * _1865);
    uvec4 _1880 = floatBitsToUint(cbLight._m0[_1805 + 12u]);
    bool _1882 = _1880.x == 0u;
    float _1984;
    float _1986;
    float _1988;
    if (_1882)
    {
        _1984 = _1874;
        _1986 = _1875;
        _1988 = _1876;
    }
    else
    {
        uint _1992 = _1805 + 6u;
        float _2008 = (dot(vec3(cbLight._m0[_1805 + 2u].xyz), vec3(_281, _282, _283)) * 0.5) + 0.5;
        float _2009 = _2008 * _2008;
        float _4118 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2010 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2011 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
        _1984 = (((cbLight._m0[_1992].x * 0.3183098733425140380859375) * _2010) * _2011) + _1874;
        _1986 = (((cbLight._m0[_1992].y * 0.3183098733425140380859375) * _2010) * _2011) + _1875;
        _1988 = (((cbLight._m0[_1992].z * 0.3183098733425140380859375) * _2010) * _2011) + _1876;
    }
    bool _1991 = _1880.y == 0u;
    float _2046;
    float _2048;
    float _2050;
    if (_1991)
    {
        _2046 = _1984;
        _2048 = _1986;
        _2050 = _1988;
    }
    else
    {
        uint _2219 = _1805 + 7u;
        float _2235 = (dot(vec3(cbLight._m0[_1805 + 3u].xyz), vec3(_281, _282, _283)) * 0.5) + 0.5;
        float _2236 = _2235 * _2235;
        float _4134 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2237 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2238 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _2046 = (((cbLight._m0[_2219].x * 0.3183098733425140380859375) * _2237) * _2238) + _1984;
        _2048 = (((cbLight._m0[_2219].y * 0.3183098733425140380859375) * _2237) * _2238) + _1986;
        _2050 = (((cbLight._m0[_2219].z * 0.3183098733425140380859375) * _2237) * _2238) + _1988;
    }
    uint _2053 = _1805 + 8u;
    float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1805].w)) * _284) * 0.949999988079071044921875);
    float _2067 = _2066 * _2066;
    float _2068 = cbLight._m0[_1805].x + _362;
    float _2069 = cbLight._m0[_1805].y + _363;
    float _2070 = cbLight._m0[_1805].z + _364;
    float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
    float _2075 = _2074 * _2068;
    float _2076 = _2074 * _2069;
    float _2077 = _2074 * _2070;
    float _2078 = dot(vec3(_281, _282, _283), vec3(cbLight._m0[_1805].xyz));
    float _4150 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _2082 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2083 = dot(vec3(_281, _282, _283), vec3(_2075, _2076, _2077));
    float _4172 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2087 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_2075, _2076, _2077));
    float _4183 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2091 = _2067 * _2067;
    float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
    float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * 5.0);
    float _2104 = 0.959999978542327880859375 - _446;
    float _2106 = 0.959999978542327880859375 - _447;
    float _2107 = 0.959999978542327880859375 - _448;
    float _2114 = 1.0 - _2067;
    float _2125 = (0.5 / (((_2082 * ((_2081 * _2114) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2114) + _2067) * _2081))) * _2081;
    float _4194 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2127 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
    uint _2141 = _1805 + 9u;
    float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _284) * 0.949999988079071044921875);
    float _2153 = _2152 * _2152;
    float _2154 = cbLight._m0[_1846].x + _362;
    float _2155 = cbLight._m0[_1846].y + _363;
    float _2156 = cbLight._m0[_1846].z + _364;
    float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
    float _2161 = _2160 * _2154;
    float _2162 = _2160 * _2155;
    float _2163 = _2160 * _2156;
    float _2164 = dot(vec3(_281, _282, _283), vec3(cbLight._m0[_1846].xyz));
    float _4205 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2168 = dot(vec3(_281, _282, _283), vec3(_2161, _2162, _2163));
    float _4216 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _2172 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2161, _2162, _2163));
    float _4227 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2176 = _2153 * _2153;
    float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
    float _2187 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
    float _2194 = 1.0 - _2153;
    float _2204 = (0.5 / (((_2082 * ((_2167 * _2194) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2194) + _2153) * _2167))) * _2167;
    float _4238 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2206 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
    float _2216 = (((((_2187 * _2104) + _449) * cbLight._m0[_2141].x) * _2206) * _1828) + ((((cbLight._m0[_2053].x * _1794) * ((_2103 * _2104) + _449)) * _2127) * _1842);
    float _2217 = (((((_2187 * _2106) + _451) * cbLight._m0[_2141].y) * _2206) * _1828) + ((((cbLight._m0[_2053].y * _1796) * ((_2103 * _2106) + _451)) * _2127) * _1842);
    float _2218 = (((((_2187 * _2107) + _452) * cbLight._m0[_2141].z) * _2206) * _1828) + ((((cbLight._m0[_2053].z * _1798) * ((_2103 * _2107) + _452)) * _2127) * _1842);
    float _2274;
    float _2276;
    float _2278;
    if (_1882)
    {
        _2274 = _2216;
        _2276 = _2217;
        _2278 = _2218;
    }
    else
    {
        uint _2280 = _1805 + 2u;
        uint _2284 = _1805 + 10u;
        float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2280].w)) * _284) * 0.949999988079071044921875);
        float _2299 = _2298 * _2298;
        float _2300 = cbLight._m0[_2280].x + _362;
        float _2301 = cbLight._m0[_2280].y + _363;
        float _2302 = cbLight._m0[_2280].z + _364;
        float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
        float _2307 = _2306 * _2300;
        float _2308 = _2306 * _2301;
        float _2309 = _2306 * _2302;
        float _2310 = dot(vec3(_281, _282, _283), vec3(cbLight._m0[_2280].xyz));
        float _4249 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2313 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2314 = dot(vec3(_281, _282, _283), vec3(_2307, _2308, _2309));
        float _4260 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2318 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_2307, _2308, _2309));
        float _4271 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2322 = _2299 * _2299;
        float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
        float _2333 = exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0);
        float _2340 = 1.0 - _2299;
        float _2350 = (0.5 / (((_2082 * ((_2313 * _2340) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2340) + _2299) * _2313))) * _2313;
        float _4282 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2352 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
        float _2353 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
        _2274 = (((((_2333 * _2104) + _449) * cbLight._m0[_2284].x) * _2352) * _2353) + _2216;
        _2276 = (((((_2333 * _2106) + _451) * cbLight._m0[_2284].y) * _2352) * _2353) + _2217;
        _2278 = (((((_2333 * _2107) + _452) * cbLight._m0[_2284].z) * _2352) * _2353) + _2218;
    }
    float _2384;
    float _2386;
    float _2388;
    if (_1991)
    {
        _2384 = _2274;
        _2386 = _2276;
        _2388 = _2278;
    }
    else
    {
        uint _2395 = _1805 + 3u;
        uint _2399 = _1805 + 11u;
        float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _284) * 0.949999988079071044921875);
        float _2414 = _2413 * _2413;
        float _2415 = cbLight._m0[_2395].x + _362;
        float _2416 = cbLight._m0[_2395].y + _363;
        float _2417 = cbLight._m0[_2395].z + _364;
        float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
        float _2422 = _2421 * _2415;
        float _2423 = _2421 * _2416;
        float _2424 = _2421 * _2417;
        float _2425 = dot(vec3(_281, _282, _283), vec3(cbLight._m0[_2395].xyz));
        float _4298 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2429 = dot(vec3(_281, _282, _283), vec3(_2422, _2423, _2424));
        float _4309 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2433 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2422, _2423, _2424));
        float _4320 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2437 = _2414 * _2414;
        float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
        float _2448 = exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0);
        float _2455 = 1.0 - _2414;
        float _2465 = (0.5 / (((_2082 * ((_2428 * _2455) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2455) + _2414) * _2428))) * _2428;
        float _4331 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2467 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
        float _2468 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _2384 = (((((_2448 * _2104) + _449) * cbLight._m0[_2399].x) * _2467) * _2468) + _2274;
        _2386 = (((((_2448 * _2106) + _451) * cbLight._m0[_2399].y) * _2467) * _2468) + _2276;
        _2388 = (((((_2448 * _2107) + _452) * cbLight._m0[_2399].z) * _2467) * _2468) + _2278;
    }
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    if (_1803.y == 0u)
    {
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.x;
        uint _2501 = uint((float(_2489.y) * floor(float(uint(cbSceneParam._m0[85u].y * _384) / _2490))) + floor(float(uint(cbSceneParam._m0[85u].x * _383) / _2490)));
        float _2511 = (log2(_1581 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2512 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        uint _2515 = uint(isnan(14.0) ? _2512 : (isnan(_2512) ? 14.0 : min(_2512, 14.0)));
        uvec4 _2520 = texelFetch(g_lightClusterGridBuffer, int(((_2515 << 2u) + (_2501 << 6u)) >> 2u));
        uint _2521 = _2520.x;
        uint _2522 = _2489.z;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        if (((((1u << ((_2522 >> 4u) & 15u)) + 4294967295u) & _2521) == 0u) || ((_2522 & 240u) == 0u))
        {
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
        }
        else
        {
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2610;
            float _2612;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            uint _2760 = 0u;
            uint _2769;
            bool _2770;
            for (;;)
            {
                _2769 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2760 << 2u)) >> 2u)).x;
                _2770 = _2769 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2770)
                {
                    frontier_phi_71_pred = _2759;
                    frontier_phi_71_pred_1 = _2758;
                    frontier_phi_71_pred_2 = _2757;
                    frontier_phi_71_pred_3 = _2756;
                    frontier_phi_71_pred_4 = _2755;
                    frontier_phi_71_pred_5 = _2754;
                }
                else
                {
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    uint _2905;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2769;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    for (;;)
                    {
                        uint _2909 = uint(findLSB(_2905)) + (_2760 << 5u);
                        uint _2906 = (_2905 + 4294967295u) & _2905;
                        uint _2911 = _2909 * 48u;
                        vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2931 = (_2909 * 48u) + 4u;
                        vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2931)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 3u)).x));
                        uint _2950 = (_2909 * 48u) + 8u;
                        vec3 _2961 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x));
                        float _2965 = _2925.x - _1579;
                        float _2966 = _2925.y - _1580;
                        float _2967 = _2925.z - _1581;
                        float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                        float _2971 = inversesqrt(_2968);
                        float _2972 = _2971 * _2965;
                        float _2973 = _2971 * _2966;
                        float _2974 = _2971 * _2967;
                        float _2975 = dot(vec3(_404, _407, _410), vec3(_2972, _2973, _2974));
                        float _2980 = 1.0 - (_2968 * _2925.w);
                        float _4357 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2981 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _2982 = sqrt(_2968) * _2944.w;
                        float _2985 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2975) + _2986;
                        float _2992 = _2982 * _2982;
                        float _2996 = ((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2981) / ((_2992 * 0.699999988079071044921875) + 1.0);
                        float _3000 = (-0.0) - _1579;
                        float _3001 = (-0.0) - _1580;
                        float _3002 = (-0.0) - _1581;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3016 = exp2(log2(1.0 / ((_2992 * 3.5) + 5.0)) * 0.25);
                        float _3017 = 1.0 - _480;
                        float _3024 = sqrt(1.0 - ((1.0 - (_3017 * _3017)) * (1.0 - (_3016 * _3016))));
                        float _3025 = _3024 * _3024;
                        float _3026 = _3025 * _3025;
                        float _3027 = _3007 + _2972;
                        float _3028 = _3008 + _2973;
                        float _3029 = _3009 + _2974;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3037 = dot(vec3(_404, _407, _410), vec3(_3007, _3008, _3009));
                        float _4373 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3040 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3041 = dot(vec3(_404, _407, _410), vec3(_3033 * _3027, _3033 * _3028, _3033 * _3029));
                        float _4384 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3044 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3048 = ((_3044 * _3044) * (_3026 + (-1.0))) + 1.0;
                        float _3049 = _2985 * _3025;
                        float _3050 = _3049 * _3049;
                        float _3053 = ((1.0 - _3050) * _2975) + _3050;
                        float _4395 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3055 = 1.0 - _3025;
                        float _3065 = (0.5 / (((_3054 * ((_3040 * _3055) + _3025)) + 9.9999999392252902907785028219223e-09) + (((_3054 * _3055) + _3025) * _3040))) * _3054;
                        float _4406 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3076 = (((_3026 * 3.1415927410125732421875) * (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) / ((_3048 * _3048) * ((_2992 * 2.1991131305694580078125) + 3.141590118408203125))) * _2981;
                        _2829 = (_2996 * _2944.x) + _2902;
                        _2830 = (_2996 * _2944.y) + _2903;
                        _2831 = (_2996 * _2944.z) + _2904;
                        _2826 = (_3076 * _2961.x) + _2899;
                        _2827 = (_3076 * _2961.y) + _2900;
                        _2828 = (_3076 * _2961.z) + _2901;
                        if (_2906 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2899 = _2826;
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2906;
                        }
                    }
                    frontier_phi_71_pred = _2831;
                    frontier_phi_71_pred_1 = _2830;
                    frontier_phi_71_pred_2 = _2829;
                    frontier_phi_71_pred_3 = _2828;
                    frontier_phi_71_pred_4 = _2827;
                    frontier_phi_71_pred_5 = _2826;
                }
                _2612 = frontier_phi_71_pred;
                _2610 = frontier_phi_71_pred_1;
                _2608 = frontier_phi_71_pred_2;
                _2606 = frontier_phi_71_pred_3;
                _2604 = frontier_phi_71_pred_4;
                _2602 = frontier_phi_71_pred_5;
                uint _2761 = _2760 + 1u;
                if (_2761 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2754 = _2602;
                    _2755 = _2604;
                    _2756 = _2606;
                    _2757 = _2608;
                    _2758 = _2610;
                    _2759 = _2612;
                    _2760 = _2761;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
        }
        uvec4 _2615 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2616 = _2615.z;
        uint _2618 = (_2616 >> 8u) & 15u;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((4294967295u << _2618) & _2521) == 0u)
        {
            _2722 = _2601;
            _2724 = _2603;
            _2726 = _2605;
            _2728 = _2607;
            _2730 = _2609;
            _2732 = _2611;
        }
        else
        {
            float _2747 = inversesqrt(dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581)));
            float _2748 = _2747 * _1579;
            float _2749 = _2747 * _1580;
            float _2750 = _2747 * _1581;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2618 < ((_2616 >> 12u) & 15u))
            {
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2882 = _2601;
                float _2883 = _2603;
                float _2884 = _2605;
                float _2885 = _2607;
                float _2886 = _2609;
                float _2887 = _2611;
                uint _2888 = _2618;
                uint _2897;
                bool _2898;
                for (;;)
                {
                    _2897 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2888 << 2u)) >> 2u)).x;
                    _2898 = _2897 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2898)
                    {
                        frontier_phi_82_pred = _2887;
                        frontier_phi_82_pred_1 = _2886;
                        frontier_phi_82_pred_2 = _2885;
                        frontier_phi_82_pred_3 = _2884;
                        frontier_phi_82_pred_4 = _2883;
                        frontier_phi_82_pred_5 = _2882;
                    }
                    else
                    {
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3103 = _2882;
                        float _3104 = _2883;
                        float _3105 = _2884;
                        float _3106 = _2885;
                        float _3107 = _2886;
                        float _3108 = _2887;
                        uint _3109 = _2897;
                        uint _3110;
                        vec4 _3135;
                        float _3136;
                        vec4 _3151;
                        vec3 _3163;
                        vec4 _3179;
                        vec4 _3195;
                        float _3242;
                        bool _3243;
                        for (;;)
                        {
                            uint _3120 = ((_2888 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3109));
                            _3110 = (_3109 + 4294967295u) & _3109;
                            uint _3122 = _3120 * 40u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3136 = _3135.w;
                            uint _3138 = (_3120 * 40u) + 4u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3120 * 40u) + 8u;
                            _3163 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x));
                            uint _3166 = (_3120 * 40u) + 16u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3182 = (_3120 * 40u) + 20u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3198 = (_3120 * 40u) + 24u;
                            vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3217 = (_3120 * 40u) + 28u;
                            vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            _3242 = fma(_1581, _3230.z, fma(_1580, _3230.y, _3230.x * _1579)) + _3230.w;
                            _3243 = !((fma(_1581, _3211.z, fma(_1580, _3211.y, _3211.x * _1579)) + _3211.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3243)
                            {
                                float _3270 = _3135.x - _1579;
                                float _3271 = _3135.y - _1580;
                                float _3272 = _3135.z - _1581;
                                float _3273 = dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272));
                                float _3276 = inversesqrt(_3273);
                                float _3277 = _3276 * _3270;
                                float _3278 = _3276 * _3271;
                                float _3279 = _3276 * _3272;
                                float _3283 = 1.0 - (_3273 / (_3136 * _3136));
                                float _4417 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3284 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3288 = sqrt(_3273) * _3151.w;
                                float _3290 = 1.39999997615814208984375 / (_3288 + 1.39999997615814208984375);
                                float _3291 = _3290 * _3290;
                                float _3294 = ((1.0 - _3291) * dot(vec3(_3277, _3278, _3279), vec3(_404, _407, _410))) + _3291;
                                float _3297 = _3288 * _3288;
                                float _3301 = (fma(_1581, _3179.z, fma(_1580, _3179.y, _3179.x * _1579)) + _3179.w) / _3242;
                                float _3302 = (fma(_1581, _3195.z, fma(_1580, _3195.y, _3195.x * _1579)) + _3195.w) / _3242;
                                float _3306 = 1.0 - dot(vec2(_3301, _3302), vec2(_3301, _3302));
                                float _4433 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3308 = _3307 * (((isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0))) * _3284) / ((_3297 * 0.699999988079071044921875) + 1.0));
                                float _3320 = exp2(log2(1.0 / ((_3297 * 3.5) + 5.0)) * 0.25);
                                float _3321 = 1.0 - _480;
                                float _3328 = sqrt(1.0 - ((1.0 - (_3321 * _3321)) * (1.0 - (_3320 * _3320))));
                                float _3329 = _3328 * _3328;
                                float _3330 = _3329 * _3329;
                                float _3331 = _3277 - _2748;
                                float _3332 = _3278 - _2749;
                                float _3333 = _3279 - _2750;
                                float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                                float _3341 = dot(vec3(_404, _407, _410), vec3((-0.0) - _2748, (-0.0) - _2749, (-0.0) - _2750));
                                float _4444 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3344 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3345 = dot(vec3(_404, _407, _410), vec3(_3337 * _3331, _3337 * _3332, _3337 * _3333));
                                float _4455 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3352 = ((_3348 * _3348) * (_3330 + (-1.0))) + 1.0;
                                float _3353 = _3290 * _3329;
                                float _3354 = _3353 * _3353;
                                float _3360 = ((1.0 - _3354) * dot(vec3(_404, _407, _410), vec3(_3277, _3278, _3279))) + _3354;
                                float _4466 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3362 = 1.0 - _3329;
                                float _3372 = (0.5 / (((_3361 * ((_3344 * _3362) + _3329)) + 9.9999999392252902907785028219223e-09) + (((_3361 * _3362) + _3329) * _3344))) * _3361;
                                float _4477 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3382 = (_3307 * _3284) * (((_3330 * 3.1415927410125732421875) * (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) / ((_3352 * _3352) * ((_3297 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3308 * _3151.z;
                                frontier_phi_88_pred_1 = _3308 * _3151.y;
                                frontier_phi_88_pred_2 = _3308 * _3151.x;
                                frontier_phi_88_pred_3 = _3382 * _3163.z;
                                frontier_phi_88_pred_4 = _3382 * _3163.y;
                                frontier_phi_88_pred_5 = _3382 * _3163.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3391 = frontier_phi_88_pred;
                            _3390 = frontier_phi_88_pred_1;
                            _3389 = frontier_phi_88_pred_2;
                            _3388 = frontier_phi_88_pred_3;
                            _3387 = frontier_phi_88_pred_4;
                            _3386 = frontier_phi_88_pred_5;
                            _3093 = _3389 + _3106;
                            _3094 = _3390 + _3107;
                            _3095 = _3391 + _3108;
                            _3090 = _3386 + _3103;
                            _3091 = _3387 + _3104;
                            _3092 = _3388 + _3105;
                            if (_3110 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3110;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3095;
                        frontier_phi_82_pred_1 = _3094;
                        frontier_phi_82_pred_2 = _3093;
                        frontier_phi_82_pred_3 = _3092;
                        frontier_phi_82_pred_4 = _3091;
                        frontier_phi_82_pred_5 = _3090;
                    }
                    _2733 = frontier_phi_82_pred;
                    _2731 = frontier_phi_82_pred_1;
                    _2729 = frontier_phi_82_pred_2;
                    _2727 = frontier_phi_82_pred_3;
                    _2725 = frontier_phi_82_pred_4;
                    _2723 = frontier_phi_82_pred_5;
                    uint _2889 = _2888 + 1u;
                    if (_2889 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2882 = _2723;
                        _2883 = _2725;
                        _2884 = _2727;
                        _2885 = _2729;
                        _2886 = _2731;
                        _2887 = _2733;
                        _2888 = _2889;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2729;
                frontier_phi_63_64_ladder_1 = _2733;
                frontier_phi_63_64_ladder_2 = _2731;
                frontier_phi_63_64_ladder_3 = _2727;
                frontier_phi_63_64_ladder_4 = _2725;
                frontier_phi_63_64_ladder_5 = _2723;
            }
            else
            {
                frontier_phi_63_64_ladder = _2607;
                frontier_phi_63_64_ladder_1 = _2611;
                frontier_phi_63_64_ladder_2 = _2609;
                frontier_phi_63_64_ladder_3 = _2605;
                frontier_phi_63_64_ladder_4 = _2603;
                frontier_phi_63_64_ladder_5 = _2601;
            }
            _2722 = frontier_phi_63_64_ladder_5;
            _2724 = frontier_phi_63_64_ladder_4;
            _2726 = frontier_phi_63_64_ladder_3;
            _2728 = frontier_phi_63_64_ladder;
            _2730 = frontier_phi_63_64_ladder_2;
            _2732 = frontier_phi_63_64_ladder_1;
        }
        float _2737 = isnan(1.0) ? _464 : (isnan(_464) ? 1.0 : min(_464, 1.0));
        _2534 = (_2737 * _2728) + _2046;
        _2536 = (_2737 * _2730) + _2048;
        _2538 = (_2737 * _2732) + _2050;
        _2540 = ((_2722 * _449) * _2737) + _2384;
        _2542 = ((_2724 * _451) * _2737) + _2386;
        _2544 = ((_2726 * _452) * _2737) + _2388;
    }
    else
    {
        _2534 = _2046;
        _2536 = _2048;
        _2538 = _2050;
        _2540 = _2384;
        _2542 = _2386;
        _2544 = _2388;
    }
    float _4493 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4504 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4515 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _2561 = ((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2534 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _464))) + ((_2540 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    float _2562 = ((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2536 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _464))) + ((_2542 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    float _2563 = ((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2538 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _464))) + ((_2544 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    uint _2564 = _423 + 6u;
    float _2572 = _383 / cbSceneParam._m0[86u].x;
    float _2573 = _384 / cbSceneParam._m0[86u].y;
    vec4 _2587 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2572, _2573, (log2((isnan(cbSceneParam._m0[77u].w) ? _304 : (isnan(_304) ? cbSceneParam._m0[77u].w : min(_304, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2589 = _2587.x;
    float _2590 = _2587.y;
    float _2591 = _2587.z;
    float _2592 = _2587.w;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    if (_304 > cbSceneParam._m0[78u].w)
    {
        float _2626 = isnan(_304) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _304 : min(cbSceneParam._m0[80u].w, _304));
        float _2627 = _2626 / _304;
        float _2638 = _2627 * _355;
        float _2639 = _356 * _2627;
        float _2640 = (-0.0) - _2639;
        float _2642 = _2627 * _357;
        float _2644 = (cbSceneParam._m0[77u].w * _2640) / _2626;
        float _2645 = _2644 + cbSceneParam._m0[79u].w;
        float _2646 = cbSceneParam._m0[79u].w - _2639;
        float _2652 = sqrt(((_2638 * _2638) + (_2639 * _2639)) + (_2642 * _2642));
        float _2655 = (1.0 - (cbSceneParam._m0[77u].w / _2626)) * _2652;
        float _2660 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2662 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2839;
        if (abs((_2640 - _2644) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2839 = ((((_2645 > 0.0) ? exp2(_2660 * _2645) : (2.0 - exp2(_2662 * _2645))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2655;
        }
        else
        {
            float _2783 = 1.0 / cbSceneParam._m0[80u].x;
            float _2784 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : max(_2645, _2646));
            float _2785 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : min(_2645, _2646));
            float _2794 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : min(_2784, 0.0));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            _2839 = ((abs(_2652 / _2640) * cbSceneParam._m0[80u].y) * ((((_2794 - _2795) * 2.0) - ((exp2(_2660 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0)))) - exp2(_2660 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0))))) * _2783)) - ((exp2(_2662 * _2794) - exp2(_2662 * _2795)) * _2783))) + (_2655 * cbSceneParam._m0[80u].z);
        }
        vec4 _2841 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2572, _2573, 1.0), 0.0);
        float _2850 = exp2((_2839 * (-1.44269502162933349609375)) * (1.0 - _2841.w));
        float _2851 = log2(_2850);
        float _2867 = log2(_2592);
        _2664 = (exp2(_2867 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].x)) * _2841.x) / cbSceneParam._m0[78u].x)) + _2589;
        _2666 = (exp2(_2867 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].y)) * _2841.y) / cbSceneParam._m0[78u].y)) + _2590;
        _2668 = (exp2(_2867 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].z)) * _2841.z) / cbSceneParam._m0[78u].z)) + _2591;
        _2670 = _2850 * _2592;
    }
    else
    {
        _2664 = _2589;
        _2666 = _2590;
        _2668 = _2591;
        _2670 = _2592;
    }
    bool _2877;
    vec4 _2680;
    vec4 _2702;
    float _2704;
    float _2708;
    float _2709;
    float _2710;
    float _2711;
    bool _2721;
    for (;;)
    {
        _2680 = cbMatDynParam._m0[0u];
        float _2682 = roundEven(_2680.y);
        bool _2683 = _2682 == 3.0;
        float _2684 = log2(_2670);
        float _2691 = exp2(_2684 * cbSceneParam._m0[78u].x) * _2561;
        float _2692 = exp2(_2684 * cbSceneParam._m0[78u].y) * _2562;
        float _2693 = exp2(_2684 * cbSceneParam._m0[78u].z) * _2563;
        float _2700 = _371 + (-0.5);
        _2702 = cbMtdParam._m0[1u];
        _2704 = _2702.y * _2700;
        float _2707 = (_2682 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2708 = _2707 * (_2683 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2664)));
        _2709 = _2707 * (_2683 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2666)));
        _2710 = _2707 * (_2683 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2668)));
        _2711 = _2700 * 0.999000012874603271484375;
        _2721 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2721)
        {
            if ((cbInstanceData._m0[_423 + 7u].x + _2711) < 0.5)
            {
                _2877 = true;
                break;
            }
        }
        uint _2818 = _425 + uint(_2680.w);
        if ((cbInstanceData._m0[_2818].w < 1.0) && ((cbInstanceData._m0[_2818].w + _2711) < 0.5))
        {
            _2877 = true;
            break;
        }
        if ((_2704 + 1.0) < _2702.x)
        {
            _2877 = true;
            break;
        }
        _2877 = false;
        break;
    }
    float _3081;
    if (_2877)
    {
        discard_state = true;
        _3081 = 0.0;
    }
    else
    {
        _3081 = cbInstanceData._m0[_2564].w;
    }
    SV_Target.x = _2708;
    SV_Target.y = _2709;
    SV_Target.z = _2710;
    SV_Target.w = _3081;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2564].w;
    discard_exit();
}


