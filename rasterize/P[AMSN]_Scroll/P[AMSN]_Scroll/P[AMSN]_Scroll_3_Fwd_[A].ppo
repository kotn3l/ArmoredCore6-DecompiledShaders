#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _877;
float _3267;
float _3268;
float _3269;
float _3270;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = ((cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.x;
    float _225 = ((cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.y;
    vec4 _238 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_224 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_225 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.x * cbMtdParam._m0[9u].x;
    float _245 = _238.y * cbMtdParam._m0[9u].y;
    float _246 = _238.z * cbMtdParam._m0[9u].z;
    vec4 _259 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _224) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _225) + cbTextureTilingScale._m0[1u].w));
    float _263 = _259.z;
    float _267 = (_259.x * 2.0) + (-1.0);
    float _269 = (_259.y * 2.0) + (-1.0);
    float _270 = dot(vec2(_267, _269), vec2(_267, _269));
    float _3279 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _276 = sqrt(1.0 - (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0))));
    float _279 = fma(_276, _197 * NORMAL.x, fma(_269, _204 * TANGENT.x, (_190 * _183) * _267));
    float _282 = fma(_276, _197 * NORMAL.y, fma(_269, _204 * TANGENT.y, (_190 * _184) * _267));
    float _285 = fma(_276, _197 * NORMAL.z, fma(_269, _204 * TANGENT.z, (_190 * _185) * _267));
    float _289 = inversesqrt(dot(vec3(_279, _282, _285), vec3(_279, _282, _285)));
    float _290 = _289 * _279;
    float _291 = _289 * _282;
    float _292 = _289 * _285;
    float _3290 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _293 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _3301 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3312 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3323 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3334 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _297 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _313 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    vec4 _378 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _380 = _378.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _556 = sqrt(((_364 * _364) + (_365 * _365)) + (_366 * _366));
        float _562 = (cbMatDynParam._m0[5u].x * _556) + cbMatDynParam._m0[5u].y;
        float _3345 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
        float _563 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _567 = (cbMatDynParam._m0[5u].z * _556) + cbMatDynParam._m0[5u].w;
        float _3356 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) - _563)) + _563) < ((_380 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_292, cbSceneParam._m0[5u].z, fma(_291, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _290));
    float _416 = fma(_292, cbSceneParam._m0[6u].z, fma(_291, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _290));
    float _419 = fma(_292, cbSceneParam._m0[7u].z, fma(_291, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _290));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = _432 + 9u;
    uint _435 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3367 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _3378 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _3389 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _447 = 1.0 - _297;
    float _448 = _444 * _447;
    float _449 = _445 * _447;
    float _450 = _446 * _447;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _297;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _297;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _297;
    float _458 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _473 = _470.x * TEXCOORD.z;
    float _474 = dot(vec3(_290, _291, _292), vec3(_371, _372, _373));
    float _477 = _474 * 2.0;
    float _481 = (_477 * _290) - _371;
    float _482 = (_477 * _291) - _372;
    float _483 = (_477 * _292) - _373;
    float _487 = abs(dot(vec3(_371, _372, _373), vec3(_290, _291, _292)));
    float _3400 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _489 = sqrt(_293);
    float _502 = exp2((_489 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_489 * 3.0));
    float _508 = (1.0 - _502) * ((_489 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _509 = _502 * _489;
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _876;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _601 = fma(_545, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537));
        float _605 = fma(_545, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537));
        float _609 = fma(_545, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537));
        float _634 = _537 + _290;
        float _635 = _541 + _291;
        float _636 = _545 + _292;
        float _646 = fma(_636, cbModelParam._m0[26u].z, fma(_635, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634)) - _601;
        float _647 = fma(_636, cbModelParam._m0[27u].z, fma(_635, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634)) - _605;
        float _648 = fma(_636, cbModelParam._m0[28u].z, fma(_635, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634)) - _609;
        float _652 = inversesqrt(dot(vec3(_646, _647, _648), vec3(_646, _647, _648)));
        float _665 = ((_652 * _646) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_601 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _666 = ((_652 * _647) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_605 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _667 = ((_652 * _648) / cbModelParam._m0[34u].z) + ((((((_609 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        float _704 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_670.x + (-0.5));
        float _706 = _704 * (_670.y + (-0.5));
        float _707 = _704 * (_670.z + (-0.5));
        float _714 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_677.x + (-0.5));
        float _716 = _714 * (_677.y + (-0.5));
        float _717 = _714 * (_677.z + (-0.5));
        float _724 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_684.x + (-0.5));
        float _726 = _724 * (_684.y + (-0.5));
        float _727 = _724 * (_684.z + (-0.5));
        float _734 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_691.x + (-0.5));
        float _736 = _734 * (_691.y + (-0.5));
        float _737 = _734 * (_691.z + (-0.5));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = _705 * 0.5;
        float _742 = _715 * 0.5;
        float _743 = _725 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _758 = (dot(vec3(_290, _291, _292), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _768 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3448 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_770 + 1.0))) + _775) * _738;
        float _785 = _706 * 0.5;
        float _786 = _716 * 0.5;
        float _787 = _726 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _801 = (dot(vec3(_290, _291, _292), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _810 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3481 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_812 + 1.0))) + _817) * _739;
        float _827 = _707 * 0.5;
        float _828 = _717 * 0.5;
        float _829 = _727 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _843 = (dot(vec3(_290, _291, _292), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _852 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3514 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_854 + 1.0))) + _859) * _740;
        _876 = _707;
        _878 = _706;
        _879 = _705;
        _880 = _717;
        _881 = _716;
        _882 = _715;
        _883 = _727;
        _884 = _726;
        _885 = _725;
        _886 = _740;
        _887 = _739;
        _888 = _738;
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
    }
    else
    {
        _876 = _877;
        _878 = _877;
        _879 = _877;
        _880 = _877;
        _881 = _877;
        _882 = _877;
        _883 = _877;
        _884 = _877;
        _885 = _877;
        _886 = _877;
        _887 = _877;
        _888 = _877;
        _889 = 0.0;
        _890 = 0.0;
        _891 = 0.0;
    }
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _920 = fma(_545, cbModelParam._m0[30u].z, fma(_541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _537));
        float _924 = fma(_545, cbModelParam._m0[31u].z, fma(_541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _537));
        float _928 = fma(_545, cbModelParam._m0[32u].z, fma(_541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _537));
        float _951 = _537 + _290;
        float _952 = _541 + _291;
        float _953 = _545 + _292;
        float _963 = fma(_953, cbModelParam._m0[30u].z, fma(_952, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951)) - _920;
        float _964 = fma(_953, cbModelParam._m0[31u].z, fma(_952, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951)) - _924;
        float _965 = fma(_953, cbModelParam._m0[32u].z, fma(_952, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951)) - _928;
        float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
        float _982 = ((_969 * _963) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_920 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_969 * _964) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_924 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_969 * _965) / cbModelParam._m0[35u].z) + ((((((_928 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        float _1019 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_986.x + (-0.5));
        float _1021 = _1019 * (_986.y + (-0.5));
        float _1022 = _1019 * (_986.z + (-0.5));
        float _1029 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_993.x + (-0.5));
        float _1031 = _1029 * (_993.y + (-0.5));
        float _1032 = _1029 * (_993.z + (-0.5));
        float _1039 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1000.x + (-0.5));
        float _1041 = _1039 * (_1000.y + (-0.5));
        float _1042 = _1039 * (_1000.z + (-0.5));
        float _1049 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1007.x + (-0.5));
        float _1051 = _1049 * (_1007.y + (-0.5));
        float _1052 = _1049 * (_1007.z + (-0.5));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = _1020 * 0.5;
        float _1057 = _1030 * 0.5;
        float _1058 = _1040 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_290, _291, _292), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3577 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1083 + 1.0))) + _1088) * _1053;
        float _1098 = _1021 * 0.5;
        float _1099 = _1031 * 0.5;
        float _1100 = _1041 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_290, _291, _292), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3610 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1125 + 1.0))) + _1130) * _1054;
        float _1140 = _1022 * 0.5;
        float _1141 = _1032 * 0.5;
        float _1142 = _1042 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_290, _291, _292), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3643 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1167 + 1.0))) + _1172) * _1055;
        _1189 = _1022;
        _1190 = _1021;
        _1191 = _1020;
        _1192 = _1032;
        _1193 = _1031;
        _1194 = _1030;
        _1195 = _1042;
        _1196 = _1041;
        _1197 = _1040;
        _1198 = _1055;
        _1199 = _1054;
        _1200 = _1053;
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
    }
    else
    {
        _1189 = _877;
        _1190 = _877;
        _1191 = _877;
        _1192 = _877;
        _1193 = _877;
        _1194 = _877;
        _1195 = _877;
        _1196 = _877;
        _1197 = _877;
        _1198 = _877;
        _1199 = _877;
        _1200 = _877;
        _1201 = 0.0;
        _1202 = 0.0;
        _1203 = 0.0;
    }
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _889)) + _889;
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _890)) + _890;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _891)) + _891;
    float _1236 = fma(_1215, cbSceneParam._m0[89u].z, fma(_1214, cbSceneParam._m0[89u].y, _1213 * cbSceneParam._m0[89u].x));
    float _1239 = fma(_1215, cbSceneParam._m0[90u].z, fma(_1214, cbSceneParam._m0[90u].y, _1213 * cbSceneParam._m0[90u].x));
    float _1242 = fma(_1215, cbSceneParam._m0[91u].z, fma(_1214, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1213));
    float _1257 = _481 * 0.5;
    float _1258 = _482 * 0.5;
    float _1259 = _483 * 0.5;
    float _1260 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1263 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1266 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1300;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1273 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_876, _880, _883, _886));
        float _1277 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_878, _881, _884, _887));
        float _1281 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_879, _882, _885, _888));
        float _1288 = dot(vec4(cbModelParam._m0[39u]), vec4(_1257, _1258, _1259, 1.0));
        _1300 = dot(vec3(isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1288) ? 0.0 : (isnan(0.0) ? _1288 : max(0.0, _1288))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1300 = 1.0;
    }
    float _1311;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1302 = dot(vec4(cbModelParam._m0[40u]), vec4(_1257, _1258, _1259, 1.0));
        _1311 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1311 = 1.0;
    }
    float _1315 = (_1311 * cbModelParam._m0[1u].x) + (_1300 * (1.0 - cbModelParam._m0[1u].x));
    float _1325 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _293);
    float _1326 = isnan(_1325) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1325 : min(cbModelParam._m0[25u].z, _1325));
    float _1408;
    float _1410;
    float _1412;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1375 = fma(_545, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537)) + cbModelParam._m0[13u].w;
        float _1379 = fma(_545, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537)) + cbModelParam._m0[14u].w;
        float _1383 = fma(_545, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537)) + cbModelParam._m0[15u].w;
        float _1386 = fma(_483, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481));
        float _1389 = fma(_483, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481));
        float _1392 = fma(_483, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481));
        float _1420;
        if (_1386 > 0.0)
        {
            _1420 = abs((1.0 - _1375) / _1386);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1375 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1420 = frontier_phi_17_15_ladder;
        }
        float _1627;
        if (_1389 > 0.0)
        {
            _1627 = abs((1.0 - _1379) / _1389);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1379 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1627 = frontier_phi_26_22_ladder;
        }
        float _1881;
        if (_1392 > 0.0)
        {
            _1881 = abs((1.0 - _1383) / _1392);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1383 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1881 = frontier_phi_38_33_ladder;
        }
        float _1883 = isnan(_1627) ? _1420 : (isnan(_1420) ? _1627 : min(_1420, _1627));
        float _1884 = isnan(_1881) ? _1883 : (isnan(_1883) ? _1881 : min(_1883, _1881));
        float _1888 = (_1884 * _1386) + _1375;
        float _1889 = (_1884 * _1389) + _1379;
        float _1890 = (_1884 * _1392) + _1383;
        float _1891 = _1884 * 9.9999997473787516355514526367188e-05;
        float _1893 = (-1.0) - _1891;
        float _1895 = _1891 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1890 > _1895) || ((_1890 < _1893) || ((_1889 > _1895) || ((_1889 < _1893) || ((_1888 < _1893) || (_1888 > _1895))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1890, cbModelParam._m0[9u].z, fma(_1889, cbModelParam._m0[9u].y, _1888 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1890, cbModelParam._m0[10u].z, fma(_1889, cbModelParam._m0[10u].y, _1888 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1890, cbModelParam._m0[11u].z, fma(_1889, cbModelParam._m0[11u].y, _1888 * cbModelParam._m0[11u].x))), _1326);
            frontier_phi_16_38_ladder = _2018.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2018.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2018.x * cbModelParam._m0[1u].y;
        }
        _1408 = frontier_phi_16_38_ladder_2;
        _1410 = frontier_phi_16_38_ladder_1;
        _1412 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_481, _482, _483), _1326);
        _1408 = _1396.x * cbModelParam._m0[1u].y;
        _1410 = _1396.y * cbModelParam._m0[1u].y;
        _1412 = _1396.z * cbModelParam._m0[1u].y;
    }
    float _1416 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _293);
    float _1417 = isnan(_1416) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1416 : min(cbModelParam._m0[25u].w, _1416));
    float _1509;
    float _1511;
    float _1513;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1473 = fma(_545, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537)) + cbModelParam._m0[21u].w;
        float _1477 = fma(_545, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537)) + cbModelParam._m0[22u].w;
        float _1481 = fma(_545, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537)) + cbModelParam._m0[23u].w;
        float _1484 = fma(_483, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481));
        float _1487 = fma(_483, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481));
        float _1490 = fma(_483, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481));
        float _1632;
        if (_1484 > 0.0)
        {
            _1632 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1632 = frontier_phi_28_24_ladder;
        }
        float _1908;
        if (_1487 > 0.0)
        {
            _1908 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1908 = frontier_phi_40_35_ladder;
        }
        float _2121;
        if (_1490 > 0.0)
        {
            _2121 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2121 = frontier_phi_49_46_ladder;
        }
        float _2123 = isnan(_1908) ? _1632 : (isnan(_1632) ? _1908 : min(_1632, _1908));
        float _2124 = isnan(_2121) ? _2123 : (isnan(_2123) ? _2121 : min(_2123, _2121));
        float _2128 = (_2124 * _1484) + _1473;
        float _2129 = (_2124 * _1487) + _1477;
        float _2130 = (_2124 * _1490) + _1481;
        float _2131 = _2124 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2131;
        float _2134 = _2131 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2130 > _2134) || ((_2130 < _2132) || ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 < _2132) || (_2128 > _2134))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2329 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2130, cbModelParam._m0[17u].z, fma(_2129, cbModelParam._m0[17u].y, _2128 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2130, cbModelParam._m0[18u].z, fma(_2129, cbModelParam._m0[18u].y, _2128 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2130, cbModelParam._m0[19u].z, fma(_2129, cbModelParam._m0[19u].y, _2128 * cbModelParam._m0[19u].x))), _1417);
            frontier_phi_25_49_ladder = _2329.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2329.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2329.x * cbModelParam._m0[1u].z;
        }
        _1509 = frontier_phi_25_49_ladder_2;
        _1511 = frontier_phi_25_49_ladder_1;
        _1513 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1493 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_481, _482, _483), _1417);
        _1509 = _1493.x * cbModelParam._m0[1u].z;
        _1511 = _1493.y * cbModelParam._m0[1u].z;
        _1513 = _1493.z * cbModelParam._m0[1u].z;
    }
    float _1526 = (((_508 * _458) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1509 - _1408)) + _1408);
    float _1528 = (((_508 * _460) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1511 - _1410)) + _1410);
    float _1530 = (((_508 * _461) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1513 - _1412)) + _1412);
    float _1533 = fma(_1530, cbSceneParam._m0[89u].z, fma(_1528, cbSceneParam._m0[89u].y, _1526 * cbSceneParam._m0[89u].x));
    float _1536 = fma(_1530, cbSceneParam._m0[90u].z, fma(_1528, cbSceneParam._m0[90u].y, _1526 * cbSceneParam._m0[90u].x));
    float _1539 = fma(_1530, cbSceneParam._m0[91u].z, fma(_1528, cbSceneParam._m0[91u].y, _1526 * cbSceneParam._m0[91u].x));
    uvec4 _1549 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1551 = _1549.x * 14u;
    uint _1552 = _1551 + 13u;
    float _1559 = _473 + (-1.0);
    float _1564 = (cbLight._m0[_1552].x * _1559) + 1.0;
    float _1565 = (cbLight._m0[_1552].y * _1559) + 1.0;
    float _1566 = (cbLight._m0[_1552].z * _1559) + 1.0;
    float _1567 = (cbLight._m0[_1552].w * _1559) + 1.0;
    uint _1568 = _1551 + 5u;
    float _1574 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
    uint _1578 = _1551 + 4u;
    float _1585 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
    uint _1589 = _1551 | 1u;
    float _1600 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_290, _291, _292));
    float _1603 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_290, _291, _292));
    float _3779 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _3790 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _1608 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.3183098733425140380859375;
    float _1610 = (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.3183098733425140380859375;
    float _1617 = ((cbLight._m0[_1568].x * _1574) * _1610) + ((cbLight._m0[_1578].x * _1585) * _1608);
    float _1618 = ((_1574 * cbLight._m0[_1568].y) * _1610) + ((_1585 * cbLight._m0[_1578].y) * _1608);
    float _1619 = ((_1574 * cbLight._m0[_1568].z) * _1610) + ((_1585 * cbLight._m0[_1578].z) * _1608);
    uvec4 _1624 = floatBitsToUint(cbLight._m0[_1551 + 12u]);
    bool _1626 = _1624.x == 0u;
    float _1637;
    float _1639;
    float _1641;
    if (_1626)
    {
        _1637 = _1617;
        _1639 = _1618;
        _1641 = _1619;
    }
    else
    {
        uint _1645 = _1551 + 6u;
        float _1661 = (dot(vec3(cbLight._m0[_1551 + 2u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1662 = _1661 * _1661;
        float _3801 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1664 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1637 = (((cbLight._m0[_1645].x * 0.3183098733425140380859375) * _1663) * _1664) + _1617;
        _1639 = (((cbLight._m0[_1645].y * 0.3183098733425140380859375) * _1663) * _1664) + _1618;
        _1641 = (((cbLight._m0[_1645].z * 0.3183098733425140380859375) * _1663) * _1664) + _1619;
    }
    bool _1644 = _1624.y == 0u;
    float _1682;
    float _1684;
    float _1686;
    if (_1644)
    {
        _1682 = _1637;
        _1684 = _1639;
        _1686 = _1641;
    }
    else
    {
        uint _1852 = _1551 + 7u;
        float _1868 = (dot(vec3(cbLight._m0[_1551 + 3u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1869 = _1868 * _1868;
        float _3817 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1871 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1682 = (((cbLight._m0[_1852].x * 0.3183098733425140380859375) * _1870) * _1871) + _1637;
        _1684 = (((cbLight._m0[_1852].y * 0.3183098733425140380859375) * _1870) * _1871) + _1639;
        _1686 = (((cbLight._m0[_1852].z * 0.3183098733425140380859375) * _1870) * _1871) + _1641;
    }
    uint _1689 = _1551 + 8u;
    float _1702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1551].w)) * _293) * 0.949999988079071044921875);
    float _1703 = _1702 * _1702;
    float _1704 = cbLight._m0[_1551].x + _371;
    float _1705 = cbLight._m0[_1551].y + _372;
    float _1706 = cbLight._m0[_1551].z + _373;
    float _1710 = inversesqrt(dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706)));
    float _1711 = _1710 * _1704;
    float _1712 = _1710 * _1705;
    float _1713 = _1710 * _1706;
    float _1714 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1551].xyz));
    float _3833 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1717 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _1718 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1719 = dot(vec3(_290, _291, _292), vec3(_1711, _1712, _1713));
    float _3855 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1722 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1723 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_1711, _1712, _1713));
    float _3866 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1727 = _1703 * _1703;
    float _1731 = ((_1722 * _1722) * (_1727 + (-1.0))) + 1.0;
    float _1739 = exp2(log2(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * 5.0);
    float _1740 = 0.959999978542327880859375 - _455;
    float _1742 = 0.959999978542327880859375 - _456;
    float _1743 = 0.959999978542327880859375 - _457;
    float _1750 = 1.0 - _1703;
    float _1761 = (0.5 / (((_1718 * ((_1717 * _1750) + _1703)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _1750) + _1703) * _1717))) * _1717;
    float _3877 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1763 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1727 / ((_1731 * _1731) * 3.141590118408203125));
    uint _1774 = _1551 + 9u;
    float _1785 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1589].w)) * _293) * 0.949999988079071044921875);
    float _1786 = _1785 * _1785;
    float _1787 = cbLight._m0[_1589].x + _371;
    float _1788 = cbLight._m0[_1589].y + _372;
    float _1789 = cbLight._m0[_1589].z + _373;
    float _1793 = inversesqrt(dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789)));
    float _1794 = _1793 * _1787;
    float _1795 = _1793 * _1788;
    float _1796 = _1793 * _1789;
    float _1797 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1589].xyz));
    float _3888 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _1801 = dot(vec3(_290, _291, _292), vec3(_1794, _1795, _1796));
    float _3899 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1805 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_1794, _1795, _1796));
    float _3910 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1809 = _1786 * _1786;
    float _1813 = ((_1804 * _1804) * (_1809 + (-1.0))) + 1.0;
    float _1820 = exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0);
    float _1827 = 1.0 - _1786;
    float _1837 = (0.5 / (((_1718 * ((_1800 * _1827) + _1786)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _1827) + _1786) * _1800))) * _1800;
    float _3921 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1839 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1809 / ((_1813 * _1813) * 3.141590118408203125));
    float _1849 = (((((_1820 * _1740) + _458) * cbLight._m0[_1774].x) * _1839) * _1574) + (((((_1739 * _1740) + _458) * cbLight._m0[_1689].x) * _1763) * _1585);
    float _1850 = (((((_1820 * _1742) + _460) * cbLight._m0[_1774].y) * _1839) * _1574) + (((((_1739 * _1742) + _460) * cbLight._m0[_1689].y) * _1763) * _1585);
    float _1851 = (((((_1820 * _1743) + _461) * cbLight._m0[_1774].z) * _1839) * _1574) + (((((_1739 * _1743) + _461) * cbLight._m0[_1689].z) * _1763) * _1585);
    float _1913;
    float _1915;
    float _1917;
    if (_1626)
    {
        _1913 = _1849;
        _1915 = _1850;
        _1917 = _1851;
    }
    else
    {
        uint _1919 = _1551 + 2u;
        uint _1923 = _1551 + 10u;
        float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _293) * 0.949999988079071044921875);
        float _1938 = _1937 * _1937;
        float _1939 = cbLight._m0[_1919].x + _371;
        float _1940 = cbLight._m0[_1919].y + _372;
        float _1941 = cbLight._m0[_1919].z + _373;
        float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
        float _1946 = _1945 * _1939;
        float _1947 = _1945 * _1940;
        float _1948 = _1945 * _1941;
        float _1949 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1919].xyz));
        float _3932 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1952 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1953 = dot(vec3(_290, _291, _292), vec3(_1946, _1947, _1948));
        float _3943 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1956 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1957 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_1946, _1947, _1948));
        float _3954 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1961 = _1938 * _1938;
        float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
        float _1972 = exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0);
        float _1979 = 1.0 - _1938;
        float _1989 = (0.5 / (((_1718 * ((_1952 * _1979) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _1979) + _1938) * _1952))) * _1952;
        float _3965 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1991 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
        float _1992 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1913 = (((((_1972 * _1740) + _458) * cbLight._m0[_1923].x) * _1991) * _1992) + _1849;
        _1915 = (((((_1972 * _1742) + _460) * cbLight._m0[_1923].y) * _1991) * _1992) + _1850;
        _1917 = (((((_1972 * _1743) + _461) * cbLight._m0[_1923].z) * _1991) * _1992) + _1851;
    }
    float _2027;
    float _2029;
    float _2031;
    if (_1644)
    {
        _2027 = _1913;
        _2029 = _1915;
        _2031 = _1917;
    }
    else
    {
        uint _2038 = _1551 + 3u;
        uint _2042 = _1551 + 11u;
        float _2056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _293) * 0.949999988079071044921875);
        float _2057 = _2056 * _2056;
        float _2058 = cbLight._m0[_2038].x + _371;
        float _2059 = cbLight._m0[_2038].y + _372;
        float _2060 = cbLight._m0[_2038].z + _373;
        float _2064 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
        float _2065 = _2064 * _2058;
        float _2066 = _2064 * _2059;
        float _2067 = _2064 * _2060;
        float _2068 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_2038].xyz));
        float _3981 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2071 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _2072 = dot(vec3(_290, _291, _292), vec3(_2065, _2066, _2067));
        float _3992 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2075 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _2076 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2065, _2066, _2067));
        float _4003 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2080 = _2057 * _2057;
        float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
        float _2091 = exp2(log2(1.0 - (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * 5.0);
        float _2098 = 1.0 - _2057;
        float _2108 = (0.5 / (((_1718 * ((_2071 * _2098) + _2057)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _2098) + _2057) * _2071))) * _2071;
        float _4014 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2110 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
        float _2111 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _2027 = (((((_2091 * _1740) + _458) * cbLight._m0[_2042].x) * _2110) * _2111) + _1913;
        _2029 = (((((_2091 * _1742) + _460) * cbLight._m0[_2042].y) * _2110) * _2111) + _1915;
        _2031 = (((((_2091 * _1743) + _461) * cbLight._m0[_2042].z) * _2110) * _2111) + _1917;
    }
    float _2246;
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    if (_1549.y == 0u)
    {
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2186;
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2186;
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2186;
        uvec4 _2201 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2202 = _2201.x;
        uint _2213 = uint((float(_2201.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2202))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2202)));
        float _2223 = (log2(_2189 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2224 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        uint _2227 = uint(isnan(14.0) ? _2224 : (isnan(_2224) ? 14.0 : min(_2224, 14.0)));
        uvec4 _2232 = texelFetch(g_lightClusterGridBuffer, int(((_2227 << 2u) + (_2213 << 6u)) >> 2u));
        uint _2233 = _2232.x;
        uint _2234 = _2201.z;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        if (((((1u << ((_2234 >> 4u) & 15u)) + 4294967295u) & _2233) == 0u) || ((_2234 & 240u) == 0u))
        {
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
        }
        else
        {
            float _2335;
            float _2337;
            float _2339;
            float _2341;
            float _2343;
            float _2345;
            float _2487 = 0.0;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            uint _2493 = 0u;
            uint _2502;
            bool _2503;
            for (;;)
            {
                _2502 = texelFetch(g_lightClassification, int((((_2227 << 5u) + (_2213 << 9u)) + (_2493 << 2u)) >> 2u)).x;
                _2503 = _2502 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2503)
                {
                    frontier_phi_66_pred = _2487;
                    frontier_phi_66_pred_1 = _2492;
                    frontier_phi_66_pred_2 = _2491;
                    frontier_phi_66_pred_3 = _2490;
                    frontier_phi_66_pred_4 = _2489;
                    frontier_phi_66_pred_5 = _2488;
                }
                else
                {
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    uint _2638;
                    _2632 = _2487;
                    _2633 = _2488;
                    _2634 = _2489;
                    _2635 = _2490;
                    _2636 = _2491;
                    _2637 = _2492;
                    _2638 = _2502;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    for (;;)
                    {
                        uint _2642 = uint(findLSB(_2638)) + (_2493 << 5u);
                        uint _2639 = (_2638 + 4294967295u) & _2638;
                        uint _2644 = _2642 * 48u;
                        vec4 _2658 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 3u)).x));
                        uint _2664 = (_2642 * 48u) + 4u;
                        vec4 _2677 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2664)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 3u)).x));
                        uint _2683 = (_2642 * 48u) + 8u;
                        vec3 _2694 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x));
                        float _2698 = _2658.x - _2187;
                        float _2699 = _2658.y - _2188;
                        float _2700 = _2658.z - _2189;
                        float _2701 = dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700));
                        float _2704 = inversesqrt(_2701);
                        float _2705 = _2704 * _2698;
                        float _2706 = _2704 * _2699;
                        float _2707 = _2704 * _2700;
                        float _2708 = dot(vec3(_413, _416, _419), vec3(_2705, _2706, _2707));
                        float _2713 = 1.0 - (_2701 * _2658.w);
                        float _4040 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2714 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                        float _2715 = sqrt(_2701) * _2677.w;
                        float _2718 = 1.39999997615814208984375 / (_2715 + 1.39999997615814208984375);
                        float _2719 = _2718 * _2718;
                        float _2722 = ((1.0 - _2719) * _2708) + _2719;
                        float _2725 = _2715 * _2715;
                        float _2729 = ((isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0))) * _2714) / ((_2725 * 0.699999988079071044921875) + 1.0);
                        float _2733 = (-0.0) - _2187;
                        float _2734 = (-0.0) - _2188;
                        float _2735 = (-0.0) - _2189;
                        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
                        float _2740 = _2739 * _2733;
                        float _2741 = _2739 * _2734;
                        float _2742 = _2739 * _2735;
                        float _2750 = exp2(log2(1.0 / ((_2725 * 3.5) + 5.0)) * 0.25);
                        float _2751 = 1.0 - _489;
                        float _2758 = sqrt(1.0 - ((1.0 - (_2751 * _2751)) * (1.0 - (_2750 * _2750))));
                        float _2759 = _2758 * _2758;
                        float _2760 = _2759 * _2759;
                        float _2761 = _2740 + _2705;
                        float _2762 = _2741 + _2706;
                        float _2763 = _2742 + _2707;
                        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
                        float _2771 = dot(vec3(_413, _416, _419), vec3(_2740, _2741, _2742));
                        float _4056 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2774 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2775 = dot(vec3(_413, _416, _419), vec3(_2767 * _2761, _2767 * _2762, _2767 * _2763));
                        float _4067 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2778 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2782 = ((_2778 * _2778) * (_2760 + (-1.0))) + 1.0;
                        float _2783 = _2718 * _2759;
                        float _2784 = _2783 * _2783;
                        float _2787 = ((1.0 - _2784) * _2708) + _2784;
                        float _4078 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2788 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2789 = 1.0 - _2759;
                        float _2799 = (0.5 / (((_2788 * ((_2774 * _2789) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2788 * _2789) + _2759) * _2774))) * _2788;
                        float _4089 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2810 = (((_2760 * 3.1415927410125732421875) * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) / ((_2782 * _2782) * ((_2725 * 2.1991131305694580078125) + 3.141590118408203125))) * _2714;
                        _2562 = (_2729 * _2677.x) + _2635;
                        _2563 = (_2729 * _2677.y) + _2636;
                        _2564 = (_2729 * _2677.z) + _2637;
                        _2559 = (_2810 * _2694.x) + _2632;
                        _2560 = (_2810 * _2694.y) + _2633;
                        _2561 = (_2810 * _2694.z) + _2634;
                        if (_2639 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2632 = _2559;
                            _2633 = _2560;
                            _2634 = _2561;
                            _2635 = _2562;
                            _2636 = _2563;
                            _2637 = _2564;
                            _2638 = _2639;
                        }
                    }
                    frontier_phi_66_pred = _2559;
                    frontier_phi_66_pred_1 = _2564;
                    frontier_phi_66_pred_2 = _2563;
                    frontier_phi_66_pred_3 = _2562;
                    frontier_phi_66_pred_4 = _2561;
                    frontier_phi_66_pred_5 = _2560;
                }
                _2335 = frontier_phi_66_pred;
                _2345 = frontier_phi_66_pred_1;
                _2343 = frontier_phi_66_pred_2;
                _2341 = frontier_phi_66_pred_3;
                _2339 = frontier_phi_66_pred_4;
                _2337 = frontier_phi_66_pred_5;
                uint _2494 = _2493 + 1u;
                if (_2494 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2487 = _2335;
                    _2488 = _2337;
                    _2489 = _2339;
                    _2490 = _2341;
                    _2491 = _2343;
                    _2492 = _2345;
                    _2493 = _2494;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
        }
        uvec4 _2348 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2349 = _2348.z;
        uint _2351 = (_2349 >> 8u) & 15u;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        if (((4294967295u << _2351) & _2233) == 0u)
        {
            _2455 = _2334;
            _2457 = _2336;
            _2459 = _2338;
            _2461 = _2340;
            _2463 = _2342;
            _2465 = _2344;
        }
        else
        {
            float _2480 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
            float _2481 = _2480 * _2187;
            float _2482 = _2480 * _2188;
            float _2483 = _2480 * _2189;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2351 < ((_2349 >> 12u) & 15u))
            {
                float _2456;
                float _2458;
                float _2460;
                float _2462;
                float _2464;
                float _2466;
                float _2615 = _2334;
                float _2616 = _2336;
                float _2617 = _2338;
                float _2618 = _2340;
                float _2619 = _2342;
                float _2620 = _2344;
                uint _2621 = _2351;
                uint _2630;
                bool _2631;
                for (;;)
                {
                    _2630 = texelFetch(g_lightClassification, int((((_2227 << 5u) + (_2213 << 9u)) + (_2621 << 2u)) >> 2u)).x;
                    _2631 = _2630 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2631)
                    {
                        frontier_phi_77_pred = _2620;
                        frontier_phi_77_pred_1 = _2619;
                        frontier_phi_77_pred_2 = _2618;
                        frontier_phi_77_pred_3 = _2617;
                        frontier_phi_77_pred_4 = _2616;
                        frontier_phi_77_pred_5 = _2615;
                    }
                    else
                    {
                        float _2824;
                        float _2825;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _2837 = _2615;
                        float _2838 = _2616;
                        float _2839 = _2617;
                        float _2840 = _2618;
                        float _2841 = _2619;
                        float _2842 = _2620;
                        uint _2843 = _2630;
                        uint _2844;
                        vec4 _2869;
                        float _2870;
                        vec4 _2885;
                        vec3 _2897;
                        vec4 _2913;
                        vec4 _2929;
                        float _2976;
                        bool _2977;
                        for (;;)
                        {
                            uint _2854 = ((_2621 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2843));
                            _2844 = (_2843 + 4294967295u) & _2843;
                            uint _2856 = _2854 * 40u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            _2870 = _2869.w;
                            uint _2872 = (_2854 * 40u) + 4u;
                            _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            uint _2887 = (_2854 * 40u) + 8u;
                            _2897 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x));
                            uint _2900 = (_2854 * 40u) + 16u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2916 = (_2854 * 40u) + 20u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2932 = (_2854 * 40u) + 24u;
                            vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2951 = (_2854 * 40u) + 28u;
                            vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            _2976 = fma(_2189, _2964.z, fma(_2188, _2964.y, _2964.x * _2187)) + _2964.w;
                            _2977 = !((fma(_2189, _2945.z, fma(_2188, _2945.y, _2945.x * _2187)) + _2945.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2977)
                            {
                                float _3004 = _2869.x - _2187;
                                float _3005 = _2869.y - _2188;
                                float _3006 = _2869.z - _2189;
                                float _3007 = dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006));
                                float _3010 = inversesqrt(_3007);
                                float _3011 = _3010 * _3004;
                                float _3012 = _3010 * _3005;
                                float _3013 = _3010 * _3006;
                                float _3017 = 1.0 - (_3007 / (_2870 * _2870));
                                float _4100 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3018 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3022 = sqrt(_3007) * _2885.w;
                                float _3024 = 1.39999997615814208984375 / (_3022 + 1.39999997615814208984375);
                                float _3025 = _3024 * _3024;
                                float _3028 = ((1.0 - _3025) * dot(vec3(_3011, _3012, _3013), vec3(_413, _416, _419))) + _3025;
                                float _3031 = _3022 * _3022;
                                float _3035 = (fma(_2189, _2913.z, fma(_2188, _2913.y, _2913.x * _2187)) + _2913.w) / _2976;
                                float _3036 = (fma(_2189, _2929.z, fma(_2188, _2929.y, _2929.x * _2187)) + _2929.w) / _2976;
                                float _3040 = 1.0 - dot(vec2(_3035, _3036), vec2(_3035, _3036));
                                float _4116 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3041 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3042 = _3041 * (((isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0))) * _3018) / ((_3031 * 0.699999988079071044921875) + 1.0));
                                float _3054 = exp2(log2(1.0 / ((_3031 * 3.5) + 5.0)) * 0.25);
                                float _3055 = 1.0 - _489;
                                float _3062 = sqrt(1.0 - ((1.0 - (_3055 * _3055)) * (1.0 - (_3054 * _3054))));
                                float _3063 = _3062 * _3062;
                                float _3064 = _3063 * _3063;
                                float _3065 = _3011 - _2481;
                                float _3066 = _3012 - _2482;
                                float _3067 = _3013 - _2483;
                                float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
                                float _3075 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2481, (-0.0) - _2482, (-0.0) - _2483));
                                float _4127 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3078 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3079 = dot(vec3(_413, _416, _419), vec3(_3071 * _3065, _3071 * _3066, _3071 * _3067));
                                float _4138 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3082 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3086 = ((_3082 * _3082) * (_3064 + (-1.0))) + 1.0;
                                float _3087 = _3024 * _3063;
                                float _3088 = _3087 * _3087;
                                float _3094 = ((1.0 - _3088) * dot(vec3(_413, _416, _419), vec3(_3011, _3012, _3013))) + _3088;
                                float _4149 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3096 = 1.0 - _3063;
                                float _3106 = (0.5 / (((_3095 * ((_3078 * _3096) + _3063)) + 9.9999999392252902907785028219223e-09) + (((_3095 * _3096) + _3063) * _3078))) * _3095;
                                float _4160 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3116 = (_3041 * _3018) * (((_3064 * 3.1415927410125732421875) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) / ((_3086 * _3086) * ((_3031 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3042 * _2885.y;
                                frontier_phi_83_pred_1 = _3042 * _2885.x;
                                frontier_phi_83_pred_2 = _3116 * _2897.z;
                                frontier_phi_83_pred_3 = _3116 * _2897.y;
                                frontier_phi_83_pred_4 = _3116 * _2897.x;
                                frontier_phi_83_pred_5 = _3042 * _2885.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3124 = frontier_phi_83_pred;
                            _3123 = frontier_phi_83_pred_1;
                            _3122 = frontier_phi_83_pred_2;
                            _3121 = frontier_phi_83_pred_3;
                            _3120 = frontier_phi_83_pred_4;
                            _3125 = frontier_phi_83_pred_5;
                            _2827 = _3123 + _2840;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            _2824 = _3120 + _2837;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            if (_2844 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2844;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2829;
                        frontier_phi_77_pred_1 = _2828;
                        frontier_phi_77_pred_2 = _2827;
                        frontier_phi_77_pred_3 = _2826;
                        frontier_phi_77_pred_4 = _2825;
                        frontier_phi_77_pred_5 = _2824;
                    }
                    _2466 = frontier_phi_77_pred;
                    _2464 = frontier_phi_77_pred_1;
                    _2462 = frontier_phi_77_pred_2;
                    _2460 = frontier_phi_77_pred_3;
                    _2458 = frontier_phi_77_pred_4;
                    _2456 = frontier_phi_77_pred_5;
                    uint _2622 = _2621 + 1u;
                    if (_2622 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2615 = _2456;
                        _2616 = _2458;
                        _2617 = _2460;
                        _2618 = _2462;
                        _2619 = _2464;
                        _2620 = _2466;
                        _2621 = _2622;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2460;
                frontier_phi_58_59_ladder_1 = _2466;
                frontier_phi_58_59_ladder_2 = _2464;
                frontier_phi_58_59_ladder_3 = _2462;
                frontier_phi_58_59_ladder_4 = _2458;
                frontier_phi_58_59_ladder_5 = _2456;
            }
            else
            {
                frontier_phi_58_59_ladder = _2338;
                frontier_phi_58_59_ladder_1 = _2344;
                frontier_phi_58_59_ladder_2 = _2342;
                frontier_phi_58_59_ladder_3 = _2340;
                frontier_phi_58_59_ladder_4 = _2336;
                frontier_phi_58_59_ladder_5 = _2334;
            }
            _2455 = frontier_phi_58_59_ladder_5;
            _2457 = frontier_phi_58_59_ladder_4;
            _2459 = frontier_phi_58_59_ladder;
            _2461 = frontier_phi_58_59_ladder_3;
            _2463 = frontier_phi_58_59_ladder_2;
            _2465 = frontier_phi_58_59_ladder_1;
        }
        float _2470 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
        _2246 = (_2470 * _2461) + _1682;
        _2248 = (_2470 * _2463) + _1684;
        _2250 = (_2470 * _2465) + _1686;
        _2252 = ((_2455 * _458) * _2470) + _2027;
        _2254 = ((_2457 * _460) * _2470) + _2029;
        _2256 = ((_2459 * _461) * _2470) + _2031;
    }
    else
    {
        _2246 = _1682;
        _2248 = _1684;
        _2250 = _1686;
        _2252 = _2027;
        _2254 = _2029;
        _2256 = _2031;
    }
    float _4176 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4187 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4198 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _2273 = ((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2246 + ((isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))) * _473))) + ((_2252 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1315)) * cbPerFrame._m0[3u].x);
    float _2274 = ((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2248 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _473))) + ((_2254 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1315)) * cbPerFrame._m0[3u].x);
    float _2275 = ((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2250 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _473))) + ((_2256 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1315)) * cbPerFrame._m0[3u].x);
    uint _2276 = _432 + 6u;
    float _2284 = _392 / cbSceneParam._m0[86u].x;
    float _2285 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2299 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2284, _2285, (log2((isnan(cbSceneParam._m0[77u].w) ? _313 : (isnan(_313) ? cbSceneParam._m0[77u].w : min(_313, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2301 = _2299.x;
    float _2302 = _2299.y;
    float _2303 = _2299.z;
    float _2304 = _2299.w;
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    if (_313 > cbSceneParam._m0[78u].w)
    {
        float _2359 = isnan(_313) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _313 : min(cbSceneParam._m0[80u].w, _313));
        float _2360 = _2359 / _313;
        float _2371 = _2360 * _364;
        float _2372 = _365 * _2360;
        float _2373 = (-0.0) - _2372;
        float _2375 = _2360 * _366;
        float _2377 = (cbSceneParam._m0[77u].w * _2373) / _2359;
        float _2378 = _2377 + cbSceneParam._m0[79u].w;
        float _2379 = cbSceneParam._m0[79u].w - _2372;
        float _2385 = sqrt(((_2371 * _2371) + (_2372 * _2372)) + (_2375 * _2375));
        float _2388 = (1.0 - (cbSceneParam._m0[77u].w / _2359)) * _2385;
        float _2393 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2395 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2572;
        if (abs((_2373 - _2377) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2572 = ((((_2378 > 0.0) ? exp2(_2393 * _2378) : (2.0 - exp2(_2395 * _2378))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2388;
        }
        else
        {
            float _2516 = 1.0 / cbSceneParam._m0[80u].x;
            float _2517 = isnan(_2379) ? _2378 : (isnan(_2378) ? _2379 : max(_2378, _2379));
            float _2518 = isnan(_2379) ? _2378 : (isnan(_2378) ? _2379 : min(_2378, _2379));
            float _2527 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : min(_2517, 0.0));
            float _2528 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : min(_2518, 0.0));
            _2572 = ((abs(_2385 / _2373) * cbSceneParam._m0[80u].y) * ((((_2527 - _2528) * 2.0) - ((exp2(_2393 * (isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0)))) - exp2(_2393 * (isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0))))) * _2516)) - ((exp2(_2395 * _2527) - exp2(_2395 * _2528)) * _2516))) + (_2388 * cbSceneParam._m0[80u].z);
        }
        vec4 _2574 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2284, _2285, 1.0), 0.0);
        float _2583 = exp2((_2572 * (-1.44269502162933349609375)) * (1.0 - _2574.w));
        float _2584 = log2(_2583);
        float _2600 = log2(_2304);
        _2397 = (exp2(_2600 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].x)) * _2574.x) / cbSceneParam._m0[78u].x)) + _2301;
        _2399 = (exp2(_2600 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].y)) * _2574.y) / cbSceneParam._m0[78u].y)) + _2302;
        _2401 = (exp2(_2600 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].z)) * _2574.z) / cbSceneParam._m0[78u].z)) + _2303;
        _2403 = _2583 * _2304;
    }
    else
    {
        _2397 = _2301;
        _2399 = _2302;
        _2401 = _2303;
        _2403 = _2304;
    }
    bool _2610;
    vec4 _2413;
    vec4 _2435;
    float _2437;
    float _2441;
    float _2442;
    float _2443;
    float _2444;
    bool _2454;
    for (;;)
    {
        _2413 = cbMatDynParam._m0[0u];
        float _2415 = roundEven(_2413.y);
        bool _2416 = _2415 == 3.0;
        float _2417 = log2(_2403);
        float _2424 = exp2(_2417 * cbSceneParam._m0[78u].x) * _2273;
        float _2425 = exp2(_2417 * cbSceneParam._m0[78u].y) * _2274;
        float _2426 = exp2(_2417 * cbSceneParam._m0[78u].z) * _2275;
        float _2433 = _380 + (-0.5);
        _2435 = cbMtdParam._m0[1u];
        _2437 = _2435.y * _2433;
        float _2440 = (_2415 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2441 = _2440 * (_2416 ? _2424 : (_2424 + (cbSceneParam._m0[72u].w * _2397)));
        _2442 = _2440 * (_2416 ? _2425 : (_2425 + (cbSceneParam._m0[72u].w * _2399)));
        _2443 = _2440 * (_2416 ? _2426 : (_2426 + (cbSceneParam._m0[72u].w * _2401)));
        _2444 = _2433 * 0.999000012874603271484375;
        _2454 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2454)
        {
            if ((cbInstanceData._m0[_432 + 7u].x + _2444) < 0.5)
            {
                _2610 = true;
                break;
            }
        }
        uint _2551 = _434 + uint(_2413.w);
        if ((cbInstanceData._m0[_2551].w < 1.0) && ((cbInstanceData._m0[_2551].w + _2444) < 0.5))
        {
            _2610 = true;
            break;
        }
        if ((_2437 + 1.0) < _2435.x)
        {
            _2610 = true;
            break;
        }
        _2610 = false;
        break;
    }
    float _2815;
    if (_2610)
    {
        discard_state = true;
        _2815 = 0.0;
    }
    else
    {
        _2815 = cbInstanceData._m0[_2276].w;
    }
    SV_Target.x = _2441;
    SV_Target.y = _2442;
    SV_Target.z = _2443;
    SV_Target.w = _2815;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2276].w;
    discard_exit();
}


