#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _823;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _246.z;
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3443 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))));
    float _266 = fma(_263, _192 * NORMAL.x, fma(_256, _199 * TANGENT.x, (_185 * _178) * _254));
    float _269 = fma(_263, _192 * NORMAL.y, fma(_256, _199 * TANGENT.y, (_185 * _179) * _254));
    float _272 = fma(_263, _192 * NORMAL.z, fma(_256, _199 * TANGENT.z, (_185 * _180) * _254));
    float _276 = inversesqrt(dot(vec3(_266, _269, _272), vec3(_266, _269, _272)));
    float _277 = _276 * _266;
    float _278 = _276 * _269;
    float _279 = _276 * _272;
    float _3454 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _280 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3476 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3487 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3498 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _284 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _300 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _341 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _351 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _341);
    float _352 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _341);
    float _353 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _341);
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _351 * _357;
    float _359 = _352 * _357;
    float _360 = _353 * _357;
    float _366 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _367 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _388 = fma(_279, cbSceneParam._m0[5u].z, fma(_278, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _277));
    float _391 = fma(_279, cbSceneParam._m0[6u].z, fma(_278, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _277));
    float _394 = fma(_279, cbSceneParam._m0[7u].z, fma(_278, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _277));
    uint _407 = uint(roundEven(NORMAL.w)) * 13u;
    uint _410 = (_407 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _416 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * cbInstanceData._m0[_410].x;
    float _417 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * cbInstanceData._m0[_410].y;
    float _418 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * cbInstanceData._m0[_410].z;
    float _3509 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _420 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _422 = 1.0 - _284;
    float _423 = _419 * _422;
    float _424 = _420 * _422;
    float _425 = _421 * _422;
    float _430 = (_419 + (-0.039999999105930328369140625)) * _284;
    float _431 = (_420 + (-0.039999999105930328369140625)) * _284;
    float _432 = (_421 + (-0.039999999105930328369140625)) * _284;
    float _433 = _430 + 0.039999999105930328369140625;
    float _435 = _431 + 0.039999999105930328369140625;
    float _436 = _432 + 0.039999999105930328369140625;
    vec4 _445 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _366, cbSceneParam._m0[86u].y * _367));
    float _448 = _445.x * TEXCOORD.z;
    float _449 = dot(vec3(_277, _278, _279), vec3(_358, _359, _360));
    float _452 = _449 * 2.0;
    float _456 = (_452 * _277) - _358;
    float _457 = (_452 * _278) - _359;
    float _458 = (_452 * _279) - _360;
    float _462 = abs(dot(vec3(_358, _359, _360), vec3(_277, _278, _279)));
    float _3542 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _464 = sqrt(_280);
    float _477 = exp2((_464 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_464 * 3.0));
    float _483 = (1.0 - _477) * ((_464 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _484 = _477 * _464;
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _822;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _547 = fma(_520, cbModelParam._m0[26u].z, fma(_516, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _512));
        float _551 = fma(_520, cbModelParam._m0[27u].z, fma(_516, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _512));
        float _555 = fma(_520, cbModelParam._m0[28u].z, fma(_516, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _512));
        float _580 = _512 + _277;
        float _581 = _516 + _278;
        float _582 = _520 + _279;
        float _592 = fma(_582, cbModelParam._m0[26u].z, fma(_581, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _580)) - _547;
        float _593 = fma(_582, cbModelParam._m0[27u].z, fma(_581, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _580)) - _551;
        float _594 = fma(_582, cbModelParam._m0[28u].z, fma(_581, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _580)) - _555;
        float _598 = inversesqrt(dot(vec3(_592, _593, _594), vec3(_592, _593, _594)));
        float _611 = ((_598 * _592) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_547 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _612 = ((_598 * _593) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_551 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _613 = ((_598 * _594) / cbModelParam._m0[34u].z) + ((((((_555 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _616 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        vec4 _623 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        vec4 _630 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        float _650 = exp2((_616.w + (-0.5)) * 20.0) * 2.0;
        float _651 = _650 * (_616.x + (-0.5));
        float _652 = _650 * (_616.y + (-0.5));
        float _653 = _650 * (_616.z + (-0.5));
        float _660 = exp2((_623.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_623.x + (-0.5));
        float _662 = _660 * (_623.y + (-0.5));
        float _663 = _660 * (_623.z + (-0.5));
        float _670 = exp2((_630.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_630.x + (-0.5));
        float _672 = _670 * (_630.y + (-0.5));
        float _673 = _670 * (_630.z + (-0.5));
        float _680 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_637.x + (-0.5));
        float _682 = _680 * (_637.y + (-0.5));
        float _683 = _680 * (_637.z + (-0.5));
        float _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _685 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _687 = _651 * 0.5;
        float _688 = _661 * 0.5;
        float _689 = _671 * 0.5;
        float _690 = dot(vec3(_687, _688, _689), vec3(_687, _688, _689));
        float _695 = (_690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_690);
        float _704 = (dot(vec3(_277, _278, _279), vec3(_695 * _687, _695 * _688, _695 * _689)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _714 = sqrt(((_688 * _688) + (_687 * _687)) + (_689 * _689)) / (_684 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _716 = _715 * 2.0;
        float _720 = (1.0 - _715) / (_715 + 1.0);
        float _3590 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _730 = ((((1.0 - _721) * (_716 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_716 + 1.0))) + _721) * _684;
        float _731 = _652 * 0.5;
        float _732 = _662 * 0.5;
        float _733 = _672 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _747 = (dot(vec3(_277, _278, _279), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _756 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_685 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3623 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_758 + 1.0))) + _763) * _685;
        float _773 = _653 * 0.5;
        float _774 = _663 * 0.5;
        float _775 = _673 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _789 = (dot(vec3(_277, _278, _279), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _798 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_686 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3656 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_800 + 1.0))) + _805) * _686;
        _822 = _653;
        _824 = _652;
        _825 = _651;
        _826 = _663;
        _827 = _662;
        _828 = _661;
        _829 = _673;
        _830 = _672;
        _831 = _671;
        _832 = _686;
        _833 = _685;
        _834 = _684;
        _835 = cbModelParam._m0[36u].z * (isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0)));
        _836 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
        _837 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
    }
    else
    {
        _822 = _823;
        _824 = _823;
        _825 = _823;
        _826 = _823;
        _827 = _823;
        _828 = _823;
        _829 = _823;
        _830 = _823;
        _831 = _823;
        _832 = _823;
        _833 = _823;
        _834 = _823;
        _835 = 0.0;
        _836 = 0.0;
        _837 = 0.0;
    }
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _863 = fma(_520, cbModelParam._m0[30u].z, fma(_516, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _512));
        float _867 = fma(_520, cbModelParam._m0[31u].z, fma(_516, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _512));
        float _871 = fma(_520, cbModelParam._m0[32u].z, fma(_516, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _512));
        float _894 = _512 + _277;
        float _895 = _516 + _278;
        float _896 = _520 + _279;
        float _906 = fma(_896, cbModelParam._m0[30u].z, fma(_895, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _894)) - _863;
        float _907 = fma(_896, cbModelParam._m0[31u].z, fma(_895, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _894)) - _867;
        float _908 = fma(_896, cbModelParam._m0[32u].z, fma(_895, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _894)) - _871;
        float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
        float _925 = ((_912 * _906) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_863 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_912 * _907) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_867 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_912 * _908) / cbModelParam._m0[35u].z) + ((((((_871 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        float _962 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_929.x + (-0.5));
        float _964 = _962 * (_929.y + (-0.5));
        float _965 = _962 * (_929.z + (-0.5));
        float _972 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_936.x + (-0.5));
        float _974 = _972 * (_936.y + (-0.5));
        float _975 = _972 * (_936.z + (-0.5));
        float _982 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_943.x + (-0.5));
        float _984 = _982 * (_943.y + (-0.5));
        float _985 = _982 * (_943.z + (-0.5));
        float _992 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_950.x + (-0.5));
        float _994 = _992 * (_950.y + (-0.5));
        float _995 = _992 * (_950.z + (-0.5));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = _963 * 0.5;
        float _1000 = _973 * 0.5;
        float _1001 = _983 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_277, _278, _279), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3719 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1026 + 1.0))) + _1031) * _996;
        float _1041 = _964 * 0.5;
        float _1042 = _974 * 0.5;
        float _1043 = _984 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_277, _278, _279), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3752 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1068 + 1.0))) + _1073) * _997;
        float _1083 = _965 * 0.5;
        float _1084 = _975 * 0.5;
        float _1085 = _985 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_277, _278, _279), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3785 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1110 + 1.0))) + _1115) * _998;
        _1132 = _965;
        _1133 = _964;
        _1134 = _963;
        _1135 = _975;
        _1136 = _974;
        _1137 = _973;
        _1138 = _985;
        _1139 = _984;
        _1140 = _983;
        _1141 = _998;
        _1142 = _997;
        _1143 = _996;
        _1144 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1145 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1146 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
    }
    else
    {
        _1132 = _823;
        _1133 = _823;
        _1134 = _823;
        _1135 = _823;
        _1136 = _823;
        _1137 = _823;
        _1138 = _823;
        _1139 = _823;
        _1140 = _823;
        _1141 = _823;
        _1142 = _823;
        _1143 = _823;
        _1144 = 0.0;
        _1145 = 0.0;
        _1146 = 0.0;
    }
    float _1156 = (cbModelParam._m0[1u].x * (_1144 - _835)) + _835;
    float _1157 = (cbModelParam._m0[1u].x * (_1145 - _836)) + _836;
    float _1158 = (cbModelParam._m0[1u].x * (_1146 - _837)) + _837;
    float _1179 = fma(_1158, cbSceneParam._m0[89u].z, fma(_1157, cbSceneParam._m0[89u].y, _1156 * cbSceneParam._m0[89u].x));
    float _1182 = fma(_1158, cbSceneParam._m0[90u].z, fma(_1157, cbSceneParam._m0[90u].y, _1156 * cbSceneParam._m0[90u].x));
    float _1185 = fma(_1158, cbSceneParam._m0[91u].z, fma(_1157, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1156));
    float _1200 = _456 * 0.5;
    float _1201 = _457 * 0.5;
    float _1202 = _458 * 0.5;
    float _1203 = dot(vec4(_1200, _1201, _1202, 1.0), vec4(_1134, _1137, _1140, _1143));
    float _1206 = dot(vec4(_1200, _1201, _1202, 1.0), vec4(_1133, _1136, _1139, _1142));
    float _1209 = dot(vec4(_1200, _1201, _1202, 1.0), vec4(_1132, _1135, _1138, _1141));
    float _1243;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1216 = dot(vec4(_1200, _1201, _1202, 1.0), vec4(_822, _826, _829, _832));
        float _1220 = dot(vec4(_1200, _1201, _1202, 1.0), vec4(_824, _827, _830, _833));
        float _1224 = dot(vec4(_1200, _1201, _1202, 1.0), vec4(_825, _828, _831, _834));
        float _1231 = dot(vec4(cbModelParam._m0[39u]), vec4(_1200, _1201, _1202, 1.0));
        _1243 = dot(vec3(isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)), isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)), isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1231) ? 0.0 : (isnan(0.0) ? _1231 : max(0.0, _1231))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1243 = 1.0;
    }
    float _1254;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1245 = dot(vec4(cbModelParam._m0[40u]), vec4(_1200, _1201, _1202, 1.0));
        _1254 = dot(vec3(isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)), isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1245) ? 0.0 : (isnan(0.0) ? _1245 : max(0.0, _1245))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1254 = 1.0;
    }
    float _1258 = (_1254 * cbModelParam._m0[1u].x) + (_1243 * (1.0 - cbModelParam._m0[1u].x));
    float _1268 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _280);
    float _1269 = isnan(_1268) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1268 : min(cbModelParam._m0[25u].z, _1268));
    float _1351;
    float _1353;
    float _1355;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1318 = fma(_520, cbModelParam._m0[13u].z, fma(_516, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512)) + cbModelParam._m0[13u].w;
        float _1322 = fma(_520, cbModelParam._m0[14u].z, fma(_516, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512)) + cbModelParam._m0[14u].w;
        float _1326 = fma(_520, cbModelParam._m0[15u].z, fma(_516, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512)) + cbModelParam._m0[15u].w;
        float _1329 = fma(_458, cbModelParam._m0[13u].z, fma(_457, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _456));
        float _1332 = fma(_458, cbModelParam._m0[14u].z, fma(_457, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _456));
        float _1335 = fma(_458, cbModelParam._m0[15u].z, fma(_457, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _456));
        float _1363;
        if (_1329 > 0.0)
        {
            _1363 = abs((1.0 - _1318) / _1329);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1318 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1363 = frontier_phi_14_12_ladder;
        }
        float _1539;
        if (_1332 > 0.0)
        {
            _1539 = abs((1.0 - _1322) / _1332);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1322 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1539 = frontier_phi_23_19_ladder;
        }
        float _1835;
        if (_1335 > 0.0)
        {
            _1835 = abs((1.0 - _1326) / _1335);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1326 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1835 = frontier_phi_35_30_ladder;
        }
        float _1837 = isnan(_1539) ? _1363 : (isnan(_1363) ? _1539 : min(_1363, _1539));
        float _1838 = isnan(_1835) ? _1837 : (isnan(_1837) ? _1835 : min(_1837, _1835));
        float _1842 = (_1838 * _1329) + _1318;
        float _1843 = (_1838 * _1332) + _1322;
        float _1844 = (_1838 * _1335) + _1326;
        float _1845 = _1838 * 9.9999997473787516355514526367188e-05;
        float _1847 = (-1.0) - _1845;
        float _1849 = _1845 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1844 > _1849) || ((_1844 < _1847) || ((_1843 > _1849) || ((_1843 < _1847) || ((_1842 < _1847) || (_1842 > _1849))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1989 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1844, cbModelParam._m0[9u].z, fma(_1843, cbModelParam._m0[9u].y, _1842 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1844, cbModelParam._m0[10u].z, fma(_1843, cbModelParam._m0[10u].y, _1842 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1844, cbModelParam._m0[11u].z, fma(_1843, cbModelParam._m0[11u].y, _1842 * cbModelParam._m0[11u].x))), _1269);
            frontier_phi_13_35_ladder = _1989.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1989.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1989.x * cbModelParam._m0[1u].y;
        }
        _1351 = frontier_phi_13_35_ladder_2;
        _1353 = frontier_phi_13_35_ladder_1;
        _1355 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_456, _457, _458), _1269);
        _1351 = _1339.x * cbModelParam._m0[1u].y;
        _1353 = _1339.y * cbModelParam._m0[1u].y;
        _1355 = _1339.z * cbModelParam._m0[1u].y;
    }
    float _1359 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _280);
    float _1360 = isnan(_1359) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1359 : min(cbModelParam._m0[25u].w, _1359));
    float _1453;
    float _1455;
    float _1457;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1417 = fma(_520, cbModelParam._m0[21u].z, fma(_516, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512)) + cbModelParam._m0[21u].w;
        float _1421 = fma(_520, cbModelParam._m0[22u].z, fma(_516, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512)) + cbModelParam._m0[22u].w;
        float _1425 = fma(_520, cbModelParam._m0[23u].z, fma(_516, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512)) + cbModelParam._m0[23u].w;
        float _1428 = fma(_458, cbModelParam._m0[21u].z, fma(_457, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _456));
        float _1431 = fma(_458, cbModelParam._m0[22u].z, fma(_457, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _456));
        float _1434 = fma(_458, cbModelParam._m0[23u].z, fma(_457, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _456));
        float _1544;
        if (_1428 > 0.0)
        {
            _1544 = abs((1.0 - _1417) / _1428);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1417 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1544 = frontier_phi_25_21_ladder;
        }
        float _1862;
        if (_1431 > 0.0)
        {
            _1862 = abs((1.0 - _1421) / _1431);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1421 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1862 = frontier_phi_37_32_ladder;
        }
        float _2200;
        if (_1434 > 0.0)
        {
            _2200 = abs((1.0 - _1425) / _1434);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1425 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2200 = frontier_phi_47_44_ladder;
        }
        float _2202 = isnan(_1862) ? _1544 : (isnan(_1544) ? _1862 : min(_1544, _1862));
        float _2203 = isnan(_2200) ? _2202 : (isnan(_2202) ? _2200 : min(_2202, _2200));
        float _2207 = (_2203 * _1428) + _1417;
        float _2208 = (_2203 * _1431) + _1421;
        float _2209 = (_2203 * _1434) + _1425;
        float _2210 = _2203 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2210;
        float _2213 = _2210 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2209 > _2213) || ((_2209 < _2211) || ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 < _2211) || (_2207 > _2213))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2331 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2209, cbModelParam._m0[17u].z, fma(_2208, cbModelParam._m0[17u].y, _2207 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2209, cbModelParam._m0[18u].z, fma(_2208, cbModelParam._m0[18u].y, _2207 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2209, cbModelParam._m0[19u].z, fma(_2208, cbModelParam._m0[19u].y, _2207 * cbModelParam._m0[19u].x))), _1360);
            frontier_phi_22_47_ladder = _2331.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2331.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2331.x * cbModelParam._m0[1u].z;
        }
        _1453 = frontier_phi_22_47_ladder_2;
        _1455 = frontier_phi_22_47_ladder_1;
        _1457 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1437 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_456, _457, _458), _1360);
        _1453 = _1437.x * cbModelParam._m0[1u].z;
        _1455 = _1437.y * cbModelParam._m0[1u].z;
        _1457 = _1437.z * cbModelParam._m0[1u].z;
    }
    float _1470 = (((_483 * _433) + _484) * _448) * ((cbModelParam._m0[1u].w * (_1453 - _1351)) + _1351);
    float _1472 = (((_483 * _435) + _484) * _448) * ((cbModelParam._m0[1u].w * (_1455 - _1353)) + _1353);
    float _1474 = (((_483 * _436) + _484) * _448) * ((cbModelParam._m0[1u].w * (_1457 - _1355)) + _1355);
    float _1477 = fma(_1474, cbSceneParam._m0[89u].z, fma(_1472, cbSceneParam._m0[89u].y, _1470 * cbSceneParam._m0[89u].x));
    float _1480 = fma(_1474, cbSceneParam._m0[90u].z, fma(_1472, cbSceneParam._m0[90u].y, _1470 * cbSceneParam._m0[90u].x));
    float _1483 = fma(_1474, cbSceneParam._m0[91u].z, fma(_1472, cbSceneParam._m0[91u].y, _1470 * cbSceneParam._m0[91u].x));
    float _1518 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1522 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1526 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1530 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1531 = _1518 / _1530;
    float _1532 = _1522 / _1530;
    float _1533 = _1526 / _1530;
    float _1680;
    float _1681;
    float _1682;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1560 = ((uint(_1533 > cbSceneParam._m0[59u].y) + uint(_1533 > cbSceneParam._m0[59u].x)) + uint(_1533 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1561 = _1560 + 43u;
        uint _1569 = _1560 + 44u;
        uint _1577 = _1560 + 45u;
        uint _1585 = _1560 + 46u;
        float _1596 = fma(_1530, cbSceneParam._m0[_1561].w, fma(_1526, cbSceneParam._m0[_1561].z, fma(_1522, cbSceneParam._m0[_1561].y, _1518 * cbSceneParam._m0[_1561].x)));
        float _1600 = fma(_1530, cbSceneParam._m0[_1569].w, fma(_1526, cbSceneParam._m0[_1569].z, fma(_1522, cbSceneParam._m0[_1569].y, _1518 * cbSceneParam._m0[_1569].x)));
        float _1608 = fma(_1530, cbSceneParam._m0[_1585].w, fma(_1526, cbSceneParam._m0[_1585].z, fma(_1522, cbSceneParam._m0[_1585].y, _1518 * cbSceneParam._m0[_1585].x)));
        float _1613 = cbSceneParam._m0[33u].z * _1608;
        float _1615 = cbSceneParam._m0[33u].w * _1608;
        float _1618 = fma(_1530, cbSceneParam._m0[_1577].w, fma(_1526, cbSceneParam._m0[_1577].z, fma(_1522, cbSceneParam._m0[_1577].y, _1518 * cbSceneParam._m0[_1577].x))) / _1608;
        float _1666 = (cbSceneParam._m0[33u].x - sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533))) * cbSceneParam._m0[33u].y;
        float _3911 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1673 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1613 + _1596) / _1608, (_1615 + _1600) / _1608), _1618), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1615 + _1596) / _1608, (_1600 - _1613) / _1608), _1618), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1596 - _1613) / _1608, (_1600 - _1615) / _1608), _1618), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1596 - _1615) / _1608, (_1613 + _1600) / _1608), _1618), 0.0)).x), vec4(0.25)));
        _1680 = 1.0 - (_1673 * cbSceneParam._m0[34u].x);
        _1681 = 1.0 - (_1673 * cbSceneParam._m0[34u].y);
        _1682 = 1.0 - (_1673 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1680 = 1.0;
        _1681 = 1.0;
        _1682 = 1.0;
    }
    float _1746;
    float _1748;
    float _1750;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1734 = fma(_1530, cbSceneParam._m0[63u].w, fma(_1526, cbSceneParam._m0[63u].z, fma(_1522, cbSceneParam._m0[63u].y, _1518 * cbSceneParam._m0[63u].x)));
        float _1735 = fma(_1530, cbSceneParam._m0[60u].w, fma(_1526, cbSceneParam._m0[60u].z, fma(_1522, cbSceneParam._m0[60u].y, _1518 * cbSceneParam._m0[60u].x))) / _1734;
        float _1736 = fma(_1530, cbSceneParam._m0[61u].w, fma(_1526, cbSceneParam._m0[61u].z, fma(_1522, cbSceneParam._m0[61u].y, _1518 * cbSceneParam._m0[61u].x))) / _1734;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1735 >= cbSceneParam._m0[64u].x) && (_1736 >= cbSceneParam._m0[64u].y)) && (_1735 <= cbSceneParam._m0[64u].z)) && (_1736 <= cbSceneParam._m0[64u].w))
        {
            float _1875 = fma(_1530, cbSceneParam._m0[62u].w, fma(_1526, cbSceneParam._m0[62u].z, fma(_1522, cbSceneParam._m0[62u].y, _1518 * cbSceneParam._m0[62u].x))) / _1734;
            float _1879 = isnan(cbSceneParam._m0[41u].w) ? _1875 : (isnan(_1875) ? cbSceneParam._m0[41u].w : max(_1875, cbSceneParam._m0[41u].w));
            float _1922 = (cbSceneParam._m0[33u].x - sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533))) * cbSceneParam._m0[33u].y;
            float _3927 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
            float _1929 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1735, cbSceneParam._m0[33u].w + _1736), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1735, _1736 - cbSceneParam._m0[33u].z), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1735 - cbSceneParam._m0[33u].z, _1736 - cbSceneParam._m0[33u].w), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1735 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1736), _1879), 0.0)).x), vec4(0.25)));
            float _1933 = 1.0 - (_1929 * cbSceneParam._m0[34u].x);
            float _1934 = 1.0 - (_1929 * cbSceneParam._m0[34u].y);
            float _1935 = 1.0 - (_1929 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1935) ? _1682 : (isnan(_1682) ? _1935 : min(_1682, _1935));
            frontier_phi_34_33_ladder_1 = isnan(_1934) ? _1681 : (isnan(_1681) ? _1934 : min(_1681, _1934));
            frontier_phi_34_33_ladder_2 = isnan(_1933) ? _1680 : (isnan(_1680) ? _1933 : min(_1680, _1933));
        }
        else
        {
            frontier_phi_34_33_ladder = _1682;
            frontier_phi_34_33_ladder_1 = _1681;
            frontier_phi_34_33_ladder_2 = _1680;
        }
        _1746 = frontier_phi_34_33_ladder_2;
        _1748 = frontier_phi_34_33_ladder_1;
        _1750 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1746 = _1680;
        _1748 = _1681;
        _1750 = _1682;
    }
    uvec4 _1755 = floatBitsToUint(cbInstanceData._m0[_407 + 5u]);
    uint _1757 = _1755.x * 14u;
    uint _1758 = _1757 + 13u;
    float _1765 = _448 + (-1.0);
    float _1770 = (cbLight._m0[_1758].x * _1765) + 1.0;
    float _1771 = (cbLight._m0[_1758].y * _1765) + 1.0;
    float _1772 = (cbLight._m0[_1758].z * _1765) + 1.0;
    float _1773 = (cbLight._m0[_1758].w * _1765) + 1.0;
    uint _1774 = _1757 + 5u;
    float _1780 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
    uint _1784 = _1757 + 4u;
    float _1794 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
    uint _1798 = _1757 | 1u;
    float _1809 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_277, _278, _279));
    float _1812 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_277, _278, _279));
    float _3963 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _3974 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1817 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 0.3183098733425140380859375;
    float _1819 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 0.3183098733425140380859375;
    float _1826 = ((cbLight._m0[_1774].x * _1780) * _1819) + (((cbLight._m0[_1784].x * _1746) * _1794) * _1817);
    float _1827 = ((_1780 * cbLight._m0[_1774].y) * _1819) + (((cbLight._m0[_1784].y * _1748) * _1794) * _1817);
    float _1828 = ((_1780 * cbLight._m0[_1774].z) * _1819) + (((cbLight._m0[_1784].z * _1750) * _1794) * _1817);
    uvec4 _1832 = floatBitsToUint(cbLight._m0[_1757 + 12u]);
    bool _1834 = _1832.x == 0u;
    float _1936;
    float _1938;
    float _1940;
    if (_1834)
    {
        _1936 = _1826;
        _1938 = _1827;
        _1940 = _1828;
    }
    else
    {
        uint _1944 = _1757 + 6u;
        float _1960 = (dot(vec3(cbLight._m0[_1757 + 2u].xyz), vec3(_277, _278, _279)) * 0.5) + 0.5;
        float _1961 = _1960 * _1960;
        float _3985 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1962 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1963 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
        _1936 = (((cbLight._m0[_1944].x * 0.3183098733425140380859375) * _1962) * _1963) + _1826;
        _1938 = (((cbLight._m0[_1944].y * 0.3183098733425140380859375) * _1962) * _1963) + _1827;
        _1940 = (((cbLight._m0[_1944].z * 0.3183098733425140380859375) * _1962) * _1963) + _1828;
    }
    bool _1943 = _1832.y == 0u;
    float _1998;
    float _2000;
    float _2002;
    if (_1943)
    {
        _1998 = _1936;
        _2000 = _1938;
        _2002 = _1940;
    }
    else
    {
        uint _2171 = _1757 + 7u;
        float _2187 = (dot(vec3(cbLight._m0[_1757 + 3u].xyz), vec3(_277, _278, _279)) * 0.5) + 0.5;
        float _2188 = _2187 * _2187;
        float _4001 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2189 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _2190 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
        _1998 = (((cbLight._m0[_2171].x * 0.3183098733425140380859375) * _2189) * _2190) + _1936;
        _2000 = (((cbLight._m0[_2171].y * 0.3183098733425140380859375) * _2189) * _2190) + _1938;
        _2002 = (((cbLight._m0[_2171].z * 0.3183098733425140380859375) * _2189) * _2190) + _1940;
    }
    uint _2005 = _1757 + 8u;
    float _2018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1757].w)) * _280) * 0.949999988079071044921875);
    float _2019 = _2018 * _2018;
    float _2020 = cbLight._m0[_1757].x + _358;
    float _2021 = cbLight._m0[_1757].y + _359;
    float _2022 = cbLight._m0[_1757].z + _360;
    float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
    float _2027 = _2026 * _2020;
    float _2028 = _2026 * _2021;
    float _2029 = _2026 * _2022;
    float _2030 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1757].xyz));
    float _4017 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _4028 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _2034 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _2035 = dot(vec3(_277, _278, _279), vec3(_2027, _2028, _2029));
    float _4039 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _2039 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_2027, _2028, _2029));
    float _4050 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2043 = _2019 * _2019;
    float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
    float _2055 = exp2(log2(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * 5.0);
    float _2056 = 0.959999978542327880859375 - _430;
    float _2058 = 0.959999978542327880859375 - _431;
    float _2059 = 0.959999978542327880859375 - _432;
    float _2066 = 1.0 - _2019;
    float _2077 = (0.5 / (((_2034 * ((_2033 * _2066) + _2019)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2066) + _2019) * _2033))) * _2033;
    float _4061 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2079 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
    uint _2093 = _1757 + 9u;
    float _2104 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _280) * 0.949999988079071044921875);
    float _2105 = _2104 * _2104;
    float _2106 = cbLight._m0[_1798].x + _358;
    float _2107 = cbLight._m0[_1798].y + _359;
    float _2108 = cbLight._m0[_1798].z + _360;
    float _2112 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
    float _2113 = _2112 * _2106;
    float _2114 = _2112 * _2107;
    float _2115 = _2112 * _2108;
    float _2116 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1798].xyz));
    float _4072 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2119 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _2120 = dot(vec3(_277, _278, _279), vec3(_2113, _2114, _2115));
    float _4083 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _2124 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_2113, _2114, _2115));
    float _4094 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2128 = _2105 * _2105;
    float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
    float _2139 = exp2(log2(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * 5.0);
    float _2146 = 1.0 - _2105;
    float _2156 = (0.5 / (((_2034 * ((_2119 * _2146) + _2105)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2146) + _2105) * _2119))) * _2119;
    float _4105 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2158 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
    float _2168 = (((((_2139 * _2056) + _433) * cbLight._m0[_2093].x) * _2158) * _1780) + ((((cbLight._m0[_2005].x * _1746) * ((_2055 * _2056) + _433)) * _2079) * _1794);
    float _2169 = (((((_2139 * _2058) + _435) * cbLight._m0[_2093].y) * _2158) * _1780) + ((((cbLight._m0[_2005].y * _1748) * ((_2055 * _2058) + _435)) * _2079) * _1794);
    float _2170 = (((((_2139 * _2059) + _436) * cbLight._m0[_2093].z) * _2158) * _1780) + ((((cbLight._m0[_2005].z * _1750) * ((_2055 * _2059) + _436)) * _2079) * _1794);
    float _2226;
    float _2228;
    float _2230;
    if (_1834)
    {
        _2226 = _2168;
        _2228 = _2169;
        _2230 = _2170;
    }
    else
    {
        uint _2232 = _1757 + 2u;
        uint _2236 = _1757 + 10u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _280) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _358;
        float _2253 = cbLight._m0[_2232].y + _359;
        float _2254 = cbLight._m0[_2232].z + _360;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_2232].xyz));
        float _4116 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2266 = dot(vec3(_277, _278, _279), vec3(_2259, _2260, _2261));
        float _4127 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4138 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2285 = exp2(log2(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * 5.0);
        float _2292 = 1.0 - _2251;
        float _2302 = (0.5 / (((_2034 * ((_2265 * _2292) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2292) + _2251) * _2265))) * _2265;
        float _4149 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2304 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2305 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
        _2226 = (((((_2285 * _2056) + _433) * cbLight._m0[_2236].x) * _2304) * _2305) + _2168;
        _2228 = (((((_2285 * _2058) + _435) * cbLight._m0[_2236].y) * _2304) * _2305) + _2169;
        _2230 = (((((_2285 * _2059) + _436) * cbLight._m0[_2236].z) * _2304) * _2305) + _2170;
    }
    float _2336;
    float _2338;
    float _2340;
    if (_1943)
    {
        _2336 = _2226;
        _2338 = _2228;
        _2340 = _2230;
    }
    else
    {
        uint _2347 = _1757 + 3u;
        uint _2351 = _1757 + 11u;
        float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _280) * 0.949999988079071044921875);
        float _2366 = _2365 * _2365;
        float _2367 = cbLight._m0[_2347].x + _358;
        float _2368 = cbLight._m0[_2347].y + _359;
        float _2369 = cbLight._m0[_2347].z + _360;
        float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
        float _2374 = _2373 * _2367;
        float _2375 = _2373 * _2368;
        float _2376 = _2373 * _2369;
        float _2377 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_2347].xyz));
        float _4165 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2381 = dot(vec3(_277, _278, _279), vec3(_2374, _2375, _2376));
        float _4176 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2385 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2374, _2375, _2376));
        float _4187 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2389 = _2366 * _2366;
        float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
        float _2400 = exp2(log2(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * 5.0);
        float _2407 = 1.0 - _2366;
        float _2417 = (0.5 / (((_2034 * ((_2380 * _2407) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2407) + _2366) * _2380))) * _2380;
        float _4198 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2419 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
        float _2420 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
        _2336 = (((((_2400 * _2056) + _433) * cbLight._m0[_2351].x) * _2419) * _2420) + _2226;
        _2338 = (((((_2400 * _2058) + _435) * cbLight._m0[_2351].y) * _2419) * _2420) + _2228;
        _2340 = (((((_2400 * _2059) + _436) * cbLight._m0[_2351].z) * _2419) * _2420) + _2230;
    }
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    if (_1755.y == 0u)
    {
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.x;
        uint _2453 = uint((float(_2441.y) * floor(float(uint(cbSceneParam._m0[85u].y * _367) / _2442))) + floor(float(uint(cbSceneParam._m0[85u].x * _366) / _2442)));
        float _2463 = (log2(_1533 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2464 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        uint _2467 = uint(isnan(14.0) ? _2464 : (isnan(_2464) ? 14.0 : min(_2464, 14.0)));
        uvec4 _2472 = texelFetch(g_lightClusterGridBuffer, int(((_2467 << 2u) + (_2453 << 6u)) >> 2u));
        uint _2473 = _2472.x;
        uint _2474 = _2441.z;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((((1u << ((_2474 >> 4u) & 15u)) + 4294967295u) & _2473) == 0u) || ((_2474 & 240u) == 0u))
        {
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
        }
        else
        {
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2698 = 0.0;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            uint _2704 = 0u;
            uint _2713;
            bool _2714;
            for (;;)
            {
                _2713 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2704 << 2u)) >> 2u)).x;
                _2714 = _2713 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2714)
                {
                    frontier_phi_66_pred = _2703;
                    frontier_phi_66_pred_1 = _2702;
                    frontier_phi_66_pred_2 = _2701;
                    frontier_phi_66_pred_3 = _2700;
                    frontier_phi_66_pred_4 = _2699;
                    frontier_phi_66_pred_5 = _2698;
                }
                else
                {
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    uint _2828;
                    _2822 = _2698;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2713;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    for (;;)
                    {
                        uint _2832 = uint(findLSB(_2828)) + (_2704 << 5u);
                        uint _2829 = (_2828 + 4294967295u) & _2828;
                        uint _2834 = _2832 * 48u;
                        vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 3u)).x));
                        uint _2854 = (_2832 * 48u) + 4u;
                        vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 3u)).x));
                        uint _2873 = (_2832 * 48u) + 8u;
                        vec3 _2884 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x));
                        float _2888 = _2848.x - _1531;
                        float _2889 = _2848.y - _1532;
                        float _2890 = _2848.z - _1533;
                        float _2891 = dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890));
                        float _2894 = inversesqrt(_2891);
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2898 = dot(vec3(_388, _391, _394), vec3(_2895, _2896, _2897));
                        float _2903 = 1.0 - (_2891 * _2848.w);
                        float _4224 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2904 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2905 = sqrt(_2891) * _2867.w;
                        float _2908 = 1.39999997615814208984375 / (_2905 + 1.39999997615814208984375);
                        float _2909 = _2908 * _2908;
                        float _2912 = ((1.0 - _2909) * _2898) + _2909;
                        float _2915 = _2905 * _2905;
                        float _2919 = ((isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))) * _2904) / ((_2915 * 0.699999988079071044921875) + 1.0);
                        float _2923 = (-0.0) - _1531;
                        float _2924 = (-0.0) - _1532;
                        float _2925 = (-0.0) - _1533;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2939 = exp2(log2(1.0 / ((_2915 * 3.5) + 5.0)) * 0.25);
                        float _2940 = 1.0 - _464;
                        float _2947 = sqrt(1.0 - ((1.0 - (_2940 * _2940)) * (1.0 - (_2939 * _2939))));
                        float _2948 = _2947 * _2947;
                        float _2949 = _2948 * _2948;
                        float _2950 = _2930 + _2895;
                        float _2951 = _2931 + _2896;
                        float _2952 = _2932 + _2897;
                        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                        float _2960 = dot(vec3(_388, _391, _394), vec3(_2930, _2931, _2932));
                        float _4240 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2963 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2964 = dot(vec3(_388, _391, _394), vec3(_2956 * _2950, _2956 * _2951, _2956 * _2952));
                        float _4251 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2967 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2971 = ((_2967 * _2967) * (_2949 + (-1.0))) + 1.0;
                        float _2972 = _2908 * _2948;
                        float _2973 = _2972 * _2972;
                        float _2976 = ((1.0 - _2973) * _2898) + _2973;
                        float _4262 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2977 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                        float _2978 = 1.0 - _2948;
                        float _2988 = (0.5 / (((_2977 * ((_2963 * _2978) + _2948)) + 9.9999999392252902907785028219223e-09) + (((_2977 * _2978) + _2948) * _2963))) * _2977;
                        float _4273 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2999 = (((_2949 * 3.1415927410125732421875) * (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) / ((_2971 * _2971) * ((_2915 * 2.1991131305694580078125) + 3.141590118408203125))) * _2904;
                        _2757 = (_2919 * _2867.x) + _2825;
                        _2758 = (_2919 * _2867.y) + _2826;
                        _2759 = (_2919 * _2867.z) + _2827;
                        _2754 = (_2999 * _2884.x) + _2822;
                        _2755 = (_2999 * _2884.y) + _2823;
                        _2756 = (_2999 * _2884.z) + _2824;
                        if (_2829 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2822 = _2754;
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2829;
                        }
                    }
                    frontier_phi_66_pred = _2759;
                    frontier_phi_66_pred_1 = _2758;
                    frontier_phi_66_pred_2 = _2757;
                    frontier_phi_66_pred_3 = _2756;
                    frontier_phi_66_pred_4 = _2755;
                    frontier_phi_66_pred_5 = _2754;
                }
                _2564 = frontier_phi_66_pred;
                _2562 = frontier_phi_66_pred_1;
                _2560 = frontier_phi_66_pred_2;
                _2558 = frontier_phi_66_pred_3;
                _2556 = frontier_phi_66_pred_4;
                _2554 = frontier_phi_66_pred_5;
                uint _2705 = _2704 + 1u;
                if (_2705 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2698 = _2554;
                    _2699 = _2556;
                    _2700 = _2558;
                    _2701 = _2560;
                    _2702 = _2562;
                    _2703 = _2564;
                    _2704 = _2705;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
        }
        uvec4 _2567 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2568 = _2567.z;
        uint _2570 = (_2568 >> 8u) & 15u;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((4294967295u << _2570) & _2473) == 0u)
        {
            _2666 = _2553;
            _2668 = _2555;
            _2670 = _2557;
            _2672 = _2559;
            _2674 = _2561;
            _2676 = _2563;
        }
        else
        {
            float _2691 = inversesqrt(dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533)));
            float _2692 = _2691 * _1531;
            float _2693 = _2691 * _1532;
            float _2694 = _2691 * _1533;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2570 < ((_2568 >> 12u) & 15u))
            {
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2805 = _2553;
                float _2806 = _2555;
                float _2807 = _2557;
                float _2808 = _2559;
                float _2809 = _2561;
                float _2810 = _2563;
                uint _2811 = _2570;
                uint _2820;
                bool _2821;
                for (;;)
                {
                    _2820 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                    _2821 = _2820 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2821)
                    {
                        frontier_phi_72_pred = _2810;
                        frontier_phi_72_pred_1 = _2809;
                        frontier_phi_72_pred_2 = _2808;
                        frontier_phi_72_pred_3 = _2807;
                        frontier_phi_72_pred_4 = _2806;
                        frontier_phi_72_pred_5 = _2805;
                    }
                    else
                    {
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3017 = _2805;
                        float _3018 = _2806;
                        float _3019 = _2807;
                        float _3020 = _2808;
                        float _3021 = _2809;
                        float _3022 = _2810;
                        uint _3023 = _2820;
                        uint _3024;
                        vec4 _3049;
                        float _3050;
                        vec4 _3065;
                        vec3 _3077;
                        vec4 _3093;
                        vec4 _3109;
                        float _3156;
                        bool _3157;
                        for (;;)
                        {
                            uint _3034 = ((_2811 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3023));
                            _3024 = (_3023 + 4294967295u) & _3023;
                            uint _3036 = _3034 * 40u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            _3050 = _3049.w;
                            uint _3052 = (_3034 * 40u) + 4u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3067 = (_3034 * 40u) + 8u;
                            _3077 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x));
                            uint _3080 = (_3034 * 40u) + 16u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3096 = (_3034 * 40u) + 20u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3112 = (_3034 * 40u) + 24u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3131 = (_3034 * 40u) + 28u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            _3156 = fma(_1533, _3144.z, fma(_1532, _3144.y, _3144.x * _1531)) + _3144.w;
                            _3157 = !((fma(_1533, _3125.z, fma(_1532, _3125.y, _3125.x * _1531)) + _3125.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3157)
                            {
                                float _3184 = _3049.x - _1531;
                                float _3185 = _3049.y - _1532;
                                float _3186 = _3049.z - _1533;
                                float _3187 = dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186));
                                float _3190 = inversesqrt(_3187);
                                float _3191 = _3190 * _3184;
                                float _3192 = _3190 * _3185;
                                float _3193 = _3190 * _3186;
                                float _3197 = 1.0 - (_3187 / (_3050 * _3050));
                                float _4284 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3198 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3202 = sqrt(_3187) * _3065.w;
                                float _3204 = 1.39999997615814208984375 / (_3202 + 1.39999997615814208984375);
                                float _3205 = _3204 * _3204;
                                float _3208 = ((1.0 - _3205) * dot(vec3(_3191, _3192, _3193), vec3(_388, _391, _394))) + _3205;
                                float _3211 = _3202 * _3202;
                                float _3215 = (fma(_1533, _3093.z, fma(_1532, _3093.y, _3093.x * _1531)) + _3093.w) / _3156;
                                float _3216 = (fma(_1533, _3109.z, fma(_1532, _3109.y, _3109.x * _1531)) + _3109.w) / _3156;
                                float _3220 = 1.0 - dot(vec2(_3215, _3216), vec2(_3215, _3216));
                                float _4300 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3222 = _3221 * (((isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))) * _3198) / ((_3211 * 0.699999988079071044921875) + 1.0));
                                float _3234 = exp2(log2(1.0 / ((_3211 * 3.5) + 5.0)) * 0.25);
                                float _3235 = 1.0 - _464;
                                float _3242 = sqrt(1.0 - ((1.0 - (_3235 * _3235)) * (1.0 - (_3234 * _3234))));
                                float _3243 = _3242 * _3242;
                                float _3244 = _3243 * _3243;
                                float _3245 = _3191 - _2692;
                                float _3246 = _3192 - _2693;
                                float _3247 = _3193 - _2694;
                                float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                                float _3255 = dot(vec3(_388, _391, _394), vec3((-0.0) - _2692, (-0.0) - _2693, (-0.0) - _2694));
                                float _4311 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3258 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3259 = dot(vec3(_388, _391, _394), vec3(_3251 * _3245, _3251 * _3246, _3251 * _3247));
                                float _4322 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3262 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3266 = ((_3262 * _3262) * (_3244 + (-1.0))) + 1.0;
                                float _3267 = _3204 * _3243;
                                float _3268 = _3267 * _3267;
                                float _3274 = ((1.0 - _3268) * dot(vec3(_388, _391, _394), vec3(_3191, _3192, _3193))) + _3268;
                                float _4333 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3276 = 1.0 - _3243;
                                float _3286 = (0.5 / (((_3275 * ((_3258 * _3276) + _3243)) + 9.9999999392252902907785028219223e-09) + (((_3275 * _3276) + _3243) * _3258))) * _3275;
                                float _4344 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3296 = (_3221 * _3198) * (((_3244 * 3.1415927410125732421875) * (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) / ((_3266 * _3266) * ((_3211 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3222 * _3065.y;
                                frontier_phi_78_pred_1 = _3222 * _3065.x;
                                frontier_phi_78_pred_2 = _3296 * _3077.z;
                                frontier_phi_78_pred_3 = _3296 * _3077.y;
                                frontier_phi_78_pred_4 = _3296 * _3077.x;
                                frontier_phi_78_pred_5 = _3222 * _3065.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3304 = frontier_phi_78_pred;
                            _3303 = frontier_phi_78_pred_1;
                            _3302 = frontier_phi_78_pred_2;
                            _3301 = frontier_phi_78_pred_3;
                            _3300 = frontier_phi_78_pred_4;
                            _3305 = frontier_phi_78_pred_5;
                            _3007 = _3303 + _3020;
                            _3008 = _3304 + _3021;
                            _3009 = _3305 + _3022;
                            _3004 = _3300 + _3017;
                            _3005 = _3301 + _3018;
                            _3006 = _3302 + _3019;
                            if (_3024 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3024;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3009;
                        frontier_phi_72_pred_1 = _3008;
                        frontier_phi_72_pred_2 = _3007;
                        frontier_phi_72_pred_3 = _3006;
                        frontier_phi_72_pred_4 = _3005;
                        frontier_phi_72_pred_5 = _3004;
                    }
                    _2677 = frontier_phi_72_pred;
                    _2675 = frontier_phi_72_pred_1;
                    _2673 = frontier_phi_72_pred_2;
                    _2671 = frontier_phi_72_pred_3;
                    _2669 = frontier_phi_72_pred_4;
                    _2667 = frontier_phi_72_pred_5;
                    uint _2812 = _2811 + 1u;
                    if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2805 = _2667;
                        _2806 = _2669;
                        _2807 = _2671;
                        _2808 = _2673;
                        _2809 = _2675;
                        _2810 = _2677;
                        _2811 = _2812;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2677;
                frontier_phi_60_61_ladder_1 = _2675;
                frontier_phi_60_61_ladder_2 = _2671;
                frontier_phi_60_61_ladder_3 = _2669;
                frontier_phi_60_61_ladder_4 = _2667;
                frontier_phi_60_61_ladder_5 = _2673;
            }
            else
            {
                frontier_phi_60_61_ladder = _2563;
                frontier_phi_60_61_ladder_1 = _2561;
                frontier_phi_60_61_ladder_2 = _2557;
                frontier_phi_60_61_ladder_3 = _2555;
                frontier_phi_60_61_ladder_4 = _2553;
                frontier_phi_60_61_ladder_5 = _2559;
            }
            _2666 = frontier_phi_60_61_ladder_4;
            _2668 = frontier_phi_60_61_ladder_3;
            _2670 = frontier_phi_60_61_ladder_2;
            _2672 = frontier_phi_60_61_ladder_5;
            _2674 = frontier_phi_60_61_ladder_1;
            _2676 = frontier_phi_60_61_ladder;
        }
        float _2681 = isnan(1.0) ? _448 : (isnan(_448) ? 1.0 : min(_448, 1.0));
        _2486 = (_2681 * _2672) + _1998;
        _2488 = (_2681 * _2674) + _2000;
        _2490 = (_2681 * _2676) + _2002;
        _2492 = ((_2666 * _433) * _2681) + _2336;
        _2494 = ((_2668 * _435) * _2681) + _2338;
        _2496 = ((_2670 * _436) * _2681) + _2340;
    }
    else
    {
        _2486 = _1998;
        _2488 = _2000;
        _2490 = _2002;
        _2492 = _2336;
        _2494 = _2338;
        _2496 = _2340;
    }
    float _4360 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _4371 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _4382 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    uint _2516 = _407 + 6u;
    float _2524 = _366 / cbSceneParam._m0[86u].x;
    float _2525 = _367 / cbSceneParam._m0[86u].y;
    vec4 _2539 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, (log2((isnan(cbSceneParam._m0[77u].w) ? _300 : (isnan(_300) ? cbSceneParam._m0[77u].w : min(_300, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2541 = _2539.x;
    float _2542 = _2539.y;
    float _2543 = _2539.z;
    float _2544 = _2539.w;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_300 > cbSceneParam._m0[78u].w)
    {
        float _2578 = isnan(_300) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _300 : min(cbSceneParam._m0[80u].w, _300));
        float _2579 = _2578 / _300;
        float _2590 = _2579 * _351;
        float _2591 = _352 * _2579;
        float _2592 = (-0.0) - _2591;
        float _2594 = _2579 * _353;
        float _2596 = (cbSceneParam._m0[77u].w * _2592) / _2578;
        float _2597 = _2596 + cbSceneParam._m0[79u].w;
        float _2598 = cbSceneParam._m0[79u].w - _2591;
        float _2604 = sqrt(((_2590 * _2590) + (_2591 * _2591)) + (_2594 * _2594));
        float _2607 = (1.0 - (cbSceneParam._m0[77u].w / _2578)) * _2604;
        float _2612 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2614 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2767;
        if (abs((_2592 - _2596) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2767 = ((((_2597 > 0.0) ? exp2(_2612 * _2597) : (2.0 - exp2(_2614 * _2597))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2607;
        }
        else
        {
            float _2727 = 1.0 / cbSceneParam._m0[80u].x;
            float _2728 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : max(_2597, _2598));
            float _2729 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : min(_2597, _2598));
            float _2738 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : min(_2728, 0.0));
            float _2739 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : min(_2729, 0.0));
            _2767 = ((abs(_2604 / _2592) * cbSceneParam._m0[80u].y) * ((((_2738 - _2739) * 2.0) - ((exp2(_2612 * (isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0)))) - exp2(_2612 * (isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0))))) * _2727)) - ((exp2(_2614 * _2738) - exp2(_2614 * _2739)) * _2727))) + (_2607 * cbSceneParam._m0[80u].z);
        }
        vec4 _2769 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, 1.0), 0.0);
        float _2778 = exp2((_2767 * (-1.44269502162933349609375)) * (1.0 - _2769.w));
        float _2779 = log2(_2778);
        float _2795 = log2(_2544);
        _2616 = (exp2(_2795 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].x)) * _2769.x) / cbSceneParam._m0[78u].x)) + _2541;
        _2618 = (exp2(_2795 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].y)) * _2769.y) / cbSceneParam._m0[78u].y)) + _2542;
        _2620 = (exp2(_2795 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].z)) * _2769.z) / cbSceneParam._m0[78u].z)) + _2543;
        _2622 = _2778 * _2544;
    }
    else
    {
        _2616 = _2541;
        _2618 = _2542;
        _2620 = _2543;
        _2622 = _2544;
    }
    float _2634 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2635 = _2634 == 3.0;
    float _2636 = log2(_2622);
    float _2643 = exp2(_2636 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2486 + ((isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0))) * _448))) + ((_2492 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _1258)) * cbPerFrame._m0[3u].x));
    float _2644 = exp2(_2636 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2488 + ((isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))) * _448))) + ((_2494 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _1258)) * cbPerFrame._m0[3u].x));
    float _2645 = exp2(_2636 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2490 + ((isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))) * _448))) + ((_2496 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _1258)) * cbPerFrame._m0[3u].x));
    float _2654 = (_2634 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2654 * (_2635 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2616)));
    SV_Target.y = _2654 * (_2635 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2618)));
    SV_Target.z = _2654 * (_2635 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2620)));
    SV_Target.w = cbInstanceData._m0[_2516].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2516].w;
}


