#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _832;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _179 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _180 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _181 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = ((cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.x;
    float _221 = ((cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.y;
    vec4 _234 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_220 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_221 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _234.x * cbMtdParam._m0[9u].x;
    float _241 = _234.y * cbMtdParam._m0[9u].y;
    float _242 = _234.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _220) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _221) + cbTextureTilingScale._m0[1u].w));
    float _259 = _255.z;
    float _263 = (_255.x * 2.0) + (-1.0);
    float _265 = (_255.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3168 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0))));
    float _275 = fma(_272, _193 * NORMAL.x, fma(_265, _200 * TANGENT.x, (_186 * _179) * _263));
    float _278 = fma(_272, _193 * NORMAL.y, fma(_265, _200 * TANGENT.y, (_186 * _180) * _263));
    float _281 = fma(_272, _193 * NORMAL.z, fma(_265, _200 * TANGENT.z, (_186 * _181) * _263));
    float _285 = inversesqrt(dot(vec3(_275, _278, _281), vec3(_275, _278, _281)));
    float _286 = _285 * _275;
    float _287 = _285 * _278;
    float _288 = _285 * _281;
    float _3179 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _289 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
    float _3190 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3201 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3212 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3223 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _293 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
    float _309 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _360 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _350);
    float _361 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _350);
    float _362 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _350);
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _360 * _366;
    float _368 = _361 * _366;
    float _369 = _362 * _366;
    float _375 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _376 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _397 = fma(_288, cbSceneParam._m0[5u].z, fma(_287, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _286));
    float _400 = fma(_288, cbSceneParam._m0[6u].z, fma(_287, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _286));
    float _403 = fma(_288, cbSceneParam._m0[7u].z, fma(_287, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _286));
    uint _416 = uint(roundEven(NORMAL.w)) * 13u;
    uint _419 = (_416 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _425 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0)))) * cbInstanceData._m0[_419].x;
    float _426 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0)))) * cbInstanceData._m0[_419].y;
    float _427 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0)))) * cbInstanceData._m0[_419].z;
    float _3234 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
    float _3245 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
    float _3256 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
    float _431 = 1.0 - _293;
    float _432 = _428 * _431;
    float _433 = _429 * _431;
    float _434 = _430 * _431;
    float _439 = (_428 + (-0.039999999105930328369140625)) * _293;
    float _440 = (_429 + (-0.039999999105930328369140625)) * _293;
    float _441 = (_430 + (-0.039999999105930328369140625)) * _293;
    float _442 = _439 + 0.039999999105930328369140625;
    float _444 = _440 + 0.039999999105930328369140625;
    float _445 = _441 + 0.039999999105930328369140625;
    vec4 _454 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _375, cbSceneParam._m0[86u].y * _376));
    float _457 = _454.x * TEXCOORD.z;
    float _458 = dot(vec3(_286, _287, _288), vec3(_367, _368, _369));
    float _461 = _458 * 2.0;
    float _465 = (_461 * _286) - _367;
    float _466 = (_461 * _287) - _368;
    float _467 = (_461 * _288) - _369;
    float _471 = abs(dot(vec3(_367, _368, _369), vec3(_286, _287, _288)));
    float _3267 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _473 = sqrt(_289);
    float _486 = exp2((_473 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_473 * 3.0));
    float _492 = (1.0 - _486) * ((_473 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _493 = _486 * _473;
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _831;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _556 = fma(_529, cbModelParam._m0[26u].z, fma(_525, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _521));
        float _560 = fma(_529, cbModelParam._m0[27u].z, fma(_525, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _521));
        float _564 = fma(_529, cbModelParam._m0[28u].z, fma(_525, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _521));
        float _589 = _521 + _286;
        float _590 = _525 + _287;
        float _591 = _529 + _288;
        float _601 = fma(_591, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _589)) - _556;
        float _602 = fma(_591, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _589)) - _560;
        float _603 = fma(_591, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _589)) - _564;
        float _607 = inversesqrt(dot(vec3(_601, _602, _603), vec3(_601, _602, _603)));
        float _620 = ((_607 * _601) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_556 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _621 = ((_607 * _602) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_560 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _622 = ((_607 * _603) / cbModelParam._m0[34u].z) + ((((((_564 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _632 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        float _659 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_625.x + (-0.5));
        float _661 = _659 * (_625.y + (-0.5));
        float _662 = _659 * (_625.z + (-0.5));
        float _669 = exp2((_632.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_632.x + (-0.5));
        float _671 = _669 * (_632.y + (-0.5));
        float _672 = _669 * (_632.z + (-0.5));
        float _679 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_639.x + (-0.5));
        float _681 = _679 * (_639.y + (-0.5));
        float _682 = _679 * (_639.z + (-0.5));
        float _689 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_646.x + (-0.5));
        float _691 = _689 * (_646.y + (-0.5));
        float _692 = _689 * (_646.z + (-0.5));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = _660 * 0.5;
        float _697 = _670 * 0.5;
        float _698 = _680 * 0.5;
        float _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
        float _704 = (_699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_699);
        float _713 = (dot(vec3(_286, _287, _288), vec3(_704 * _696, _704 * _697, _704 * _698)) + 1.0) * 0.5;
        float _3293 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _723 = sqrt(((_697 * _697) + (_696 * _696)) + (_698 * _698)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _3304 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _725 = _724 * 2.0;
        float _729 = (1.0 - _724) / (_724 + 1.0);
        float _3315 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
        float _739 = ((((1.0 - _730) * (_725 + 2.0)) * exp2(log2(isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))) * (_725 + 1.0))) + _730) * _693;
        float _740 = _661 * 0.5;
        float _741 = _671 * 0.5;
        float _742 = _681 * 0.5;
        float _743 = dot(vec3(_740, _741, _742), vec3(_740, _741, _742));
        float _748 = (_743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_743);
        float _756 = (dot(vec3(_286, _287, _288), vec3(_748 * _740, _748 * _741, _748 * _742)) + 1.0) * 0.5;
        float _3326 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _765 = sqrt(((_741 * _741) + (_740 * _740)) + (_742 * _742)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3337 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _767 = _766 * 2.0;
        float _771 = (1.0 - _766) / (_766 + 1.0);
        float _3348 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _781 = ((((1.0 - _772) * (_767 + 2.0)) * exp2(log2(isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))) * (_767 + 1.0))) + _772) * _694;
        float _782 = _662 * 0.5;
        float _783 = _672 * 0.5;
        float _784 = _682 * 0.5;
        float _785 = dot(vec3(_782, _783, _784), vec3(_782, _783, _784));
        float _790 = (_785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_785);
        float _798 = (dot(vec3(_286, _287, _288), vec3(_790 * _782, _790 * _783, _790 * _784)) + 1.0) * 0.5;
        float _3359 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _807 = sqrt(((_783 * _783) + (_782 * _782)) + (_784 * _784)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3370 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _3381 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_809 + 1.0))) + _814) * _695;
        _831 = _662;
        _833 = _661;
        _834 = _660;
        _835 = _672;
        _836 = _671;
        _837 = _670;
        _838 = _682;
        _839 = _681;
        _840 = _680;
        _841 = _695;
        _842 = _694;
        _843 = _693;
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0)));
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0)));
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
    }
    else
    {
        _831 = _832;
        _833 = _832;
        _834 = _832;
        _835 = _832;
        _836 = _832;
        _837 = _832;
        _838 = _832;
        _839 = _832;
        _840 = _832;
        _841 = _832;
        _842 = _832;
        _843 = _832;
        _844 = 0.0;
        _845 = 0.0;
        _846 = 0.0;
    }
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _872 = fma(_529, cbModelParam._m0[30u].z, fma(_525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _521));
        float _876 = fma(_529, cbModelParam._m0[31u].z, fma(_525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _521));
        float _880 = fma(_529, cbModelParam._m0[32u].z, fma(_525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _521));
        float _903 = _521 + _286;
        float _904 = _525 + _287;
        float _905 = _529 + _288;
        float _915 = fma(_905, cbModelParam._m0[30u].z, fma(_904, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _903)) - _872;
        float _916 = fma(_905, cbModelParam._m0[31u].z, fma(_904, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _903)) - _876;
        float _917 = fma(_905, cbModelParam._m0[32u].z, fma(_904, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _903)) - _880;
        float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
        float _934 = ((_921 * _915) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_872 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_921 * _916) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_876 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_921 * _917) / cbModelParam._m0[35u].z) + ((((((_880 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        float _971 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_938.x + (-0.5));
        float _973 = _971 * (_938.y + (-0.5));
        float _974 = _971 * (_938.z + (-0.5));
        float _981 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_945.x + (-0.5));
        float _983 = _981 * (_945.y + (-0.5));
        float _984 = _981 * (_945.z + (-0.5));
        float _991 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_952.x + (-0.5));
        float _993 = _991 * (_952.y + (-0.5));
        float _994 = _991 * (_952.z + (-0.5));
        float _1001 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_959.x + (-0.5));
        float _1003 = _1001 * (_959.y + (-0.5));
        float _1004 = _1001 * (_959.z + (-0.5));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = _972 * 0.5;
        float _1009 = _982 * 0.5;
        float _1010 = _992 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_286, _287, _288), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3444 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_1035 + 1.0))) + _1040) * _1005;
        float _1050 = _973 * 0.5;
        float _1051 = _983 * 0.5;
        float _1052 = _993 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_286, _287, _288), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3477 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_1077 + 1.0))) + _1082) * _1006;
        float _1092 = _974 * 0.5;
        float _1093 = _984 * 0.5;
        float _1094 = _994 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_286, _287, _288), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3510 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_1119 + 1.0))) + _1124) * _1007;
        _1141 = _974;
        _1142 = _973;
        _1143 = _972;
        _1144 = _984;
        _1145 = _983;
        _1146 = _982;
        _1147 = _994;
        _1148 = _993;
        _1149 = _992;
        _1150 = _1007;
        _1151 = _1006;
        _1152 = _1005;
        _1153 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1154 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
    }
    else
    {
        _1141 = _832;
        _1142 = _832;
        _1143 = _832;
        _1144 = _832;
        _1145 = _832;
        _1146 = _832;
        _1147 = _832;
        _1148 = _832;
        _1149 = _832;
        _1150 = _832;
        _1151 = _832;
        _1152 = _832;
        _1153 = 0.0;
        _1154 = 0.0;
        _1155 = 0.0;
    }
    float _1165 = (cbModelParam._m0[1u].x * (_1153 - _844)) + _844;
    float _1166 = (cbModelParam._m0[1u].x * (_1154 - _845)) + _845;
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1188 = fma(_1167, cbSceneParam._m0[89u].z, fma(_1166, cbSceneParam._m0[89u].y, _1165 * cbSceneParam._m0[89u].x));
    float _1191 = fma(_1167, cbSceneParam._m0[90u].z, fma(_1166, cbSceneParam._m0[90u].y, _1165 * cbSceneParam._m0[90u].x));
    float _1194 = fma(_1167, cbSceneParam._m0[91u].z, fma(_1166, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1165));
    float _1209 = _465 * 0.5;
    float _1210 = _466 * 0.5;
    float _1211 = _467 * 0.5;
    float _1212 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1215 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1142, _1145, _1148, _1151));
    float _1218 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1141, _1144, _1147, _1150));
    float _1252;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1225 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_831, _835, _838, _841));
        float _1229 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_833, _836, _839, _842));
        float _1233 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_834, _837, _840, _843));
        float _1240 = dot(vec4(cbModelParam._m0[39u]), vec4(_1209, _1210, _1211, 1.0));
        _1252 = dot(vec3(isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1240) ? 0.0 : (isnan(0.0) ? _1240 : max(0.0, _1240))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1252 = 1.0;
    }
    float _1263;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1254 = dot(vec4(cbModelParam._m0[40u]), vec4(_1209, _1210, _1211, 1.0));
        _1263 = dot(vec3(isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)), isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1263 = 1.0;
    }
    float _1267 = (_1263 * cbModelParam._m0[1u].x) + (_1252 * (1.0 - cbModelParam._m0[1u].x));
    float _1277 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _289);
    float _1278 = isnan(_1277) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1277 : min(cbModelParam._m0[25u].z, _1277));
    float _1360;
    float _1362;
    float _1364;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1327 = fma(_529, cbModelParam._m0[13u].z, fma(_525, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _521)) + cbModelParam._m0[13u].w;
        float _1331 = fma(_529, cbModelParam._m0[14u].z, fma(_525, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _521)) + cbModelParam._m0[14u].w;
        float _1335 = fma(_529, cbModelParam._m0[15u].z, fma(_525, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _521)) + cbModelParam._m0[15u].w;
        float _1338 = fma(_467, cbModelParam._m0[13u].z, fma(_466, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _465));
        float _1341 = fma(_467, cbModelParam._m0[14u].z, fma(_466, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _465));
        float _1344 = fma(_467, cbModelParam._m0[15u].z, fma(_466, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _465));
        float _1372;
        if (_1338 > 0.0)
        {
            _1372 = abs((1.0 - _1327) / _1338);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1327 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1372 = frontier_phi_14_12_ladder;
        }
        float _1579;
        if (_1341 > 0.0)
        {
            _1579 = abs((1.0 - _1331) / _1341);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1331 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1579 = frontier_phi_23_19_ladder;
        }
        float _1833;
        if (_1344 > 0.0)
        {
            _1833 = abs((1.0 - _1335) / _1344);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1335 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1833 = frontier_phi_35_30_ladder;
        }
        float _1835 = isnan(_1579) ? _1372 : (isnan(_1372) ? _1579 : min(_1372, _1579));
        float _1836 = isnan(_1833) ? _1835 : (isnan(_1835) ? _1833 : min(_1835, _1833));
        float _1840 = (_1836 * _1338) + _1327;
        float _1841 = (_1836 * _1341) + _1331;
        float _1842 = (_1836 * _1344) + _1335;
        float _1843 = _1836 * 9.9999997473787516355514526367188e-05;
        float _1845 = (-1.0) - _1843;
        float _1847 = _1843 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1842 > _1847) || ((_1842 < _1845) || ((_1841 > _1847) || ((_1841 < _1845) || ((_1840 < _1845) || (_1840 > _1847))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1970 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1842, cbModelParam._m0[9u].z, fma(_1841, cbModelParam._m0[9u].y, _1840 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1842, cbModelParam._m0[10u].z, fma(_1841, cbModelParam._m0[10u].y, _1840 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1842, cbModelParam._m0[11u].z, fma(_1841, cbModelParam._m0[11u].y, _1840 * cbModelParam._m0[11u].x))), _1278);
            frontier_phi_13_35_ladder = _1970.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1970.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1970.x * cbModelParam._m0[1u].y;
        }
        _1360 = frontier_phi_13_35_ladder_2;
        _1362 = frontier_phi_13_35_ladder_1;
        _1364 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1348 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_465, _466, _467), _1278);
        _1360 = _1348.x * cbModelParam._m0[1u].y;
        _1362 = _1348.y * cbModelParam._m0[1u].y;
        _1364 = _1348.z * cbModelParam._m0[1u].y;
    }
    float _1368 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _289);
    float _1369 = isnan(_1368) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1368 : min(cbModelParam._m0[25u].w, _1368));
    float _1461;
    float _1463;
    float _1465;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1425 = fma(_529, cbModelParam._m0[21u].z, fma(_525, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _521)) + cbModelParam._m0[21u].w;
        float _1429 = fma(_529, cbModelParam._m0[22u].z, fma(_525, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _521)) + cbModelParam._m0[22u].w;
        float _1433 = fma(_529, cbModelParam._m0[23u].z, fma(_525, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _521)) + cbModelParam._m0[23u].w;
        float _1436 = fma(_467, cbModelParam._m0[21u].z, fma(_466, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _465));
        float _1439 = fma(_467, cbModelParam._m0[22u].z, fma(_466, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _465));
        float _1442 = fma(_467, cbModelParam._m0[23u].z, fma(_466, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _465));
        float _1584;
        if (_1436 > 0.0)
        {
            _1584 = abs((1.0 - _1425) / _1436);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1425 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1584 = frontier_phi_25_21_ladder;
        }
        float _1860;
        if (_1439 > 0.0)
        {
            _1860 = abs((1.0 - _1429) / _1439);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1429 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1860 = frontier_phi_37_32_ladder;
        }
        float _2073;
        if (_1442 > 0.0)
        {
            _2073 = abs((1.0 - _1433) / _1442);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1433 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2073 = frontier_phi_46_43_ladder;
        }
        float _2075 = isnan(_1860) ? _1584 : (isnan(_1584) ? _1860 : min(_1584, _1860));
        float _2076 = isnan(_2073) ? _2075 : (isnan(_2075) ? _2073 : min(_2075, _2073));
        float _2080 = (_2076 * _1436) + _1425;
        float _2081 = (_2076 * _1439) + _1429;
        float _2082 = (_2076 * _1442) + _1433;
        float _2083 = _2076 * 9.9999997473787516355514526367188e-05;
        float _2084 = (-1.0) - _2083;
        float _2086 = _2083 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2082 > _2086) || ((_2082 < _2084) || ((_2081 > _2086) || ((_2081 < _2084) || ((_2080 < _2084) || (_2080 > _2086))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2281 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2082, cbModelParam._m0[17u].z, fma(_2081, cbModelParam._m0[17u].y, _2080 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2082, cbModelParam._m0[18u].z, fma(_2081, cbModelParam._m0[18u].y, _2080 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2082, cbModelParam._m0[19u].z, fma(_2081, cbModelParam._m0[19u].y, _2080 * cbModelParam._m0[19u].x))), _1369);
            frontier_phi_22_46_ladder = _2281.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2281.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2281.x * cbModelParam._m0[1u].z;
        }
        _1461 = frontier_phi_22_46_ladder_2;
        _1463 = frontier_phi_22_46_ladder_1;
        _1465 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1445 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_465, _466, _467), _1369);
        _1461 = _1445.x * cbModelParam._m0[1u].z;
        _1463 = _1445.y * cbModelParam._m0[1u].z;
        _1465 = _1445.z * cbModelParam._m0[1u].z;
    }
    float _1478 = (((_492 * _442) + _493) * _457) * ((cbModelParam._m0[1u].w * (_1461 - _1360)) + _1360);
    float _1480 = (((_492 * _444) + _493) * _457) * ((cbModelParam._m0[1u].w * (_1463 - _1362)) + _1362);
    float _1482 = (((_492 * _445) + _493) * _457) * ((cbModelParam._m0[1u].w * (_1465 - _1364)) + _1364);
    float _1485 = fma(_1482, cbSceneParam._m0[89u].z, fma(_1480, cbSceneParam._m0[89u].y, _1478 * cbSceneParam._m0[89u].x));
    float _1488 = fma(_1482, cbSceneParam._m0[90u].z, fma(_1480, cbSceneParam._m0[90u].y, _1478 * cbSceneParam._m0[90u].x));
    float _1491 = fma(_1482, cbSceneParam._m0[91u].z, fma(_1480, cbSceneParam._m0[91u].y, _1478 * cbSceneParam._m0[91u].x));
    uvec4 _1501 = floatBitsToUint(cbInstanceData._m0[_416 + 5u]);
    uint _1503 = _1501.x * 14u;
    uint _1504 = _1503 + 13u;
    float _1511 = _457 + (-1.0);
    float _1516 = (cbLight._m0[_1504].x * _1511) + 1.0;
    float _1517 = (cbLight._m0[_1504].y * _1511) + 1.0;
    float _1518 = (cbLight._m0[_1504].z * _1511) + 1.0;
    float _1519 = (cbLight._m0[_1504].w * _1511) + 1.0;
    uint _1520 = _1503 + 5u;
    float _1526 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
    uint _1530 = _1503 + 4u;
    float _1537 = isnan(1.0) ? _1516 : (isnan(_1516) ? 1.0 : min(_1516, 1.0));
    uint _1541 = _1503 | 1u;
    float _1552 = dot(vec3(cbLight._m0[_1503].xyz), vec3(_286, _287, _288));
    float _1555 = dot(vec3(cbLight._m0[_1541].xyz), vec3(_286, _287, _288));
    float _3646 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
    float _3657 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
    float _1560 = (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * 0.3183098733425140380859375;
    float _1562 = (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * 0.3183098733425140380859375;
    float _1569 = ((cbLight._m0[_1520].x * _1526) * _1562) + ((cbLight._m0[_1530].x * _1537) * _1560);
    float _1570 = ((_1526 * cbLight._m0[_1520].y) * _1562) + ((_1537 * cbLight._m0[_1530].y) * _1560);
    float _1571 = ((_1526 * cbLight._m0[_1520].z) * _1562) + ((_1537 * cbLight._m0[_1530].z) * _1560);
    uvec4 _1576 = floatBitsToUint(cbLight._m0[_1503 + 12u]);
    bool _1578 = _1576.x == 0u;
    float _1589;
    float _1591;
    float _1593;
    if (_1578)
    {
        _1589 = _1569;
        _1591 = _1570;
        _1593 = _1571;
    }
    else
    {
        uint _1597 = _1503 + 6u;
        float _1613 = (dot(vec3(cbLight._m0[_1503 + 2u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1614 = _1613 * _1613;
        float _3668 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1616 = isnan(1.0) ? _1518 : (isnan(_1518) ? 1.0 : min(_1518, 1.0));
        _1589 = (((cbLight._m0[_1597].x * 0.3183098733425140380859375) * _1615) * _1616) + _1569;
        _1591 = (((cbLight._m0[_1597].y * 0.3183098733425140380859375) * _1615) * _1616) + _1570;
        _1593 = (((cbLight._m0[_1597].z * 0.3183098733425140380859375) * _1615) * _1616) + _1571;
    }
    bool _1596 = _1576.y == 0u;
    float _1634;
    float _1636;
    float _1638;
    if (_1596)
    {
        _1634 = _1589;
        _1636 = _1591;
        _1638 = _1593;
    }
    else
    {
        uint _1804 = _1503 + 7u;
        float _1820 = (dot(vec3(cbLight._m0[_1503 + 3u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1821 = _1820 * _1820;
        float _3684 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1823 = isnan(1.0) ? _1519 : (isnan(_1519) ? 1.0 : min(_1519, 1.0));
        _1634 = (((cbLight._m0[_1804].x * 0.3183098733425140380859375) * _1822) * _1823) + _1589;
        _1636 = (((cbLight._m0[_1804].y * 0.3183098733425140380859375) * _1822) * _1823) + _1591;
        _1638 = (((cbLight._m0[_1804].z * 0.3183098733425140380859375) * _1822) * _1823) + _1593;
    }
    uint _1641 = _1503 + 8u;
    float _1654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1503].w)) * _289) * 0.949999988079071044921875);
    float _1655 = _1654 * _1654;
    float _1656 = cbLight._m0[_1503].x + _367;
    float _1657 = cbLight._m0[_1503].y + _368;
    float _1658 = cbLight._m0[_1503].z + _369;
    float _1662 = inversesqrt(dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658)));
    float _1663 = _1662 * _1656;
    float _1664 = _1662 * _1657;
    float _1665 = _1662 * _1658;
    float _1666 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1503].xyz));
    float _3700 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1669 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _3711 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _1670 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _1671 = dot(vec3(_286, _287, _288), vec3(_1663, _1664, _1665));
    float _3722 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1674 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _1675 = dot(vec3(cbLight._m0[_1503].xyz), vec3(_1663, _1664, _1665));
    float _3733 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _1679 = _1655 * _1655;
    float _1683 = ((_1674 * _1674) * (_1679 + (-1.0))) + 1.0;
    float _1691 = exp2(log2(1.0 - (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) * 5.0);
    float _1692 = 0.959999978542327880859375 - _439;
    float _1694 = 0.959999978542327880859375 - _440;
    float _1695 = 0.959999978542327880859375 - _441;
    float _1702 = 1.0 - _1655;
    float _1713 = (0.5 / (((_1670 * ((_1669 * _1702) + _1655)) + 9.9999999392252902907785028219223e-09) + (((_1670 * _1702) + _1655) * _1669))) * _1669;
    float _3744 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1715 = (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1679 / ((_1683 * _1683) * 3.141590118408203125));
    uint _1726 = _1503 + 9u;
    float _1737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1541].w)) * _289) * 0.949999988079071044921875);
    float _1738 = _1737 * _1737;
    float _1739 = cbLight._m0[_1541].x + _367;
    float _1740 = cbLight._m0[_1541].y + _368;
    float _1741 = cbLight._m0[_1541].z + _369;
    float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
    float _1746 = _1745 * _1739;
    float _1747 = _1745 * _1740;
    float _1748 = _1745 * _1741;
    float _1749 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1541].xyz));
    float _3755 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _1753 = dot(vec3(_286, _287, _288), vec3(_1746, _1747, _1748));
    float _3766 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1756 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _1757 = dot(vec3(cbLight._m0[_1541].xyz), vec3(_1746, _1747, _1748));
    float _3777 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1761 = _1738 * _1738;
    float _1765 = ((_1756 * _1756) * (_1761 + (-1.0))) + 1.0;
    float _1772 = exp2(log2(1.0 - (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * 5.0);
    float _1779 = 1.0 - _1738;
    float _1789 = (0.5 / (((_1670 * ((_1752 * _1779) + _1738)) + 9.9999999392252902907785028219223e-09) + (((_1670 * _1779) + _1738) * _1752))) * _1752;
    float _3788 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1791 = (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1761 / ((_1765 * _1765) * 3.141590118408203125));
    float _1801 = (((((_1772 * _1692) + _442) * cbLight._m0[_1726].x) * _1791) * _1526) + (((((_1691 * _1692) + _442) * cbLight._m0[_1641].x) * _1715) * _1537);
    float _1802 = (((((_1772 * _1694) + _444) * cbLight._m0[_1726].y) * _1791) * _1526) + (((((_1691 * _1694) + _444) * cbLight._m0[_1641].y) * _1715) * _1537);
    float _1803 = (((((_1772 * _1695) + _445) * cbLight._m0[_1726].z) * _1791) * _1526) + (((((_1691 * _1695) + _445) * cbLight._m0[_1641].z) * _1715) * _1537);
    float _1865;
    float _1867;
    float _1869;
    if (_1578)
    {
        _1865 = _1801;
        _1867 = _1802;
        _1869 = _1803;
    }
    else
    {
        uint _1871 = _1503 + 2u;
        uint _1875 = _1503 + 10u;
        float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _289) * 0.949999988079071044921875);
        float _1890 = _1889 * _1889;
        float _1891 = cbLight._m0[_1871].x + _367;
        float _1892 = cbLight._m0[_1871].y + _368;
        float _1893 = cbLight._m0[_1871].z + _369;
        float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
        float _1898 = _1897 * _1891;
        float _1899 = _1897 * _1892;
        float _1900 = _1897 * _1893;
        float _1901 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1871].xyz));
        float _3799 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1904 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1905 = dot(vec3(_286, _287, _288), vec3(_1898, _1899, _1900));
        float _3810 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1908 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1909 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_1898, _1899, _1900));
        float _3821 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1913 = _1890 * _1890;
        float _1917 = ((_1908 * _1908) * (_1913 + (-1.0))) + 1.0;
        float _1924 = exp2(log2(1.0 - (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * 5.0);
        float _1931 = 1.0 - _1890;
        float _1941 = (0.5 / (((_1670 * ((_1904 * _1931) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1670 * _1931) + _1890) * _1904))) * _1904;
        float _3832 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1943 = (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1913 / ((_1917 * _1917) * 3.141590118408203125));
        float _1944 = isnan(1.0) ? _1518 : (isnan(_1518) ? 1.0 : min(_1518, 1.0));
        _1865 = (((((_1924 * _1692) + _442) * cbLight._m0[_1875].x) * _1943) * _1944) + _1801;
        _1867 = (((((_1924 * _1694) + _444) * cbLight._m0[_1875].y) * _1943) * _1944) + _1802;
        _1869 = (((((_1924 * _1695) + _445) * cbLight._m0[_1875].z) * _1943) * _1944) + _1803;
    }
    float _1979;
    float _1981;
    float _1983;
    if (_1596)
    {
        _1979 = _1865;
        _1981 = _1867;
        _1983 = _1869;
    }
    else
    {
        uint _1990 = _1503 + 3u;
        uint _1994 = _1503 + 11u;
        float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _289) * 0.949999988079071044921875);
        float _2009 = _2008 * _2008;
        float _2010 = cbLight._m0[_1990].x + _367;
        float _2011 = cbLight._m0[_1990].y + _368;
        float _2012 = cbLight._m0[_1990].z + _369;
        float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
        float _2017 = _2016 * _2010;
        float _2018 = _2016 * _2011;
        float _2019 = _2016 * _2012;
        float _2020 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1990].xyz));
        float _3848 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2023 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _2024 = dot(vec3(_286, _287, _288), vec3(_2017, _2018, _2019));
        float _3859 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2027 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _2028 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2017, _2018, _2019));
        float _3870 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2032 = _2009 * _2009;
        float _2036 = ((_2027 * _2027) * (_2032 + (-1.0))) + 1.0;
        float _2043 = exp2(log2(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * 5.0);
        float _2050 = 1.0 - _2009;
        float _2060 = (0.5 / (((_1670 * ((_2023 * _2050) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_1670 * _2050) + _2009) * _2023))) * _2023;
        float _3881 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2062 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_2032 / ((_2036 * _2036) * 3.141590118408203125));
        float _2063 = isnan(1.0) ? _1519 : (isnan(_1519) ? 1.0 : min(_1519, 1.0));
        _1979 = (((((_2043 * _1692) + _442) * cbLight._m0[_1994].x) * _2062) * _2063) + _1865;
        _1981 = (((((_2043 * _1694) + _444) * cbLight._m0[_1994].y) * _2062) * _2063) + _1867;
        _1983 = (((((_2043 * _1695) + _445) * cbLight._m0[_1994].z) * _2062) * _2063) + _1869;
    }
    float _2198;
    float _2200;
    float _2202;
    float _2204;
    float _2206;
    float _2208;
    if (_1501.y == 0u)
    {
        float _2138 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2139 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2138;
        float _2140 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2138;
        float _2141 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2138;
        uvec4 _2153 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2154 = _2153.x;
        uint _2165 = uint((float(_2153.y) * floor(float(uint(cbSceneParam._m0[85u].y * _376) / _2154))) + floor(float(uint(cbSceneParam._m0[85u].x * _375) / _2154)));
        float _2175 = (log2(_2141 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2176 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        uint _2179 = uint(isnan(14.0) ? _2176 : (isnan(_2176) ? 14.0 : min(_2176, 14.0)));
        uvec4 _2184 = texelFetch(g_lightClusterGridBuffer, int(((_2179 << 2u) + (_2165 << 6u)) >> 2u));
        uint _2185 = _2184.x;
        uint _2186 = _2153.z;
        float _2286;
        float _2288;
        float _2290;
        float _2292;
        float _2294;
        float _2296;
        if (((((1u << ((_2186 >> 4u) & 15u)) + 4294967295u) & _2185) == 0u) || ((_2186 & 240u) == 0u))
        {
            _2286 = 0.0;
            _2288 = 0.0;
            _2290 = 0.0;
            _2292 = 0.0;
            _2294 = 0.0;
            _2296 = 0.0;
        }
        else
        {
            float _2287;
            float _2289;
            float _2291;
            float _2293;
            float _2295;
            float _2297;
            float _2431 = 0.0;
            float _2432 = 0.0;
            float _2433 = 0.0;
            float _2434 = 0.0;
            float _2435 = 0.0;
            float _2436 = 0.0;
            uint _2437 = 0u;
            uint _2446;
            bool _2447;
            for (;;)
            {
                _2446 = texelFetch(g_lightClassification, int((((_2179 << 5u) + (_2165 << 9u)) + (_2437 << 2u)) >> 2u)).x;
                _2447 = _2446 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2447)
                {
                    frontier_phi_61_pred = _2431;
                    frontier_phi_61_pred_1 = _2436;
                    frontier_phi_61_pred_2 = _2435;
                    frontier_phi_61_pred_3 = _2434;
                    frontier_phi_61_pred_4 = _2433;
                    frontier_phi_61_pred_5 = _2432;
                }
                else
                {
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    uint _2561;
                    _2555 = _2431;
                    _2556 = _2432;
                    _2557 = _2433;
                    _2558 = _2434;
                    _2559 = _2435;
                    _2560 = _2436;
                    _2561 = _2446;
                    float _2487;
                    float _2488;
                    float _2489;
                    float _2490;
                    float _2491;
                    float _2492;
                    for (;;)
                    {
                        uint _2565 = uint(findLSB(_2561)) + (_2437 << 5u);
                        uint _2562 = (_2561 + 4294967295u) & _2561;
                        uint _2567 = _2565 * 48u;
                        vec4 _2581 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2567)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 3u)).x));
                        uint _2587 = (_2565 * 48u) + 4u;
                        vec4 _2600 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2587)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 3u)).x));
                        uint _2606 = (_2565 * 48u) + 8u;
                        vec3 _2617 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2606)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 2u)).x));
                        float _2621 = _2581.x - _2139;
                        float _2622 = _2581.y - _2140;
                        float _2623 = _2581.z - _2141;
                        float _2624 = dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623));
                        float _2627 = inversesqrt(_2624);
                        float _2628 = _2627 * _2621;
                        float _2629 = _2627 * _2622;
                        float _2630 = _2627 * _2623;
                        float _2631 = dot(vec3(_397, _400, _403), vec3(_2628, _2629, _2630));
                        float _2636 = 1.0 - (_2624 * _2581.w);
                        float _3907 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
                        float _2637 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
                        float _2638 = sqrt(_2624) * _2600.w;
                        float _2641 = 1.39999997615814208984375 / (_2638 + 1.39999997615814208984375);
                        float _2642 = _2641 * _2641;
                        float _2645 = ((1.0 - _2642) * _2631) + _2642;
                        float _2648 = _2638 * _2638;
                        float _2652 = ((isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0))) * _2637) / ((_2648 * 0.699999988079071044921875) + 1.0);
                        float _2656 = (-0.0) - _2139;
                        float _2657 = (-0.0) - _2140;
                        float _2658 = (-0.0) - _2141;
                        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
                        float _2663 = _2662 * _2656;
                        float _2664 = _2662 * _2657;
                        float _2665 = _2662 * _2658;
                        float _2673 = exp2(log2(1.0 / ((_2648 * 3.5) + 5.0)) * 0.25);
                        float _2674 = 1.0 - _473;
                        float _2681 = sqrt(1.0 - ((1.0 - (_2674 * _2674)) * (1.0 - (_2673 * _2673))));
                        float _2682 = _2681 * _2681;
                        float _2683 = _2682 * _2682;
                        float _2684 = _2663 + _2628;
                        float _2685 = _2664 + _2629;
                        float _2686 = _2665 + _2630;
                        float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
                        float _2694 = dot(vec3(_397, _400, _403), vec3(_2663, _2664, _2665));
                        float _3923 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
                        float _2697 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                        float _2698 = dot(vec3(_397, _400, _403), vec3(_2690 * _2684, _2690 * _2685, _2690 * _2686));
                        float _3934 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2701 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
                        float _2705 = ((_2701 * _2701) * (_2683 + (-1.0))) + 1.0;
                        float _2706 = _2641 * _2682;
                        float _2707 = _2706 * _2706;
                        float _2710 = ((1.0 - _2707) * _2631) + _2707;
                        float _3945 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                        float _2711 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                        float _2712 = 1.0 - _2682;
                        float _2722 = (0.5 / (((_2711 * ((_2697 * _2712) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2712) + _2682) * _2697))) * _2711;
                        float _3956 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2733 = (((_2683 * 3.1415927410125732421875) * (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) / ((_2705 * _2705) * ((_2648 * 2.1991131305694580078125) + 3.141590118408203125))) * _2637;
                        _2490 = (_2652 * _2600.x) + _2558;
                        _2491 = (_2652 * _2600.y) + _2559;
                        _2492 = (_2652 * _2600.z) + _2560;
                        _2487 = (_2733 * _2617.x) + _2555;
                        _2488 = (_2733 * _2617.y) + _2556;
                        _2489 = (_2733 * _2617.z) + _2557;
                        if (_2562 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2555 = _2487;
                            _2556 = _2488;
                            _2557 = _2489;
                            _2558 = _2490;
                            _2559 = _2491;
                            _2560 = _2492;
                            _2561 = _2562;
                        }
                    }
                    frontier_phi_61_pred = _2487;
                    frontier_phi_61_pred_1 = _2492;
                    frontier_phi_61_pred_2 = _2491;
                    frontier_phi_61_pred_3 = _2490;
                    frontier_phi_61_pred_4 = _2489;
                    frontier_phi_61_pred_5 = _2488;
                }
                _2287 = frontier_phi_61_pred;
                _2297 = frontier_phi_61_pred_1;
                _2295 = frontier_phi_61_pred_2;
                _2293 = frontier_phi_61_pred_3;
                _2291 = frontier_phi_61_pred_4;
                _2289 = frontier_phi_61_pred_5;
                uint _2438 = _2437 + 1u;
                if (_2438 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2431 = _2287;
                    _2432 = _2289;
                    _2433 = _2291;
                    _2434 = _2293;
                    _2435 = _2295;
                    _2436 = _2297;
                    _2437 = _2438;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2286 = _2287;
            _2288 = _2289;
            _2290 = _2291;
            _2292 = _2293;
            _2294 = _2295;
            _2296 = _2297;
        }
        uvec4 _2300 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2301 = _2300.z;
        uint _2303 = (_2301 >> 8u) & 15u;
        float _2399;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        if (((4294967295u << _2303) & _2185) == 0u)
        {
            _2399 = _2286;
            _2401 = _2288;
            _2403 = _2290;
            _2405 = _2292;
            _2407 = _2294;
            _2409 = _2296;
        }
        else
        {
            float _2424 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
            float _2425 = _2424 * _2139;
            float _2426 = _2424 * _2140;
            float _2427 = _2424 * _2141;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2303 < ((_2301 >> 12u) & 15u))
            {
                float _2400;
                float _2402;
                float _2404;
                float _2406;
                float _2408;
                float _2410;
                float _2538 = _2286;
                float _2539 = _2288;
                float _2540 = _2290;
                float _2541 = _2292;
                float _2542 = _2294;
                float _2543 = _2296;
                uint _2544 = _2303;
                uint _2553;
                bool _2554;
                for (;;)
                {
                    _2553 = texelFetch(g_lightClassification, int((((_2179 << 5u) + (_2165 << 9u)) + (_2544 << 2u)) >> 2u)).x;
                    _2554 = _2553 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2554)
                    {
                        frontier_phi_67_pred = _2541;
                        frontier_phi_67_pred_1 = _2542;
                        frontier_phi_67_pred_2 = _2543;
                        frontier_phi_67_pred_3 = _2540;
                        frontier_phi_67_pred_4 = _2539;
                        frontier_phi_67_pred_5 = _2538;
                    }
                    else
                    {
                        float _2738;
                        float _2739;
                        float _2740;
                        float _2741;
                        float _2742;
                        float _2743;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _2751 = _2538;
                        float _2752 = _2539;
                        float _2753 = _2540;
                        float _2754 = _2541;
                        float _2755 = _2542;
                        float _2756 = _2543;
                        uint _2757 = _2553;
                        uint _2758;
                        vec4 _2783;
                        float _2784;
                        vec4 _2799;
                        vec3 _2811;
                        vec4 _2827;
                        vec4 _2843;
                        float _2890;
                        bool _2891;
                        for (;;)
                        {
                            uint _2768 = ((_2544 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2757));
                            _2758 = (_2757 + 4294967295u) & _2757;
                            uint _2770 = _2768 * 40u;
                            _2783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 3u)).x));
                            _2784 = _2783.w;
                            uint _2786 = (_2768 * 40u) + 4u;
                            _2799 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 3u)).x));
                            uint _2801 = (_2768 * 40u) + 8u;
                            _2811 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x));
                            uint _2814 = (_2768 * 40u) + 16u;
                            _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            uint _2830 = (_2768 * 40u) + 20u;
                            _2843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 3u)).x));
                            uint _2846 = (_2768 * 40u) + 24u;
                            vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            uint _2865 = (_2768 * 40u) + 28u;
                            vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            _2890 = fma(_2141, _2878.z, fma(_2140, _2878.y, _2878.x * _2139)) + _2878.w;
                            _2891 = !((fma(_2141, _2859.z, fma(_2140, _2859.y, _2859.x * _2139)) + _2859.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2891)
                            {
                                float _2918 = _2783.x - _2139;
                                float _2919 = _2783.y - _2140;
                                float _2920 = _2783.z - _2141;
                                float _2921 = dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920));
                                float _2924 = inversesqrt(_2921);
                                float _2925 = _2924 * _2918;
                                float _2926 = _2924 * _2919;
                                float _2927 = _2924 * _2920;
                                float _2931 = 1.0 - (_2921 / (_2784 * _2784));
                                float _3967 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                                float _2932 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                                float _2936 = sqrt(_2921) * _2799.w;
                                float _2938 = 1.39999997615814208984375 / (_2936 + 1.39999997615814208984375);
                                float _2939 = _2938 * _2938;
                                float _2942 = ((1.0 - _2939) * dot(vec3(_2925, _2926, _2927), vec3(_397, _400, _403))) + _2939;
                                float _2945 = _2936 * _2936;
                                float _2949 = (fma(_2141, _2827.z, fma(_2140, _2827.y, _2827.x * _2139)) + _2827.w) / _2890;
                                float _2950 = (fma(_2141, _2843.z, fma(_2140, _2843.y, _2843.x * _2139)) + _2843.w) / _2890;
                                float _2954 = 1.0 - dot(vec2(_2949, _2950), vec2(_2949, _2950));
                                float _3983 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                                float _2955 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                                float _2956 = _2955 * (((isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0))) * _2932) / ((_2945 * 0.699999988079071044921875) + 1.0));
                                float _2968 = exp2(log2(1.0 / ((_2945 * 3.5) + 5.0)) * 0.25);
                                float _2969 = 1.0 - _473;
                                float _2976 = sqrt(1.0 - ((1.0 - (_2969 * _2969)) * (1.0 - (_2968 * _2968))));
                                float _2977 = _2976 * _2976;
                                float _2978 = _2977 * _2977;
                                float _2979 = _2925 - _2425;
                                float _2980 = _2926 - _2426;
                                float _2981 = _2927 - _2427;
                                float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                                float _2989 = dot(vec3(_397, _400, _403), vec3((-0.0) - _2425, (-0.0) - _2426, (-0.0) - _2427));
                                float _3994 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2992 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                                float _2993 = dot(vec3(_397, _400, _403), vec3(_2985 * _2979, _2985 * _2980, _2985 * _2981));
                                float _4005 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                                float _2996 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                                float _3000 = ((_2996 * _2996) * (_2978 + (-1.0))) + 1.0;
                                float _3001 = _2938 * _2977;
                                float _3002 = _3001 * _3001;
                                float _3008 = ((1.0 - _3002) * dot(vec3(_397, _400, _403), vec3(_2925, _2926, _2927))) + _3002;
                                float _4016 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3009 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _3010 = 1.0 - _2977;
                                float _3020 = (0.5 / (((_3009 * ((_2992 * _3010) + _2977)) + 9.9999999392252902907785028219223e-09) + (((_3009 * _3010) + _2977) * _2992))) * _3009;
                                float _4027 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3030 = (_2955 * _2932) * (((_2978 * 3.1415927410125732421875) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) / ((_3000 * _3000) * ((_2945 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3030 * _2811.x;
                                frontier_phi_73_pred_1 = _3030 * _2811.y;
                                frontier_phi_73_pred_2 = _2956 * _2799.z;
                                frontier_phi_73_pred_3 = _2956 * _2799.y;
                                frontier_phi_73_pred_4 = _2956 * _2799.x;
                                frontier_phi_73_pred_5 = _3030 * _2811.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3034 = frontier_phi_73_pred;
                            _3035 = frontier_phi_73_pred_1;
                            _3039 = frontier_phi_73_pred_2;
                            _3038 = frontier_phi_73_pred_3;
                            _3037 = frontier_phi_73_pred_4;
                            _3036 = frontier_phi_73_pred_5;
                            _2741 = _3037 + _2754;
                            _2742 = _3038 + _2755;
                            _2743 = _3039 + _2756;
                            _2738 = _3034 + _2751;
                            _2739 = _3035 + _2752;
                            _2740 = _3036 + _2753;
                            if (_2758 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2751 = _2738;
                                _2752 = _2739;
                                _2753 = _2740;
                                _2754 = _2741;
                                _2755 = _2742;
                                _2756 = _2743;
                                _2757 = _2758;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2741;
                        frontier_phi_67_pred_1 = _2742;
                        frontier_phi_67_pred_2 = _2743;
                        frontier_phi_67_pred_3 = _2740;
                        frontier_phi_67_pred_4 = _2739;
                        frontier_phi_67_pred_5 = _2738;
                    }
                    _2406 = frontier_phi_67_pred;
                    _2408 = frontier_phi_67_pred_1;
                    _2410 = frontier_phi_67_pred_2;
                    _2404 = frontier_phi_67_pred_3;
                    _2402 = frontier_phi_67_pred_4;
                    _2400 = frontier_phi_67_pred_5;
                    uint _2545 = _2544 + 1u;
                    if (_2545 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2538 = _2400;
                        _2539 = _2402;
                        _2540 = _2404;
                        _2541 = _2406;
                        _2542 = _2408;
                        _2543 = _2410;
                        _2544 = _2545;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2408;
                frontier_phi_55_56_ladder_1 = _2410;
                frontier_phi_55_56_ladder_2 = _2406;
                frontier_phi_55_56_ladder_3 = _2404;
                frontier_phi_55_56_ladder_4 = _2402;
                frontier_phi_55_56_ladder_5 = _2400;
            }
            else
            {
                frontier_phi_55_56_ladder = _2294;
                frontier_phi_55_56_ladder_1 = _2296;
                frontier_phi_55_56_ladder_2 = _2292;
                frontier_phi_55_56_ladder_3 = _2290;
                frontier_phi_55_56_ladder_4 = _2288;
                frontier_phi_55_56_ladder_5 = _2286;
            }
            _2399 = frontier_phi_55_56_ladder_5;
            _2401 = frontier_phi_55_56_ladder_4;
            _2403 = frontier_phi_55_56_ladder_3;
            _2405 = frontier_phi_55_56_ladder_2;
            _2407 = frontier_phi_55_56_ladder;
            _2409 = frontier_phi_55_56_ladder_1;
        }
        float _2414 = isnan(1.0) ? _457 : (isnan(_457) ? 1.0 : min(_457, 1.0));
        _2198 = (_2414 * _2405) + _1634;
        _2200 = (_2414 * _2407) + _1636;
        _2202 = (_2414 * _2409) + _1638;
        _2204 = ((_2399 * _442) * _2414) + _1979;
        _2206 = ((_2401 * _444) * _2414) + _1981;
        _2208 = ((_2403 * _445) * _2414) + _1983;
    }
    else
    {
        _2198 = _1634;
        _2200 = _1636;
        _2202 = _1638;
        _2204 = _1979;
        _2206 = _1981;
        _2208 = _1983;
    }
    float _4043 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _4054 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4065 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    uint _2228 = _416 + 6u;
    float _2236 = _375 / cbSceneParam._m0[86u].x;
    float _2237 = _376 / cbSceneParam._m0[86u].y;
    vec4 _2251 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2236, _2237, (log2((isnan(cbSceneParam._m0[77u].w) ? _309 : (isnan(_309) ? cbSceneParam._m0[77u].w : min(_309, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2253 = _2251.x;
    float _2254 = _2251.y;
    float _2255 = _2251.z;
    float _2256 = _2251.w;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    if (_309 > cbSceneParam._m0[78u].w)
    {
        float _2311 = isnan(_309) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _309 : min(cbSceneParam._m0[80u].w, _309));
        float _2312 = _2311 / _309;
        float _2323 = _2312 * _360;
        float _2324 = _361 * _2312;
        float _2325 = (-0.0) - _2324;
        float _2327 = _2312 * _362;
        float _2329 = (cbSceneParam._m0[77u].w * _2325) / _2311;
        float _2330 = _2329 + cbSceneParam._m0[79u].w;
        float _2331 = cbSceneParam._m0[79u].w - _2324;
        float _2337 = sqrt(((_2323 * _2323) + (_2324 * _2324)) + (_2327 * _2327));
        float _2340 = (1.0 - (cbSceneParam._m0[77u].w / _2311)) * _2337;
        float _2345 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2347 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2500;
        if (abs((_2325 - _2329) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2500 = ((((_2330 > 0.0) ? exp2(_2345 * _2330) : (2.0 - exp2(_2347 * _2330))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2340;
        }
        else
        {
            float _2460 = 1.0 / cbSceneParam._m0[80u].x;
            float _2461 = isnan(_2331) ? _2330 : (isnan(_2330) ? _2331 : max(_2330, _2331));
            float _2462 = isnan(_2331) ? _2330 : (isnan(_2330) ? _2331 : min(_2330, _2331));
            float _2471 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : min(_2461, 0.0));
            float _2472 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : min(_2462, 0.0));
            _2500 = ((abs(_2337 / _2325) * cbSceneParam._m0[80u].y) * ((((_2471 - _2472) * 2.0) - ((exp2(_2345 * (isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0)))) - exp2(_2345 * (isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0))))) * _2460)) - ((exp2(_2347 * _2471) - exp2(_2347 * _2472)) * _2460))) + (_2340 * cbSceneParam._m0[80u].z);
        }
        vec4 _2502 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2236, _2237, 1.0), 0.0);
        float _2511 = exp2((_2500 * (-1.44269502162933349609375)) * (1.0 - _2502.w));
        float _2512 = log2(_2511);
        float _2528 = log2(_2256);
        _2349 = (exp2(_2528 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2512 * cbSceneParam._m0[78u].x)) * _2502.x) / cbSceneParam._m0[78u].x)) + _2253;
        _2351 = (exp2(_2528 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2512 * cbSceneParam._m0[78u].y)) * _2502.y) / cbSceneParam._m0[78u].y)) + _2254;
        _2353 = (exp2(_2528 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2512 * cbSceneParam._m0[78u].z)) * _2502.z) / cbSceneParam._m0[78u].z)) + _2255;
        _2355 = _2511 * _2256;
    }
    else
    {
        _2349 = _2253;
        _2351 = _2254;
        _2353 = _2255;
        _2355 = _2256;
    }
    float _2367 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2368 = _2367 == 3.0;
    float _2369 = log2(_2355);
    float _2376 = exp2(_2369 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_2198 + ((isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))) * _457))) + ((_2204 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _1267)) * cbPerFrame._m0[3u].x));
    float _2377 = exp2(_2369 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2200 + ((isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))) * _457))) + ((_2206 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _1267)) * cbPerFrame._m0[3u].x));
    float _2378 = exp2(_2369 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2202 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _457))) + ((_2208 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _1267)) * cbPerFrame._m0[3u].x));
    float _2387 = (_2367 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2387 * (_2368 ? _2376 : (_2376 + (cbSceneParam._m0[72u].w * _2349)));
    SV_Target.y = _2387 * (_2368 ? _2377 : (_2377 + (cbSceneParam._m0[72u].w * _2351)));
    SV_Target.z = _2387 * (_2368 ? _2378 : (_2378 + (cbSceneParam._m0[72u].w * _2353)));
    SV_Target.w = cbInstanceData._m0[_2228].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2228].w;
}


