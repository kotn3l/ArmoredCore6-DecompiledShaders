#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _866;
float _3281;
float _3282;
float _3283;
float _3284;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3293 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))));
    float _268 = fma(_265, _194 * NORMAL.x, fma(_258, _201 * TANGENT.x, (_187 * _180) * _256));
    float _271 = fma(_265, _194 * NORMAL.y, fma(_258, _201 * TANGENT.y, (_187 * _181) * _256));
    float _274 = fma(_265, _194 * NORMAL.z, fma(_258, _201 * TANGENT.z, (_187 * _182) * _256));
    float _278 = inversesqrt(dot(vec3(_268, _271, _274), vec3(_268, _271, _274)));
    float _279 = _278 * _268;
    float _280 = _278 * _271;
    float _281 = _278 * _274;
    float _3304 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _282 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    float _3315 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3326 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3337 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3348 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _286 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _302 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _343 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _353 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _343);
    float _354 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _343);
    float _355 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _343);
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _353 * _359;
    float _361 = _354 * _359;
    float _362 = _355 * _359;
    vec4 _367 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _369 = _367.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _545 = sqrt(((_353 * _353) + (_354 * _354)) + (_355 * _355));
        float _551 = (cbMatDynParam._m0[5u].x * _545) + cbMatDynParam._m0[5u].y;
        float _3359 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
        float _552 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _556 = (cbMatDynParam._m0[5u].z * _545) + cbMatDynParam._m0[5u].w;
        float _3370 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) - _552)) + _552) < ((_369 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _381 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _382 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _402 = fma(_281, cbSceneParam._m0[5u].z, fma(_280, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _279));
    float _405 = fma(_281, cbSceneParam._m0[6u].z, fma(_280, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _279));
    float _408 = fma(_281, cbSceneParam._m0[7u].z, fma(_280, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _279));
    uint _421 = uint(roundEven(NORMAL.w)) * 13u;
    uint _423 = _421 + 9u;
    uint _424 = _423 + uint(cbMatDynParam._m0[0u].w);
    float _430 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0)))) * cbInstanceData._m0[_424].x;
    float _431 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0)))) * cbInstanceData._m0[_424].y;
    float _432 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0)))) * cbInstanceData._m0[_424].z;
    float _3381 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _3392 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _3403 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _436 = 1.0 - _286;
    float _437 = _433 * _436;
    float _438 = _434 * _436;
    float _439 = _435 * _436;
    float _444 = (_433 + (-0.039999999105930328369140625)) * _286;
    float _445 = (_434 + (-0.039999999105930328369140625)) * _286;
    float _446 = (_435 + (-0.039999999105930328369140625)) * _286;
    float _447 = _444 + 0.039999999105930328369140625;
    float _449 = _445 + 0.039999999105930328369140625;
    float _450 = _446 + 0.039999999105930328369140625;
    vec4 _459 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _381, cbSceneParam._m0[86u].y * _382));
    float _462 = _459.x * TEXCOORD.z;
    float _463 = dot(vec3(_279, _280, _281), vec3(_360, _361, _362));
    float _466 = _463 * 2.0;
    float _470 = (_466 * _279) - _360;
    float _471 = (_466 * _280) - _361;
    float _472 = (_466 * _281) - _362;
    float _476 = abs(dot(vec3(_360, _361, _362), vec3(_279, _280, _281)));
    float _3414 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _478 = sqrt(_282);
    float _491 = exp2((_478 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_478 * 3.0));
    float _497 = (1.0 - _491) * ((_478 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _498 = _491 * _478;
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _865;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _590 = fma(_534, cbModelParam._m0[26u].z, fma(_530, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _526));
        float _594 = fma(_534, cbModelParam._m0[27u].z, fma(_530, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _526));
        float _598 = fma(_534, cbModelParam._m0[28u].z, fma(_530, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _526));
        float _623 = _526 + _279;
        float _624 = _530 + _280;
        float _625 = _534 + _281;
        float _635 = fma(_625, cbModelParam._m0[26u].z, fma(_624, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _623)) - _590;
        float _636 = fma(_625, cbModelParam._m0[27u].z, fma(_624, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _623)) - _594;
        float _637 = fma(_625, cbModelParam._m0[28u].z, fma(_624, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _623)) - _598;
        float _641 = inversesqrt(dot(vec3(_635, _636, _637), vec3(_635, _636, _637)));
        float _654 = ((_641 * _635) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_590 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _655 = ((_641 * _636) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_594 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _656 = ((_641 * _637) / cbModelParam._m0[34u].z) + ((((((_598 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        float _693 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_659.x + (-0.5));
        float _695 = _693 * (_659.y + (-0.5));
        float _696 = _693 * (_659.z + (-0.5));
        float _703 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_666.x + (-0.5));
        float _705 = _703 * (_666.y + (-0.5));
        float _706 = _703 * (_666.z + (-0.5));
        float _713 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_673.x + (-0.5));
        float _715 = _713 * (_673.y + (-0.5));
        float _716 = _713 * (_673.z + (-0.5));
        float _723 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_680.x + (-0.5));
        float _725 = _723 * (_680.y + (-0.5));
        float _726 = _723 * (_680.z + (-0.5));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = _694 * 0.5;
        float _731 = _704 * 0.5;
        float _732 = _714 * 0.5;
        float _733 = dot(vec3(_730, _731, _732), vec3(_730, _731, _732));
        float _738 = (_733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_733);
        float _747 = (dot(vec3(_279, _280, _281), vec3(_738 * _730, _738 * _731, _738 * _732)) + 1.0) * 0.5;
        float _3440 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _757 = sqrt(((_731 * _731) + (_730 * _730)) + (_732 * _732)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3451 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _759 = _758 * 2.0;
        float _763 = (1.0 - _758) / (_758 + 1.0);
        float _3462 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _773 = ((((1.0 - _764) * (_759 + 2.0)) * exp2(log2(isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * (_759 + 1.0))) + _764) * _727;
        float _774 = _695 * 0.5;
        float _775 = _705 * 0.5;
        float _776 = _715 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _790 = (dot(vec3(_279, _280, _281), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _799 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _801 = _800 * 2.0;
        float _805 = (1.0 - _800) / (_800 + 1.0);
        float _3495 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _815 = ((((1.0 - _806) * (_801 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_801 + 1.0))) + _806) * _728;
        float _816 = _696 * 0.5;
        float _817 = _706 * 0.5;
        float _818 = _716 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _832 = (dot(vec3(_279, _280, _281), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _841 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3528 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_843 + 1.0))) + _848) * _729;
        _865 = _696;
        _867 = _695;
        _868 = _694;
        _869 = _706;
        _870 = _705;
        _871 = _704;
        _872 = _716;
        _873 = _715;
        _874 = _714;
        _875 = _729;
        _876 = _728;
        _877 = _727;
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0)));
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0)));
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
    }
    else
    {
        _865 = _866;
        _867 = _866;
        _868 = _866;
        _869 = _866;
        _870 = _866;
        _871 = _866;
        _872 = _866;
        _873 = _866;
        _874 = _866;
        _875 = _866;
        _876 = _866;
        _877 = _866;
        _878 = 0.0;
        _879 = 0.0;
        _880 = 0.0;
    }
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _909 = fma(_534, cbModelParam._m0[30u].z, fma(_530, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _526));
        float _913 = fma(_534, cbModelParam._m0[31u].z, fma(_530, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _526));
        float _917 = fma(_534, cbModelParam._m0[32u].z, fma(_530, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _526));
        float _940 = _526 + _279;
        float _941 = _530 + _280;
        float _942 = _534 + _281;
        float _952 = fma(_942, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _940)) - _909;
        float _953 = fma(_942, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _940)) - _913;
        float _954 = fma(_942, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _940)) - _917;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_909 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_913 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[35u].z) + ((((((_917 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1008 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_975.x + (-0.5));
        float _1010 = _1008 * (_975.y + (-0.5));
        float _1011 = _1008 * (_975.z + (-0.5));
        float _1018 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_982.x + (-0.5));
        float _1020 = _1018 * (_982.y + (-0.5));
        float _1021 = _1018 * (_982.z + (-0.5));
        float _1028 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_989.x + (-0.5));
        float _1030 = _1028 * (_989.y + (-0.5));
        float _1031 = _1028 * (_989.z + (-0.5));
        float _1038 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_996.x + (-0.5));
        float _1040 = _1038 * (_996.y + (-0.5));
        float _1041 = _1038 * (_996.z + (-0.5));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = _1009 * 0.5;
        float _1046 = _1019 * 0.5;
        float _1047 = _1029 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_279, _280, _281), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3591 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_1072 + 1.0))) + _1077) * _1042;
        float _1087 = _1010 * 0.5;
        float _1088 = _1020 * 0.5;
        float _1089 = _1030 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_279, _280, _281), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3624 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1114 + 1.0))) + _1119) * _1043;
        float _1129 = _1011 * 0.5;
        float _1130 = _1021 * 0.5;
        float _1131 = _1031 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_279, _280, _281), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3657 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1156 + 1.0))) + _1161) * _1044;
        _1178 = _1011;
        _1179 = _1010;
        _1180 = _1009;
        _1181 = _1021;
        _1182 = _1020;
        _1183 = _1019;
        _1184 = _1031;
        _1185 = _1030;
        _1186 = _1029;
        _1187 = _1044;
        _1188 = _1043;
        _1189 = _1042;
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
    }
    else
    {
        _1178 = _866;
        _1179 = _866;
        _1180 = _866;
        _1181 = _866;
        _1182 = _866;
        _1183 = _866;
        _1184 = _866;
        _1185 = _866;
        _1186 = _866;
        _1187 = _866;
        _1188 = _866;
        _1189 = _866;
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
    }
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _878)) + _878;
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _879)) + _879;
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _880)) + _880;
    float _1225 = fma(_1204, cbSceneParam._m0[89u].z, fma(_1203, cbSceneParam._m0[89u].y, _1202 * cbSceneParam._m0[89u].x));
    float _1228 = fma(_1204, cbSceneParam._m0[90u].z, fma(_1203, cbSceneParam._m0[90u].y, _1202 * cbSceneParam._m0[90u].x));
    float _1231 = fma(_1204, cbSceneParam._m0[91u].z, fma(_1203, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1202));
    float _1246 = _470 * 0.5;
    float _1247 = _471 * 0.5;
    float _1248 = _472 * 0.5;
    float _1249 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1252 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1255 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1289;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1262 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_865, _869, _872, _875));
        float _1266 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_867, _870, _873, _876));
        float _1270 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_868, _871, _874, _877));
        float _1277 = dot(vec4(cbModelParam._m0[39u]), vec4(_1246, _1247, _1248, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1300;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1291 = dot(vec4(cbModelParam._m0[40u]), vec4(_1246, _1247, _1248, 1.0));
        _1300 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1300 = 1.0;
    }
    float _1304 = (_1300 * cbModelParam._m0[1u].x) + (_1289 * (1.0 - cbModelParam._m0[1u].x));
    float _1314 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _282);
    float _1315 = isnan(_1314) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1314 : min(cbModelParam._m0[25u].z, _1314));
    float _1397;
    float _1399;
    float _1401;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1364 = fma(_534, cbModelParam._m0[13u].z, fma(_530, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _526)) + cbModelParam._m0[13u].w;
        float _1368 = fma(_534, cbModelParam._m0[14u].z, fma(_530, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _526)) + cbModelParam._m0[14u].w;
        float _1372 = fma(_534, cbModelParam._m0[15u].z, fma(_530, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _526)) + cbModelParam._m0[15u].w;
        float _1375 = fma(_472, cbModelParam._m0[13u].z, fma(_471, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _470));
        float _1378 = fma(_472, cbModelParam._m0[14u].z, fma(_471, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _470));
        float _1381 = fma(_472, cbModelParam._m0[15u].z, fma(_471, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _470));
        float _1409;
        if (_1375 > 0.0)
        {
            _1409 = abs((1.0 - _1364) / _1375);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1364 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1409 = frontier_phi_17_15_ladder;
        }
        float _1638;
        if (_1378 > 0.0)
        {
            _1638 = abs((1.0 - _1368) / _1378);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1368 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1638 = frontier_phi_26_22_ladder;
        }
        float _1895;
        if (_1381 > 0.0)
        {
            _1895 = abs((1.0 - _1372) / _1381);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1372 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1895 = frontier_phi_38_33_ladder;
        }
        float _1897 = isnan(_1638) ? _1409 : (isnan(_1409) ? _1638 : min(_1409, _1638));
        float _1898 = isnan(_1895) ? _1897 : (isnan(_1897) ? _1895 : min(_1897, _1895));
        float _1902 = (_1898 * _1375) + _1364;
        float _1903 = (_1898 * _1378) + _1368;
        float _1904 = (_1898 * _1381) + _1372;
        float _1905 = _1898 * 9.9999997473787516355514526367188e-05;
        float _1907 = (-1.0) - _1905;
        float _1909 = _1905 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1904 > _1909) || ((_1904 < _1907) || ((_1903 > _1909) || ((_1903 < _1907) || ((_1902 < _1907) || (_1902 > _1909))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2032 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1904, cbModelParam._m0[9u].z, fma(_1903, cbModelParam._m0[9u].y, _1902 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1904, cbModelParam._m0[10u].z, fma(_1903, cbModelParam._m0[10u].y, _1902 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1904, cbModelParam._m0[11u].z, fma(_1903, cbModelParam._m0[11u].y, _1902 * cbModelParam._m0[11u].x))), _1315);
            frontier_phi_16_38_ladder = _2032.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2032.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2032.x * cbModelParam._m0[1u].y;
        }
        _1397 = frontier_phi_16_38_ladder_2;
        _1399 = frontier_phi_16_38_ladder_1;
        _1401 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1385 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_470, _471, _472), _1315);
        _1397 = _1385.x * cbModelParam._m0[1u].y;
        _1399 = _1385.y * cbModelParam._m0[1u].y;
        _1401 = _1385.z * cbModelParam._m0[1u].y;
    }
    float _1405 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _282);
    float _1406 = isnan(_1405) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1405 : min(cbModelParam._m0[25u].w, _1405));
    float _1499;
    float _1501;
    float _1503;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1463 = fma(_534, cbModelParam._m0[21u].z, fma(_530, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _526)) + cbModelParam._m0[21u].w;
        float _1467 = fma(_534, cbModelParam._m0[22u].z, fma(_530, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _526)) + cbModelParam._m0[22u].w;
        float _1471 = fma(_534, cbModelParam._m0[23u].z, fma(_530, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _526)) + cbModelParam._m0[23u].w;
        float _1474 = fma(_472, cbModelParam._m0[21u].z, fma(_471, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _470));
        float _1477 = fma(_472, cbModelParam._m0[22u].z, fma(_471, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _470));
        float _1480 = fma(_472, cbModelParam._m0[23u].z, fma(_471, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _470));
        float _1643;
        if (_1474 > 0.0)
        {
            _1643 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1643 = frontier_phi_28_24_ladder;
        }
        float _1922;
        if (_1477 > 0.0)
        {
            _1922 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1922 = frontier_phi_40_35_ladder;
        }
        float _2135;
        if (_1480 > 0.0)
        {
            _2135 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2135 = frontier_phi_49_46_ladder;
        }
        float _2137 = isnan(_1922) ? _1643 : (isnan(_1643) ? _1922 : min(_1643, _1922));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1474) + _1463;
        float _2143 = (_2138 * _1477) + _1467;
        float _2144 = (_2138 * _1480) + _1471;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2146 = (-1.0) - _2145;
        float _2148 = _2145 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2144 > _2148) || ((_2144 < _2146) || ((_2143 > _2148) || ((_2143 < _2146) || ((_2142 < _2146) || (_2142 > _2148))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2343 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2144, cbModelParam._m0[17u].z, fma(_2143, cbModelParam._m0[17u].y, _2142 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2144, cbModelParam._m0[18u].z, fma(_2143, cbModelParam._m0[18u].y, _2142 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2144, cbModelParam._m0[19u].z, fma(_2143, cbModelParam._m0[19u].y, _2142 * cbModelParam._m0[19u].x))), _1406);
            frontier_phi_25_49_ladder = _2343.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2343.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2343.x * cbModelParam._m0[1u].z;
        }
        _1499 = frontier_phi_25_49_ladder_2;
        _1501 = frontier_phi_25_49_ladder_1;
        _1503 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1483 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_470, _471, _472), _1406);
        _1499 = _1483.x * cbModelParam._m0[1u].z;
        _1501 = _1483.y * cbModelParam._m0[1u].z;
        _1503 = _1483.z * cbModelParam._m0[1u].z;
    }
    float _1516 = (((_497 * _447) + _498) * _462) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1518 = (((_497 * _449) + _498) * _462) * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1520 = (((_497 * _450) + _498) * _462) * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1523 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1518, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1518, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1518, cbSceneParam._m0[91u].y, _1516 * cbSceneParam._m0[91u].x));
    vec4 _1537 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_381, _382));
    float _1539 = _1537.w;
    float _1551 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1539);
    float _1552 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1539);
    float _1553 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1539);
    uvec4 _1557 = floatBitsToUint(cbInstanceData._m0[_421 + 5u]);
    uint _1559 = _1557.x * 14u;
    uint _1560 = _1559 + 13u;
    float _1567 = _462 + (-1.0);
    float _1572 = (cbLight._m0[_1560].x * _1567) + 1.0;
    float _1573 = (cbLight._m0[_1560].y * _1567) + 1.0;
    float _1574 = (cbLight._m0[_1560].z * _1567) + 1.0;
    float _1575 = (cbLight._m0[_1560].w * _1567) + 1.0;
    uint _1576 = _1559 + 5u;
    float _1582 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
    uint _1586 = _1559 + 4u;
    float _1596 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
    uint _1600 = _1559 | 1u;
    float _1611 = dot(vec3(cbLight._m0[_1559].xyz), vec3(_279, _280, _281));
    float _1614 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_279, _280, _281));
    float _3793 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _3804 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1619 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * 0.3183098733425140380859375;
    float _1621 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * 0.3183098733425140380859375;
    float _1628 = ((cbLight._m0[_1576].x * _1582) * _1621) + (((cbLight._m0[_1586].x * _1551) * _1596) * _1619);
    float _1629 = ((_1582 * cbLight._m0[_1576].y) * _1621) + (((cbLight._m0[_1586].y * _1552) * _1596) * _1619);
    float _1630 = ((_1582 * cbLight._m0[_1576].z) * _1621) + (((cbLight._m0[_1586].z * _1553) * _1596) * _1619);
    uvec4 _1635 = floatBitsToUint(cbLight._m0[_1559 + 12u]);
    bool _1637 = _1635.x == 0u;
    float _1648;
    float _1650;
    float _1652;
    if (_1637)
    {
        _1648 = _1628;
        _1650 = _1629;
        _1652 = _1630;
    }
    else
    {
        uint _1656 = _1559 + 6u;
        float _1672 = (dot(vec3(cbLight._m0[_1559 + 2u].xyz), vec3(_279, _280, _281)) * 0.5) + 0.5;
        float _1673 = _1672 * _1672;
        float _3815 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1675 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _1648 = (((cbLight._m0[_1656].x * 0.3183098733425140380859375) * _1674) * _1675) + _1628;
        _1650 = (((cbLight._m0[_1656].y * 0.3183098733425140380859375) * _1674) * _1675) + _1629;
        _1652 = (((cbLight._m0[_1656].z * 0.3183098733425140380859375) * _1674) * _1675) + _1630;
    }
    bool _1655 = _1635.y == 0u;
    float _1693;
    float _1695;
    float _1697;
    if (_1655)
    {
        _1693 = _1648;
        _1695 = _1650;
        _1697 = _1652;
    }
    else
    {
        uint _1866 = _1559 + 7u;
        float _1882 = (dot(vec3(cbLight._m0[_1559 + 3u].xyz), vec3(_279, _280, _281)) * 0.5) + 0.5;
        float _1883 = _1882 * _1882;
        float _3831 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1885 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
        _1693 = (((cbLight._m0[_1866].x * 0.3183098733425140380859375) * _1884) * _1885) + _1648;
        _1695 = (((cbLight._m0[_1866].y * 0.3183098733425140380859375) * _1884) * _1885) + _1650;
        _1697 = (((cbLight._m0[_1866].z * 0.3183098733425140380859375) * _1884) * _1885) + _1652;
    }
    uint _1700 = _1559 + 8u;
    float _1713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1559].w)) * _282) * 0.949999988079071044921875);
    float _1714 = _1713 * _1713;
    float _1715 = cbLight._m0[_1559].x + _360;
    float _1716 = cbLight._m0[_1559].y + _361;
    float _1717 = cbLight._m0[_1559].z + _362;
    float _1721 = inversesqrt(dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717)));
    float _1722 = _1721 * _1715;
    float _1723 = _1721 * _1716;
    float _1724 = _1721 * _1717;
    float _1725 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1559].xyz));
    float _3847 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1728 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _1729 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1730 = dot(vec3(_279, _280, _281), vec3(_1722, _1723, _1724));
    float _3869 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1733 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _1734 = dot(vec3(cbLight._m0[_1559].xyz), vec3(_1722, _1723, _1724));
    float _3880 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1738 = _1714 * _1714;
    float _1742 = ((_1733 * _1733) * (_1738 + (-1.0))) + 1.0;
    float _1750 = exp2(log2(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * 5.0);
    float _1751 = 0.959999978542327880859375 - _444;
    float _1753 = 0.959999978542327880859375 - _445;
    float _1754 = 0.959999978542327880859375 - _446;
    float _1761 = 1.0 - _1714;
    float _1772 = (0.5 / (((_1729 * ((_1728 * _1761) + _1714)) + 9.9999999392252902907785028219223e-09) + (((_1729 * _1761) + _1714) * _1728))) * _1728;
    float _3891 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1774 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1738 / ((_1742 * _1742) * 3.141590118408203125));
    uint _1788 = _1559 + 9u;
    float _1799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1600].w)) * _282) * 0.949999988079071044921875);
    float _1800 = _1799 * _1799;
    float _1801 = cbLight._m0[_1600].x + _360;
    float _1802 = cbLight._m0[_1600].y + _361;
    float _1803 = cbLight._m0[_1600].z + _362;
    float _1807 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
    float _1808 = _1807 * _1801;
    float _1809 = _1807 * _1802;
    float _1810 = _1807 * _1803;
    float _1811 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1600].xyz));
    float _3902 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _1815 = dot(vec3(_279, _280, _281), vec3(_1808, _1809, _1810));
    float _3913 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _1819 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_1808, _1809, _1810));
    float _3924 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1823 = _1800 * _1800;
    float _1827 = ((_1818 * _1818) * (_1823 + (-1.0))) + 1.0;
    float _1834 = exp2(log2(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * 5.0);
    float _1841 = 1.0 - _1800;
    float _1851 = (0.5 / (((_1729 * ((_1814 * _1841) + _1800)) + 9.9999999392252902907785028219223e-09) + (((_1729 * _1841) + _1800) * _1814))) * _1814;
    float _3935 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1853 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1823 / ((_1827 * _1827) * 3.141590118408203125));
    float _1863 = (((((_1834 * _1751) + _447) * cbLight._m0[_1788].x) * _1853) * _1582) + ((((cbLight._m0[_1700].x * _1551) * ((_1750 * _1751) + _447)) * _1774) * _1596);
    float _1864 = (((((_1834 * _1753) + _449) * cbLight._m0[_1788].y) * _1853) * _1582) + ((((cbLight._m0[_1700].y * _1552) * ((_1750 * _1753) + _449)) * _1774) * _1596);
    float _1865 = (((((_1834 * _1754) + _450) * cbLight._m0[_1788].z) * _1853) * _1582) + ((((cbLight._m0[_1700].z * _1553) * ((_1750 * _1754) + _450)) * _1774) * _1596);
    float _1927;
    float _1929;
    float _1931;
    if (_1637)
    {
        _1927 = _1863;
        _1929 = _1864;
        _1931 = _1865;
    }
    else
    {
        uint _1933 = _1559 + 2u;
        uint _1937 = _1559 + 10u;
        float _1951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _282) * 0.949999988079071044921875);
        float _1952 = _1951 * _1951;
        float _1953 = cbLight._m0[_1933].x + _360;
        float _1954 = cbLight._m0[_1933].y + _361;
        float _1955 = cbLight._m0[_1933].z + _362;
        float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
        float _1960 = _1959 * _1953;
        float _1961 = _1959 * _1954;
        float _1962 = _1959 * _1955;
        float _1963 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1933].xyz));
        float _3946 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1966 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1967 = dot(vec3(_279, _280, _281), vec3(_1960, _1961, _1962));
        float _3957 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1970 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1971 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_1960, _1961, _1962));
        float _3968 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1975 = _1952 * _1952;
        float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
        float _1986 = exp2(log2(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * 5.0);
        float _1993 = 1.0 - _1952;
        float _2003 = (0.5 / (((_1729 * ((_1966 * _1993) + _1952)) + 9.9999999392252902907785028219223e-09) + (((_1729 * _1993) + _1952) * _1966))) * _1966;
        float _3979 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2005 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
        float _2006 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _1927 = (((((_1986 * _1751) + _447) * cbLight._m0[_1937].x) * _2005) * _2006) + _1863;
        _1929 = (((((_1986 * _1753) + _449) * cbLight._m0[_1937].y) * _2005) * _2006) + _1864;
        _1931 = (((((_1986 * _1754) + _450) * cbLight._m0[_1937].z) * _2005) * _2006) + _1865;
    }
    float _2041;
    float _2043;
    float _2045;
    if (_1655)
    {
        _2041 = _1927;
        _2043 = _1929;
        _2045 = _1931;
    }
    else
    {
        uint _2052 = _1559 + 3u;
        uint _2056 = _1559 + 11u;
        float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _282) * 0.949999988079071044921875);
        float _2071 = _2070 * _2070;
        float _2072 = cbLight._m0[_2052].x + _360;
        float _2073 = cbLight._m0[_2052].y + _361;
        float _2074 = cbLight._m0[_2052].z + _362;
        float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
        float _2079 = _2078 * _2072;
        float _2080 = _2078 * _2073;
        float _2081 = _2078 * _2074;
        float _2082 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_2052].xyz));
        float _3995 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2085 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _2086 = dot(vec3(_279, _280, _281), vec3(_2079, _2080, _2081));
        float _4006 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2089 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2090 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2079, _2080, _2081));
        float _4017 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2094 = _2071 * _2071;
        float _2098 = ((_2089 * _2089) * (_2094 + (-1.0))) + 1.0;
        float _2105 = exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0);
        float _2112 = 1.0 - _2071;
        float _2122 = (0.5 / (((_1729 * ((_2085 * _2112) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_1729 * _2112) + _2071) * _2085))) * _2085;
        float _4028 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2124 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_2094 / ((_2098 * _2098) * 3.141590118408203125));
        float _2125 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
        _2041 = (((((_2105 * _1751) + _447) * cbLight._m0[_2056].x) * _2124) * _2125) + _1927;
        _2043 = (((((_2105 * _1753) + _449) * cbLight._m0[_2056].y) * _2124) * _2125) + _1929;
        _2045 = (((((_2105 * _1754) + _450) * cbLight._m0[_2056].z) * _2124) * _2125) + _1931;
    }
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    if (_1557.y == 0u)
    {
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2200;
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2200;
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2200;
        uvec4 _2215 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2216 = _2215.x;
        uint _2227 = uint((float(_2215.y) * floor(float(uint(cbSceneParam._m0[85u].y * _382) / _2216))) + floor(float(uint(cbSceneParam._m0[85u].x * _381) / _2216)));
        float _2237 = (log2(_2203 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2238 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        uint _2241 = uint(isnan(14.0) ? _2238 : (isnan(_2238) ? 14.0 : min(_2238, 14.0)));
        uvec4 _2246 = texelFetch(g_lightClusterGridBuffer, int(((_2241 << 2u) + (_2227 << 6u)) >> 2u));
        uint _2247 = _2246.x;
        uint _2248 = _2215.z;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        if (((((1u << ((_2248 >> 4u) & 15u)) + 4294967295u) & _2247) == 0u) || ((_2248 & 240u) == 0u))
        {
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
        }
        else
        {
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            uint _2507 = 0u;
            uint _2516;
            bool _2517;
            for (;;)
            {
                _2516 = texelFetch(g_lightClassification, int((((_2241 << 5u) + (_2227 << 9u)) + (_2507 << 2u)) >> 2u)).x;
                _2517 = _2516 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2517)
                {
                    frontier_phi_66_pred = _2501;
                    frontier_phi_66_pred_1 = _2506;
                    frontier_phi_66_pred_2 = _2505;
                    frontier_phi_66_pred_3 = _2504;
                    frontier_phi_66_pred_4 = _2503;
                    frontier_phi_66_pred_5 = _2502;
                }
                else
                {
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    uint _2652;
                    _2646 = _2501;
                    _2647 = _2502;
                    _2648 = _2503;
                    _2649 = _2504;
                    _2650 = _2505;
                    _2651 = _2506;
                    _2652 = _2516;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    for (;;)
                    {
                        uint _2656 = uint(findLSB(_2652)) + (_2507 << 5u);
                        uint _2653 = (_2652 + 4294967295u) & _2652;
                        uint _2658 = _2656 * 48u;
                        vec4 _2672 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2658)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 3u)).x));
                        uint _2678 = (_2656 * 48u) + 4u;
                        vec4 _2691 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2678)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 3u)).x));
                        uint _2697 = (_2656 * 48u) + 8u;
                        vec3 _2708 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x));
                        float _2712 = _2672.x - _2201;
                        float _2713 = _2672.y - _2202;
                        float _2714 = _2672.z - _2203;
                        float _2715 = dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714));
                        float _2718 = inversesqrt(_2715);
                        float _2719 = _2718 * _2712;
                        float _2720 = _2718 * _2713;
                        float _2721 = _2718 * _2714;
                        float _2722 = dot(vec3(_402, _405, _408), vec3(_2719, _2720, _2721));
                        float _2727 = 1.0 - (_2715 * _2672.w);
                        float _4054 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2728 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                        float _2729 = sqrt(_2715) * _2691.w;
                        float _2732 = 1.39999997615814208984375 / (_2729 + 1.39999997615814208984375);
                        float _2733 = _2732 * _2732;
                        float _2736 = ((1.0 - _2733) * _2722) + _2733;
                        float _2739 = _2729 * _2729;
                        float _2743 = ((isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0))) * _2728) / ((_2739 * 0.699999988079071044921875) + 1.0);
                        float _2747 = (-0.0) - _2201;
                        float _2748 = (-0.0) - _2202;
                        float _2749 = (-0.0) - _2203;
                        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
                        float _2754 = _2753 * _2747;
                        float _2755 = _2753 * _2748;
                        float _2756 = _2753 * _2749;
                        float _2764 = exp2(log2(1.0 / ((_2739 * 3.5) + 5.0)) * 0.25);
                        float _2765 = 1.0 - _478;
                        float _2772 = sqrt(1.0 - ((1.0 - (_2765 * _2765)) * (1.0 - (_2764 * _2764))));
                        float _2773 = _2772 * _2772;
                        float _2774 = _2773 * _2773;
                        float _2775 = _2754 + _2719;
                        float _2776 = _2755 + _2720;
                        float _2777 = _2756 + _2721;
                        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
                        float _2785 = dot(vec3(_402, _405, _408), vec3(_2754, _2755, _2756));
                        float _4070 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2788 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2789 = dot(vec3(_402, _405, _408), vec3(_2781 * _2775, _2781 * _2776, _2781 * _2777));
                        float _4081 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2792 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2796 = ((_2792 * _2792) * (_2774 + (-1.0))) + 1.0;
                        float _2797 = _2732 * _2773;
                        float _2798 = _2797 * _2797;
                        float _2801 = ((1.0 - _2798) * _2722) + _2798;
                        float _4092 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2803 = 1.0 - _2773;
                        float _2813 = (0.5 / (((_2802 * ((_2788 * _2803) + _2773)) + 9.9999999392252902907785028219223e-09) + (((_2802 * _2803) + _2773) * _2788))) * _2802;
                        float _4103 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2824 = (((_2774 * 3.1415927410125732421875) * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) / ((_2796 * _2796) * ((_2739 * 2.1991131305694580078125) + 3.141590118408203125))) * _2728;
                        _2576 = (_2743 * _2691.x) + _2649;
                        _2577 = (_2743 * _2691.y) + _2650;
                        _2578 = (_2743 * _2691.z) + _2651;
                        _2573 = (_2824 * _2708.x) + _2646;
                        _2574 = (_2824 * _2708.y) + _2647;
                        _2575 = (_2824 * _2708.z) + _2648;
                        if (_2653 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2646 = _2573;
                            _2647 = _2574;
                            _2648 = _2575;
                            _2649 = _2576;
                            _2650 = _2577;
                            _2651 = _2578;
                            _2652 = _2653;
                        }
                    }
                    frontier_phi_66_pred = _2573;
                    frontier_phi_66_pred_1 = _2578;
                    frontier_phi_66_pred_2 = _2577;
                    frontier_phi_66_pred_3 = _2576;
                    frontier_phi_66_pred_4 = _2575;
                    frontier_phi_66_pred_5 = _2574;
                }
                _2349 = frontier_phi_66_pred;
                _2359 = frontier_phi_66_pred_1;
                _2357 = frontier_phi_66_pred_2;
                _2355 = frontier_phi_66_pred_3;
                _2353 = frontier_phi_66_pred_4;
                _2351 = frontier_phi_66_pred_5;
                uint _2508 = _2507 + 1u;
                if (_2508 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2501 = _2349;
                    _2502 = _2351;
                    _2503 = _2353;
                    _2504 = _2355;
                    _2505 = _2357;
                    _2506 = _2359;
                    _2507 = _2508;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
        }
        uvec4 _2362 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2363 = _2362.z;
        uint _2365 = (_2363 >> 8u) & 15u;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        if (((4294967295u << _2365) & _2247) == 0u)
        {
            _2469 = _2348;
            _2471 = _2350;
            _2473 = _2352;
            _2475 = _2354;
            _2477 = _2356;
            _2479 = _2358;
        }
        else
        {
            float _2494 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
            float _2495 = _2494 * _2201;
            float _2496 = _2494 * _2202;
            float _2497 = _2494 * _2203;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2365 < ((_2363 >> 12u) & 15u))
            {
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2629 = _2348;
                float _2630 = _2350;
                float _2631 = _2352;
                float _2632 = _2354;
                float _2633 = _2356;
                float _2634 = _2358;
                uint _2635 = _2365;
                uint _2644;
                bool _2645;
                for (;;)
                {
                    _2644 = texelFetch(g_lightClassification, int((((_2241 << 5u) + (_2227 << 9u)) + (_2635 << 2u)) >> 2u)).x;
                    _2645 = _2644 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2645)
                    {
                        frontier_phi_77_pred = _2634;
                        frontier_phi_77_pred_1 = _2633;
                        frontier_phi_77_pred_2 = _2632;
                        frontier_phi_77_pred_3 = _2631;
                        frontier_phi_77_pred_4 = _2630;
                        frontier_phi_77_pred_5 = _2629;
                    }
                    else
                    {
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _2851 = _2629;
                        float _2852 = _2630;
                        float _2853 = _2631;
                        float _2854 = _2632;
                        float _2855 = _2633;
                        float _2856 = _2634;
                        uint _2857 = _2644;
                        uint _2858;
                        vec4 _2883;
                        float _2884;
                        vec4 _2899;
                        vec3 _2911;
                        vec4 _2927;
                        vec4 _2943;
                        float _2990;
                        bool _2991;
                        for (;;)
                        {
                            uint _2868 = ((_2635 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2857));
                            _2858 = (_2857 + 4294967295u) & _2857;
                            uint _2870 = _2868 * 40u;
                            _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            _2884 = _2883.w;
                            uint _2886 = (_2868 * 40u) + 4u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2901 = (_2868 * 40u) + 8u;
                            _2911 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x));
                            uint _2914 = (_2868 * 40u) + 16u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2930 = (_2868 * 40u) + 20u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2946 = (_2868 * 40u) + 24u;
                            vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2965 = (_2868 * 40u) + 28u;
                            vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            _2990 = fma(_2203, _2978.z, fma(_2202, _2978.y, _2978.x * _2201)) + _2978.w;
                            _2991 = !((fma(_2203, _2959.z, fma(_2202, _2959.y, _2959.x * _2201)) + _2959.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2991)
                            {
                                float _3018 = _2883.x - _2201;
                                float _3019 = _2883.y - _2202;
                                float _3020 = _2883.z - _2203;
                                float _3021 = dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020));
                                float _3024 = inversesqrt(_3021);
                                float _3025 = _3024 * _3018;
                                float _3026 = _3024 * _3019;
                                float _3027 = _3024 * _3020;
                                float _3031 = 1.0 - (_3021 / (_2884 * _2884));
                                float _4114 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3032 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                                float _3036 = sqrt(_3021) * _2899.w;
                                float _3038 = 1.39999997615814208984375 / (_3036 + 1.39999997615814208984375);
                                float _3039 = _3038 * _3038;
                                float _3042 = ((1.0 - _3039) * dot(vec3(_3025, _3026, _3027), vec3(_402, _405, _408))) + _3039;
                                float _3045 = _3036 * _3036;
                                float _3049 = (fma(_2203, _2927.z, fma(_2202, _2927.y, _2927.x * _2201)) + _2927.w) / _2990;
                                float _3050 = (fma(_2203, _2943.z, fma(_2202, _2943.y, _2943.x * _2201)) + _2943.w) / _2990;
                                float _3054 = 1.0 - dot(vec2(_3049, _3050), vec2(_3049, _3050));
                                float _4130 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3055 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3056 = _3055 * (((isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))) * _3032) / ((_3045 * 0.699999988079071044921875) + 1.0));
                                float _3068 = exp2(log2(1.0 / ((_3045 * 3.5) + 5.0)) * 0.25);
                                float _3069 = 1.0 - _478;
                                float _3076 = sqrt(1.0 - ((1.0 - (_3069 * _3069)) * (1.0 - (_3068 * _3068))));
                                float _3077 = _3076 * _3076;
                                float _3078 = _3077 * _3077;
                                float _3079 = _3025 - _2495;
                                float _3080 = _3026 - _2496;
                                float _3081 = _3027 - _2497;
                                float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                                float _3089 = dot(vec3(_402, _405, _408), vec3((-0.0) - _2495, (-0.0) - _2496, (-0.0) - _2497));
                                float _4141 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3092 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3093 = dot(vec3(_402, _405, _408), vec3(_3085 * _3079, _3085 * _3080, _3085 * _3081));
                                float _4152 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3096 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3100 = ((_3096 * _3096) * (_3078 + (-1.0))) + 1.0;
                                float _3101 = _3038 * _3077;
                                float _3102 = _3101 * _3101;
                                float _3108 = ((1.0 - _3102) * dot(vec3(_402, _405, _408), vec3(_3025, _3026, _3027))) + _3102;
                                float _4163 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3109 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3110 = 1.0 - _3077;
                                float _3120 = (0.5 / (((_3109 * ((_3092 * _3110) + _3077)) + 9.9999999392252902907785028219223e-09) + (((_3109 * _3110) + _3077) * _3092))) * _3109;
                                float _4174 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3130 = (_3055 * _3032) * (((_3078 * 3.1415927410125732421875) * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) / ((_3100 * _3100) * ((_3045 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3056 * _2899.y;
                                frontier_phi_83_pred_1 = _3056 * _2899.x;
                                frontier_phi_83_pred_2 = _3130 * _2911.z;
                                frontier_phi_83_pred_3 = _3130 * _2911.y;
                                frontier_phi_83_pred_4 = _3130 * _2911.x;
                                frontier_phi_83_pred_5 = _3056 * _2899.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3138 = frontier_phi_83_pred;
                            _3137 = frontier_phi_83_pred_1;
                            _3136 = frontier_phi_83_pred_2;
                            _3135 = frontier_phi_83_pred_3;
                            _3134 = frontier_phi_83_pred_4;
                            _3139 = frontier_phi_83_pred_5;
                            _2841 = _3137 + _2854;
                            _2842 = _3138 + _2855;
                            _2843 = _3139 + _2856;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            if (_2858 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2858;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2843;
                        frontier_phi_77_pred_1 = _2842;
                        frontier_phi_77_pred_2 = _2841;
                        frontier_phi_77_pred_3 = _2840;
                        frontier_phi_77_pred_4 = _2839;
                        frontier_phi_77_pred_5 = _2838;
                    }
                    _2480 = frontier_phi_77_pred;
                    _2478 = frontier_phi_77_pred_1;
                    _2476 = frontier_phi_77_pred_2;
                    _2474 = frontier_phi_77_pred_3;
                    _2472 = frontier_phi_77_pred_4;
                    _2470 = frontier_phi_77_pred_5;
                    uint _2636 = _2635 + 1u;
                    if (_2636 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2629 = _2470;
                        _2630 = _2472;
                        _2631 = _2474;
                        _2632 = _2476;
                        _2633 = _2478;
                        _2634 = _2480;
                        _2635 = _2636;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2474;
                frontier_phi_58_59_ladder_1 = _2480;
                frontier_phi_58_59_ladder_2 = _2478;
                frontier_phi_58_59_ladder_3 = _2476;
                frontier_phi_58_59_ladder_4 = _2472;
                frontier_phi_58_59_ladder_5 = _2470;
            }
            else
            {
                frontier_phi_58_59_ladder = _2352;
                frontier_phi_58_59_ladder_1 = _2358;
                frontier_phi_58_59_ladder_2 = _2356;
                frontier_phi_58_59_ladder_3 = _2354;
                frontier_phi_58_59_ladder_4 = _2350;
                frontier_phi_58_59_ladder_5 = _2348;
            }
            _2469 = frontier_phi_58_59_ladder_5;
            _2471 = frontier_phi_58_59_ladder_4;
            _2473 = frontier_phi_58_59_ladder;
            _2475 = frontier_phi_58_59_ladder_3;
            _2477 = frontier_phi_58_59_ladder_2;
            _2479 = frontier_phi_58_59_ladder_1;
        }
        float _2484 = isnan(1.0) ? _462 : (isnan(_462) ? 1.0 : min(_462, 1.0));
        _2260 = (_2484 * _2475) + _1693;
        _2262 = (_2484 * _2477) + _1695;
        _2264 = (_2484 * _2479) + _1697;
        _2266 = ((_2469 * _447) * _2484) + _2041;
        _2268 = ((_2471 * _449) * _2484) + _2043;
        _2270 = ((_2473 * _450) * _2484) + _2045;
    }
    else
    {
        _2260 = _1693;
        _2262 = _1695;
        _2264 = _1697;
        _2266 = _2041;
        _2268 = _2043;
        _2270 = _2045;
    }
    float _4190 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4201 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4212 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _2287 = ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2260 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _462))) + ((_2266 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1304)) * cbPerFrame._m0[3u].x);
    float _2288 = ((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2262 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _462))) + ((_2268 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1304)) * cbPerFrame._m0[3u].x);
    float _2289 = ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2264 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _462))) + ((_2270 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1304)) * cbPerFrame._m0[3u].x);
    uint _2290 = _421 + 6u;
    float _2298 = _381 / cbSceneParam._m0[86u].x;
    float _2299 = _382 / cbSceneParam._m0[86u].y;
    vec4 _2313 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, (log2((isnan(cbSceneParam._m0[77u].w) ? _302 : (isnan(_302) ? cbSceneParam._m0[77u].w : min(_302, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2315 = _2313.x;
    float _2316 = _2313.y;
    float _2317 = _2313.z;
    float _2318 = _2313.w;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_302 > cbSceneParam._m0[78u].w)
    {
        float _2373 = isnan(_302) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _302 : min(cbSceneParam._m0[80u].w, _302));
        float _2374 = _2373 / _302;
        float _2385 = _2374 * _353;
        float _2386 = _354 * _2374;
        float _2387 = (-0.0) - _2386;
        float _2389 = _2374 * _355;
        float _2391 = (cbSceneParam._m0[77u].w * _2387) / _2373;
        float _2392 = _2391 + cbSceneParam._m0[79u].w;
        float _2393 = cbSceneParam._m0[79u].w - _2386;
        float _2399 = sqrt(((_2385 * _2385) + (_2386 * _2386)) + (_2389 * _2389));
        float _2402 = (1.0 - (cbSceneParam._m0[77u].w / _2373)) * _2399;
        float _2407 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2409 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2586;
        if (abs((_2387 - _2391) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2586 = ((((_2392 > 0.0) ? exp2(_2407 * _2392) : (2.0 - exp2(_2409 * _2392))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2402;
        }
        else
        {
            float _2530 = 1.0 / cbSceneParam._m0[80u].x;
            float _2531 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : max(_2392, _2393));
            float _2532 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : min(_2392, _2393));
            float _2541 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : min(_2531, 0.0));
            float _2542 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : min(_2532, 0.0));
            _2586 = ((abs(_2399 / _2387) * cbSceneParam._m0[80u].y) * ((((_2541 - _2542) * 2.0) - ((exp2(_2407 * (isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0)))) - exp2(_2407 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0))))) * _2530)) - ((exp2(_2409 * _2541) - exp2(_2409 * _2542)) * _2530))) + (_2402 * cbSceneParam._m0[80u].z);
        }
        vec4 _2588 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, 1.0), 0.0);
        float _2597 = exp2((_2586 * (-1.44269502162933349609375)) * (1.0 - _2588.w));
        float _2598 = log2(_2597);
        float _2614 = log2(_2318);
        _2411 = (exp2(_2614 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].x)) * _2588.x) / cbSceneParam._m0[78u].x)) + _2315;
        _2413 = (exp2(_2614 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].y)) * _2588.y) / cbSceneParam._m0[78u].y)) + _2316;
        _2415 = (exp2(_2614 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].z)) * _2588.z) / cbSceneParam._m0[78u].z)) + _2317;
        _2417 = _2597 * _2318;
    }
    else
    {
        _2411 = _2315;
        _2413 = _2316;
        _2415 = _2317;
        _2417 = _2318;
    }
    bool _2624;
    vec4 _2427;
    vec4 _2449;
    float _2451;
    float _2455;
    float _2456;
    float _2457;
    float _2458;
    bool _2468;
    for (;;)
    {
        _2427 = cbMatDynParam._m0[0u];
        float _2429 = roundEven(_2427.y);
        bool _2430 = _2429 == 3.0;
        float _2431 = log2(_2417);
        float _2438 = exp2(_2431 * cbSceneParam._m0[78u].x) * _2287;
        float _2439 = exp2(_2431 * cbSceneParam._m0[78u].y) * _2288;
        float _2440 = exp2(_2431 * cbSceneParam._m0[78u].z) * _2289;
        float _2447 = _369 + (-0.5);
        _2449 = cbMtdParam._m0[1u];
        _2451 = _2449.y * _2447;
        float _2454 = (_2429 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2455 = _2454 * (_2430 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2411)));
        _2456 = _2454 * (_2430 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2413)));
        _2457 = _2454 * (_2430 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2415)));
        _2458 = _2447 * 0.999000012874603271484375;
        _2468 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2468)
        {
            if ((cbInstanceData._m0[_421 + 7u].x + _2458) < 0.5)
            {
                _2624 = true;
                break;
            }
        }
        uint _2565 = _423 + uint(_2427.w);
        if ((cbInstanceData._m0[_2565].w < 1.0) && ((cbInstanceData._m0[_2565].w + _2458) < 0.5))
        {
            _2624 = true;
            break;
        }
        if ((_2451 + 1.0) < _2449.x)
        {
            _2624 = true;
            break;
        }
        _2624 = false;
        break;
    }
    float _2829;
    if (_2624)
    {
        discard_state = true;
        _2829 = 0.0;
    }
    else
    {
        _2829 = cbInstanceData._m0[_2290].w;
    }
    SV_Target.x = _2455;
    SV_Target.y = _2456;
    SV_Target.z = _2457;
    SV_Target.w = _2829;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2290].w;
    discard_exit();
}


