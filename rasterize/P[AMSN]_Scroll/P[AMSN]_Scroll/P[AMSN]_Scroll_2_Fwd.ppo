#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _849;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _181 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _182 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _183 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222 = ((cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.x;
    float _223 = ((cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.y;
    vec4 _236 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_222 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_223 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _242 = _236.x * cbMtdParam._m0[9u].x;
    float _243 = _236.y * cbMtdParam._m0[9u].y;
    float _244 = _236.z * cbMtdParam._m0[9u].z;
    vec4 _256 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _222) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _223) + cbTextureTilingScale._m0[2u].w));
    float _260 = cbMtdParam._m0[10u].x + _256.x;
    vec4 _272 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _222) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _223) + cbTextureTilingScale._m0[1u].w));
    float _276 = _272.z;
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3185 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))));
    float _292 = fma(_289, _195 * NORMAL.x, fma(_282, _202 * TANGENT.x, (_188 * _181) * _280));
    float _295 = fma(_289, _195 * NORMAL.y, fma(_282, _202 * TANGENT.y, (_188 * _182) * _280));
    float _298 = fma(_289, _195 * NORMAL.z, fma(_282, _202 * TANGENT.z, (_188 * _183) * _280));
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _303 = _302 * _292;
    float _304 = _302 * _295;
    float _305 = _302 * _298;
    float _3196 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _306 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
    float _3207 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3218 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3229 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3240 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _310 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
    float _326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _367 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _377 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _367);
    float _378 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _367);
    float _379 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _367);
    float _383 = inversesqrt(dot(vec3(_377, _378, _379), vec3(_377, _378, _379)));
    float _384 = _377 * _383;
    float _385 = _378 * _383;
    float _386 = _379 * _383;
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _414 = fma(_305, cbSceneParam._m0[5u].z, fma(_304, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _303));
    float _417 = fma(_305, cbSceneParam._m0[6u].z, fma(_304, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _303));
    float _420 = fma(_305, cbSceneParam._m0[7u].z, fma(_304, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _303));
    uint _433 = uint(roundEven(NORMAL.w)) * 13u;
    uint _436 = (_433 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _442 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0)))) * cbInstanceData._m0[_436].x;
    float _443 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0)))) * cbInstanceData._m0[_436].y;
    float _444 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0)))) * cbInstanceData._m0[_436].z;
    float _3251 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
    float _3262 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _3273 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _448 = 1.0 - _310;
    float _449 = _445 * _448;
    float _450 = _446 * _448;
    float _451 = _447 * _448;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _310;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _310;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _310;
    float _459 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    vec4 _471 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _474 = _471.x * TEXCOORD.z;
    float _475 = dot(vec3(_303, _304, _305), vec3(_384, _385, _386));
    float _478 = _475 * 2.0;
    float _482 = (_478 * _303) - _384;
    float _483 = (_478 * _304) - _385;
    float _484 = (_478 * _305) - _386;
    float _488 = abs(dot(vec3(_384, _385, _386), vec3(_303, _304, _305)));
    float _3284 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _490 = sqrt(_306);
    float _503 = exp2((_490 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_490 * 3.0));
    float _509 = (1.0 - _503) * ((_490 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _510 = _503 * _490;
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _848;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _573 = fma(_546, cbModelParam._m0[26u].z, fma(_542, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538));
        float _577 = fma(_546, cbModelParam._m0[27u].z, fma(_542, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538));
        float _581 = fma(_546, cbModelParam._m0[28u].z, fma(_542, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538));
        float _606 = _538 + _303;
        float _607 = _542 + _304;
        float _608 = _546 + _305;
        float _618 = fma(_608, cbModelParam._m0[26u].z, fma(_607, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _606)) - _573;
        float _619 = fma(_608, cbModelParam._m0[27u].z, fma(_607, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _606)) - _577;
        float _620 = fma(_608, cbModelParam._m0[28u].z, fma(_607, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _606)) - _581;
        float _624 = inversesqrt(dot(vec3(_618, _619, _620), vec3(_618, _619, _620)));
        float _637 = ((_624 * _618) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_573 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_624 * _619) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_577 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_624 * _620) / cbModelParam._m0[34u].z) + ((((((_581 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        float _676 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_642.x + (-0.5));
        float _678 = _676 * (_642.y + (-0.5));
        float _679 = _676 * (_642.z + (-0.5));
        float _686 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_649.x + (-0.5));
        float _688 = _686 * (_649.y + (-0.5));
        float _689 = _686 * (_649.z + (-0.5));
        float _696 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_656.x + (-0.5));
        float _698 = _696 * (_656.y + (-0.5));
        float _699 = _696 * (_656.z + (-0.5));
        float _706 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_663.x + (-0.5));
        float _708 = _706 * (_663.y + (-0.5));
        float _709 = _706 * (_663.z + (-0.5));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = _677 * 0.5;
        float _714 = _687 * 0.5;
        float _715 = _697 * 0.5;
        float _716 = dot(vec3(_713, _714, _715), vec3(_713, _714, _715));
        float _721 = (_716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_716);
        float _730 = (dot(vec3(_303, _304, _305), vec3(_721 * _713, _721 * _714, _721 * _715)) + 1.0) * 0.5;
        float _3310 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _740 = sqrt(((_714 * _714) + (_713 * _713)) + (_715 * _715)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3321 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _742 = _741 * 2.0;
        float _746 = (1.0 - _741) / (_741 + 1.0);
        float _3332 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _756 = ((((1.0 - _747) * (_742 + 2.0)) * exp2(log2(isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))) * (_742 + 1.0))) + _747) * _710;
        float _757 = _678 * 0.5;
        float _758 = _688 * 0.5;
        float _759 = _698 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _773 = (dot(vec3(_303, _304, _305), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3343 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _782 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3354 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3365 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))) * (_784 + 1.0))) + _789) * _711;
        float _799 = _679 * 0.5;
        float _800 = _689 * 0.5;
        float _801 = _699 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_303, _304, _305), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3376 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3387 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3398 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * (_826 + 1.0))) + _831) * _712;
        _848 = _679;
        _850 = _678;
        _851 = _677;
        _852 = _689;
        _853 = _688;
        _854 = _687;
        _855 = _699;
        _856 = _698;
        _857 = _697;
        _858 = _712;
        _859 = _711;
        _860 = _710;
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
    }
    else
    {
        _848 = _849;
        _850 = _849;
        _851 = _849;
        _852 = _849;
        _853 = _849;
        _854 = _849;
        _855 = _849;
        _856 = _849;
        _857 = _849;
        _858 = _849;
        _859 = _849;
        _860 = _849;
        _861 = 0.0;
        _862 = 0.0;
        _863 = 0.0;
    }
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _889 = fma(_546, cbModelParam._m0[30u].z, fma(_542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _538));
        float _893 = fma(_546, cbModelParam._m0[31u].z, fma(_542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _538));
        float _897 = fma(_546, cbModelParam._m0[32u].z, fma(_542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _538));
        float _920 = _538 + _303;
        float _921 = _542 + _304;
        float _922 = _546 + _305;
        float _932 = fma(_922, cbModelParam._m0[30u].z, fma(_921, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920)) - _889;
        float _933 = fma(_922, cbModelParam._m0[31u].z, fma(_921, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920)) - _893;
        float _934 = fma(_922, cbModelParam._m0[32u].z, fma(_921, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920)) - _897;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_889 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_893 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[35u].z) + ((((((_897 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _988 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_955.x + (-0.5));
        float _990 = _988 * (_955.y + (-0.5));
        float _991 = _988 * (_955.z + (-0.5));
        float _998 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_962.x + (-0.5));
        float _1000 = _998 * (_962.y + (-0.5));
        float _1001 = _998 * (_962.z + (-0.5));
        float _1008 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_969.x + (-0.5));
        float _1010 = _1008 * (_969.y + (-0.5));
        float _1011 = _1008 * (_969.z + (-0.5));
        float _1018 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_976.x + (-0.5));
        float _1020 = _1018 * (_976.y + (-0.5));
        float _1021 = _1018 * (_976.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_303, _304, _305), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3461 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_1052 + 1.0))) + _1057) * _1022;
        float _1067 = _990 * 0.5;
        float _1068 = _1000 * 0.5;
        float _1069 = _1010 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_303, _304, _305), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3494 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_1094 + 1.0))) + _1099) * _1023;
        float _1109 = _991 * 0.5;
        float _1110 = _1001 * 0.5;
        float _1111 = _1011 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_303, _304, _305), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3527 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1136 + 1.0))) + _1141) * _1024;
        _1158 = _991;
        _1159 = _990;
        _1160 = _989;
        _1161 = _1001;
        _1162 = _1000;
        _1163 = _999;
        _1164 = _1011;
        _1165 = _1010;
        _1166 = _1009;
        _1167 = _1024;
        _1168 = _1023;
        _1169 = _1022;
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _849;
        _1159 = _849;
        _1160 = _849;
        _1161 = _849;
        _1162 = _849;
        _1163 = _849;
        _1164 = _849;
        _1165 = _849;
        _1166 = _849;
        _1167 = _849;
        _1168 = _849;
        _1169 = _849;
        _1170 = 0.0;
        _1171 = 0.0;
        _1172 = 0.0;
    }
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _863)) + _863;
    float _1205 = fma(_1184, cbSceneParam._m0[89u].z, fma(_1183, cbSceneParam._m0[89u].y, _1182 * cbSceneParam._m0[89u].x));
    float _1208 = fma(_1184, cbSceneParam._m0[90u].z, fma(_1183, cbSceneParam._m0[90u].y, _1182 * cbSceneParam._m0[90u].x));
    float _1211 = fma(_1184, cbSceneParam._m0[91u].z, fma(_1183, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1182));
    float _1226 = _482 * 0.5;
    float _1227 = _483 * 0.5;
    float _1228 = _484 * 0.5;
    float _1229 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1232 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1235 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1269;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1242 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_848, _852, _855, _858));
        float _1246 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_850, _853, _856, _859));
        float _1250 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_851, _854, _857, _860));
        float _1257 = dot(vec4(cbModelParam._m0[39u]), vec4(_1226, _1227, _1228, 1.0));
        _1269 = dot(vec3(isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1257) ? 0.0 : (isnan(0.0) ? _1257 : max(0.0, _1257))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1269 = 1.0;
    }
    float _1280;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1271 = dot(vec4(cbModelParam._m0[40u]), vec4(_1226, _1227, _1228, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1284 = (_1280 * cbModelParam._m0[1u].x) + (_1269 * (1.0 - cbModelParam._m0[1u].x));
    float _1294 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _306);
    float _1295 = isnan(_1294) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1294 : min(cbModelParam._m0[25u].z, _1294));
    float _1377;
    float _1379;
    float _1381;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1344 = fma(_546, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538)) + cbModelParam._m0[13u].w;
        float _1348 = fma(_546, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538)) + cbModelParam._m0[14u].w;
        float _1352 = fma(_546, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538)) + cbModelParam._m0[15u].w;
        float _1355 = fma(_484, cbModelParam._m0[13u].z, fma(_483, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _482));
        float _1358 = fma(_484, cbModelParam._m0[14u].z, fma(_483, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _482));
        float _1361 = fma(_484, cbModelParam._m0[15u].z, fma(_483, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _482));
        float _1389;
        if (_1355 > 0.0)
        {
            _1389 = abs((1.0 - _1344) / _1355);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1344 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1389 = frontier_phi_14_12_ladder;
        }
        float _1596;
        if (_1358 > 0.0)
        {
            _1596 = abs((1.0 - _1348) / _1358);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1348 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1596 = frontier_phi_23_19_ladder;
        }
        float _1850;
        if (_1361 > 0.0)
        {
            _1850 = abs((1.0 - _1352) / _1361);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1352 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1850 = frontier_phi_35_30_ladder;
        }
        float _1852 = isnan(_1596) ? _1389 : (isnan(_1389) ? _1596 : min(_1389, _1596));
        float _1853 = isnan(_1850) ? _1852 : (isnan(_1852) ? _1850 : min(_1852, _1850));
        float _1857 = (_1853 * _1355) + _1344;
        float _1858 = (_1853 * _1358) + _1348;
        float _1859 = (_1853 * _1361) + _1352;
        float _1860 = _1853 * 9.9999997473787516355514526367188e-05;
        float _1862 = (-1.0) - _1860;
        float _1864 = _1860 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1859 > _1864) || ((_1859 < _1862) || ((_1858 > _1864) || ((_1858 < _1862) || ((_1857 < _1862) || (_1857 > _1864))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1987 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1859, cbModelParam._m0[9u].z, fma(_1858, cbModelParam._m0[9u].y, _1857 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1859, cbModelParam._m0[10u].z, fma(_1858, cbModelParam._m0[10u].y, _1857 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1859, cbModelParam._m0[11u].z, fma(_1858, cbModelParam._m0[11u].y, _1857 * cbModelParam._m0[11u].x))), _1295);
            frontier_phi_13_35_ladder = _1987.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1987.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1987.x * cbModelParam._m0[1u].y;
        }
        _1377 = frontier_phi_13_35_ladder_2;
        _1379 = frontier_phi_13_35_ladder_1;
        _1381 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_482, _483, _484), _1295);
        _1377 = _1365.x * cbModelParam._m0[1u].y;
        _1379 = _1365.y * cbModelParam._m0[1u].y;
        _1381 = _1365.z * cbModelParam._m0[1u].y;
    }
    float _1385 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _306);
    float _1386 = isnan(_1385) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1385 : min(cbModelParam._m0[25u].w, _1385));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1442 = fma(_546, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538)) + cbModelParam._m0[21u].w;
        float _1446 = fma(_546, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538)) + cbModelParam._m0[22u].w;
        float _1450 = fma(_546, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538)) + cbModelParam._m0[23u].w;
        float _1453 = fma(_484, cbModelParam._m0[21u].z, fma(_483, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _482));
        float _1456 = fma(_484, cbModelParam._m0[22u].z, fma(_483, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _482));
        float _1459 = fma(_484, cbModelParam._m0[23u].z, fma(_483, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _482));
        float _1601;
        if (_1453 > 0.0)
        {
            _1601 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1601 = frontier_phi_25_21_ladder;
        }
        float _1877;
        if (_1456 > 0.0)
        {
            _1877 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1877 = frontier_phi_37_32_ladder;
        }
        float _2090;
        if (_1459 > 0.0)
        {
            _2090 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2090 = frontier_phi_46_43_ladder;
        }
        float _2092 = isnan(_1877) ? _1601 : (isnan(_1601) ? _1877 : min(_1601, _1877));
        float _2093 = isnan(_2090) ? _2092 : (isnan(_2092) ? _2090 : min(_2092, _2090));
        float _2097 = (_2093 * _1453) + _1442;
        float _2098 = (_2093 * _1456) + _1446;
        float _2099 = (_2093 * _1459) + _1450;
        float _2100 = _2093 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2100;
        float _2103 = _2100 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2099 > _2103) || ((_2099 < _2101) || ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 < _2101) || (_2097 > _2103))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2298 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2099, cbModelParam._m0[17u].z, fma(_2098, cbModelParam._m0[17u].y, _2097 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2099, cbModelParam._m0[18u].z, fma(_2098, cbModelParam._m0[18u].y, _2097 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2099, cbModelParam._m0[19u].z, fma(_2098, cbModelParam._m0[19u].y, _2097 * cbModelParam._m0[19u].x))), _1386);
            frontier_phi_22_46_ladder = _2298.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2298.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2298.x * cbModelParam._m0[1u].z;
        }
        _1478 = frontier_phi_22_46_ladder_2;
        _1480 = frontier_phi_22_46_ladder_1;
        _1482 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1462 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_482, _483, _484), _1386);
        _1478 = _1462.x * cbModelParam._m0[1u].z;
        _1480 = _1462.y * cbModelParam._m0[1u].z;
        _1482 = _1462.z * cbModelParam._m0[1u].z;
    }
    float _1495 = (((_509 * _459) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1478 - _1377)) + _1377);
    float _1497 = (((_509 * _461) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1480 - _1379)) + _1379);
    float _1499 = (((_509 * _462) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1482 - _1381)) + _1381);
    float _1502 = fma(_1499, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1495 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1499, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1495 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1499, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, _1495 * cbSceneParam._m0[91u].x));
    uvec4 _1518 = floatBitsToUint(cbInstanceData._m0[_433 + 5u]);
    uint _1520 = _1518.x * 14u;
    uint _1521 = _1520 + 13u;
    float _1528 = _474 + (-1.0);
    float _1533 = (cbLight._m0[_1521].x * _1528) + 1.0;
    float _1534 = (cbLight._m0[_1521].y * _1528) + 1.0;
    float _1535 = (cbLight._m0[_1521].z * _1528) + 1.0;
    float _1536 = (cbLight._m0[_1521].w * _1528) + 1.0;
    uint _1537 = _1520 + 5u;
    float _1543 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
    uint _1547 = _1520 + 4u;
    float _1554 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
    uint _1558 = _1520 | 1u;
    float _1569 = dot(vec3(cbLight._m0[_1520].xyz), vec3(_303, _304, _305));
    float _1572 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_303, _304, _305));
    float _3663 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _3674 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1577 = (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * 0.3183098733425140380859375;
    float _1579 = (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.3183098733425140380859375;
    float _1586 = ((cbLight._m0[_1537].x * _1543) * _1579) + ((cbLight._m0[_1547].x * _1554) * _1577);
    float _1587 = ((_1543 * cbLight._m0[_1537].y) * _1579) + ((_1554 * cbLight._m0[_1547].y) * _1577);
    float _1588 = ((_1543 * cbLight._m0[_1537].z) * _1579) + ((_1554 * cbLight._m0[_1547].z) * _1577);
    uvec4 _1593 = floatBitsToUint(cbLight._m0[_1520 + 12u]);
    bool _1595 = _1593.x == 0u;
    float _1606;
    float _1608;
    float _1610;
    if (_1595)
    {
        _1606 = _1586;
        _1608 = _1587;
        _1610 = _1588;
    }
    else
    {
        uint _1614 = _1520 + 6u;
        float _1630 = (dot(vec3(cbLight._m0[_1520 + 2u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1631 = _1630 * _1630;
        float _3685 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1633 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1606 = (((cbLight._m0[_1614].x * 0.3183098733425140380859375) * _1632) * _1633) + _1586;
        _1608 = (((cbLight._m0[_1614].y * 0.3183098733425140380859375) * _1632) * _1633) + _1587;
        _1610 = (((cbLight._m0[_1614].z * 0.3183098733425140380859375) * _1632) * _1633) + _1588;
    }
    bool _1613 = _1593.y == 0u;
    float _1651;
    float _1653;
    float _1655;
    if (_1613)
    {
        _1651 = _1606;
        _1653 = _1608;
        _1655 = _1610;
    }
    else
    {
        uint _1821 = _1520 + 7u;
        float _1837 = (dot(vec3(cbLight._m0[_1520 + 3u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1838 = _1837 * _1837;
        float _3701 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1840 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
        _1651 = (((cbLight._m0[_1821].x * 0.3183098733425140380859375) * _1839) * _1840) + _1606;
        _1653 = (((cbLight._m0[_1821].y * 0.3183098733425140380859375) * _1839) * _1840) + _1608;
        _1655 = (((cbLight._m0[_1821].z * 0.3183098733425140380859375) * _1839) * _1840) + _1610;
    }
    uint _1658 = _1520 + 8u;
    float _1671 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1520].w)) * _306) * 0.949999988079071044921875);
    float _1672 = _1671 * _1671;
    float _1673 = cbLight._m0[_1520].x + _384;
    float _1674 = cbLight._m0[_1520].y + _385;
    float _1675 = cbLight._m0[_1520].z + _386;
    float _1679 = inversesqrt(dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675)));
    float _1680 = _1679 * _1673;
    float _1681 = _1679 * _1674;
    float _1682 = _1679 * _1675;
    float _1683 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1520].xyz));
    float _3717 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1686 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _1687 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _1688 = dot(vec3(_303, _304, _305), vec3(_1680, _1681, _1682));
    float _3739 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1691 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _1692 = dot(vec3(cbLight._m0[_1520].xyz), vec3(_1680, _1681, _1682));
    float _3750 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1696 = _1672 * _1672;
    float _1700 = ((_1691 * _1691) * (_1696 + (-1.0))) + 1.0;
    float _1708 = exp2(log2(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * 5.0);
    float _1709 = 0.959999978542327880859375 - _456;
    float _1711 = 0.959999978542327880859375 - _457;
    float _1712 = 0.959999978542327880859375 - _458;
    float _1719 = 1.0 - _1672;
    float _1730 = (0.5 / (((_1687 * ((_1686 * _1719) + _1672)) + 9.9999999392252902907785028219223e-09) + (((_1687 * _1719) + _1672) * _1686))) * _1686;
    float _3761 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1732 = (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1696 / ((_1700 * _1700) * 3.141590118408203125));
    uint _1743 = _1520 + 9u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1558].w)) * _306) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1558].x + _384;
    float _1757 = cbLight._m0[_1558].y + _385;
    float _1758 = cbLight._m0[_1558].z + _386;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1558].xyz));
    float _3772 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _1770 = dot(vec3(_303, _304, _305), vec3(_1763, _1764, _1765));
    float _3783 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _1774 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_1763, _1764, _1765));
    float _3794 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1778 = _1755 * _1755;
    float _1782 = ((_1773 * _1773) * (_1778 + (-1.0))) + 1.0;
    float _1789 = exp2(log2(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * 5.0);
    float _1796 = 1.0 - _1755;
    float _1806 = (0.5 / (((_1687 * ((_1769 * _1796) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1687 * _1796) + _1755) * _1769))) * _1769;
    float _3805 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1808 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1778 / ((_1782 * _1782) * 3.141590118408203125));
    float _1818 = (((((_1789 * _1709) + _459) * cbLight._m0[_1743].x) * _1808) * _1543) + (((((_1708 * _1709) + _459) * cbLight._m0[_1658].x) * _1732) * _1554);
    float _1819 = (((((_1789 * _1711) + _461) * cbLight._m0[_1743].y) * _1808) * _1543) + (((((_1708 * _1711) + _461) * cbLight._m0[_1658].y) * _1732) * _1554);
    float _1820 = (((((_1789 * _1712) + _462) * cbLight._m0[_1743].z) * _1808) * _1543) + (((((_1708 * _1712) + _462) * cbLight._m0[_1658].z) * _1732) * _1554);
    float _1882;
    float _1884;
    float _1886;
    if (_1595)
    {
        _1882 = _1818;
        _1884 = _1819;
        _1886 = _1820;
    }
    else
    {
        uint _1888 = _1520 + 2u;
        uint _1892 = _1520 + 10u;
        float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _306) * 0.949999988079071044921875);
        float _1907 = _1906 * _1906;
        float _1908 = cbLight._m0[_1888].x + _384;
        float _1909 = cbLight._m0[_1888].y + _385;
        float _1910 = cbLight._m0[_1888].z + _386;
        float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
        float _1915 = _1914 * _1908;
        float _1916 = _1914 * _1909;
        float _1917 = _1914 * _1910;
        float _1918 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1888].xyz));
        float _3816 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1921 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1922 = dot(vec3(_303, _304, _305), vec3(_1915, _1916, _1917));
        float _3827 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1925 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1926 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_1915, _1916, _1917));
        float _3838 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1930 = _1907 * _1907;
        float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
        float _1941 = exp2(log2(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * 5.0);
        float _1948 = 1.0 - _1907;
        float _1958 = (0.5 / (((_1687 * ((_1921 * _1948) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1687 * _1948) + _1907) * _1921))) * _1921;
        float _3849 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1960 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
        float _1961 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1882 = (((((_1941 * _1709) + _459) * cbLight._m0[_1892].x) * _1960) * _1961) + _1818;
        _1884 = (((((_1941 * _1711) + _461) * cbLight._m0[_1892].y) * _1960) * _1961) + _1819;
        _1886 = (((((_1941 * _1712) + _462) * cbLight._m0[_1892].z) * _1960) * _1961) + _1820;
    }
    float _1996;
    float _1998;
    float _2000;
    if (_1613)
    {
        _1996 = _1882;
        _1998 = _1884;
        _2000 = _1886;
    }
    else
    {
        uint _2007 = _1520 + 3u;
        uint _2011 = _1520 + 11u;
        float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _306) * 0.949999988079071044921875);
        float _2026 = _2025 * _2025;
        float _2027 = cbLight._m0[_2007].x + _384;
        float _2028 = cbLight._m0[_2007].y + _385;
        float _2029 = cbLight._m0[_2007].z + _386;
        float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
        float _2034 = _2033 * _2027;
        float _2035 = _2033 * _2028;
        float _2036 = _2033 * _2029;
        float _2037 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2007].xyz));
        float _3865 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2040 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _2041 = dot(vec3(_303, _304, _305), vec3(_2034, _2035, _2036));
        float _3876 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2044 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _2045 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2034, _2035, _2036));
        float _3887 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2049 = _2026 * _2026;
        float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
        float _2060 = exp2(log2(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * 5.0);
        float _2067 = 1.0 - _2026;
        float _2077 = (0.5 / (((_1687 * ((_2040 * _2067) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_1687 * _2067) + _2026) * _2040))) * _2040;
        float _3898 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2079 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
        float _2080 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
        _1996 = (((((_2060 * _1709) + _459) * cbLight._m0[_2011].x) * _2079) * _2080) + _1882;
        _1998 = (((((_2060 * _1711) + _461) * cbLight._m0[_2011].y) * _2079) * _2080) + _1884;
        _2000 = (((((_2060 * _1712) + _462) * cbLight._m0[_2011].z) * _2079) * _2080) + _1886;
    }
    float _2215;
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    float _2225;
    if (_1518.y == 0u)
    {
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2155;
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2155;
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2155;
        uvec4 _2170 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2171 = _2170.x;
        uint _2182 = uint((float(_2170.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2171))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2171)));
        float _2192 = (log2(_2158 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2193 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        uint _2196 = uint(isnan(14.0) ? _2193 : (isnan(_2193) ? 14.0 : min(_2193, 14.0)));
        uvec4 _2201 = texelFetch(g_lightClusterGridBuffer, int(((_2196 << 2u) + (_2182 << 6u)) >> 2u));
        uint _2202 = _2201.x;
        uint _2203 = _2170.z;
        float _2303;
        float _2305;
        float _2307;
        float _2309;
        float _2311;
        float _2313;
        if (((((1u << ((_2203 >> 4u) & 15u)) + 4294967295u) & _2202) == 0u) || ((_2203 & 240u) == 0u))
        {
            _2303 = 0.0;
            _2305 = 0.0;
            _2307 = 0.0;
            _2309 = 0.0;
            _2311 = 0.0;
            _2313 = 0.0;
        }
        else
        {
            float _2304;
            float _2306;
            float _2308;
            float _2310;
            float _2312;
            float _2314;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            float _2453 = 0.0;
            uint _2454 = 0u;
            uint _2463;
            bool _2464;
            for (;;)
            {
                _2463 = texelFetch(g_lightClassification, int((((_2196 << 5u) + (_2182 << 9u)) + (_2454 << 2u)) >> 2u)).x;
                _2464 = _2463 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2464)
                {
                    frontier_phi_61_pred = _2448;
                    frontier_phi_61_pred_1 = _2453;
                    frontier_phi_61_pred_2 = _2452;
                    frontier_phi_61_pred_3 = _2451;
                    frontier_phi_61_pred_4 = _2450;
                    frontier_phi_61_pred_5 = _2449;
                }
                else
                {
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    uint _2578;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2451;
                    _2576 = _2452;
                    _2577 = _2453;
                    _2578 = _2463;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    for (;;)
                    {
                        uint _2582 = uint(findLSB(_2578)) + (_2454 << 5u);
                        uint _2579 = (_2578 + 4294967295u) & _2578;
                        uint _2584 = _2582 * 48u;
                        vec4 _2598 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2584)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 3u)).x));
                        uint _2604 = (_2582 * 48u) + 4u;
                        vec4 _2617 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2604)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 3u)).x));
                        uint _2623 = (_2582 * 48u) + 8u;
                        vec3 _2634 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2623)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 2u)).x));
                        float _2638 = _2598.x - _2156;
                        float _2639 = _2598.y - _2157;
                        float _2640 = _2598.z - _2158;
                        float _2641 = dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640));
                        float _2644 = inversesqrt(_2641);
                        float _2645 = _2644 * _2638;
                        float _2646 = _2644 * _2639;
                        float _2647 = _2644 * _2640;
                        float _2648 = dot(vec3(_414, _417, _420), vec3(_2645, _2646, _2647));
                        float _2653 = 1.0 - (_2641 * _2598.w);
                        float _3924 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
                        float _2654 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
                        float _2655 = sqrt(_2641) * _2617.w;
                        float _2658 = 1.39999997615814208984375 / (_2655 + 1.39999997615814208984375);
                        float _2659 = _2658 * _2658;
                        float _2662 = ((1.0 - _2659) * _2648) + _2659;
                        float _2665 = _2655 * _2655;
                        float _2669 = ((isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0))) * _2654) / ((_2665 * 0.699999988079071044921875) + 1.0);
                        float _2673 = (-0.0) - _2156;
                        float _2674 = (-0.0) - _2157;
                        float _2675 = (-0.0) - _2158;
                        float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
                        float _2680 = _2679 * _2673;
                        float _2681 = _2679 * _2674;
                        float _2682 = _2679 * _2675;
                        float _2690 = exp2(log2(1.0 / ((_2665 * 3.5) + 5.0)) * 0.25);
                        float _2691 = 1.0 - _490;
                        float _2698 = sqrt(1.0 - ((1.0 - (_2691 * _2691)) * (1.0 - (_2690 * _2690))));
                        float _2699 = _2698 * _2698;
                        float _2700 = _2699 * _2699;
                        float _2701 = _2680 + _2645;
                        float _2702 = _2681 + _2646;
                        float _2703 = _2682 + _2647;
                        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
                        float _2711 = dot(vec3(_414, _417, _420), vec3(_2680, _2681, _2682));
                        float _3940 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2714 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                        float _2715 = dot(vec3(_414, _417, _420), vec3(_2707 * _2701, _2707 * _2702, _2707 * _2703));
                        float _3951 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2718 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                        float _2722 = ((_2718 * _2718) * (_2700 + (-1.0))) + 1.0;
                        float _2723 = _2658 * _2699;
                        float _2724 = _2723 * _2723;
                        float _2727 = ((1.0 - _2724) * _2648) + _2724;
                        float _3962 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2728 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                        float _2729 = 1.0 - _2699;
                        float _2739 = (0.5 / (((_2728 * ((_2714 * _2729) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2728 * _2729) + _2699) * _2714))) * _2728;
                        float _3973 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2750 = (((_2700 * 3.1415927410125732421875) * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) / ((_2722 * _2722) * ((_2665 * 2.1991131305694580078125) + 3.141590118408203125))) * _2654;
                        _2507 = (_2669 * _2617.x) + _2575;
                        _2508 = (_2669 * _2617.y) + _2576;
                        _2509 = (_2669 * _2617.z) + _2577;
                        _2504 = (_2750 * _2634.x) + _2572;
                        _2505 = (_2750 * _2634.y) + _2573;
                        _2506 = (_2750 * _2634.z) + _2574;
                        if (_2579 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2507;
                            _2576 = _2508;
                            _2577 = _2509;
                            _2578 = _2579;
                        }
                    }
                    frontier_phi_61_pred = _2504;
                    frontier_phi_61_pred_1 = _2509;
                    frontier_phi_61_pred_2 = _2508;
                    frontier_phi_61_pred_3 = _2507;
                    frontier_phi_61_pred_4 = _2506;
                    frontier_phi_61_pred_5 = _2505;
                }
                _2304 = frontier_phi_61_pred;
                _2314 = frontier_phi_61_pred_1;
                _2312 = frontier_phi_61_pred_2;
                _2310 = frontier_phi_61_pred_3;
                _2308 = frontier_phi_61_pred_4;
                _2306 = frontier_phi_61_pred_5;
                uint _2455 = _2454 + 1u;
                if (_2455 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2448 = _2304;
                    _2449 = _2306;
                    _2450 = _2308;
                    _2451 = _2310;
                    _2452 = _2312;
                    _2453 = _2314;
                    _2454 = _2455;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2303 = _2304;
            _2305 = _2306;
            _2307 = _2308;
            _2309 = _2310;
            _2311 = _2312;
            _2313 = _2314;
        }
        uvec4 _2317 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2318 = _2317.z;
        uint _2320 = (_2318 >> 8u) & 15u;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        if (((4294967295u << _2320) & _2202) == 0u)
        {
            _2416 = _2303;
            _2418 = _2305;
            _2420 = _2307;
            _2422 = _2309;
            _2424 = _2311;
            _2426 = _2313;
        }
        else
        {
            float _2441 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
            float _2442 = _2441 * _2156;
            float _2443 = _2441 * _2157;
            float _2444 = _2441 * _2158;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2320 < ((_2318 >> 12u) & 15u))
            {
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2427;
                float _2555 = _2303;
                float _2556 = _2305;
                float _2557 = _2307;
                float _2558 = _2309;
                float _2559 = _2311;
                float _2560 = _2313;
                uint _2561 = _2320;
                uint _2570;
                bool _2571;
                for (;;)
                {
                    _2570 = texelFetch(g_lightClassification, int((((_2196 << 5u) + (_2182 << 9u)) + (_2561 << 2u)) >> 2u)).x;
                    _2571 = _2570 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2571)
                    {
                        frontier_phi_67_pred = _2558;
                        frontier_phi_67_pred_1 = _2559;
                        frontier_phi_67_pred_2 = _2560;
                        frontier_phi_67_pred_3 = _2557;
                        frontier_phi_67_pred_4 = _2556;
                        frontier_phi_67_pred_5 = _2555;
                    }
                    else
                    {
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _2759;
                        float _2760;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _2768 = _2555;
                        float _2769 = _2556;
                        float _2770 = _2557;
                        float _2771 = _2558;
                        float _2772 = _2559;
                        float _2773 = _2560;
                        uint _2774 = _2570;
                        uint _2775;
                        vec4 _2800;
                        float _2801;
                        vec4 _2816;
                        vec3 _2828;
                        vec4 _2844;
                        vec4 _2860;
                        float _2907;
                        bool _2908;
                        for (;;)
                        {
                            uint _2785 = ((_2561 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2774));
                            _2775 = (_2774 + 4294967295u) & _2774;
                            uint _2787 = _2785 * 40u;
                            _2800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 3u)).x));
                            _2801 = _2800.w;
                            uint _2803 = (_2785 * 40u) + 4u;
                            _2816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 3u)).x));
                            uint _2818 = (_2785 * 40u) + 8u;
                            _2828 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x));
                            uint _2831 = (_2785 * 40u) + 16u;
                            _2844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 3u)).x));
                            uint _2847 = (_2785 * 40u) + 20u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            uint _2863 = (_2785 * 40u) + 24u;
                            vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2882 = (_2785 * 40u) + 28u;
                            vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            _2907 = fma(_2158, _2895.z, fma(_2157, _2895.y, _2895.x * _2156)) + _2895.w;
                            _2908 = !((fma(_2158, _2876.z, fma(_2157, _2876.y, _2876.x * _2156)) + _2876.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2908)
                            {
                                float _2935 = _2800.x - _2156;
                                float _2936 = _2800.y - _2157;
                                float _2937 = _2800.z - _2158;
                                float _2938 = dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937));
                                float _2941 = inversesqrt(_2938);
                                float _2942 = _2941 * _2935;
                                float _2943 = _2941 * _2936;
                                float _2944 = _2941 * _2937;
                                float _2948 = 1.0 - (_2938 / (_2801 * _2801));
                                float _3984 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                                float _2949 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                                float _2953 = sqrt(_2938) * _2816.w;
                                float _2955 = 1.39999997615814208984375 / (_2953 + 1.39999997615814208984375);
                                float _2956 = _2955 * _2955;
                                float _2959 = ((1.0 - _2956) * dot(vec3(_2942, _2943, _2944), vec3(_414, _417, _420))) + _2956;
                                float _2962 = _2953 * _2953;
                                float _2966 = (fma(_2158, _2844.z, fma(_2157, _2844.y, _2844.x * _2156)) + _2844.w) / _2907;
                                float _2967 = (fma(_2158, _2860.z, fma(_2157, _2860.y, _2860.x * _2156)) + _2860.w) / _2907;
                                float _2971 = 1.0 - dot(vec2(_2966, _2967), vec2(_2966, _2967));
                                float _4000 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                                float _2972 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                                float _2973 = _2972 * (((isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))) * _2949) / ((_2962 * 0.699999988079071044921875) + 1.0));
                                float _2985 = exp2(log2(1.0 / ((_2962 * 3.5) + 5.0)) * 0.25);
                                float _2986 = 1.0 - _490;
                                float _2993 = sqrt(1.0 - ((1.0 - (_2986 * _2986)) * (1.0 - (_2985 * _2985))));
                                float _2994 = _2993 * _2993;
                                float _2995 = _2994 * _2994;
                                float _2996 = _2942 - _2442;
                                float _2997 = _2943 - _2443;
                                float _2998 = _2944 - _2444;
                                float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                                float _3006 = dot(vec3(_414, _417, _420), vec3((-0.0) - _2442, (-0.0) - _2443, (-0.0) - _2444));
                                float _4011 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3009 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                                float _3010 = dot(vec3(_414, _417, _420), vec3(_3002 * _2996, _3002 * _2997, _3002 * _2998));
                                float _4022 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3013 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                                float _3017 = ((_3013 * _3013) * (_2995 + (-1.0))) + 1.0;
                                float _3018 = _2955 * _2994;
                                float _3019 = _3018 * _3018;
                                float _3025 = ((1.0 - _3019) * dot(vec3(_414, _417, _420), vec3(_2942, _2943, _2944))) + _3019;
                                float _4033 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                                float _3027 = 1.0 - _2994;
                                float _3037 = (0.5 / (((_3026 * ((_3009 * _3027) + _2994)) + 9.9999999392252902907785028219223e-09) + (((_3026 * _3027) + _2994) * _3009))) * _3026;
                                float _4044 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3047 = (_2972 * _2949) * (((_2995 * 3.1415927410125732421875) * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) / ((_3017 * _3017) * ((_2962 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3047 * _2828.x;
                                frontier_phi_73_pred_1 = _3047 * _2828.y;
                                frontier_phi_73_pred_2 = _2973 * _2816.z;
                                frontier_phi_73_pred_3 = _2973 * _2816.y;
                                frontier_phi_73_pred_4 = _2973 * _2816.x;
                                frontier_phi_73_pred_5 = _3047 * _2828.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3051 = frontier_phi_73_pred;
                            _3052 = frontier_phi_73_pred_1;
                            _3056 = frontier_phi_73_pred_2;
                            _3055 = frontier_phi_73_pred_3;
                            _3054 = frontier_phi_73_pred_4;
                            _3053 = frontier_phi_73_pred_5;
                            _2758 = _3054 + _2771;
                            _2759 = _3055 + _2772;
                            _2760 = _3056 + _2773;
                            _2755 = _3051 + _2768;
                            _2756 = _3052 + _2769;
                            _2757 = _3053 + _2770;
                            if (_2775 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2759;
                                _2773 = _2760;
                                _2774 = _2775;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2758;
                        frontier_phi_67_pred_1 = _2759;
                        frontier_phi_67_pred_2 = _2760;
                        frontier_phi_67_pred_3 = _2757;
                        frontier_phi_67_pred_4 = _2756;
                        frontier_phi_67_pred_5 = _2755;
                    }
                    _2423 = frontier_phi_67_pred;
                    _2425 = frontier_phi_67_pred_1;
                    _2427 = frontier_phi_67_pred_2;
                    _2421 = frontier_phi_67_pred_3;
                    _2419 = frontier_phi_67_pred_4;
                    _2417 = frontier_phi_67_pred_5;
                    uint _2562 = _2561 + 1u;
                    if (_2562 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2555 = _2417;
                        _2556 = _2419;
                        _2557 = _2421;
                        _2558 = _2423;
                        _2559 = _2425;
                        _2560 = _2427;
                        _2561 = _2562;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2425;
                frontier_phi_55_56_ladder_1 = _2427;
                frontier_phi_55_56_ladder_2 = _2423;
                frontier_phi_55_56_ladder_3 = _2421;
                frontier_phi_55_56_ladder_4 = _2419;
                frontier_phi_55_56_ladder_5 = _2417;
            }
            else
            {
                frontier_phi_55_56_ladder = _2311;
                frontier_phi_55_56_ladder_1 = _2313;
                frontier_phi_55_56_ladder_2 = _2309;
                frontier_phi_55_56_ladder_3 = _2307;
                frontier_phi_55_56_ladder_4 = _2305;
                frontier_phi_55_56_ladder_5 = _2303;
            }
            _2416 = frontier_phi_55_56_ladder_5;
            _2418 = frontier_phi_55_56_ladder_4;
            _2420 = frontier_phi_55_56_ladder_3;
            _2422 = frontier_phi_55_56_ladder_2;
            _2424 = frontier_phi_55_56_ladder;
            _2426 = frontier_phi_55_56_ladder_1;
        }
        float _2431 = isnan(1.0) ? _474 : (isnan(_474) ? 1.0 : min(_474, 1.0));
        _2215 = (_2431 * _2422) + _1651;
        _2217 = (_2431 * _2424) + _1653;
        _2219 = (_2431 * _2426) + _1655;
        _2221 = ((_2416 * _459) * _2431) + _1996;
        _2223 = ((_2418 * _461) * _2431) + _1998;
        _2225 = ((_2420 * _462) * _2431) + _2000;
    }
    else
    {
        _2215 = _1651;
        _2217 = _1653;
        _2219 = _1655;
        _2221 = _1996;
        _2223 = _1998;
        _2225 = _2000;
    }
    float _4060 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4071 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4082 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    uint _2245 = _433 + 6u;
    float _2253 = _392 / cbSceneParam._m0[86u].x;
    float _2254 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2268 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2253, _2254, (log2((isnan(cbSceneParam._m0[77u].w) ? _326 : (isnan(_326) ? cbSceneParam._m0[77u].w : min(_326, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2270 = _2268.x;
    float _2271 = _2268.y;
    float _2272 = _2268.z;
    float _2273 = _2268.w;
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    if (_326 > cbSceneParam._m0[78u].w)
    {
        float _2328 = isnan(_326) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _326 : min(cbSceneParam._m0[80u].w, _326));
        float _2329 = _2328 / _326;
        float _2340 = _2329 * _377;
        float _2341 = _378 * _2329;
        float _2342 = (-0.0) - _2341;
        float _2344 = _2329 * _379;
        float _2346 = (cbSceneParam._m0[77u].w * _2342) / _2328;
        float _2347 = _2346 + cbSceneParam._m0[79u].w;
        float _2348 = cbSceneParam._m0[79u].w - _2341;
        float _2354 = sqrt(((_2340 * _2340) + (_2341 * _2341)) + (_2344 * _2344));
        float _2357 = (1.0 - (cbSceneParam._m0[77u].w / _2328)) * _2354;
        float _2362 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2364 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2517;
        if (abs((_2342 - _2346) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2517 = ((((_2347 > 0.0) ? exp2(_2362 * _2347) : (2.0 - exp2(_2364 * _2347))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2357;
        }
        else
        {
            float _2477 = 1.0 / cbSceneParam._m0[80u].x;
            float _2478 = isnan(_2348) ? _2347 : (isnan(_2347) ? _2348 : max(_2347, _2348));
            float _2479 = isnan(_2348) ? _2347 : (isnan(_2347) ? _2348 : min(_2347, _2348));
            float _2488 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : min(_2478, 0.0));
            float _2489 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : min(_2479, 0.0));
            _2517 = ((abs(_2354 / _2342) * cbSceneParam._m0[80u].y) * ((((_2488 - _2489) * 2.0) - ((exp2(_2362 * (isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0)))) - exp2(_2362 * (isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0))))) * _2477)) - ((exp2(_2364 * _2488) - exp2(_2364 * _2489)) * _2477))) + (_2357 * cbSceneParam._m0[80u].z);
        }
        vec4 _2519 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2253, _2254, 1.0), 0.0);
        float _2528 = exp2((_2517 * (-1.44269502162933349609375)) * (1.0 - _2519.w));
        float _2529 = log2(_2528);
        float _2545 = log2(_2273);
        _2366 = (exp2(_2545 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2529 * cbSceneParam._m0[78u].x)) * _2519.x) / cbSceneParam._m0[78u].x)) + _2270;
        _2368 = (exp2(_2545 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2529 * cbSceneParam._m0[78u].y)) * _2519.y) / cbSceneParam._m0[78u].y)) + _2271;
        _2370 = (exp2(_2545 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2529 * cbSceneParam._m0[78u].z)) * _2519.z) / cbSceneParam._m0[78u].z)) + _2272;
        _2372 = _2528 * _2273;
    }
    else
    {
        _2366 = _2270;
        _2368 = _2271;
        _2370 = _2272;
        _2372 = _2273;
    }
    float _2384 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2385 = _2384 == 3.0;
    float _2386 = log2(_2372);
    float _2393 = exp2(_2386 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_2215 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _474))) + ((_2221 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1284)) * cbPerFrame._m0[3u].x));
    float _2394 = exp2(_2386 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2217 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _474))) + ((_2223 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1284)) * cbPerFrame._m0[3u].x));
    float _2395 = exp2(_2386 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2219 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _474))) + ((_2225 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1284)) * cbPerFrame._m0[3u].x));
    float _2404 = (_2384 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2404 * (_2385 ? _2393 : (_2393 + (cbSceneParam._m0[72u].w * _2366)));
    SV_Target.y = _2404 * (_2385 ? _2394 : (_2394 + (cbSceneParam._m0[72u].w * _2368)));
    SV_Target.z = _2404 * (_2385 ? _2395 : (_2395 + (cbSceneParam._m0[72u].w * _2370)));
    SV_Target.w = cbInstanceData._m0[_2245].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2245].w;
}


