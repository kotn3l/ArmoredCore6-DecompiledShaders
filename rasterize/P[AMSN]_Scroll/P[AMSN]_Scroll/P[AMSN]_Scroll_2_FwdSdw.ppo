#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _853;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = ((cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.x;
    float _227 = ((cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].y) + TEXCOORD.y;
    vec4 _240 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_226 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_227 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _226) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _227) + cbTextureTilingScale._m0[2u].w));
    float _264 = cbMtdParam._m0[10u].x + _260.x;
    vec4 _276 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _226) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _227) + cbTextureTilingScale._m0[1u].w));
    float _280 = _276.z;
    float _284 = (_276.x * 2.0) + (-1.0);
    float _286 = (_276.y * 2.0) + (-1.0);
    float _287 = dot(vec2(_284, _286), vec2(_284, _286));
    float _3472 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _293 = sqrt(1.0 - (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))));
    float _296 = fma(_293, _199 * NORMAL.x, fma(_286, _206 * TANGENT.x, (_192 * _185) * _284));
    float _299 = fma(_293, _199 * NORMAL.y, fma(_286, _206 * TANGENT.y, (_192 * _186) * _284));
    float _302 = fma(_293, _199 * NORMAL.z, fma(_286, _206 * TANGENT.z, (_192 * _187) * _284));
    float _306 = inversesqrt(dot(vec3(_296, _299, _302), vec3(_296, _299, _302)));
    float _307 = _306 * _296;
    float _308 = _306 * _299;
    float _309 = _306 * _302;
    float _3483 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _310 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _3494 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3505 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3516 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3527 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _314 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _330 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _371 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _381 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _371);
    float _382 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _371);
    float _383 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _371);
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _388 = _381 * _387;
    float _389 = _382 * _387;
    float _390 = _383 * _387;
    float _396 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _397 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _418 = fma(_309, cbSceneParam._m0[5u].z, fma(_308, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _307));
    float _421 = fma(_309, cbSceneParam._m0[6u].z, fma(_308, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _307));
    float _424 = fma(_309, cbSceneParam._m0[7u].z, fma(_308, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _307));
    uint _437 = uint(roundEven(NORMAL.w)) * 13u;
    uint _440 = (_437 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _446 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_440].x;
    float _447 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_440].y;
    float _448 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) * cbInstanceData._m0[_440].z;
    float _3538 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _3549 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _452 = 1.0 - _314;
    float _453 = _449 * _452;
    float _454 = _450 * _452;
    float _455 = _451 * _452;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _314;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _314;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _314;
    float _463 = _460 + 0.039999999105930328369140625;
    float _465 = _461 + 0.039999999105930328369140625;
    float _466 = _462 + 0.039999999105930328369140625;
    vec4 _475 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _396, cbSceneParam._m0[86u].y * _397));
    float _478 = _475.x * TEXCOORD.z;
    float _479 = dot(vec3(_307, _308, _309), vec3(_388, _389, _390));
    float _482 = _479 * 2.0;
    float _486 = (_482 * _307) - _388;
    float _487 = (_482 * _308) - _389;
    float _488 = (_482 * _309) - _390;
    float _492 = abs(dot(vec3(_388, _389, _390), vec3(_307, _308, _309)));
    float _3571 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _494 = sqrt(_310);
    float _507 = exp2((_494 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_494 * 3.0));
    float _513 = (1.0 - _507) * ((_494 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _514 = _507 * _494;
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _852;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _577 = fma(_550, cbModelParam._m0[26u].z, fma(_546, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _542));
        float _581 = fma(_550, cbModelParam._m0[27u].z, fma(_546, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _542));
        float _585 = fma(_550, cbModelParam._m0[28u].z, fma(_546, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _542));
        float _610 = _542 + _307;
        float _611 = _546 + _308;
        float _612 = _550 + _309;
        float _622 = fma(_612, cbModelParam._m0[26u].z, fma(_611, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610)) - _577;
        float _623 = fma(_612, cbModelParam._m0[27u].z, fma(_611, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610)) - _581;
        float _624 = fma(_612, cbModelParam._m0[28u].z, fma(_611, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610)) - _585;
        float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
        float _641 = ((_628 * _622) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_577 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_628 * _623) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_581 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_628 * _624) / cbModelParam._m0[34u].z) + ((((((_585 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        float _680 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_646.x + (-0.5));
        float _682 = _680 * (_646.y + (-0.5));
        float _683 = _680 * (_646.z + (-0.5));
        float _690 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_653.x + (-0.5));
        float _692 = _690 * (_653.y + (-0.5));
        float _693 = _690 * (_653.z + (-0.5));
        float _700 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_660.x + (-0.5));
        float _702 = _700 * (_660.y + (-0.5));
        float _703 = _700 * (_660.z + (-0.5));
        float _710 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_667.x + (-0.5));
        float _712 = _710 * (_667.y + (-0.5));
        float _713 = _710 * (_667.z + (-0.5));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = _681 * 0.5;
        float _718 = _691 * 0.5;
        float _719 = _701 * 0.5;
        float _720 = dot(vec3(_717, _718, _719), vec3(_717, _718, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _734 = (dot(vec3(_307, _308, _309), vec3(_725 * _717, _725 * _718, _725 * _719)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _744 = sqrt(((_718 * _718) + (_717 * _717)) + (_719 * _719)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3619 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_746 + 1.0))) + _751) * _714;
        float _761 = _682 * 0.5;
        float _762 = _692 * 0.5;
        float _763 = _702 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _777 = (dot(vec3(_307, _308, _309), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _786 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3652 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_788 + 1.0))) + _793) * _715;
        float _803 = _683 * 0.5;
        float _804 = _693 * 0.5;
        float _805 = _703 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_307, _308, _309), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3685 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_830 + 1.0))) + _835) * _716;
        _852 = _683;
        _854 = _682;
        _855 = _681;
        _856 = _693;
        _857 = _692;
        _858 = _691;
        _859 = _703;
        _860 = _702;
        _861 = _701;
        _862 = _716;
        _863 = _715;
        _864 = _714;
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
    }
    else
    {
        _852 = _853;
        _854 = _853;
        _855 = _853;
        _856 = _853;
        _857 = _853;
        _858 = _853;
        _859 = _853;
        _860 = _853;
        _861 = _853;
        _862 = _853;
        _863 = _853;
        _864 = _853;
        _865 = 0.0;
        _866 = 0.0;
        _867 = 0.0;
    }
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _893 = fma(_550, cbModelParam._m0[30u].z, fma(_546, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _542));
        float _897 = fma(_550, cbModelParam._m0[31u].z, fma(_546, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _542));
        float _901 = fma(_550, cbModelParam._m0[32u].z, fma(_546, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _542));
        float _924 = _542 + _307;
        float _925 = _546 + _308;
        float _926 = _550 + _309;
        float _936 = fma(_926, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924)) - _893;
        float _937 = fma(_926, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924)) - _897;
        float _938 = fma(_926, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924)) - _901;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_893 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_897 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[35u].z) + ((((((_901 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _992 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_959.x + (-0.5));
        float _994 = _992 * (_959.y + (-0.5));
        float _995 = _992 * (_959.z + (-0.5));
        float _1002 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_966.x + (-0.5));
        float _1004 = _1002 * (_966.y + (-0.5));
        float _1005 = _1002 * (_966.z + (-0.5));
        float _1012 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_973.x + (-0.5));
        float _1014 = _1012 * (_973.y + (-0.5));
        float _1015 = _1012 * (_973.z + (-0.5));
        float _1022 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_980.x + (-0.5));
        float _1024 = _1022 * (_980.y + (-0.5));
        float _1025 = _1022 * (_980.z + (-0.5));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = _993 * 0.5;
        float _1030 = _1003 * 0.5;
        float _1031 = _1013 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_307, _308, _309), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3748 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1056 + 1.0))) + _1061) * _1026;
        float _1071 = _994 * 0.5;
        float _1072 = _1004 * 0.5;
        float _1073 = _1014 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_307, _308, _309), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3781 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1098 + 1.0))) + _1103) * _1027;
        float _1113 = _995 * 0.5;
        float _1114 = _1005 * 0.5;
        float _1115 = _1015 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_307, _308, _309), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3814 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1140 + 1.0))) + _1145) * _1028;
        _1162 = _995;
        _1163 = _994;
        _1164 = _993;
        _1165 = _1005;
        _1166 = _1004;
        _1167 = _1003;
        _1168 = _1015;
        _1169 = _1014;
        _1170 = _1013;
        _1171 = _1028;
        _1172 = _1027;
        _1173 = _1026;
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = _853;
        _1163 = _853;
        _1164 = _853;
        _1165 = _853;
        _1166 = _853;
        _1167 = _853;
        _1168 = _853;
        _1169 = _853;
        _1170 = _853;
        _1171 = _853;
        _1172 = _853;
        _1173 = _853;
        _1174 = 0.0;
        _1175 = 0.0;
        _1176 = 0.0;
    }
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _865)) + _865;
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _866)) + _866;
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _867)) + _867;
    float _1209 = fma(_1188, cbSceneParam._m0[89u].z, fma(_1187, cbSceneParam._m0[89u].y, _1186 * cbSceneParam._m0[89u].x));
    float _1212 = fma(_1188, cbSceneParam._m0[90u].z, fma(_1187, cbSceneParam._m0[90u].y, _1186 * cbSceneParam._m0[90u].x));
    float _1215 = fma(_1188, cbSceneParam._m0[91u].z, fma(_1187, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1186));
    float _1230 = _486 * 0.5;
    float _1231 = _487 * 0.5;
    float _1232 = _488 * 0.5;
    float _1233 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1236 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1239 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1273;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1246 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_852, _856, _859, _862));
        float _1250 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_854, _857, _860, _863));
        float _1254 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_855, _858, _861, _864));
        float _1261 = dot(vec4(cbModelParam._m0[39u]), vec4(_1230, _1231, _1232, 1.0));
        _1273 = dot(vec3(isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1261) ? 0.0 : (isnan(0.0) ? _1261 : max(0.0, _1261))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1273 = 1.0;
    }
    float _1284;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1275 = dot(vec4(cbModelParam._m0[40u]), vec4(_1230, _1231, _1232, 1.0));
        _1284 = dot(vec3(isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1284 = 1.0;
    }
    float _1288 = (_1284 * cbModelParam._m0[1u].x) + (_1273 * (1.0 - cbModelParam._m0[1u].x));
    float _1298 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _310);
    float _1299 = isnan(_1298) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1298 : min(cbModelParam._m0[25u].z, _1298));
    float _1381;
    float _1383;
    float _1385;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1348 = fma(_550, cbModelParam._m0[13u].z, fma(_546, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542)) + cbModelParam._m0[13u].w;
        float _1352 = fma(_550, cbModelParam._m0[14u].z, fma(_546, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542)) + cbModelParam._m0[14u].w;
        float _1356 = fma(_550, cbModelParam._m0[15u].z, fma(_546, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542)) + cbModelParam._m0[15u].w;
        float _1359 = fma(_488, cbModelParam._m0[13u].z, fma(_487, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _486));
        float _1362 = fma(_488, cbModelParam._m0[14u].z, fma(_487, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _486));
        float _1365 = fma(_488, cbModelParam._m0[15u].z, fma(_487, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _486));
        float _1393;
        if (_1359 > 0.0)
        {
            _1393 = abs((1.0 - _1348) / _1359);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1348 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1393 = frontier_phi_14_12_ladder;
        }
        float _1568;
        if (_1362 > 0.0)
        {
            _1568 = abs((1.0 - _1352) / _1362);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1352 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1568 = frontier_phi_23_19_ladder;
        }
        float _1864;
        if (_1365 > 0.0)
        {
            _1864 = abs((1.0 - _1356) / _1365);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1356 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1864 = frontier_phi_35_30_ladder;
        }
        float _1866 = isnan(_1568) ? _1393 : (isnan(_1393) ? _1568 : min(_1393, _1568));
        float _1867 = isnan(_1864) ? _1866 : (isnan(_1866) ? _1864 : min(_1866, _1864));
        float _1871 = (_1867 * _1359) + _1348;
        float _1872 = (_1867 * _1362) + _1352;
        float _1873 = (_1867 * _1365) + _1356;
        float _1874 = _1867 * 9.9999997473787516355514526367188e-05;
        float _1876 = (-1.0) - _1874;
        float _1878 = _1874 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1873 > _1878) || ((_1873 < _1876) || ((_1872 > _1878) || ((_1872 < _1876) || ((_1871 < _1876) || (_1871 > _1878))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1873, cbModelParam._m0[9u].z, fma(_1872, cbModelParam._m0[9u].y, _1871 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1873, cbModelParam._m0[10u].z, fma(_1872, cbModelParam._m0[10u].y, _1871 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1873, cbModelParam._m0[11u].z, fma(_1872, cbModelParam._m0[11u].y, _1871 * cbModelParam._m0[11u].x))), _1299);
            frontier_phi_13_35_ladder = _2018.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2018.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2018.x * cbModelParam._m0[1u].y;
        }
        _1381 = frontier_phi_13_35_ladder_2;
        _1383 = frontier_phi_13_35_ladder_1;
        _1385 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_486, _487, _488), _1299);
        _1381 = _1369.x * cbModelParam._m0[1u].y;
        _1383 = _1369.y * cbModelParam._m0[1u].y;
        _1385 = _1369.z * cbModelParam._m0[1u].y;
    }
    float _1389 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _310);
    float _1390 = isnan(_1389) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1389 : min(cbModelParam._m0[25u].w, _1389));
    float _1482;
    float _1484;
    float _1486;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1446 = fma(_550, cbModelParam._m0[21u].z, fma(_546, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542)) + cbModelParam._m0[21u].w;
        float _1450 = fma(_550, cbModelParam._m0[22u].z, fma(_546, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542)) + cbModelParam._m0[22u].w;
        float _1454 = fma(_550, cbModelParam._m0[23u].z, fma(_546, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542)) + cbModelParam._m0[23u].w;
        float _1457 = fma(_488, cbModelParam._m0[21u].z, fma(_487, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _486));
        float _1460 = fma(_488, cbModelParam._m0[22u].z, fma(_487, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _486));
        float _1463 = fma(_488, cbModelParam._m0[23u].z, fma(_487, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _486));
        float _1573;
        if (_1457 > 0.0)
        {
            _1573 = abs((1.0 - _1446) / _1457);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1446 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1573 = frontier_phi_25_21_ladder;
        }
        float _1891;
        if (_1460 > 0.0)
        {
            _1891 = abs((1.0 - _1450) / _1460);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1450 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1891 = frontier_phi_37_32_ladder;
        }
        float _2229;
        if (_1463 > 0.0)
        {
            _2229 = abs((1.0 - _1454) / _1463);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1454 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2229 = frontier_phi_47_44_ladder;
        }
        float _2231 = isnan(_1891) ? _1573 : (isnan(_1573) ? _1891 : min(_1573, _1891));
        float _2232 = isnan(_2229) ? _2231 : (isnan(_2231) ? _2229 : min(_2231, _2229));
        float _2236 = (_2232 * _1457) + _1446;
        float _2237 = (_2232 * _1460) + _1450;
        float _2238 = (_2232 * _1463) + _1454;
        float _2239 = _2232 * 9.9999997473787516355514526367188e-05;
        float _2240 = (-1.0) - _2239;
        float _2242 = _2239 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2238 > _2242) || ((_2238 < _2240) || ((_2237 > _2242) || ((_2237 < _2240) || ((_2236 < _2240) || (_2236 > _2242))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2238, cbModelParam._m0[17u].z, fma(_2237, cbModelParam._m0[17u].y, _2236 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2238, cbModelParam._m0[18u].z, fma(_2237, cbModelParam._m0[18u].y, _2236 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2238, cbModelParam._m0[19u].z, fma(_2237, cbModelParam._m0[19u].y, _2236 * cbModelParam._m0[19u].x))), _1390);
            frontier_phi_22_47_ladder = _2360.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2360.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2360.x * cbModelParam._m0[1u].z;
        }
        _1482 = frontier_phi_22_47_ladder_2;
        _1484 = frontier_phi_22_47_ladder_1;
        _1486 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_486, _487, _488), _1390);
        _1482 = _1466.x * cbModelParam._m0[1u].z;
        _1484 = _1466.y * cbModelParam._m0[1u].z;
        _1486 = _1466.z * cbModelParam._m0[1u].z;
    }
    float _1499 = (((_513 * _463) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1482 - _1381)) + _1381);
    float _1501 = (((_513 * _465) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1484 - _1383)) + _1383);
    float _1503 = (((_513 * _466) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1486 - _1385)) + _1385);
    float _1506 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1509 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1512 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, _1499 * cbSceneParam._m0[91u].x));
    float _1547 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1551 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1555 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1559 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1560 = _1547 / _1559;
    float _1561 = _1551 / _1559;
    float _1562 = _1555 / _1559;
    float _1709;
    float _1710;
    float _1711;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1589 = ((uint(_1562 > cbSceneParam._m0[59u].y) + uint(_1562 > cbSceneParam._m0[59u].x)) + uint(_1562 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1590 = _1589 + 43u;
        uint _1598 = _1589 + 44u;
        uint _1606 = _1589 + 45u;
        uint _1614 = _1589 + 46u;
        float _1625 = fma(_1559, cbSceneParam._m0[_1590].w, fma(_1555, cbSceneParam._m0[_1590].z, fma(_1551, cbSceneParam._m0[_1590].y, _1547 * cbSceneParam._m0[_1590].x)));
        float _1629 = fma(_1559, cbSceneParam._m0[_1598].w, fma(_1555, cbSceneParam._m0[_1598].z, fma(_1551, cbSceneParam._m0[_1598].y, _1547 * cbSceneParam._m0[_1598].x)));
        float _1637 = fma(_1559, cbSceneParam._m0[_1614].w, fma(_1555, cbSceneParam._m0[_1614].z, fma(_1551, cbSceneParam._m0[_1614].y, _1547 * cbSceneParam._m0[_1614].x)));
        float _1642 = cbSceneParam._m0[33u].z * _1637;
        float _1644 = cbSceneParam._m0[33u].w * _1637;
        float _1647 = fma(_1559, cbSceneParam._m0[_1606].w, fma(_1555, cbSceneParam._m0[_1606].z, fma(_1551, cbSceneParam._m0[_1606].y, _1547 * cbSceneParam._m0[_1606].x))) / _1637;
        float _1695 = (cbSceneParam._m0[33u].x - sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562))) * cbSceneParam._m0[33u].y;
        float _3940 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1702 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 + _1625) / _1637, (_1644 + _1629) / _1637), _1647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1644 + _1625) / _1637, (_1629 - _1642) / _1637), _1647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1625 - _1642) / _1637, (_1629 - _1644) / _1637), _1647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1625 - _1644) / _1637, (_1642 + _1629) / _1637), _1647), 0.0)).x), vec4(0.25)));
        _1709 = 1.0 - (_1702 * cbSceneParam._m0[34u].x);
        _1710 = 1.0 - (_1702 * cbSceneParam._m0[34u].y);
        _1711 = 1.0 - (_1702 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1709 = 1.0;
        _1710 = 1.0;
        _1711 = 1.0;
    }
    float _1775;
    float _1777;
    float _1779;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1763 = fma(_1559, cbSceneParam._m0[63u].w, fma(_1555, cbSceneParam._m0[63u].z, fma(_1551, cbSceneParam._m0[63u].y, _1547 * cbSceneParam._m0[63u].x)));
        float _1764 = fma(_1559, cbSceneParam._m0[60u].w, fma(_1555, cbSceneParam._m0[60u].z, fma(_1551, cbSceneParam._m0[60u].y, _1547 * cbSceneParam._m0[60u].x))) / _1763;
        float _1765 = fma(_1559, cbSceneParam._m0[61u].w, fma(_1555, cbSceneParam._m0[61u].z, fma(_1551, cbSceneParam._m0[61u].y, _1547 * cbSceneParam._m0[61u].x))) / _1763;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1764 >= cbSceneParam._m0[64u].x) && (_1765 >= cbSceneParam._m0[64u].y)) && (_1764 <= cbSceneParam._m0[64u].z)) && (_1765 <= cbSceneParam._m0[64u].w))
        {
            float _1904 = fma(_1559, cbSceneParam._m0[62u].w, fma(_1555, cbSceneParam._m0[62u].z, fma(_1551, cbSceneParam._m0[62u].y, _1547 * cbSceneParam._m0[62u].x))) / _1763;
            float _1908 = isnan(cbSceneParam._m0[41u].w) ? _1904 : (isnan(_1904) ? cbSceneParam._m0[41u].w : max(_1904, cbSceneParam._m0[41u].w));
            float _1951 = (cbSceneParam._m0[33u].x - sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562))) * cbSceneParam._m0[33u].y;
            float _3956 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
            float _1958 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1764, cbSceneParam._m0[33u].w + _1765), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1764, _1765 - cbSceneParam._m0[33u].z), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1764 - cbSceneParam._m0[33u].z, _1765 - cbSceneParam._m0[33u].w), _1908), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1764 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1765), _1908), 0.0)).x), vec4(0.25)));
            float _1962 = 1.0 - (_1958 * cbSceneParam._m0[34u].x);
            float _1963 = 1.0 - (_1958 * cbSceneParam._m0[34u].y);
            float _1964 = 1.0 - (_1958 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1964) ? _1711 : (isnan(_1711) ? _1964 : min(_1711, _1964));
            frontier_phi_34_33_ladder_1 = isnan(_1963) ? _1710 : (isnan(_1710) ? _1963 : min(_1710, _1963));
            frontier_phi_34_33_ladder_2 = isnan(_1962) ? _1709 : (isnan(_1709) ? _1962 : min(_1709, _1962));
        }
        else
        {
            frontier_phi_34_33_ladder = _1711;
            frontier_phi_34_33_ladder_1 = _1710;
            frontier_phi_34_33_ladder_2 = _1709;
        }
        _1775 = frontier_phi_34_33_ladder_2;
        _1777 = frontier_phi_34_33_ladder_1;
        _1779 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1775 = _1709;
        _1777 = _1710;
        _1779 = _1711;
    }
    uvec4 _1784 = floatBitsToUint(cbInstanceData._m0[_437 + 5u]);
    uint _1786 = _1784.x * 14u;
    uint _1787 = _1786 + 13u;
    float _1794 = _478 + (-1.0);
    float _1799 = (cbLight._m0[_1787].x * _1794) + 1.0;
    float _1800 = (cbLight._m0[_1787].y * _1794) + 1.0;
    float _1801 = (cbLight._m0[_1787].z * _1794) + 1.0;
    float _1802 = (cbLight._m0[_1787].w * _1794) + 1.0;
    uint _1803 = _1786 + 5u;
    float _1809 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1813 = _1786 + 4u;
    float _1823 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1827 = _1786 | 1u;
    float _1838 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_307, _308, _309));
    float _1841 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_307, _308, _309));
    float _3992 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _4003 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1846 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.3183098733425140380859375;
    float _1848 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1855 = ((cbLight._m0[_1803].x * _1809) * _1848) + (((cbLight._m0[_1813].x * _1775) * _1823) * _1846);
    float _1856 = ((_1809 * cbLight._m0[_1803].y) * _1848) + (((cbLight._m0[_1813].y * _1777) * _1823) * _1846);
    float _1857 = ((_1809 * cbLight._m0[_1803].z) * _1848) + (((cbLight._m0[_1813].z * _1779) * _1823) * _1846);
    uvec4 _1861 = floatBitsToUint(cbLight._m0[_1786 + 12u]);
    bool _1863 = _1861.x == 0u;
    float _1965;
    float _1967;
    float _1969;
    if (_1863)
    {
        _1965 = _1855;
        _1967 = _1856;
        _1969 = _1857;
    }
    else
    {
        uint _1973 = _1786 + 6u;
        float _1989 = (dot(vec3(cbLight._m0[_1786 + 2u].xyz), vec3(_307, _308, _309)) * 0.5) + 0.5;
        float _1990 = _1989 * _1989;
        float _4014 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1991 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1992 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1965 = (((cbLight._m0[_1973].x * 0.3183098733425140380859375) * _1991) * _1992) + _1855;
        _1967 = (((cbLight._m0[_1973].y * 0.3183098733425140380859375) * _1991) * _1992) + _1856;
        _1969 = (((cbLight._m0[_1973].z * 0.3183098733425140380859375) * _1991) * _1992) + _1857;
    }
    bool _1972 = _1861.y == 0u;
    float _2027;
    float _2029;
    float _2031;
    if (_1972)
    {
        _2027 = _1965;
        _2029 = _1967;
        _2031 = _1969;
    }
    else
    {
        uint _2200 = _1786 + 7u;
        float _2216 = (dot(vec3(cbLight._m0[_1786 + 3u].xyz), vec3(_307, _308, _309)) * 0.5) + 0.5;
        float _2217 = _2216 * _2216;
        float _4030 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2218 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2219 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2027 = (((cbLight._m0[_2200].x * 0.3183098733425140380859375) * _2218) * _2219) + _1965;
        _2029 = (((cbLight._m0[_2200].y * 0.3183098733425140380859375) * _2218) * _2219) + _1967;
        _2031 = (((cbLight._m0[_2200].z * 0.3183098733425140380859375) * _2218) * _2219) + _1969;
    }
    uint _2034 = _1786 + 8u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _310) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1786].x + _388;
    float _2050 = cbLight._m0[_1786].y + _389;
    float _2051 = cbLight._m0[_1786].z + _390;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1786].xyz));
    float _4046 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _2063 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _2064 = dot(vec3(_307, _308, _309), vec3(_2056, _2057, _2058));
    float _4068 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_2056, _2057, _2058));
    float _4079 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2048 * _2048;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2084 = exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0);
    float _2085 = 0.959999978542327880859375 - _460;
    float _2087 = 0.959999978542327880859375 - _461;
    float _2088 = 0.959999978542327880859375 - _462;
    float _2095 = 1.0 - _2048;
    float _2106 = (0.5 / (((_2063 * ((_2062 * _2095) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2095) + _2048) * _2062))) * _2062;
    float _4090 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2108 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    uint _2122 = _1786 + 9u;
    float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1827].w)) * _310) * 0.949999988079071044921875);
    float _2134 = _2133 * _2133;
    float _2135 = cbLight._m0[_1827].x + _388;
    float _2136 = cbLight._m0[_1827].y + _389;
    float _2137 = cbLight._m0[_1827].z + _390;
    float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
    float _2142 = _2141 * _2135;
    float _2143 = _2141 * _2136;
    float _2144 = _2141 * _2137;
    float _2145 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_1827].xyz));
    float _4101 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _2149 = dot(vec3(_307, _308, _309), vec3(_2142, _2143, _2144));
    float _4112 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_2142, _2143, _2144));
    float _4123 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2134 * _2134;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2168 = exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0);
    float _2175 = 1.0 - _2134;
    float _2185 = (0.5 / (((_2063 * ((_2148 * _2175) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2175) + _2134) * _2148))) * _2148;
    float _4134 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2187 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    float _2197 = (((((_2168 * _2085) + _463) * cbLight._m0[_2122].x) * _2187) * _1809) + ((((cbLight._m0[_2034].x * _1775) * ((_2084 * _2085) + _463)) * _2108) * _1823);
    float _2198 = (((((_2168 * _2087) + _465) * cbLight._m0[_2122].y) * _2187) * _1809) + ((((cbLight._m0[_2034].y * _1777) * ((_2084 * _2087) + _465)) * _2108) * _1823);
    float _2199 = (((((_2168 * _2088) + _466) * cbLight._m0[_2122].z) * _2187) * _1809) + ((((cbLight._m0[_2034].z * _1779) * ((_2084 * _2088) + _466)) * _2108) * _1823);
    float _2255;
    float _2257;
    float _2259;
    if (_1863)
    {
        _2255 = _2197;
        _2257 = _2198;
        _2259 = _2199;
    }
    else
    {
        uint _2261 = _1786 + 2u;
        uint _2265 = _1786 + 10u;
        float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _310) * 0.949999988079071044921875);
        float _2280 = _2279 * _2279;
        float _2281 = cbLight._m0[_2261].x + _388;
        float _2282 = cbLight._m0[_2261].y + _389;
        float _2283 = cbLight._m0[_2261].z + _390;
        float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
        float _2288 = _2287 * _2281;
        float _2289 = _2287 * _2282;
        float _2290 = _2287 * _2283;
        float _2291 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_2261].xyz));
        float _4145 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2295 = dot(vec3(_307, _308, _309), vec3(_2288, _2289, _2290));
        float _4156 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2299 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2288, _2289, _2290));
        float _4167 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2303 = _2280 * _2280;
        float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
        float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * 5.0);
        float _2321 = 1.0 - _2280;
        float _2331 = (0.5 / (((_2063 * ((_2294 * _2321) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2321) + _2280) * _2294))) * _2294;
        float _4178 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2333 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
        float _2334 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2255 = (((((_2314 * _2085) + _463) * cbLight._m0[_2265].x) * _2333) * _2334) + _2197;
        _2257 = (((((_2314 * _2087) + _465) * cbLight._m0[_2265].y) * _2333) * _2334) + _2198;
        _2259 = (((((_2314 * _2088) + _466) * cbLight._m0[_2265].z) * _2333) * _2334) + _2199;
    }
    float _2365;
    float _2367;
    float _2369;
    if (_1972)
    {
        _2365 = _2255;
        _2367 = _2257;
        _2369 = _2259;
    }
    else
    {
        uint _2376 = _1786 + 3u;
        uint _2380 = _1786 + 11u;
        float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _310) * 0.949999988079071044921875);
        float _2395 = _2394 * _2394;
        float _2396 = cbLight._m0[_2376].x + _388;
        float _2397 = cbLight._m0[_2376].y + _389;
        float _2398 = cbLight._m0[_2376].z + _390;
        float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
        float _2403 = _2402 * _2396;
        float _2404 = _2402 * _2397;
        float _2405 = _2402 * _2398;
        float _2406 = dot(vec3(_307, _308, _309), vec3(cbLight._m0[_2376].xyz));
        float _4194 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2410 = dot(vec3(_307, _308, _309), vec3(_2403, _2404, _2405));
        float _4205 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2414 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2403, _2404, _2405));
        float _4216 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2418 = _2395 * _2395;
        float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
        float _2429 = exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0);
        float _2436 = 1.0 - _2395;
        float _2446 = (0.5 / (((_2063 * ((_2409 * _2436) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2436) + _2395) * _2409))) * _2409;
        float _4227 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2448 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
        float _2449 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2365 = (((((_2429 * _2085) + _463) * cbLight._m0[_2380].x) * _2448) * _2449) + _2255;
        _2367 = (((((_2429 * _2087) + _465) * cbLight._m0[_2380].y) * _2448) * _2449) + _2257;
        _2369 = (((((_2429 * _2088) + _466) * cbLight._m0[_2380].z) * _2448) * _2449) + _2259;
    }
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    if (_1784.y == 0u)
    {
        uvec4 _2470 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2471 = _2470.x;
        uint _2482 = uint((float(_2470.y) * floor(float(uint(cbSceneParam._m0[85u].y * _397) / _2471))) + floor(float(uint(cbSceneParam._m0[85u].x * _396) / _2471)));
        float _2492 = (log2(_1562 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2493 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        uint _2496 = uint(isnan(14.0) ? _2493 : (isnan(_2493) ? 14.0 : min(_2493, 14.0)));
        uvec4 _2501 = texelFetch(g_lightClusterGridBuffer, int(((_2496 << 2u) + (_2482 << 6u)) >> 2u));
        uint _2502 = _2501.x;
        uint _2503 = _2470.z;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        if (((((1u << ((_2503 >> 4u) & 15u)) + 4294967295u) & _2502) == 0u) || ((_2503 & 240u) == 0u))
        {
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
        }
        else
        {
            float _2583;
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            uint _2733 = 0u;
            uint _2742;
            bool _2743;
            for (;;)
            {
                _2742 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2733 << 2u)) >> 2u)).x;
                _2743 = _2742 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2743)
                {
                    frontier_phi_66_pred = _2732;
                    frontier_phi_66_pred_1 = _2731;
                    frontier_phi_66_pred_2 = _2730;
                    frontier_phi_66_pred_3 = _2729;
                    frontier_phi_66_pred_4 = _2728;
                    frontier_phi_66_pred_5 = _2727;
                }
                else
                {
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    uint _2857;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2742;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    for (;;)
                    {
                        uint _2861 = uint(findLSB(_2857)) + (_2733 << 5u);
                        uint _2858 = (_2857 + 4294967295u) & _2857;
                        uint _2863 = _2861 * 48u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 3u)).x));
                        uint _2883 = (_2861 * 48u) + 4u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 3u)).x));
                        uint _2902 = (_2861 * 48u) + 8u;
                        vec3 _2913 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x));
                        float _2917 = _2877.x - _1560;
                        float _2918 = _2877.y - _1561;
                        float _2919 = _2877.z - _1562;
                        float _2920 = dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919));
                        float _2923 = inversesqrt(_2920);
                        float _2924 = _2923 * _2917;
                        float _2925 = _2923 * _2918;
                        float _2926 = _2923 * _2919;
                        float _2927 = dot(vec3(_418, _421, _424), vec3(_2924, _2925, _2926));
                        float _2932 = 1.0 - (_2920 * _2877.w);
                        float _4253 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2934 = sqrt(_2920) * _2896.w;
                        float _2937 = 1.39999997615814208984375 / (_2934 + 1.39999997615814208984375);
                        float _2938 = _2937 * _2937;
                        float _2941 = ((1.0 - _2938) * _2927) + _2938;
                        float _2944 = _2934 * _2934;
                        float _2948 = ((isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))) * _2933) / ((_2944 * 0.699999988079071044921875) + 1.0);
                        float _2952 = (-0.0) - _1560;
                        float _2953 = (-0.0) - _1561;
                        float _2954 = (-0.0) - _1562;
                        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
                        float _2959 = _2958 * _2952;
                        float _2960 = _2958 * _2953;
                        float _2961 = _2958 * _2954;
                        float _2968 = exp2(log2(1.0 / ((_2944 * 3.5) + 5.0)) * 0.25);
                        float _2969 = 1.0 - _494;
                        float _2976 = sqrt(1.0 - ((1.0 - (_2969 * _2969)) * (1.0 - (_2968 * _2968))));
                        float _2977 = _2976 * _2976;
                        float _2978 = _2977 * _2977;
                        float _2979 = _2959 + _2924;
                        float _2980 = _2960 + _2925;
                        float _2981 = _2961 + _2926;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2989 = dot(vec3(_418, _421, _424), vec3(_2959, _2960, _2961));
                        float _4269 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2992 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _2993 = dot(vec3(_418, _421, _424), vec3(_2985 * _2979, _2985 * _2980, _2985 * _2981));
                        float _4280 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _3000 = ((_2996 * _2996) * (_2978 + (-1.0))) + 1.0;
                        float _3001 = _2937 * _2977;
                        float _3002 = _3001 * _3001;
                        float _3005 = ((1.0 - _3002) * _2927) + _3002;
                        float _4291 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3006 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _3007 = 1.0 - _2977;
                        float _3017 = (0.5 / (((_3006 * ((_2992 * _3007) + _2977)) + 9.9999999392252902907785028219223e-09) + (((_3006 * _3007) + _2977) * _2992))) * _3006;
                        float _4302 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3028 = (((_2978 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3000 * _3000) * ((_2944 * 2.1991131305694580078125) + 3.141590118408203125))) * _2933;
                        _2786 = (_2948 * _2896.x) + _2854;
                        _2787 = (_2948 * _2896.y) + _2855;
                        _2788 = (_2948 * _2896.z) + _2856;
                        _2783 = (_3028 * _2913.x) + _2851;
                        _2784 = (_3028 * _2913.y) + _2852;
                        _2785 = (_3028 * _2913.z) + _2853;
                        if (_2858 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2858;
                        }
                    }
                    frontier_phi_66_pred = _2788;
                    frontier_phi_66_pred_1 = _2787;
                    frontier_phi_66_pred_2 = _2786;
                    frontier_phi_66_pred_3 = _2785;
                    frontier_phi_66_pred_4 = _2784;
                    frontier_phi_66_pred_5 = _2783;
                }
                _2593 = frontier_phi_66_pred;
                _2591 = frontier_phi_66_pred_1;
                _2589 = frontier_phi_66_pred_2;
                _2587 = frontier_phi_66_pred_3;
                _2585 = frontier_phi_66_pred_4;
                _2583 = frontier_phi_66_pred_5;
                uint _2734 = _2733 + 1u;
                if (_2734 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2727 = _2583;
                    _2728 = _2585;
                    _2729 = _2587;
                    _2730 = _2589;
                    _2731 = _2591;
                    _2732 = _2593;
                    _2733 = _2734;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
        }
        uvec4 _2596 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2597 = _2596.z;
        uint _2599 = (_2597 >> 8u) & 15u;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        if (((4294967295u << _2599) & _2502) == 0u)
        {
            _2695 = _2582;
            _2697 = _2584;
            _2699 = _2586;
            _2701 = _2588;
            _2703 = _2590;
            _2705 = _2592;
        }
        else
        {
            float _2720 = inversesqrt(dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562)));
            float _2721 = _2720 * _1560;
            float _2722 = _2720 * _1561;
            float _2723 = _2720 * _1562;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2599 < ((_2597 >> 12u) & 15u))
            {
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2834 = _2582;
                float _2835 = _2584;
                float _2836 = _2586;
                float _2837 = _2588;
                float _2838 = _2590;
                float _2839 = _2592;
                uint _2840 = _2599;
                uint _2849;
                bool _2850;
                for (;;)
                {
                    _2849 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2840 << 2u)) >> 2u)).x;
                    _2850 = _2849 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2850)
                    {
                        frontier_phi_72_pred = _2839;
                        frontier_phi_72_pred_1 = _2838;
                        frontier_phi_72_pred_2 = _2837;
                        frontier_phi_72_pred_3 = _2836;
                        frontier_phi_72_pred_4 = _2835;
                        frontier_phi_72_pred_5 = _2834;
                    }
                    else
                    {
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3046 = _2834;
                        float _3047 = _2835;
                        float _3048 = _2836;
                        float _3049 = _2837;
                        float _3050 = _2838;
                        float _3051 = _2839;
                        uint _3052 = _2849;
                        uint _3053;
                        vec4 _3078;
                        float _3079;
                        vec4 _3094;
                        vec3 _3106;
                        vec4 _3122;
                        vec4 _3138;
                        float _3185;
                        bool _3186;
                        for (;;)
                        {
                            uint _3063 = ((_2840 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3052));
                            _3053 = (_3052 + 4294967295u) & _3052;
                            uint _3065 = _3063 * 40u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3079 = _3078.w;
                            uint _3081 = (_3063 * 40u) + 4u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3096 = (_3063 * 40u) + 8u;
                            _3106 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x));
                            uint _3109 = (_3063 * 40u) + 16u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3125 = (_3063 * 40u) + 20u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3141 = (_3063 * 40u) + 24u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3160 = (_3063 * 40u) + 28u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            _3185 = fma(_1562, _3173.z, fma(_1561, _3173.y, _3173.x * _1560)) + _3173.w;
                            _3186 = !((fma(_1562, _3154.z, fma(_1561, _3154.y, _3154.x * _1560)) + _3154.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3186)
                            {
                                float _3213 = _3078.x - _1560;
                                float _3214 = _3078.y - _1561;
                                float _3215 = _3078.z - _1562;
                                float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                                float _3219 = inversesqrt(_3216);
                                float _3220 = _3219 * _3213;
                                float _3221 = _3219 * _3214;
                                float _3222 = _3219 * _3215;
                                float _3226 = 1.0 - (_3216 / (_3079 * _3079));
                                float _4313 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3231 = sqrt(_3216) * _3094.w;
                                float _3233 = 1.39999997615814208984375 / (_3231 + 1.39999997615814208984375);
                                float _3234 = _3233 * _3233;
                                float _3237 = ((1.0 - _3234) * dot(vec3(_3220, _3221, _3222), vec3(_418, _421, _424))) + _3234;
                                float _3240 = _3231 * _3231;
                                float _3244 = (fma(_1562, _3122.z, fma(_1561, _3122.y, _3122.x * _1560)) + _3122.w) / _3185;
                                float _3245 = (fma(_1562, _3138.z, fma(_1561, _3138.y, _3138.x * _1560)) + _3138.w) / _3185;
                                float _3249 = 1.0 - dot(vec2(_3244, _3245), vec2(_3244, _3245));
                                float _4329 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3251 = _3250 * (((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3227) / ((_3240 * 0.699999988079071044921875) + 1.0));
                                float _3263 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                                float _3264 = 1.0 - _494;
                                float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                                float _3272 = _3271 * _3271;
                                float _3273 = _3272 * _3272;
                                float _3274 = _3220 - _2721;
                                float _3275 = _3221 - _2722;
                                float _3276 = _3222 - _2723;
                                float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                                float _3284 = dot(vec3(_418, _421, _424), vec3((-0.0) - _2721, (-0.0) - _2722, (-0.0) - _2723));
                                float _4340 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3288 = dot(vec3(_418, _421, _424), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                                float _4351 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                                float _3296 = _3233 * _3272;
                                float _3297 = _3296 * _3296;
                                float _3303 = ((1.0 - _3297) * dot(vec3(_418, _421, _424), vec3(_3220, _3221, _3222))) + _3297;
                                float _4362 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3305 = 1.0 - _3272;
                                float _3315 = (0.5 / (((_3304 * ((_3287 * _3305) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3304 * _3305) + _3272) * _3287))) * _3304;
                                float _4373 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3325 = (_3250 * _3227) * (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) / ((_3295 * _3295) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3251 * _3094.y;
                                frontier_phi_78_pred_1 = _3251 * _3094.x;
                                frontier_phi_78_pred_2 = _3325 * _3106.z;
                                frontier_phi_78_pred_3 = _3325 * _3106.y;
                                frontier_phi_78_pred_4 = _3325 * _3106.x;
                                frontier_phi_78_pred_5 = _3251 * _3094.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3333 = frontier_phi_78_pred;
                            _3332 = frontier_phi_78_pred_1;
                            _3331 = frontier_phi_78_pred_2;
                            _3330 = frontier_phi_78_pred_3;
                            _3329 = frontier_phi_78_pred_4;
                            _3334 = frontier_phi_78_pred_5;
                            _3036 = _3332 + _3049;
                            _3037 = _3333 + _3050;
                            _3038 = _3334 + _3051;
                            _3033 = _3329 + _3046;
                            _3034 = _3330 + _3047;
                            _3035 = _3331 + _3048;
                            if (_3053 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3053;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3038;
                        frontier_phi_72_pred_1 = _3037;
                        frontier_phi_72_pred_2 = _3036;
                        frontier_phi_72_pred_3 = _3035;
                        frontier_phi_72_pred_4 = _3034;
                        frontier_phi_72_pred_5 = _3033;
                    }
                    _2706 = frontier_phi_72_pred;
                    _2704 = frontier_phi_72_pred_1;
                    _2702 = frontier_phi_72_pred_2;
                    _2700 = frontier_phi_72_pred_3;
                    _2698 = frontier_phi_72_pred_4;
                    _2696 = frontier_phi_72_pred_5;
                    uint _2841 = _2840 + 1u;
                    if (_2841 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2834 = _2696;
                        _2835 = _2698;
                        _2836 = _2700;
                        _2837 = _2702;
                        _2838 = _2704;
                        _2839 = _2706;
                        _2840 = _2841;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2706;
                frontier_phi_60_61_ladder_1 = _2704;
                frontier_phi_60_61_ladder_2 = _2700;
                frontier_phi_60_61_ladder_3 = _2698;
                frontier_phi_60_61_ladder_4 = _2696;
                frontier_phi_60_61_ladder_5 = _2702;
            }
            else
            {
                frontier_phi_60_61_ladder = _2592;
                frontier_phi_60_61_ladder_1 = _2590;
                frontier_phi_60_61_ladder_2 = _2586;
                frontier_phi_60_61_ladder_3 = _2584;
                frontier_phi_60_61_ladder_4 = _2582;
                frontier_phi_60_61_ladder_5 = _2588;
            }
            _2695 = frontier_phi_60_61_ladder_4;
            _2697 = frontier_phi_60_61_ladder_3;
            _2699 = frontier_phi_60_61_ladder_2;
            _2701 = frontier_phi_60_61_ladder_5;
            _2703 = frontier_phi_60_61_ladder_1;
            _2705 = frontier_phi_60_61_ladder;
        }
        float _2710 = isnan(1.0) ? _478 : (isnan(_478) ? 1.0 : min(_478, 1.0));
        _2515 = (_2710 * _2701) + _2027;
        _2517 = (_2710 * _2703) + _2029;
        _2519 = (_2710 * _2705) + _2031;
        _2521 = ((_2695 * _463) * _2710) + _2365;
        _2523 = ((_2697 * _465) * _2710) + _2367;
        _2525 = ((_2699 * _466) * _2710) + _2369;
    }
    else
    {
        _2515 = _2027;
        _2517 = _2029;
        _2519 = _2031;
        _2521 = _2365;
        _2523 = _2367;
        _2525 = _2369;
    }
    float _4389 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4400 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4411 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    uint _2545 = _437 + 6u;
    float _2553 = _396 / cbSceneParam._m0[86u].x;
    float _2554 = _397 / cbSceneParam._m0[86u].y;
    vec4 _2568 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2553, _2554, (log2((isnan(cbSceneParam._m0[77u].w) ? _330 : (isnan(_330) ? cbSceneParam._m0[77u].w : min(_330, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2570 = _2568.x;
    float _2571 = _2568.y;
    float _2572 = _2568.z;
    float _2573 = _2568.w;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_330 > cbSceneParam._m0[78u].w)
    {
        float _2607 = isnan(_330) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _330 : min(cbSceneParam._m0[80u].w, _330));
        float _2608 = _2607 / _330;
        float _2619 = _2608 * _381;
        float _2620 = _382 * _2608;
        float _2621 = (-0.0) - _2620;
        float _2623 = _2608 * _383;
        float _2625 = (cbSceneParam._m0[77u].w * _2621) / _2607;
        float _2626 = _2625 + cbSceneParam._m0[79u].w;
        float _2627 = cbSceneParam._m0[79u].w - _2620;
        float _2633 = sqrt(((_2619 * _2619) + (_2620 * _2620)) + (_2623 * _2623));
        float _2636 = (1.0 - (cbSceneParam._m0[77u].w / _2607)) * _2633;
        float _2641 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2643 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2796;
        if (abs((_2621 - _2625) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2796 = ((((_2626 > 0.0) ? exp2(_2641 * _2626) : (2.0 - exp2(_2643 * _2626))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2636;
        }
        else
        {
            float _2756 = 1.0 / cbSceneParam._m0[80u].x;
            float _2757 = isnan(_2627) ? _2626 : (isnan(_2626) ? _2627 : max(_2626, _2627));
            float _2758 = isnan(_2627) ? _2626 : (isnan(_2626) ? _2627 : min(_2626, _2627));
            float _2767 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : min(_2757, 0.0));
            float _2768 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : min(_2758, 0.0));
            _2796 = ((abs(_2633 / _2621) * cbSceneParam._m0[80u].y) * ((((_2767 - _2768) * 2.0) - ((exp2(_2641 * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0)))) - exp2(_2641 * (isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0))))) * _2756)) - ((exp2(_2643 * _2767) - exp2(_2643 * _2768)) * _2756))) + (_2636 * cbSceneParam._m0[80u].z);
        }
        vec4 _2798 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2553, _2554, 1.0), 0.0);
        float _2807 = exp2((_2796 * (-1.44269502162933349609375)) * (1.0 - _2798.w));
        float _2808 = log2(_2807);
        float _2824 = log2(_2573);
        _2645 = (exp2(_2824 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].x)) * _2798.x) / cbSceneParam._m0[78u].x)) + _2570;
        _2647 = (exp2(_2824 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].y)) * _2798.y) / cbSceneParam._m0[78u].y)) + _2571;
        _2649 = (exp2(_2824 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].z)) * _2798.z) / cbSceneParam._m0[78u].z)) + _2572;
        _2651 = _2807 * _2573;
    }
    else
    {
        _2645 = _2570;
        _2647 = _2571;
        _2649 = _2572;
        _2651 = _2573;
    }
    float _2663 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2664 = _2663 == 3.0;
    float _2665 = log2(_2651);
    float _2672 = exp2(_2665 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2515 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _478))) + ((_2521 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1288)) * cbPerFrame._m0[3u].x));
    float _2673 = exp2(_2665 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2517 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _478))) + ((_2523 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1288)) * cbPerFrame._m0[3u].x));
    float _2674 = exp2(_2665 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2519 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _478))) + ((_2525 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1288)) * cbPerFrame._m0[3u].x));
    float _2683 = (_2663 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2683 * (_2664 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.y = _2683 * (_2664 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2647)));
    SV_Target.z = _2683 * (_2664 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2649)));
    SV_Target.w = cbInstanceData._m0[_2545].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2545].w;
}


