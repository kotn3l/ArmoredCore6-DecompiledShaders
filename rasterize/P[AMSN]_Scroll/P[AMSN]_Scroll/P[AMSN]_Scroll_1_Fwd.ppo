#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _819;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _218 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _224 = _218.x * cbMtdParam._m0[9u].x;
    float _225 = _218.y * cbMtdParam._m0[9u].y;
    float _226 = _218.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(P_AMSN_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _246 = _242.z;
    float _250 = (_242.x * 2.0) + (-1.0);
    float _252 = (_242.y * 2.0) + (-1.0);
    float _253 = dot(vec2(_250, _252), vec2(_250, _252));
    float _3156 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _259 = sqrt(1.0 - (isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0))));
    float _262 = fma(_259, _188 * NORMAL.x, fma(_252, _195 * TANGENT.x, (_181 * _174) * _250));
    float _265 = fma(_259, _188 * NORMAL.y, fma(_252, _195 * TANGENT.y, (_181 * _175) * _250));
    float _268 = fma(_259, _188 * NORMAL.z, fma(_252, _195 * TANGENT.z, (_181 * _176) * _250));
    float _272 = inversesqrt(dot(vec3(_262, _265, _268), vec3(_262, _265, _268)));
    float _273 = _272 * _262;
    float _274 = _272 * _265;
    float _275 = _272 * _268;
    float _3167 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _276 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
    float _3178 = isnan(0.0) ? _224 : (isnan(_224) ? 0.0 : max(_224, 0.0));
    float _3189 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _3200 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3211 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _280 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
    float _296 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _337 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _347 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _337);
    float _348 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _337);
    float _349 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _337);
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _347 * _353;
    float _355 = _348 * _353;
    float _356 = _349 * _353;
    float _362 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _363 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _384 = fma(_275, cbSceneParam._m0[5u].z, fma(_274, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _273));
    float _387 = fma(_275, cbSceneParam._m0[6u].z, fma(_274, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _273));
    float _390 = fma(_275, cbSceneParam._m0[7u].z, fma(_274, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _273));
    uint _403 = uint(roundEven(NORMAL.w)) * 13u;
    uint _406 = (_403 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _412 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0)))) * cbInstanceData._m0[_406].x;
    float _413 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0)))) * cbInstanceData._m0[_406].y;
    float _414 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0)))) * cbInstanceData._m0[_406].z;
    float _3222 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    float _3233 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _416 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
    float _3244 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
    float _418 = 1.0 - _280;
    float _419 = _415 * _418;
    float _420 = _416 * _418;
    float _421 = _417 * _418;
    float _426 = (_415 + (-0.039999999105930328369140625)) * _280;
    float _427 = (_416 + (-0.039999999105930328369140625)) * _280;
    float _428 = (_417 + (-0.039999999105930328369140625)) * _280;
    float _429 = _426 + 0.039999999105930328369140625;
    float _431 = _427 + 0.039999999105930328369140625;
    float _432 = _428 + 0.039999999105930328369140625;
    vec4 _441 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _362, cbSceneParam._m0[86u].y * _363));
    float _444 = _441.x * TEXCOORD.z;
    float _445 = dot(vec3(_273, _274, _275), vec3(_354, _355, _356));
    float _448 = _445 * 2.0;
    float _452 = (_448 * _273) - _354;
    float _453 = (_448 * _274) - _355;
    float _454 = (_448 * _275) - _356;
    float _458 = abs(dot(vec3(_354, _355, _356), vec3(_273, _274, _275)));
    float _3255 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _460 = sqrt(_276);
    float _473 = exp2((_460 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_460 * 3.0));
    float _479 = (1.0 - _473) * ((_460 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _480 = _473 * _460;
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _818;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _543 = fma(_516, cbModelParam._m0[26u].z, fma(_512, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _508));
        float _547 = fma(_516, cbModelParam._m0[27u].z, fma(_512, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _508));
        float _551 = fma(_516, cbModelParam._m0[28u].z, fma(_512, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _508));
        float _576 = _508 + _273;
        float _577 = _512 + _274;
        float _578 = _516 + _275;
        float _588 = fma(_578, cbModelParam._m0[26u].z, fma(_577, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _576)) - _543;
        float _589 = fma(_578, cbModelParam._m0[27u].z, fma(_577, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _576)) - _547;
        float _590 = fma(_578, cbModelParam._m0[28u].z, fma(_577, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _576)) - _551;
        float _594 = inversesqrt(dot(vec3(_588, _589, _590), vec3(_588, _589, _590)));
        float _607 = ((_594 * _588) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_543 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _608 = ((_594 * _589) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_547 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _609 = ((_594 * _590) / cbModelParam._m0[34u].z) + ((((((_551 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _612 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_607, _608, _609), 0.0);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_607, _608, _609), 0.0);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_607, _608, _609), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_607, _608, _609), 0.0);
        float _646 = exp2((_612.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_612.x + (-0.5));
        float _648 = _646 * (_612.y + (-0.5));
        float _649 = _646 * (_612.z + (-0.5));
        float _656 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_619.x + (-0.5));
        float _658 = _656 * (_619.y + (-0.5));
        float _659 = _656 * (_619.z + (-0.5));
        float _666 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _667 = _666 * (_626.x + (-0.5));
        float _668 = _666 * (_626.y + (-0.5));
        float _669 = _666 * (_626.z + (-0.5));
        float _676 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_633.x + (-0.5));
        float _678 = _676 * (_633.y + (-0.5));
        float _679 = _676 * (_633.z + (-0.5));
        float _680 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _681 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _682 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _683 = _647 * 0.5;
        float _684 = _657 * 0.5;
        float _685 = _667 * 0.5;
        float _686 = dot(vec3(_683, _684, _685), vec3(_683, _684, _685));
        float _691 = (_686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_686);
        float _700 = (dot(vec3(_273, _274, _275), vec3(_691 * _683, _691 * _684, _691 * _685)) + 1.0) * 0.5;
        float _3281 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _710 = sqrt(((_684 * _684) + (_683 * _683)) + (_685 * _685)) / (_680 + 9.9999997473787516355514526367188e-06);
        float _3292 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _712 = _711 * 2.0;
        float _716 = (1.0 - _711) / (_711 + 1.0);
        float _3303 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _726 = ((((1.0 - _717) * (_712 + 2.0)) * exp2(log2(isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) * (_712 + 1.0))) + _717) * _680;
        float _727 = _648 * 0.5;
        float _728 = _658 * 0.5;
        float _729 = _668 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _743 = (dot(vec3(_273, _274, _275), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3314 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _752 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_681 + 9.9999997473787516355514526367188e-06);
        float _3325 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3336 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) * (_754 + 1.0))) + _759) * _681;
        float _769 = _649 * 0.5;
        float _770 = _659 * 0.5;
        float _771 = _669 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _785 = (dot(vec3(_273, _274, _275), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3347 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _794 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_682 + 9.9999997473787516355514526367188e-06);
        float _3358 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3369 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_796 + 1.0))) + _801) * _682;
        _818 = _649;
        _820 = _648;
        _821 = _647;
        _822 = _659;
        _823 = _658;
        _824 = _657;
        _825 = _669;
        _826 = _668;
        _827 = _667;
        _828 = _682;
        _829 = _681;
        _830 = _680;
        _831 = cbModelParam._m0[36u].z * (isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0)));
        _832 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
        _833 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
    }
    else
    {
        _818 = _819;
        _820 = _819;
        _821 = _819;
        _822 = _819;
        _823 = _819;
        _824 = _819;
        _825 = _819;
        _826 = _819;
        _827 = _819;
        _828 = _819;
        _829 = _819;
        _830 = _819;
        _831 = 0.0;
        _832 = 0.0;
        _833 = 0.0;
    }
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _859 = fma(_516, cbModelParam._m0[30u].z, fma(_512, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _508));
        float _863 = fma(_516, cbModelParam._m0[31u].z, fma(_512, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _508));
        float _867 = fma(_516, cbModelParam._m0[32u].z, fma(_512, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _508));
        float _890 = _508 + _273;
        float _891 = _512 + _274;
        float _892 = _516 + _275;
        float _902 = fma(_892, cbModelParam._m0[30u].z, fma(_891, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _890)) - _859;
        float _903 = fma(_892, cbModelParam._m0[31u].z, fma(_891, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _890)) - _863;
        float _904 = fma(_892, cbModelParam._m0[32u].z, fma(_891, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _890)) - _867;
        float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
        float _921 = ((_908 * _902) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_859 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_908 * _903) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_863 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_908 * _904) / cbModelParam._m0[35u].z) + ((((((_867 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        float _958 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_925.x + (-0.5));
        float _960 = _958 * (_925.y + (-0.5));
        float _961 = _958 * (_925.z + (-0.5));
        float _968 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_932.x + (-0.5));
        float _970 = _968 * (_932.y + (-0.5));
        float _971 = _968 * (_932.z + (-0.5));
        float _978 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_939.x + (-0.5));
        float _980 = _978 * (_939.y + (-0.5));
        float _981 = _978 * (_939.z + (-0.5));
        float _988 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_946.x + (-0.5));
        float _990 = _988 * (_946.y + (-0.5));
        float _991 = _988 * (_946.z + (-0.5));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = _959 * 0.5;
        float _996 = _969 * 0.5;
        float _997 = _979 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_273, _274, _275), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3432 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_1022 + 1.0))) + _1027) * _992;
        float _1037 = _960 * 0.5;
        float _1038 = _970 * 0.5;
        float _1039 = _980 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_273, _274, _275), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3465 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_1064 + 1.0))) + _1069) * _993;
        float _1079 = _961 * 0.5;
        float _1080 = _971 * 0.5;
        float _1081 = _981 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_273, _274, _275), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3498 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_1106 + 1.0))) + _1111) * _994;
        _1128 = _961;
        _1129 = _960;
        _1130 = _959;
        _1131 = _971;
        _1132 = _970;
        _1133 = _969;
        _1134 = _981;
        _1135 = _980;
        _1136 = _979;
        _1137 = _994;
        _1138 = _993;
        _1139 = _992;
        _1140 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1141 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1142 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
    }
    else
    {
        _1128 = _819;
        _1129 = _819;
        _1130 = _819;
        _1131 = _819;
        _1132 = _819;
        _1133 = _819;
        _1134 = _819;
        _1135 = _819;
        _1136 = _819;
        _1137 = _819;
        _1138 = _819;
        _1139 = _819;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
    }
    float _1152 = (cbModelParam._m0[1u].x * (_1140 - _831)) + _831;
    float _1153 = (cbModelParam._m0[1u].x * (_1141 - _832)) + _832;
    float _1154 = (cbModelParam._m0[1u].x * (_1142 - _833)) + _833;
    float _1175 = fma(_1154, cbSceneParam._m0[89u].z, fma(_1153, cbSceneParam._m0[89u].y, _1152 * cbSceneParam._m0[89u].x));
    float _1178 = fma(_1154, cbSceneParam._m0[90u].z, fma(_1153, cbSceneParam._m0[90u].y, _1152 * cbSceneParam._m0[90u].x));
    float _1181 = fma(_1154, cbSceneParam._m0[91u].z, fma(_1153, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1152));
    float _1196 = _452 * 0.5;
    float _1197 = _453 * 0.5;
    float _1198 = _454 * 0.5;
    float _1199 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_1130, _1133, _1136, _1139));
    float _1202 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_1129, _1132, _1135, _1138));
    float _1205 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_1128, _1131, _1134, _1137));
    float _1239;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1212 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_818, _822, _825, _828));
        float _1216 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_820, _823, _826, _829));
        float _1220 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_821, _824, _827, _830));
        float _1227 = dot(vec4(cbModelParam._m0[39u]), vec4(_1196, _1197, _1198, 1.0));
        _1239 = dot(vec3(isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)), isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)), isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1227) ? 0.0 : (isnan(0.0) ? _1227 : max(0.0, _1227))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1239 = 1.0;
    }
    float _1250;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1241 = dot(vec4(cbModelParam._m0[40u]), vec4(_1196, _1197, _1198, 1.0));
        _1250 = dot(vec3(isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1241) ? 0.0 : (isnan(0.0) ? _1241 : max(0.0, _1241))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1250 = 1.0;
    }
    float _1254 = (_1250 * cbModelParam._m0[1u].x) + (_1239 * (1.0 - cbModelParam._m0[1u].x));
    float _1264 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _276);
    float _1265 = isnan(_1264) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1264 : min(cbModelParam._m0[25u].z, _1264));
    float _1347;
    float _1349;
    float _1351;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1314 = fma(_516, cbModelParam._m0[13u].z, fma(_512, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508)) + cbModelParam._m0[13u].w;
        float _1318 = fma(_516, cbModelParam._m0[14u].z, fma(_512, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508)) + cbModelParam._m0[14u].w;
        float _1322 = fma(_516, cbModelParam._m0[15u].z, fma(_512, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508)) + cbModelParam._m0[15u].w;
        float _1325 = fma(_454, cbModelParam._m0[13u].z, fma(_453, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _452));
        float _1328 = fma(_454, cbModelParam._m0[14u].z, fma(_453, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _452));
        float _1331 = fma(_454, cbModelParam._m0[15u].z, fma(_453, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _452));
        float _1359;
        if (_1325 > 0.0)
        {
            _1359 = abs((1.0 - _1314) / _1325);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1325 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1314 + 1.0) / _1325);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1359 = frontier_phi_14_12_ladder;
        }
        float _1567;
        if (_1328 > 0.0)
        {
            _1567 = abs((1.0 - _1318) / _1328);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1318 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1567 = frontier_phi_23_19_ladder;
        }
        float _1821;
        if (_1331 > 0.0)
        {
            _1821 = abs((1.0 - _1322) / _1331);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1322 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1821 = frontier_phi_35_30_ladder;
        }
        float _1823 = isnan(_1567) ? _1359 : (isnan(_1359) ? _1567 : min(_1359, _1567));
        float _1824 = isnan(_1821) ? _1823 : (isnan(_1823) ? _1821 : min(_1823, _1821));
        float _1828 = (_1824 * _1325) + _1314;
        float _1829 = (_1824 * _1328) + _1318;
        float _1830 = (_1824 * _1331) + _1322;
        float _1831 = _1824 * 9.9999997473787516355514526367188e-05;
        float _1833 = (-1.0) - _1831;
        float _1835 = _1831 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1830 > _1835) || ((_1830 < _1833) || ((_1829 > _1835) || ((_1829 < _1833) || ((_1828 < _1833) || (_1828 > _1835))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1958 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1830, cbModelParam._m0[9u].z, fma(_1829, cbModelParam._m0[9u].y, _1828 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1830, cbModelParam._m0[10u].z, fma(_1829, cbModelParam._m0[10u].y, _1828 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1830, cbModelParam._m0[11u].z, fma(_1829, cbModelParam._m0[11u].y, _1828 * cbModelParam._m0[11u].x))), _1265);
            frontier_phi_13_35_ladder = _1958.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1958.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1958.x * cbModelParam._m0[1u].y;
        }
        _1347 = frontier_phi_13_35_ladder_2;
        _1349 = frontier_phi_13_35_ladder_1;
        _1351 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1335 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_452, _453, _454), _1265);
        _1347 = _1335.x * cbModelParam._m0[1u].y;
        _1349 = _1335.y * cbModelParam._m0[1u].y;
        _1351 = _1335.z * cbModelParam._m0[1u].y;
    }
    float _1355 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _276);
    float _1356 = isnan(_1355) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1355 : min(cbModelParam._m0[25u].w, _1355));
    float _1449;
    float _1451;
    float _1453;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1413 = fma(_516, cbModelParam._m0[21u].z, fma(_512, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508)) + cbModelParam._m0[21u].w;
        float _1417 = fma(_516, cbModelParam._m0[22u].z, fma(_512, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508)) + cbModelParam._m0[22u].w;
        float _1421 = fma(_516, cbModelParam._m0[23u].z, fma(_512, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508)) + cbModelParam._m0[23u].w;
        float _1424 = fma(_454, cbModelParam._m0[21u].z, fma(_453, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _452));
        float _1427 = fma(_454, cbModelParam._m0[22u].z, fma(_453, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _452));
        float _1430 = fma(_454, cbModelParam._m0[23u].z, fma(_453, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _452));
        float _1572;
        if (_1424 > 0.0)
        {
            _1572 = abs((1.0 - _1413) / _1424);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1413 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1572 = frontier_phi_25_21_ladder;
        }
        float _1848;
        if (_1427 > 0.0)
        {
            _1848 = abs((1.0 - _1417) / _1427);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1417 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1848 = frontier_phi_37_32_ladder;
        }
        float _2061;
        if (_1430 > 0.0)
        {
            _2061 = abs((1.0 - _1421) / _1430);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1421 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2061 = frontier_phi_46_43_ladder;
        }
        float _2063 = isnan(_1848) ? _1572 : (isnan(_1572) ? _1848 : min(_1572, _1848));
        float _2064 = isnan(_2061) ? _2063 : (isnan(_2063) ? _2061 : min(_2063, _2061));
        float _2068 = (_2064 * _1424) + _1413;
        float _2069 = (_2064 * _1427) + _1417;
        float _2070 = (_2064 * _1430) + _1421;
        float _2071 = _2064 * 9.9999997473787516355514526367188e-05;
        float _2072 = (-1.0) - _2071;
        float _2074 = _2071 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2070 > _2074) || ((_2070 < _2072) || ((_2069 > _2074) || ((_2069 < _2072) || ((_2068 < _2072) || (_2068 > _2074))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2269 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2070, cbModelParam._m0[17u].z, fma(_2069, cbModelParam._m0[17u].y, _2068 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2070, cbModelParam._m0[18u].z, fma(_2069, cbModelParam._m0[18u].y, _2068 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2070, cbModelParam._m0[19u].z, fma(_2069, cbModelParam._m0[19u].y, _2068 * cbModelParam._m0[19u].x))), _1356);
            frontier_phi_22_46_ladder = _2269.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2269.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2269.x * cbModelParam._m0[1u].z;
        }
        _1449 = frontier_phi_22_46_ladder_2;
        _1451 = frontier_phi_22_46_ladder_1;
        _1453 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1433 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_452, _453, _454), _1356);
        _1449 = _1433.x * cbModelParam._m0[1u].z;
        _1451 = _1433.y * cbModelParam._m0[1u].z;
        _1453 = _1433.z * cbModelParam._m0[1u].z;
    }
    float _1466 = (((_479 * _429) + _480) * _444) * ((cbModelParam._m0[1u].w * (_1449 - _1347)) + _1347);
    float _1468 = (((_479 * _431) + _480) * _444) * ((cbModelParam._m0[1u].w * (_1451 - _1349)) + _1349);
    float _1470 = (((_479 * _432) + _480) * _444) * ((cbModelParam._m0[1u].w * (_1453 - _1351)) + _1351);
    float _1473 = fma(_1470, cbSceneParam._m0[89u].z, fma(_1468, cbSceneParam._m0[89u].y, _1466 * cbSceneParam._m0[89u].x));
    float _1476 = fma(_1470, cbSceneParam._m0[90u].z, fma(_1468, cbSceneParam._m0[90u].y, _1466 * cbSceneParam._m0[90u].x));
    float _1479 = fma(_1470, cbSceneParam._m0[91u].z, fma(_1468, cbSceneParam._m0[91u].y, _1466 * cbSceneParam._m0[91u].x));
    uvec4 _1489 = floatBitsToUint(cbInstanceData._m0[_403 + 5u]);
    uint _1491 = _1489.x * 14u;
    uint _1492 = _1491 + 13u;
    float _1499 = _444 + (-1.0);
    float _1504 = (cbLight._m0[_1492].x * _1499) + 1.0;
    float _1505 = (cbLight._m0[_1492].y * _1499) + 1.0;
    float _1506 = (cbLight._m0[_1492].z * _1499) + 1.0;
    float _1507 = (cbLight._m0[_1492].w * _1499) + 1.0;
    uint _1508 = _1491 + 5u;
    float _1514 = isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0));
    uint _1518 = _1491 + 4u;
    float _1525 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
    uint _1529 = _1491 | 1u;
    float _1540 = dot(vec3(cbLight._m0[_1491].xyz), vec3(_273, _274, _275));
    float _1543 = dot(vec3(cbLight._m0[_1529].xyz), vec3(_273, _274, _275));
    float _3634 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
    float _3645 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
    float _1548 = (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * 0.3183098733425140380859375;
    float _1550 = (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * 0.3183098733425140380859375;
    float _1557 = ((cbLight._m0[_1508].x * _1514) * _1550) + ((cbLight._m0[_1518].x * _1525) * _1548);
    float _1558 = ((_1514 * cbLight._m0[_1508].y) * _1550) + ((_1525 * cbLight._m0[_1518].y) * _1548);
    float _1559 = ((_1514 * cbLight._m0[_1508].z) * _1550) + ((_1525 * cbLight._m0[_1518].z) * _1548);
    uvec4 _1564 = floatBitsToUint(cbLight._m0[_1491 + 12u]);
    bool _1566 = _1564.x == 0u;
    float _1577;
    float _1579;
    float _1581;
    if (_1566)
    {
        _1577 = _1557;
        _1579 = _1558;
        _1581 = _1559;
    }
    else
    {
        uint _1585 = _1491 + 6u;
        float _1601 = (dot(vec3(cbLight._m0[_1491 + 2u].xyz), vec3(_273, _274, _275)) * 0.5) + 0.5;
        float _1602 = _1601 * _1601;
        float _3656 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1604 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
        _1577 = (((cbLight._m0[_1585].x * 0.3183098733425140380859375) * _1603) * _1604) + _1557;
        _1579 = (((cbLight._m0[_1585].y * 0.3183098733425140380859375) * _1603) * _1604) + _1558;
        _1581 = (((cbLight._m0[_1585].z * 0.3183098733425140380859375) * _1603) * _1604) + _1559;
    }
    bool _1584 = _1564.y == 0u;
    float _1622;
    float _1624;
    float _1626;
    if (_1584)
    {
        _1622 = _1577;
        _1624 = _1579;
        _1626 = _1581;
    }
    else
    {
        uint _1792 = _1491 + 7u;
        float _1808 = (dot(vec3(cbLight._m0[_1491 + 3u].xyz), vec3(_273, _274, _275)) * 0.5) + 0.5;
        float _1809 = _1808 * _1808;
        float _3672 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1811 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
        _1622 = (((cbLight._m0[_1792].x * 0.3183098733425140380859375) * _1810) * _1811) + _1577;
        _1624 = (((cbLight._m0[_1792].y * 0.3183098733425140380859375) * _1810) * _1811) + _1579;
        _1626 = (((cbLight._m0[_1792].z * 0.3183098733425140380859375) * _1810) * _1811) + _1581;
    }
    uint _1629 = _1491 + 8u;
    float _1642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1491].w)) * _276) * 0.949999988079071044921875);
    float _1643 = _1642 * _1642;
    float _1644 = cbLight._m0[_1491].x + _354;
    float _1645 = cbLight._m0[_1491].y + _355;
    float _1646 = cbLight._m0[_1491].z + _356;
    float _1650 = inversesqrt(dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646)));
    float _1651 = _1650 * _1644;
    float _1652 = _1650 * _1645;
    float _1653 = _1650 * _1646;
    float _1654 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1491].xyz));
    float _3688 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1657 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _1658 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _1659 = dot(vec3(_273, _274, _275), vec3(_1651, _1652, _1653));
    float _3710 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _1662 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _1663 = dot(vec3(cbLight._m0[_1491].xyz), vec3(_1651, _1652, _1653));
    float _3721 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    float _1667 = _1643 * _1643;
    float _1671 = ((_1662 * _1662) * (_1667 + (-1.0))) + 1.0;
    float _1679 = exp2(log2(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * 5.0);
    float _1680 = 0.959999978542327880859375 - _426;
    float _1682 = 0.959999978542327880859375 - _427;
    float _1683 = 0.959999978542327880859375 - _428;
    float _1690 = 1.0 - _1643;
    float _1701 = (0.5 / (((_1658 * ((_1657 * _1690) + _1643)) + 9.9999999392252902907785028219223e-09) + (((_1658 * _1690) + _1643) * _1657))) * _1657;
    float _3732 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1703 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1667 / ((_1671 * _1671) * 3.141590118408203125));
    uint _1714 = _1491 + 9u;
    float _1725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1529].w)) * _276) * 0.949999988079071044921875);
    float _1726 = _1725 * _1725;
    float _1727 = cbLight._m0[_1529].x + _354;
    float _1728 = cbLight._m0[_1529].y + _355;
    float _1729 = cbLight._m0[_1529].z + _356;
    float _1733 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
    float _1734 = _1733 * _1727;
    float _1735 = _1733 * _1728;
    float _1736 = _1733 * _1729;
    float _1737 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1529].xyz));
    float _3743 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1740 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _1741 = dot(vec3(_273, _274, _275), vec3(_1734, _1735, _1736));
    float _3754 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1744 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _1745 = dot(vec3(cbLight._m0[_1529].xyz), vec3(_1734, _1735, _1736));
    float _3765 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1749 = _1726 * _1726;
    float _1753 = ((_1744 * _1744) * (_1749 + (-1.0))) + 1.0;
    float _1760 = exp2(log2(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * 5.0);
    float _1767 = 1.0 - _1726;
    float _1777 = (0.5 / (((_1658 * ((_1740 * _1767) + _1726)) + 9.9999999392252902907785028219223e-09) + (((_1658 * _1767) + _1726) * _1740))) * _1740;
    float _3776 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1779 = (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1749 / ((_1753 * _1753) * 3.141590118408203125));
    float _1789 = (((((_1760 * _1680) + _429) * cbLight._m0[_1714].x) * _1779) * _1514) + (((((_1679 * _1680) + _429) * cbLight._m0[_1629].x) * _1703) * _1525);
    float _1790 = (((((_1760 * _1682) + _431) * cbLight._m0[_1714].y) * _1779) * _1514) + (((((_1679 * _1682) + _431) * cbLight._m0[_1629].y) * _1703) * _1525);
    float _1791 = (((((_1760 * _1683) + _432) * cbLight._m0[_1714].z) * _1779) * _1514) + (((((_1679 * _1683) + _432) * cbLight._m0[_1629].z) * _1703) * _1525);
    float _1853;
    float _1855;
    float _1857;
    if (_1566)
    {
        _1853 = _1789;
        _1855 = _1790;
        _1857 = _1791;
    }
    else
    {
        uint _1859 = _1491 + 2u;
        uint _1863 = _1491 + 10u;
        float _1877 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1859].w)) * _276) * 0.949999988079071044921875);
        float _1878 = _1877 * _1877;
        float _1879 = cbLight._m0[_1859].x + _354;
        float _1880 = cbLight._m0[_1859].y + _355;
        float _1881 = cbLight._m0[_1859].z + _356;
        float _1885 = inversesqrt(dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881)));
        float _1886 = _1885 * _1879;
        float _1887 = _1885 * _1880;
        float _1888 = _1885 * _1881;
        float _1889 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1859].xyz));
        float _3787 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1892 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1893 = dot(vec3(_273, _274, _275), vec3(_1886, _1887, _1888));
        float _3798 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1896 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1897 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_1886, _1887, _1888));
        float _3809 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1901 = _1878 * _1878;
        float _1905 = ((_1896 * _1896) * (_1901 + (-1.0))) + 1.0;
        float _1912 = exp2(log2(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * 5.0);
        float _1919 = 1.0 - _1878;
        float _1929 = (0.5 / (((_1658 * ((_1892 * _1919) + _1878)) + 9.9999999392252902907785028219223e-09) + (((_1658 * _1919) + _1878) * _1892))) * _1892;
        float _3820 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1931 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1901 / ((_1905 * _1905) * 3.141590118408203125));
        float _1932 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
        _1853 = (((((_1912 * _1680) + _429) * cbLight._m0[_1863].x) * _1931) * _1932) + _1789;
        _1855 = (((((_1912 * _1682) + _431) * cbLight._m0[_1863].y) * _1931) * _1932) + _1790;
        _1857 = (((((_1912 * _1683) + _432) * cbLight._m0[_1863].z) * _1931) * _1932) + _1791;
    }
    float _1967;
    float _1969;
    float _1971;
    if (_1584)
    {
        _1967 = _1853;
        _1969 = _1855;
        _1971 = _1857;
    }
    else
    {
        uint _1978 = _1491 + 3u;
        uint _1982 = _1491 + 11u;
        float _1996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _276) * 0.949999988079071044921875);
        float _1997 = _1996 * _1996;
        float _1998 = cbLight._m0[_1978].x + _354;
        float _1999 = cbLight._m0[_1978].y + _355;
        float _2000 = cbLight._m0[_1978].z + _356;
        float _2004 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
        float _2005 = _2004 * _1998;
        float _2006 = _2004 * _1999;
        float _2007 = _2004 * _2000;
        float _2008 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1978].xyz));
        float _3836 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2011 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _2012 = dot(vec3(_273, _274, _275), vec3(_2005, _2006, _2007));
        float _3847 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2015 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _2016 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2005, _2006, _2007));
        float _3858 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2020 = _1997 * _1997;
        float _2024 = ((_2015 * _2015) * (_2020 + (-1.0))) + 1.0;
        float _2031 = exp2(log2(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * 5.0);
        float _2038 = 1.0 - _1997;
        float _2048 = (0.5 / (((_1658 * ((_2011 * _2038) + _1997)) + 9.9999999392252902907785028219223e-09) + (((_1658 * _2038) + _1997) * _2011))) * _2011;
        float _3869 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2050 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_2020 / ((_2024 * _2024) * 3.141590118408203125));
        float _2051 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
        _1967 = (((((_2031 * _1680) + _429) * cbLight._m0[_1982].x) * _2050) * _2051) + _1853;
        _1969 = (((((_2031 * _1682) + _431) * cbLight._m0[_1982].y) * _2050) * _2051) + _1855;
        _1971 = (((((_2031 * _1683) + _432) * cbLight._m0[_1982].z) * _2050) * _2051) + _1857;
    }
    float _2186;
    float _2188;
    float _2190;
    float _2192;
    float _2194;
    float _2196;
    if (_1489.y == 0u)
    {
        float _2126 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2127 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2126;
        float _2128 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2126;
        float _2129 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2126;
        uvec4 _2141 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2142 = _2141.x;
        uint _2153 = uint((float(_2141.y) * floor(float(uint(cbSceneParam._m0[85u].y * _363) / _2142))) + floor(float(uint(cbSceneParam._m0[85u].x * _362) / _2142)));
        float _2163 = (log2(_2129 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2164 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        uint _2167 = uint(isnan(14.0) ? _2164 : (isnan(_2164) ? 14.0 : min(_2164, 14.0)));
        uvec4 _2172 = texelFetch(g_lightClusterGridBuffer, int(((_2167 << 2u) + (_2153 << 6u)) >> 2u));
        uint _2173 = _2172.x;
        uint _2174 = _2141.z;
        float _2274;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        if (((((1u << ((_2174 >> 4u) & 15u)) + 4294967295u) & _2173) == 0u) || ((_2174 & 240u) == 0u))
        {
            _2274 = 0.0;
            _2276 = 0.0;
            _2278 = 0.0;
            _2280 = 0.0;
            _2282 = 0.0;
            _2284 = 0.0;
        }
        else
        {
            float _2275;
            float _2277;
            float _2279;
            float _2281;
            float _2283;
            float _2285;
            float _2419 = 0.0;
            float _2420 = 0.0;
            float _2421 = 0.0;
            float _2422 = 0.0;
            float _2423 = 0.0;
            float _2424 = 0.0;
            uint _2425 = 0u;
            uint _2434;
            bool _2435;
            for (;;)
            {
                _2434 = texelFetch(g_lightClassification, int((((_2167 << 5u) + (_2153 << 9u)) + (_2425 << 2u)) >> 2u)).x;
                _2435 = _2434 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2435)
                {
                    frontier_phi_61_pred = _2419;
                    frontier_phi_61_pred_1 = _2424;
                    frontier_phi_61_pred_2 = _2423;
                    frontier_phi_61_pred_3 = _2422;
                    frontier_phi_61_pred_4 = _2421;
                    frontier_phi_61_pred_5 = _2420;
                }
                else
                {
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    uint _2549;
                    _2543 = _2419;
                    _2544 = _2420;
                    _2545 = _2421;
                    _2546 = _2422;
                    _2547 = _2423;
                    _2548 = _2424;
                    _2549 = _2434;
                    float _2475;
                    float _2476;
                    float _2477;
                    float _2478;
                    float _2479;
                    float _2480;
                    for (;;)
                    {
                        uint _2553 = uint(findLSB(_2549)) + (_2425 << 5u);
                        uint _2550 = (_2549 + 4294967295u) & _2549;
                        uint _2555 = _2553 * 48u;
                        vec4 _2569 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2555)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 3u)).x));
                        uint _2575 = (_2553 * 48u) + 4u;
                        vec4 _2588 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2575)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 3u)).x));
                        uint _2594 = (_2553 * 48u) + 8u;
                        vec3 _2605 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2594)).x, texelFetch(g_PointLightRenderingBuffer, int(_2594 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2594 + 2u)).x));
                        float _2609 = _2569.x - _2127;
                        float _2610 = _2569.y - _2128;
                        float _2611 = _2569.z - _2129;
                        float _2612 = dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611));
                        float _2615 = inversesqrt(_2612);
                        float _2616 = _2615 * _2609;
                        float _2617 = _2615 * _2610;
                        float _2618 = _2615 * _2611;
                        float _2619 = dot(vec3(_384, _387, _390), vec3(_2616, _2617, _2618));
                        float _2624 = 1.0 - (_2612 * _2569.w);
                        float _3895 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
                        float _2625 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
                        float _2626 = sqrt(_2612) * _2588.w;
                        float _2629 = 1.39999997615814208984375 / (_2626 + 1.39999997615814208984375);
                        float _2630 = _2629 * _2629;
                        float _2633 = ((1.0 - _2630) * _2619) + _2630;
                        float _2636 = _2626 * _2626;
                        float _2640 = ((isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0))) * _2625) / ((_2636 * 0.699999988079071044921875) + 1.0);
                        float _2644 = (-0.0) - _2127;
                        float _2645 = (-0.0) - _2128;
                        float _2646 = (-0.0) - _2129;
                        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
                        float _2651 = _2650 * _2644;
                        float _2652 = _2650 * _2645;
                        float _2653 = _2650 * _2646;
                        float _2661 = exp2(log2(1.0 / ((_2636 * 3.5) + 5.0)) * 0.25);
                        float _2662 = 1.0 - _460;
                        float _2669 = sqrt(1.0 - ((1.0 - (_2662 * _2662)) * (1.0 - (_2661 * _2661))));
                        float _2670 = _2669 * _2669;
                        float _2671 = _2670 * _2670;
                        float _2672 = _2651 + _2616;
                        float _2673 = _2652 + _2617;
                        float _2674 = _2653 + _2618;
                        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
                        float _2682 = dot(vec3(_384, _387, _390), vec3(_2651, _2652, _2653));
                        float _3911 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
                        float _2685 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                        float _2686 = dot(vec3(_384, _387, _390), vec3(_2678 * _2672, _2678 * _2673, _2678 * _2674));
                        float _3922 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                        float _2689 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                        float _2693 = ((_2689 * _2689) * (_2671 + (-1.0))) + 1.0;
                        float _2694 = _2629 * _2670;
                        float _2695 = _2694 * _2694;
                        float _2698 = ((1.0 - _2695) * _2619) + _2695;
                        float _3933 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2699 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                        float _2700 = 1.0 - _2670;
                        float _2710 = (0.5 / (((_2699 * ((_2685 * _2700) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2699 * _2700) + _2670) * _2685))) * _2699;
                        float _3944 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                        float _2721 = (((_2671 * 3.1415927410125732421875) * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) / ((_2693 * _2693) * ((_2636 * 2.1991131305694580078125) + 3.141590118408203125))) * _2625;
                        _2478 = (_2640 * _2588.x) + _2546;
                        _2479 = (_2640 * _2588.y) + _2547;
                        _2480 = (_2640 * _2588.z) + _2548;
                        _2475 = (_2721 * _2605.x) + _2543;
                        _2476 = (_2721 * _2605.y) + _2544;
                        _2477 = (_2721 * _2605.z) + _2545;
                        if (_2550 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2543 = _2475;
                            _2544 = _2476;
                            _2545 = _2477;
                            _2546 = _2478;
                            _2547 = _2479;
                            _2548 = _2480;
                            _2549 = _2550;
                        }
                    }
                    frontier_phi_61_pred = _2475;
                    frontier_phi_61_pred_1 = _2480;
                    frontier_phi_61_pred_2 = _2479;
                    frontier_phi_61_pred_3 = _2478;
                    frontier_phi_61_pred_4 = _2477;
                    frontier_phi_61_pred_5 = _2476;
                }
                _2275 = frontier_phi_61_pred;
                _2285 = frontier_phi_61_pred_1;
                _2283 = frontier_phi_61_pred_2;
                _2281 = frontier_phi_61_pred_3;
                _2279 = frontier_phi_61_pred_4;
                _2277 = frontier_phi_61_pred_5;
                uint _2426 = _2425 + 1u;
                if (_2426 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2419 = _2275;
                    _2420 = _2277;
                    _2421 = _2279;
                    _2422 = _2281;
                    _2423 = _2283;
                    _2424 = _2285;
                    _2425 = _2426;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2274 = _2275;
            _2276 = _2277;
            _2278 = _2279;
            _2280 = _2281;
            _2282 = _2283;
            _2284 = _2285;
        }
        uvec4 _2288 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2289 = _2288.z;
        uint _2291 = (_2289 >> 8u) & 15u;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        if (((4294967295u << _2291) & _2173) == 0u)
        {
            _2387 = _2274;
            _2389 = _2276;
            _2391 = _2278;
            _2393 = _2280;
            _2395 = _2282;
            _2397 = _2284;
        }
        else
        {
            float _2412 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
            float _2413 = _2412 * _2127;
            float _2414 = _2412 * _2128;
            float _2415 = _2412 * _2129;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2291 < ((_2289 >> 12u) & 15u))
            {
                float _2388;
                float _2390;
                float _2392;
                float _2394;
                float _2396;
                float _2398;
                float _2526 = _2274;
                float _2527 = _2276;
                float _2528 = _2278;
                float _2529 = _2280;
                float _2530 = _2282;
                float _2531 = _2284;
                uint _2532 = _2291;
                uint _2541;
                bool _2542;
                for (;;)
                {
                    _2541 = texelFetch(g_lightClassification, int((((_2167 << 5u) + (_2153 << 9u)) + (_2532 << 2u)) >> 2u)).x;
                    _2542 = _2541 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2542)
                    {
                        frontier_phi_67_pred = _2529;
                        frontier_phi_67_pred_1 = _2530;
                        frontier_phi_67_pred_2 = _2531;
                        frontier_phi_67_pred_3 = _2528;
                        frontier_phi_67_pred_4 = _2527;
                        frontier_phi_67_pred_5 = _2526;
                    }
                    else
                    {
                        float _2726;
                        float _2727;
                        float _2728;
                        float _2729;
                        float _2730;
                        float _2731;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _2739 = _2526;
                        float _2740 = _2527;
                        float _2741 = _2528;
                        float _2742 = _2529;
                        float _2743 = _2530;
                        float _2744 = _2531;
                        uint _2745 = _2541;
                        uint _2746;
                        vec4 _2771;
                        float _2772;
                        vec4 _2787;
                        vec3 _2799;
                        vec4 _2815;
                        vec4 _2831;
                        float _2878;
                        bool _2879;
                        for (;;)
                        {
                            uint _2756 = ((_2532 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2745));
                            _2746 = (_2745 + 4294967295u) & _2745;
                            uint _2758 = _2756 * 40u;
                            _2771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 3u)).x));
                            _2772 = _2771.w;
                            uint _2774 = (_2756 * 40u) + 4u;
                            _2787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 3u)).x));
                            uint _2789 = (_2756 * 40u) + 8u;
                            _2799 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x));
                            uint _2802 = (_2756 * 40u) + 16u;
                            _2815 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 3u)).x));
                            uint _2818 = (_2756 * 40u) + 20u;
                            _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            uint _2834 = (_2756 * 40u) + 24u;
                            vec4 _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            uint _2853 = (_2756 * 40u) + 28u;
                            vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            _2878 = fma(_2129, _2866.z, fma(_2128, _2866.y, _2866.x * _2127)) + _2866.w;
                            _2879 = !((fma(_2129, _2847.z, fma(_2128, _2847.y, _2847.x * _2127)) + _2847.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2879)
                            {
                                float _2906 = _2771.x - _2127;
                                float _2907 = _2771.y - _2128;
                                float _2908 = _2771.z - _2129;
                                float _2909 = dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908));
                                float _2912 = inversesqrt(_2909);
                                float _2913 = _2912 * _2906;
                                float _2914 = _2912 * _2907;
                                float _2915 = _2912 * _2908;
                                float _2919 = 1.0 - (_2909 / (_2772 * _2772));
                                float _3955 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                                float _2920 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
                                float _2924 = sqrt(_2909) * _2787.w;
                                float _2926 = 1.39999997615814208984375 / (_2924 + 1.39999997615814208984375);
                                float _2927 = _2926 * _2926;
                                float _2930 = ((1.0 - _2927) * dot(vec3(_2913, _2914, _2915), vec3(_384, _387, _390))) + _2927;
                                float _2933 = _2924 * _2924;
                                float _2937 = (fma(_2129, _2815.z, fma(_2128, _2815.y, _2815.x * _2127)) + _2815.w) / _2878;
                                float _2938 = (fma(_2129, _2831.z, fma(_2128, _2831.y, _2831.x * _2127)) + _2831.w) / _2878;
                                float _2942 = 1.0 - dot(vec2(_2937, _2938), vec2(_2937, _2938));
                                float _3971 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                                float _2943 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                                float _2944 = _2943 * (((isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0))) * _2920) / ((_2933 * 0.699999988079071044921875) + 1.0));
                                float _2956 = exp2(log2(1.0 / ((_2933 * 3.5) + 5.0)) * 0.25);
                                float _2957 = 1.0 - _460;
                                float _2964 = sqrt(1.0 - ((1.0 - (_2957 * _2957)) * (1.0 - (_2956 * _2956))));
                                float _2965 = _2964 * _2964;
                                float _2966 = _2965 * _2965;
                                float _2967 = _2913 - _2413;
                                float _2968 = _2914 - _2414;
                                float _2969 = _2915 - _2415;
                                float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                                float _2977 = dot(vec3(_384, _387, _390), vec3((-0.0) - _2413, (-0.0) - _2414, (-0.0) - _2415));
                                float _3982 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2980 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                                float _2981 = dot(vec3(_384, _387, _390), vec3(_2973 * _2967, _2973 * _2968, _2973 * _2969));
                                float _3993 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                                float _2984 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                                float _2988 = ((_2984 * _2984) * (_2966 + (-1.0))) + 1.0;
                                float _2989 = _2926 * _2965;
                                float _2990 = _2989 * _2989;
                                float _2996 = ((1.0 - _2990) * dot(vec3(_384, _387, _390), vec3(_2913, _2914, _2915))) + _2990;
                                float _4004 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                                float _2997 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                                float _2998 = 1.0 - _2965;
                                float _3008 = (0.5 / (((_2997 * ((_2980 * _2998) + _2965)) + 9.9999999392252902907785028219223e-09) + (((_2997 * _2998) + _2965) * _2980))) * _2997;
                                float _4015 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3018 = (_2943 * _2920) * (((_2966 * 3.1415927410125732421875) * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) / ((_2988 * _2988) * ((_2933 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3018 * _2799.x;
                                frontier_phi_73_pred_1 = _3018 * _2799.y;
                                frontier_phi_73_pred_2 = _2944 * _2787.z;
                                frontier_phi_73_pred_3 = _2944 * _2787.y;
                                frontier_phi_73_pred_4 = _2944 * _2787.x;
                                frontier_phi_73_pred_5 = _3018 * _2799.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3022 = frontier_phi_73_pred;
                            _3023 = frontier_phi_73_pred_1;
                            _3027 = frontier_phi_73_pred_2;
                            _3026 = frontier_phi_73_pred_3;
                            _3025 = frontier_phi_73_pred_4;
                            _3024 = frontier_phi_73_pred_5;
                            _2729 = _3025 + _2742;
                            _2730 = _3026 + _2743;
                            _2731 = _3027 + _2744;
                            _2726 = _3022 + _2739;
                            _2727 = _3023 + _2740;
                            _2728 = _3024 + _2741;
                            if (_2746 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2739 = _2726;
                                _2740 = _2727;
                                _2741 = _2728;
                                _2742 = _2729;
                                _2743 = _2730;
                                _2744 = _2731;
                                _2745 = _2746;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2729;
                        frontier_phi_67_pred_1 = _2730;
                        frontier_phi_67_pred_2 = _2731;
                        frontier_phi_67_pred_3 = _2728;
                        frontier_phi_67_pred_4 = _2727;
                        frontier_phi_67_pred_5 = _2726;
                    }
                    _2394 = frontier_phi_67_pred;
                    _2396 = frontier_phi_67_pred_1;
                    _2398 = frontier_phi_67_pred_2;
                    _2392 = frontier_phi_67_pred_3;
                    _2390 = frontier_phi_67_pred_4;
                    _2388 = frontier_phi_67_pred_5;
                    uint _2533 = _2532 + 1u;
                    if (_2533 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2526 = _2388;
                        _2527 = _2390;
                        _2528 = _2392;
                        _2529 = _2394;
                        _2530 = _2396;
                        _2531 = _2398;
                        _2532 = _2533;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2396;
                frontier_phi_55_56_ladder_1 = _2398;
                frontier_phi_55_56_ladder_2 = _2394;
                frontier_phi_55_56_ladder_3 = _2392;
                frontier_phi_55_56_ladder_4 = _2390;
                frontier_phi_55_56_ladder_5 = _2388;
            }
            else
            {
                frontier_phi_55_56_ladder = _2282;
                frontier_phi_55_56_ladder_1 = _2284;
                frontier_phi_55_56_ladder_2 = _2280;
                frontier_phi_55_56_ladder_3 = _2278;
                frontier_phi_55_56_ladder_4 = _2276;
                frontier_phi_55_56_ladder_5 = _2274;
            }
            _2387 = frontier_phi_55_56_ladder_5;
            _2389 = frontier_phi_55_56_ladder_4;
            _2391 = frontier_phi_55_56_ladder_3;
            _2393 = frontier_phi_55_56_ladder_2;
            _2395 = frontier_phi_55_56_ladder;
            _2397 = frontier_phi_55_56_ladder_1;
        }
        float _2402 = isnan(1.0) ? _444 : (isnan(_444) ? 1.0 : min(_444, 1.0));
        _2186 = (_2402 * _2393) + _1622;
        _2188 = (_2402 * _2395) + _1624;
        _2190 = (_2402 * _2397) + _1626;
        _2192 = ((_2387 * _429) * _2402) + _1967;
        _2194 = ((_2389 * _431) * _2402) + _1969;
        _2196 = ((_2391 * _432) * _2402) + _1971;
    }
    else
    {
        _2186 = _1622;
        _2188 = _1624;
        _2190 = _1626;
        _2192 = _1967;
        _2194 = _1969;
        _2196 = _1971;
    }
    float _4031 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _4042 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _4053 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    uint _2216 = _403 + 6u;
    float _2224 = _362 / cbSceneParam._m0[86u].x;
    float _2225 = _363 / cbSceneParam._m0[86u].y;
    vec4 _2239 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2224, _2225, (log2((isnan(cbSceneParam._m0[77u].w) ? _296 : (isnan(_296) ? cbSceneParam._m0[77u].w : min(_296, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2241 = _2239.x;
    float _2242 = _2239.y;
    float _2243 = _2239.z;
    float _2244 = _2239.w;
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    if (_296 > cbSceneParam._m0[78u].w)
    {
        float _2299 = isnan(_296) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _296 : min(cbSceneParam._m0[80u].w, _296));
        float _2300 = _2299 / _296;
        float _2311 = _2300 * _347;
        float _2312 = _348 * _2300;
        float _2313 = (-0.0) - _2312;
        float _2315 = _2300 * _349;
        float _2317 = (cbSceneParam._m0[77u].w * _2313) / _2299;
        float _2318 = _2317 + cbSceneParam._m0[79u].w;
        float _2319 = cbSceneParam._m0[79u].w - _2312;
        float _2325 = sqrt(((_2311 * _2311) + (_2312 * _2312)) + (_2315 * _2315));
        float _2328 = (1.0 - (cbSceneParam._m0[77u].w / _2299)) * _2325;
        float _2333 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2335 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2488;
        if (abs((_2313 - _2317) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2488 = ((((_2318 > 0.0) ? exp2(_2333 * _2318) : (2.0 - exp2(_2335 * _2318))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2328;
        }
        else
        {
            float _2448 = 1.0 / cbSceneParam._m0[80u].x;
            float _2449 = isnan(_2319) ? _2318 : (isnan(_2318) ? _2319 : max(_2318, _2319));
            float _2450 = isnan(_2319) ? _2318 : (isnan(_2318) ? _2319 : min(_2318, _2319));
            float _2459 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : min(_2449, 0.0));
            float _2460 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : min(_2450, 0.0));
            _2488 = ((abs(_2325 / _2313) * cbSceneParam._m0[80u].y) * ((((_2459 - _2460) * 2.0) - ((exp2(_2333 * (isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0)))) - exp2(_2333 * (isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0))))) * _2448)) - ((exp2(_2335 * _2459) - exp2(_2335 * _2460)) * _2448))) + (_2328 * cbSceneParam._m0[80u].z);
        }
        vec4 _2490 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2224, _2225, 1.0), 0.0);
        float _2499 = exp2((_2488 * (-1.44269502162933349609375)) * (1.0 - _2490.w));
        float _2500 = log2(_2499);
        float _2516 = log2(_2244);
        _2337 = (exp2(_2516 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2500 * cbSceneParam._m0[78u].x)) * _2490.x) / cbSceneParam._m0[78u].x)) + _2241;
        _2339 = (exp2(_2516 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2500 * cbSceneParam._m0[78u].y)) * _2490.y) / cbSceneParam._m0[78u].y)) + _2242;
        _2341 = (exp2(_2516 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2500 * cbSceneParam._m0[78u].z)) * _2490.z) / cbSceneParam._m0[78u].z)) + _2243;
        _2343 = _2499 * _2244;
    }
    else
    {
        _2337 = _2241;
        _2339 = _2242;
        _2341 = _2243;
        _2343 = _2244;
    }
    float _2355 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2356 = _2355 == 3.0;
    float _2357 = log2(_2343);
    float _2364 = exp2(_2357 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_2186 + ((isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))) * _444))) + ((_2192 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _1254)) * cbPerFrame._m0[3u].x));
    float _2365 = exp2(_2357 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_2188 + ((isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0))) * _444))) + ((_2194 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _1254)) * cbPerFrame._m0[3u].x));
    float _2366 = exp2(_2357 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_2190 + ((isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0))) * _444))) + ((_2196 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _1254)) * cbPerFrame._m0[3u].x));
    float _2375 = (_2355 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2375 * (_2356 ? _2364 : (_2364 + (cbSceneParam._m0[72u].w * _2337)));
    SV_Target.y = _2375 * (_2356 ? _2365 : (_2365 + (cbSceneParam._m0[72u].w * _2339)));
    SV_Target.z = _2375 * (_2356 ? _2366 : (_2366 + (cbSceneParam._m0[72u].w * _2341)));
    SV_Target.w = cbInstanceData._m0[_2216].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2216].w;
}


