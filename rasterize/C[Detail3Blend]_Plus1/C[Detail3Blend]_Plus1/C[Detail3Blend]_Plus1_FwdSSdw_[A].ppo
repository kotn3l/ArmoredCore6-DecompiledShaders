#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_6;
layout(set = 0, binding = 8) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D C_Detail3Blend_Plus1_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1293;
float _3702;
float _3703;
float _3704;
float _3705;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _254.z;
    float _260 = _254.w;
    float _266 = exp2(log2(_259 * 22.0) * 260.0);
    float _267 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _268 = isnan(1.0) ? _267 : (isnan(_267) ? 1.0 : min(_267, 1.0));
    float _274 = exp2(log2(1.0 - _260) * 10.19999980926513671875);
    vec4 _287 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _312 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _323 = cbMtdParam._m0[9u].x * _312.x;
    float _324 = cbMtdParam._m0[9u].y * _312.y;
    float _325 = cbMtdParam._m0[9u].z * _312.z;
    float _332 = (((cbMtdParam._m0[10u].x * _287.x) - _323) * _274) + _323;
    float _333 = (((cbMtdParam._m0[10u].y * _287.y) - _324) * _274) + _324;
    float _334 = (((cbMtdParam._m0[10u].z * _287.z) - _325) * _274) + _325;
    float _338 = exp2(log2(_260) * 10.0);
    vec4 _350 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _384 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _389 = _384.w;
    vec4 _409 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _420 = cbMtdParam._m0[12u].x * _409.x;
    float _421 = cbMtdParam._m0[12u].y * _409.y;
    float _422 = cbMtdParam._m0[12u].z * _409.z;
    float _429 = ((((((((cbMtdParam._m0[11u].x * _350.x) - _332) * _338) + _332) * 4.55000019073486328125) * _384.x) - _420) * _268) + _420;
    float _430 = ((((((((cbMtdParam._m0[11u].y * _350.y) - _333) * _338) + _333) * 4.55000019073486328125) * _384.y) - _421) * _268) + _421;
    float _431 = ((((((((cbMtdParam._m0[11u].z * _350.z) - _334) * _338) + _334) * 4.55000019073486328125) * _384.z) - _422) * _268) + _422;
    vec4 _448 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _470 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _472 = _470.x;
    float _473 = _470.y;
    float _476 = cbMtdParam._m0[13u].x + _470.z;
    float _479 = (((cbMtdParam._m0[13u].y + _448.z) - _476) * _274) + _476;
    vec4 _492 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _516 = texture(sampler2D(C_Detail3Blend_Plus1_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _522 = cbMtdParam._m0[13u].z + _516.z;
    float _525 = ((((_259 * 2.0) * ((((_492.z - _479) + cbMtdParam._m0[14u].y) * _338) + _479)) - _522) * _268) + _522;
    float _536 = ((_448.x - _472) * _274) + _472;
    float _537 = ((_448.y - _473) * _274) + _473;
    float _552 = (((((((_492.x - _536) * _338) + _536) - _518) * _268) + _518) * 2.0) + (-1.0);
    float _553 = (((((((_492.y - _537) * _338) + _537) - _519) * _268) + _519) * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _3724 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))));
    float _562 = _552 + (cbMtdParam._m0[13u].w * ((_254.x * 2.0) + (-1.0)));
    float _563 = _553 + (cbMtdParam._m0[13u].w * ((_254.y * 2.0) + (-1.0)));
    float _566 = fma(_559, _238, fma(_563, _230 * TANGENT.x, (_216 * _208) * _562));
    float _569 = fma(_559, _239, fma(_563, _230 * TANGENT.y, (_216 * _209) * _562));
    float _572 = fma(_559, _240, fma(_563, _230 * TANGENT.z, (_216 * _210) * _562));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _577 = _576 * _566;
    float _578 = _576 * _569;
    float _579 = _576 * _572;
    float _3735 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _580 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _581 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _582 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _583 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _584 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _585 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _601 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _651 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _641);
    float _652 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _641);
    float _653 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _641);
    float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
    float _658 = _651 * _657;
    float _659 = _652 * _657;
    float _660 = _653 * _657;
    vec4 _665 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _667 = _665.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _972 = sqrt(((_651 * _651) + (_652 * _652)) + (_653 * _653));
        float _978 = (cbMatDynParam._m0[5u].x * _972) + cbMatDynParam._m0[5u].y;
        float _3801 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _983 = (cbMatDynParam._m0[5u].z * _972) + cbMatDynParam._m0[5u].w;
        float _3812 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) - _979)) + _979) < ((_667 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _678 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _679 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _681 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _683 = _681.w;
    float _701 = fma(_579, cbSceneParam._m0[5u].z, fma(_578, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _577));
    float _704 = fma(_579, cbSceneParam._m0[6u].z, fma(_578, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _577));
    float _707 = fma(_579, cbSceneParam._m0[7u].z, fma(_578, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _577));
    vec4 _709 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _711 = _709.x;
    float _723 = (((_709.y - _581) + (_709.w * _581)) * cbMtdParam._m0[3u].x) + _581;
    float _740 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_711 * _711)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _748 = (((cbMatDynParam._m0[15u].x - _585) * cbMatDynParam._m0[15u].w) * _740) + _585;
    float _757 = ((_740 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _723)) + _723;
    uint _781 = uint(roundEven(NORMAL.w)) * 13u;
    uint _782 = _781 + 9u;
    uint _783 = _782 + uint(cbMatDynParam._m0[0u].w);
    float _789 = (cbMtdParam._m0[0u].x * _582) * cbInstanceData._m0[_783].x;
    float _790 = (cbMtdParam._m0[0u].y * _583) * cbInstanceData._m0[_783].y;
    float _791 = (cbMtdParam._m0[0u].z * _584) * cbInstanceData._m0[_783].z;
    float _3823 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    vec4 _795 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _800 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _811 = (((_800.x - _748) + (_800.w * _748)) * cbMtdParam._m0[3u].x) + _748;
    float _824 = (cbMtdParam._m0[3u].x * (((_792 * _683) - _792) + _795.x)) + _792;
    float _825 = (cbMtdParam._m0[3u].x * (((_793 * _683) - _793) + _795.y)) + _793;
    float _826 = (cbMtdParam._m0[3u].x * (((_794 * _683) - _794) + _795.z)) + _794;
    vec4 _827 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _840 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_748 * (_582 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_748 * (_583 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_748 * (_584 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _827.z;
    float _844 = _840 * cbMatDynParam._m0[13u].w;
    float _854 = (_844 * (cbMatDynParam._m0[13u].x - _824)) + _824;
    float _855 = (_844 * (cbMatDynParam._m0[13u].y - _825)) + _825;
    float _856 = (_844 * (cbMatDynParam._m0[13u].z - _826)) + _826;
    float _864 = ((_840 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _811)) + _811;
    float _865 = 1.0 - _864;
    float _866 = _865 * _854;
    float _867 = _865 * _855;
    float _868 = _865 * _856;
    float _872 = (_854 + (-0.039999999105930328369140625)) * _864;
    float _873 = (_855 + (-0.039999999105930328369140625)) * _864;
    float _874 = (_856 + (-0.039999999105930328369140625)) * _864;
    float _875 = _872 + 0.039999999105930328369140625;
    float _876 = _873 + 0.039999999105930328369140625;
    float _877 = _874 + 0.039999999105930328369140625;
    vec4 _886 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _678, cbSceneParam._m0[86u].y * _679));
    float _889 = _886.x * TEXCOORD_4;
    float _890 = dot(vec3(_577, _578, _579), vec3(_658, _659, _660));
    float _893 = _890 * 2.0;
    float _897 = (_893 * _577) - _658;
    float _898 = (_893 * _578) - _659;
    float _899 = (_893 * _579) - _660;
    float _903 = abs(dot(vec3(_658, _659, _660), vec3(_577, _578, _579)));
    float _3856 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _905 = sqrt(_757);
    float _918 = exp2((_905 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_905 * 3.0));
    float _924 = (1.0 - _918) * ((_905 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _925 = _918 * _905;
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1292;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1017 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _1021 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _1025 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1050 = _953 + _577;
        float _1051 = _957 + _578;
        float _1052 = _961 + _579;
        float _1062 = fma(_1052, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050)) - _1017;
        float _1063 = fma(_1052, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050)) - _1021;
        float _1064 = fma(_1052, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050)) - _1025;
        float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
        float _1081 = ((_1068 * _1062) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1017 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1068 * _1063) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1021 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1068 * _1064) / cbModelParam._m0[34u].z) + ((((((_1025 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        float _1120 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1086.x + (-0.5));
        float _1122 = _1120 * (_1086.y + (-0.5));
        float _1123 = _1120 * (_1086.z + (-0.5));
        float _1130 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1093.x + (-0.5));
        float _1132 = _1130 * (_1093.y + (-0.5));
        float _1133 = _1130 * (_1093.z + (-0.5));
        float _1140 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1100.x + (-0.5));
        float _1142 = _1140 * (_1100.y + (-0.5));
        float _1143 = _1140 * (_1100.z + (-0.5));
        float _1150 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1107.x + (-0.5));
        float _1152 = _1150 * (_1107.y + (-0.5));
        float _1153 = _1150 * (_1107.z + (-0.5));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = _1121 * 0.5;
        float _1158 = _1131 * 0.5;
        float _1159 = _1141 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1174 = (dot(vec3(_577, _578, _579), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1184 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3904 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1186 + 1.0))) + _1191) * _1154;
        float _1201 = _1122 * 0.5;
        float _1202 = _1132 * 0.5;
        float _1203 = _1142 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_577, _578, _579), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3937 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1228 + 1.0))) + _1233) * _1155;
        float _1243 = _1123 * 0.5;
        float _1244 = _1133 * 0.5;
        float _1245 = _1143 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_577, _578, _579), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3970 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1270 + 1.0))) + _1275) * _1156;
        _1292 = _1123;
        _1294 = _1122;
        _1295 = _1121;
        _1296 = _1133;
        _1297 = _1132;
        _1298 = _1131;
        _1299 = _1143;
        _1300 = _1142;
        _1301 = _1141;
        _1302 = _1156;
        _1303 = _1155;
        _1304 = _1154;
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
    }
    else
    {
        _1292 = _1293;
        _1294 = _1293;
        _1295 = _1293;
        _1296 = _1293;
        _1297 = _1293;
        _1298 = _1293;
        _1299 = _1293;
        _1300 = _1293;
        _1301 = _1293;
        _1302 = _1293;
        _1303 = _1293;
        _1304 = _1293;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1336 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1340 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1344 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1367 = _953 + _577;
        float _1368 = _957 + _578;
        float _1369 = _961 + _579;
        float _1379 = fma(_1369, cbModelParam._m0[30u].z, fma(_1368, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1367)) - _1336;
        float _1380 = fma(_1369, cbModelParam._m0[31u].z, fma(_1368, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1367)) - _1340;
        float _1381 = fma(_1369, cbModelParam._m0[32u].z, fma(_1368, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1367)) - _1344;
        float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
        float _1398 = ((_1385 * _1379) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1336 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1385 * _1380) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1340 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1385 * _1381) / cbModelParam._m0[35u].z) + ((((((_1344 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        float _1435 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1402.x + (-0.5));
        float _1437 = _1435 * (_1402.y + (-0.5));
        float _1438 = _1435 * (_1402.z + (-0.5));
        float _1445 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1409.x + (-0.5));
        float _1447 = _1445 * (_1409.y + (-0.5));
        float _1448 = _1445 * (_1409.z + (-0.5));
        float _1455 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1416.x + (-0.5));
        float _1457 = _1455 * (_1416.y + (-0.5));
        float _1458 = _1455 * (_1416.z + (-0.5));
        float _1465 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1423.x + (-0.5));
        float _1467 = _1465 * (_1423.y + (-0.5));
        float _1468 = _1465 * (_1423.z + (-0.5));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = _1436 * 0.5;
        float _1473 = _1446 * 0.5;
        float _1474 = _1456 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_577, _578, _579), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4033 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1499 + 1.0))) + _1504) * _1469;
        float _1514 = _1437 * 0.5;
        float _1515 = _1447 * 0.5;
        float _1516 = _1457 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_577, _578, _579), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4066 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1541 + 1.0))) + _1546) * _1470;
        float _1556 = _1438 * 0.5;
        float _1557 = _1448 * 0.5;
        float _1558 = _1458 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_577, _578, _579), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4099 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1583 + 1.0))) + _1588) * _1471;
        _1605 = _1438;
        _1606 = _1437;
        _1607 = _1436;
        _1608 = _1448;
        _1609 = _1447;
        _1610 = _1446;
        _1611 = _1458;
        _1612 = _1457;
        _1613 = _1456;
        _1614 = _1471;
        _1615 = _1470;
        _1616 = _1469;
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
    }
    else
    {
        _1605 = _1293;
        _1606 = _1293;
        _1607 = _1293;
        _1608 = _1293;
        _1609 = _1293;
        _1610 = _1293;
        _1611 = _1293;
        _1612 = _1293;
        _1613 = _1293;
        _1614 = _1293;
        _1615 = _1293;
        _1616 = _1293;
        _1617 = 0.0;
        _1618 = 0.0;
        _1619 = 0.0;
    }
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1305)) + _1305;
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1306)) + _1306;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1307)) + _1307;
    float _1652 = fma(_1631, cbSceneParam._m0[89u].z, fma(_1630, cbSceneParam._m0[89u].y, _1629 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1631, cbSceneParam._m0[90u].z, fma(_1630, cbSceneParam._m0[90u].y, _1629 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1631, cbSceneParam._m0[91u].z, fma(_1630, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1629));
    float _1673 = _897 * 0.5;
    float _1674 = _898 * 0.5;
    float _1675 = _899 * 0.5;
    float _1676 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1679 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1682 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1713;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1689 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1292, _1296, _1299, _1302));
        float _1693 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1294, _1297, _1300, _1303));
        float _1697 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1295, _1298, _1301, _1304));
        float _1704 = dot(vec4(cbModelParam._m0[39u]), vec4(_1673, _1674, _1675, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1724;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1715 = dot(vec4(cbModelParam._m0[40u]), vec4(_1673, _1674, _1675, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1728 = (_1724 * cbModelParam._m0[1u].x) + (_1713 * (1.0 - cbModelParam._m0[1u].x));
    float _1738 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _757);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1738 : min(cbModelParam._m0[25u].z, _1738));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1786 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1790 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1794 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1797 = fma(_899, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897));
        float _1800 = fma(_899, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897));
        float _1803 = fma(_899, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897));
        float _1831;
        if (_1797 > 0.0)
        {
            _1831 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1831 = frontier_phi_19_17_ladder;
        }
        float _2058;
        if (_1800 > 0.0)
        {
            _2058 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2058 = frontier_phi_28_24_ladder;
        }
        float _2315;
        if (_1803 > 0.0)
        {
            _2315 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2315 = frontier_phi_40_35_ladder;
        }
        float _2317 = isnan(_2058) ? _1831 : (isnan(_1831) ? _2058 : min(_1831, _2058));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1797) + _1786;
        float _2323 = (_2318 * _1800) + _1790;
        float _2324 = (_2318 * _1803) + _1794;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2325;
        float _2329 = _2325 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 > _2329) || ((_2323 < _2327) || ((_2322 < _2327) || (_2322 > _2329))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2324, cbModelParam._m0[9u].z, fma(_2323, cbModelParam._m0[9u].y, _2322 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2324, cbModelParam._m0[10u].z, fma(_2323, cbModelParam._m0[10u].y, _2322 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2324, cbModelParam._m0[11u].z, fma(_2323, cbModelParam._m0[11u].y, _2322 * cbModelParam._m0[11u].x))), _1739);
            frontier_phi_18_40_ladder = _2452.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2452.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2452.x * cbModelParam._m0[1u].y;
        }
        _1819 = frontier_phi_18_40_ladder_2;
        _1821 = frontier_phi_18_40_ladder_1;
        _1823 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_897, _898, _899), _1739);
        _1819 = _1807.x * cbModelParam._m0[1u].y;
        _1821 = _1807.y * cbModelParam._m0[1u].y;
        _1823 = _1807.z * cbModelParam._m0[1u].y;
    }
    float _1827 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _757);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1827 : min(cbModelParam._m0[25u].w, _1827));
    float _1921;
    float _1923;
    float _1925;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1885 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1889 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1893 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1896 = fma(_899, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897));
        float _1899 = fma(_899, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897));
        float _1902 = fma(_899, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897));
        float _2063;
        if (_1896 > 0.0)
        {
            _2063 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2063 = frontier_phi_30_26_ladder;
        }
        float _2342;
        if (_1899 > 0.0)
        {
            _2342 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2342 = frontier_phi_42_37_ladder;
        }
        float _2555;
        if (_1902 > 0.0)
        {
            _2555 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2555 = frontier_phi_51_48_ladder;
        }
        float _2557 = isnan(_2342) ? _2063 : (isnan(_2063) ? _2342 : min(_2063, _2342));
        float _2558 = isnan(_2555) ? _2557 : (isnan(_2557) ? _2555 : min(_2557, _2555));
        float _2562 = (_2558 * _1896) + _1885;
        float _2563 = (_2558 * _1899) + _1889;
        float _2564 = (_2558 * _1902) + _1893;
        float _2565 = _2558 * 9.9999997473787516355514526367188e-05;
        float _2566 = (-1.0) - _2565;
        float _2568 = _2565 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2564 > _2568) || ((_2564 < _2566) || ((_2563 > _2568) || ((_2563 < _2566) || ((_2562 < _2566) || (_2562 > _2568))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2564, cbModelParam._m0[17u].z, fma(_2563, cbModelParam._m0[17u].y, _2562 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2564, cbModelParam._m0[18u].z, fma(_2563, cbModelParam._m0[18u].y, _2562 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2564, cbModelParam._m0[19u].z, fma(_2563, cbModelParam._m0[19u].y, _2562 * cbModelParam._m0[19u].x))), _1828);
            frontier_phi_27_51_ladder = _2764.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2764.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2764.x * cbModelParam._m0[1u].z;
        }
        _1921 = frontier_phi_27_51_ladder_2;
        _1923 = frontier_phi_27_51_ladder_1;
        _1925 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_897, _898, _899), _1828);
        _1921 = _1905.x * cbModelParam._m0[1u].z;
        _1923 = _1905.y * cbModelParam._m0[1u].z;
        _1925 = _1905.z * cbModelParam._m0[1u].z;
    }
    float _1938 = (((_924 * _875) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1921 - _1819)) + _1819);
    float _1940 = (((_924 * _876) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1923 - _1821)) + _1821);
    float _1942 = (((_924 * _877) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1925 - _1823)) + _1823);
    float _1945 = fma(_1942, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1938 * cbSceneParam._m0[89u].x));
    float _1948 = fma(_1942, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1938 * cbSceneParam._m0[90u].x));
    float _1951 = fma(_1942, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, _1938 * cbSceneParam._m0[91u].x));
    vec4 _1959 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_678, _679));
    float _1961 = _1959.w;
    float _1973 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1961);
    float _1974 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1961);
    float _1975 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1961);
    uvec4 _1979 = floatBitsToUint(cbInstanceData._m0[_781 + 5u]);
    uint _1981 = _1979.x * 14u;
    uint _1982 = _1981 + 13u;
    float _1989 = _889 + (-1.0);
    float _1994 = (cbLight._m0[_1982].x * _1989) + 1.0;
    float _1995 = (cbLight._m0[_1982].y * _1989) + 1.0;
    float _1996 = (cbLight._m0[_1982].z * _1989) + 1.0;
    float _1997 = (cbLight._m0[_1982].w * _1989) + 1.0;
    uint _1998 = _1981 + 5u;
    float _2004 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2008 = _1981 + 4u;
    float _2017 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
    uint _2021 = _1981 | 1u;
    float _2032 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_577, _578, _579));
    float _2035 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_577, _578, _579));
    float _4235 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _4246 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2040 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _2042 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.3183098733425140380859375;
    float _2049 = ((cbLight._m0[_1998].x * _2004) * _2042) + (((cbLight._m0[_2008].x * _1973) * _2017) * _2040);
    float _2050 = ((_2004 * cbLight._m0[_1998].y) * _2042) + (((cbLight._m0[_2008].y * _1974) * _2017) * _2040);
    float _2051 = ((_2004 * cbLight._m0[_1998].z) * _2042) + (((cbLight._m0[_2008].z * _1975) * _2017) * _2040);
    uvec4 _2055 = floatBitsToUint(cbLight._m0[_1981 + 12u]);
    bool _2057 = _2055.x == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_2057)
    {
        _2068 = _2049;
        _2070 = _2050;
        _2072 = _2051;
    }
    else
    {
        uint _2076 = _1981 + 6u;
        float _2092 = (dot(vec3(cbLight._m0[_1981 + 2u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2093 = _2092 * _2092;
        float _4257 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2095 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2068 = (((cbLight._m0[_2076].x * 0.3183098733425140380859375) * _2094) * _2095) + _2049;
        _2070 = (((cbLight._m0[_2076].y * 0.3183098733425140380859375) * _2094) * _2095) + _2050;
        _2072 = (((cbLight._m0[_2076].z * 0.3183098733425140380859375) * _2094) * _2095) + _2051;
    }
    bool _2075 = _2055.y == 0u;
    float _2113;
    float _2115;
    float _2117;
    if (_2075)
    {
        _2113 = _2068;
        _2115 = _2070;
        _2117 = _2072;
    }
    else
    {
        uint _2286 = _1981 + 7u;
        float _2302 = (dot(vec3(cbLight._m0[_1981 + 3u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2303 = _2302 * _2302;
        float _4273 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2304 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2305 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2113 = (((cbLight._m0[_2286].x * 0.3183098733425140380859375) * _2304) * _2305) + _2068;
        _2115 = (((cbLight._m0[_2286].y * 0.3183098733425140380859375) * _2304) * _2305) + _2070;
        _2117 = (((cbLight._m0[_2286].z * 0.3183098733425140380859375) * _2304) * _2305) + _2072;
    }
    uint _2120 = _1981 + 8u;
    float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _757) * 0.949999988079071044921875);
    float _2134 = _2133 * _2133;
    float _2135 = cbLight._m0[_1981].x + _658;
    float _2136 = cbLight._m0[_1981].y + _659;
    float _2137 = cbLight._m0[_1981].z + _660;
    float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
    float _2142 = _2141 * _2135;
    float _2143 = _2141 * _2136;
    float _2144 = _2141 * _2137;
    float _2145 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_1981].xyz));
    float _4289 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _4300 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _2149 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2150 = dot(vec3(_577, _578, _579), vec3(_2142, _2143, _2144));
    float _4311 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2154 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2142, _2143, _2144));
    float _4322 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2158 = _2134 * _2134;
    float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
    float _2170 = exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0);
    float _2171 = 0.959999978542327880859375 - _872;
    float _2173 = 0.959999978542327880859375 - _873;
    float _2174 = 0.959999978542327880859375 - _874;
    float _2181 = 1.0 - _2134;
    float _2192 = (0.5 / (((_2149 * ((_2148 * _2181) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2181) + _2134) * _2148))) * _2148;
    float _4333 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2194 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
    uint _2208 = _1981 + 9u;
    float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _757) * 0.949999988079071044921875);
    float _2220 = _2219 * _2219;
    float _2221 = cbLight._m0[_2021].x + _658;
    float _2222 = cbLight._m0[_2021].y + _659;
    float _2223 = cbLight._m0[_2021].z + _660;
    float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
    float _2228 = _2227 * _2221;
    float _2229 = _2227 * _2222;
    float _2230 = _2227 * _2223;
    float _2231 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2021].xyz));
    float _4344 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2235 = dot(vec3(_577, _578, _579), vec3(_2228, _2229, _2230));
    float _4355 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2239 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2228, _2229, _2230));
    float _4366 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2243 = _2220 * _2220;
    float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
    float _2254 = exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0);
    float _2261 = 1.0 - _2220;
    float _2271 = (0.5 / (((_2149 * ((_2234 * _2261) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2261) + _2220) * _2234))) * _2234;
    float _4377 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
    float _2283 = (((((_2254 * _2171) + _875) * cbLight._m0[_2208].x) * _2273) * _2004) + ((((cbLight._m0[_2120].x * _1973) * ((_2170 * _2171) + _875)) * _2194) * _2017);
    float _2284 = (((((_2254 * _2173) + _876) * cbLight._m0[_2208].y) * _2273) * _2004) + ((((cbLight._m0[_2120].y * _1974) * ((_2170 * _2173) + _876)) * _2194) * _2017);
    float _2285 = (((((_2254 * _2174) + _877) * cbLight._m0[_2208].z) * _2273) * _2004) + ((((cbLight._m0[_2120].z * _1975) * ((_2170 * _2174) + _877)) * _2194) * _2017);
    float _2347;
    float _2349;
    float _2351;
    if (_2057)
    {
        _2347 = _2283;
        _2349 = _2284;
        _2351 = _2285;
    }
    else
    {
        uint _2353 = _1981 + 2u;
        uint _2357 = _1981 + 10u;
        float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _757) * 0.949999988079071044921875);
        float _2372 = _2371 * _2371;
        float _2373 = cbLight._m0[_2353].x + _658;
        float _2374 = cbLight._m0[_2353].y + _659;
        float _2375 = cbLight._m0[_2353].z + _660;
        float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
        float _2380 = _2379 * _2373;
        float _2381 = _2379 * _2374;
        float _2382 = _2379 * _2375;
        float _2383 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2353].xyz));
        float _4388 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2387 = dot(vec3(_577, _578, _579), vec3(_2380, _2381, _2382));
        float _4399 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2391 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2380, _2381, _2382));
        float _4410 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2395 = _2372 * _2372;
        float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
        float _2406 = exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0);
        float _2413 = 1.0 - _2372;
        float _2423 = (0.5 / (((_2149 * ((_2386 * _2413) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2413) + _2372) * _2386))) * _2386;
        float _4421 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2425 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
        float _2426 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2347 = (((((_2406 * _2171) + _875) * cbLight._m0[_2357].x) * _2425) * _2426) + _2283;
        _2349 = (((((_2406 * _2173) + _876) * cbLight._m0[_2357].y) * _2425) * _2426) + _2284;
        _2351 = (((((_2406 * _2174) + _877) * cbLight._m0[_2357].z) * _2425) * _2426) + _2285;
    }
    float _2461;
    float _2463;
    float _2465;
    if (_2075)
    {
        _2461 = _2347;
        _2463 = _2349;
        _2465 = _2351;
    }
    else
    {
        uint _2472 = _1981 + 3u;
        uint _2476 = _1981 + 11u;
        float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _757) * 0.949999988079071044921875);
        float _2491 = _2490 * _2490;
        float _2492 = cbLight._m0[_2472].x + _658;
        float _2493 = cbLight._m0[_2472].y + _659;
        float _2494 = cbLight._m0[_2472].z + _660;
        float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
        float _2499 = _2498 * _2492;
        float _2500 = _2498 * _2493;
        float _2501 = _2498 * _2494;
        float _2502 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2472].xyz));
        float _4437 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2506 = dot(vec3(_577, _578, _579), vec3(_2499, _2500, _2501));
        float _4448 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2510 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2499, _2500, _2501));
        float _4459 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2514 = _2491 * _2491;
        float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
        float _2525 = exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0);
        float _2532 = 1.0 - _2491;
        float _2542 = (0.5 / (((_2149 * ((_2505 * _2532) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2532) + _2491) * _2505))) * _2505;
        float _4470 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2544 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
        float _2545 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2461 = (((((_2525 * _2171) + _875) * cbLight._m0[_2476].x) * _2544) * _2545) + _2347;
        _2463 = (((((_2525 * _2173) + _876) * cbLight._m0[_2476].y) * _2544) * _2545) + _2349;
        _2465 = (((((_2525 * _2174) + _877) * cbLight._m0[_2476].z) * _2544) * _2545) + _2351;
    }
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    if (_1979.y == 0u)
    {
        float _2620 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2620;
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2620;
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2620;
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.x;
        uint _2647 = uint((float(_2635.y) * floor(float(uint(cbSceneParam._m0[85u].y * _679) / _2636))) + floor(float(uint(cbSceneParam._m0[85u].x * _678) / _2636)));
        float _2657 = (log2(_2623 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2658 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        uint _2661 = uint(isnan(14.0) ? _2658 : (isnan(_2658) ? 14.0 : min(_2658, 14.0)));
        uvec4 _2666 = texelFetch(g_lightClusterGridBuffer, int(((_2661 << 2u) + (_2647 << 6u)) >> 2u));
        uint _2667 = _2666.x;
        uint _2668 = _2635.z;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((((1u << ((_2668 >> 4u) & 15u)) + 4294967295u) & _2667) == 0u) || ((_2668 & 240u) == 0u))
        {
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
        }
        else
        {
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            uint _2927 = 0u;
            uint _2936;
            bool _2937;
            for (;;)
            {
                _2936 = texelFetch(g_lightClassification, int((((_2661 << 5u) + (_2647 << 9u)) + (_2927 << 2u)) >> 2u)).x;
                _2937 = _2936 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2937)
                {
                    frontier_phi_68_pred = _2923;
                    frontier_phi_68_pred_1 = _2926;
                    frontier_phi_68_pred_2 = _2925;
                    frontier_phi_68_pred_3 = _2924;
                    frontier_phi_68_pred_4 = _2922;
                    frontier_phi_68_pred_5 = _2921;
                }
                else
                {
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    uint _3072;
                    _3066 = _2921;
                    _3067 = _2922;
                    _3068 = _2923;
                    _3069 = _2924;
                    _3070 = _2925;
                    _3071 = _2926;
                    _3072 = _2936;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    for (;;)
                    {
                        uint _3076 = uint(findLSB(_3072)) + (_2927 << 5u);
                        uint _3073 = (_3072 + 4294967295u) & _3072;
                        uint _3078 = _3076 * 48u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3098 = (_3076 * 48u) + 4u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3117 = (_3076 * 48u) + 8u;
                        vec3 _3128 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x));
                        float _3132 = _3092.x - _2621;
                        float _3133 = _3092.y - _2622;
                        float _3134 = _3092.z - _2623;
                        float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                        float _3138 = inversesqrt(_3135);
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3142 = dot(vec3(_701, _704, _707), vec3(_3139, _3140, _3141));
                        float _3147 = 1.0 - (_3135 * _3092.w);
                        float _4496 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3149 = sqrt(_3135) * _3111.w;
                        float _3152 = 1.39999997615814208984375 / (_3149 + 1.39999997615814208984375);
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3142) + _3153;
                        float _3159 = _3149 * _3149;
                        float _3163 = ((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3148) / ((_3159 * 0.699999988079071044921875) + 1.0);
                        float _3167 = (-0.0) - _2621;
                        float _3168 = (-0.0) - _2622;
                        float _3169 = (-0.0) - _2623;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3184 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                        float _3185 = 1.0 - _905;
                        float _3192 = sqrt(1.0 - ((1.0 - (_3185 * _3185)) * (1.0 - (_3184 * _3184))));
                        float _3193 = _3192 * _3192;
                        float _3194 = _3193 * _3193;
                        float _3195 = _3174 + _3139;
                        float _3196 = _3175 + _3140;
                        float _3197 = _3176 + _3141;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3205 = dot(vec3(_701, _704, _707), vec3(_3174, _3175, _3176));
                        float _4512 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3209 = dot(vec3(_701, _704, _707), vec3(_3201 * _3195, _3201 * _3196, _3201 * _3197));
                        float _4523 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3212 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3216 = ((_3212 * _3212) * (_3194 + (-1.0))) + 1.0;
                        float _3217 = _3152 * _3193;
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3142) + _3218;
                        float _4534 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3222 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3223 = 1.0 - _3193;
                        float _3233 = (0.5 / (((_3222 * ((_3208 * _3223) + _3193)) + 9.9999999392252902907785028219223e-09) + (((_3222 * _3223) + _3193) * _3208))) * _3222;
                        float _4545 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3244 = (((_3194 * 3.1415927410125732421875) * (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) / ((_3216 * _3216) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125))) * _3148;
                        _2996 = (_3163 * _3111.x) + _3069;
                        _2997 = (_3163 * _3111.y) + _3070;
                        _2998 = (_3163 * _3111.z) + _3071;
                        _2993 = (_3244 * _3128.x) + _3066;
                        _2994 = (_3244 * _3128.y) + _3067;
                        _2995 = (_3244 * _3128.z) + _3068;
                        if (_3073 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _2995;
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _3073;
                        }
                    }
                    frontier_phi_68_pred = _2995;
                    frontier_phi_68_pred_1 = _2998;
                    frontier_phi_68_pred_2 = _2997;
                    frontier_phi_68_pred_3 = _2996;
                    frontier_phi_68_pred_4 = _2994;
                    frontier_phi_68_pred_5 = _2993;
                }
                _2774 = frontier_phi_68_pred;
                _2780 = frontier_phi_68_pred_1;
                _2778 = frontier_phi_68_pred_2;
                _2776 = frontier_phi_68_pred_3;
                _2772 = frontier_phi_68_pred_4;
                _2770 = frontier_phi_68_pred_5;
                uint _2928 = _2927 + 1u;
                if (_2928 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2921 = _2770;
                    _2922 = _2772;
                    _2923 = _2774;
                    _2924 = _2776;
                    _2925 = _2778;
                    _2926 = _2780;
                    _2927 = _2928;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
        }
        uvec4 _2783 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2784 = _2783.z;
        uint _2786 = (_2784 >> 8u) & 15u;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((4294967295u << _2786) & _2667) == 0u)
        {
            _2889 = _2769;
            _2891 = _2771;
            _2893 = _2773;
            _2895 = _2775;
            _2897 = _2777;
            _2899 = _2779;
        }
        else
        {
            float _2914 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
            float _2915 = _2914 * _2621;
            float _2916 = _2914 * _2622;
            float _2917 = _2914 * _2623;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2786 < ((_2784 >> 12u) & 15u))
            {
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _3049 = _2769;
                float _3050 = _2771;
                float _3051 = _2773;
                float _3052 = _2775;
                float _3053 = _2777;
                float _3054 = _2779;
                uint _3055 = _2786;
                uint _3064;
                bool _3065;
                for (;;)
                {
                    _3064 = texelFetch(g_lightClassification, int((((_2661 << 5u) + (_2647 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                    _3065 = _3064 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3065)
                    {
                        frontier_phi_79_pred = _3054;
                        frontier_phi_79_pred_1 = _3053;
                        frontier_phi_79_pred_2 = _3052;
                        frontier_phi_79_pred_3 = _3051;
                        frontier_phi_79_pred_4 = _3050;
                        frontier_phi_79_pred_5 = _3049;
                    }
                    else
                    {
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3271 = _3049;
                        float _3272 = _3050;
                        float _3273 = _3051;
                        float _3274 = _3052;
                        float _3275 = _3053;
                        float _3276 = _3054;
                        uint _3277 = _3064;
                        uint _3278;
                        vec4 _3303;
                        float _3304;
                        vec4 _3319;
                        vec3 _3331;
                        vec4 _3346;
                        vec4 _3362;
                        float _3409;
                        bool _3410;
                        for (;;)
                        {
                            uint _3288 = ((_3055 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3277));
                            _3278 = (_3277 + 4294967295u) & _3277;
                            uint _3290 = _3288 * 40u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            _3304 = _3303.w;
                            uint _3306 = (_3288 * 40u) + 4u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3288 * 40u) + 8u;
                            _3331 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x));
                            uint _3333 = (_3288 * 40u) + 16u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3349 = (_3288 * 40u) + 20u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3365 = (_3288 * 40u) + 24u;
                            vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3384 = (_3288 * 40u) + 28u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3409 = fma(_2623, _3397.z, fma(_2622, _3397.y, _3397.x * _2621)) + _3397.w;
                            _3410 = !((fma(_2623, _3378.z, fma(_2622, _3378.y, _3378.x * _2621)) + _3378.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3410)
                            {
                                float _3437 = _3303.x - _2621;
                                float _3438 = _3303.y - _2622;
                                float _3439 = _3303.z - _2623;
                                float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                                float _3443 = inversesqrt(_3440);
                                float _3444 = _3443 * _3437;
                                float _3445 = _3443 * _3438;
                                float _3446 = _3443 * _3439;
                                float _3450 = 1.0 - (_3440 / (_3304 * _3304));
                                float _4556 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3455 = sqrt(_3440) * _3319.w;
                                float _3457 = 1.39999997615814208984375 / (_3455 + 1.39999997615814208984375);
                                float _3458 = _3457 * _3457;
                                float _3461 = ((1.0 - _3458) * dot(vec3(_3444, _3445, _3446), vec3(_701, _704, _707))) + _3458;
                                float _3464 = _3455 * _3455;
                                float _3468 = (fma(_2623, _3346.z, fma(_2622, _3346.y, _3346.x * _2621)) + _3346.w) / _3409;
                                float _3469 = (fma(_2623, _3362.z, fma(_2622, _3362.y, _3362.x * _2621)) + _3362.w) / _3409;
                                float _3473 = 1.0 - dot(vec2(_3468, _3469), vec2(_3468, _3469));
                                float _4572 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3475 = _3474 * (((isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0))) * _3451) / ((_3464 * 0.699999988079071044921875) + 1.0));
                                float _3487 = exp2(log2(1.0 / ((_3464 * 3.5) + 5.0)) * 0.25);
                                float _3488 = 1.0 - _905;
                                float _3495 = sqrt(1.0 - ((1.0 - (_3488 * _3488)) * (1.0 - (_3487 * _3487))));
                                float _3496 = _3495 * _3495;
                                float _3497 = _3496 * _3496;
                                float _3498 = _3444 - _2915;
                                float _3499 = _3445 - _2916;
                                float _3500 = _3446 - _2917;
                                float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                                float _3508 = dot(vec3(_701, _704, _707), vec3((-0.0) - _2915, (-0.0) - _2916, (-0.0) - _2917));
                                float _4583 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3512 = dot(vec3(_701, _704, _707), vec3(_3504 * _3498, _3504 * _3499, _3504 * _3500));
                                float _4594 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3519 = ((_3515 * _3515) * (_3497 + (-1.0))) + 1.0;
                                float _3520 = _3457 * _3496;
                                float _3521 = _3520 * _3520;
                                float _3527 = ((1.0 - _3521) * dot(vec3(_701, _704, _707), vec3(_3444, _3445, _3446))) + _3521;
                                float _4605 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3529 = 1.0 - _3496;
                                float _3539 = (0.5 / (((_3528 * ((_3511 * _3529) + _3496)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3496) * _3511))) * _3528;
                                float _4616 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3549 = (_3474 * _3451) * (((_3497 * 3.1415927410125732421875) * (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) / ((_3519 * _3519) * ((_3464 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3475 * _3319.z;
                                frontier_phi_85_pred_1 = _3475 * _3319.y;
                                frontier_phi_85_pred_2 = _3475 * _3319.x;
                                frontier_phi_85_pred_3 = _3549 * _3331.z;
                                frontier_phi_85_pred_4 = _3549 * _3331.y;
                                frontier_phi_85_pred_5 = _3549 * _3331.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3558 = frontier_phi_85_pred;
                            _3557 = frontier_phi_85_pred_1;
                            _3556 = frontier_phi_85_pred_2;
                            _3555 = frontier_phi_85_pred_3;
                            _3554 = frontier_phi_85_pred_4;
                            _3553 = frontier_phi_85_pred_5;
                            _3261 = _3556 + _3274;
                            _3262 = _3557 + _3275;
                            _3263 = _3558 + _3276;
                            _3258 = _3553 + _3271;
                            _3259 = _3554 + _3272;
                            _3260 = _3555 + _3273;
                            if (_3278 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3278;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3263;
                        frontier_phi_79_pred_1 = _3262;
                        frontier_phi_79_pred_2 = _3261;
                        frontier_phi_79_pred_3 = _3260;
                        frontier_phi_79_pred_4 = _3259;
                        frontier_phi_79_pred_5 = _3258;
                    }
                    _2900 = frontier_phi_79_pred;
                    _2898 = frontier_phi_79_pred_1;
                    _2896 = frontier_phi_79_pred_2;
                    _2894 = frontier_phi_79_pred_3;
                    _2892 = frontier_phi_79_pred_4;
                    _2890 = frontier_phi_79_pred_5;
                    uint _3056 = _3055 + 1u;
                    if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3049 = _2890;
                        _3050 = _2892;
                        _3051 = _2894;
                        _3052 = _2896;
                        _3053 = _2898;
                        _3054 = _2900;
                        _3055 = _3056;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2896;
                frontier_phi_60_61_ladder_1 = _2900;
                frontier_phi_60_61_ladder_2 = _2898;
                frontier_phi_60_61_ladder_3 = _2894;
                frontier_phi_60_61_ladder_4 = _2892;
                frontier_phi_60_61_ladder_5 = _2890;
            }
            else
            {
                frontier_phi_60_61_ladder = _2775;
                frontier_phi_60_61_ladder_1 = _2779;
                frontier_phi_60_61_ladder_2 = _2777;
                frontier_phi_60_61_ladder_3 = _2773;
                frontier_phi_60_61_ladder_4 = _2771;
                frontier_phi_60_61_ladder_5 = _2769;
            }
            _2889 = frontier_phi_60_61_ladder_5;
            _2891 = frontier_phi_60_61_ladder_4;
            _2893 = frontier_phi_60_61_ladder_3;
            _2895 = frontier_phi_60_61_ladder;
            _2897 = frontier_phi_60_61_ladder_2;
            _2899 = frontier_phi_60_61_ladder_1;
        }
        float _2904 = isnan(1.0) ? _889 : (isnan(_889) ? 1.0 : min(_889, 1.0));
        _2679 = (_2904 * _2895) + _2113;
        _2681 = (_2904 * _2897) + _2115;
        _2683 = (_2904 * _2899) + _2117;
        _2685 = ((_2889 * _875) * _2904) + _2461;
        _2687 = ((_2891 * _876) * _2904) + _2463;
        _2689 = ((_2893 * _877) * _2904) + _2465;
    }
    else
    {
        _2679 = _2113;
        _2681 = _2115;
        _2683 = _2117;
        _2685 = _2461;
        _2687 = _2463;
        _2689 = _2465;
    }
    float _4632 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4643 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4654 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4665 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _2707 = ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2679 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _889))) + ((_2685 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2708 = ((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2681 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _889))) + ((_2687 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2709 = ((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2683 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _889))) + ((_2689 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2714 = cbInstanceData._m0[_781 + 6u].w * (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)));
    float _2719 = _678 / cbSceneParam._m0[86u].x;
    float _2720 = _679 / cbSceneParam._m0[86u].y;
    vec4 _2734 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2719, _2720, (log2((isnan(cbSceneParam._m0[77u].w) ? _601 : (isnan(_601) ? cbSceneParam._m0[77u].w : min(_601, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2736 = _2734.x;
    float _2737 = _2734.y;
    float _2738 = _2734.z;
    float _2739 = _2734.w;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    if (_601 > cbSceneParam._m0[78u].w)
    {
        float _2794 = isnan(_601) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _601 : min(cbSceneParam._m0[80u].w, _601));
        float _2795 = _2794 / _601;
        float _2806 = _2795 * _651;
        float _2807 = _652 * _2795;
        float _2808 = (-0.0) - _2807;
        float _2809 = _2795 * _653;
        float _2811 = (cbSceneParam._m0[77u].w * _2808) / _2794;
        float _2812 = _2811 + cbSceneParam._m0[79u].w;
        float _2813 = cbSceneParam._m0[79u].w - _2807;
        float _2819 = sqrt(((_2806 * _2806) + (_2807 * _2807)) + (_2809 * _2809));
        float _2822 = (1.0 - (cbSceneParam._m0[77u].w / _2794)) * _2819;
        float _2827 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2829 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3006;
        if (abs((_2808 - _2811) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3006 = ((((_2812 > 0.0) ? exp2(_2827 * _2812) : (2.0 - exp2(_2829 * _2812))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2822;
        }
        else
        {
            float _2950 = 1.0 / cbSceneParam._m0[80u].x;
            float _2951 = isnan(_2813) ? _2812 : (isnan(_2812) ? _2813 : max(_2812, _2813));
            float _2952 = isnan(_2813) ? _2812 : (isnan(_2812) ? _2813 : min(_2812, _2813));
            float _2961 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : min(_2951, 0.0));
            float _2962 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : min(_2952, 0.0));
            _3006 = ((abs(_2819 / _2808) * cbSceneParam._m0[80u].y) * ((((_2961 - _2962) * 2.0) - ((exp2(_2827 * (isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0)))) - exp2(_2827 * (isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))))) * _2950)) - ((exp2(_2829 * _2961) - exp2(_2829 * _2962)) * _2950))) + (_2822 * cbSceneParam._m0[80u].z);
        }
        vec4 _3008 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2719, _2720, 1.0), 0.0);
        float _3017 = exp2((_3006 * (-1.44269502162933349609375)) * (1.0 - _3008.w));
        float _3018 = log2(_3017);
        float _3034 = log2(_2739);
        _2831 = (exp2(_3034 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].x)) * _3008.x) / cbSceneParam._m0[78u].x)) + _2736;
        _2833 = (exp2(_3034 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].y)) * _3008.y) / cbSceneParam._m0[78u].y)) + _2737;
        _2835 = (exp2(_3034 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].z)) * _3008.z) / cbSceneParam._m0[78u].z)) + _2738;
        _2837 = _3017 * _2739;
    }
    else
    {
        _2831 = _2736;
        _2833 = _2737;
        _2835 = _2738;
        _2837 = _2739;
    }
    bool _3044;
    vec4 _2847;
    vec4 _2869;
    float _2871;
    float _2875;
    float _2876;
    float _2877;
    float _2878;
    bool _2888;
    for (;;)
    {
        _2847 = cbMatDynParam._m0[0u];
        float _2849 = roundEven(_2847.y);
        bool _2850 = _2849 == 3.0;
        float _2851 = log2(_2837);
        float _2858 = exp2(_2851 * cbSceneParam._m0[78u].x) * _2707;
        float _2859 = exp2(_2851 * cbSceneParam._m0[78u].y) * _2708;
        float _2860 = exp2(_2851 * cbSceneParam._m0[78u].z) * _2709;
        float _2867 = _667 + (-0.5);
        _2869 = cbMtdParam._m0[1u];
        _2871 = _2869.y * _2867;
        float _2874 = (_2849 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2875 = _2874 * (_2850 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2831)));
        _2876 = _2874 * (_2850 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2833)));
        _2877 = _2874 * (_2850 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2835)));
        _2878 = _2867 * 0.999000012874603271484375;
        _2888 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2888)
        {
            if ((cbInstanceData._m0[_781 + 7u].x + _2878) < 0.5)
            {
                _3044 = true;
                break;
            }
        }
        uint _2985 = _782 + uint(_2847.w);
        if ((cbInstanceData._m0[_2985].w < 1.0) && ((cbInstanceData._m0[_2985].w + _2878) < 0.5))
        {
            _3044 = true;
            break;
        }
        if ((_2871 + _389) < _2869.x)
        {
            _3044 = true;
            break;
        }
        _3044 = false;
        break;
    }
    float _3249;
    if (_3044)
    {
        discard_state = true;
        _3249 = 0.0;
    }
    else
    {
        _3249 = _2714;
    }
    SV_Target.x = _2875;
    SV_Target.y = _2876;
    SV_Target.z = _2877;
    SV_Target.w = _3249;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2714;
    discard_exit();
}


