#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Crystal_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_Crystal_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1062;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    vec4 _291 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _297 = _291.w;
    float _308 = dot(vec3(_276, _277, _278), vec3(_198, _199, _200));
    float _311 = dot(vec3(_276, _277, _278), vec3(_212, _213, _214));
    float _314 = dot(vec3(_276, _277, _278), vec3(_219, _220, _221));
    float _320 = inversesqrt(dot(vec3(_308, _311, _314), vec3(_308, _311, _314)));
    float _342 = dot(vec4(texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _362 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_308 * cbMtdParam._m0[12u].x) * _320) * _342) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_311 * cbMtdParam._m0[12u].x) * _320) * _342) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _385 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _386 = _385 * _276;
    float _387 = _385 * _277;
    float _388 = _385 * _278;
    float _389 = dot(vec4(_386, _387, _388, 0.0), vec4(_219, _220, _221, 0.0));
    float _392 = _389 - cbMtdParam._m0[13u].x;
    float _3364 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _399 = exp2(log2(1.0 - (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _415 = ((((_291.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _362.x) * cbMtdParam._m0[9u].x) * ((_399 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _420 = ((((_291.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _362.y) * cbMtdParam._m0[9u].y) * ((_399 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _425 = ((((_291.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _362.z) * cbMtdParam._m0[9u].z) * ((_399 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _438 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _445 = cbMtdParam._m0[14u].y + _438.x;
    vec4 _458 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _466 = (_458.x * 2.0) + (-1.0);
    float _467 = (_458.y * 2.0) + (-1.0);
    float _468 = dot(vec2(_466, _467), vec2(_466, _467));
    float _3380 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))));
    float _476 = fma(_473, _219, fma(_467, _212, _466 * _198));
    float _479 = fma(_473, _220, fma(_467, _213, _466 * _199));
    float _482 = fma(_473, _221, fma(_467, _214, _466 * _200));
    float _486 = inversesqrt(dot(vec3(_476, _479, _482), vec3(_476, _479, _482)));
    float _487 = _486 * _476;
    float _488 = _486 * _479;
    float _490 = cbMtdParam._m0[14u].z + _458.z;
    vec4 _502 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _506 = cbMtdParam._m0[13u].w * _502.x;
    vec4 _519 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _528 = _389 - cbMtdParam._m0[12u].w;
    float _3391 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _538 = ((cbMtdParam._m0[14u].w * _519.x) + cbMtdParam._m0[14u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[14u].x));
    float _3407 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _551 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _552 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _562 = cbSceneParam._m0[86u].x * ((_551 / cbSceneParam._m0[86u].x) + (_487 * cbMtdParam._m0[15u].x));
    float _563 = cbSceneParam._m0[86u].y * ((_552 / cbSceneParam._m0[86u].y) + (_488 * cbMtdParam._m0[15u].x));
    float _570 = isnan(cbInstanceData._m0[8u].x) ? _562 : (isnan(_562) ? cbInstanceData._m0[8u].x : max(_562, cbInstanceData._m0[8u].x));
    float _571 = isnan(cbInstanceData._m0[8u].y) ? _563 : (isnan(_563) ? cbInstanceData._m0[8u].y : max(_563, cbInstanceData._m0[8u].y));
    vec4 _575 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _570 : (isnan(_570) ? cbInstanceData._m0[8u].z : min(_570, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _571 : (isnan(_571) ? cbInstanceData._m0[8u].w : min(_571, cbInstanceData._m0[8u].w))));
    float _587 = _486 * _482;
    float _3438 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _588 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _589 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _590 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3465 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3476 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _3487 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3498 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _594 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _610 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _629 = fma(_587, cbSceneParam._m0[5u].z, fma(_488, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _487));
    float _632 = fma(_587, cbSceneParam._m0[6u].z, fma(_488, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _487));
    float _635 = fma(_587, cbSceneParam._m0[7u].z, fma(_488, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _487));
    uint _648 = uint(roundEven(NORMAL.w)) * 13u;
    uint _650 = (_648 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _656 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * cbInstanceData._m0[_650].x;
    float _657 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * cbInstanceData._m0[_650].y;
    float _658 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * cbInstanceData._m0[_650].z;
    float _3509 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _662 = 1.0 - _594;
    float _663 = _659 * _662;
    float _664 = _660 * _662;
    float _665 = _661 * _662;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _594;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _594;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _594;
    float _673 = _670 + 0.039999999105930328369140625;
    float _675 = _671 + 0.039999999105930328369140625;
    float _676 = _672 + 0.039999999105930328369140625;
    vec4 _680 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _551, cbSceneParam._m0[86u].y * _552));
    float _683 = _680.x * TEXCOORD.z;
    float _684 = dot(vec3(_487, _488, _587), vec3(_386, _387, _388));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _487) - _386;
    float _692 = (_687 * _488) - _387;
    float _693 = (_687 * _587) - _388;
    float _694 = dot(vec3(_386, _387, _388), vec3(_487, _488, _587));
    float _697 = abs(_694);
    float _3542 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _698 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _704 = sqrt(_589);
    float _716 = exp2((_704 * 5.0) * log2(1.0 - (_698 * 0.999000012874603271484375))) / (4.0 - (_704 * 3.0));
    float _722 = (1.0 - _716) * ((_704 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _723 = _716 * _704;
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1061;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _786 = fma(_759, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751));
        float _790 = fma(_759, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751));
        float _794 = fma(_759, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751));
        float _819 = _751 + _487;
        float _820 = _755 + _488;
        float _821 = _759 + _587;
        float _831 = fma(_821, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819)) - _786;
        float _832 = fma(_821, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819)) - _790;
        float _833 = fma(_821, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819)) - _794;
        float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
        float _850 = ((_837 * _831) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_786 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_837 * _832) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_790 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_837 * _833) / cbModelParam._m0[34u].z) + ((((((_794 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        float _889 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_855.x + (-0.5));
        float _891 = _889 * (_855.y + (-0.5));
        float _892 = _889 * (_855.z + (-0.5));
        float _899 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_862.x + (-0.5));
        float _901 = _899 * (_862.y + (-0.5));
        float _902 = _899 * (_862.z + (-0.5));
        float _909 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_869.x + (-0.5));
        float _911 = _909 * (_869.y + (-0.5));
        float _912 = _909 * (_869.z + (-0.5));
        float _919 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_876.x + (-0.5));
        float _921 = _919 * (_876.y + (-0.5));
        float _922 = _919 * (_876.z + (-0.5));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = _890 * 0.5;
        float _927 = _900 * 0.5;
        float _928 = _910 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _943 = (dot(vec3(_487, _488, _587), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _953 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3590 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_955 + 1.0))) + _960) * _923;
        float _970 = _891 * 0.5;
        float _971 = _901 * 0.5;
        float _972 = _911 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_487, _488, _587), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3623 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_997 + 1.0))) + _1002) * _924;
        float _1012 = _892 * 0.5;
        float _1013 = _902 * 0.5;
        float _1014 = _912 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_487, _488, _587), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3656 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1039 + 1.0))) + _1044) * _925;
        _1061 = _892;
        _1063 = _891;
        _1064 = _890;
        _1065 = _902;
        _1066 = _901;
        _1067 = _900;
        _1068 = _912;
        _1069 = _911;
        _1070 = _910;
        _1071 = _925;
        _1072 = _924;
        _1073 = _923;
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _1062;
        _1063 = _1062;
        _1064 = _1062;
        _1065 = _1062;
        _1066 = _1062;
        _1067 = _1062;
        _1068 = _1062;
        _1069 = _1062;
        _1070 = _1062;
        _1071 = _1062;
        _1072 = _1062;
        _1073 = _1062;
        _1074 = 0.0;
        _1075 = 0.0;
        _1076 = 0.0;
    }
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1102 = fma(_759, cbModelParam._m0[30u].z, fma(_755, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _751));
        float _1106 = fma(_759, cbModelParam._m0[31u].z, fma(_755, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _751));
        float _1110 = fma(_759, cbModelParam._m0[32u].z, fma(_755, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _751));
        float _1133 = _751 + _487;
        float _1134 = _755 + _488;
        float _1135 = _759 + _587;
        float _1145 = fma(_1135, cbModelParam._m0[30u].z, fma(_1134, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1133)) - _1102;
        float _1146 = fma(_1135, cbModelParam._m0[31u].z, fma(_1134, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1133)) - _1106;
        float _1147 = fma(_1135, cbModelParam._m0[32u].z, fma(_1134, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1133)) - _1110;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1102 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1106 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[35u].z) + ((((((_1110 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1201 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1168.x + (-0.5));
        float _1203 = _1201 * (_1168.y + (-0.5));
        float _1204 = _1201 * (_1168.z + (-0.5));
        float _1211 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1175.x + (-0.5));
        float _1213 = _1211 * (_1175.y + (-0.5));
        float _1214 = _1211 * (_1175.z + (-0.5));
        float _1221 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1182.x + (-0.5));
        float _1223 = _1221 * (_1182.y + (-0.5));
        float _1224 = _1221 * (_1182.z + (-0.5));
        float _1231 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1189.x + (-0.5));
        float _1233 = _1231 * (_1189.y + (-0.5));
        float _1234 = _1231 * (_1189.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_487, _488, _587), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3719 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1265 + 1.0))) + _1270) * _1235;
        float _1280 = _1203 * 0.5;
        float _1281 = _1213 * 0.5;
        float _1282 = _1223 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_487, _488, _587), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3752 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1307 + 1.0))) + _1312) * _1236;
        float _1322 = _1204 * 0.5;
        float _1323 = _1214 * 0.5;
        float _1324 = _1224 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_487, _488, _587), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _3785 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1349 + 1.0))) + _1354) * _1237;
        _1371 = _1204;
        _1372 = _1203;
        _1373 = _1202;
        _1374 = _1214;
        _1375 = _1213;
        _1376 = _1212;
        _1377 = _1224;
        _1378 = _1223;
        _1379 = _1222;
        _1380 = _1237;
        _1381 = _1236;
        _1382 = _1235;
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
    }
    else
    {
        _1371 = _1062;
        _1372 = _1062;
        _1373 = _1062;
        _1374 = _1062;
        _1375 = _1062;
        _1376 = _1062;
        _1377 = _1062;
        _1378 = _1062;
        _1379 = _1062;
        _1380 = _1062;
        _1381 = _1062;
        _1382 = _1062;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1074)) + _1074;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1075)) + _1075;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1076)) + _1076;
    float _1418 = fma(_1397, cbSceneParam._m0[89u].z, fma(_1396, cbSceneParam._m0[89u].y, _1395 * cbSceneParam._m0[89u].x));
    float _1421 = fma(_1397, cbSceneParam._m0[90u].z, fma(_1396, cbSceneParam._m0[90u].y, _1395 * cbSceneParam._m0[90u].x));
    float _1424 = fma(_1397, cbSceneParam._m0[91u].z, fma(_1396, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1395));
    float _1439 = _691 * 0.5;
    float _1440 = _692 * 0.5;
    float _1441 = _693 * 0.5;
    float _1442 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1445 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1448 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1482;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1455 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1061, _1065, _1068, _1071));
        float _1459 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1463 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1470 = dot(vec4(cbModelParam._m0[39u]), vec4(_1439, _1440, _1441, 1.0));
        _1482 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1470) ? 0.0 : (isnan(0.0) ? _1470 : max(0.0, _1470))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1482 = 1.0;
    }
    float _1493;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1484 = dot(vec4(cbModelParam._m0[40u]), vec4(_1439, _1440, _1441, 1.0));
        _1493 = dot(vec3(isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1484) ? 0.0 : (isnan(0.0) ? _1484 : max(0.0, _1484))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1493 = 1.0;
    }
    float _1497 = (_1493 * cbModelParam._m0[1u].x) + (_1482 * (1.0 - cbModelParam._m0[1u].x));
    float _1507 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _589);
    float _1508 = isnan(_1507) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1507 : min(cbModelParam._m0[25u].z, _1507));
    float _1588;
    float _1590;
    float _1592;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1555 = fma(_759, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751)) + cbModelParam._m0[13u].w;
        float _1559 = fma(_759, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751)) + cbModelParam._m0[14u].w;
        float _1563 = fma(_759, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751)) + cbModelParam._m0[15u].w;
        float _1566 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1569 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1572 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1600;
        if (_1566 > 0.0)
        {
            _1600 = abs((1.0 - _1555) / _1566);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1555 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1600 = frontier_phi_16_14_ladder;
        }
        float _1775;
        if (_1569 > 0.0)
        {
            _1775 = abs((1.0 - _1559) / _1569);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1559 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1775 = frontier_phi_25_21_ladder;
        }
        float _2021;
        if (_1572 > 0.0)
        {
            _2021 = abs((1.0 - _1563) / _1572);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1563 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2021 = frontier_phi_36_32_ladder;
        }
        float _2023 = isnan(_1775) ? _1600 : (isnan(_1600) ? _1775 : min(_1600, _1775));
        float _2024 = isnan(_2021) ? _2023 : (isnan(_2023) ? _2021 : min(_2023, _2021));
        float _2028 = (_2024 * _1566) + _1555;
        float _2029 = (_2024 * _1569) + _1559;
        float _2030 = (_2024 * _1572) + _1563;
        float _2031 = _2024 * 9.9999997473787516355514526367188e-05;
        float _2033 = (-1.0) - _2031;
        float _2035 = _2031 + 1.0;
        float frontier_phi_15_36_ladder;
        float frontier_phi_15_36_ladder_1;
        float frontier_phi_15_36_ladder_2;
        if ((_2030 > _2035) || ((_2030 < _2033) || ((_2029 > _2035) || ((_2029 < _2033) || ((_2028 < _2033) || (_2028 > _2035))))))
        {
            frontier_phi_15_36_ladder = 0.0;
            frontier_phi_15_36_ladder_1 = 0.0;
            frontier_phi_15_36_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2180 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2030, cbModelParam._m0[9u].z, fma(_2029, cbModelParam._m0[9u].y, _2028 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2030, cbModelParam._m0[10u].z, fma(_2029, cbModelParam._m0[10u].y, _2028 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2030, cbModelParam._m0[11u].z, fma(_2029, cbModelParam._m0[11u].y, _2028 * cbModelParam._m0[11u].x))), _1508);
            frontier_phi_15_36_ladder = _2180.z * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_1 = _2180.y * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_2 = _2180.x * cbModelParam._m0[1u].y;
        }
        _1588 = frontier_phi_15_36_ladder_2;
        _1590 = frontier_phi_15_36_ladder_1;
        _1592 = frontier_phi_15_36_ladder;
    }
    else
    {
        vec4 _1576 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1508);
        _1588 = _1576.x * cbModelParam._m0[1u].y;
        _1590 = _1576.y * cbModelParam._m0[1u].y;
        _1592 = _1576.z * cbModelParam._m0[1u].y;
    }
    float _1596 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _589);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1596 : min(cbModelParam._m0[25u].w, _1596));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1654 = fma(_759, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751)) + cbModelParam._m0[21u].w;
        float _1658 = fma(_759, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751)) + cbModelParam._m0[22u].w;
        float _1662 = fma(_759, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751)) + cbModelParam._m0[23u].w;
        float _1665 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1668 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1671 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1780;
        if (_1665 > 0.0)
        {
            _1780 = abs((1.0 - _1654) / _1665);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1654 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1780 = frontier_phi_27_23_ladder;
        }
        float _2048;
        if (_1668 > 0.0)
        {
            _2048 = abs((1.0 - _1658) / _1668);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1658 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2048 = frontier_phi_38_34_ladder;
        }
        float _2353;
        if (_1671 > 0.0)
        {
            _2353 = abs((1.0 - _1662) / _1671);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1662 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2353 = frontier_phi_49_44_ladder;
        }
        float _2355 = isnan(_2048) ? _1780 : (isnan(_1780) ? _2048 : min(_1780, _2048));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1665) + _1654;
        float _2361 = (_2356 * _1668) + _1658;
        float _2362 = (_2356 * _1671) + _1662;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2363;
        float _2366 = _2363 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2362 > _2366) || ((_2362 < _2364) || ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 < _2364) || (_2360 > _2366))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2362, cbModelParam._m0[17u].z, fma(_2361, cbModelParam._m0[17u].y, _2360 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2362, cbModelParam._m0[18u].z, fma(_2361, cbModelParam._m0[18u].y, _2360 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2362, cbModelParam._m0[19u].z, fma(_2361, cbModelParam._m0[19u].y, _2360 * cbModelParam._m0[19u].x))), _1597);
            frontier_phi_24_49_ladder = _2534.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2534.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2534.x * cbModelParam._m0[1u].z;
        }
        _1690 = frontier_phi_24_49_ladder_2;
        _1692 = frontier_phi_24_49_ladder_1;
        _1694 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1597);
        _1690 = _1674.x * cbModelParam._m0[1u].z;
        _1692 = _1674.y * cbModelParam._m0[1u].z;
        _1694 = _1674.z * cbModelParam._m0[1u].z;
    }
    float _1707 = (((_722 * _673) + _723) * _683) * ((cbModelParam._m0[1u].w * (_1690 - _1588)) + _1588);
    float _1709 = (((_722 * _675) + _723) * _683) * ((cbModelParam._m0[1u].w * (_1692 - _1590)) + _1590);
    float _1711 = (((_722 * _676) + _723) * _683) * ((cbModelParam._m0[1u].w * (_1694 - _1592)) + _1592);
    float _1714 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, _1707 * cbSceneParam._m0[91u].x));
    uvec4 _1730 = floatBitsToUint(cbInstanceData._m0[_648 + 5u]);
    uint _1732 = _1730.x * 14u;
    uint _1733 = _1732 + 13u;
    float _1738 = _683 + (-1.0);
    float _1741 = (cbLight._m0[_1733].x * _1738) + 1.0;
    float _1742 = (cbLight._m0[_1733].y * _1738) + 1.0;
    uint _1744 = _1732 + 4u;
    float _1755 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_487, _488, _587));
    float _1758 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
    uint _1759 = _1732 + 5u;
    uint _1765 = _1732 | 1u;
    float _1771 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_487, _488, _587));
    float _1774 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
    float _1839;
    float _1840;
    float _1841;
    if (_590 == 0.0)
    {
        float _3921 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _3932 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1793 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.3183098733425140380859375;
        float _1795 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.3183098733425140380859375;
        _1839 = ((cbLight._m0[_1759].x * _1774) * _1795) + ((cbLight._m0[_1744].x * _1758) * _1793);
        _1840 = ((_1774 * cbLight._m0[_1759].y) * _1795) + ((_1758 * cbLight._m0[_1744].y) * _1793);
        _1841 = ((_1774 * cbLight._m0[_1759].z) * _1795) + ((_1758 * cbLight._m0[_1744].z) * _1793);
    }
    else
    {
        float _1805 = _1755 + _590;
        float _1808 = (_590 * 2.0) + 1.0;
        float _1809 = (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) / _1808;
        float _1816 = _1771 + _590;
        float _1818 = (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) / _1808;
        _1839 = (((_1818 * cbLight._m0[_1759].x) * _1774) + ((_1809 * cbLight._m0[_1744].x) * _1758)) * 0.3183098733425140380859375;
        _1840 = (((_1818 * cbLight._m0[_1759].y) * _1774) + ((_1809 * cbLight._m0[_1744].y) * _1758)) * 0.3183098733425140380859375;
        _1841 = (((_1818 * cbLight._m0[_1759].z) * _1774) + ((_1809 * cbLight._m0[_1744].z) * _1758)) * 0.3183098733425140380859375;
    }
    uint _1845 = _1732 + 8u;
    float _1861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _589) * 0.949999988079071044921875);
    float _1862 = _1861 * _1861;
    float _1863 = cbLight._m0[_1732].x + _386;
    float _1864 = cbLight._m0[_1732].y + _387;
    float _1865 = cbLight._m0[_1732].z + _388;
    float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
    float _1870 = _1869 * _1863;
    float _1871 = _1869 * _1864;
    float _1872 = _1869 * _1865;
    float _1873 = dot(vec3(_487, _488, _587), vec3(cbLight._m0[_1732].xyz));
    float _3953 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _1877 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1878 = dot(vec3(_487, _488, _587), vec3(_1870, _1871, _1872));
    float _3975 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _1882 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1870, _1871, _1872));
    float _3986 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1886 = _1862 * _1862;
    float _1890 = ((_1881 * _1881) * (_1886 + (-1.0))) + 1.0;
    float _1898 = exp2(log2(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * 5.0);
    float _1899 = 0.959999978542327880859375 - _670;
    float _1901 = 0.959999978542327880859375 - _671;
    float _1902 = 0.959999978542327880859375 - _672;
    float _1909 = 1.0 - _1862;
    float _1920 = (0.5 / (((_1877 * ((_1876 * _1909) + _1862)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1909) + _1862) * _1876))) * _1876;
    float _3997 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1922 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1886 / ((_1890 * _1890) * 3.141590118408203125));
    uint _1935 = _1732 + 9u;
    float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1765].w)) * _589) * 0.949999988079071044921875);
    float _1950 = _1949 * _1949;
    float _1951 = cbLight._m0[_1765].x + _386;
    float _1952 = cbLight._m0[_1765].y + _387;
    float _1953 = cbLight._m0[_1765].z + _388;
    float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
    float _1958 = _1957 * _1951;
    float _1959 = _1957 * _1952;
    float _1960 = _1957 * _1953;
    float _1961 = dot(vec3(_487, _488, _587), vec3(cbLight._m0[_1765].xyz));
    float _4008 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1965 = dot(vec3(_487, _488, _587), vec3(_1958, _1959, _1960));
    float _4019 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1969 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1958, _1959, _1960));
    float _4030 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1973 = _1950 * _1950;
    float _1977 = ((_1968 * _1968) * (_1973 + (-1.0))) + 1.0;
    float _1984 = exp2(log2(1.0 - (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * 5.0);
    float _1991 = 1.0 - _1950;
    float _2001 = (0.5 / (((_1877 * ((_1964 * _1991) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1991) + _1950) * _1964))) * _1964;
    float _4041 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1973 / ((_1977 * _1977) * 3.141590118408203125));
    float _2013 = (((((_1984 * _1899) + _673) * cbLight._m0[_1935].x) * _2003) * _1774) + (((((_1898 * _1899) + _673) * cbLight._m0[_1845].x) * _1922) * _1758);
    float _2014 = (((((_1984 * _1901) + _675) * cbLight._m0[_1935].y) * _2003) * _1774) + (((((_1898 * _1901) + _675) * cbLight._m0[_1845].y) * _1922) * _1758);
    float _2015 = (((((_1984 * _1902) + _676) * cbLight._m0[_1935].z) * _2003) * _1774) + (((((_1898 * _1902) + _676) * cbLight._m0[_1845].z) * _1922) * _1758);
    float _2151;
    float _2153;
    float _2155;
    float _2157;
    float _2159;
    float _2161;
    if (_1730.y == 0u)
    {
        float _2092 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2093 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2092;
        float _2094 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2092;
        float _2095 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2092;
        uvec4 _2107 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2108 = _2107.x;
        uint _2119 = uint((float(_2107.y) * floor(float(uint(cbSceneParam._m0[85u].y * _552) / _2108))) + floor(float(uint(cbSceneParam._m0[85u].x * _551) / _2108)));
        float _2129 = (log2(_2095 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2130 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        uint _2133 = uint(isnan(14.0) ? _2130 : (isnan(_2130) ? 14.0 : min(_2130, 14.0)));
        uvec4 _2138 = texelFetch(g_lightClusterGridBuffer, int(((_2133 << 2u) + (_2119 << 6u)) >> 2u));
        uint _2139 = _2138.x;
        uint _2140 = _2107.z;
        float _2189;
        float _2191;
        float _2193;
        float _2195;
        float _2197;
        float _2199;
        if (((((1u << ((_2140 >> 4u) & 15u)) + 4294967295u) & _2139) == 0u) || ((_2140 & 240u) == 0u))
        {
            _2189 = 0.0;
            _2191 = 0.0;
            _2193 = 0.0;
            _2195 = 0.0;
            _2197 = 0.0;
            _2199 = 0.0;
        }
        else
        {
            float _2190;
            float _2192;
            float _2194;
            float _2196;
            float _2198;
            float _2200;
            float _2411 = 0.0;
            float _2412 = 0.0;
            float _2413 = 0.0;
            float _2414 = 0.0;
            float _2415 = 0.0;
            float _2416 = 0.0;
            uint _2417 = 0u;
            uint _2426;
            bool _2427;
            for (;;)
            {
                _2426 = texelFetch(g_lightClassification, int((((_2133 << 5u) + (_2119 << 9u)) + (_2417 << 2u)) >> 2u)).x;
                _2427 = _2426 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2427)
                {
                    frontier_phi_58_pred = _2416;
                    frontier_phi_58_pred_1 = _2415;
                    frontier_phi_58_pred_2 = _2414;
                    frontier_phi_58_pred_3 = _2413;
                    frontier_phi_58_pred_4 = _2412;
                    frontier_phi_58_pred_5 = _2411;
                }
                else
                {
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    uint _2614;
                    _2608 = _2411;
                    _2609 = _2412;
                    _2610 = _2413;
                    _2611 = _2414;
                    _2612 = _2415;
                    _2613 = _2416;
                    _2614 = _2426;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    for (;;)
                    {
                        uint _2618 = uint(findLSB(_2614)) + (_2417 << 5u);
                        uint _2615 = (_2614 + 4294967295u) & _2614;
                        uint _2620 = _2618 * 48u;
                        vec4 _2634 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 3u)).x));
                        uint _2640 = (_2618 * 48u) + 4u;
                        vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2640)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 3u)).x));
                        float _2654 = _2653.x;
                        float _2655 = _2653.y;
                        float _2656 = _2653.z;
                        uint _2659 = (_2618 * 48u) + 8u;
                        vec3 _2670 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x));
                        uint _2675 = (_2618 * 48u) + 12u;
                        vec2 _2683 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x));
                        float _2689 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
                        float _2690 = _2689 * _2093;
                        float _2691 = _2689 * _2094;
                        float _2692 = _2689 * _2095;
                        float _2693 = _2634.x - _2093;
                        float _2694 = _2634.y - _2094;
                        float _2695 = _2634.z - _2095;
                        float _2696 = dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695));
                        float _2699 = inversesqrt(_2696);
                        float _2700 = _2699 * _2693;
                        float _2701 = _2699 * _2694;
                        float _2702 = _2699 * _2695;
                        float _2703 = dot(vec3(_629, _632, _635), vec3(_2700, _2701, _2702));
                        float _2708 = 1.0 - (_2696 * _2634.w);
                        float _4062 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                        float _2709 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                        float _2710 = sqrt(_2696) * _2653.w;
                        float _2713 = 1.39999997615814208984375 / (_2710 + 1.39999997615814208984375);
                        float _2714 = _2713 * _2713;
                        float _2715 = 1.0 - _2714;
                        float _2717 = (_2715 * _2715) * _590;
                        float _2720 = ((_2715 * _2703) + _2714) + _2717;
                        float _2725 = _2710 * _2710;
                        float _2730 = ((isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))) * _2709) / (((_2717 * 2.0) + 1.0) * ((_2725 * 0.699999988079071044921875) + 1.0));
                        float _2734 = dot(vec3(_2700, _2701, _2702), vec3(_2690, _2691, _2692));
                        float _4078 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2741 = dot(vec3((-0.0) - _2690, (-0.0) - _2691, (-0.0) - _2692), vec3(_629, _632, _635)) + 1.0;
                        float _2743 = (isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))) * 0.5;
                        float _2750 = ((_2743 * _2743) * _2683.x) * exp2((_2683.y * 32.0) * log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))));
                        float _2752 = _590 / (_590 + 1.0);
                        float _2768 = (-0.0) - _2093;
                        float _2769 = (-0.0) - _2094;
                        float _2770 = (-0.0) - _2095;
                        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
                        float _2775 = _2774 * _2768;
                        float _2776 = _2774 * _2769;
                        float _2777 = _2774 * _2770;
                        float _2785 = exp2(log2(1.0 / ((_2725 * 3.5) + 5.0)) * 0.25);
                        float _2786 = 1.0 - _704;
                        float _2793 = sqrt(1.0 - ((1.0 - (_2786 * _2786)) * (1.0 - (_2785 * _2785))));
                        float _2794 = _2793 * _2793;
                        float _2795 = _2794 * _2794;
                        float _2796 = _2775 + _2700;
                        float _2797 = _2776 + _2701;
                        float _2798 = _2777 + _2702;
                        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
                        float _2806 = dot(vec3(_629, _632, _635), vec3(_2775, _2776, _2777));
                        float _4094 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2809 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                        float _2810 = dot(vec3(_629, _632, _635), vec3(_2802 * _2796, _2802 * _2797, _2802 * _2798));
                        float _4105 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2813 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                        float _2817 = ((_2813 * _2813) * (_2795 + (-1.0))) + 1.0;
                        float _2818 = _2713 * _2794;
                        float _2819 = _2818 * _2818;
                        float _2822 = ((1.0 - _2819) * _2703) + _2819;
                        float _4116 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2823 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                        float _2824 = 1.0 - _2794;
                        float _2834 = (0.5 / (((_2823 * ((_2809 * _2824) + _2794)) + 9.9999999392252902907785028219223e-09) + (((_2823 * _2824) + _2794) * _2809))) * _2823;
                        float _4127 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2845 = (((_2795 * 3.1415927410125732421875) * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) / ((_2817 * _2817) * ((_2725 * 2.1991131305694580078125) + 3.141590118408203125))) * _2709;
                        _2542 = (((((_2654 * 0.3183098733425140380859375) * _2752) * _2750) + _2654) * _2730) + _2611;
                        _2543 = (((((_2655 * 0.3183098733425140380859375) * _2752) * _2750) + _2655) * _2730) + _2612;
                        _2544 = (((((_2656 * 0.3183098733425140380859375) * _2752) * _2750) + _2656) * _2730) + _2613;
                        _2539 = (_2845 * _2670.x) + _2608;
                        _2540 = (_2845 * _2670.y) + _2609;
                        _2541 = (_2845 * _2670.z) + _2610;
                        if (_2615 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2608 = _2539;
                            _2609 = _2540;
                            _2610 = _2541;
                            _2611 = _2542;
                            _2612 = _2543;
                            _2613 = _2544;
                            _2614 = _2615;
                        }
                    }
                    frontier_phi_58_pred = _2544;
                    frontier_phi_58_pred_1 = _2543;
                    frontier_phi_58_pred_2 = _2542;
                    frontier_phi_58_pred_3 = _2541;
                    frontier_phi_58_pred_4 = _2540;
                    frontier_phi_58_pred_5 = _2539;
                }
                _2200 = frontier_phi_58_pred;
                _2198 = frontier_phi_58_pred_1;
                _2196 = frontier_phi_58_pred_2;
                _2194 = frontier_phi_58_pred_3;
                _2192 = frontier_phi_58_pred_4;
                _2190 = frontier_phi_58_pred_5;
                uint _2418 = _2417 + 1u;
                if (_2418 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2411 = _2190;
                    _2412 = _2192;
                    _2413 = _2194;
                    _2414 = _2196;
                    _2415 = _2198;
                    _2416 = _2200;
                    _2417 = _2418;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2189 = _2190;
            _2191 = _2192;
            _2193 = _2194;
            _2195 = _2196;
            _2197 = _2198;
            _2199 = _2200;
        }
        uvec4 _2203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2204 = _2203.z;
        uint _2206 = (_2204 >> 8u) & 15u;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        if (((4294967295u << _2206) & _2139) == 0u)
        {
            _2379 = _2189;
            _2381 = _2191;
            _2383 = _2193;
            _2385 = _2195;
            _2387 = _2197;
            _2389 = _2199;
        }
        else
        {
            float _2404 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
            float _2405 = _2404 * _2093;
            float _2406 = _2404 * _2094;
            float _2407 = _2404 * _2095;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2206 < ((_2204 >> 12u) & 15u))
            {
                float _2380;
                float _2382;
                float _2384;
                float _2386;
                float _2388;
                float _2390;
                float _2591 = _2189;
                float _2592 = _2191;
                float _2593 = _2193;
                float _2594 = _2195;
                float _2595 = _2197;
                float _2596 = _2199;
                uint _2597 = _2206;
                uint _2606;
                bool _2607;
                for (;;)
                {
                    _2606 = texelFetch(g_lightClassification, int((((_2133 << 5u) + (_2119 << 9u)) + (_2597 << 2u)) >> 2u)).x;
                    _2607 = _2606 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2607)
                    {
                        frontier_phi_66_pred = _2596;
                        frontier_phi_66_pred_1 = _2595;
                        frontier_phi_66_pred_2 = _2594;
                        frontier_phi_66_pred_3 = _2593;
                        frontier_phi_66_pred_4 = _2592;
                        frontier_phi_66_pred_5 = _2591;
                    }
                    else
                    {
                        float _2888;
                        float _2889;
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _2901 = _2591;
                        float _2902 = _2592;
                        float _2903 = _2593;
                        float _2904 = _2594;
                        float _2905 = _2595;
                        float _2906 = _2596;
                        uint _2907 = _2606;
                        uint _2908;
                        vec4 _2933;
                        float _2934;
                        vec4 _2949;
                        float _2950;
                        float _2951;
                        float _2952;
                        vec3 _2964;
                        vec2 _2973;
                        vec4 _2988;
                        vec4 _3004;
                        float _3051;
                        bool _3052;
                        for (;;)
                        {
                            uint _2918 = ((_2597 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2907));
                            _2908 = (_2907 + 4294967295u) & _2907;
                            uint _2920 = _2918 * 40u;
                            _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            _2934 = _2933.w;
                            uint _2936 = (_2918 * 40u) + 4u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            _2950 = _2949.x;
                            _2951 = _2949.y;
                            _2952 = _2949.z;
                            uint _2954 = (_2918 * 40u) + 8u;
                            _2964 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x));
                            uint _2966 = (_2918 * 40u) + 12u;
                            _2973 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x));
                            uint _2975 = (_2918 * 40u) + 16u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2991 = (_2918 * 40u) + 20u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3007 = (_2918 * 40u) + 24u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3026 = (_2918 * 40u) + 28u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3051 = fma(_2095, _3039.z, fma(_2094, _3039.y, _3039.x * _2093)) + _3039.w;
                            _3052 = !((fma(_2095, _3020.z, fma(_2094, _3020.y, _3020.x * _2093)) + _3020.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_3052)
                            {
                                float _3078 = _2933.x - _2093;
                                float _3079 = _2933.y - _2094;
                                float _3080 = _2933.z - _2095;
                                float _3081 = dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080));
                                float _3084 = inversesqrt(_3081);
                                float _3085 = _3084 * _3078;
                                float _3086 = _3084 * _3079;
                                float _3087 = _3084 * _3080;
                                float _3091 = 1.0 - (_3081 / (_2934 * _2934));
                                float _4138 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3092 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3096 = sqrt(_3081) * _2949.w;
                                float _3098 = 1.39999997615814208984375 / (_3096 + 1.39999997615814208984375);
                                float _3099 = _3098 * _3098;
                                float _3100 = 1.0 - _3099;
                                float _3102 = (_3100 * _3100) * _590;
                                float _3105 = ((_3100 * dot(vec3(_3085, _3086, _3087), vec3(_629, _632, _635))) + _3099) + _3102;
                                float _3110 = _3096 * _3096;
                                float _3115 = (fma(_2095, _2988.z, fma(_2094, _2988.y, _2988.x * _2093)) + _2988.w) / _3051;
                                float _3116 = (fma(_2095, _3004.z, fma(_2094, _3004.y, _3004.x * _2093)) + _3004.w) / _3051;
                                float _3120 = 1.0 - dot(vec2(_3115, _3116), vec2(_3115, _3116));
                                float _4154 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3122 = _3121 * (((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3092) / (((_3102 * 2.0) + 1.0) * ((_3110 * 0.699999988079071044921875) + 1.0)));
                                float _3123 = (-0.0) - _2405;
                                float _3124 = (-0.0) - _2406;
                                float _3125 = (-0.0) - _2407;
                                float _3126 = dot(vec3(_3085, _3086, _3087), vec3(_2405, _2406, _2407));
                                float _4165 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3133 = dot(vec3(_3123, _3124, _3125), vec3(_629, _632, _635)) + 1.0;
                                float _3135 = (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0))) * 0.5;
                                float _3142 = ((_3135 * _3135) * _2973.x) * exp2((_2973.y * 32.0) * log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))));
                                float _3144 = _590 / (_590 + 1.0);
                                float _3165 = exp2(log2(1.0 / ((_3110 * 3.5) + 5.0)) * 0.25);
                                float _3166 = 1.0 - _704;
                                float _3173 = sqrt(1.0 - ((1.0 - (_3166 * _3166)) * (1.0 - (_3165 * _3165))));
                                float _3174 = _3173 * _3173;
                                float _3175 = _3174 * _3174;
                                float _3176 = _3085 - _2405;
                                float _3177 = _3086 - _2406;
                                float _3178 = _3087 - _2407;
                                float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                                float _3186 = dot(vec3(_629, _632, _635), vec3(_3123, _3124, _3125));
                                float _4181 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3189 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3190 = dot(vec3(_629, _632, _635), vec3(_3182 * _3176, _3182 * _3177, _3182 * _3178));
                                float _4192 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3193 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3197 = ((_3193 * _3193) * (_3175 + (-1.0))) + 1.0;
                                float _3198 = _3098 * _3174;
                                float _3199 = _3198 * _3198;
                                float _3205 = ((1.0 - _3199) * dot(vec3(_629, _632, _635), vec3(_3085, _3086, _3087))) + _3199;
                                float _4203 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3206 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3207 = 1.0 - _3174;
                                float _3217 = (0.5 / (((_3206 * ((_3189 * _3207) + _3174)) + 9.9999999392252902907785028219223e-09) + (((_3206 * _3207) + _3174) * _3189))) * _3206;
                                float _4214 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3227 = (_3121 * _3092) * (((_3175 * 3.1415927410125732421875) * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) / ((_3197 * _3197) * ((_3110 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = ((((_2951 * 0.3183098733425140380859375) * _3144) * _3142) + _2951) * _3122;
                                frontier_phi_72_pred_1 = ((((_2952 * 0.3183098733425140380859375) * _3144) * _3142) + _2952) * _3122;
                                frontier_phi_72_pred_2 = _3227 * _2964.x;
                                frontier_phi_72_pred_3 = ((((_2950 * 0.3183098733425140380859375) * _3144) * _3142) + _2950) * _3122;
                                frontier_phi_72_pred_4 = _3227 * _2964.z;
                                frontier_phi_72_pred_5 = _3227 * _2964.y;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _3235 = frontier_phi_72_pred;
                            _3236 = frontier_phi_72_pred_1;
                            _3231 = frontier_phi_72_pred_2;
                            _3234 = frontier_phi_72_pred_3;
                            _3233 = frontier_phi_72_pred_4;
                            _3232 = frontier_phi_72_pred_5;
                            _2891 = _3234 + _2904;
                            _2892 = _3235 + _2905;
                            _2893 = _3236 + _2906;
                            _2888 = _3231 + _2901;
                            _2889 = _3232 + _2902;
                            _2890 = _3233 + _2903;
                            if (_2908 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2908;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _2893;
                        frontier_phi_66_pred_1 = _2892;
                        frontier_phi_66_pred_2 = _2891;
                        frontier_phi_66_pred_3 = _2890;
                        frontier_phi_66_pred_4 = _2889;
                        frontier_phi_66_pred_5 = _2888;
                    }
                    _2390 = frontier_phi_66_pred;
                    _2388 = frontier_phi_66_pred_1;
                    _2386 = frontier_phi_66_pred_2;
                    _2384 = frontier_phi_66_pred_3;
                    _2382 = frontier_phi_66_pred_4;
                    _2380 = frontier_phi_66_pred_5;
                    uint _2598 = _2597 + 1u;
                    if (_2598 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2591 = _2380;
                        _2592 = _2382;
                        _2593 = _2384;
                        _2594 = _2386;
                        _2595 = _2388;
                        _2596 = _2390;
                        _2597 = _2598;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2390;
                frontier_phi_51_52_ladder_1 = _2388;
                frontier_phi_51_52_ladder_2 = _2386;
                frontier_phi_51_52_ladder_3 = _2382;
                frontier_phi_51_52_ladder_4 = _2384;
                frontier_phi_51_52_ladder_5 = _2380;
            }
            else
            {
                frontier_phi_51_52_ladder = _2199;
                frontier_phi_51_52_ladder_1 = _2197;
                frontier_phi_51_52_ladder_2 = _2195;
                frontier_phi_51_52_ladder_3 = _2191;
                frontier_phi_51_52_ladder_4 = _2193;
                frontier_phi_51_52_ladder_5 = _2189;
            }
            _2379 = frontier_phi_51_52_ladder_5;
            _2381 = frontier_phi_51_52_ladder_3;
            _2383 = frontier_phi_51_52_ladder_4;
            _2385 = frontier_phi_51_52_ladder_2;
            _2387 = frontier_phi_51_52_ladder_1;
            _2389 = frontier_phi_51_52_ladder;
        }
        float _2394 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2151 = (_2394 * _2385) + _1839;
        _2153 = (_2394 * _2387) + _1840;
        _2155 = (_2394 * _2389) + _1841;
        _2157 = ((_2379 * _673) * _2394) + _2013;
        _2159 = ((_2381 * _675) * _2394) + _2014;
        _2161 = ((_2383 * _676) * _2394) + _2015;
    }
    else
    {
        _2151 = _1839;
        _2153 = _1840;
        _2155 = _1841;
        _2157 = _2013;
        _2159 = _2014;
        _2161 = _2015;
    }
    float _2274;
    float _2275;
    float _2276;
    if (_590 > 0.0)
    {
        uint _2210 = _1732 + 4u;
        float _2216 = (-0.0) - _386;
        float _2217 = (-0.0) - _387;
        float _2218 = (-0.0) - _388;
        float _2219 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_2216, _2217, _2218));
        float _4230 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2223 = _694 + 1.0;
        float _2225 = (isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0))) * 0.5;
        float _2230 = _2225 * _2225;
        float _2231 = _2230 * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * 32.0);
        float _2233 = _590 / (_590 + 1.0);
        float _2234 = isnan(_1741) ? 1.0 : (isnan(1.0) ? _1741 : min(1.0, _1741));
        uint _2244 = _1732 + 5u;
        float _2250 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_2216, _2217, _2218));
        float _4251 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2257 = _2230 * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 32.0);
        float _2258 = isnan(_1742) ? 1.0 : (isnan(1.0) ? _1742 : min(1.0, _1742));
        _2274 = ((((_2257 * cbLight._m0[_2244].x) * _2233) * _2258) + (((_2231 * cbLight._m0[_2210].x) * _2233) * _2234)) * 0.3183098733425140380859375;
        _2275 = ((((_2257 * cbLight._m0[_2244].y) * _2233) * _2258) + (((_2231 * cbLight._m0[_2210].y) * _2233) * _2234)) * 0.3183098733425140380859375;
        _2276 = ((((_2257 * cbLight._m0[_2244].z) * _2233) * _2258) + (((_2231 * cbLight._m0[_2210].z) * _2233) * _2234)) * 0.3183098733425140380859375;
    }
    else
    {
        _2274 = 0.0;
        _2275 = 0.0;
        _2276 = 0.0;
    }
    float _4267 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4278 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4289 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4300 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _2282 = 0.959999978542327880859375 - (_594 * 0.959999978542327880859375);
    float _2293 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * ((_2151 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _683)) + _2274);
    float _2294 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * ((_2153 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _683)) + _2275);
    float _2295 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * ((_2155 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _683)) + _2276);
    float _2299 = _2282 - (exp2(log2(1.0 - _698) * 5.0) * _2282);
    float _2319 = cbInstanceData._m0[_648 + 6u].w * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)));
    float _2324 = _551 / cbSceneParam._m0[86u].x;
    float _2325 = _552 / cbSceneParam._m0[86u].y;
    vec4 _2339 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, (log2((isnan(cbSceneParam._m0[77u].w) ? _610 : (isnan(_610) ? cbSceneParam._m0[77u].w : min(_610, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2341 = _2339.x;
    float _2342 = _2339.y;
    float _2343 = _2339.z;
    float _2344 = _2339.w;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_610 > cbSceneParam._m0[78u].w)
    {
        float _2432 = isnan(_610) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _610 : min(cbSceneParam._m0[80u].w, _610));
        float _2433 = _2432 / _610;
        float _2444 = _2433 * _276;
        float _2445 = _277 * _2433;
        float _2446 = (-0.0) - _2445;
        float _2447 = _2433 * _278;
        float _2449 = (cbSceneParam._m0[77u].w * _2446) / _2432;
        float _2450 = _2449 + cbSceneParam._m0[79u].w;
        float _2451 = cbSceneParam._m0[79u].w - _2445;
        float _2457 = sqrt(((_2444 * _2444) + (_2445 * _2445)) + (_2447 * _2447));
        float _2460 = (1.0 - (cbSceneParam._m0[77u].w / _2432)) * _2457;
        float _2465 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2467 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2850;
        if (abs((_2446 - _2449) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2850 = ((((_2450 > 0.0) ? exp2(_2465 * _2450) : (2.0 - exp2(_2467 * _2450))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2460;
        }
        else
        {
            float _2564 = 1.0 / cbSceneParam._m0[80u].x;
            float _2565 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : max(_2450, _2451));
            float _2566 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : min(_2450, _2451));
            float _2575 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : min(_2565, 0.0));
            float _2576 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : min(_2566, 0.0));
            _2850 = ((abs(_2457 / _2446) * cbSceneParam._m0[80u].y) * ((((_2575 - _2576) * 2.0) - ((exp2(_2465 * (isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0)))) - exp2(_2465 * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0))))) * _2564)) - ((exp2(_2467 * _2575) - exp2(_2467 * _2576)) * _2564))) + (_2460 * cbSceneParam._m0[80u].z);
        }
        vec4 _2852 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, 1.0), 0.0);
        float _2861 = exp2((_2850 * (-1.44269502162933349609375)) * (1.0 - _2852.w));
        float _2862 = log2(_2861);
        float _2878 = log2(_2344);
        _2469 = (exp2(_2878 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].x)) * _2852.x) / cbSceneParam._m0[78u].x)) + _2341;
        _2471 = (exp2(_2878 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].y)) * _2852.y) / cbSceneParam._m0[78u].y)) + _2342;
        _2473 = (exp2(_2878 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].z)) * _2852.z) / cbSceneParam._m0[78u].z)) + _2343;
        _2475 = _2861 * _2344;
    }
    else
    {
        _2469 = _2341;
        _2471 = _2342;
        _2473 = _2343;
        _2475 = _2344;
    }
    float _2486 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2487 = _2486 == 3.0;
    float _2488 = log2(_2475);
    float _2495 = exp2(_2488 * cbSceneParam._m0[78u].x) * ((_2293 + ((_2157 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1497)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _575.x) * _2299) - _2293) * _539));
    float _2496 = exp2(_2488 * cbSceneParam._m0[78u].y) * ((_2294 + ((_2159 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1497)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _575.y) * _2299) - _2294) * _539));
    float _2497 = exp2(_2488 * cbSceneParam._m0[78u].z) * ((_2295 + ((_2161 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1497)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _575.z) * _2299) - _2295) * _539));
    float _2506 = (_2486 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2506 * (_2487 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2469)));
    SV_Target.y = _2506 * (_2487 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.z = _2506 * (_2487 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2473)));
    SV_Target.w = _2319;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2319;
}


