#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Crystal_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_Crystal_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1066;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _202 = _201 * _194;
    float _203 = _201 * _195;
    float _204 = _201 * _196;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = _215 * TANGENT.x;
    float _217 = _215 * TANGENT.y;
    float _218 = _215 * TANGENT.z;
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _295 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _301 = _295.w;
    float _312 = dot(vec3(_280, _281, _282), vec3(_202, _203, _204));
    float _315 = dot(vec3(_280, _281, _282), vec3(_216, _217, _218));
    float _318 = dot(vec3(_280, _281, _282), vec3(_223, _224, _225));
    float _324 = inversesqrt(dot(vec3(_312, _315, _318), vec3(_312, _315, _318)));
    float _346 = dot(vec4(texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _366 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_312 * cbMtdParam._m0[12u].x) * _324) * _346) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_315 * cbMtdParam._m0[12u].x) * _324) * _346) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _389 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _390 = _389 * _280;
    float _391 = _389 * _281;
    float _392 = _389 * _282;
    float _393 = dot(vec4(_390, _391, _392, 0.0), vec4(_223, _224, _225, 0.0));
    float _396 = _393 - cbMtdParam._m0[13u].x;
    float _3654 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _403 = exp2(log2(1.0 - (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _419 = ((((_295.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _366.x) * cbMtdParam._m0[9u].x) * ((_403 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _424 = ((((_295.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _366.y) * cbMtdParam._m0[9u].y) * ((_403 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _429 = ((((_295.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _366.z) * cbMtdParam._m0[9u].z) * ((_403 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _442 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _449 = cbMtdParam._m0[14u].y + _442.x;
    vec4 _462 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _470 = (_462.x * 2.0) + (-1.0);
    float _471 = (_462.y * 2.0) + (-1.0);
    float _472 = dot(vec2(_470, _471), vec2(_470, _471));
    float _3670 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))));
    float _480 = fma(_477, _223, fma(_471, _216, _470 * _202));
    float _483 = fma(_477, _224, fma(_471, _217, _470 * _203));
    float _486 = fma(_477, _225, fma(_471, _218, _470 * _204));
    float _490 = inversesqrt(dot(vec3(_480, _483, _486), vec3(_480, _483, _486)));
    float _491 = _490 * _480;
    float _492 = _490 * _483;
    float _494 = cbMtdParam._m0[14u].z + _462.z;
    vec4 _506 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _510 = cbMtdParam._m0[13u].w * _506.x;
    vec4 _523 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _532 = _393 - cbMtdParam._m0[12u].w;
    float _3681 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _542 = ((cbMtdParam._m0[14u].w * _523.x) + cbMtdParam._m0[14u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[14u].x));
    float _3697 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _555 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _556 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _566 = cbSceneParam._m0[86u].x * ((_555 / cbSceneParam._m0[86u].x) + (_491 * cbMtdParam._m0[15u].x));
    float _567 = cbSceneParam._m0[86u].y * ((_556 / cbSceneParam._m0[86u].y) + (_492 * cbMtdParam._m0[15u].x));
    float _574 = isnan(cbInstanceData._m0[8u].x) ? _566 : (isnan(_566) ? cbInstanceData._m0[8u].x : max(_566, cbInstanceData._m0[8u].x));
    float _575 = isnan(cbInstanceData._m0[8u].y) ? _567 : (isnan(_567) ? cbInstanceData._m0[8u].y : max(_567, cbInstanceData._m0[8u].y));
    vec4 _579 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _574 : (isnan(_574) ? cbInstanceData._m0[8u].z : min(_574, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _575 : (isnan(_575) ? cbInstanceData._m0[8u].w : min(_575, cbInstanceData._m0[8u].w))));
    float _591 = _490 * _486;
    float _3728 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _592 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _593 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _594 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3755 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _3766 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3777 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3788 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _598 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _614 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _633 = fma(_591, cbSceneParam._m0[5u].z, fma(_492, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _491));
    float _636 = fma(_591, cbSceneParam._m0[6u].z, fma(_492, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _491));
    float _639 = fma(_591, cbSceneParam._m0[7u].z, fma(_492, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _491));
    uint _652 = uint(roundEven(NORMAL.w)) * 13u;
    uint _654 = (_652 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _660 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * cbInstanceData._m0[_654].x;
    float _661 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * cbInstanceData._m0[_654].y;
    float _662 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_654].z;
    float _3799 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _666 = 1.0 - _598;
    float _667 = _663 * _666;
    float _668 = _664 * _666;
    float _669 = _665 * _666;
    float _674 = (_663 + (-0.039999999105930328369140625)) * _598;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _598;
    float _676 = (_665 + (-0.039999999105930328369140625)) * _598;
    float _677 = _674 + 0.039999999105930328369140625;
    float _679 = _675 + 0.039999999105930328369140625;
    float _680 = _676 + 0.039999999105930328369140625;
    vec4 _684 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _555, cbSceneParam._m0[86u].y * _556));
    float _687 = _684.x * TEXCOORD.z;
    float _688 = dot(vec3(_491, _492, _591), vec3(_390, _391, _392));
    float _691 = _688 * 2.0;
    float _695 = (_691 * _491) - _390;
    float _696 = (_691 * _492) - _391;
    float _697 = (_691 * _591) - _392;
    float _698 = dot(vec3(_390, _391, _392), vec3(_491, _492, _591));
    float _701 = abs(_698);
    float _3832 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _702 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _708 = sqrt(_593);
    float _720 = exp2((_708 * 5.0) * log2(1.0 - (_702 * 0.999000012874603271484375))) / (4.0 - (_708 * 3.0));
    float _726 = (1.0 - _720) * ((_708 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _727 = _720 * _708;
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1065;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _790 = fma(_763, cbModelParam._m0[26u].z, fma(_759, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _755));
        float _794 = fma(_763, cbModelParam._m0[27u].z, fma(_759, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _755));
        float _798 = fma(_763, cbModelParam._m0[28u].z, fma(_759, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _755));
        float _823 = _755 + _491;
        float _824 = _759 + _492;
        float _825 = _763 + _591;
        float _835 = fma(_825, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _823)) - _790;
        float _836 = fma(_825, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _823)) - _794;
        float _837 = fma(_825, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _823)) - _798;
        float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
        float _854 = ((_841 * _835) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_790 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_841 * _836) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_794 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_841 * _837) / cbModelParam._m0[34u].z) + ((((((_798 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        float _893 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_859.x + (-0.5));
        float _895 = _893 * (_859.y + (-0.5));
        float _896 = _893 * (_859.z + (-0.5));
        float _903 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_866.x + (-0.5));
        float _905 = _903 * (_866.y + (-0.5));
        float _906 = _903 * (_866.z + (-0.5));
        float _913 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_873.x + (-0.5));
        float _915 = _913 * (_873.y + (-0.5));
        float _916 = _913 * (_873.z + (-0.5));
        float _923 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_880.x + (-0.5));
        float _925 = _923 * (_880.y + (-0.5));
        float _926 = _923 * (_880.z + (-0.5));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = _894 * 0.5;
        float _931 = _904 * 0.5;
        float _932 = _914 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _947 = (dot(vec3(_491, _492, _591), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _957 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3880 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_959 + 1.0))) + _964) * _927;
        float _974 = _895 * 0.5;
        float _975 = _905 * 0.5;
        float _976 = _915 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_491, _492, _591), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3913 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1001 + 1.0))) + _1006) * _928;
        float _1016 = _896 * 0.5;
        float _1017 = _906 * 0.5;
        float _1018 = _916 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_491, _492, _591), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3946 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1043 + 1.0))) + _1048) * _929;
        _1065 = _896;
        _1067 = _895;
        _1068 = _894;
        _1069 = _906;
        _1070 = _905;
        _1071 = _904;
        _1072 = _916;
        _1073 = _915;
        _1074 = _914;
        _1075 = _929;
        _1076 = _928;
        _1077 = _927;
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
    }
    else
    {
        _1065 = _1066;
        _1067 = _1066;
        _1068 = _1066;
        _1069 = _1066;
        _1070 = _1066;
        _1071 = _1066;
        _1072 = _1066;
        _1073 = _1066;
        _1074 = _1066;
        _1075 = _1066;
        _1076 = _1066;
        _1077 = _1066;
        _1078 = 0.0;
        _1079 = 0.0;
        _1080 = 0.0;
    }
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1106 = fma(_763, cbModelParam._m0[30u].z, fma(_759, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _755));
        float _1110 = fma(_763, cbModelParam._m0[31u].z, fma(_759, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _755));
        float _1114 = fma(_763, cbModelParam._m0[32u].z, fma(_759, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _755));
        float _1137 = _755 + _491;
        float _1138 = _759 + _492;
        float _1139 = _763 + _591;
        float _1149 = fma(_1139, cbModelParam._m0[30u].z, fma(_1138, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137)) - _1106;
        float _1150 = fma(_1139, cbModelParam._m0[31u].z, fma(_1138, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137)) - _1110;
        float _1151 = fma(_1139, cbModelParam._m0[32u].z, fma(_1138, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137)) - _1114;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1106 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1110 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[35u].z) + ((((((_1114 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1205 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1172.x + (-0.5));
        float _1207 = _1205 * (_1172.y + (-0.5));
        float _1208 = _1205 * (_1172.z + (-0.5));
        float _1215 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1179.x + (-0.5));
        float _1217 = _1215 * (_1179.y + (-0.5));
        float _1218 = _1215 * (_1179.z + (-0.5));
        float _1225 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1186.x + (-0.5));
        float _1227 = _1225 * (_1186.y + (-0.5));
        float _1228 = _1225 * (_1186.z + (-0.5));
        float _1235 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1193.x + (-0.5));
        float _1237 = _1235 * (_1193.y + (-0.5));
        float _1238 = _1235 * (_1193.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_491, _492, _591), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4009 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1269 + 1.0))) + _1274) * _1239;
        float _1284 = _1207 * 0.5;
        float _1285 = _1217 * 0.5;
        float _1286 = _1227 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_491, _492, _591), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4042 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1311 + 1.0))) + _1316) * _1240;
        float _1326 = _1208 * 0.5;
        float _1327 = _1218 * 0.5;
        float _1328 = _1228 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_491, _492, _591), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4075 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1353 + 1.0))) + _1358) * _1241;
        _1375 = _1208;
        _1376 = _1207;
        _1377 = _1206;
        _1378 = _1218;
        _1379 = _1217;
        _1380 = _1216;
        _1381 = _1228;
        _1382 = _1227;
        _1383 = _1226;
        _1384 = _1241;
        _1385 = _1240;
        _1386 = _1239;
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1066;
        _1376 = _1066;
        _1377 = _1066;
        _1378 = _1066;
        _1379 = _1066;
        _1380 = _1066;
        _1381 = _1066;
        _1382 = _1066;
        _1383 = _1066;
        _1384 = _1066;
        _1385 = _1066;
        _1386 = _1066;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1078)) + _1078;
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1079)) + _1079;
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1080)) + _1080;
    float _1422 = fma(_1401, cbSceneParam._m0[89u].z, fma(_1400, cbSceneParam._m0[89u].y, _1399 * cbSceneParam._m0[89u].x));
    float _1425 = fma(_1401, cbSceneParam._m0[90u].z, fma(_1400, cbSceneParam._m0[90u].y, _1399 * cbSceneParam._m0[90u].x));
    float _1428 = fma(_1401, cbSceneParam._m0[91u].z, fma(_1400, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1399));
    float _1443 = _695 * 0.5;
    float _1444 = _696 * 0.5;
    float _1445 = _697 * 0.5;
    float _1446 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1449 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1452 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1486;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1459 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1065, _1069, _1072, _1075));
        float _1463 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1467 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1068, _1071, _1074, _1077));
        float _1474 = dot(vec4(cbModelParam._m0[39u]), vec4(_1443, _1444, _1445, 1.0));
        _1486 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1486 = 1.0;
    }
    float _1497;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1488 = dot(vec4(cbModelParam._m0[40u]), vec4(_1443, _1444, _1445, 1.0));
        _1497 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1497 = 1.0;
    }
    float _1501 = (_1497 * cbModelParam._m0[1u].x) + (_1486 * (1.0 - cbModelParam._m0[1u].x));
    float _1511 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _593);
    float _1512 = isnan(_1511) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1511 : min(cbModelParam._m0[25u].z, _1511));
    float _1592;
    float _1594;
    float _1596;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1559 = fma(_763, cbModelParam._m0[13u].z, fma(_759, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _755)) + cbModelParam._m0[13u].w;
        float _1563 = fma(_763, cbModelParam._m0[14u].z, fma(_759, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _755)) + cbModelParam._m0[14u].w;
        float _1567 = fma(_763, cbModelParam._m0[15u].z, fma(_759, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _755)) + cbModelParam._m0[15u].w;
        float _1570 = fma(_697, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695));
        float _1573 = fma(_697, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695));
        float _1576 = fma(_697, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695));
        float _1604;
        if (_1570 > 0.0)
        {
            _1604 = abs((1.0 - _1559) / _1570);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1559 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1604 = frontier_phi_16_14_ladder;
        }
        float _1779;
        if (_1573 > 0.0)
        {
            _1779 = abs((1.0 - _1563) / _1573);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1563 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1779 = frontier_phi_25_21_ladder;
        }
        float _2043;
        if (_1576 > 0.0)
        {
            _2043 = abs((1.0 - _1567) / _1576);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1567 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2043 = frontier_phi_37_32_ladder;
        }
        float _2045 = isnan(_1779) ? _1604 : (isnan(_1604) ? _1779 : min(_1604, _1779));
        float _2046 = isnan(_2043) ? _2045 : (isnan(_2045) ? _2043 : min(_2045, _2043));
        float _2050 = (_2046 * _1570) + _1559;
        float _2051 = (_2046 * _1573) + _1563;
        float _2052 = (_2046 * _1576) + _1567;
        float _2053 = _2046 * 9.9999997473787516355514526367188e-05;
        float _2055 = (-1.0) - _2053;
        float _2057 = _2053 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2052 > _2057) || ((_2052 < _2055) || ((_2051 > _2057) || ((_2051 < _2055) || ((_2050 < _2055) || (_2050 > _2057))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2206 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2052, cbModelParam._m0[9u].z, fma(_2051, cbModelParam._m0[9u].y, _2050 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2052, cbModelParam._m0[10u].z, fma(_2051, cbModelParam._m0[10u].y, _2050 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2052, cbModelParam._m0[11u].z, fma(_2051, cbModelParam._m0[11u].y, _2050 * cbModelParam._m0[11u].x))), _1512);
            frontier_phi_15_37_ladder = _2206.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2206.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2206.x * cbModelParam._m0[1u].y;
        }
        _1592 = frontier_phi_15_37_ladder_2;
        _1594 = frontier_phi_15_37_ladder_1;
        _1596 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_695, _696, _697), _1512);
        _1592 = _1580.x * cbModelParam._m0[1u].y;
        _1594 = _1580.y * cbModelParam._m0[1u].y;
        _1596 = _1580.z * cbModelParam._m0[1u].y;
    }
    float _1600 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _593);
    float _1601 = isnan(_1600) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1600 : min(cbModelParam._m0[25u].w, _1600));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1658 = fma(_763, cbModelParam._m0[21u].z, fma(_759, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _755)) + cbModelParam._m0[21u].w;
        float _1662 = fma(_763, cbModelParam._m0[22u].z, fma(_759, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _755)) + cbModelParam._m0[22u].w;
        float _1666 = fma(_763, cbModelParam._m0[23u].z, fma(_759, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _755)) + cbModelParam._m0[23u].w;
        float _1669 = fma(_697, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695));
        float _1672 = fma(_697, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695));
        float _1675 = fma(_697, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695));
        float _1784;
        if (_1669 > 0.0)
        {
            _1784 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1784 = frontier_phi_27_23_ladder;
        }
        float _2070;
        if (_1672 > 0.0)
        {
            _2070 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2070 = frontier_phi_39_34_ladder;
        }
        float _2400;
        if (_1675 > 0.0)
        {
            _2400 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_48_46_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_48_46_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_48_46_ladder = 5000.0;
            }
            _2400 = frontier_phi_48_46_ladder;
        }
        float _2402 = isnan(_2070) ? _1784 : (isnan(_1784) ? _2070 : min(_1784, _2070));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1669) + _1658;
        float _2408 = (_2403 * _1672) + _1662;
        float _2409 = (_2403 * _1675) + _1666;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2411 = (-1.0) - _2410;
        float _2413 = _2410 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2409 > _2413) || ((_2409 < _2411) || ((_2408 > _2413) || ((_2408 < _2411) || ((_2407 < _2411) || (_2407 > _2413))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2510 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2409, cbModelParam._m0[17u].z, fma(_2408, cbModelParam._m0[17u].y, _2407 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2409, cbModelParam._m0[18u].z, fma(_2408, cbModelParam._m0[18u].y, _2407 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2409, cbModelParam._m0[19u].z, fma(_2408, cbModelParam._m0[19u].y, _2407 * cbModelParam._m0[19u].x))), _1601);
            frontier_phi_24_48_ladder = _2510.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2510.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2510.x * cbModelParam._m0[1u].z;
        }
        _1694 = frontier_phi_24_48_ladder_2;
        _1696 = frontier_phi_24_48_ladder_1;
        _1698 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_695, _696, _697), _1601);
        _1694 = _1678.x * cbModelParam._m0[1u].z;
        _1696 = _1678.y * cbModelParam._m0[1u].z;
        _1698 = _1678.z * cbModelParam._m0[1u].z;
    }
    float _1711 = (((_726 * _677) + _727) * _687) * ((cbModelParam._m0[1u].w * (_1694 - _1592)) + _1592);
    float _1713 = (((_726 * _679) + _727) * _687) * ((cbModelParam._m0[1u].w * (_1696 - _1594)) + _1594);
    float _1715 = (((_726 * _680) + _727) * _687) * ((cbModelParam._m0[1u].w * (_1698 - _1596)) + _1596);
    float _1718 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1721 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1724 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, _1711 * cbSceneParam._m0[91u].x));
    float _1758 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1762 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1766 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1770 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1771 = _1758 / _1770;
    float _1772 = _1762 / _1770;
    float _1773 = _1766 / _1770;
    float _1920;
    float _1921;
    float _1922;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1800 = ((uint(_1773 > cbSceneParam._m0[59u].y) + uint(_1773 > cbSceneParam._m0[59u].x)) + uint(_1773 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1801 = _1800 + 43u;
        uint _1809 = _1800 + 44u;
        uint _1817 = _1800 + 45u;
        uint _1825 = _1800 + 46u;
        float _1836 = fma(_1770, cbSceneParam._m0[_1801].w, fma(_1766, cbSceneParam._m0[_1801].z, fma(_1762, cbSceneParam._m0[_1801].y, _1758 * cbSceneParam._m0[_1801].x)));
        float _1840 = fma(_1770, cbSceneParam._m0[_1809].w, fma(_1766, cbSceneParam._m0[_1809].z, fma(_1762, cbSceneParam._m0[_1809].y, _1758 * cbSceneParam._m0[_1809].x)));
        float _1848 = fma(_1770, cbSceneParam._m0[_1825].w, fma(_1766, cbSceneParam._m0[_1825].z, fma(_1762, cbSceneParam._m0[_1825].y, _1758 * cbSceneParam._m0[_1825].x)));
        float _1853 = cbSceneParam._m0[33u].z * _1848;
        float _1855 = cbSceneParam._m0[33u].w * _1848;
        float _1858 = fma(_1770, cbSceneParam._m0[_1817].w, fma(_1766, cbSceneParam._m0[_1817].z, fma(_1762, cbSceneParam._m0[_1817].y, _1758 * cbSceneParam._m0[_1817].x))) / _1848;
        float _1906 = (cbSceneParam._m0[33u].x - sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773))) * cbSceneParam._m0[33u].y;
        float _4201 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1913 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1853 + _1836) / _1848, (_1855 + _1840) / _1848), _1858), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1855 + _1836) / _1848, (_1840 - _1853) / _1848), _1858), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1836 - _1853) / _1848, (_1840 - _1855) / _1848), _1858), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1836 - _1855) / _1848, (_1853 + _1840) / _1848), _1858), 0.0)).x), vec4(0.25)));
        _1920 = 1.0 - (_1913 * cbSceneParam._m0[34u].x);
        _1921 = 1.0 - (_1913 * cbSceneParam._m0[34u].y);
        _1922 = 1.0 - (_1913 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1920 = 1.0;
        _1921 = 1.0;
        _1922 = 1.0;
    }
    float _1986;
    float _1988;
    float _1990;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1974 = fma(_1770, cbSceneParam._m0[63u].w, fma(_1766, cbSceneParam._m0[63u].z, fma(_1762, cbSceneParam._m0[63u].y, _1758 * cbSceneParam._m0[63u].x)));
        float _1975 = fma(_1770, cbSceneParam._m0[60u].w, fma(_1766, cbSceneParam._m0[60u].z, fma(_1762, cbSceneParam._m0[60u].y, _1758 * cbSceneParam._m0[60u].x))) / _1974;
        float _1976 = fma(_1770, cbSceneParam._m0[61u].w, fma(_1766, cbSceneParam._m0[61u].z, fma(_1762, cbSceneParam._m0[61u].y, _1758 * cbSceneParam._m0[61u].x))) / _1974;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1975 >= cbSceneParam._m0[64u].x) && (_1976 >= cbSceneParam._m0[64u].y)) && (_1975 <= cbSceneParam._m0[64u].z)) && (_1976 <= cbSceneParam._m0[64u].w))
        {
            float _2083 = fma(_1770, cbSceneParam._m0[62u].w, fma(_1766, cbSceneParam._m0[62u].z, fma(_1762, cbSceneParam._m0[62u].y, _1758 * cbSceneParam._m0[62u].x))) / _1974;
            float _2087 = isnan(cbSceneParam._m0[41u].w) ? _2083 : (isnan(_2083) ? cbSceneParam._m0[41u].w : max(_2083, cbSceneParam._m0[41u].w));
            float _2130 = (cbSceneParam._m0[33u].x - sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773))) * cbSceneParam._m0[33u].y;
            float _4217 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
            float _2137 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1975, cbSceneParam._m0[33u].w + _1976), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1975, _1976 - cbSceneParam._m0[33u].z), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1975 - cbSceneParam._m0[33u].z, _1976 - cbSceneParam._m0[33u].w), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1975 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1976), _2087), 0.0)).x), vec4(0.25)));
            float _2141 = 1.0 - (_2137 * cbSceneParam._m0[34u].x);
            float _2142 = 1.0 - (_2137 * cbSceneParam._m0[34u].y);
            float _2143 = 1.0 - (_2137 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2143) ? _1922 : (isnan(_1922) ? _2143 : min(_1922, _2143));
            frontier_phi_36_35_ladder_1 = isnan(_2142) ? _1921 : (isnan(_1921) ? _2142 : min(_1921, _2142));
            frontier_phi_36_35_ladder_2 = isnan(_2141) ? _1920 : (isnan(_1920) ? _2141 : min(_1920, _2141));
        }
        else
        {
            frontier_phi_36_35_ladder = _1922;
            frontier_phi_36_35_ladder_1 = _1921;
            frontier_phi_36_35_ladder_2 = _1920;
        }
        _1986 = frontier_phi_36_35_ladder_2;
        _1988 = frontier_phi_36_35_ladder_1;
        _1990 = frontier_phi_36_35_ladder;
    }
    else
    {
        _1986 = _1920;
        _1988 = _1921;
        _1990 = _1922;
    }
    uvec4 _1995 = floatBitsToUint(cbInstanceData._m0[_652 + 5u]);
    uint _1997 = _1995.x * 14u;
    uint _1998 = _1997 + 13u;
    float _2003 = _687 + (-1.0);
    float _2006 = (cbLight._m0[_1998].x * _2003) + 1.0;
    float _2007 = (cbLight._m0[_1998].y * _2003) + 1.0;
    uint _2009 = _1997 + 4u;
    float _2020 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_491, _492, _591));
    float _2023 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
    float _2024 = cbLight._m0[_2009].x * _1986;
    float _2025 = cbLight._m0[_2009].y * _1988;
    float _2026 = cbLight._m0[_2009].z * _1990;
    uint _2027 = _1997 + 5u;
    uint _2033 = _1997 | 1u;
    float _2039 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_491, _492, _591));
    float _2042 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
    float _2215;
    float _2216;
    float _2217;
    if (_594 == 0.0)
    {
        float _4253 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _4264 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2152 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 0.3183098733425140380859375;
        float _2154 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * 0.3183098733425140380859375;
        _2215 = ((cbLight._m0[_2027].x * _2042) * _2154) + ((_2024 * _2023) * _2152);
        _2216 = ((_2042 * cbLight._m0[_2027].y) * _2154) + ((_2025 * _2023) * _2152);
        _2217 = ((_2042 * cbLight._m0[_2027].z) * _2154) + ((_2026 * _2023) * _2152);
    }
    else
    {
        float _2164 = _2020 + _594;
        float _2167 = (_594 * 2.0) + 1.0;
        float _2168 = (isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))) / _2167;
        float _2175 = _2039 + _594;
        float _2177 = (isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) / _2167;
        _2215 = (((_2177 * cbLight._m0[_2027].x) * _2042) + ((_2024 * _2168) * _2023)) * 0.3183098733425140380859375;
        _2216 = (((_2177 * cbLight._m0[_2027].y) * _2042) + ((_2025 * _2168) * _2023)) * 0.3183098733425140380859375;
        _2217 = (((_2177 * cbLight._m0[_2027].z) * _2042) + ((_2026 * _2168) * _2023)) * 0.3183098733425140380859375;
    }
    uint _2221 = _1997 + 8u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _593) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_1997].x + _390;
    float _2240 = cbLight._m0[_1997].y + _391;
    float _2241 = cbLight._m0[_1997].z + _392;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_491, _492, _591), vec3(cbLight._m0[_1997].xyz));
    float _4285 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _4296 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _2253 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2254 = dot(vec3(_491, _492, _591), vec3(_2246, _2247, _2248));
    float _4307 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2258 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2246, _2247, _2248));
    float _4318 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2262 = _2238 * _2238;
    float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
    float _2274 = exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0);
    float _2275 = 0.959999978542327880859375 - _674;
    float _2277 = 0.959999978542327880859375 - _675;
    float _2278 = 0.959999978542327880859375 - _676;
    float _2285 = 1.0 - _2238;
    float _2296 = (0.5 / (((_2253 * ((_2252 * _2285) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2285) + _2238) * _2252))) * _2252;
    float _4329 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2298 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
    uint _2314 = _1997 + 9u;
    float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _593) * 0.949999988079071044921875);
    float _2329 = _2328 * _2328;
    float _2330 = cbLight._m0[_2033].x + _390;
    float _2331 = cbLight._m0[_2033].y + _391;
    float _2332 = cbLight._m0[_2033].z + _392;
    float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
    float _2337 = _2336 * _2330;
    float _2338 = _2336 * _2331;
    float _2339 = _2336 * _2332;
    float _2340 = dot(vec3(_491, _492, _591), vec3(cbLight._m0[_2033].xyz));
    float _4340 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2344 = dot(vec3(_491, _492, _591), vec3(_2337, _2338, _2339));
    float _4351 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2348 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2337, _2338, _2339));
    float _4362 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2352 = _2329 * _2329;
    float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
    float _2363 = exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0);
    float _2370 = 1.0 - _2329;
    float _2380 = (0.5 / (((_2253 * ((_2343 * _2370) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2370) + _2329) * _2343))) * _2343;
    float _4373 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2382 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
    float _2392 = (((((_2363 * _2275) + _677) * cbLight._m0[_2314].x) * _2382) * _2042) + ((((cbLight._m0[_2221].x * _1986) * ((_2274 * _2275) + _677)) * _2298) * _2023);
    float _2393 = (((((_2363 * _2277) + _679) * cbLight._m0[_2314].y) * _2382) * _2042) + ((((cbLight._m0[_2221].y * _1988) * ((_2274 * _2277) + _679)) * _2298) * _2023);
    float _2394 = (((((_2363 * _2278) + _680) * cbLight._m0[_2314].z) * _2382) * _2042) + ((((cbLight._m0[_2221].z * _1990) * ((_2274 * _2278) + _680)) * _2298) * _2023);
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    if (_1995.y == 0u)
    {
        uvec4 _2437 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2438 = _2437.x;
        uint _2449 = uint((float(_2437.y) * floor(float(uint(cbSceneParam._m0[85u].y * _556) / _2438))) + floor(float(uint(cbSceneParam._m0[85u].x * _555) / _2438)));
        float _2459 = (log2(_1773 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2460 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        uint _2463 = uint(isnan(14.0) ? _2460 : (isnan(_2460) ? 14.0 : min(_2460, 14.0)));
        uvec4 _2468 = texelFetch(g_lightClusterGridBuffer, int(((_2463 << 2u) + (_2449 << 6u)) >> 2u));
        uint _2469 = _2468.x;
        uint _2470 = _2437.z;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        if (((((1u << ((_2470 >> 4u) & 15u)) + 4294967295u) & _2469) == 0u) || ((_2470 & 240u) == 0u))
        {
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
        }
        else
        {
            float _2516;
            float _2518;
            float _2520;
            float _2522;
            float _2524;
            float _2526;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            uint _2720 = 0u;
            uint _2729;
            bool _2730;
            for (;;)
            {
                _2729 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2720 << 2u)) >> 2u)).x;
                _2730 = _2729 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2730)
                {
                    frontier_phi_63_pred = _2714;
                    frontier_phi_63_pred_1 = _2715;
                    frontier_phi_63_pred_2 = _2719;
                    frontier_phi_63_pred_3 = _2718;
                    frontier_phi_63_pred_4 = _2717;
                    frontier_phi_63_pred_5 = _2716;
                }
                else
                {
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    uint _2896;
                    _2890 = _2714;
                    _2891 = _2715;
                    _2892 = _2716;
                    _2893 = _2717;
                    _2894 = _2718;
                    _2895 = _2719;
                    _2896 = _2729;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    for (;;)
                    {
                        uint _2900 = uint(findLSB(_2896)) + (_2720 << 5u);
                        uint _2897 = (_2896 + 4294967295u) & _2896;
                        uint _2902 = _2900 * 48u;
                        vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2922 = (_2900 * 48u) + 4u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 3u)).x));
                        float _2936 = _2935.x;
                        float _2937 = _2935.y;
                        float _2938 = _2935.z;
                        uint _2941 = (_2900 * 48u) + 8u;
                        vec3 _2952 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x));
                        uint _2957 = (_2900 * 48u) + 12u;
                        vec2 _2965 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x));
                        float _2971 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
                        float _2972 = _2971 * _1771;
                        float _2973 = _2971 * _1772;
                        float _2974 = _2971 * _1773;
                        float _2975 = _2916.x - _1771;
                        float _2976 = _2916.y - _1772;
                        float _2977 = _2916.z - _1773;
                        float _2978 = dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977));
                        float _2981 = inversesqrt(_2978);
                        float _2982 = _2981 * _2975;
                        float _2983 = _2981 * _2976;
                        float _2984 = _2981 * _2977;
                        float _2985 = dot(vec3(_633, _636, _639), vec3(_2982, _2983, _2984));
                        float _2990 = 1.0 - (_2978 * _2916.w);
                        float _4394 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2991 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _2992 = sqrt(_2978) * _2935.w;
                        float _2995 = 1.39999997615814208984375 / (_2992 + 1.39999997615814208984375);
                        float _2996 = _2995 * _2995;
                        float _2997 = 1.0 - _2996;
                        float _2999 = (_2997 * _2997) * _594;
                        float _3002 = ((_2997 * _2985) + _2996) + _2999;
                        float _3007 = _2992 * _2992;
                        float _3012 = ((isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0))) * _2991) / (((_2999 * 2.0) + 1.0) * ((_3007 * 0.699999988079071044921875) + 1.0));
                        float _3016 = dot(vec3(_2982, _2983, _2984), vec3(_2972, _2973, _2974));
                        float _4410 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3023 = dot(vec3((-0.0) - _2972, (-0.0) - _2973, (-0.0) - _2974), vec3(_633, _636, _639)) + 1.0;
                        float _3025 = (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * 0.5;
                        float _3032 = ((_3025 * _3025) * _2965.x) * exp2((_2965.y * 32.0) * log2(isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))));
                        float _3034 = _594 / (_594 + 1.0);
                        float _3050 = (-0.0) - _1771;
                        float _3051 = (-0.0) - _1772;
                        float _3052 = (-0.0) - _1773;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3066 = exp2(log2(1.0 / ((_3007 * 3.5) + 5.0)) * 0.25);
                        float _3067 = 1.0 - _708;
                        float _3074 = sqrt(1.0 - ((1.0 - (_3067 * _3067)) * (1.0 - (_3066 * _3066))));
                        float _3075 = _3074 * _3074;
                        float _3076 = _3075 * _3075;
                        float _3077 = _3057 + _2982;
                        float _3078 = _3058 + _2983;
                        float _3079 = _3059 + _2984;
                        float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                        float _3087 = dot(vec3(_633, _636, _639), vec3(_3057, _3058, _3059));
                        float _4426 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3090 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3091 = dot(vec3(_633, _636, _639), vec3(_3083 * _3077, _3083 * _3078, _3083 * _3079));
                        float _4437 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3094 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3098 = ((_3094 * _3094) * (_3076 + (-1.0))) + 1.0;
                        float _3099 = _2995 * _3075;
                        float _3100 = _3099 * _3099;
                        float _3103 = ((1.0 - _3100) * _2985) + _3100;
                        float _4448 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3104 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3105 = 1.0 - _3075;
                        float _3115 = (0.5 / (((_3104 * ((_3090 * _3105) + _3075)) + 9.9999999392252902907785028219223e-09) + (((_3104 * _3105) + _3075) * _3090))) * _3104;
                        float _4459 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3126 = (((_3076 * 3.1415927410125732421875) * (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) / ((_3098 * _3098) * ((_3007 * 2.1991131305694580078125) + 3.141590118408203125))) * _2991;
                        _2824 = (((((_2936 * 0.3183098733425140380859375) * _3034) * _3032) + _2936) * _3012) + _2893;
                        _2825 = (((((_2937 * 0.3183098733425140380859375) * _3034) * _3032) + _2937) * _3012) + _2894;
                        _2826 = (((((_2938 * 0.3183098733425140380859375) * _3034) * _3032) + _2938) * _3012) + _2895;
                        _2821 = (_3126 * _2952.x) + _2890;
                        _2822 = (_3126 * _2952.y) + _2891;
                        _2823 = (_3126 * _2952.z) + _2892;
                        if (_2897 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2890 = _2821;
                            _2891 = _2822;
                            _2892 = _2823;
                            _2893 = _2824;
                            _2894 = _2825;
                            _2895 = _2826;
                            _2896 = _2897;
                        }
                    }
                    frontier_phi_63_pred = _2821;
                    frontier_phi_63_pred_1 = _2822;
                    frontier_phi_63_pred_2 = _2826;
                    frontier_phi_63_pred_3 = _2825;
                    frontier_phi_63_pred_4 = _2824;
                    frontier_phi_63_pred_5 = _2823;
                }
                _2516 = frontier_phi_63_pred;
                _2518 = frontier_phi_63_pred_1;
                _2526 = frontier_phi_63_pred_2;
                _2524 = frontier_phi_63_pred_3;
                _2522 = frontier_phi_63_pred_4;
                _2520 = frontier_phi_63_pred_5;
                uint _2721 = _2720 + 1u;
                if (_2721 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2714 = _2516;
                    _2715 = _2518;
                    _2716 = _2520;
                    _2717 = _2522;
                    _2718 = _2524;
                    _2719 = _2526;
                    _2720 = _2721;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
        }
        uvec4 _2529 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2530 = _2529.z;
        uint _2532 = (_2530 >> 8u) & 15u;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        if (((4294967295u << _2532) & _2469) == 0u)
        {
            _2682 = _2515;
            _2684 = _2517;
            _2686 = _2519;
            _2688 = _2521;
            _2690 = _2523;
            _2692 = _2525;
        }
        else
        {
            float _2707 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
            float _2708 = _2707 * _1771;
            float _2709 = _2707 * _1772;
            float _2710 = _2707 * _1773;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2532 < ((_2530 >> 12u) & 15u))
            {
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2873 = _2515;
                float _2874 = _2517;
                float _2875 = _2519;
                float _2876 = _2521;
                float _2877 = _2523;
                float _2878 = _2525;
                uint _2879 = _2532;
                uint _2888;
                bool _2889;
                for (;;)
                {
                    _2888 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2879 << 2u)) >> 2u)).x;
                    _2889 = _2888 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2889)
                    {
                        frontier_phi_71_pred = _2873;
                        frontier_phi_71_pred_1 = _2878;
                        frontier_phi_71_pred_2 = _2877;
                        frontier_phi_71_pred_3 = _2876;
                        frontier_phi_71_pred_4 = _2875;
                        frontier_phi_71_pred_5 = _2874;
                    }
                    else
                    {
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3182 = _2873;
                        float _3183 = _2874;
                        float _3184 = _2875;
                        float _3185 = _2876;
                        float _3186 = _2877;
                        float _3187 = _2878;
                        uint _3188 = _2888;
                        uint _3189;
                        vec4 _3214;
                        float _3215;
                        vec4 _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        vec3 _3245;
                        vec2 _3254;
                        vec4 _3269;
                        vec4 _3285;
                        float _3332;
                        bool _3333;
                        for (;;)
                        {
                            uint _3199 = ((_2879 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3188));
                            _3189 = (_3188 + 4294967295u) & _3188;
                            uint _3201 = _3199 * 40u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            _3215 = _3214.w;
                            uint _3217 = (_3199 * 40u) + 4u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            _3231 = _3230.x;
                            _3232 = _3230.y;
                            _3233 = _3230.z;
                            uint _3235 = (_3199 * 40u) + 8u;
                            _3245 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x));
                            uint _3247 = (_3199 * 40u) + 12u;
                            _3254 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x));
                            uint _3256 = (_3199 * 40u) + 16u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3272 = (_3199 * 40u) + 20u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3288 = (_3199 * 40u) + 24u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3307 = (_3199 * 40u) + 28u;
                            vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3332 = fma(_1773, _3320.z, fma(_1772, _3320.y, _3320.x * _1771)) + _3320.w;
                            _3333 = !((fma(_1773, _3301.z, fma(_1772, _3301.y, _3301.x * _1771)) + _3301.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3333)
                            {
                                float _3359 = _3214.x - _1771;
                                float _3360 = _3214.y - _1772;
                                float _3361 = _3214.z - _1773;
                                float _3362 = dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361));
                                float _3365 = inversesqrt(_3362);
                                float _3366 = _3365 * _3359;
                                float _3367 = _3365 * _3360;
                                float _3368 = _3365 * _3361;
                                float _3372 = 1.0 - (_3362 / (_3215 * _3215));
                                float _4470 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3377 = sqrt(_3362) * _3230.w;
                                float _3379 = 1.39999997615814208984375 / (_3377 + 1.39999997615814208984375);
                                float _3380 = _3379 * _3379;
                                float _3381 = 1.0 - _3380;
                                float _3383 = (_3381 * _3381) * _594;
                                float _3386 = ((_3381 * dot(vec3(_3366, _3367, _3368), vec3(_633, _636, _639))) + _3380) + _3383;
                                float _3391 = _3377 * _3377;
                                float _3396 = (fma(_1773, _3269.z, fma(_1772, _3269.y, _3269.x * _1771)) + _3269.w) / _3332;
                                float _3397 = (fma(_1773, _3285.z, fma(_1772, _3285.y, _3285.x * _1771)) + _3285.w) / _3332;
                                float _3401 = 1.0 - dot(vec2(_3396, _3397), vec2(_3396, _3397));
                                float _4486 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3402 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3403 = _3402 * (((isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0))) * _3373) / (((_3383 * 2.0) + 1.0) * ((_3391 * 0.699999988079071044921875) + 1.0)));
                                float _3404 = (-0.0) - _2708;
                                float _3405 = (-0.0) - _2709;
                                float _3406 = (-0.0) - _2710;
                                float _3407 = dot(vec3(_3366, _3367, _3368), vec3(_2708, _2709, _2710));
                                float _4497 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3414 = dot(vec3(_3404, _3405, _3406), vec3(_633, _636, _639)) + 1.0;
                                float _3416 = (isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0))) * 0.5;
                                float _3423 = ((_3416 * _3416) * _3254.x) * exp2((_3254.y * 32.0) * log2(isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))));
                                float _3425 = _594 / (_594 + 1.0);
                                float _3446 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _708;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3366 - _2708;
                                float _3458 = _3367 - _2709;
                                float _3459 = _3368 - _2710;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_633, _636, _639), vec3(_3404, _3405, _3406));
                                float _4513 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3471 = dot(vec3(_633, _636, _639), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4524 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3379 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_633, _636, _639), vec3(_3366, _3367, _3368))) + _3480;
                                float _4535 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4546 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3402 * _3373) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3478 * _3478) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = ((((_3233 * 0.3183098733425140380859375) * _3425) * _3423) + _3233) * _3403;
                                frontier_phi_77_pred_1 = ((((_3232 * 0.3183098733425140380859375) * _3425) * _3423) + _3232) * _3403;
                                frontier_phi_77_pred_2 = ((((_3231 * 0.3183098733425140380859375) * _3425) * _3423) + _3231) * _3403;
                                frontier_phi_77_pred_3 = _3508 * _3245.z;
                                frontier_phi_77_pred_4 = _3508 * _3245.y;
                                frontier_phi_77_pred_5 = _3508 * _3245.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3517 = frontier_phi_77_pred;
                            _3516 = frontier_phi_77_pred_1;
                            _3515 = frontier_phi_77_pred_2;
                            _3514 = frontier_phi_77_pred_3;
                            _3513 = frontier_phi_77_pred_4;
                            _3512 = frontier_phi_77_pred_5;
                            _3172 = _3515 + _3185;
                            _3173 = _3516 + _3186;
                            _3174 = _3517 + _3187;
                            _3169 = _3512 + _3182;
                            _3170 = _3513 + _3183;
                            _3171 = _3514 + _3184;
                            if (_3189 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3189;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _3169;
                        frontier_phi_71_pred_1 = _3174;
                        frontier_phi_71_pred_2 = _3173;
                        frontier_phi_71_pred_3 = _3172;
                        frontier_phi_71_pred_4 = _3171;
                        frontier_phi_71_pred_5 = _3170;
                    }
                    _2683 = frontier_phi_71_pred;
                    _2693 = frontier_phi_71_pred_1;
                    _2691 = frontier_phi_71_pred_2;
                    _2689 = frontier_phi_71_pred_3;
                    _2687 = frontier_phi_71_pred_4;
                    _2685 = frontier_phi_71_pred_5;
                    uint _2880 = _2879 + 1u;
                    if (_2880 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2873 = _2683;
                        _2874 = _2685;
                        _2875 = _2687;
                        _2876 = _2689;
                        _2877 = _2691;
                        _2878 = _2693;
                        _2879 = _2880;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2687;
                frontier_phi_57_58_ladder_1 = _2693;
                frontier_phi_57_58_ladder_2 = _2691;
                frontier_phi_57_58_ladder_3 = _2689;
                frontier_phi_57_58_ladder_4 = _2685;
                frontier_phi_57_58_ladder_5 = _2683;
            }
            else
            {
                frontier_phi_57_58_ladder = _2519;
                frontier_phi_57_58_ladder_1 = _2525;
                frontier_phi_57_58_ladder_2 = _2523;
                frontier_phi_57_58_ladder_3 = _2521;
                frontier_phi_57_58_ladder_4 = _2517;
                frontier_phi_57_58_ladder_5 = _2515;
            }
            _2682 = frontier_phi_57_58_ladder_5;
            _2684 = frontier_phi_57_58_ladder_4;
            _2686 = frontier_phi_57_58_ladder;
            _2688 = frontier_phi_57_58_ladder_3;
            _2690 = frontier_phi_57_58_ladder_2;
            _2692 = frontier_phi_57_58_ladder_1;
        }
        float _2697 = isnan(1.0) ? _687 : (isnan(_687) ? 1.0 : min(_687, 1.0));
        _2481 = (_2697 * _2688) + _2215;
        _2483 = (_2697 * _2690) + _2216;
        _2485 = (_2697 * _2692) + _2217;
        _2487 = ((_2682 * _677) * _2697) + _2392;
        _2489 = ((_2684 * _679) * _2697) + _2393;
        _2491 = ((_2686 * _680) * _2697) + _2394;
    }
    else
    {
        _2481 = _2215;
        _2483 = _2216;
        _2485 = _2217;
        _2487 = _2392;
        _2489 = _2393;
        _2491 = _2394;
    }
    float _2603;
    float _2604;
    float _2605;
    if (_594 > 0.0)
    {
        uint _2536 = _1997 + 4u;
        float _2542 = (-0.0) - _390;
        float _2543 = (-0.0) - _391;
        float _2544 = (-0.0) - _392;
        float _2545 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2542, _2543, _2544));
        float _4562 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _698 + 1.0;
        float _2551 = (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0))) * 0.5;
        float _2556 = _2551 * _2551;
        float _2557 = _2556 * exp2(log2(isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * 32.0);
        float _2559 = _594 / (_594 + 1.0);
        float _2560 = isnan(_2006) ? 1.0 : (isnan(1.0) ? _2006 : min(1.0, _2006));
        uint _2573 = _1997 + 5u;
        float _2579 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2542, _2543, _2544));
        float _4583 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2586 = _2556 * exp2(log2(isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * 32.0);
        float _2587 = isnan(_2007) ? 1.0 : (isnan(1.0) ? _2007 : min(1.0, _2007));
        _2603 = ((((_2586 * cbLight._m0[_2573].x) * _2559) * _2587) + ((((cbLight._m0[_2536].x * _1986) * _2557) * _2559) * _2560)) * 0.3183098733425140380859375;
        _2604 = ((((_2586 * cbLight._m0[_2573].y) * _2559) * _2587) + ((((cbLight._m0[_2536].y * _1988) * _2557) * _2559) * _2560)) * 0.3183098733425140380859375;
        _2605 = ((((_2586 * cbLight._m0[_2573].z) * _2559) * _2587) + ((((cbLight._m0[_2536].z * _1990) * _2557) * _2559) * _2560)) * 0.3183098733425140380859375;
    }
    else
    {
        _2603 = 0.0;
        _2604 = 0.0;
        _2605 = 0.0;
    }
    float _4599 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4610 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4621 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4632 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _2611 = 0.959999978542327880859375 - (_598 * 0.959999978542327880859375);
    float _2622 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * ((_2481 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _687)) + _2603);
    float _2623 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * ((_2483 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _687)) + _2604);
    float _2624 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * ((_2485 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _687)) + _2605);
    float _2628 = _2611 - (exp2(log2(1.0 - _702) * 5.0) * _2611);
    float _2648 = cbInstanceData._m0[_652 + 6u].w * (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)));
    float _2653 = _555 / cbSceneParam._m0[86u].x;
    float _2654 = _556 / cbSceneParam._m0[86u].y;
    vec4 _2668 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, (log2((isnan(cbSceneParam._m0[77u].w) ? _614 : (isnan(_614) ? cbSceneParam._m0[77u].w : min(_614, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2670 = _2668.x;
    float _2671 = _2668.y;
    float _2672 = _2668.z;
    float _2673 = _2668.w;
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    if (_614 > cbSceneParam._m0[78u].w)
    {
        float _2735 = isnan(_614) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _614 : min(cbSceneParam._m0[80u].w, _614));
        float _2736 = _2735 / _614;
        float _2747 = _2736 * _280;
        float _2748 = _281 * _2736;
        float _2749 = (-0.0) - _2748;
        float _2750 = _2736 * _282;
        float _2752 = (cbSceneParam._m0[77u].w * _2749) / _2735;
        float _2753 = _2752 + cbSceneParam._m0[79u].w;
        float _2754 = cbSceneParam._m0[79u].w - _2748;
        float _2760 = sqrt(((_2747 * _2747) + (_2748 * _2748)) + (_2750 * _2750));
        float _2763 = (1.0 - (cbSceneParam._m0[77u].w / _2735)) * _2760;
        float _2768 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2770 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3131;
        if (abs((_2749 - _2752) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3131 = ((((_2753 > 0.0) ? exp2(_2768 * _2753) : (2.0 - exp2(_2770 * _2753))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2763;
        }
        else
        {
            float _2846 = 1.0 / cbSceneParam._m0[80u].x;
            float _2847 = isnan(_2754) ? _2753 : (isnan(_2753) ? _2754 : max(_2753, _2754));
            float _2848 = isnan(_2754) ? _2753 : (isnan(_2753) ? _2754 : min(_2753, _2754));
            float _2857 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : min(_2847, 0.0));
            float _2858 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : min(_2848, 0.0));
            _3131 = ((abs(_2760 / _2749) * cbSceneParam._m0[80u].y) * ((((_2857 - _2858) * 2.0) - ((exp2(_2768 * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0)))) - exp2(_2768 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))))) * _2846)) - ((exp2(_2770 * _2857) - exp2(_2770 * _2858)) * _2846))) + (_2763 * cbSceneParam._m0[80u].z);
        }
        vec4 _3133 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, 1.0), 0.0);
        float _3142 = exp2((_3131 * (-1.44269502162933349609375)) * (1.0 - _3133.w));
        float _3143 = log2(_3142);
        float _3159 = log2(_2673);
        _2772 = (exp2(_3159 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].x)) * _3133.x) / cbSceneParam._m0[78u].x)) + _2670;
        _2774 = (exp2(_3159 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].y)) * _3133.y) / cbSceneParam._m0[78u].y)) + _2671;
        _2776 = (exp2(_3159 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].z)) * _3133.z) / cbSceneParam._m0[78u].z)) + _2672;
        _2778 = _3142 * _2673;
    }
    else
    {
        _2772 = _2670;
        _2774 = _2671;
        _2776 = _2672;
        _2778 = _2673;
    }
    float _2789 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2790 = _2789 == 3.0;
    float _2791 = log2(_2778);
    float _2798 = exp2(_2791 * cbSceneParam._m0[78u].x) * ((_2622 + ((_2487 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1501)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _579.x) * _2628) - _2622) * _543));
    float _2799 = exp2(_2791 * cbSceneParam._m0[78u].y) * ((_2623 + ((_2489 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1501)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _579.y) * _2628) - _2623) * _543));
    float _2800 = exp2(_2791 * cbSceneParam._m0[78u].z) * ((_2624 + ((_2491 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1501)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _579.z) * _2628) - _2624) * _543));
    float _2809 = (_2789 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2809 * (_2790 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2772)));
    SV_Target.y = _2809 * (_2790 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2774)));
    SV_Target.z = _2809 * (_2790 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2776)));
    SV_Target.w = _2648;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2648;
}


