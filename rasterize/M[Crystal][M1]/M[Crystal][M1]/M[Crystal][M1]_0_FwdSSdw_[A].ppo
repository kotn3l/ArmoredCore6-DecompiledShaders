#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Crystal_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_Crystal_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1119;
float _3502;
float _3503;
float _3504;
float _3505;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _204 = _203 * _196;
    float _205 = _203 * _197;
    float _206 = _203 * _198;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = _217 * TANGENT.x;
    float _219 = _217 * TANGENT.y;
    float _220 = _217 * TANGENT.z;
    float _225;
    float _226;
    float _227;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
    }
    else
    {
        _225 = _211;
        _226 = _212;
        _227 = _213;
    }
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _297 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _303 = _297.w;
    float _314 = dot(vec3(_282, _283, _284), vec3(_204, _205, _206));
    float _317 = dot(vec3(_282, _283, _284), vec3(_218, _219, _220));
    float _320 = dot(vec3(_282, _283, _284), vec3(_225, _226, _227));
    float _326 = inversesqrt(dot(vec3(_314, _317, _320), vec3(_314, _317, _320)));
    float _348 = dot(vec4(texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _368 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_314 * cbMtdParam._m0[12u].x) * _326) * _348) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_317 * cbMtdParam._m0[12u].x) * _326) * _348) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _391 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _392 = _391 * _282;
    float _393 = _391 * _283;
    float _394 = _391 * _284;
    float _395 = dot(vec4(_392, _393, _394, 0.0), vec4(_225, _226, _227, 0.0));
    float _398 = _395 - cbMtdParam._m0[13u].x;
    float _3514 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _405 = exp2(log2(1.0 - (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _421 = ((((_297.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _368.x) * cbMtdParam._m0[9u].x) * ((_405 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _426 = ((((_297.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _368.y) * cbMtdParam._m0[9u].y) * ((_405 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _431 = ((((_297.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _368.z) * cbMtdParam._m0[9u].z) * ((_405 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _444 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _451 = cbMtdParam._m0[14u].y + _444.x;
    vec4 _464 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _472 = (_464.x * 2.0) + (-1.0);
    float _473 = (_464.y * 2.0) + (-1.0);
    float _474 = dot(vec2(_472, _473), vec2(_472, _473));
    float _3530 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))));
    float _482 = fma(_479, _225, fma(_473, _218, _472 * _204));
    float _485 = fma(_479, _226, fma(_473, _219, _472 * _205));
    float _488 = fma(_479, _227, fma(_473, _220, _472 * _206));
    float _492 = inversesqrt(dot(vec3(_482, _485, _488), vec3(_482, _485, _488)));
    float _493 = _492 * _482;
    float _494 = _492 * _485;
    float _496 = cbMtdParam._m0[14u].z + _464.z;
    vec4 _508 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _512 = cbMtdParam._m0[13u].w * _508.x;
    vec4 _525 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _534 = _395 - cbMtdParam._m0[12u].w;
    float _3541 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _544 = ((cbMtdParam._m0[14u].w * _525.x) + cbMtdParam._m0[14u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[14u].x));
    float _3557 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _568 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (_493 * cbMtdParam._m0[15u].x));
    float _569 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (_494 * cbMtdParam._m0[15u].x));
    float _576 = isnan(cbInstanceData._m0[8u].x) ? _568 : (isnan(_568) ? cbInstanceData._m0[8u].x : max(_568, cbInstanceData._m0[8u].x));
    float _577 = isnan(cbInstanceData._m0[8u].y) ? _569 : (isnan(_569) ? cbInstanceData._m0[8u].y : max(_569, cbInstanceData._m0[8u].y));
    vec4 _581 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _576 : (isnan(_576) ? cbInstanceData._m0[8u].z : min(_576, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _577 : (isnan(_577) ? cbInstanceData._m0[8u].w : min(_577, cbInstanceData._m0[8u].w))));
    float _593 = _492 * _488;
    float _3588 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _594 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _595 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _596 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3615 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _3626 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3637 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3648 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _600 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _616 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _621 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _623 = _621.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _798 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _804 = (cbMatDynParam._m0[5u].x * _798) + cbMatDynParam._m0[5u].y;
        float _3659 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _809 = (cbMatDynParam._m0[5u].z * _798) + cbMatDynParam._m0[5u].w;
        float _3670 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) - _805)) + _805) < ((_623 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _633 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _634 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _653 = fma(_593, cbSceneParam._m0[5u].z, fma(_494, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _493));
    float _656 = fma(_593, cbSceneParam._m0[6u].z, fma(_494, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _493));
    float _659 = fma(_593, cbSceneParam._m0[7u].z, fma(_494, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _493));
    uint _672 = uint(roundEven(NORMAL.w)) * 13u;
    uint _673 = _672 + 9u;
    uint _674 = _673 + uint(cbMatDynParam._m0[0u].w);
    float _680 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_674].x;
    float _681 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) * cbInstanceData._m0[_674].y;
    float _682 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * cbInstanceData._m0[_674].z;
    float _3681 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _686 = 1.0 - _600;
    float _687 = _683 * _686;
    float _688 = _684 * _686;
    float _689 = _685 * _686;
    float _694 = (_683 + (-0.039999999105930328369140625)) * _600;
    float _695 = (_684 + (-0.039999999105930328369140625)) * _600;
    float _696 = (_685 + (-0.039999999105930328369140625)) * _600;
    float _697 = _694 + 0.039999999105930328369140625;
    float _699 = _695 + 0.039999999105930328369140625;
    float _700 = _696 + 0.039999999105930328369140625;
    vec4 _708 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _633, cbSceneParam._m0[86u].y * _634));
    float _711 = _708.x * TEXCOORD.z;
    float _712 = dot(vec3(_493, _494, _593), vec3(_392, _393, _394));
    float _715 = _712 * 2.0;
    float _719 = (_715 * _493) - _392;
    float _720 = (_715 * _494) - _393;
    float _721 = (_715 * _593) - _394;
    float _722 = dot(vec3(_392, _393, _394), vec3(_493, _494, _593));
    float _725 = abs(_722);
    float _3714 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _726 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _732 = sqrt(_595);
    float _744 = exp2((_732 * 5.0) * log2(1.0 - (_726 * 0.999000012874603271484375))) / (4.0 - (_732 * 3.0));
    float _750 = (1.0 - _744) * ((_732 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _751 = _744 * _732;
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1118;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _843 = fma(_787, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779));
        float _847 = fma(_787, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779));
        float _851 = fma(_787, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779));
        float _876 = _779 + _493;
        float _877 = _783 + _494;
        float _878 = _787 + _593;
        float _888 = fma(_878, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876)) - _843;
        float _889 = fma(_878, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876)) - _847;
        float _890 = fma(_878, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876)) - _851;
        float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
        float _907 = ((_894 * _888) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_843 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_894 * _889) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_847 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_894 * _890) / cbModelParam._m0[34u].z) + ((((((_851 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        float _946 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_912.x + (-0.5));
        float _948 = _946 * (_912.y + (-0.5));
        float _949 = _946 * (_912.z + (-0.5));
        float _956 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_919.x + (-0.5));
        float _958 = _956 * (_919.y + (-0.5));
        float _959 = _956 * (_919.z + (-0.5));
        float _966 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_926.x + (-0.5));
        float _968 = _966 * (_926.y + (-0.5));
        float _969 = _966 * (_926.z + (-0.5));
        float _976 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_933.x + (-0.5));
        float _978 = _976 * (_933.y + (-0.5));
        float _979 = _976 * (_933.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _1000 = (dot(vec3(_493, _494, _593), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1010 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3762 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1012 + 1.0))) + _1017) * _980;
        float _1027 = _948 * 0.5;
        float _1028 = _958 * 0.5;
        float _1029 = _968 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_493, _494, _593), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3795 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1054 + 1.0))) + _1059) * _981;
        float _1069 = _949 * 0.5;
        float _1070 = _959 * 0.5;
        float _1071 = _969 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_493, _494, _593), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3828 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1096 + 1.0))) + _1101) * _982;
        _1118 = _949;
        _1120 = _948;
        _1121 = _947;
        _1122 = _959;
        _1123 = _958;
        _1124 = _957;
        _1125 = _969;
        _1126 = _968;
        _1127 = _967;
        _1128 = _982;
        _1129 = _981;
        _1130 = _980;
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
    }
    else
    {
        _1118 = _1119;
        _1120 = _1119;
        _1121 = _1119;
        _1122 = _1119;
        _1123 = _1119;
        _1124 = _1119;
        _1125 = _1119;
        _1126 = _1119;
        _1127 = _1119;
        _1128 = _1119;
        _1129 = _1119;
        _1130 = _1119;
        _1131 = 0.0;
        _1132 = 0.0;
        _1133 = 0.0;
    }
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1162 = fma(_787, cbModelParam._m0[30u].z, fma(_783, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _779));
        float _1166 = fma(_787, cbModelParam._m0[31u].z, fma(_783, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _779));
        float _1170 = fma(_787, cbModelParam._m0[32u].z, fma(_783, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _779));
        float _1193 = _779 + _493;
        float _1194 = _783 + _494;
        float _1195 = _787 + _593;
        float _1205 = fma(_1195, cbModelParam._m0[30u].z, fma(_1194, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193)) - _1162;
        float _1206 = fma(_1195, cbModelParam._m0[31u].z, fma(_1194, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193)) - _1166;
        float _1207 = fma(_1195, cbModelParam._m0[32u].z, fma(_1194, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193)) - _1170;
        float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
        float _1224 = ((_1211 * _1205) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1162 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1211 * _1206) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1166 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1211 * _1207) / cbModelParam._m0[35u].z) + ((((((_1170 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        float _1261 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1228.x + (-0.5));
        float _1263 = _1261 * (_1228.y + (-0.5));
        float _1264 = _1261 * (_1228.z + (-0.5));
        float _1271 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1235.x + (-0.5));
        float _1273 = _1271 * (_1235.y + (-0.5));
        float _1274 = _1271 * (_1235.z + (-0.5));
        float _1281 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1242.x + (-0.5));
        float _1283 = _1281 * (_1242.y + (-0.5));
        float _1284 = _1281 * (_1242.z + (-0.5));
        float _1291 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1249.x + (-0.5));
        float _1293 = _1291 * (_1249.y + (-0.5));
        float _1294 = _1291 * (_1249.z + (-0.5));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = _1262 * 0.5;
        float _1299 = _1272 * 0.5;
        float _1300 = _1282 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_493, _494, _593), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3891 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1325 + 1.0))) + _1330) * _1295;
        float _1340 = _1263 * 0.5;
        float _1341 = _1273 * 0.5;
        float _1342 = _1283 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_493, _494, _593), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3924 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1367 + 1.0))) + _1372) * _1296;
        float _1382 = _1264 * 0.5;
        float _1383 = _1274 * 0.5;
        float _1384 = _1284 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_493, _494, _593), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3957 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1409 + 1.0))) + _1414) * _1297;
        _1431 = _1264;
        _1432 = _1263;
        _1433 = _1262;
        _1434 = _1274;
        _1435 = _1273;
        _1436 = _1272;
        _1437 = _1284;
        _1438 = _1283;
        _1439 = _1282;
        _1440 = _1297;
        _1441 = _1296;
        _1442 = _1295;
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
    }
    else
    {
        _1431 = _1119;
        _1432 = _1119;
        _1433 = _1119;
        _1434 = _1119;
        _1435 = _1119;
        _1436 = _1119;
        _1437 = _1119;
        _1438 = _1119;
        _1439 = _1119;
        _1440 = _1119;
        _1441 = _1119;
        _1442 = _1119;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1131)) + _1131;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1132)) + _1132;
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1133)) + _1133;
    float _1478 = fma(_1457, cbSceneParam._m0[89u].z, fma(_1456, cbSceneParam._m0[89u].y, _1455 * cbSceneParam._m0[89u].x));
    float _1481 = fma(_1457, cbSceneParam._m0[90u].z, fma(_1456, cbSceneParam._m0[90u].y, _1455 * cbSceneParam._m0[90u].x));
    float _1484 = fma(_1457, cbSceneParam._m0[91u].z, fma(_1456, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1455));
    float _1499 = _719 * 0.5;
    float _1500 = _720 * 0.5;
    float _1501 = _721 * 0.5;
    float _1502 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1505 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1508 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1542;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1515 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1118, _1122, _1125, _1128));
        float _1519 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1523 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1530 = dot(vec4(cbModelParam._m0[39u]), vec4(_1499, _1500, _1501, 1.0));
        _1542 = dot(vec3(isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1542 = 1.0;
    }
    float _1553;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1544 = dot(vec4(cbModelParam._m0[40u]), vec4(_1499, _1500, _1501, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1544) ? 0.0 : (isnan(0.0) ? _1544 : max(0.0, _1544))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1557 = (_1553 * cbModelParam._m0[1u].x) + (_1542 * (1.0 - cbModelParam._m0[1u].x));
    float _1567 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _595);
    float _1568 = isnan(_1567) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1567 : min(cbModelParam._m0[25u].z, _1567));
    float _1648;
    float _1650;
    float _1652;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1615 = fma(_787, cbModelParam._m0[13u].z, fma(_783, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779)) + cbModelParam._m0[13u].w;
        float _1619 = fma(_787, cbModelParam._m0[14u].z, fma(_783, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779)) + cbModelParam._m0[14u].w;
        float _1623 = fma(_787, cbModelParam._m0[15u].z, fma(_783, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779)) + cbModelParam._m0[15u].w;
        float _1626 = fma(_721, cbModelParam._m0[13u].z, fma(_720, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719));
        float _1629 = fma(_721, cbModelParam._m0[14u].z, fma(_720, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719));
        float _1632 = fma(_721, cbModelParam._m0[15u].z, fma(_720, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719));
        float _1660;
        if (_1626 > 0.0)
        {
            _1660 = abs((1.0 - _1615) / _1626);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1615 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1660 = frontier_phi_19_17_ladder;
        }
        float _1856;
        if (_1629 > 0.0)
        {
            _1856 = abs((1.0 - _1619) / _1629);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1619 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1856 = frontier_phi_28_24_ladder;
        }
        float _2105;
        if (_1632 > 0.0)
        {
            _2105 = abs((1.0 - _1623) / _1632);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1623 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2105 = frontier_phi_39_35_ladder;
        }
        float _2107 = isnan(_1856) ? _1660 : (isnan(_1660) ? _1856 : min(_1660, _1856));
        float _2108 = isnan(_2105) ? _2107 : (isnan(_2107) ? _2105 : min(_2107, _2105));
        float _2112 = (_2108 * _1626) + _1615;
        float _2113 = (_2108 * _1629) + _1619;
        float _2114 = (_2108 * _1632) + _1623;
        float _2115 = _2108 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2115;
        float _2119 = _2115 + 1.0;
        float frontier_phi_18_39_ladder;
        float frontier_phi_18_39_ladder_1;
        float frontier_phi_18_39_ladder_2;
        if ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 > _2119) || ((_2113 < _2117) || ((_2112 < _2117) || (_2112 > _2119))))))
        {
            frontier_phi_18_39_ladder = 0.0;
            frontier_phi_18_39_ladder_1 = 0.0;
            frontier_phi_18_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2264 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2114, cbModelParam._m0[9u].z, fma(_2113, cbModelParam._m0[9u].y, _2112 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2114, cbModelParam._m0[10u].z, fma(_2113, cbModelParam._m0[10u].y, _2112 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2114, cbModelParam._m0[11u].z, fma(_2113, cbModelParam._m0[11u].y, _2112 * cbModelParam._m0[11u].x))), _1568);
            frontier_phi_18_39_ladder = _2264.z * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_1 = _2264.y * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_2 = _2264.x * cbModelParam._m0[1u].y;
        }
        _1648 = frontier_phi_18_39_ladder_2;
        _1650 = frontier_phi_18_39_ladder_1;
        _1652 = frontier_phi_18_39_ladder;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_719, _720, _721), _1568);
        _1648 = _1636.x * cbModelParam._m0[1u].y;
        _1650 = _1636.y * cbModelParam._m0[1u].y;
        _1652 = _1636.z * cbModelParam._m0[1u].y;
    }
    float _1656 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _595);
    float _1657 = isnan(_1656) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1656 : min(cbModelParam._m0[25u].w, _1656));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1714 = fma(_787, cbModelParam._m0[21u].z, fma(_783, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779)) + cbModelParam._m0[21u].w;
        float _1718 = fma(_787, cbModelParam._m0[22u].z, fma(_783, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779)) + cbModelParam._m0[22u].w;
        float _1722 = fma(_787, cbModelParam._m0[23u].z, fma(_783, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779)) + cbModelParam._m0[23u].w;
        float _1725 = fma(_721, cbModelParam._m0[21u].z, fma(_720, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719));
        float _1728 = fma(_721, cbModelParam._m0[22u].z, fma(_720, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719));
        float _1731 = fma(_721, cbModelParam._m0[23u].z, fma(_720, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719));
        float _1861;
        if (_1725 > 0.0)
        {
            _1861 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1861 = frontier_phi_30_26_ladder;
        }
        float _2132;
        if (_1728 > 0.0)
        {
            _2132 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _2132 = frontier_phi_41_37_ladder;
        }
        float _2440;
        if (_1731 > 0.0)
        {
            _2440 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2440 = frontier_phi_52_47_ladder;
        }
        float _2442 = isnan(_2132) ? _1861 : (isnan(_1861) ? _2132 : min(_1861, _2132));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1725) + _1714;
        float _2448 = (_2443 * _1728) + _1718;
        float _2449 = (_2443 * _1731) + _1722;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2451 = (-1.0) - _2450;
        float _2453 = _2450 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2449 > _2453) || ((_2449 < _2451) || ((_2448 > _2453) || ((_2448 < _2451) || ((_2447 < _2451) || (_2447 > _2453))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2449, cbModelParam._m0[17u].z, fma(_2448, cbModelParam._m0[17u].y, _2447 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2449, cbModelParam._m0[18u].z, fma(_2448, cbModelParam._m0[18u].y, _2447 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2449, cbModelParam._m0[19u].z, fma(_2448, cbModelParam._m0[19u].y, _2447 * cbModelParam._m0[19u].x))), _1657);
            frontier_phi_27_52_ladder = _2629.x * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2629.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2629.y * cbModelParam._m0[1u].z;
        }
        _1750 = frontier_phi_27_52_ladder;
        _1752 = frontier_phi_27_52_ladder_2;
        _1754 = frontier_phi_27_52_ladder_1;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_719, _720, _721), _1657);
        _1750 = _1734.x * cbModelParam._m0[1u].z;
        _1752 = _1734.y * cbModelParam._m0[1u].z;
        _1754 = _1734.z * cbModelParam._m0[1u].z;
    }
    float _1767 = (((_750 * _697) + _751) * _711) * ((cbModelParam._m0[1u].w * (_1750 - _1648)) + _1648);
    float _1769 = (((_750 * _699) + _751) * _711) * ((cbModelParam._m0[1u].w * (_1752 - _1650)) + _1650);
    float _1771 = (((_750 * _700) + _751) * _711) * ((cbModelParam._m0[1u].w * (_1754 - _1652)) + _1652);
    float _1774 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, _1767 * cbSceneParam._m0[91u].x));
    vec4 _1788 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_633, _634));
    float _1790 = _1788.w;
    float _1802 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1790);
    float _1803 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1790);
    float _1804 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1790);
    uvec4 _1808 = floatBitsToUint(cbInstanceData._m0[_672 + 5u]);
    uint _1810 = _1808.x * 14u;
    uint _1811 = _1810 + 13u;
    float _1816 = _711 + (-1.0);
    float _1819 = (cbLight._m0[_1811].x * _1816) + 1.0;
    float _1820 = (cbLight._m0[_1811].y * _1816) + 1.0;
    uint _1822 = _1810 + 4u;
    float _1833 = dot(vec3(cbLight._m0[_1810].xyz), vec3(_493, _494, _593));
    float _1836 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    float _1837 = cbLight._m0[_1822].x * _1802;
    float _1838 = cbLight._m0[_1822].y * _1803;
    float _1839 = cbLight._m0[_1822].z * _1804;
    uint _1840 = _1810 + 5u;
    uint _1846 = _1810 | 1u;
    float _1852 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_493, _494, _593));
    float _1855 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    float _1920;
    float _1921;
    float _1922;
    if (_596 == 0.0)
    {
        float _4093 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _4104 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1874 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.3183098733425140380859375;
        float _1876 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
        _1920 = ((cbLight._m0[_1840].x * _1855) * _1876) + ((_1837 * _1836) * _1874);
        _1921 = ((_1855 * cbLight._m0[_1840].y) * _1876) + ((_1838 * _1836) * _1874);
        _1922 = ((_1855 * cbLight._m0[_1840].z) * _1876) + ((_1839 * _1836) * _1874);
    }
    else
    {
        float _1886 = _1833 + _596;
        float _1889 = (_596 * 2.0) + 1.0;
        float _1890 = (isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) / _1889;
        float _1897 = _1852 + _596;
        float _1899 = (isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) / _1889;
        _1920 = (((_1899 * cbLight._m0[_1840].x) * _1855) + ((_1837 * _1890) * _1836)) * 0.3183098733425140380859375;
        _1921 = (((_1899 * cbLight._m0[_1840].y) * _1855) + ((_1838 * _1890) * _1836)) * 0.3183098733425140380859375;
        _1922 = (((_1899 * cbLight._m0[_1840].z) * _1855) + ((_1839 * _1890) * _1836)) * 0.3183098733425140380859375;
    }
    uint _1926 = _1810 + 8u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1810].w)) * _595) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1810].x + _392;
    float _1945 = cbLight._m0[_1810].y + _393;
    float _1946 = cbLight._m0[_1810].z + _394;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_493, _494, _593), vec3(cbLight._m0[_1810].xyz));
    float _4125 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _1958 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _1959 = dot(vec3(_493, _494, _593), vec3(_1951, _1952, _1953));
    float _4147 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1810].xyz), vec3(_1951, _1952, _1953));
    float _4158 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1943 * _1943;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1979 = exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0);
    float _1980 = 0.959999978542327880859375 - _694;
    float _1982 = 0.959999978542327880859375 - _695;
    float _1983 = 0.959999978542327880859375 - _696;
    float _1990 = 1.0 - _1943;
    float _2001 = (0.5 / (((_1958 * ((_1957 * _1990) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _1990) + _1943) * _1957))) * _1957;
    float _4169 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    uint _2019 = _1810 + 9u;
    float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _595) * 0.949999988079071044921875);
    float _2034 = _2033 * _2033;
    float _2035 = cbLight._m0[_1846].x + _392;
    float _2036 = cbLight._m0[_1846].y + _393;
    float _2037 = cbLight._m0[_1846].z + _394;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2042 = _2041 * _2035;
    float _2043 = _2041 * _2036;
    float _2044 = _2041 * _2037;
    float _2045 = dot(vec3(_493, _494, _593), vec3(cbLight._m0[_1846].xyz));
    float _4180 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2049 = dot(vec3(_493, _494, _593), vec3(_2042, _2043, _2044));
    float _4191 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2053 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2042, _2043, _2044));
    float _4202 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2057 = _2034 * _2034;
    float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
    float _2068 = exp2(log2(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * 5.0);
    float _2075 = 1.0 - _2034;
    float _2085 = (0.5 / (((_1958 * ((_2048 * _2075) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2075) + _2034) * _2048))) * _2048;
    float _4213 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2087 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
    float _2097 = (((((_2068 * _1980) + _697) * cbLight._m0[_2019].x) * _2087) * _1855) + ((((cbLight._m0[_1926].x * _1802) * ((_1979 * _1980) + _697)) * _2003) * _1836);
    float _2098 = (((((_2068 * _1982) + _699) * cbLight._m0[_2019].y) * _2087) * _1855) + ((((cbLight._m0[_1926].y * _1803) * ((_1979 * _1982) + _699)) * _2003) * _1836);
    float _2099 = (((((_2068 * _1983) + _700) * cbLight._m0[_2019].z) * _2087) * _1855) + ((((cbLight._m0[_1926].z * _1804) * ((_1979 * _1983) + _700)) * _2003) * _1836);
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    if (_1808.y == 0u)
    {
        float _2176 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2176;
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2176;
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2176;
        uvec4 _2191 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2192 = _2191.x;
        uint _2203 = uint((float(_2191.y) * floor(float(uint(cbSceneParam._m0[85u].y * _634) / _2192))) + floor(float(uint(cbSceneParam._m0[85u].x * _633) / _2192)));
        float _2213 = (log2(_2179 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2214 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        uint _2217 = uint(isnan(14.0) ? _2214 : (isnan(_2214) ? 14.0 : min(_2214, 14.0)));
        uvec4 _2222 = texelFetch(g_lightClusterGridBuffer, int(((_2217 << 2u) + (_2203 << 6u)) >> 2u));
        uint _2223 = _2222.x;
        uint _2224 = _2191.z;
        float _2273;
        float _2275;
        float _2277;
        float _2279;
        float _2281;
        float _2283;
        if (((((1u << ((_2224 >> 4u) & 15u)) + 4294967295u) & _2223) == 0u) || ((_2224 & 240u) == 0u))
        {
            _2273 = 0.0;
            _2275 = 0.0;
            _2277 = 0.0;
            _2279 = 0.0;
            _2281 = 0.0;
            _2283 = 0.0;
        }
        else
        {
            float _2274;
            float _2276;
            float _2278;
            float _2280;
            float _2282;
            float _2284;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            uint _2504 = 0u;
            uint _2513;
            bool _2514;
            for (;;)
            {
                _2513 = texelFetch(g_lightClassification, int((((_2217 << 5u) + (_2203 << 9u)) + (_2504 << 2u)) >> 2u)).x;
                _2514 = _2513 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2514)
                {
                    frontier_phi_61_pred = _2499;
                    frontier_phi_61_pred_1 = _2503;
                    frontier_phi_61_pred_2 = _2502;
                    frontier_phi_61_pred_3 = _2501;
                    frontier_phi_61_pred_4 = _2500;
                    frontier_phi_61_pred_5 = _2498;
                }
                else
                {
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    uint _2725;
                    _2719 = _2498;
                    _2720 = _2499;
                    _2721 = _2500;
                    _2722 = _2501;
                    _2723 = _2502;
                    _2724 = _2503;
                    _2725 = _2513;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    for (;;)
                    {
                        uint _2729 = uint(findLSB(_2725)) + (_2504 << 5u);
                        uint _2726 = (_2725 + 4294967295u) & _2725;
                        uint _2731 = _2729 * 48u;
                        vec4 _2745 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 3u)).x));
                        uint _2751 = (_2729 * 48u) + 4u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2751)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 3u)).x));
                        float _2765 = _2764.x;
                        float _2766 = _2764.y;
                        float _2767 = _2764.z;
                        uint _2770 = (_2729 * 48u) + 8u;
                        vec3 _2781 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x));
                        uint _2786 = (_2729 * 48u) + 12u;
                        vec2 _2794 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x));
                        float _2800 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
                        float _2801 = _2800 * _2177;
                        float _2802 = _2800 * _2178;
                        float _2803 = _2800 * _2179;
                        float _2804 = _2745.x - _2177;
                        float _2805 = _2745.y - _2178;
                        float _2806 = _2745.z - _2179;
                        float _2807 = dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806));
                        float _2810 = inversesqrt(_2807);
                        float _2811 = _2810 * _2804;
                        float _2812 = _2810 * _2805;
                        float _2813 = _2810 * _2806;
                        float _2814 = dot(vec3(_653, _656, _659), vec3(_2811, _2812, _2813));
                        float _2819 = 1.0 - (_2807 * _2745.w);
                        float _4234 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2820 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2821 = sqrt(_2807) * _2764.w;
                        float _2824 = 1.39999997615814208984375 / (_2821 + 1.39999997615814208984375);
                        float _2825 = _2824 * _2824;
                        float _2826 = 1.0 - _2825;
                        float _2828 = (_2826 * _2826) * _596;
                        float _2831 = ((_2826 * _2814) + _2825) + _2828;
                        float _2836 = _2821 * _2821;
                        float _2841 = ((isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0))) * _2820) / (((_2828 * 2.0) + 1.0) * ((_2836 * 0.699999988079071044921875) + 1.0));
                        float _2845 = dot(vec3(_2811, _2812, _2813), vec3(_2801, _2802, _2803));
                        float _4250 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2852 = dot(vec3((-0.0) - _2801, (-0.0) - _2802, (-0.0) - _2803), vec3(_653, _656, _659)) + 1.0;
                        float _2854 = (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0))) * 0.5;
                        float _2861 = ((_2854 * _2854) * _2794.x) * exp2((_2794.y * 32.0) * log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))));
                        float _2863 = _596 / (_596 + 1.0);
                        float _2879 = (-0.0) - _2177;
                        float _2880 = (-0.0) - _2178;
                        float _2881 = (-0.0) - _2179;
                        float _2885 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
                        float _2886 = _2885 * _2879;
                        float _2887 = _2885 * _2880;
                        float _2888 = _2885 * _2881;
                        float _2896 = exp2(log2(1.0 / ((_2836 * 3.5) + 5.0)) * 0.25);
                        float _2897 = 1.0 - _732;
                        float _2904 = sqrt(1.0 - ((1.0 - (_2897 * _2897)) * (1.0 - (_2896 * _2896))));
                        float _2905 = _2904 * _2904;
                        float _2906 = _2905 * _2905;
                        float _2907 = _2886 + _2811;
                        float _2908 = _2887 + _2812;
                        float _2909 = _2888 + _2813;
                        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
                        float _2917 = dot(vec3(_653, _656, _659), vec3(_2886, _2887, _2888));
                        float _4266 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2920 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                        float _2921 = dot(vec3(_653, _656, _659), vec3(_2913 * _2907, _2913 * _2908, _2913 * _2909));
                        float _4277 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2928 = ((_2924 * _2924) * (_2906 + (-1.0))) + 1.0;
                        float _2929 = _2824 * _2905;
                        float _2930 = _2929 * _2929;
                        float _2933 = ((1.0 - _2930) * _2814) + _2930;
                        float _4288 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2934 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _2935 = 1.0 - _2905;
                        float _2945 = (0.5 / (((_2934 * ((_2920 * _2935) + _2905)) + 9.9999999392252902907785028219223e-09) + (((_2934 * _2935) + _2905) * _2920))) * _2934;
                        float _4299 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2956 = (((_2906 * 3.1415927410125732421875) * (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) / ((_2928 * _2928) * ((_2836 * 2.1991131305694580078125) + 3.141590118408203125))) * _2820;
                        _2637 = (((((_2765 * 0.3183098733425140380859375) * _2863) * _2861) + _2765) * _2841) + _2722;
                        _2638 = (((((_2766 * 0.3183098733425140380859375) * _2863) * _2861) + _2766) * _2841) + _2723;
                        _2639 = (((((_2767 * 0.3183098733425140380859375) * _2863) * _2861) + _2767) * _2841) + _2724;
                        _2634 = (_2956 * _2781.x) + _2719;
                        _2635 = (_2956 * _2781.y) + _2720;
                        _2636 = (_2956 * _2781.z) + _2721;
                        if (_2726 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2719 = _2634;
                            _2720 = _2635;
                            _2721 = _2636;
                            _2722 = _2637;
                            _2723 = _2638;
                            _2724 = _2639;
                            _2725 = _2726;
                        }
                    }
                    frontier_phi_61_pred = _2635;
                    frontier_phi_61_pred_1 = _2639;
                    frontier_phi_61_pred_2 = _2638;
                    frontier_phi_61_pred_3 = _2637;
                    frontier_phi_61_pred_4 = _2636;
                    frontier_phi_61_pred_5 = _2634;
                }
                _2276 = frontier_phi_61_pred;
                _2284 = frontier_phi_61_pred_1;
                _2282 = frontier_phi_61_pred_2;
                _2280 = frontier_phi_61_pred_3;
                _2278 = frontier_phi_61_pred_4;
                _2274 = frontier_phi_61_pred_5;
                uint _2505 = _2504 + 1u;
                if (_2505 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2498 = _2274;
                    _2499 = _2276;
                    _2500 = _2278;
                    _2501 = _2280;
                    _2502 = _2282;
                    _2503 = _2284;
                    _2504 = _2505;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2273 = _2274;
            _2275 = _2276;
            _2277 = _2278;
            _2279 = _2280;
            _2281 = _2282;
            _2283 = _2284;
        }
        uvec4 _2287 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2288 = _2287.z;
        uint _2290 = (_2288 >> 8u) & 15u;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        if (((4294967295u << _2290) & _2223) == 0u)
        {
            _2466 = _2273;
            _2468 = _2275;
            _2470 = _2277;
            _2472 = _2279;
            _2474 = _2281;
            _2476 = _2283;
        }
        else
        {
            float _2491 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
            float _2492 = _2491 * _2177;
            float _2493 = _2491 * _2178;
            float _2494 = _2491 * _2179;
            float frontier_phi_54_55_ladder;
            float frontier_phi_54_55_ladder_1;
            float frontier_phi_54_55_ladder_2;
            float frontier_phi_54_55_ladder_3;
            float frontier_phi_54_55_ladder_4;
            float frontier_phi_54_55_ladder_5;
            if (_2290 < ((_2288 >> 12u) & 15u))
            {
                float _2467;
                float _2469;
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2702 = _2273;
                float _2703 = _2275;
                float _2704 = _2277;
                float _2705 = _2279;
                float _2706 = _2281;
                float _2707 = _2283;
                uint _2708 = _2290;
                uint _2717;
                bool _2718;
                for (;;)
                {
                    _2717 = texelFetch(g_lightClassification, int((((_2217 << 5u) + (_2203 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                    _2718 = _2717 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2718)
                    {
                        frontier_phi_73_pred = _2707;
                        frontier_phi_73_pred_1 = _2706;
                        frontier_phi_73_pred_2 = _2705;
                        frontier_phi_73_pred_3 = _2704;
                        frontier_phi_73_pred_4 = _2703;
                        frontier_phi_73_pred_5 = _2702;
                    }
                    else
                    {
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3026 = _2702;
                        float _3027 = _2703;
                        float _3028 = _2704;
                        float _3029 = _2705;
                        float _3030 = _2706;
                        float _3031 = _2707;
                        uint _3032 = _2717;
                        uint _3033;
                        vec4 _3058;
                        float _3059;
                        vec4 _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        vec3 _3089;
                        vec2 _3098;
                        vec4 _3113;
                        vec4 _3129;
                        float _3176;
                        bool _3177;
                        for (;;)
                        {
                            uint _3043 = ((_2708 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3032));
                            _3033 = (_3032 + 4294967295u) & _3032;
                            uint _3045 = _3043 * 40u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3059 = _3058.w;
                            uint _3061 = (_3043 * 40u) + 4u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            _3075 = _3074.x;
                            _3076 = _3074.y;
                            _3077 = _3074.z;
                            uint _3079 = (_3043 * 40u) + 8u;
                            _3089 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x));
                            uint _3091 = (_3043 * 40u) + 12u;
                            _3098 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x));
                            uint _3100 = (_3043 * 40u) + 16u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3116 = (_3043 * 40u) + 20u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3132 = (_3043 * 40u) + 24u;
                            vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3151 = (_3043 * 40u) + 28u;
                            vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            _3176 = fma(_2179, _3164.z, fma(_2178, _3164.y, _3164.x * _2177)) + _3164.w;
                            _3177 = !((fma(_2179, _3145.z, fma(_2178, _3145.y, _3145.x * _2177)) + _3145.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3177)
                            {
                                float _3203 = _3058.x - _2177;
                                float _3204 = _3058.y - _2178;
                                float _3205 = _3058.z - _2179;
                                float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                                float _3209 = inversesqrt(_3206);
                                float _3210 = _3209 * _3203;
                                float _3211 = _3209 * _3204;
                                float _3212 = _3209 * _3205;
                                float _3216 = 1.0 - (_3206 / (_3059 * _3059));
                                float _4310 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3221 = sqrt(_3206) * _3074.w;
                                float _3223 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                                float _3224 = _3223 * _3223;
                                float _3225 = 1.0 - _3224;
                                float _3227 = (_3225 * _3225) * _596;
                                float _3230 = ((_3225 * dot(vec3(_3210, _3211, _3212), vec3(_653, _656, _659))) + _3224) + _3227;
                                float _3235 = _3221 * _3221;
                                float _3240 = (fma(_2179, _3113.z, fma(_2178, _3113.y, _3113.x * _2177)) + _3113.w) / _3176;
                                float _3241 = (fma(_2179, _3129.z, fma(_2178, _3129.y, _3129.x * _2177)) + _3129.w) / _3176;
                                float _3245 = 1.0 - dot(vec2(_3240, _3241), vec2(_3240, _3241));
                                float _4326 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3247 = _3246 * (((isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))) * _3217) / (((_3227 * 2.0) + 1.0) * ((_3235 * 0.699999988079071044921875) + 1.0)));
                                float _3248 = (-0.0) - _2492;
                                float _3249 = (-0.0) - _2493;
                                float _3250 = (-0.0) - _2494;
                                float _3251 = dot(vec3(_3210, _3211, _3212), vec3(_2492, _2493, _2494));
                                float _4337 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3258 = dot(vec3(_3248, _3249, _3250), vec3(_653, _656, _659)) + 1.0;
                                float _3260 = (isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))) * 0.5;
                                float _3267 = ((_3260 * _3260) * _3098.x) * exp2((_3098.y * 32.0) * log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))));
                                float _3269 = _596 / (_596 + 1.0);
                                float _3290 = exp2(log2(1.0 / ((_3235 * 3.5) + 5.0)) * 0.25);
                                float _3291 = 1.0 - _732;
                                float _3298 = sqrt(1.0 - ((1.0 - (_3291 * _3291)) * (1.0 - (_3290 * _3290))));
                                float _3299 = _3298 * _3298;
                                float _3300 = _3299 * _3299;
                                float _3301 = _3210 - _2492;
                                float _3302 = _3211 - _2493;
                                float _3303 = _3212 - _2494;
                                float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                                float _3311 = dot(vec3(_653, _656, _659), vec3(_3248, _3249, _3250));
                                float _4353 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3314 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3315 = dot(vec3(_653, _656, _659), vec3(_3307 * _3301, _3307 * _3302, _3307 * _3303));
                                float _4364 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3318 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3322 = ((_3318 * _3318) * (_3300 + (-1.0))) + 1.0;
                                float _3323 = _3223 * _3299;
                                float _3324 = _3323 * _3323;
                                float _3330 = ((1.0 - _3324) * dot(vec3(_653, _656, _659), vec3(_3210, _3211, _3212))) + _3324;
                                float _4375 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3331 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3332 = 1.0 - _3299;
                                float _3342 = (0.5 / (((_3331 * ((_3314 * _3332) + _3299)) + 9.9999999392252902907785028219223e-09) + (((_3331 * _3332) + _3299) * _3314))) * _3331;
                                float _4386 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3352 = (_3246 * _3217) * (((_3300 * 3.1415927410125732421875) * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) / ((_3322 * _3322) * ((_3235 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3352 * _3089.y;
                                frontier_phi_82_pred_1 = _3352 * _3089.x;
                                frontier_phi_82_pred_2 = _3352 * _3089.z;
                                frontier_phi_82_pred_3 = ((((_3077 * 0.3183098733425140380859375) * _3269) * _3267) + _3077) * _3247;
                                frontier_phi_82_pred_4 = ((((_3076 * 0.3183098733425140380859375) * _3269) * _3267) + _3076) * _3247;
                                frontier_phi_82_pred_5 = ((((_3075 * 0.3183098733425140380859375) * _3269) * _3267) + _3075) * _3247;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3357 = frontier_phi_82_pred;
                            _3356 = frontier_phi_82_pred_1;
                            _3358 = frontier_phi_82_pred_2;
                            _3361 = frontier_phi_82_pred_3;
                            _3360 = frontier_phi_82_pred_4;
                            _3359 = frontier_phi_82_pred_5;
                            _3007 = _3359 + _3029;
                            _3008 = _3360 + _3030;
                            _3009 = _3361 + _3031;
                            _3004 = _3356 + _3026;
                            _3005 = _3357 + _3027;
                            _3006 = _3358 + _3028;
                            if (_3033 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3026 = _3004;
                                _3027 = _3005;
                                _3028 = _3006;
                                _3029 = _3007;
                                _3030 = _3008;
                                _3031 = _3009;
                                _3032 = _3033;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _3009;
                        frontier_phi_73_pred_1 = _3008;
                        frontier_phi_73_pred_2 = _3007;
                        frontier_phi_73_pred_3 = _3006;
                        frontier_phi_73_pred_4 = _3005;
                        frontier_phi_73_pred_5 = _3004;
                    }
                    _2477 = frontier_phi_73_pred;
                    _2475 = frontier_phi_73_pred_1;
                    _2473 = frontier_phi_73_pred_2;
                    _2471 = frontier_phi_73_pred_3;
                    _2469 = frontier_phi_73_pred_4;
                    _2467 = frontier_phi_73_pred_5;
                    uint _2709 = _2708 + 1u;
                    if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2702 = _2467;
                        _2703 = _2469;
                        _2704 = _2471;
                        _2705 = _2473;
                        _2706 = _2475;
                        _2707 = _2477;
                        _2708 = _2709;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_54_55_ladder = _2477;
                frontier_phi_54_55_ladder_1 = _2475;
                frontier_phi_54_55_ladder_2 = _2473;
                frontier_phi_54_55_ladder_3 = _2471;
                frontier_phi_54_55_ladder_4 = _2469;
                frontier_phi_54_55_ladder_5 = _2467;
            }
            else
            {
                frontier_phi_54_55_ladder = _2283;
                frontier_phi_54_55_ladder_1 = _2281;
                frontier_phi_54_55_ladder_2 = _2279;
                frontier_phi_54_55_ladder_3 = _2277;
                frontier_phi_54_55_ladder_4 = _2275;
                frontier_phi_54_55_ladder_5 = _2273;
            }
            _2466 = frontier_phi_54_55_ladder_5;
            _2468 = frontier_phi_54_55_ladder_4;
            _2470 = frontier_phi_54_55_ladder_3;
            _2472 = frontier_phi_54_55_ladder_2;
            _2474 = frontier_phi_54_55_ladder_1;
            _2476 = frontier_phi_54_55_ladder;
        }
        float _2481 = isnan(1.0) ? _711 : (isnan(_711) ? 1.0 : min(_711, 1.0));
        _2235 = (_2481 * _2472) + _1920;
        _2237 = (_2481 * _2474) + _1921;
        _2239 = (_2481 * _2476) + _1922;
        _2241 = ((_2466 * _697) * _2481) + _2097;
        _2243 = ((_2468 * _699) * _2481) + _2098;
        _2245 = ((_2470 * _700) * _2481) + _2099;
    }
    else
    {
        _2235 = _1920;
        _2237 = _1921;
        _2239 = _1922;
        _2241 = _2097;
        _2243 = _2098;
        _2245 = _2099;
    }
    float _2361;
    float _2362;
    float _2363;
    if (_596 > 0.0)
    {
        uint _2294 = _1810 + 4u;
        float _2300 = (-0.0) - _392;
        float _2301 = (-0.0) - _393;
        float _2302 = (-0.0) - _394;
        float _2303 = dot(vec3(cbLight._m0[_1810].xyz), vec3(_2300, _2301, _2302));
        float _4402 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2307 = _722 + 1.0;
        float _2309 = (isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0))) * 0.5;
        float _2314 = _2309 * _2309;
        float _2315 = _2314 * exp2(log2(isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 32.0);
        float _2317 = _596 / (_596 + 1.0);
        float _2318 = isnan(_1819) ? 1.0 : (isnan(1.0) ? _1819 : min(1.0, _1819));
        uint _2331 = _1810 + 5u;
        float _2337 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2300, _2301, _2302));
        float _4423 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2344 = _2314 * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * 32.0);
        float _2345 = isnan(_1820) ? 1.0 : (isnan(1.0) ? _1820 : min(1.0, _1820));
        _2361 = ((((_2344 * cbLight._m0[_2331].x) * _2317) * _2345) + ((((cbLight._m0[_2294].x * _1802) * _2315) * _2317) * _2318)) * 0.3183098733425140380859375;
        _2362 = ((((_2344 * cbLight._m0[_2331].y) * _2317) * _2345) + ((((cbLight._m0[_2294].y * _1803) * _2315) * _2317) * _2318)) * 0.3183098733425140380859375;
        _2363 = ((((_2344 * cbLight._m0[_2331].z) * _2317) * _2345) + ((((cbLight._m0[_2294].z * _1804) * _2315) * _2317) * _2318)) * 0.3183098733425140380859375;
    }
    else
    {
        _2361 = 0.0;
        _2362 = 0.0;
        _2363 = 0.0;
    }
    float _4439 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4450 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4461 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4472 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _2369 = 0.959999978542327880859375 - (_600 * 0.959999978542327880859375);
    float _2380 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * ((_2235 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _711)) + _2361);
    float _2381 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * ((_2237 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _711)) + _2362);
    float _2382 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * ((_2239 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _711)) + _2363);
    float _2386 = _2369 - (exp2(log2(1.0 - _726) * 5.0) * _2369);
    float _2397 = (_2380 + ((_2241 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1557)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _581.x) * _2386) - _2380) * _545);
    float _2399 = (_2381 + ((_2243 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1557)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _581.y) * _2386) - _2381) * _545);
    float _2401 = (_2382 + ((_2245 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1557)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _581.z) * _2386) - _2382) * _545);
    float _2406 = cbInstanceData._m0[_672 + 6u].w * (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)));
    float _2411 = _633 / cbSceneParam._m0[86u].x;
    float _2412 = _634 / cbSceneParam._m0[86u].y;
    vec4 _2426 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2411, _2412, (log2((isnan(cbSceneParam._m0[77u].w) ? _616 : (isnan(_616) ? cbSceneParam._m0[77u].w : min(_616, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2428 = _2426.x;
    float _2429 = _2426.y;
    float _2430 = _2426.z;
    float _2431 = _2426.w;
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    if (_616 > cbSceneParam._m0[78u].w)
    {
        float _2519 = isnan(_616) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _616 : min(cbSceneParam._m0[80u].w, _616));
        float _2520 = _2519 / _616;
        float _2531 = _2520 * _282;
        float _2532 = _283 * _2520;
        float _2533 = (-0.0) - _2532;
        float _2534 = _2520 * _284;
        float _2536 = (cbSceneParam._m0[77u].w * _2533) / _2519;
        float _2537 = _2536 + cbSceneParam._m0[79u].w;
        float _2538 = cbSceneParam._m0[79u].w - _2532;
        float _2544 = sqrt(((_2531 * _2531) + (_2532 * _2532)) + (_2534 * _2534));
        float _2547 = (1.0 - (cbSceneParam._m0[77u].w / _2519)) * _2544;
        float _2552 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2554 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2961;
        if (abs((_2533 - _2536) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2961 = ((((_2537 > 0.0) ? exp2(_2552 * _2537) : (2.0 - exp2(_2554 * _2537))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2547;
        }
        else
        {
            float _2659 = 1.0 / cbSceneParam._m0[80u].x;
            float _2660 = isnan(_2538) ? _2537 : (isnan(_2537) ? _2538 : max(_2537, _2538));
            float _2661 = isnan(_2538) ? _2537 : (isnan(_2537) ? _2538 : min(_2537, _2538));
            float _2670 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : min(_2660, 0.0));
            float _2671 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : min(_2661, 0.0));
            _2961 = ((abs(_2544 / _2533) * cbSceneParam._m0[80u].y) * ((((_2670 - _2671) * 2.0) - ((exp2(_2552 * (isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0)))) - exp2(_2552 * (isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0))))) * _2659)) - ((exp2(_2554 * _2670) - exp2(_2554 * _2671)) * _2659))) + (_2547 * cbSceneParam._m0[80u].z);
        }
        vec4 _2963 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2411, _2412, 1.0), 0.0);
        float _2972 = exp2((_2961 * (-1.44269502162933349609375)) * (1.0 - _2963.w));
        float _2973 = log2(_2972);
        float _2989 = log2(_2431);
        _2556 = (exp2(_2989 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].x)) * _2963.x) / cbSceneParam._m0[78u].x)) + _2428;
        _2558 = (exp2(_2989 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].y)) * _2963.y) / cbSceneParam._m0[78u].y)) + _2429;
        _2560 = (exp2(_2989 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].z)) * _2963.z) / cbSceneParam._m0[78u].z)) + _2430;
        _2562 = _2972 * _2431;
    }
    else
    {
        _2556 = _2428;
        _2558 = _2429;
        _2560 = _2430;
        _2562 = _2431;
    }
    bool _2999;
    vec4 _2571;
    vec4 _2593;
    float _2595;
    float _2599;
    float _2600;
    float _2601;
    float _2602;
    bool _2612;
    for (;;)
    {
        _2571 = cbMatDynParam._m0[0u];
        float _2573 = roundEven(_2571.y);
        bool _2574 = _2573 == 3.0;
        float _2575 = log2(_2562);
        float _2582 = exp2(_2575 * cbSceneParam._m0[78u].x) * _2397;
        float _2583 = exp2(_2575 * cbSceneParam._m0[78u].y) * _2399;
        float _2584 = exp2(_2575 * cbSceneParam._m0[78u].z) * _2401;
        float _2591 = _623 + (-0.5);
        _2593 = cbMtdParam._m0[1u];
        _2595 = _2593.y * _2591;
        float _2598 = (_2573 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2599 = _2598 * (_2574 ? _2582 : (_2582 + (cbSceneParam._m0[72u].w * _2556)));
        _2600 = _2598 * (_2574 ? _2583 : (_2583 + (cbSceneParam._m0[72u].w * _2558)));
        _2601 = _2598 * (_2574 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2560)));
        _2602 = _2591 * 0.999000012874603271484375;
        _2612 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2612)
        {
            if ((cbInstanceData._m0[_672 + 7u].x + _2602) < 0.5)
            {
                _2999 = true;
                break;
            }
        }
        uint _2694 = _673 + uint(_2571.w);
        if ((cbInstanceData._m0[_2694].w < 1.0) && ((cbInstanceData._m0[_2694].w + _2602) < 0.5))
        {
            _2999 = true;
            break;
        }
        if ((_2595 + _303) < _2593.x)
        {
            _2999 = true;
            break;
        }
        _2999 = false;
        break;
    }
    float _3017;
    if (_2999)
    {
        discard_state = true;
        _3017 = 0.0;
    }
    else
    {
        _3017 = _2406;
    }
    SV_Target.x = _2599;
    SV_Target.y = _2600;
    SV_Target.z = _2601;
    SV_Target.w = _3017;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2406;
    discard_exit();
}


