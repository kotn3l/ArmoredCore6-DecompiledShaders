#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Crystal_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1045;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _264);
    float _275 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _264);
    float _276 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _264);
    vec4 _289 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _295 = _289.w;
    float _306 = dot(vec3(_274, _275, _276), vec3(_196, _197, _198));
    float _309 = dot(vec3(_274, _275, _276), vec3(_210, _211, _212));
    float _312 = dot(vec3(_274, _275, _276), vec3(_217, _218, _219));
    float _318 = inversesqrt(dot(vec3(_306, _309, _312), vec3(_306, _309, _312)));
    float _340 = dot(vec4(texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _360 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_306 * cbMtdParam._m0[12u].x) * _318) * _340) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_309 * cbMtdParam._m0[12u].x) * _318) * _340) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _383 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _384 = _383 * _274;
    float _385 = _383 * _275;
    float _386 = _383 * _276;
    float _387 = dot(vec4(_384, _385, _386, 0.0), vec4(_217, _218, _219, 0.0));
    float _390 = _387 - cbMtdParam._m0[13u].x;
    float _3347 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _397 = exp2(log2(1.0 - (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _413 = ((((_289.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _360.x) * cbMtdParam._m0[9u].x) * ((_397 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _418 = ((((_289.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _360.y) * cbMtdParam._m0[9u].y) * ((_397 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _423 = ((((_289.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _360.z) * cbMtdParam._m0[9u].z) * ((_397 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _440 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _448 = (_440.x * 2.0) + (-1.0);
    float _449 = (_440.y * 2.0) + (-1.0);
    float _450 = dot(vec2(_448, _449), vec2(_448, _449));
    float _3363 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _455 = sqrt(1.0 - (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))));
    float _458 = fma(_455, _217, fma(_449, _210, _448 * _196));
    float _461 = fma(_455, _218, fma(_449, _211, _448 * _197));
    float _464 = fma(_455, _219, fma(_449, _212, _448 * _198));
    float _468 = inversesqrt(dot(vec3(_458, _461, _464), vec3(_458, _461, _464)));
    float _469 = _468 * _458;
    float _470 = _468 * _461;
    float _472 = cbMtdParam._m0[14u].z + _440.z;
    vec4 _484 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _488 = cbMtdParam._m0[13u].w * _484.x;
    vec4 _501 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _510 = _387 - cbMtdParam._m0[12u].w;
    float _3374 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _520 = ((cbMtdParam._m0[14u].w * _501.x) + cbMtdParam._m0[14u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[14u].x));
    float _3390 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _533 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _534 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _544 = cbSceneParam._m0[86u].x * ((_533 / cbSceneParam._m0[86u].x) + (_469 * cbMtdParam._m0[15u].x));
    float _545 = cbSceneParam._m0[86u].y * ((_534 / cbSceneParam._m0[86u].y) + (_470 * cbMtdParam._m0[15u].x));
    float _552 = isnan(cbInstanceData._m0[8u].x) ? _544 : (isnan(_544) ? cbInstanceData._m0[8u].x : max(_544, cbInstanceData._m0[8u].x));
    float _553 = isnan(cbInstanceData._m0[8u].y) ? _545 : (isnan(_545) ? cbInstanceData._m0[8u].y : max(_545, cbInstanceData._m0[8u].y));
    vec4 _557 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _552 : (isnan(_552) ? cbInstanceData._m0[8u].z : min(_552, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _553 : (isnan(_553) ? cbInstanceData._m0[8u].w : min(_553, cbInstanceData._m0[8u].w))));
    float _569 = _468 * _464;
    float _3421 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _570 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _571 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _572 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3448 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3459 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _3470 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _3481 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _576 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _592 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _612 = fma(_569, cbSceneParam._m0[5u].z, fma(_470, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _469));
    float _615 = fma(_569, cbSceneParam._m0[6u].z, fma(_470, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _469));
    float _618 = fma(_569, cbSceneParam._m0[7u].z, fma(_470, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _469));
    uint _631 = uint(roundEven(NORMAL.w)) * 13u;
    uint _633 = (_631 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _639 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_633].x;
    float _640 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * cbInstanceData._m0[_633].y;
    float _641 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_633].z;
    float _3492 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _3503 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _3514 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _645 = 1.0 - _576;
    float _646 = _642 * _645;
    float _647 = _643 * _645;
    float _648 = _644 * _645;
    float _653 = (_642 + (-0.039999999105930328369140625)) * _576;
    float _654 = (_643 + (-0.039999999105930328369140625)) * _576;
    float _655 = (_644 + (-0.039999999105930328369140625)) * _576;
    float _656 = _653 + 0.039999999105930328369140625;
    float _658 = _654 + 0.039999999105930328369140625;
    float _659 = _655 + 0.039999999105930328369140625;
    vec4 _663 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _533, cbSceneParam._m0[86u].y * _534));
    float _666 = _663.x * TEXCOORD.z;
    float _667 = dot(vec3(_469, _470, _569), vec3(_384, _385, _386));
    float _670 = _667 * 2.0;
    float _674 = (_670 * _469) - _384;
    float _675 = (_670 * _470) - _385;
    float _676 = (_670 * _569) - _386;
    float _677 = dot(vec3(_384, _385, _386), vec3(_469, _470, _569));
    float _680 = abs(_677);
    float _3525 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _687 = sqrt(_571);
    float _699 = exp2((_687 * 5.0) * log2(1.0 - (_681 * 0.999000012874603271484375))) / (4.0 - (_687 * 3.0));
    float _705 = (1.0 - _699) * ((_687 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _706 = _699 * _687;
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _769 = fma(_742, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734));
        float _773 = fma(_742, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734));
        float _777 = fma(_742, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734));
        float _802 = _734 + _469;
        float _803 = _738 + _470;
        float _804 = _742 + _569;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _769;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _773;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _777;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_769 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_773 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_777 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_469, _470, _569), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3573 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_469, _470, _569), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3606 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_469, _470, _569), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3639 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_742, cbModelParam._m0[30u].z, fma(_738, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _734));
        float _1089 = fma(_742, cbModelParam._m0[31u].z, fma(_738, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _734));
        float _1093 = fma(_742, cbModelParam._m0[32u].z, fma(_738, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _734));
        float _1116 = _734 + _469;
        float _1117 = _738 + _470;
        float _1118 = _742 + _569;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_469, _470, _569), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3702 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_469, _470, _569), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3735 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_469, _470, _569), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3768 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1045;
        _1355 = _1045;
        _1356 = _1045;
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1058)) + _1058;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _674 * 0.5;
    float _1423 = _675 * 0.5;
    float _1424 = _676 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _571);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1538 = fma(_742, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734)) + cbModelParam._m0[13u].w;
        float _1542 = fma(_742, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734)) + cbModelParam._m0[14u].w;
        float _1546 = fma(_742, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734)) + cbModelParam._m0[15u].w;
        float _1549 = fma(_676, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _674));
        float _1552 = fma(_676, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _674));
        float _1555 = fma(_676, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _674));
        float _1583;
        if (_1549 > 0.0)
        {
            _1583 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1583 = frontier_phi_16_14_ladder;
        }
        float _1758;
        if (_1552 > 0.0)
        {
            _1758 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1758 = frontier_phi_25_21_ladder;
        }
        float _2004;
        if (_1555 > 0.0)
        {
            _2004 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2004 = frontier_phi_36_32_ladder;
        }
        float _2006 = isnan(_1758) ? _1583 : (isnan(_1583) ? _1758 : min(_1583, _1758));
        float _2007 = isnan(_2004) ? _2006 : (isnan(_2006) ? _2004 : min(_2006, _2004));
        float _2011 = (_2007 * _1549) + _1538;
        float _2012 = (_2007 * _1552) + _1542;
        float _2013 = (_2007 * _1555) + _1546;
        float _2014 = _2007 * 9.9999997473787516355514526367188e-05;
        float _2016 = (-1.0) - _2014;
        float _2018 = _2014 + 1.0;
        float frontier_phi_15_36_ladder;
        float frontier_phi_15_36_ladder_1;
        float frontier_phi_15_36_ladder_2;
        if ((_2013 > _2018) || ((_2013 < _2016) || ((_2012 > _2018) || ((_2012 < _2016) || ((_2011 < _2016) || (_2011 > _2018))))))
        {
            frontier_phi_15_36_ladder = 0.0;
            frontier_phi_15_36_ladder_1 = 0.0;
            frontier_phi_15_36_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2163 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2013, cbModelParam._m0[9u].z, fma(_2012, cbModelParam._m0[9u].y, _2011 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2013, cbModelParam._m0[10u].z, fma(_2012, cbModelParam._m0[10u].y, _2011 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2013, cbModelParam._m0[11u].z, fma(_2012, cbModelParam._m0[11u].y, _2011 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_15_36_ladder = _2163.z * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_1 = _2163.y * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_2 = _2163.x * cbModelParam._m0[1u].y;
        }
        _1571 = frontier_phi_15_36_ladder_2;
        _1573 = frontier_phi_15_36_ladder_1;
        _1575 = frontier_phi_15_36_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_674, _675, _676), _1491);
        _1571 = _1559.x * cbModelParam._m0[1u].y;
        _1573 = _1559.y * cbModelParam._m0[1u].y;
        _1575 = _1559.z * cbModelParam._m0[1u].y;
    }
    float _1579 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _571);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1579 : min(cbModelParam._m0[25u].w, _1579));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1637 = fma(_742, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734)) + cbModelParam._m0[21u].w;
        float _1641 = fma(_742, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734)) + cbModelParam._m0[22u].w;
        float _1645 = fma(_742, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734)) + cbModelParam._m0[23u].w;
        float _1648 = fma(_676, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _674));
        float _1651 = fma(_676, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _674));
        float _1654 = fma(_676, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _674));
        float _1763;
        if (_1648 > 0.0)
        {
            _1763 = abs((1.0 - _1637) / _1648);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1637 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1763 = frontier_phi_27_23_ladder;
        }
        float _2031;
        if (_1651 > 0.0)
        {
            _2031 = abs((1.0 - _1641) / _1651);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1641 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2031 = frontier_phi_38_34_ladder;
        }
        float _2336;
        if (_1654 > 0.0)
        {
            _2336 = abs((1.0 - _1645) / _1654);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1645 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2336 = frontier_phi_49_44_ladder;
        }
        float _2338 = isnan(_2031) ? _1763 : (isnan(_1763) ? _2031 : min(_1763, _2031));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1648) + _1637;
        float _2344 = (_2339 * _1651) + _1641;
        float _2345 = (_2339 * _1654) + _1645;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2346;
        float _2349 = _2346 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2345 > _2349) || ((_2345 < _2347) || ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 < _2347) || (_2343 > _2349))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2517 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2345, cbModelParam._m0[17u].z, fma(_2344, cbModelParam._m0[17u].y, _2343 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2345, cbModelParam._m0[18u].z, fma(_2344, cbModelParam._m0[18u].y, _2343 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2345, cbModelParam._m0[19u].z, fma(_2344, cbModelParam._m0[19u].y, _2343 * cbModelParam._m0[19u].x))), _1580);
            frontier_phi_24_49_ladder = _2517.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2517.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2517.x * cbModelParam._m0[1u].z;
        }
        _1673 = frontier_phi_24_49_ladder_2;
        _1675 = frontier_phi_24_49_ladder_1;
        _1677 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_674, _675, _676), _1580);
        _1673 = _1657.x * cbModelParam._m0[1u].z;
        _1675 = _1657.y * cbModelParam._m0[1u].z;
        _1677 = _1657.z * cbModelParam._m0[1u].z;
    }
    float _1690 = (((_705 * _656) + _706) * _666) * ((cbModelParam._m0[1u].w * (_1673 - _1571)) + _1571);
    float _1692 = (((_705 * _658) + _706) * _666) * ((cbModelParam._m0[1u].w * (_1675 - _1573)) + _1573);
    float _1694 = (((_705 * _659) + _706) * _666) * ((cbModelParam._m0[1u].w * (_1677 - _1575)) + _1575);
    float _1697 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1700 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1703 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1690 * cbSceneParam._m0[91u].x));
    uvec4 _1713 = floatBitsToUint(cbInstanceData._m0[_631 + 5u]);
    uint _1715 = _1713.x * 14u;
    uint _1716 = _1715 + 13u;
    float _1721 = _666 + (-1.0);
    float _1724 = (cbLight._m0[_1716].x * _1721) + 1.0;
    float _1725 = (cbLight._m0[_1716].y * _1721) + 1.0;
    uint _1727 = _1715 + 4u;
    float _1738 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_469, _470, _569));
    float _1741 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1742 = _1715 + 5u;
    uint _1748 = _1715 | 1u;
    float _1754 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_469, _470, _569));
    float _1757 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    float _1822;
    float _1823;
    float _1824;
    if (_572 == 0.0)
    {
        float _3904 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _3915 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1776 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.3183098733425140380859375;
        float _1778 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.3183098733425140380859375;
        _1822 = ((cbLight._m0[_1742].x * _1757) * _1778) + ((cbLight._m0[_1727].x * _1741) * _1776);
        _1823 = ((_1757 * cbLight._m0[_1742].y) * _1778) + ((_1741 * cbLight._m0[_1727].y) * _1776);
        _1824 = ((_1757 * cbLight._m0[_1742].z) * _1778) + ((_1741 * cbLight._m0[_1727].z) * _1776);
    }
    else
    {
        float _1788 = _1738 + _572;
        float _1791 = (_572 * 2.0) + 1.0;
        float _1792 = (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) / _1791;
        float _1799 = _1754 + _572;
        float _1801 = (isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) / _1791;
        _1822 = (((_1801 * cbLight._m0[_1742].x) * _1757) + ((_1792 * cbLight._m0[_1727].x) * _1741)) * 0.3183098733425140380859375;
        _1823 = (((_1801 * cbLight._m0[_1742].y) * _1757) + ((_1792 * cbLight._m0[_1727].y) * _1741)) * 0.3183098733425140380859375;
        _1824 = (((_1801 * cbLight._m0[_1742].z) * _1757) + ((_1792 * cbLight._m0[_1727].z) * _1741)) * 0.3183098733425140380859375;
    }
    uint _1828 = _1715 + 8u;
    float _1844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1715].w)) * _571) * 0.949999988079071044921875);
    float _1845 = _1844 * _1844;
    float _1846 = cbLight._m0[_1715].x + _384;
    float _1847 = cbLight._m0[_1715].y + _385;
    float _1848 = cbLight._m0[_1715].z + _386;
    float _1852 = inversesqrt(dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848)));
    float _1853 = _1852 * _1846;
    float _1854 = _1852 * _1847;
    float _1855 = _1852 * _1848;
    float _1856 = dot(vec3(_469, _470, _569), vec3(cbLight._m0[_1715].xyz));
    float _3936 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _1860 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1861 = dot(vec3(_469, _470, _569), vec3(_1853, _1854, _1855));
    float _3958 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1864 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1865 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_1853, _1854, _1855));
    float _3969 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1869 = _1845 * _1845;
    float _1873 = ((_1864 * _1864) * (_1869 + (-1.0))) + 1.0;
    float _1881 = exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0);
    float _1882 = 0.959999978542327880859375 - _653;
    float _1884 = 0.959999978542327880859375 - _654;
    float _1885 = 0.959999978542327880859375 - _655;
    float _1892 = 1.0 - _1845;
    float _1903 = (0.5 / (((_1860 * ((_1859 * _1892) + _1845)) + 9.9999999392252902907785028219223e-09) + (((_1860 * _1892) + _1845) * _1859))) * _1859;
    float _3980 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1905 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1869 / ((_1873 * _1873) * 3.141590118408203125));
    uint _1918 = _1715 + 9u;
    float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1748].w)) * _571) * 0.949999988079071044921875);
    float _1933 = _1932 * _1932;
    float _1934 = cbLight._m0[_1748].x + _384;
    float _1935 = cbLight._m0[_1748].y + _385;
    float _1936 = cbLight._m0[_1748].z + _386;
    float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
    float _1941 = _1940 * _1934;
    float _1942 = _1940 * _1935;
    float _1943 = _1940 * _1936;
    float _1944 = dot(vec3(_469, _470, _569), vec3(cbLight._m0[_1748].xyz));
    float _3991 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1948 = dot(vec3(_469, _470, _569), vec3(_1941, _1942, _1943));
    float _4002 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1952 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1941, _1942, _1943));
    float _4013 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1956 = _1933 * _1933;
    float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
    float _1967 = exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0);
    float _1974 = 1.0 - _1933;
    float _1984 = (0.5 / (((_1860 * ((_1947 * _1974) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1860 * _1974) + _1933) * _1947))) * _1947;
    float _4024 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1986 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
    float _1996 = (((((_1967 * _1882) + _656) * cbLight._m0[_1918].x) * _1986) * _1757) + (((((_1881 * _1882) + _656) * cbLight._m0[_1828].x) * _1905) * _1741);
    float _1997 = (((((_1967 * _1884) + _658) * cbLight._m0[_1918].y) * _1986) * _1757) + (((((_1881 * _1884) + _658) * cbLight._m0[_1828].y) * _1905) * _1741);
    float _1998 = (((((_1967 * _1885) + _659) * cbLight._m0[_1918].z) * _1986) * _1757) + (((((_1881 * _1885) + _659) * cbLight._m0[_1828].z) * _1905) * _1741);
    float _2134;
    float _2136;
    float _2138;
    float _2140;
    float _2142;
    float _2144;
    if (_1713.y == 0u)
    {
        float _2075 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2076 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2075;
        float _2077 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2075;
        float _2078 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2075;
        uvec4 _2090 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2091 = _2090.x;
        uint _2102 = uint((float(_2090.y) * floor(float(uint(cbSceneParam._m0[85u].y * _534) / _2091))) + floor(float(uint(cbSceneParam._m0[85u].x * _533) / _2091)));
        float _2112 = (log2(_2078 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2113 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        uint _2116 = uint(isnan(14.0) ? _2113 : (isnan(_2113) ? 14.0 : min(_2113, 14.0)));
        uvec4 _2121 = texelFetch(g_lightClusterGridBuffer, int(((_2116 << 2u) + (_2102 << 6u)) >> 2u));
        uint _2122 = _2121.x;
        uint _2123 = _2090.z;
        float _2172;
        float _2174;
        float _2176;
        float _2178;
        float _2180;
        float _2182;
        if (((((1u << ((_2123 >> 4u) & 15u)) + 4294967295u) & _2122) == 0u) || ((_2123 & 240u) == 0u))
        {
            _2172 = 0.0;
            _2174 = 0.0;
            _2176 = 0.0;
            _2178 = 0.0;
            _2180 = 0.0;
            _2182 = 0.0;
        }
        else
        {
            float _2173;
            float _2175;
            float _2177;
            float _2179;
            float _2181;
            float _2183;
            float _2394 = 0.0;
            float _2395 = 0.0;
            float _2396 = 0.0;
            float _2397 = 0.0;
            float _2398 = 0.0;
            float _2399 = 0.0;
            uint _2400 = 0u;
            uint _2409;
            bool _2410;
            for (;;)
            {
                _2409 = texelFetch(g_lightClassification, int((((_2116 << 5u) + (_2102 << 9u)) + (_2400 << 2u)) >> 2u)).x;
                _2410 = _2409 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2410)
                {
                    frontier_phi_58_pred = _2399;
                    frontier_phi_58_pred_1 = _2398;
                    frontier_phi_58_pred_2 = _2397;
                    frontier_phi_58_pred_3 = _2396;
                    frontier_phi_58_pred_4 = _2395;
                    frontier_phi_58_pred_5 = _2394;
                }
                else
                {
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    uint _2597;
                    _2591 = _2394;
                    _2592 = _2395;
                    _2593 = _2396;
                    _2594 = _2397;
                    _2595 = _2398;
                    _2596 = _2399;
                    _2597 = _2409;
                    float _2522;
                    float _2523;
                    float _2524;
                    float _2525;
                    float _2526;
                    float _2527;
                    for (;;)
                    {
                        uint _2601 = uint(findLSB(_2597)) + (_2400 << 5u);
                        uint _2598 = (_2597 + 4294967295u) & _2597;
                        uint _2603 = _2601 * 48u;
                        vec4 _2617 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2603)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 3u)).x));
                        uint _2623 = (_2601 * 48u) + 4u;
                        vec4 _2636 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2623)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 3u)).x));
                        float _2637 = _2636.x;
                        float _2638 = _2636.y;
                        float _2639 = _2636.z;
                        uint _2642 = (_2601 * 48u) + 8u;
                        vec3 _2653 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x));
                        uint _2658 = (_2601 * 48u) + 12u;
                        vec2 _2666 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2658)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 1u)).x));
                        float _2672 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
                        float _2673 = _2672 * _2076;
                        float _2674 = _2672 * _2077;
                        float _2675 = _2672 * _2078;
                        float _2676 = _2617.x - _2076;
                        float _2677 = _2617.y - _2077;
                        float _2678 = _2617.z - _2078;
                        float _2679 = dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678));
                        float _2682 = inversesqrt(_2679);
                        float _2683 = _2682 * _2676;
                        float _2684 = _2682 * _2677;
                        float _2685 = _2682 * _2678;
                        float _2686 = dot(vec3(_612, _615, _618), vec3(_2683, _2684, _2685));
                        float _2691 = 1.0 - (_2679 * _2617.w);
                        float _4045 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
                        float _2692 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2693 = sqrt(_2679) * _2636.w;
                        float _2696 = 1.39999997615814208984375 / (_2693 + 1.39999997615814208984375);
                        float _2697 = _2696 * _2696;
                        float _2698 = 1.0 - _2697;
                        float _2700 = (_2698 * _2698) * _572;
                        float _2703 = ((_2698 * _2686) + _2697) + _2700;
                        float _2708 = _2693 * _2693;
                        float _2713 = ((isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0))) * _2692) / (((_2700 * 2.0) + 1.0) * ((_2708 * 0.699999988079071044921875) + 1.0));
                        float _2717 = dot(vec3(_2683, _2684, _2685), vec3(_2673, _2674, _2675));
                        float _4061 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2724 = dot(vec3((-0.0) - _2673, (-0.0) - _2674, (-0.0) - _2675), vec3(_612, _615, _618)) + 1.0;
                        float _2726 = (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))) * 0.5;
                        float _2733 = ((_2726 * _2726) * _2666.x) * exp2((_2666.y * 32.0) * log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))));
                        float _2735 = _572 / (_572 + 1.0);
                        float _2751 = (-0.0) - _2076;
                        float _2752 = (-0.0) - _2077;
                        float _2753 = (-0.0) - _2078;
                        float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
                        float _2758 = _2757 * _2751;
                        float _2759 = _2757 * _2752;
                        float _2760 = _2757 * _2753;
                        float _2768 = exp2(log2(1.0 / ((_2708 * 3.5) + 5.0)) * 0.25);
                        float _2769 = 1.0 - _687;
                        float _2776 = sqrt(1.0 - ((1.0 - (_2769 * _2769)) * (1.0 - (_2768 * _2768))));
                        float _2777 = _2776 * _2776;
                        float _2778 = _2777 * _2777;
                        float _2779 = _2758 + _2683;
                        float _2780 = _2759 + _2684;
                        float _2781 = _2760 + _2685;
                        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
                        float _2789 = dot(vec3(_612, _615, _618), vec3(_2758, _2759, _2760));
                        float _4077 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2792 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                        float _2793 = dot(vec3(_612, _615, _618), vec3(_2785 * _2779, _2785 * _2780, _2785 * _2781));
                        float _4088 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2796 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                        float _2800 = ((_2796 * _2796) * (_2778 + (-1.0))) + 1.0;
                        float _2801 = _2696 * _2777;
                        float _2802 = _2801 * _2801;
                        float _2805 = ((1.0 - _2802) * _2686) + _2802;
                        float _4099 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2806 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2807 = 1.0 - _2777;
                        float _2817 = (0.5 / (((_2806 * ((_2792 * _2807) + _2777)) + 9.9999999392252902907785028219223e-09) + (((_2806 * _2807) + _2777) * _2792))) * _2806;
                        float _4110 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2828 = (((_2778 * 3.1415927410125732421875) * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) / ((_2800 * _2800) * ((_2708 * 2.1991131305694580078125) + 3.141590118408203125))) * _2692;
                        _2525 = (((((_2637 * 0.3183098733425140380859375) * _2735) * _2733) + _2637) * _2713) + _2594;
                        _2526 = (((((_2638 * 0.3183098733425140380859375) * _2735) * _2733) + _2638) * _2713) + _2595;
                        _2527 = (((((_2639 * 0.3183098733425140380859375) * _2735) * _2733) + _2639) * _2713) + _2596;
                        _2522 = (_2828 * _2653.x) + _2591;
                        _2523 = (_2828 * _2653.y) + _2592;
                        _2524 = (_2828 * _2653.z) + _2593;
                        if (_2598 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2591 = _2522;
                            _2592 = _2523;
                            _2593 = _2524;
                            _2594 = _2525;
                            _2595 = _2526;
                            _2596 = _2527;
                            _2597 = _2598;
                        }
                    }
                    frontier_phi_58_pred = _2527;
                    frontier_phi_58_pred_1 = _2526;
                    frontier_phi_58_pred_2 = _2525;
                    frontier_phi_58_pred_3 = _2524;
                    frontier_phi_58_pred_4 = _2523;
                    frontier_phi_58_pred_5 = _2522;
                }
                _2183 = frontier_phi_58_pred;
                _2181 = frontier_phi_58_pred_1;
                _2179 = frontier_phi_58_pred_2;
                _2177 = frontier_phi_58_pred_3;
                _2175 = frontier_phi_58_pred_4;
                _2173 = frontier_phi_58_pred_5;
                uint _2401 = _2400 + 1u;
                if (_2401 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2394 = _2173;
                    _2395 = _2175;
                    _2396 = _2177;
                    _2397 = _2179;
                    _2398 = _2181;
                    _2399 = _2183;
                    _2400 = _2401;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2172 = _2173;
            _2174 = _2175;
            _2176 = _2177;
            _2178 = _2179;
            _2180 = _2181;
            _2182 = _2183;
        }
        uvec4 _2186 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2187 = _2186.z;
        uint _2189 = (_2187 >> 8u) & 15u;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        if (((4294967295u << _2189) & _2122) == 0u)
        {
            _2362 = _2172;
            _2364 = _2174;
            _2366 = _2176;
            _2368 = _2178;
            _2370 = _2180;
            _2372 = _2182;
        }
        else
        {
            float _2387 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
            float _2388 = _2387 * _2076;
            float _2389 = _2387 * _2077;
            float _2390 = _2387 * _2078;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2189 < ((_2187 >> 12u) & 15u))
            {
                float _2363;
                float _2365;
                float _2367;
                float _2369;
                float _2371;
                float _2373;
                float _2574 = _2172;
                float _2575 = _2174;
                float _2576 = _2176;
                float _2577 = _2178;
                float _2578 = _2180;
                float _2579 = _2182;
                uint _2580 = _2189;
                uint _2589;
                bool _2590;
                for (;;)
                {
                    _2589 = texelFetch(g_lightClassification, int((((_2116 << 5u) + (_2102 << 9u)) + (_2580 << 2u)) >> 2u)).x;
                    _2590 = _2589 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2590)
                    {
                        frontier_phi_66_pred = _2579;
                        frontier_phi_66_pred_1 = _2578;
                        frontier_phi_66_pred_2 = _2577;
                        frontier_phi_66_pred_3 = _2576;
                        frontier_phi_66_pred_4 = _2575;
                        frontier_phi_66_pred_5 = _2574;
                    }
                    else
                    {
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _2884 = _2574;
                        float _2885 = _2575;
                        float _2886 = _2576;
                        float _2887 = _2577;
                        float _2888 = _2578;
                        float _2889 = _2579;
                        uint _2890 = _2589;
                        uint _2891;
                        vec4 _2916;
                        float _2917;
                        vec4 _2932;
                        float _2933;
                        float _2934;
                        float _2935;
                        vec3 _2947;
                        vec2 _2956;
                        vec4 _2971;
                        vec4 _2987;
                        float _3034;
                        bool _3035;
                        for (;;)
                        {
                            uint _2901 = ((_2580 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2890));
                            _2891 = (_2890 + 4294967295u) & _2890;
                            uint _2903 = _2901 * 40u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            _2917 = _2916.w;
                            uint _2919 = (_2901 * 40u) + 4u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            _2933 = _2932.x;
                            _2934 = _2932.y;
                            _2935 = _2932.z;
                            uint _2937 = (_2901 * 40u) + 8u;
                            _2947 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x));
                            uint _2949 = (_2901 * 40u) + 12u;
                            _2956 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x));
                            uint _2958 = (_2901 * 40u) + 16u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2974 = (_2901 * 40u) + 20u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2990 = (_2901 * 40u) + 24u;
                            vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3009 = (_2901 * 40u) + 28u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            _3034 = fma(_2078, _3022.z, fma(_2077, _3022.y, _3022.x * _2076)) + _3022.w;
                            _3035 = !((fma(_2078, _3003.z, fma(_2077, _3003.y, _3003.x * _2076)) + _3003.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_3035)
                            {
                                float _3061 = _2916.x - _2076;
                                float _3062 = _2916.y - _2077;
                                float _3063 = _2916.z - _2078;
                                float _3064 = dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063));
                                float _3067 = inversesqrt(_3064);
                                float _3068 = _3067 * _3061;
                                float _3069 = _3067 * _3062;
                                float _3070 = _3067 * _3063;
                                float _3074 = 1.0 - (_3064 / (_2917 * _2917));
                                float _4121 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3079 = sqrt(_3064) * _2932.w;
                                float _3081 = 1.39999997615814208984375 / (_3079 + 1.39999997615814208984375);
                                float _3082 = _3081 * _3081;
                                float _3083 = 1.0 - _3082;
                                float _3085 = (_3083 * _3083) * _572;
                                float _3088 = ((_3083 * dot(vec3(_3068, _3069, _3070), vec3(_612, _615, _618))) + _3082) + _3085;
                                float _3093 = _3079 * _3079;
                                float _3098 = (fma(_2078, _2971.z, fma(_2077, _2971.y, _2971.x * _2076)) + _2971.w) / _3034;
                                float _3099 = (fma(_2078, _2987.z, fma(_2077, _2987.y, _2987.x * _2076)) + _2987.w) / _3034;
                                float _3103 = 1.0 - dot(vec2(_3098, _3099), vec2(_3098, _3099));
                                float _4137 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3104 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3105 = _3104 * (((isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))) * _3075) / (((_3085 * 2.0) + 1.0) * ((_3093 * 0.699999988079071044921875) + 1.0)));
                                float _3106 = (-0.0) - _2388;
                                float _3107 = (-0.0) - _2389;
                                float _3108 = (-0.0) - _2390;
                                float _3109 = dot(vec3(_3068, _3069, _3070), vec3(_2388, _2389, _2390));
                                float _4148 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3116 = dot(vec3(_3106, _3107, _3108), vec3(_612, _615, _618)) + 1.0;
                                float _3118 = (isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * 0.5;
                                float _3125 = ((_3118 * _3118) * _2956.x) * exp2((_2956.y * 32.0) * log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))));
                                float _3127 = _572 / (_572 + 1.0);
                                float _3148 = exp2(log2(1.0 / ((_3093 * 3.5) + 5.0)) * 0.25);
                                float _3149 = 1.0 - _687;
                                float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                                float _3157 = _3156 * _3156;
                                float _3158 = _3157 * _3157;
                                float _3159 = _3068 - _2388;
                                float _3160 = _3069 - _2389;
                                float _3161 = _3070 - _2390;
                                float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                                float _3169 = dot(vec3(_612, _615, _618), vec3(_3106, _3107, _3108));
                                float _4164 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3172 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3173 = dot(vec3(_612, _615, _618), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                                float _4175 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                                float _3181 = _3081 * _3157;
                                float _3182 = _3181 * _3181;
                                float _3188 = ((1.0 - _3182) * dot(vec3(_612, _615, _618), vec3(_3068, _3069, _3070))) + _3182;
                                float _4186 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3190 = 1.0 - _3157;
                                float _3200 = (0.5 / (((_3189 * ((_3172 * _3190) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3157) * _3172))) * _3189;
                                float _4197 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3210 = (_3104 * _3075) * (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) / ((_3180 * _3180) * ((_3093 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = ((((_2934 * 0.3183098733425140380859375) * _3127) * _3125) + _2934) * _3105;
                                frontier_phi_72_pred_1 = ((((_2935 * 0.3183098733425140380859375) * _3127) * _3125) + _2935) * _3105;
                                frontier_phi_72_pred_2 = _3210 * _2947.x;
                                frontier_phi_72_pred_3 = ((((_2933 * 0.3183098733425140380859375) * _3127) * _3125) + _2933) * _3105;
                                frontier_phi_72_pred_4 = _3210 * _2947.z;
                                frontier_phi_72_pred_5 = _3210 * _2947.y;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _3218 = frontier_phi_72_pred;
                            _3219 = frontier_phi_72_pred_1;
                            _3214 = frontier_phi_72_pred_2;
                            _3217 = frontier_phi_72_pred_3;
                            _3216 = frontier_phi_72_pred_4;
                            _3215 = frontier_phi_72_pred_5;
                            _2874 = _3217 + _2887;
                            _2875 = _3218 + _2888;
                            _2876 = _3219 + _2889;
                            _2871 = _3214 + _2884;
                            _2872 = _3215 + _2885;
                            _2873 = _3216 + _2886;
                            if (_2891 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2891;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _2876;
                        frontier_phi_66_pred_1 = _2875;
                        frontier_phi_66_pred_2 = _2874;
                        frontier_phi_66_pred_3 = _2873;
                        frontier_phi_66_pred_4 = _2872;
                        frontier_phi_66_pred_5 = _2871;
                    }
                    _2373 = frontier_phi_66_pred;
                    _2371 = frontier_phi_66_pred_1;
                    _2369 = frontier_phi_66_pred_2;
                    _2367 = frontier_phi_66_pred_3;
                    _2365 = frontier_phi_66_pred_4;
                    _2363 = frontier_phi_66_pred_5;
                    uint _2581 = _2580 + 1u;
                    if (_2581 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2574 = _2363;
                        _2575 = _2365;
                        _2576 = _2367;
                        _2577 = _2369;
                        _2578 = _2371;
                        _2579 = _2373;
                        _2580 = _2581;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2373;
                frontier_phi_51_52_ladder_1 = _2371;
                frontier_phi_51_52_ladder_2 = _2369;
                frontier_phi_51_52_ladder_3 = _2365;
                frontier_phi_51_52_ladder_4 = _2367;
                frontier_phi_51_52_ladder_5 = _2363;
            }
            else
            {
                frontier_phi_51_52_ladder = _2182;
                frontier_phi_51_52_ladder_1 = _2180;
                frontier_phi_51_52_ladder_2 = _2178;
                frontier_phi_51_52_ladder_3 = _2174;
                frontier_phi_51_52_ladder_4 = _2176;
                frontier_phi_51_52_ladder_5 = _2172;
            }
            _2362 = frontier_phi_51_52_ladder_5;
            _2364 = frontier_phi_51_52_ladder_3;
            _2366 = frontier_phi_51_52_ladder_4;
            _2368 = frontier_phi_51_52_ladder_2;
            _2370 = frontier_phi_51_52_ladder_1;
            _2372 = frontier_phi_51_52_ladder;
        }
        float _2377 = isnan(1.0) ? _666 : (isnan(_666) ? 1.0 : min(_666, 1.0));
        _2134 = (_2377 * _2368) + _1822;
        _2136 = (_2377 * _2370) + _1823;
        _2138 = (_2377 * _2372) + _1824;
        _2140 = ((_2362 * _656) * _2377) + _1996;
        _2142 = ((_2364 * _658) * _2377) + _1997;
        _2144 = ((_2366 * _659) * _2377) + _1998;
    }
    else
    {
        _2134 = _1822;
        _2136 = _1823;
        _2138 = _1824;
        _2140 = _1996;
        _2142 = _1997;
        _2144 = _1998;
    }
    float _2257;
    float _2258;
    float _2259;
    if (_572 > 0.0)
    {
        uint _2193 = _1715 + 4u;
        float _2199 = (-0.0) - _384;
        float _2200 = (-0.0) - _385;
        float _2201 = (-0.0) - _386;
        float _2202 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_2199, _2200, _2201));
        float _4213 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2206 = _677 + 1.0;
        float _2208 = (isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * 0.5;
        float _2213 = _2208 * _2208;
        float _2214 = _2213 * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 32.0);
        float _2216 = _572 / (_572 + 1.0);
        float _2217 = isnan(_1724) ? 1.0 : (isnan(1.0) ? _1724 : min(1.0, _1724));
        uint _2227 = _1715 + 5u;
        float _2233 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_2199, _2200, _2201));
        float _4234 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2240 = _2213 * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 32.0);
        float _2241 = isnan(_1725) ? 1.0 : (isnan(1.0) ? _1725 : min(1.0, _1725));
        _2257 = ((((_2240 * cbLight._m0[_2227].x) * _2216) * _2241) + (((_2214 * cbLight._m0[_2193].x) * _2216) * _2217)) * 0.3183098733425140380859375;
        _2258 = ((((_2240 * cbLight._m0[_2227].y) * _2216) * _2241) + (((_2214 * cbLight._m0[_2193].y) * _2216) * _2217)) * 0.3183098733425140380859375;
        _2259 = ((((_2240 * cbLight._m0[_2227].z) * _2216) * _2241) + (((_2214 * cbLight._m0[_2193].z) * _2216) * _2217)) * 0.3183098733425140380859375;
    }
    else
    {
        _2257 = 0.0;
        _2258 = 0.0;
        _2259 = 0.0;
    }
    float _4250 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4261 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4272 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4283 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _2265 = 0.959999978542327880859375 - (_576 * 0.959999978542327880859375);
    float _2276 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * ((_2134 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _666)) + _2257);
    float _2277 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * ((_2136 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _666)) + _2258);
    float _2278 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * ((_2138 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _666)) + _2259);
    float _2282 = _2265 - (exp2(log2(1.0 - _681) * 5.0) * _2265);
    float _2302 = cbInstanceData._m0[_631 + 6u].w * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)));
    float _2307 = _533 / cbSceneParam._m0[86u].x;
    float _2308 = _534 / cbSceneParam._m0[86u].y;
    vec4 _2322 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, (log2((isnan(cbSceneParam._m0[77u].w) ? _592 : (isnan(_592) ? cbSceneParam._m0[77u].w : min(_592, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2324 = _2322.x;
    float _2325 = _2322.y;
    float _2326 = _2322.z;
    float _2327 = _2322.w;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_592 > cbSceneParam._m0[78u].w)
    {
        float _2415 = isnan(_592) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _592 : min(cbSceneParam._m0[80u].w, _592));
        float _2416 = _2415 / _592;
        float _2427 = _2416 * _274;
        float _2428 = _275 * _2416;
        float _2429 = (-0.0) - _2428;
        float _2430 = _2416 * _276;
        float _2432 = (cbSceneParam._m0[77u].w * _2429) / _2415;
        float _2433 = _2432 + cbSceneParam._m0[79u].w;
        float _2434 = cbSceneParam._m0[79u].w - _2428;
        float _2440 = sqrt(((_2427 * _2427) + (_2428 * _2428)) + (_2430 * _2430));
        float _2443 = (1.0 - (cbSceneParam._m0[77u].w / _2415)) * _2440;
        float _2448 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2450 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2833;
        if (abs((_2429 - _2432) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2833 = ((((_2433 > 0.0) ? exp2(_2448 * _2433) : (2.0 - exp2(_2450 * _2433))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2443;
        }
        else
        {
            float _2547 = 1.0 / cbSceneParam._m0[80u].x;
            float _2548 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : max(_2433, _2434));
            float _2549 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : min(_2433, _2434));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            float _2559 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : min(_2549, 0.0));
            _2833 = ((abs(_2440 / _2429) * cbSceneParam._m0[80u].y) * ((((_2558 - _2559) * 2.0) - ((exp2(_2448 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0)))) - exp2(_2448 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0))))) * _2547)) - ((exp2(_2450 * _2558) - exp2(_2450 * _2559)) * _2547))) + (_2443 * cbSceneParam._m0[80u].z);
        }
        vec4 _2835 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, 1.0), 0.0);
        float _2844 = exp2((_2833 * (-1.44269502162933349609375)) * (1.0 - _2835.w));
        float _2845 = log2(_2844);
        float _2861 = log2(_2327);
        _2452 = (exp2(_2861 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2845 * cbSceneParam._m0[78u].x)) * _2835.x) / cbSceneParam._m0[78u].x)) + _2324;
        _2454 = (exp2(_2861 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2845 * cbSceneParam._m0[78u].y)) * _2835.y) / cbSceneParam._m0[78u].y)) + _2325;
        _2456 = (exp2(_2861 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2845 * cbSceneParam._m0[78u].z)) * _2835.z) / cbSceneParam._m0[78u].z)) + _2326;
        _2458 = _2844 * _2327;
    }
    else
    {
        _2452 = _2324;
        _2454 = _2325;
        _2456 = _2326;
        _2458 = _2327;
    }
    float _2469 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2470 = _2469 == 3.0;
    float _2471 = log2(_2458);
    float _2478 = exp2(_2471 * cbSceneParam._m0[78u].x) * ((_2276 + ((_2140 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _557.x) * _2282) - _2276) * _521));
    float _2479 = exp2(_2471 * cbSceneParam._m0[78u].y) * ((_2277 + ((_2142 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _557.y) * _2282) - _2277) * _521));
    float _2480 = exp2(_2471 * cbSceneParam._m0[78u].z) * ((_2278 + ((_2144 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _557.z) * _2282) - _2278) * _521));
    float _2489 = (_2469 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2489 * (_2470 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2452)));
    SV_Target.y = _2489 * (_2470 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2454)));
    SV_Target.z = _2489 * (_2470 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2456)));
    SV_Target.w = _2302;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2302;
}


