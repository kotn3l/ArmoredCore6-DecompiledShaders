#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Crystal_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1104;
float _3746;
float _3747;
float _3748;
float _3749;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _204 = _203 * _196;
    float _205 = _203 * _197;
    float _206 = _203 * _198;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = _217 * TANGENT.x;
    float _219 = _217 * TANGENT.y;
    float _220 = _217 * TANGENT.z;
    float _225;
    float _226;
    float _227;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
    }
    else
    {
        _225 = _211;
        _226 = _212;
        _227 = _213;
    }
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _297 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _303 = _297.w;
    float _314 = dot(vec3(_282, _283, _284), vec3(_204, _205, _206));
    float _317 = dot(vec3(_282, _283, _284), vec3(_218, _219, _220));
    float _320 = dot(vec3(_282, _283, _284), vec3(_225, _226, _227));
    float _326 = inversesqrt(dot(vec3(_314, _317, _320), vec3(_314, _317, _320)));
    float _348 = dot(vec4(texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _368 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_314 * cbMtdParam._m0[12u].x) * _326) * _348) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_317 * cbMtdParam._m0[12u].x) * _326) * _348) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _391 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _392 = _391 * _282;
    float _393 = _391 * _283;
    float _394 = _391 * _284;
    float _395 = dot(vec4(_392, _393, _394, 0.0), vec4(_225, _226, _227, 0.0));
    float _398 = _395 - cbMtdParam._m0[13u].x;
    float _3758 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _405 = exp2(log2(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _421 = ((((_297.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _368.x) * cbMtdParam._m0[9u].x) * ((_405 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _426 = ((((_297.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _368.y) * cbMtdParam._m0[9u].y) * ((_405 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _431 = ((((_297.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _368.z) * cbMtdParam._m0[9u].z) * ((_405 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _448 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _456 = (_448.x * 2.0) + (-1.0);
    float _457 = (_448.y * 2.0) + (-1.0);
    float _458 = dot(vec2(_456, _457), vec2(_456, _457));
    float _3774 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _463 = sqrt(1.0 - (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))));
    float _466 = fma(_463, _225, fma(_457, _218, _456 * _204));
    float _469 = fma(_463, _226, fma(_457, _219, _456 * _205));
    float _472 = fma(_463, _227, fma(_457, _220, _456 * _206));
    float _476 = inversesqrt(dot(vec3(_466, _469, _472), vec3(_466, _469, _472)));
    float _477 = _476 * _466;
    float _478 = _476 * _469;
    float _480 = cbMtdParam._m0[14u].z + _448.z;
    vec4 _492 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _496 = cbMtdParam._m0[13u].w * _492.x;
    vec4 _509 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _518 = _395 - cbMtdParam._m0[12u].w;
    float _3785 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _528 = ((cbMtdParam._m0[14u].w * _509.x) + cbMtdParam._m0[14u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[14u].x));
    float _3801 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _552 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (_477 * cbMtdParam._m0[15u].x));
    float _553 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (_478 * cbMtdParam._m0[15u].x));
    float _560 = isnan(cbInstanceData._m0[8u].x) ? _552 : (isnan(_552) ? cbInstanceData._m0[8u].x : max(_552, cbInstanceData._m0[8u].x));
    float _561 = isnan(cbInstanceData._m0[8u].y) ? _553 : (isnan(_553) ? cbInstanceData._m0[8u].y : max(_553, cbInstanceData._m0[8u].y));
    vec4 _565 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _560 : (isnan(_560) ? cbInstanceData._m0[8u].z : min(_560, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _561 : (isnan(_561) ? cbInstanceData._m0[8u].w : min(_561, cbInstanceData._m0[8u].w))));
    float _577 = _476 * _472;
    float _3832 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _578 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _579 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _580 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3859 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _3870 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3881 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3892 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _584 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _600 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _605 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _607 = _605.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _783 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _789 = (cbMatDynParam._m0[5u].x * _783) + cbMatDynParam._m0[5u].y;
        float _3903 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _794 = (cbMatDynParam._m0[5u].z * _783) + cbMatDynParam._m0[5u].w;
        float _3914 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) - _790)) + _790) < ((_607 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _617 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _618 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _638 = fma(_577, cbSceneParam._m0[5u].z, fma(_478, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _477));
    float _641 = fma(_577, cbSceneParam._m0[6u].z, fma(_478, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _477));
    float _644 = fma(_577, cbSceneParam._m0[7u].z, fma(_478, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _477));
    uint _657 = uint(roundEven(NORMAL.w)) * 13u;
    uint _658 = _657 + 9u;
    uint _659 = _658 + uint(cbMatDynParam._m0[0u].w);
    float _665 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_659].x;
    float _666 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_659].y;
    float _667 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_659].z;
    float _3925 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _671 = 1.0 - _584;
    float _672 = _668 * _671;
    float _673 = _669 * _671;
    float _674 = _670 * _671;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _584;
    float _680 = (_669 + (-0.039999999105930328369140625)) * _584;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _584;
    float _682 = _679 + 0.039999999105930328369140625;
    float _684 = _680 + 0.039999999105930328369140625;
    float _685 = _681 + 0.039999999105930328369140625;
    vec4 _693 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _617, cbSceneParam._m0[86u].y * _618));
    float _696 = _693.x * TEXCOORD.z;
    float _697 = dot(vec3(_477, _478, _577), vec3(_392, _393, _394));
    float _700 = _697 * 2.0;
    float _704 = (_700 * _477) - _392;
    float _705 = (_700 * _478) - _393;
    float _706 = (_700 * _577) - _394;
    float _707 = dot(vec3(_392, _393, _394), vec3(_477, _478, _577));
    float _710 = abs(_707);
    float _3958 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _711 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _717 = sqrt(_579);
    float _729 = exp2((_717 * 5.0) * log2(1.0 - (_711 * 0.999000012874603271484375))) / (4.0 - (_717 * 3.0));
    float _735 = (1.0 - _729) * ((_717 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _736 = _729 * _717;
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1103;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _828 = fma(_772, cbModelParam._m0[26u].z, fma(_768, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764));
        float _832 = fma(_772, cbModelParam._m0[27u].z, fma(_768, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764));
        float _836 = fma(_772, cbModelParam._m0[28u].z, fma(_768, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764));
        float _861 = _764 + _477;
        float _862 = _768 + _478;
        float _863 = _772 + _577;
        float _873 = fma(_863, cbModelParam._m0[26u].z, fma(_862, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861)) - _828;
        float _874 = fma(_863, cbModelParam._m0[27u].z, fma(_862, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861)) - _832;
        float _875 = fma(_863, cbModelParam._m0[28u].z, fma(_862, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861)) - _836;
        float _879 = inversesqrt(dot(vec3(_873, _874, _875), vec3(_873, _874, _875)));
        float _892 = ((_879 * _873) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_828 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _893 = ((_879 * _874) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_832 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _894 = ((_879 * _875) / cbModelParam._m0[34u].z) + ((((((_836 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        float _931 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_897.x + (-0.5));
        float _933 = _931 * (_897.y + (-0.5));
        float _934 = _931 * (_897.z + (-0.5));
        float _941 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_904.x + (-0.5));
        float _943 = _941 * (_904.y + (-0.5));
        float _944 = _941 * (_904.z + (-0.5));
        float _951 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_911.x + (-0.5));
        float _953 = _951 * (_911.y + (-0.5));
        float _954 = _951 * (_911.z + (-0.5));
        float _961 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_918.x + (-0.5));
        float _963 = _961 * (_918.y + (-0.5));
        float _964 = _961 * (_918.z + (-0.5));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = _932 * 0.5;
        float _969 = _942 * 0.5;
        float _970 = _952 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _985 = (dot(vec3(_477, _478, _577), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _995 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _4006 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_997 + 1.0))) + _1002) * _965;
        float _1012 = _933 * 0.5;
        float _1013 = _943 * 0.5;
        float _1014 = _953 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_477, _478, _577), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _4039 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1039 + 1.0))) + _1044) * _966;
        float _1054 = _934 * 0.5;
        float _1055 = _944 * 0.5;
        float _1056 = _954 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_477, _478, _577), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _4072 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1081 + 1.0))) + _1086) * _967;
        _1103 = _934;
        _1105 = _933;
        _1106 = _932;
        _1107 = _944;
        _1108 = _943;
        _1109 = _942;
        _1110 = _954;
        _1111 = _953;
        _1112 = _952;
        _1113 = _967;
        _1114 = _966;
        _1115 = _965;
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1117 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
    }
    else
    {
        _1103 = _1104;
        _1105 = _1104;
        _1106 = _1104;
        _1107 = _1104;
        _1108 = _1104;
        _1109 = _1104;
        _1110 = _1104;
        _1111 = _1104;
        _1112 = _1104;
        _1113 = _1104;
        _1114 = _1104;
        _1115 = _1104;
        _1116 = 0.0;
        _1117 = 0.0;
        _1118 = 0.0;
    }
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1147 = fma(_772, cbModelParam._m0[30u].z, fma(_768, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _764));
        float _1151 = fma(_772, cbModelParam._m0[31u].z, fma(_768, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _764));
        float _1155 = fma(_772, cbModelParam._m0[32u].z, fma(_768, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _764));
        float _1178 = _764 + _477;
        float _1179 = _768 + _478;
        float _1180 = _772 + _577;
        float _1190 = fma(_1180, cbModelParam._m0[30u].z, fma(_1179, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178)) - _1147;
        float _1191 = fma(_1180, cbModelParam._m0[31u].z, fma(_1179, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178)) - _1151;
        float _1192 = fma(_1180, cbModelParam._m0[32u].z, fma(_1179, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178)) - _1155;
        float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
        float _1209 = ((_1196 * _1190) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1147 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1196 * _1191) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1151 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1196 * _1192) / cbModelParam._m0[35u].z) + ((((((_1155 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        float _1246 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1213.x + (-0.5));
        float _1248 = _1246 * (_1213.y + (-0.5));
        float _1249 = _1246 * (_1213.z + (-0.5));
        float _1256 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1220.x + (-0.5));
        float _1258 = _1256 * (_1220.y + (-0.5));
        float _1259 = _1256 * (_1220.z + (-0.5));
        float _1266 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1227.x + (-0.5));
        float _1268 = _1266 * (_1227.y + (-0.5));
        float _1269 = _1266 * (_1227.z + (-0.5));
        float _1276 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1234.x + (-0.5));
        float _1278 = _1276 * (_1234.y + (-0.5));
        float _1279 = _1276 * (_1234.z + (-0.5));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = _1247 * 0.5;
        float _1284 = _1257 * 0.5;
        float _1285 = _1267 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_477, _478, _577), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4135 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1310 + 1.0))) + _1315) * _1280;
        float _1325 = _1248 * 0.5;
        float _1326 = _1258 * 0.5;
        float _1327 = _1268 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_477, _478, _577), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4168 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1352 + 1.0))) + _1357) * _1281;
        float _1367 = _1249 * 0.5;
        float _1368 = _1259 * 0.5;
        float _1369 = _1269 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_477, _478, _577), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4201 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1394 + 1.0))) + _1399) * _1282;
        _1416 = _1249;
        _1417 = _1248;
        _1418 = _1247;
        _1419 = _1259;
        _1420 = _1258;
        _1421 = _1257;
        _1422 = _1269;
        _1423 = _1268;
        _1424 = _1267;
        _1425 = _1282;
        _1426 = _1281;
        _1427 = _1280;
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
    }
    else
    {
        _1416 = _1104;
        _1417 = _1104;
        _1418 = _1104;
        _1419 = _1104;
        _1420 = _1104;
        _1421 = _1104;
        _1422 = _1104;
        _1423 = _1104;
        _1424 = _1104;
        _1425 = _1104;
        _1426 = _1104;
        _1427 = _1104;
        _1428 = 0.0;
        _1429 = 0.0;
        _1430 = 0.0;
    }
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1116)) + _1116;
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1117)) + _1117;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1118)) + _1118;
    float _1463 = fma(_1442, cbSceneParam._m0[89u].z, fma(_1441, cbSceneParam._m0[89u].y, _1440 * cbSceneParam._m0[89u].x));
    float _1466 = fma(_1442, cbSceneParam._m0[90u].z, fma(_1441, cbSceneParam._m0[90u].y, _1440 * cbSceneParam._m0[90u].x));
    float _1469 = fma(_1442, cbSceneParam._m0[91u].z, fma(_1441, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1440));
    float _1484 = _704 * 0.5;
    float _1485 = _705 * 0.5;
    float _1486 = _706 * 0.5;
    float _1487 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1490 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1493 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1527;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1500 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1103, _1107, _1110, _1113));
        float _1504 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1105, _1108, _1111, _1114));
        float _1508 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1106, _1109, _1112, _1115));
        float _1515 = dot(vec4(cbModelParam._m0[39u]), vec4(_1484, _1485, _1486, 1.0));
        _1527 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1527 = 1.0;
    }
    float _1538;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1529 = dot(vec4(cbModelParam._m0[40u]), vec4(_1484, _1485, _1486, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1529) ? 0.0 : (isnan(0.0) ? _1529 : max(0.0, _1529))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1542 = (_1538 * cbModelParam._m0[1u].x) + (_1527 * (1.0 - cbModelParam._m0[1u].x));
    float _1552 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _579);
    float _1553 = isnan(_1552) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1552 : min(cbModelParam._m0[25u].z, _1552));
    float _1633;
    float _1635;
    float _1637;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1600 = fma(_772, cbModelParam._m0[13u].z, fma(_768, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764)) + cbModelParam._m0[13u].w;
        float _1604 = fma(_772, cbModelParam._m0[14u].z, fma(_768, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764)) + cbModelParam._m0[14u].w;
        float _1608 = fma(_772, cbModelParam._m0[15u].z, fma(_768, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764)) + cbModelParam._m0[15u].w;
        float _1611 = fma(_706, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704));
        float _1614 = fma(_706, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704));
        float _1617 = fma(_706, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704));
        float _1645;
        if (_1611 > 0.0)
        {
            _1645 = abs((1.0 - _1600) / _1611);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1600 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1645 = frontier_phi_19_17_ladder;
        }
        float _1820;
        if (_1614 > 0.0)
        {
            _1820 = abs((1.0 - _1604) / _1614);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1604 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1820 = frontier_phi_28_24_ladder;
        }
        float _2084;
        if (_1617 > 0.0)
        {
            _2084 = abs((1.0 - _1608) / _1617);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1608 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2084 = frontier_phi_40_35_ladder;
        }
        float _2086 = isnan(_1820) ? _1645 : (isnan(_1645) ? _1820 : min(_1645, _1820));
        float _2087 = isnan(_2084) ? _2086 : (isnan(_2086) ? _2084 : min(_2086, _2084));
        float _2091 = (_2087 * _1611) + _1600;
        float _2092 = (_2087 * _1614) + _1604;
        float _2093 = (_2087 * _1617) + _1608;
        float _2094 = _2087 * 9.9999997473787516355514526367188e-05;
        float _2096 = (-1.0) - _2094;
        float _2098 = _2094 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2093 > _2098) || ((_2093 < _2096) || ((_2092 > _2098) || ((_2092 < _2096) || ((_2091 < _2096) || (_2091 > _2098))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2247 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2093, cbModelParam._m0[9u].z, fma(_2092, cbModelParam._m0[9u].y, _2091 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2093, cbModelParam._m0[10u].z, fma(_2092, cbModelParam._m0[10u].y, _2091 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2093, cbModelParam._m0[11u].z, fma(_2092, cbModelParam._m0[11u].y, _2091 * cbModelParam._m0[11u].x))), _1553);
            frontier_phi_18_40_ladder = _2247.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2247.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2247.x * cbModelParam._m0[1u].y;
        }
        _1633 = frontier_phi_18_40_ladder_2;
        _1635 = frontier_phi_18_40_ladder_1;
        _1637 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1621 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_704, _705, _706), _1553);
        _1633 = _1621.x * cbModelParam._m0[1u].y;
        _1635 = _1621.y * cbModelParam._m0[1u].y;
        _1637 = _1621.z * cbModelParam._m0[1u].y;
    }
    float _1641 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _579);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1641 : min(cbModelParam._m0[25u].w, _1641));
    float _1735;
    float _1737;
    float _1739;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1699 = fma(_772, cbModelParam._m0[21u].z, fma(_768, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764)) + cbModelParam._m0[21u].w;
        float _1703 = fma(_772, cbModelParam._m0[22u].z, fma(_768, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764)) + cbModelParam._m0[22u].w;
        float _1707 = fma(_772, cbModelParam._m0[23u].z, fma(_768, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764)) + cbModelParam._m0[23u].w;
        float _1710 = fma(_706, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704));
        float _1713 = fma(_706, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704));
        float _1716 = fma(_706, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704));
        float _1825;
        if (_1710 > 0.0)
        {
            _1825 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1825 = frontier_phi_30_26_ladder;
        }
        float _2111;
        if (_1713 > 0.0)
        {
            _2111 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2111 = frontier_phi_42_37_ladder;
        }
        float _2441;
        if (_1716 > 0.0)
        {
            _2441 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_51_49_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_51_49_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_51_49_ladder = 5000.0;
            }
            _2441 = frontier_phi_51_49_ladder;
        }
        float _2443 = isnan(_2111) ? _1825 : (isnan(_1825) ? _2111 : min(_1825, _2111));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1710) + _1699;
        float _2449 = (_2444 * _1713) + _1703;
        float _2450 = (_2444 * _1716) + _1707;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2451;
        float _2454 = _2451 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2450 > _2454) || ((_2450 < _2452) || ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 < _2452) || (_2448 > _2454))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2551 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2450, cbModelParam._m0[17u].z, fma(_2449, cbModelParam._m0[17u].y, _2448 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2450, cbModelParam._m0[18u].z, fma(_2449, cbModelParam._m0[18u].y, _2448 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2450, cbModelParam._m0[19u].z, fma(_2449, cbModelParam._m0[19u].y, _2448 * cbModelParam._m0[19u].x))), _1642);
            frontier_phi_27_51_ladder = _2551.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2551.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2551.x * cbModelParam._m0[1u].z;
        }
        _1735 = frontier_phi_27_51_ladder_2;
        _1737 = frontier_phi_27_51_ladder_1;
        _1739 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_704, _705, _706), _1642);
        _1735 = _1719.x * cbModelParam._m0[1u].z;
        _1737 = _1719.y * cbModelParam._m0[1u].z;
        _1739 = _1719.z * cbModelParam._m0[1u].z;
    }
    float _1752 = (((_735 * _682) + _736) * _696) * ((cbModelParam._m0[1u].w * (_1735 - _1633)) + _1633);
    float _1754 = (((_735 * _684) + _736) * _696) * ((cbModelParam._m0[1u].w * (_1737 - _1635)) + _1635);
    float _1756 = (((_735 * _685) + _736) * _696) * ((cbModelParam._m0[1u].w * (_1739 - _1637)) + _1637);
    float _1759 = fma(_1756, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1752 * cbSceneParam._m0[89u].x));
    float _1762 = fma(_1756, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1752 * cbSceneParam._m0[90u].x));
    float _1765 = fma(_1756, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, _1752 * cbSceneParam._m0[91u].x));
    float _1799 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1803 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1807 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1811 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1812 = _1799 / _1811;
    float _1813 = _1803 / _1811;
    float _1814 = _1807 / _1811;
    float _1961;
    float _1962;
    float _1963;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1841 = ((uint(_1814 > cbSceneParam._m0[59u].y) + uint(_1814 > cbSceneParam._m0[59u].x)) + uint(_1814 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1842 = _1841 + 43u;
        uint _1850 = _1841 + 44u;
        uint _1858 = _1841 + 45u;
        uint _1866 = _1841 + 46u;
        float _1877 = fma(_1811, cbSceneParam._m0[_1842].w, fma(_1807, cbSceneParam._m0[_1842].z, fma(_1803, cbSceneParam._m0[_1842].y, _1799 * cbSceneParam._m0[_1842].x)));
        float _1881 = fma(_1811, cbSceneParam._m0[_1850].w, fma(_1807, cbSceneParam._m0[_1850].z, fma(_1803, cbSceneParam._m0[_1850].y, _1799 * cbSceneParam._m0[_1850].x)));
        float _1889 = fma(_1811, cbSceneParam._m0[_1866].w, fma(_1807, cbSceneParam._m0[_1866].z, fma(_1803, cbSceneParam._m0[_1866].y, _1799 * cbSceneParam._m0[_1866].x)));
        float _1894 = cbSceneParam._m0[33u].z * _1889;
        float _1896 = cbSceneParam._m0[33u].w * _1889;
        float _1899 = fma(_1811, cbSceneParam._m0[_1858].w, fma(_1807, cbSceneParam._m0[_1858].z, fma(_1803, cbSceneParam._m0[_1858].y, _1799 * cbSceneParam._m0[_1858].x))) / _1889;
        float _1947 = (cbSceneParam._m0[33u].x - sqrt(((_1813 * _1813) + (_1812 * _1812)) + (_1814 * _1814))) * cbSceneParam._m0[33u].y;
        float _4327 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1954 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1894 + _1877) / _1889, (_1896 + _1881) / _1889), _1899), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1896 + _1877) / _1889, (_1881 - _1894) / _1889), _1899), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1877 - _1894) / _1889, (_1881 - _1896) / _1889), _1899), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1877 - _1896) / _1889, (_1894 + _1881) / _1889), _1899), 0.0)).x), vec4(0.25)));
        _1961 = 1.0 - (_1954 * cbSceneParam._m0[34u].x);
        _1962 = 1.0 - (_1954 * cbSceneParam._m0[34u].y);
        _1963 = 1.0 - (_1954 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1961 = 1.0;
        _1962 = 1.0;
        _1963 = 1.0;
    }
    float _2027;
    float _2029;
    float _2031;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2015 = fma(_1811, cbSceneParam._m0[63u].w, fma(_1807, cbSceneParam._m0[63u].z, fma(_1803, cbSceneParam._m0[63u].y, _1799 * cbSceneParam._m0[63u].x)));
        float _2016 = fma(_1811, cbSceneParam._m0[60u].w, fma(_1807, cbSceneParam._m0[60u].z, fma(_1803, cbSceneParam._m0[60u].y, _1799 * cbSceneParam._m0[60u].x))) / _2015;
        float _2017 = fma(_1811, cbSceneParam._m0[61u].w, fma(_1807, cbSceneParam._m0[61u].z, fma(_1803, cbSceneParam._m0[61u].y, _1799 * cbSceneParam._m0[61u].x))) / _2015;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2016 >= cbSceneParam._m0[64u].x) && (_2017 >= cbSceneParam._m0[64u].y)) && (_2016 <= cbSceneParam._m0[64u].z)) && (_2017 <= cbSceneParam._m0[64u].w))
        {
            float _2124 = fma(_1811, cbSceneParam._m0[62u].w, fma(_1807, cbSceneParam._m0[62u].z, fma(_1803, cbSceneParam._m0[62u].y, _1799 * cbSceneParam._m0[62u].x))) / _2015;
            float _2128 = isnan(cbSceneParam._m0[41u].w) ? _2124 : (isnan(_2124) ? cbSceneParam._m0[41u].w : max(_2124, cbSceneParam._m0[41u].w));
            float _2171 = (cbSceneParam._m0[33u].x - sqrt(((_1813 * _1813) + (_1812 * _1812)) + (_1814 * _1814))) * cbSceneParam._m0[33u].y;
            float _4343 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
            float _2178 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2016, cbSceneParam._m0[33u].w + _2017), _2128), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2016, _2017 - cbSceneParam._m0[33u].z), _2128), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2016 - cbSceneParam._m0[33u].z, _2017 - cbSceneParam._m0[33u].w), _2128), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2016 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2017), _2128), 0.0)).x), vec4(0.25)));
            float _2182 = 1.0 - (_2178 * cbSceneParam._m0[34u].x);
            float _2183 = 1.0 - (_2178 * cbSceneParam._m0[34u].y);
            float _2184 = 1.0 - (_2178 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2184) ? _1963 : (isnan(_1963) ? _2184 : min(_1963, _2184));
            frontier_phi_39_38_ladder_1 = isnan(_2183) ? _1962 : (isnan(_1962) ? _2183 : min(_1962, _2183));
            frontier_phi_39_38_ladder_2 = isnan(_2182) ? _1961 : (isnan(_1961) ? _2182 : min(_1961, _2182));
        }
        else
        {
            frontier_phi_39_38_ladder = _1963;
            frontier_phi_39_38_ladder_1 = _1962;
            frontier_phi_39_38_ladder_2 = _1961;
        }
        _2027 = frontier_phi_39_38_ladder_2;
        _2029 = frontier_phi_39_38_ladder_1;
        _2031 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2027 = _1961;
        _2029 = _1962;
        _2031 = _1963;
    }
    uvec4 _2036 = floatBitsToUint(cbInstanceData._m0[_657 + 5u]);
    uint _2038 = _2036.x * 14u;
    uint _2039 = _2038 + 13u;
    float _2044 = _696 + (-1.0);
    float _2047 = (cbLight._m0[_2039].x * _2044) + 1.0;
    float _2048 = (cbLight._m0[_2039].y * _2044) + 1.0;
    uint _2050 = _2038 + 4u;
    float _2061 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_477, _478, _577));
    float _2064 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    float _2065 = cbLight._m0[_2050].x * _2027;
    float _2066 = cbLight._m0[_2050].y * _2029;
    float _2067 = cbLight._m0[_2050].z * _2031;
    uint _2068 = _2038 + 5u;
    uint _2074 = _2038 | 1u;
    float _2080 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_477, _478, _577));
    float _2083 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    float _2256;
    float _2257;
    float _2258;
    if (_580 == 0.0)
    {
        float _4379 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _4390 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2193 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * 0.3183098733425140380859375;
        float _2195 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.3183098733425140380859375;
        _2256 = ((cbLight._m0[_2068].x * _2083) * _2195) + ((_2065 * _2064) * _2193);
        _2257 = ((_2083 * cbLight._m0[_2068].y) * _2195) + ((_2066 * _2064) * _2193);
        _2258 = ((_2083 * cbLight._m0[_2068].z) * _2195) + ((_2067 * _2064) * _2193);
    }
    else
    {
        float _2205 = _2061 + _580;
        float _2208 = (_580 * 2.0) + 1.0;
        float _2209 = (isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0))) / _2208;
        float _2216 = _2080 + _580;
        float _2218 = (isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0))) / _2208;
        _2256 = (((_2218 * cbLight._m0[_2068].x) * _2083) + ((_2065 * _2209) * _2064)) * 0.3183098733425140380859375;
        _2257 = (((_2218 * cbLight._m0[_2068].y) * _2083) + ((_2066 * _2209) * _2064)) * 0.3183098733425140380859375;
        _2258 = (((_2218 * cbLight._m0[_2068].z) * _2083) + ((_2067 * _2209) * _2064)) * 0.3183098733425140380859375;
    }
    uint _2262 = _2038 + 8u;
    float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _579) * 0.949999988079071044921875);
    float _2279 = _2278 * _2278;
    float _2280 = cbLight._m0[_2038].x + _392;
    float _2281 = cbLight._m0[_2038].y + _393;
    float _2282 = cbLight._m0[_2038].z + _394;
    float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
    float _2287 = _2286 * _2280;
    float _2288 = _2286 * _2281;
    float _2289 = _2286 * _2282;
    float _2290 = dot(vec3(_477, _478, _577), vec3(cbLight._m0[_2038].xyz));
    float _4411 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _4422 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _2294 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2295 = dot(vec3(_477, _478, _577), vec3(_2287, _2288, _2289));
    float _4433 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2287, _2288, _2289));
    float _4444 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2279 * _2279;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2315 = exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0);
    float _2316 = 0.959999978542327880859375 - _679;
    float _2318 = 0.959999978542327880859375 - _680;
    float _2319 = 0.959999978542327880859375 - _681;
    float _2326 = 1.0 - _2279;
    float _2337 = (0.5 / (((_2294 * ((_2293 * _2326) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2326) + _2279) * _2293))) * _2293;
    float _4455 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    uint _2355 = _2038 + 9u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _579) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2074].x + _392;
    float _2372 = cbLight._m0[_2074].y + _393;
    float _2373 = cbLight._m0[_2074].z + _394;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_477, _478, _577), vec3(cbLight._m0[_2074].xyz));
    float _4466 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2385 = dot(vec3(_477, _478, _577), vec3(_2378, _2379, _2380));
    float _4477 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2378, _2379, _2380));
    float _4488 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2370 * _2370;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2404 = exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0);
    float _2411 = 1.0 - _2370;
    float _2421 = (0.5 / (((_2294 * ((_2384 * _2411) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2411) + _2370) * _2384))) * _2384;
    float _4499 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2423 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    float _2433 = (((((_2404 * _2316) + _682) * cbLight._m0[_2355].x) * _2423) * _2083) + ((((cbLight._m0[_2262].x * _2027) * ((_2315 * _2316) + _682)) * _2339) * _2064);
    float _2434 = (((((_2404 * _2318) + _684) * cbLight._m0[_2355].y) * _2423) * _2083) + ((((cbLight._m0[_2262].y * _2029) * ((_2315 * _2318) + _684)) * _2339) * _2064);
    float _2435 = (((((_2404 * _2319) + _685) * cbLight._m0[_2355].z) * _2423) * _2083) + ((((cbLight._m0[_2262].z * _2031) * ((_2315 * _2319) + _685)) * _2339) * _2064);
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    if (_2036.y == 0u)
    {
        uvec4 _2478 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2479 = _2478.x;
        uint _2490 = uint((float(_2478.y) * floor(float(uint(cbSceneParam._m0[85u].y * _618) / _2479))) + floor(float(uint(cbSceneParam._m0[85u].x * _617) / _2479)));
        float _2500 = (log2(_1814 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2501 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        uint _2504 = uint(isnan(14.0) ? _2501 : (isnan(_2501) ? 14.0 : min(_2501, 14.0)));
        uvec4 _2509 = texelFetch(g_lightClusterGridBuffer, int(((_2504 << 2u) + (_2490 << 6u)) >> 2u));
        uint _2510 = _2509.x;
        uint _2511 = _2478.z;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        if (((((1u << ((_2511 >> 4u) & 15u)) + 4294967295u) & _2510) == 0u) || ((_2511 & 240u) == 0u))
        {
            _2556 = 0.0;
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
        }
        else
        {
            float _2557;
            float _2559;
            float _2561;
            float _2563;
            float _2565;
            float _2567;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            uint _2761 = 0u;
            uint _2770;
            bool _2771;
            for (;;)
            {
                _2770 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                _2771 = _2770 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2771)
                {
                    frontier_phi_66_pred = _2757;
                    frontier_phi_66_pred_1 = _2756;
                    frontier_phi_66_pred_2 = _2755;
                    frontier_phi_66_pred_3 = _2758;
                    frontier_phi_66_pred_4 = _2760;
                    frontier_phi_66_pred_5 = _2759;
                }
                else
                {
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    uint _2961;
                    _2955 = _2755;
                    _2956 = _2756;
                    _2957 = _2757;
                    _2958 = _2758;
                    _2959 = _2759;
                    _2960 = _2760;
                    _2961 = _2770;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    for (;;)
                    {
                        uint _2965 = uint(findLSB(_2961)) + (_2761 << 5u);
                        uint _2962 = (_2961 + 4294967295u) & _2961;
                        uint _2967 = _2965 * 48u;
                        vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        uint _2987 = (_2965 * 48u) + 4u;
                        vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        float _3001 = _3000.x;
                        float _3002 = _3000.y;
                        float _3003 = _3000.z;
                        uint _3006 = (_2965 * 48u) + 8u;
                        vec3 _3017 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x));
                        uint _3022 = (_2965 * 48u) + 12u;
                        vec2 _3030 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x));
                        float _3036 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
                        float _3037 = _3036 * _1812;
                        float _3038 = _3036 * _1813;
                        float _3039 = _3036 * _1814;
                        float _3040 = _2981.x - _1812;
                        float _3041 = _2981.y - _1813;
                        float _3042 = _2981.z - _1814;
                        float _3043 = dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042));
                        float _3046 = inversesqrt(_3043);
                        float _3047 = _3046 * _3040;
                        float _3048 = _3046 * _3041;
                        float _3049 = _3046 * _3042;
                        float _3050 = dot(vec3(_638, _641, _644), vec3(_3047, _3048, _3049));
                        float _3055 = 1.0 - (_3043 * _2981.w);
                        float _4520 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3057 = sqrt(_3043) * _3000.w;
                        float _3060 = 1.39999997615814208984375 / (_3057 + 1.39999997615814208984375);
                        float _3061 = _3060 * _3060;
                        float _3062 = 1.0 - _3061;
                        float _3064 = (_3062 * _3062) * _580;
                        float _3067 = ((_3062 * _3050) + _3061) + _3064;
                        float _3072 = _3057 * _3057;
                        float _3077 = ((isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))) * _3056) / (((_3064 * 2.0) + 1.0) * ((_3072 * 0.699999988079071044921875) + 1.0));
                        float _3081 = dot(vec3(_3047, _3048, _3049), vec3(_3037, _3038, _3039));
                        float _4536 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3088 = dot(vec3((-0.0) - _3037, (-0.0) - _3038, (-0.0) - _3039), vec3(_638, _641, _644)) + 1.0;
                        float _3090 = (isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))) * 0.5;
                        float _3097 = ((_3090 * _3090) * _3030.x) * exp2((_3030.y * 32.0) * log2(isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))));
                        float _3099 = _580 / (_580 + 1.0);
                        float _3115 = (-0.0) - _1812;
                        float _3116 = (-0.0) - _1813;
                        float _3117 = (-0.0) - _1814;
                        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3131 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                        float _3132 = 1.0 - _717;
                        float _3139 = sqrt(1.0 - ((1.0 - (_3132 * _3132)) * (1.0 - (_3131 * _3131))));
                        float _3140 = _3139 * _3139;
                        float _3141 = _3140 * _3140;
                        float _3142 = _3122 + _3047;
                        float _3143 = _3123 + _3048;
                        float _3144 = _3124 + _3049;
                        float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                        float _3152 = dot(vec3(_638, _641, _644), vec3(_3122, _3123, _3124));
                        float _4552 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3155 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3156 = dot(vec3(_638, _641, _644), vec3(_3148 * _3142, _3148 * _3143, _3148 * _3144));
                        float _4563 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3159 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3163 = ((_3159 * _3159) * (_3141 + (-1.0))) + 1.0;
                        float _3164 = _3060 * _3140;
                        float _3165 = _3164 * _3164;
                        float _3168 = ((1.0 - _3165) * _3050) + _3165;
                        float _4574 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3169 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3170 = 1.0 - _3140;
                        float _3180 = (0.5 / (((_3169 * ((_3155 * _3170) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_3169 * _3170) + _3140) * _3155))) * _3169;
                        float _4585 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3191 = (((_3141 * 3.1415927410125732421875) * (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) / ((_3163 * _3163) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125))) * _3056;
                        _2873 = (((((_3001 * 0.3183098733425140380859375) * _3099) * _3097) + _3001) * _3077) + _2958;
                        _2874 = (((((_3002 * 0.3183098733425140380859375) * _3099) * _3097) + _3002) * _3077) + _2959;
                        _2875 = (((((_3003 * 0.3183098733425140380859375) * _3099) * _3097) + _3003) * _3077) + _2960;
                        _2870 = (_3191 * _3017.x) + _2955;
                        _2871 = (_3191 * _3017.y) + _2956;
                        _2872 = (_3191 * _3017.z) + _2957;
                        if (_2962 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2955 = _2870;
                            _2956 = _2871;
                            _2957 = _2872;
                            _2958 = _2873;
                            _2959 = _2874;
                            _2960 = _2875;
                            _2961 = _2962;
                        }
                    }
                    frontier_phi_66_pred = _2872;
                    frontier_phi_66_pred_1 = _2871;
                    frontier_phi_66_pred_2 = _2870;
                    frontier_phi_66_pred_3 = _2873;
                    frontier_phi_66_pred_4 = _2875;
                    frontier_phi_66_pred_5 = _2874;
                }
                _2561 = frontier_phi_66_pred;
                _2559 = frontier_phi_66_pred_1;
                _2557 = frontier_phi_66_pred_2;
                _2563 = frontier_phi_66_pred_3;
                _2567 = frontier_phi_66_pred_4;
                _2565 = frontier_phi_66_pred_5;
                uint _2762 = _2761 + 1u;
                if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2755 = _2557;
                    _2756 = _2559;
                    _2757 = _2561;
                    _2758 = _2563;
                    _2759 = _2565;
                    _2760 = _2567;
                    _2761 = _2762;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2556 = _2557;
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
        }
        uvec4 _2570 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2571 = _2570.z;
        uint _2573 = (_2571 >> 8u) & 15u;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((4294967295u << _2573) & _2510) == 0u)
        {
            _2723 = _2556;
            _2725 = _2558;
            _2727 = _2560;
            _2729 = _2562;
            _2731 = _2564;
            _2733 = _2566;
        }
        else
        {
            float _2748 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
            float _2749 = _2748 * _1812;
            float _2750 = _2748 * _1813;
            float _2751 = _2748 * _1814;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2573 < ((_2571 >> 12u) & 15u))
            {
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2938 = _2556;
                float _2939 = _2558;
                float _2940 = _2560;
                float _2941 = _2562;
                float _2942 = _2564;
                float _2943 = _2566;
                uint _2944 = _2573;
                uint _2953;
                bool _2954;
                for (;;)
                {
                    _2953 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2944 << 2u)) >> 2u)).x;
                    _2954 = _2953 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2954)
                    {
                        frontier_phi_78_pred = _2940;
                        frontier_phi_78_pred_1 = _2939;
                        frontier_phi_78_pred_2 = _2938;
                        frontier_phi_78_pred_3 = _2943;
                        frontier_phi_78_pred_4 = _2942;
                        frontier_phi_78_pred_5 = _2941;
                    }
                    else
                    {
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3261 = _2938;
                        float _3262 = _2939;
                        float _3263 = _2940;
                        float _3264 = _2941;
                        float _3265 = _2942;
                        float _3266 = _2943;
                        uint _3267 = _2953;
                        uint _3268;
                        vec4 _3293;
                        float _3294;
                        vec4 _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        vec3 _3324;
                        vec2 _3333;
                        vec4 _3348;
                        vec4 _3364;
                        float _3411;
                        bool _3412;
                        for (;;)
                        {
                            uint _3278 = ((_2944 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3267));
                            _3268 = (_3267 + 4294967295u) & _3267;
                            uint _3280 = _3278 * 40u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            _3294 = _3293.w;
                            uint _3296 = (_3278 * 40u) + 4u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            _3310 = _3309.x;
                            _3311 = _3309.y;
                            _3312 = _3309.z;
                            uint _3314 = (_3278 * 40u) + 8u;
                            _3324 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x));
                            uint _3326 = (_3278 * 40u) + 12u;
                            _3333 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x));
                            uint _3335 = (_3278 * 40u) + 16u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3351 = (_3278 * 40u) + 20u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3367 = (_3278 * 40u) + 24u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3386 = (_3278 * 40u) + 28u;
                            vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            _3411 = fma(_1814, _3399.z, fma(_1813, _3399.y, _3399.x * _1812)) + _3399.w;
                            _3412 = !((fma(_1814, _3380.z, fma(_1813, _3380.y, _3380.x * _1812)) + _3380.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3412)
                            {
                                float _3438 = _3293.x - _1812;
                                float _3439 = _3293.y - _1813;
                                float _3440 = _3293.z - _1814;
                                float _3441 = dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440));
                                float _3444 = inversesqrt(_3441);
                                float _3445 = _3444 * _3438;
                                float _3446 = _3444 * _3439;
                                float _3447 = _3444 * _3440;
                                float _3451 = 1.0 - (_3441 / (_3294 * _3294));
                                float _4596 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3456 = sqrt(_3441) * _3309.w;
                                float _3458 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                                float _3459 = _3458 * _3458;
                                float _3460 = 1.0 - _3459;
                                float _3462 = (_3460 * _3460) * _580;
                                float _3465 = ((_3460 * dot(vec3(_3445, _3446, _3447), vec3(_638, _641, _644))) + _3459) + _3462;
                                float _3470 = _3456 * _3456;
                                float _3475 = (fma(_1814, _3348.z, fma(_1813, _3348.y, _3348.x * _1812)) + _3348.w) / _3411;
                                float _3476 = (fma(_1814, _3364.z, fma(_1813, _3364.y, _3364.x * _1812)) + _3364.w) / _3411;
                                float _3480 = 1.0 - dot(vec2(_3475, _3476), vec2(_3475, _3476));
                                float _4612 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3482 = _3481 * (((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3452) / (((_3462 * 2.0) + 1.0) * ((_3470 * 0.699999988079071044921875) + 1.0)));
                                float _3483 = (-0.0) - _2749;
                                float _3484 = (-0.0) - _2750;
                                float _3485 = (-0.0) - _2751;
                                float _3486 = dot(vec3(_3445, _3446, _3447), vec3(_2749, _2750, _2751));
                                float _4623 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3493 = dot(vec3(_3483, _3484, _3485), vec3(_638, _641, _644)) + 1.0;
                                float _3495 = (isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0))) * 0.5;
                                float _3502 = ((_3495 * _3495) * _3333.x) * exp2((_3333.y * 32.0) * log2(isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))));
                                float _3504 = _580 / (_580 + 1.0);
                                float _3525 = exp2(log2(1.0 / ((_3470 * 3.5) + 5.0)) * 0.25);
                                float _3526 = 1.0 - _717;
                                float _3533 = sqrt(1.0 - ((1.0 - (_3526 * _3526)) * (1.0 - (_3525 * _3525))));
                                float _3534 = _3533 * _3533;
                                float _3535 = _3534 * _3534;
                                float _3536 = _3445 - _2749;
                                float _3537 = _3446 - _2750;
                                float _3538 = _3447 - _2751;
                                float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                                float _3546 = dot(vec3(_638, _641, _644), vec3(_3483, _3484, _3485));
                                float _4639 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3549 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3550 = dot(vec3(_638, _641, _644), vec3(_3542 * _3536, _3542 * _3537, _3542 * _3538));
                                float _4650 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3553 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3557 = ((_3553 * _3553) * (_3535 + (-1.0))) + 1.0;
                                float _3558 = _3458 * _3534;
                                float _3559 = _3558 * _3558;
                                float _3565 = ((1.0 - _3559) * dot(vec3(_638, _641, _644), vec3(_3445, _3446, _3447))) + _3559;
                                float _4661 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3567 = 1.0 - _3534;
                                float _3577 = (0.5 / (((_3566 * ((_3549 * _3567) + _3534)) + 9.9999999392252902907785028219223e-09) + (((_3566 * _3567) + _3534) * _3549))) * _3566;
                                float _4672 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3587 = (_3481 * _3452) * (((_3535 * 3.1415927410125732421875) * (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) / ((_3557 * _3557) * ((_3470 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = ((((_3312 * 0.3183098733425140380859375) * _3504) * _3502) + _3312) * _3482;
                                frontier_phi_87_pred_1 = ((((_3310 * 0.3183098733425140380859375) * _3504) * _3502) + _3310) * _3482;
                                frontier_phi_87_pred_2 = _3587 * _3324.z;
                                frontier_phi_87_pred_3 = _3587 * _3324.y;
                                frontier_phi_87_pred_4 = _3587 * _3324.x;
                                frontier_phi_87_pred_5 = ((((_3311 * 0.3183098733425140380859375) * _3504) * _3502) + _3311) * _3482;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3596 = frontier_phi_87_pred;
                            _3594 = frontier_phi_87_pred_1;
                            _3593 = frontier_phi_87_pred_2;
                            _3592 = frontier_phi_87_pred_3;
                            _3591 = frontier_phi_87_pred_4;
                            _3595 = frontier_phi_87_pred_5;
                            _3242 = _3594 + _3264;
                            _3243 = _3595 + _3265;
                            _3244 = _3596 + _3266;
                            _3239 = _3591 + _3261;
                            _3240 = _3592 + _3262;
                            _3241 = _3593 + _3263;
                            if (_3268 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3261 = _3239;
                                _3262 = _3240;
                                _3263 = _3241;
                                _3264 = _3242;
                                _3265 = _3243;
                                _3266 = _3244;
                                _3267 = _3268;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _3241;
                        frontier_phi_78_pred_1 = _3240;
                        frontier_phi_78_pred_2 = _3239;
                        frontier_phi_78_pred_3 = _3244;
                        frontier_phi_78_pred_4 = _3243;
                        frontier_phi_78_pred_5 = _3242;
                    }
                    _2728 = frontier_phi_78_pred;
                    _2726 = frontier_phi_78_pred_1;
                    _2724 = frontier_phi_78_pred_2;
                    _2734 = frontier_phi_78_pred_3;
                    _2732 = frontier_phi_78_pred_4;
                    _2730 = frontier_phi_78_pred_5;
                    uint _2945 = _2944 + 1u;
                    if (_2945 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2938 = _2724;
                        _2939 = _2726;
                        _2940 = _2728;
                        _2941 = _2730;
                        _2942 = _2732;
                        _2943 = _2734;
                        _2944 = _2945;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2728;
                frontier_phi_60_61_ladder_1 = _2726;
                frontier_phi_60_61_ladder_2 = _2724;
                frontier_phi_60_61_ladder_3 = _2734;
                frontier_phi_60_61_ladder_4 = _2732;
                frontier_phi_60_61_ladder_5 = _2730;
            }
            else
            {
                frontier_phi_60_61_ladder = _2560;
                frontier_phi_60_61_ladder_1 = _2558;
                frontier_phi_60_61_ladder_2 = _2556;
                frontier_phi_60_61_ladder_3 = _2566;
                frontier_phi_60_61_ladder_4 = _2564;
                frontier_phi_60_61_ladder_5 = _2562;
            }
            _2723 = frontier_phi_60_61_ladder_2;
            _2725 = frontier_phi_60_61_ladder_1;
            _2727 = frontier_phi_60_61_ladder;
            _2729 = frontier_phi_60_61_ladder_5;
            _2731 = frontier_phi_60_61_ladder_4;
            _2733 = frontier_phi_60_61_ladder_3;
        }
        float _2738 = isnan(1.0) ? _696 : (isnan(_696) ? 1.0 : min(_696, 1.0));
        _2522 = (_2738 * _2729) + _2256;
        _2524 = (_2738 * _2731) + _2257;
        _2526 = (_2738 * _2733) + _2258;
        _2528 = ((_2723 * _682) * _2738) + _2433;
        _2530 = ((_2725 * _684) * _2738) + _2434;
        _2532 = ((_2727 * _685) * _2738) + _2435;
    }
    else
    {
        _2522 = _2256;
        _2524 = _2257;
        _2526 = _2258;
        _2528 = _2433;
        _2530 = _2434;
        _2532 = _2435;
    }
    float _2644;
    float _2645;
    float _2646;
    if (_580 > 0.0)
    {
        uint _2577 = _2038 + 4u;
        float _2583 = (-0.0) - _392;
        float _2584 = (-0.0) - _393;
        float _2585 = (-0.0) - _394;
        float _2586 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2583, _2584, _2585));
        float _4688 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2590 = _707 + 1.0;
        float _2592 = (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0))) * 0.5;
        float _2597 = _2592 * _2592;
        float _2598 = _2597 * exp2(log2(isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * 32.0);
        float _2600 = _580 / (_580 + 1.0);
        float _2601 = isnan(_2047) ? 1.0 : (isnan(1.0) ? _2047 : min(1.0, _2047));
        uint _2614 = _2038 + 5u;
        float _2620 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2583, _2584, _2585));
        float _4709 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2627 = _2597 * exp2(log2(isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * 32.0);
        float _2628 = isnan(_2048) ? 1.0 : (isnan(1.0) ? _2048 : min(1.0, _2048));
        _2644 = ((((_2627 * cbLight._m0[_2614].x) * _2600) * _2628) + ((((cbLight._m0[_2577].x * _2027) * _2598) * _2600) * _2601)) * 0.3183098733425140380859375;
        _2645 = ((((_2627 * cbLight._m0[_2614].y) * _2600) * _2628) + ((((cbLight._m0[_2577].y * _2029) * _2598) * _2600) * _2601)) * 0.3183098733425140380859375;
        _2646 = ((((_2627 * cbLight._m0[_2614].z) * _2600) * _2628) + ((((cbLight._m0[_2577].z * _2031) * _2598) * _2600) * _2601)) * 0.3183098733425140380859375;
    }
    else
    {
        _2644 = 0.0;
        _2645 = 0.0;
        _2646 = 0.0;
    }
    float _4725 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4736 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4747 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4758 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _2652 = 0.959999978542327880859375 - (_584 * 0.959999978542327880859375);
    float _2663 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * ((_2522 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _696)) + _2644);
    float _2664 = (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * ((_2524 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _696)) + _2645);
    float _2665 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * ((_2526 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _696)) + _2646);
    float _2669 = _2652 - (exp2(log2(1.0 - _711) * 5.0) * _2652);
    float _2680 = (_2663 + ((_2528 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1542)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _565.x) * _2669) - _2663) * _529);
    float _2682 = (_2664 + ((_2530 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1542)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _565.y) * _2669) - _2664) * _529);
    float _2684 = (_2665 + ((_2532 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1542)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _565.z) * _2669) - _2665) * _529);
    float _2689 = cbInstanceData._m0[_657 + 6u].w * (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)));
    float _2694 = _617 / cbSceneParam._m0[86u].x;
    float _2695 = _618 / cbSceneParam._m0[86u].y;
    vec4 _2709 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2694, _2695, (log2((isnan(cbSceneParam._m0[77u].w) ? _600 : (isnan(_600) ? cbSceneParam._m0[77u].w : min(_600, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2711 = _2709.x;
    float _2712 = _2709.y;
    float _2713 = _2709.z;
    float _2714 = _2709.w;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    if (_600 > cbSceneParam._m0[78u].w)
    {
        float _2776 = isnan(_600) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _600 : min(cbSceneParam._m0[80u].w, _600));
        float _2777 = _2776 / _600;
        float _2788 = _2777 * _282;
        float _2789 = _283 * _2777;
        float _2790 = (-0.0) - _2789;
        float _2791 = _2777 * _284;
        float _2793 = (cbSceneParam._m0[77u].w * _2790) / _2776;
        float _2794 = _2793 + cbSceneParam._m0[79u].w;
        float _2795 = cbSceneParam._m0[79u].w - _2789;
        float _2801 = sqrt(((_2788 * _2788) + (_2789 * _2789)) + (_2791 * _2791));
        float _2804 = (1.0 - (cbSceneParam._m0[77u].w / _2776)) * _2801;
        float _2809 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2811 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3196;
        if (abs((_2790 - _2793) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3196 = ((((_2794 > 0.0) ? exp2(_2809 * _2794) : (2.0 - exp2(_2811 * _2794))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2804;
        }
        else
        {
            float _2895 = 1.0 / cbSceneParam._m0[80u].x;
            float _2896 = isnan(_2795) ? _2794 : (isnan(_2794) ? _2795 : max(_2794, _2795));
            float _2897 = isnan(_2795) ? _2794 : (isnan(_2794) ? _2795 : min(_2794, _2795));
            float _2906 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : min(_2896, 0.0));
            float _2907 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : min(_2897, 0.0));
            _3196 = ((abs(_2801 / _2790) * cbSceneParam._m0[80u].y) * ((((_2906 - _2907) * 2.0) - ((exp2(_2809 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0)))) - exp2(_2809 * (isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0))))) * _2895)) - ((exp2(_2811 * _2906) - exp2(_2811 * _2907)) * _2895))) + (_2804 * cbSceneParam._m0[80u].z);
        }
        vec4 _3198 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2694, _2695, 1.0), 0.0);
        float _3207 = exp2((_3196 * (-1.44269502162933349609375)) * (1.0 - _3198.w));
        float _3208 = log2(_3207);
        float _3224 = log2(_2714);
        _2813 = (exp2(_3224 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].x)) * _3198.x) / cbSceneParam._m0[78u].x)) + _2711;
        _2815 = (exp2(_3224 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].y)) * _3198.y) / cbSceneParam._m0[78u].y)) + _2712;
        _2817 = (exp2(_3224 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].z)) * _3198.z) / cbSceneParam._m0[78u].z)) + _2713;
        _2819 = _3207 * _2714;
    }
    else
    {
        _2813 = _2711;
        _2815 = _2712;
        _2817 = _2713;
        _2819 = _2714;
    }
    bool _3234;
    vec4 _2828;
    vec4 _2850;
    float _2852;
    float _2856;
    float _2857;
    float _2858;
    float _2859;
    bool _2869;
    for (;;)
    {
        _2828 = cbMatDynParam._m0[0u];
        float _2830 = roundEven(_2828.y);
        bool _2831 = _2830 == 3.0;
        float _2832 = log2(_2819);
        float _2839 = exp2(_2832 * cbSceneParam._m0[78u].x) * _2680;
        float _2840 = exp2(_2832 * cbSceneParam._m0[78u].y) * _2682;
        float _2841 = exp2(_2832 * cbSceneParam._m0[78u].z) * _2684;
        float _2848 = _607 + (-0.5);
        _2850 = cbMtdParam._m0[1u];
        _2852 = _2850.y * _2848;
        float _2855 = (_2830 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2856 = _2855 * (_2831 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2813)));
        _2857 = _2855 * (_2831 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2815)));
        _2858 = _2855 * (_2831 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2817)));
        _2859 = _2848 * 0.999000012874603271484375;
        _2869 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2869)
        {
            if ((cbInstanceData._m0[_657 + 7u].x + _2859) < 0.5)
            {
                _3234 = true;
                break;
            }
        }
        uint _2930 = _658 + uint(_2828.w);
        if ((cbInstanceData._m0[_2930].w < 1.0) && ((cbInstanceData._m0[_2930].w + _2859) < 0.5))
        {
            _3234 = true;
            break;
        }
        if ((_2852 + _303) < _2850.x)
        {
            _3234 = true;
            break;
        }
        _3234 = false;
        break;
    }
    float _3252;
    if (_3234)
    {
        discard_state = true;
        _3252 = 0.0;
    }
    else
    {
        _3252 = _2689;
    }
    SV_Target.x = _2856;
    SV_Target.y = _2857;
    SV_Target.z = _2858;
    SV_Target.w = _3252;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2689;
    discard_exit();
}


