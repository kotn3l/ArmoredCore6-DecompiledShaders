#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Crystal_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_Crystal_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1064;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    vec4 _293 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _299 = _293.w;
    float _310 = dot(vec3(_278, _279, _280), vec3(_200, _201, _202));
    float _313 = dot(vec3(_278, _279, _280), vec3(_214, _215, _216));
    float _316 = dot(vec3(_278, _279, _280), vec3(_221, _222, _223));
    float _322 = inversesqrt(dot(vec3(_310, _313, _316), vec3(_310, _313, _316)));
    float _344 = dot(vec4(texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _364 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_310 * cbMtdParam._m0[12u].x) * _322) * _344) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_313 * cbMtdParam._m0[12u].x) * _322) * _344) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _387 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _388 = _387 * _278;
    float _389 = _387 * _279;
    float _390 = _387 * _280;
    float _391 = dot(vec4(_388, _389, _390, 0.0), vec4(_221, _222, _223, 0.0));
    float _394 = _391 - cbMtdParam._m0[13u].x;
    float _3393 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _401 = exp2(log2(1.0 - (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _417 = ((((_293.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _364.x) * cbMtdParam._m0[9u].x) * ((_401 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _422 = ((((_293.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _364.y) * cbMtdParam._m0[9u].y) * ((_401 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _427 = ((((_293.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _364.z) * cbMtdParam._m0[9u].z) * ((_401 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _440 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _447 = cbMtdParam._m0[14u].y + _440.x;
    vec4 _460 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _468 = (_460.x * 2.0) + (-1.0);
    float _469 = (_460.y * 2.0) + (-1.0);
    float _470 = dot(vec2(_468, _469), vec2(_468, _469));
    float _3409 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))));
    float _478 = fma(_475, _221, fma(_469, _214, _468 * _200));
    float _481 = fma(_475, _222, fma(_469, _215, _468 * _201));
    float _484 = fma(_475, _223, fma(_469, _216, _468 * _202));
    float _488 = inversesqrt(dot(vec3(_478, _481, _484), vec3(_478, _481, _484)));
    float _489 = _488 * _478;
    float _490 = _488 * _481;
    float _492 = cbMtdParam._m0[14u].z + _460.z;
    vec4 _504 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _508 = cbMtdParam._m0[13u].w * _504.x;
    vec4 _521 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _530 = _391 - cbMtdParam._m0[12u].w;
    float _3420 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _540 = ((cbMtdParam._m0[14u].w * _521.x) + cbMtdParam._m0[14u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[14u].x));
    float _3436 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _564 = cbSceneParam._m0[86u].x * ((_553 / cbSceneParam._m0[86u].x) + (_489 * cbMtdParam._m0[15u].x));
    float _565 = cbSceneParam._m0[86u].y * ((_554 / cbSceneParam._m0[86u].y) + (_490 * cbMtdParam._m0[15u].x));
    float _572 = isnan(cbInstanceData._m0[8u].x) ? _564 : (isnan(_564) ? cbInstanceData._m0[8u].x : max(_564, cbInstanceData._m0[8u].x));
    float _573 = isnan(cbInstanceData._m0[8u].y) ? _565 : (isnan(_565) ? cbInstanceData._m0[8u].y : max(_565, cbInstanceData._m0[8u].y));
    vec4 _577 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _572 : (isnan(_572) ? cbInstanceData._m0[8u].z : min(_572, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _573 : (isnan(_573) ? cbInstanceData._m0[8u].w : min(_573, cbInstanceData._m0[8u].w))));
    float _589 = _488 * _484;
    float _3467 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _590 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _591 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _592 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3494 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3505 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3516 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3527 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _596 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _612 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _631 = fma(_589, cbSceneParam._m0[5u].z, fma(_490, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _489));
    float _634 = fma(_589, cbSceneParam._m0[6u].z, fma(_490, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _489));
    float _637 = fma(_589, cbSceneParam._m0[7u].z, fma(_490, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _489));
    uint _650 = uint(roundEven(NORMAL.w)) * 13u;
    uint _652 = (_650 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _658 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_652].x;
    float _659 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_652].y;
    float _660 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) * cbInstanceData._m0[_652].z;
    float _3538 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _3549 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _664 = 1.0 - _596;
    float _665 = _661 * _664;
    float _666 = _662 * _664;
    float _667 = _663 * _664;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _596;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _596;
    float _674 = (_663 + (-0.039999999105930328369140625)) * _596;
    float _675 = _672 + 0.039999999105930328369140625;
    float _677 = _673 + 0.039999999105930328369140625;
    float _678 = _674 + 0.039999999105930328369140625;
    vec4 _682 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _553, cbSceneParam._m0[86u].y * _554));
    float _685 = _682.x * TEXCOORD.z;
    float _686 = dot(vec3(_489, _490, _589), vec3(_388, _389, _390));
    float _689 = _686 * 2.0;
    float _693 = (_689 * _489) - _388;
    float _694 = (_689 * _490) - _389;
    float _695 = (_689 * _589) - _390;
    float _696 = dot(vec3(_388, _389, _390), vec3(_489, _490, _589));
    float _699 = abs(_696);
    float _3571 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _700 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _706 = sqrt(_591);
    float _718 = exp2((_706 * 5.0) * log2(1.0 - (_700 * 0.999000012874603271484375))) / (4.0 - (_706 * 3.0));
    float _724 = (1.0 - _718) * ((_706 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _725 = _718 * _706;
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1063;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _788 = fma(_761, cbModelParam._m0[26u].z, fma(_757, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _753));
        float _792 = fma(_761, cbModelParam._m0[27u].z, fma(_757, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _753));
        float _796 = fma(_761, cbModelParam._m0[28u].z, fma(_757, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _753));
        float _821 = _753 + _489;
        float _822 = _757 + _490;
        float _823 = _761 + _589;
        float _833 = fma(_823, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _821)) - _788;
        float _834 = fma(_823, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _821)) - _792;
        float _835 = fma(_823, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _821)) - _796;
        float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
        float _852 = ((_839 * _833) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_788 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_839 * _834) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_792 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_839 * _835) / cbModelParam._m0[34u].z) + ((((((_796 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        float _891 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_857.x + (-0.5));
        float _893 = _891 * (_857.y + (-0.5));
        float _894 = _891 * (_857.z + (-0.5));
        float _901 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_864.x + (-0.5));
        float _903 = _901 * (_864.y + (-0.5));
        float _904 = _901 * (_864.z + (-0.5));
        float _911 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_871.x + (-0.5));
        float _913 = _911 * (_871.y + (-0.5));
        float _914 = _911 * (_871.z + (-0.5));
        float _921 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_878.x + (-0.5));
        float _923 = _921 * (_878.y + (-0.5));
        float _924 = _921 * (_878.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _945 = (dot(vec3(_489, _490, _589), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _955 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3619 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_957 + 1.0))) + _962) * _925;
        float _972 = _893 * 0.5;
        float _973 = _903 * 0.5;
        float _974 = _913 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_489, _490, _589), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3652 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_999 + 1.0))) + _1004) * _926;
        float _1014 = _894 * 0.5;
        float _1015 = _904 * 0.5;
        float _1016 = _914 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_489, _490, _589), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3685 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1041 + 1.0))) + _1046) * _927;
        _1063 = _894;
        _1065 = _893;
        _1066 = _892;
        _1067 = _904;
        _1068 = _903;
        _1069 = _902;
        _1070 = _914;
        _1071 = _913;
        _1072 = _912;
        _1073 = _927;
        _1074 = _926;
        _1075 = _925;
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _1064;
        _1065 = _1064;
        _1066 = _1064;
        _1067 = _1064;
        _1068 = _1064;
        _1069 = _1064;
        _1070 = _1064;
        _1071 = _1064;
        _1072 = _1064;
        _1073 = _1064;
        _1074 = _1064;
        _1075 = _1064;
        _1076 = 0.0;
        _1077 = 0.0;
        _1078 = 0.0;
    }
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1104 = fma(_761, cbModelParam._m0[30u].z, fma(_757, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _753));
        float _1108 = fma(_761, cbModelParam._m0[31u].z, fma(_757, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _753));
        float _1112 = fma(_761, cbModelParam._m0[32u].z, fma(_757, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _753));
        float _1135 = _753 + _489;
        float _1136 = _757 + _490;
        float _1137 = _761 + _589;
        float _1147 = fma(_1137, cbModelParam._m0[30u].z, fma(_1136, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1135)) - _1104;
        float _1148 = fma(_1137, cbModelParam._m0[31u].z, fma(_1136, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1135)) - _1108;
        float _1149 = fma(_1137, cbModelParam._m0[32u].z, fma(_1136, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1135)) - _1112;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1104 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1108 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[35u].z) + ((((((_1112 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1203 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1170.x + (-0.5));
        float _1205 = _1203 * (_1170.y + (-0.5));
        float _1206 = _1203 * (_1170.z + (-0.5));
        float _1213 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1177.x + (-0.5));
        float _1215 = _1213 * (_1177.y + (-0.5));
        float _1216 = _1213 * (_1177.z + (-0.5));
        float _1223 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1184.x + (-0.5));
        float _1225 = _1223 * (_1184.y + (-0.5));
        float _1226 = _1223 * (_1184.z + (-0.5));
        float _1233 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1191.x + (-0.5));
        float _1235 = _1233 * (_1191.y + (-0.5));
        float _1236 = _1233 * (_1191.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_489, _490, _589), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3748 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1267 + 1.0))) + _1272) * _1237;
        float _1282 = _1205 * 0.5;
        float _1283 = _1215 * 0.5;
        float _1284 = _1225 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_489, _490, _589), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3781 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1309 + 1.0))) + _1314) * _1238;
        float _1324 = _1206 * 0.5;
        float _1325 = _1216 * 0.5;
        float _1326 = _1226 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_489, _490, _589), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3814 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1351 + 1.0))) + _1356) * _1239;
        _1373 = _1206;
        _1374 = _1205;
        _1375 = _1204;
        _1376 = _1216;
        _1377 = _1215;
        _1378 = _1214;
        _1379 = _1226;
        _1380 = _1225;
        _1381 = _1224;
        _1382 = _1239;
        _1383 = _1238;
        _1384 = _1237;
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1064;
        _1374 = _1064;
        _1375 = _1064;
        _1376 = _1064;
        _1377 = _1064;
        _1378 = _1064;
        _1379 = _1064;
        _1380 = _1064;
        _1381 = _1064;
        _1382 = _1064;
        _1383 = _1064;
        _1384 = _1064;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1076)) + _1076;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1077)) + _1077;
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1078)) + _1078;
    float _1420 = fma(_1399, cbSceneParam._m0[89u].z, fma(_1398, cbSceneParam._m0[89u].y, _1397 * cbSceneParam._m0[89u].x));
    float _1423 = fma(_1399, cbSceneParam._m0[90u].z, fma(_1398, cbSceneParam._m0[90u].y, _1397 * cbSceneParam._m0[90u].x));
    float _1426 = fma(_1399, cbSceneParam._m0[91u].z, fma(_1398, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1397));
    float _1441 = _693 * 0.5;
    float _1442 = _694 * 0.5;
    float _1443 = _695 * 0.5;
    float _1444 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1447 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1450 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1484;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1457 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1063, _1067, _1070, _1073));
        float _1461 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1465 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1472 = dot(vec4(cbModelParam._m0[39u]), vec4(_1441, _1442, _1443, 1.0));
        _1484 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1484 = 1.0;
    }
    float _1495;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1486 = dot(vec4(cbModelParam._m0[40u]), vec4(_1441, _1442, _1443, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1486) ? 0.0 : (isnan(0.0) ? _1486 : max(0.0, _1486))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1499 = (_1495 * cbModelParam._m0[1u].x) + (_1484 * (1.0 - cbModelParam._m0[1u].x));
    float _1509 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _591);
    float _1510 = isnan(_1509) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1509 : min(cbModelParam._m0[25u].z, _1509));
    float _1590;
    float _1592;
    float _1594;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1557 = fma(_761, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _753)) + cbModelParam._m0[13u].w;
        float _1561 = fma(_761, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _753)) + cbModelParam._m0[14u].w;
        float _1565 = fma(_761, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _753)) + cbModelParam._m0[15u].w;
        float _1568 = fma(_695, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693));
        float _1571 = fma(_695, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693));
        float _1574 = fma(_695, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693));
        float _1602;
        if (_1568 > 0.0)
        {
            _1602 = abs((1.0 - _1557) / _1568);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1557 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1602 = frontier_phi_16_14_ladder;
        }
        float _1798;
        if (_1571 > 0.0)
        {
            _1798 = abs((1.0 - _1561) / _1571);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1561 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1798 = frontier_phi_25_21_ladder;
        }
        float _2047;
        if (_1574 > 0.0)
        {
            _2047 = abs((1.0 - _1565) / _1574);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1565 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2047 = frontier_phi_36_32_ladder;
        }
        float _2049 = isnan(_1798) ? _1602 : (isnan(_1602) ? _1798 : min(_1602, _1798));
        float _2050 = isnan(_2047) ? _2049 : (isnan(_2049) ? _2047 : min(_2049, _2047));
        float _2054 = (_2050 * _1568) + _1557;
        float _2055 = (_2050 * _1571) + _1561;
        float _2056 = (_2050 * _1574) + _1565;
        float _2057 = _2050 * 9.9999997473787516355514526367188e-05;
        float _2059 = (-1.0) - _2057;
        float _2061 = _2057 + 1.0;
        float frontier_phi_15_36_ladder;
        float frontier_phi_15_36_ladder_1;
        float frontier_phi_15_36_ladder_2;
        if ((_2056 > _2061) || ((_2056 < _2059) || ((_2055 > _2061) || ((_2055 < _2059) || ((_2054 < _2059) || (_2054 > _2061))))))
        {
            frontier_phi_15_36_ladder = 0.0;
            frontier_phi_15_36_ladder_1 = 0.0;
            frontier_phi_15_36_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2206 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2056, cbModelParam._m0[9u].z, fma(_2055, cbModelParam._m0[9u].y, _2054 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2056, cbModelParam._m0[10u].z, fma(_2055, cbModelParam._m0[10u].y, _2054 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2056, cbModelParam._m0[11u].z, fma(_2055, cbModelParam._m0[11u].y, _2054 * cbModelParam._m0[11u].x))), _1510);
            frontier_phi_15_36_ladder = _2206.z * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_1 = _2206.y * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_2 = _2206.x * cbModelParam._m0[1u].y;
        }
        _1590 = frontier_phi_15_36_ladder_2;
        _1592 = frontier_phi_15_36_ladder_1;
        _1594 = frontier_phi_15_36_ladder;
    }
    else
    {
        vec4 _1578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_693, _694, _695), _1510);
        _1590 = _1578.x * cbModelParam._m0[1u].y;
        _1592 = _1578.y * cbModelParam._m0[1u].y;
        _1594 = _1578.z * cbModelParam._m0[1u].y;
    }
    float _1598 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _591);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1598 : min(cbModelParam._m0[25u].w, _1598));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1656 = fma(_761, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _753)) + cbModelParam._m0[21u].w;
        float _1660 = fma(_761, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _753)) + cbModelParam._m0[22u].w;
        float _1664 = fma(_761, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _753)) + cbModelParam._m0[23u].w;
        float _1667 = fma(_695, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693));
        float _1670 = fma(_695, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693));
        float _1673 = fma(_695, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693));
        float _1803;
        if (_1667 > 0.0)
        {
            _1803 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1803 = frontier_phi_27_23_ladder;
        }
        float _2074;
        if (_1670 > 0.0)
        {
            _2074 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2074 = frontier_phi_38_34_ladder;
        }
        float _2382;
        if (_1673 > 0.0)
        {
            _2382 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2382 = frontier_phi_49_44_ladder;
        }
        float _2384 = isnan(_2074) ? _1803 : (isnan(_1803) ? _2074 : min(_1803, _2074));
        float _2385 = isnan(_2382) ? _2384 : (isnan(_2384) ? _2382 : min(_2384, _2382));
        float _2389 = (_2385 * _1667) + _1656;
        float _2390 = (_2385 * _1670) + _1660;
        float _2391 = (_2385 * _1673) + _1664;
        float _2392 = _2385 * 9.9999997473787516355514526367188e-05;
        float _2393 = (-1.0) - _2392;
        float _2395 = _2392 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2391 > _2395) || ((_2391 < _2393) || ((_2390 > _2395) || ((_2390 < _2393) || ((_2389 < _2393) || (_2389 > _2395))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2391, cbModelParam._m0[17u].z, fma(_2390, cbModelParam._m0[17u].y, _2389 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2391, cbModelParam._m0[18u].z, fma(_2390, cbModelParam._m0[18u].y, _2389 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2391, cbModelParam._m0[19u].z, fma(_2390, cbModelParam._m0[19u].y, _2389 * cbModelParam._m0[19u].x))), _1599);
            frontier_phi_24_49_ladder = _2563.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2563.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2563.x * cbModelParam._m0[1u].z;
        }
        _1692 = frontier_phi_24_49_ladder_2;
        _1694 = frontier_phi_24_49_ladder_1;
        _1696 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_693, _694, _695), _1599);
        _1692 = _1676.x * cbModelParam._m0[1u].z;
        _1694 = _1676.y * cbModelParam._m0[1u].z;
        _1696 = _1676.z * cbModelParam._m0[1u].z;
    }
    float _1709 = (((_724 * _675) + _725) * _685) * ((cbModelParam._m0[1u].w * (_1692 - _1590)) + _1590);
    float _1711 = (((_724 * _677) + _725) * _685) * ((cbModelParam._m0[1u].w * (_1694 - _1592)) + _1592);
    float _1713 = (((_724 * _678) + _725) * _685) * ((cbModelParam._m0[1u].w * (_1696 - _1594)) + _1594);
    float _1716 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, _1709 * cbSceneParam._m0[91u].x));
    vec4 _1730 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_553, _554));
    float _1732 = _1730.w;
    float _1744 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1732);
    float _1745 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1732);
    float _1746 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1732);
    uvec4 _1750 = floatBitsToUint(cbInstanceData._m0[_650 + 5u]);
    uint _1752 = _1750.x * 14u;
    uint _1753 = _1752 + 13u;
    float _1758 = _685 + (-1.0);
    float _1761 = (cbLight._m0[_1753].x * _1758) + 1.0;
    float _1762 = (cbLight._m0[_1753].y * _1758) + 1.0;
    uint _1764 = _1752 + 4u;
    float _1775 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_489, _490, _589));
    float _1778 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
    float _1779 = cbLight._m0[_1764].x * _1744;
    float _1780 = cbLight._m0[_1764].y * _1745;
    float _1781 = cbLight._m0[_1764].z * _1746;
    uint _1782 = _1752 + 5u;
    uint _1788 = _1752 | 1u;
    float _1794 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_489, _490, _589));
    float _1797 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
    float _1862;
    float _1863;
    float _1864;
    if (_592 == 0.0)
    {
        float _3950 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _3961 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1816 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.3183098733425140380859375;
        float _1818 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.3183098733425140380859375;
        _1862 = ((cbLight._m0[_1782].x * _1797) * _1818) + ((_1779 * _1778) * _1816);
        _1863 = ((_1797 * cbLight._m0[_1782].y) * _1818) + ((_1780 * _1778) * _1816);
        _1864 = ((_1797 * cbLight._m0[_1782].z) * _1818) + ((_1781 * _1778) * _1816);
    }
    else
    {
        float _1828 = _1775 + _592;
        float _1831 = (_592 * 2.0) + 1.0;
        float _1832 = (isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) / _1831;
        float _1839 = _1794 + _592;
        float _1841 = (isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) / _1831;
        _1862 = (((_1841 * cbLight._m0[_1782].x) * _1797) + ((_1779 * _1832) * _1778)) * 0.3183098733425140380859375;
        _1863 = (((_1841 * cbLight._m0[_1782].y) * _1797) + ((_1780 * _1832) * _1778)) * 0.3183098733425140380859375;
        _1864 = (((_1841 * cbLight._m0[_1782].z) * _1797) + ((_1781 * _1832) * _1778)) * 0.3183098733425140380859375;
    }
    uint _1868 = _1752 + 8u;
    float _1884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1752].w)) * _591) * 0.949999988079071044921875);
    float _1885 = _1884 * _1884;
    float _1886 = cbLight._m0[_1752].x + _388;
    float _1887 = cbLight._m0[_1752].y + _389;
    float _1888 = cbLight._m0[_1752].z + _390;
    float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
    float _1893 = _1892 * _1886;
    float _1894 = _1892 * _1887;
    float _1895 = _1892 * _1888;
    float _1896 = dot(vec3(_489, _490, _589), vec3(cbLight._m0[_1752].xyz));
    float _3982 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _1900 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1901 = dot(vec3(_489, _490, _589), vec3(_1893, _1894, _1895));
    float _4004 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_1893, _1894, _1895));
    float _4015 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1885 * _1885;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1921 = exp2(log2(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * 5.0);
    float _1922 = 0.959999978542327880859375 - _672;
    float _1924 = 0.959999978542327880859375 - _673;
    float _1925 = 0.959999978542327880859375 - _674;
    float _1932 = 1.0 - _1885;
    float _1943 = (0.5 / (((_1900 * ((_1899 * _1932) + _1885)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _1932) + _1885) * _1899))) * _1899;
    float _4026 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1945 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    uint _1961 = _1752 + 9u;
    float _1975 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1788].w)) * _591) * 0.949999988079071044921875);
    float _1976 = _1975 * _1975;
    float _1977 = cbLight._m0[_1788].x + _388;
    float _1978 = cbLight._m0[_1788].y + _389;
    float _1979 = cbLight._m0[_1788].z + _390;
    float _1983 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
    float _1984 = _1983 * _1977;
    float _1985 = _1983 * _1978;
    float _1986 = _1983 * _1979;
    float _1987 = dot(vec3(_489, _490, _589), vec3(cbLight._m0[_1788].xyz));
    float _4037 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1990 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _1991 = dot(vec3(_489, _490, _589), vec3(_1984, _1985, _1986));
    float _4048 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _1995 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_1984, _1985, _1986));
    float _4059 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1999 = _1976 * _1976;
    float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
    float _2010 = exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0);
    float _2017 = 1.0 - _1976;
    float _2027 = (0.5 / (((_1900 * ((_1990 * _2017) + _1976)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2017) + _1976) * _1990))) * _1990;
    float _4070 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2029 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
    float _2039 = (((((_2010 * _1922) + _675) * cbLight._m0[_1961].x) * _2029) * _1797) + ((((cbLight._m0[_1868].x * _1744) * ((_1921 * _1922) + _675)) * _1945) * _1778);
    float _2040 = (((((_2010 * _1924) + _677) * cbLight._m0[_1961].y) * _2029) * _1797) + ((((cbLight._m0[_1868].y * _1745) * ((_1921 * _1924) + _677)) * _1945) * _1778);
    float _2041 = (((((_2010 * _1925) + _678) * cbLight._m0[_1961].z) * _2029) * _1797) + ((((cbLight._m0[_1868].z * _1746) * ((_1921 * _1925) + _678)) * _1945) * _1778);
    float _2177;
    float _2179;
    float _2181;
    float _2183;
    float _2185;
    float _2187;
    if (_1750.y == 0u)
    {
        float _2118 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2119 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2118;
        float _2120 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2118;
        float _2121 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2118;
        uvec4 _2133 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2134 = _2133.x;
        uint _2145 = uint((float(_2133.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _2134))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _2134)));
        float _2155 = (log2(_2121 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2156 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        uint _2159 = uint(isnan(14.0) ? _2156 : (isnan(_2156) ? 14.0 : min(_2156, 14.0)));
        uvec4 _2164 = texelFetch(g_lightClusterGridBuffer, int(((_2159 << 2u) + (_2145 << 6u)) >> 2u));
        uint _2165 = _2164.x;
        uint _2166 = _2133.z;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        float _2223;
        float _2225;
        if (((((1u << ((_2166 >> 4u) & 15u)) + 4294967295u) & _2165) == 0u) || ((_2166 & 240u) == 0u))
        {
            _2215 = 0.0;
            _2217 = 0.0;
            _2219 = 0.0;
            _2221 = 0.0;
            _2223 = 0.0;
            _2225 = 0.0;
        }
        else
        {
            float _2216;
            float _2218;
            float _2220;
            float _2222;
            float _2224;
            float _2226;
            float _2440 = 0.0;
            float _2441 = 0.0;
            float _2442 = 0.0;
            float _2443 = 0.0;
            float _2444 = 0.0;
            float _2445 = 0.0;
            uint _2446 = 0u;
            uint _2455;
            bool _2456;
            for (;;)
            {
                _2455 = texelFetch(g_lightClassification, int((((_2159 << 5u) + (_2145 << 9u)) + (_2446 << 2u)) >> 2u)).x;
                _2456 = _2455 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2456)
                {
                    frontier_phi_58_pred = _2445;
                    frontier_phi_58_pred_1 = _2444;
                    frontier_phi_58_pred_2 = _2443;
                    frontier_phi_58_pred_3 = _2442;
                    frontier_phi_58_pred_4 = _2441;
                    frontier_phi_58_pred_5 = _2440;
                }
                else
                {
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    uint _2643;
                    _2637 = _2440;
                    _2638 = _2441;
                    _2639 = _2442;
                    _2640 = _2443;
                    _2641 = _2444;
                    _2642 = _2445;
                    _2643 = _2455;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    for (;;)
                    {
                        uint _2647 = uint(findLSB(_2643)) + (_2446 << 5u);
                        uint _2644 = (_2643 + 4294967295u) & _2643;
                        uint _2649 = _2647 * 48u;
                        vec4 _2663 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 3u)).x));
                        uint _2669 = (_2647 * 48u) + 4u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2669)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 3u)).x));
                        float _2683 = _2682.x;
                        float _2684 = _2682.y;
                        float _2685 = _2682.z;
                        uint _2688 = (_2647 * 48u) + 8u;
                        vec3 _2699 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x));
                        uint _2704 = (_2647 * 48u) + 12u;
                        vec2 _2712 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x));
                        float _2718 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
                        float _2719 = _2718 * _2119;
                        float _2720 = _2718 * _2120;
                        float _2721 = _2718 * _2121;
                        float _2722 = _2663.x - _2119;
                        float _2723 = _2663.y - _2120;
                        float _2724 = _2663.z - _2121;
                        float _2725 = dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724));
                        float _2728 = inversesqrt(_2725);
                        float _2729 = _2728 * _2722;
                        float _2730 = _2728 * _2723;
                        float _2731 = _2728 * _2724;
                        float _2732 = dot(vec3(_631, _634, _637), vec3(_2729, _2730, _2731));
                        float _2737 = 1.0 - (_2725 * _2663.w);
                        float _4091 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2738 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2739 = sqrt(_2725) * _2682.w;
                        float _2742 = 1.39999997615814208984375 / (_2739 + 1.39999997615814208984375);
                        float _2743 = _2742 * _2742;
                        float _2744 = 1.0 - _2743;
                        float _2746 = (_2744 * _2744) * _592;
                        float _2749 = ((_2744 * _2732) + _2743) + _2746;
                        float _2754 = _2739 * _2739;
                        float _2759 = ((isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0))) * _2738) / (((_2746 * 2.0) + 1.0) * ((_2754 * 0.699999988079071044921875) + 1.0));
                        float _2763 = dot(vec3(_2729, _2730, _2731), vec3(_2719, _2720, _2721));
                        float _4107 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2770 = dot(vec3((-0.0) - _2719, (-0.0) - _2720, (-0.0) - _2721), vec3(_631, _634, _637)) + 1.0;
                        float _2772 = (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0))) * 0.5;
                        float _2779 = ((_2772 * _2772) * _2712.x) * exp2((_2712.y * 32.0) * log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))));
                        float _2781 = _592 / (_592 + 1.0);
                        float _2797 = (-0.0) - _2119;
                        float _2798 = (-0.0) - _2120;
                        float _2799 = (-0.0) - _2121;
                        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
                        float _2804 = _2803 * _2797;
                        float _2805 = _2803 * _2798;
                        float _2806 = _2803 * _2799;
                        float _2814 = exp2(log2(1.0 / ((_2754 * 3.5) + 5.0)) * 0.25);
                        float _2815 = 1.0 - _706;
                        float _2822 = sqrt(1.0 - ((1.0 - (_2815 * _2815)) * (1.0 - (_2814 * _2814))));
                        float _2823 = _2822 * _2822;
                        float _2824 = _2823 * _2823;
                        float _2825 = _2804 + _2729;
                        float _2826 = _2805 + _2730;
                        float _2827 = _2806 + _2731;
                        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
                        float _2835 = dot(vec3(_631, _634, _637), vec3(_2804, _2805, _2806));
                        float _4123 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2838 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2839 = dot(vec3(_631, _634, _637), vec3(_2831 * _2825, _2831 * _2826, _2831 * _2827));
                        float _4134 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2842 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2846 = ((_2842 * _2842) * (_2824 + (-1.0))) + 1.0;
                        float _2847 = _2742 * _2823;
                        float _2848 = _2847 * _2847;
                        float _2851 = ((1.0 - _2848) * _2732) + _2848;
                        float _4145 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2852 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _2853 = 1.0 - _2823;
                        float _2863 = (0.5 / (((_2852 * ((_2838 * _2853) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2852 * _2853) + _2823) * _2838))) * _2852;
                        float _4156 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2874 = (((_2824 * 3.1415927410125732421875) * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) / ((_2846 * _2846) * ((_2754 * 2.1991131305694580078125) + 3.141590118408203125))) * _2738;
                        _2571 = (((((_2683 * 0.3183098733425140380859375) * _2781) * _2779) + _2683) * _2759) + _2640;
                        _2572 = (((((_2684 * 0.3183098733425140380859375) * _2781) * _2779) + _2684) * _2759) + _2641;
                        _2573 = (((((_2685 * 0.3183098733425140380859375) * _2781) * _2779) + _2685) * _2759) + _2642;
                        _2568 = (_2874 * _2699.x) + _2637;
                        _2569 = (_2874 * _2699.y) + _2638;
                        _2570 = (_2874 * _2699.z) + _2639;
                        if (_2644 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2637 = _2568;
                            _2638 = _2569;
                            _2639 = _2570;
                            _2640 = _2571;
                            _2641 = _2572;
                            _2642 = _2573;
                            _2643 = _2644;
                        }
                    }
                    frontier_phi_58_pred = _2573;
                    frontier_phi_58_pred_1 = _2572;
                    frontier_phi_58_pred_2 = _2571;
                    frontier_phi_58_pred_3 = _2570;
                    frontier_phi_58_pred_4 = _2569;
                    frontier_phi_58_pred_5 = _2568;
                }
                _2226 = frontier_phi_58_pred;
                _2224 = frontier_phi_58_pred_1;
                _2222 = frontier_phi_58_pred_2;
                _2220 = frontier_phi_58_pred_3;
                _2218 = frontier_phi_58_pred_4;
                _2216 = frontier_phi_58_pred_5;
                uint _2447 = _2446 + 1u;
                if (_2447 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2440 = _2216;
                    _2441 = _2218;
                    _2442 = _2220;
                    _2443 = _2222;
                    _2444 = _2224;
                    _2445 = _2226;
                    _2446 = _2447;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2215 = _2216;
            _2217 = _2218;
            _2219 = _2220;
            _2221 = _2222;
            _2223 = _2224;
            _2225 = _2226;
        }
        uvec4 _2229 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2230 = _2229.z;
        uint _2232 = (_2230 >> 8u) & 15u;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        if (((4294967295u << _2232) & _2165) == 0u)
        {
            _2408 = _2215;
            _2410 = _2217;
            _2412 = _2219;
            _2414 = _2221;
            _2416 = _2223;
            _2418 = _2225;
        }
        else
        {
            float _2433 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
            float _2434 = _2433 * _2119;
            float _2435 = _2433 * _2120;
            float _2436 = _2433 * _2121;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2232 < ((_2230 >> 12u) & 15u))
            {
                float _2409;
                float _2411;
                float _2413;
                float _2415;
                float _2417;
                float _2419;
                float _2620 = _2215;
                float _2621 = _2217;
                float _2622 = _2219;
                float _2623 = _2221;
                float _2624 = _2223;
                float _2625 = _2225;
                uint _2626 = _2232;
                uint _2635;
                bool _2636;
                for (;;)
                {
                    _2635 = texelFetch(g_lightClassification, int((((_2159 << 5u) + (_2145 << 9u)) + (_2626 << 2u)) >> 2u)).x;
                    _2636 = _2635 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2636)
                    {
                        frontier_phi_66_pred = _2625;
                        frontier_phi_66_pred_1 = _2624;
                        frontier_phi_66_pred_2 = _2623;
                        frontier_phi_66_pred_3 = _2622;
                        frontier_phi_66_pred_4 = _2621;
                        frontier_phi_66_pred_5 = _2620;
                    }
                    else
                    {
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _2930 = _2620;
                        float _2931 = _2621;
                        float _2932 = _2622;
                        float _2933 = _2623;
                        float _2934 = _2624;
                        float _2935 = _2625;
                        uint _2936 = _2635;
                        uint _2937;
                        vec4 _2962;
                        float _2963;
                        vec4 _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        vec3 _2993;
                        vec2 _3002;
                        vec4 _3017;
                        vec4 _3033;
                        float _3080;
                        bool _3081;
                        for (;;)
                        {
                            uint _2947 = ((_2626 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2936));
                            _2937 = (_2936 + 4294967295u) & _2936;
                            uint _2949 = _2947 * 40u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            _2963 = _2962.w;
                            uint _2965 = (_2947 * 40u) + 4u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            _2979 = _2978.x;
                            _2980 = _2978.y;
                            _2981 = _2978.z;
                            uint _2983 = (_2947 * 40u) + 8u;
                            _2993 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x));
                            uint _2995 = (_2947 * 40u) + 12u;
                            _3002 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x));
                            uint _3004 = (_2947 * 40u) + 16u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            uint _3020 = (_2947 * 40u) + 20u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3036 = (_2947 * 40u) + 24u;
                            vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3055 = (_2947 * 40u) + 28u;
                            vec4 _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            _3080 = fma(_2121, _3068.z, fma(_2120, _3068.y, _3068.x * _2119)) + _3068.w;
                            _3081 = !((fma(_2121, _3049.z, fma(_2120, _3049.y, _3049.x * _2119)) + _3049.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_3081)
                            {
                                float _3107 = _2962.x - _2119;
                                float _3108 = _2962.y - _2120;
                                float _3109 = _2962.z - _2121;
                                float _3110 = dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109));
                                float _3113 = inversesqrt(_3110);
                                float _3114 = _3113 * _3107;
                                float _3115 = _3113 * _3108;
                                float _3116 = _3113 * _3109;
                                float _3120 = 1.0 - (_3110 / (_2963 * _2963));
                                float _4167 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3125 = sqrt(_3110) * _2978.w;
                                float _3127 = 1.39999997615814208984375 / (_3125 + 1.39999997615814208984375);
                                float _3128 = _3127 * _3127;
                                float _3129 = 1.0 - _3128;
                                float _3131 = (_3129 * _3129) * _592;
                                float _3134 = ((_3129 * dot(vec3(_3114, _3115, _3116), vec3(_631, _634, _637))) + _3128) + _3131;
                                float _3139 = _3125 * _3125;
                                float _3144 = (fma(_2121, _3017.z, fma(_2120, _3017.y, _3017.x * _2119)) + _3017.w) / _3080;
                                float _3145 = (fma(_2121, _3033.z, fma(_2120, _3033.y, _3033.x * _2119)) + _3033.w) / _3080;
                                float _3149 = 1.0 - dot(vec2(_3144, _3145), vec2(_3144, _3145));
                                float _4183 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3151 = _3150 * (((isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))) * _3121) / (((_3131 * 2.0) + 1.0) * ((_3139 * 0.699999988079071044921875) + 1.0)));
                                float _3152 = (-0.0) - _2434;
                                float _3153 = (-0.0) - _2435;
                                float _3154 = (-0.0) - _2436;
                                float _3155 = dot(vec3(_3114, _3115, _3116), vec3(_2434, _2435, _2436));
                                float _4194 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3162 = dot(vec3(_3152, _3153, _3154), vec3(_631, _634, _637)) + 1.0;
                                float _3164 = (isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))) * 0.5;
                                float _3171 = ((_3164 * _3164) * _3002.x) * exp2((_3002.y * 32.0) * log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))));
                                float _3173 = _592 / (_592 + 1.0);
                                float _3194 = exp2(log2(1.0 / ((_3139 * 3.5) + 5.0)) * 0.25);
                                float _3195 = 1.0 - _706;
                                float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                                float _3203 = _3202 * _3202;
                                float _3204 = _3203 * _3203;
                                float _3205 = _3114 - _2434;
                                float _3206 = _3115 - _2435;
                                float _3207 = _3116 - _2436;
                                float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                                float _3215 = dot(vec3(_631, _634, _637), vec3(_3152, _3153, _3154));
                                float _4210 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3218 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3219 = dot(vec3(_631, _634, _637), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                                float _4221 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3222 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                                float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                                float _3227 = _3127 * _3203;
                                float _3228 = _3227 * _3227;
                                float _3234 = ((1.0 - _3228) * dot(vec3(_631, _634, _637), vec3(_3114, _3115, _3116))) + _3228;
                                float _4232 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3236 = 1.0 - _3203;
                                float _3246 = (0.5 / (((_3235 * ((_3218 * _3236) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3235 * _3236) + _3203) * _3218))) * _3235;
                                float _4243 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3256 = (_3150 * _3121) * (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) / ((_3226 * _3226) * ((_3139 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = ((((_2980 * 0.3183098733425140380859375) * _3173) * _3171) + _2980) * _3151;
                                frontier_phi_72_pred_1 = ((((_2981 * 0.3183098733425140380859375) * _3173) * _3171) + _2981) * _3151;
                                frontier_phi_72_pred_2 = _3256 * _2993.x;
                                frontier_phi_72_pred_3 = ((((_2979 * 0.3183098733425140380859375) * _3173) * _3171) + _2979) * _3151;
                                frontier_phi_72_pred_4 = _3256 * _2993.z;
                                frontier_phi_72_pred_5 = _3256 * _2993.y;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _3264 = frontier_phi_72_pred;
                            _3265 = frontier_phi_72_pred_1;
                            _3260 = frontier_phi_72_pred_2;
                            _3263 = frontier_phi_72_pred_3;
                            _3262 = frontier_phi_72_pred_4;
                            _3261 = frontier_phi_72_pred_5;
                            _2920 = _3263 + _2933;
                            _2921 = _3264 + _2934;
                            _2922 = _3265 + _2935;
                            _2917 = _3260 + _2930;
                            _2918 = _3261 + _2931;
                            _2919 = _3262 + _2932;
                            if (_2937 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2937;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _2922;
                        frontier_phi_66_pred_1 = _2921;
                        frontier_phi_66_pred_2 = _2920;
                        frontier_phi_66_pred_3 = _2919;
                        frontier_phi_66_pred_4 = _2918;
                        frontier_phi_66_pred_5 = _2917;
                    }
                    _2419 = frontier_phi_66_pred;
                    _2417 = frontier_phi_66_pred_1;
                    _2415 = frontier_phi_66_pred_2;
                    _2413 = frontier_phi_66_pred_3;
                    _2411 = frontier_phi_66_pred_4;
                    _2409 = frontier_phi_66_pred_5;
                    uint _2627 = _2626 + 1u;
                    if (_2627 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2620 = _2409;
                        _2621 = _2411;
                        _2622 = _2413;
                        _2623 = _2415;
                        _2624 = _2417;
                        _2625 = _2419;
                        _2626 = _2627;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2419;
                frontier_phi_51_52_ladder_1 = _2417;
                frontier_phi_51_52_ladder_2 = _2415;
                frontier_phi_51_52_ladder_3 = _2411;
                frontier_phi_51_52_ladder_4 = _2413;
                frontier_phi_51_52_ladder_5 = _2409;
            }
            else
            {
                frontier_phi_51_52_ladder = _2225;
                frontier_phi_51_52_ladder_1 = _2223;
                frontier_phi_51_52_ladder_2 = _2221;
                frontier_phi_51_52_ladder_3 = _2217;
                frontier_phi_51_52_ladder_4 = _2219;
                frontier_phi_51_52_ladder_5 = _2215;
            }
            _2408 = frontier_phi_51_52_ladder_5;
            _2410 = frontier_phi_51_52_ladder_3;
            _2412 = frontier_phi_51_52_ladder_4;
            _2414 = frontier_phi_51_52_ladder_2;
            _2416 = frontier_phi_51_52_ladder_1;
            _2418 = frontier_phi_51_52_ladder;
        }
        float _2423 = isnan(1.0) ? _685 : (isnan(_685) ? 1.0 : min(_685, 1.0));
        _2177 = (_2423 * _2414) + _1862;
        _2179 = (_2423 * _2416) + _1863;
        _2181 = (_2423 * _2418) + _1864;
        _2183 = ((_2408 * _675) * _2423) + _2039;
        _2185 = ((_2410 * _677) * _2423) + _2040;
        _2187 = ((_2412 * _678) * _2423) + _2041;
    }
    else
    {
        _2177 = _1862;
        _2179 = _1863;
        _2181 = _1864;
        _2183 = _2039;
        _2185 = _2040;
        _2187 = _2041;
    }
    float _2303;
    float _2304;
    float _2305;
    if (_592 > 0.0)
    {
        uint _2236 = _1752 + 4u;
        float _2242 = (-0.0) - _388;
        float _2243 = (-0.0) - _389;
        float _2244 = (-0.0) - _390;
        float _2245 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_2242, _2243, _2244));
        float _4259 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2249 = _696 + 1.0;
        float _2251 = (isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0))) * 0.5;
        float _2256 = _2251 * _2251;
        float _2257 = _2256 * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * 32.0);
        float _2259 = _592 / (_592 + 1.0);
        float _2260 = isnan(_1761) ? 1.0 : (isnan(1.0) ? _1761 : min(1.0, _1761));
        uint _2273 = _1752 + 5u;
        float _2279 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_2242, _2243, _2244));
        float _4280 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2286 = _2256 * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 32.0);
        float _2287 = isnan(_1762) ? 1.0 : (isnan(1.0) ? _1762 : min(1.0, _1762));
        _2303 = ((((_2286 * cbLight._m0[_2273].x) * _2259) * _2287) + ((((cbLight._m0[_2236].x * _1744) * _2257) * _2259) * _2260)) * 0.3183098733425140380859375;
        _2304 = ((((_2286 * cbLight._m0[_2273].y) * _2259) * _2287) + ((((cbLight._m0[_2236].y * _1745) * _2257) * _2259) * _2260)) * 0.3183098733425140380859375;
        _2305 = ((((_2286 * cbLight._m0[_2273].z) * _2259) * _2287) + ((((cbLight._m0[_2236].z * _1746) * _2257) * _2259) * _2260)) * 0.3183098733425140380859375;
    }
    else
    {
        _2303 = 0.0;
        _2304 = 0.0;
        _2305 = 0.0;
    }
    float _4296 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4307 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4318 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4329 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _2311 = 0.959999978542327880859375 - (_596 * 0.959999978542327880859375);
    float _2322 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * ((_2177 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _685)) + _2303);
    float _2323 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * ((_2179 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _685)) + _2304);
    float _2324 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * ((_2181 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _685)) + _2305);
    float _2328 = _2311 - (exp2(log2(1.0 - _700) * 5.0) * _2311);
    float _2348 = cbInstanceData._m0[_650 + 6u].w * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)));
    float _2353 = _553 / cbSceneParam._m0[86u].x;
    float _2354 = _554 / cbSceneParam._m0[86u].y;
    vec4 _2368 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2353, _2354, (log2((isnan(cbSceneParam._m0[77u].w) ? _612 : (isnan(_612) ? cbSceneParam._m0[77u].w : min(_612, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2370 = _2368.x;
    float _2371 = _2368.y;
    float _2372 = _2368.z;
    float _2373 = _2368.w;
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    if (_612 > cbSceneParam._m0[78u].w)
    {
        float _2461 = isnan(_612) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _612 : min(cbSceneParam._m0[80u].w, _612));
        float _2462 = _2461 / _612;
        float _2473 = _2462 * _278;
        float _2474 = _279 * _2462;
        float _2475 = (-0.0) - _2474;
        float _2476 = _2462 * _280;
        float _2478 = (cbSceneParam._m0[77u].w * _2475) / _2461;
        float _2479 = _2478 + cbSceneParam._m0[79u].w;
        float _2480 = cbSceneParam._m0[79u].w - _2474;
        float _2486 = sqrt(((_2473 * _2473) + (_2474 * _2474)) + (_2476 * _2476));
        float _2489 = (1.0 - (cbSceneParam._m0[77u].w / _2461)) * _2486;
        float _2494 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2496 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2879;
        if (abs((_2475 - _2478) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2879 = ((((_2479 > 0.0) ? exp2(_2494 * _2479) : (2.0 - exp2(_2496 * _2479))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2489;
        }
        else
        {
            float _2593 = 1.0 / cbSceneParam._m0[80u].x;
            float _2594 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : max(_2479, _2480));
            float _2595 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : min(_2479, _2480));
            float _2604 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : min(_2594, 0.0));
            float _2605 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : min(_2595, 0.0));
            _2879 = ((abs(_2486 / _2475) * cbSceneParam._m0[80u].y) * ((((_2604 - _2605) * 2.0) - ((exp2(_2494 * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0)))) - exp2(_2494 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0))))) * _2593)) - ((exp2(_2496 * _2604) - exp2(_2496 * _2605)) * _2593))) + (_2489 * cbSceneParam._m0[80u].z);
        }
        vec4 _2881 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2353, _2354, 1.0), 0.0);
        float _2890 = exp2((_2879 * (-1.44269502162933349609375)) * (1.0 - _2881.w));
        float _2891 = log2(_2890);
        float _2907 = log2(_2373);
        _2498 = (exp2(_2907 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2891 * cbSceneParam._m0[78u].x)) * _2881.x) / cbSceneParam._m0[78u].x)) + _2370;
        _2500 = (exp2(_2907 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2891 * cbSceneParam._m0[78u].y)) * _2881.y) / cbSceneParam._m0[78u].y)) + _2371;
        _2502 = (exp2(_2907 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2891 * cbSceneParam._m0[78u].z)) * _2881.z) / cbSceneParam._m0[78u].z)) + _2372;
        _2504 = _2890 * _2373;
    }
    else
    {
        _2498 = _2370;
        _2500 = _2371;
        _2502 = _2372;
        _2504 = _2373;
    }
    float _2515 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2516 = _2515 == 3.0;
    float _2517 = log2(_2504);
    float _2524 = exp2(_2517 * cbSceneParam._m0[78u].x) * ((_2322 + ((_2183 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1499)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _577.x) * _2328) - _2322) * _541));
    float _2525 = exp2(_2517 * cbSceneParam._m0[78u].y) * ((_2323 + ((_2185 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1499)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _577.y) * _2328) - _2323) * _541));
    float _2526 = exp2(_2517 * cbSceneParam._m0[78u].z) * ((_2324 + ((_2187 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1499)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _577.z) * _2328) - _2324) * _541));
    float _2535 = (_2515 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2535 * (_2516 ? _2524 : (_2524 + (cbSceneParam._m0[72u].w * _2498)));
    SV_Target.y = _2535 * (_2516 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2500)));
    SV_Target.z = _2535 * (_2516 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2502)));
    SV_Target.w = _2348;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2348;
}


