#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Crystal_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1047;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    vec4 _291 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _297 = _291.w;
    float _308 = dot(vec3(_276, _277, _278), vec3(_198, _199, _200));
    float _311 = dot(vec3(_276, _277, _278), vec3(_212, _213, _214));
    float _314 = dot(vec3(_276, _277, _278), vec3(_219, _220, _221));
    float _320 = inversesqrt(dot(vec3(_308, _311, _314), vec3(_308, _311, _314)));
    float _342 = dot(vec4(texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _362 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_308 * cbMtdParam._m0[12u].x) * _320) * _342) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_311 * cbMtdParam._m0[12u].x) * _320) * _342) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _385 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _386 = _385 * _276;
    float _387 = _385 * _277;
    float _388 = _385 * _278;
    float _389 = dot(vec4(_386, _387, _388, 0.0), vec4(_219, _220, _221, 0.0));
    float _392 = _389 - cbMtdParam._m0[13u].x;
    float _3376 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _399 = exp2(log2(1.0 - (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _415 = ((((_291.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _362.x) * cbMtdParam._m0[9u].x) * ((_399 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _420 = ((((_291.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _362.y) * cbMtdParam._m0[9u].y) * ((_399 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _425 = ((((_291.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _362.z) * cbMtdParam._m0[9u].z) * ((_399 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _442 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _450 = (_442.x * 2.0) + (-1.0);
    float _451 = (_442.y * 2.0) + (-1.0);
    float _452 = dot(vec2(_450, _451), vec2(_450, _451));
    float _3392 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _457 = sqrt(1.0 - (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))));
    float _460 = fma(_457, _219, fma(_451, _212, _450 * _198));
    float _463 = fma(_457, _220, fma(_451, _213, _450 * _199));
    float _466 = fma(_457, _221, fma(_451, _214, _450 * _200));
    float _470 = inversesqrt(dot(vec3(_460, _463, _466), vec3(_460, _463, _466)));
    float _471 = _470 * _460;
    float _472 = _470 * _463;
    float _474 = cbMtdParam._m0[14u].z + _442.z;
    vec4 _486 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _490 = cbMtdParam._m0[13u].w * _486.x;
    vec4 _503 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _512 = _389 - cbMtdParam._m0[12u].w;
    float _3403 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _522 = ((cbMtdParam._m0[14u].w * _503.x) + cbMtdParam._m0[14u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[14u].x));
    float _3419 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _535 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _536 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _546 = cbSceneParam._m0[86u].x * ((_535 / cbSceneParam._m0[86u].x) + (_471 * cbMtdParam._m0[15u].x));
    float _547 = cbSceneParam._m0[86u].y * ((_536 / cbSceneParam._m0[86u].y) + (_472 * cbMtdParam._m0[15u].x));
    float _554 = isnan(cbInstanceData._m0[8u].x) ? _546 : (isnan(_546) ? cbInstanceData._m0[8u].x : max(_546, cbInstanceData._m0[8u].x));
    float _555 = isnan(cbInstanceData._m0[8u].y) ? _547 : (isnan(_547) ? cbInstanceData._m0[8u].y : max(_547, cbInstanceData._m0[8u].y));
    vec4 _559 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _554 : (isnan(_554) ? cbInstanceData._m0[8u].z : min(_554, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _555 : (isnan(_555) ? cbInstanceData._m0[8u].w : min(_555, cbInstanceData._m0[8u].w))));
    float _571 = _470 * _466;
    float _3450 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _572 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _3461 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _573 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _574 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3477 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3488 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _3499 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3510 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _578 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _594 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _614 = fma(_571, cbSceneParam._m0[5u].z, fma(_472, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _471));
    float _617 = fma(_571, cbSceneParam._m0[6u].z, fma(_472, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _471));
    float _620 = fma(_571, cbSceneParam._m0[7u].z, fma(_472, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _471));
    uint _633 = uint(roundEven(NORMAL.w)) * 13u;
    uint _635 = (_633 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _641 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) * cbInstanceData._m0[_635].x;
    float _642 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) * cbInstanceData._m0[_635].y;
    float _643 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * cbInstanceData._m0[_635].z;
    float _3521 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _647 = 1.0 - _578;
    float _648 = _644 * _647;
    float _649 = _645 * _647;
    float _650 = _646 * _647;
    float _655 = (_644 + (-0.039999999105930328369140625)) * _578;
    float _656 = (_645 + (-0.039999999105930328369140625)) * _578;
    float _657 = (_646 + (-0.039999999105930328369140625)) * _578;
    float _658 = _655 + 0.039999999105930328369140625;
    float _660 = _656 + 0.039999999105930328369140625;
    float _661 = _657 + 0.039999999105930328369140625;
    vec4 _665 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _535, cbSceneParam._m0[86u].y * _536));
    float _668 = _665.x * TEXCOORD.z;
    float _669 = dot(vec3(_471, _472, _571), vec3(_386, _387, _388));
    float _672 = _669 * 2.0;
    float _676 = (_672 * _471) - _386;
    float _677 = (_672 * _472) - _387;
    float _678 = (_672 * _571) - _388;
    float _679 = dot(vec3(_386, _387, _388), vec3(_471, _472, _571));
    float _682 = abs(_679);
    float _3554 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _689 = sqrt(_573);
    float _701 = exp2((_689 * 5.0) * log2(1.0 - (_683 * 0.999000012874603271484375))) / (4.0 - (_689 * 3.0));
    float _707 = (1.0 - _701) * ((_689 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _708 = _701 * _689;
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1046;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _771 = fma(_744, cbModelParam._m0[26u].z, fma(_740, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _736));
        float _775 = fma(_744, cbModelParam._m0[27u].z, fma(_740, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _736));
        float _779 = fma(_744, cbModelParam._m0[28u].z, fma(_740, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _736));
        float _804 = _736 + _471;
        float _805 = _740 + _472;
        float _806 = _744 + _571;
        float _816 = fma(_806, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804)) - _771;
        float _817 = fma(_806, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804)) - _775;
        float _818 = fma(_806, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804)) - _779;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_771 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_775 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[34u].z) + ((((((_779 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _874 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_840.x + (-0.5));
        float _876 = _874 * (_840.y + (-0.5));
        float _877 = _874 * (_840.z + (-0.5));
        float _884 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_847.x + (-0.5));
        float _886 = _884 * (_847.y + (-0.5));
        float _887 = _884 * (_847.z + (-0.5));
        float _894 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_854.x + (-0.5));
        float _896 = _894 * (_854.y + (-0.5));
        float _897 = _894 * (_854.z + (-0.5));
        float _904 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_861.x + (-0.5));
        float _906 = _904 * (_861.y + (-0.5));
        float _907 = _904 * (_861.z + (-0.5));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = _875 * 0.5;
        float _912 = _885 * 0.5;
        float _913 = _895 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _928 = (dot(vec3(_471, _472, _571), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _938 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3602 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_940 + 1.0))) + _945) * _908;
        float _955 = _876 * 0.5;
        float _956 = _886 * 0.5;
        float _957 = _896 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_471, _472, _571), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3635 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_982 + 1.0))) + _987) * _909;
        float _997 = _877 * 0.5;
        float _998 = _887 * 0.5;
        float _999 = _897 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_471, _472, _571), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3668 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1024 + 1.0))) + _1029) * _910;
        _1046 = _877;
        _1048 = _876;
        _1049 = _875;
        _1050 = _887;
        _1051 = _886;
        _1052 = _885;
        _1053 = _897;
        _1054 = _896;
        _1055 = _895;
        _1056 = _910;
        _1057 = _909;
        _1058 = _908;
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _1047;
        _1048 = _1047;
        _1049 = _1047;
        _1050 = _1047;
        _1051 = _1047;
        _1052 = _1047;
        _1053 = _1047;
        _1054 = _1047;
        _1055 = _1047;
        _1056 = _1047;
        _1057 = _1047;
        _1058 = _1047;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1087 = fma(_744, cbModelParam._m0[30u].z, fma(_740, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _736));
        float _1091 = fma(_744, cbModelParam._m0[31u].z, fma(_740, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _736));
        float _1095 = fma(_744, cbModelParam._m0[32u].z, fma(_740, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _736));
        float _1118 = _736 + _471;
        float _1119 = _740 + _472;
        float _1120 = _744 + _571;
        float _1130 = fma(_1120, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118)) - _1087;
        float _1131 = fma(_1120, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118)) - _1091;
        float _1132 = fma(_1120, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118)) - _1095;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1087 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1091 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[35u].z) + ((((((_1095 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1186 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1153.x + (-0.5));
        float _1188 = _1186 * (_1153.y + (-0.5));
        float _1189 = _1186 * (_1153.z + (-0.5));
        float _1196 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1160.x + (-0.5));
        float _1198 = _1196 * (_1160.y + (-0.5));
        float _1199 = _1196 * (_1160.z + (-0.5));
        float _1206 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1167.x + (-0.5));
        float _1208 = _1206 * (_1167.y + (-0.5));
        float _1209 = _1206 * (_1167.z + (-0.5));
        float _1216 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1174.x + (-0.5));
        float _1218 = _1216 * (_1174.y + (-0.5));
        float _1219 = _1216 * (_1174.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_471, _472, _571), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3731 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1250 + 1.0))) + _1255) * _1220;
        float _1265 = _1188 * 0.5;
        float _1266 = _1198 * 0.5;
        float _1267 = _1208 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_471, _472, _571), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3764 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1292 + 1.0))) + _1297) * _1221;
        float _1307 = _1189 * 0.5;
        float _1308 = _1199 * 0.5;
        float _1309 = _1209 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_471, _472, _571), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3797 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1334 + 1.0))) + _1339) * _1222;
        _1356 = _1189;
        _1357 = _1188;
        _1358 = _1187;
        _1359 = _1199;
        _1360 = _1198;
        _1361 = _1197;
        _1362 = _1209;
        _1363 = _1208;
        _1364 = _1207;
        _1365 = _1222;
        _1366 = _1221;
        _1367 = _1220;
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1047;
        _1357 = _1047;
        _1358 = _1047;
        _1359 = _1047;
        _1360 = _1047;
        _1361 = _1047;
        _1362 = _1047;
        _1363 = _1047;
        _1364 = _1047;
        _1365 = _1047;
        _1366 = _1047;
        _1367 = _1047;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1060)) + _1060;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1061)) + _1061;
    float _1403 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1380));
    float _1424 = _676 * 0.5;
    float _1425 = _677 * 0.5;
    float _1426 = _678 * 0.5;
    float _1427 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1430 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1433 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1440 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1046, _1050, _1053, _1056));
        float _1444 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1448 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1455 = dot(vec4(cbModelParam._m0[39u]), vec4(_1424, _1425, _1426, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1424, _1425, _1426, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _573);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_744, cbModelParam._m0[13u].z, fma(_740, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _736)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_744, cbModelParam._m0[14u].z, fma(_740, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _736)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_744, cbModelParam._m0[15u].z, fma(_740, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _736)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_678, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676));
        float _1554 = fma(_678, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676));
        float _1557 = fma(_678, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1585 = frontier_phi_16_14_ladder;
        }
        float _1781;
        if (_1554 > 0.0)
        {
            _1781 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1781 = frontier_phi_25_21_ladder;
        }
        float _2030;
        if (_1557 > 0.0)
        {
            _2030 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2030 = frontier_phi_36_32_ladder;
        }
        float _2032 = isnan(_1781) ? _1585 : (isnan(_1585) ? _1781 : min(_1585, _1781));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1551) + _1540;
        float _2038 = (_2033 * _1554) + _1544;
        float _2039 = (_2033 * _1557) + _1548;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2042 = (-1.0) - _2040;
        float _2044 = _2040 + 1.0;
        float frontier_phi_15_36_ladder;
        float frontier_phi_15_36_ladder_1;
        float frontier_phi_15_36_ladder_2;
        if ((_2039 > _2044) || ((_2039 < _2042) || ((_2038 > _2044) || ((_2038 < _2042) || ((_2037 < _2042) || (_2037 > _2044))))))
        {
            frontier_phi_15_36_ladder = 0.0;
            frontier_phi_15_36_ladder_1 = 0.0;
            frontier_phi_15_36_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2189 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2039, cbModelParam._m0[9u].z, fma(_2038, cbModelParam._m0[9u].y, _2037 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2039, cbModelParam._m0[10u].z, fma(_2038, cbModelParam._m0[10u].y, _2037 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2039, cbModelParam._m0[11u].z, fma(_2038, cbModelParam._m0[11u].y, _2037 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_15_36_ladder = _2189.z * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_1 = _2189.y * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_2 = _2189.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_15_36_ladder_2;
        _1575 = frontier_phi_15_36_ladder_1;
        _1577 = frontier_phi_15_36_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_676, _677, _678), _1493);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _573);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1639 = fma(_744, cbModelParam._m0[21u].z, fma(_740, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _736)) + cbModelParam._m0[21u].w;
        float _1643 = fma(_744, cbModelParam._m0[22u].z, fma(_740, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _736)) + cbModelParam._m0[22u].w;
        float _1647 = fma(_744, cbModelParam._m0[23u].z, fma(_740, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _736)) + cbModelParam._m0[23u].w;
        float _1650 = fma(_678, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676));
        float _1653 = fma(_678, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676));
        float _1656 = fma(_678, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676));
        float _1786;
        if (_1650 > 0.0)
        {
            _1786 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1786 = frontier_phi_27_23_ladder;
        }
        float _2057;
        if (_1653 > 0.0)
        {
            _2057 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2057 = frontier_phi_38_34_ladder;
        }
        float _2365;
        if (_1656 > 0.0)
        {
            _2365 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2365 = frontier_phi_49_44_ladder;
        }
        float _2367 = isnan(_2057) ? _1786 : (isnan(_1786) ? _2057 : min(_1786, _2057));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1650) + _1639;
        float _2373 = (_2368 * _1653) + _1643;
        float _2374 = (_2368 * _1656) + _1647;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2375;
        float _2378 = _2375 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2374 > _2378) || ((_2374 < _2376) || ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 < _2376) || (_2372 > _2378))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2546 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2374, cbModelParam._m0[17u].z, fma(_2373, cbModelParam._m0[17u].y, _2372 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2374, cbModelParam._m0[18u].z, fma(_2373, cbModelParam._m0[18u].y, _2372 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2374, cbModelParam._m0[19u].z, fma(_2373, cbModelParam._m0[19u].y, _2372 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_24_49_ladder = _2546.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2546.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2546.x * cbModelParam._m0[1u].z;
        }
        _1675 = frontier_phi_24_49_ladder_2;
        _1677 = frontier_phi_24_49_ladder_1;
        _1679 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_676, _677, _678), _1582);
        _1675 = _1659.x * cbModelParam._m0[1u].z;
        _1677 = _1659.y * cbModelParam._m0[1u].z;
        _1679 = _1659.z * cbModelParam._m0[1u].z;
    }
    float _1692 = (((_707 * _658) + _708) * _668) * ((cbModelParam._m0[1u].w * (_1675 - _1573)) + _1573);
    float _1694 = (((_707 * _660) + _708) * _668) * ((cbModelParam._m0[1u].w * (_1677 - _1575)) + _1575);
    float _1696 = (((_707 * _661) + _708) * _668) * ((cbModelParam._m0[1u].w * (_1679 - _1577)) + _1577);
    float _1699 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, _1692 * cbSceneParam._m0[91u].x));
    vec4 _1713 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_535, _536));
    float _1715 = _1713.w;
    float _1727 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1715);
    float _1728 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1715);
    float _1729 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1715);
    uvec4 _1733 = floatBitsToUint(cbInstanceData._m0[_633 + 5u]);
    uint _1735 = _1733.x * 14u;
    uint _1736 = _1735 + 13u;
    float _1741 = _668 + (-1.0);
    float _1744 = (cbLight._m0[_1736].x * _1741) + 1.0;
    float _1745 = (cbLight._m0[_1736].y * _1741) + 1.0;
    uint _1747 = _1735 + 4u;
    float _1758 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_471, _472, _571));
    float _1761 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    float _1762 = cbLight._m0[_1747].x * _1727;
    float _1763 = cbLight._m0[_1747].y * _1728;
    float _1764 = cbLight._m0[_1747].z * _1729;
    uint _1765 = _1735 + 5u;
    uint _1771 = _1735 | 1u;
    float _1777 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_471, _472, _571));
    float _1780 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    float _1845;
    float _1846;
    float _1847;
    if (_574 == 0.0)
    {
        float _3933 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _3944 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1799 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * 0.3183098733425140380859375;
        float _1801 = (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * 0.3183098733425140380859375;
        _1845 = ((cbLight._m0[_1765].x * _1780) * _1801) + ((_1762 * _1761) * _1799);
        _1846 = ((_1780 * cbLight._m0[_1765].y) * _1801) + ((_1763 * _1761) * _1799);
        _1847 = ((_1780 * cbLight._m0[_1765].z) * _1801) + ((_1764 * _1761) * _1799);
    }
    else
    {
        float _1811 = _1758 + _574;
        float _1814 = (_574 * 2.0) + 1.0;
        float _1815 = (isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) / _1814;
        float _1822 = _1777 + _574;
        float _1824 = (isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) / _1814;
        _1845 = (((_1824 * cbLight._m0[_1765].x) * _1780) + ((_1762 * _1815) * _1761)) * 0.3183098733425140380859375;
        _1846 = (((_1824 * cbLight._m0[_1765].y) * _1780) + ((_1763 * _1815) * _1761)) * 0.3183098733425140380859375;
        _1847 = (((_1824 * cbLight._m0[_1765].z) * _1780) + ((_1764 * _1815) * _1761)) * 0.3183098733425140380859375;
    }
    uint _1851 = _1735 + 8u;
    float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1735].w)) * _573) * 0.949999988079071044921875);
    float _1868 = _1867 * _1867;
    float _1869 = cbLight._m0[_1735].x + _386;
    float _1870 = cbLight._m0[_1735].y + _387;
    float _1871 = cbLight._m0[_1735].z + _388;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1876 = _1875 * _1869;
    float _1877 = _1875 * _1870;
    float _1878 = _1875 * _1871;
    float _1879 = dot(vec3(_471, _472, _571), vec3(cbLight._m0[_1735].xyz));
    float _3965 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _1883 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1884 = dot(vec3(_471, _472, _571), vec3(_1876, _1877, _1878));
    float _3987 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1888 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_1876, _1877, _1878));
    float _3998 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1892 = _1868 * _1868;
    float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
    float _1904 = exp2(log2(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * 5.0);
    float _1905 = 0.959999978542327880859375 - _655;
    float _1907 = 0.959999978542327880859375 - _656;
    float _1908 = 0.959999978542327880859375 - _657;
    float _1915 = 1.0 - _1868;
    float _1926 = (0.5 / (((_1883 * ((_1882 * _1915) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _1915) + _1868) * _1882))) * _1882;
    float _4009 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1928 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
    uint _1944 = _1735 + 9u;
    float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _573) * 0.949999988079071044921875);
    float _1959 = _1958 * _1958;
    float _1960 = cbLight._m0[_1771].x + _386;
    float _1961 = cbLight._m0[_1771].y + _387;
    float _1962 = cbLight._m0[_1771].z + _388;
    float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
    float _1967 = _1966 * _1960;
    float _1968 = _1966 * _1961;
    float _1969 = _1966 * _1962;
    float _1970 = dot(vec3(_471, _472, _571), vec3(cbLight._m0[_1771].xyz));
    float _4020 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _1974 = dot(vec3(_471, _472, _571), vec3(_1967, _1968, _1969));
    float _4031 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1978 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1967, _1968, _1969));
    float _4042 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1982 = _1959 * _1959;
    float _1986 = ((_1977 * _1977) * (_1982 + (-1.0))) + 1.0;
    float _1993 = exp2(log2(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * 5.0);
    float _2000 = 1.0 - _1959;
    float _2010 = (0.5 / (((_1883 * ((_1973 * _2000) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _2000) + _1959) * _1973))) * _1973;
    float _4053 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2012 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1982 / ((_1986 * _1986) * 3.141590118408203125));
    float _2022 = (((((_1993 * _1905) + _658) * cbLight._m0[_1944].x) * _2012) * _1780) + ((((cbLight._m0[_1851].x * _1727) * ((_1904 * _1905) + _658)) * _1928) * _1761);
    float _2023 = (((((_1993 * _1907) + _660) * cbLight._m0[_1944].y) * _2012) * _1780) + ((((cbLight._m0[_1851].y * _1728) * ((_1904 * _1907) + _660)) * _1928) * _1761);
    float _2024 = (((((_1993 * _1908) + _661) * cbLight._m0[_1944].z) * _2012) * _1780) + ((((cbLight._m0[_1851].z * _1729) * ((_1904 * _1908) + _661)) * _1928) * _1761);
    float _2160;
    float _2162;
    float _2164;
    float _2166;
    float _2168;
    float _2170;
    if (_1733.y == 0u)
    {
        float _2101 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2102 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2101;
        float _2103 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2101;
        float _2104 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2101;
        uvec4 _2116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2117 = _2116.x;
        uint _2128 = uint((float(_2116.y) * floor(float(uint(cbSceneParam._m0[85u].y * _536) / _2117))) + floor(float(uint(cbSceneParam._m0[85u].x * _535) / _2117)));
        float _2138 = (log2(_2104 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2139 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        uint _2142 = uint(isnan(14.0) ? _2139 : (isnan(_2139) ? 14.0 : min(_2139, 14.0)));
        uvec4 _2147 = texelFetch(g_lightClusterGridBuffer, int(((_2142 << 2u) + (_2128 << 6u)) >> 2u));
        uint _2148 = _2147.x;
        uint _2149 = _2116.z;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        float _2206;
        float _2208;
        if (((((1u << ((_2149 >> 4u) & 15u)) + 4294967295u) & _2148) == 0u) || ((_2149 & 240u) == 0u))
        {
            _2198 = 0.0;
            _2200 = 0.0;
            _2202 = 0.0;
            _2204 = 0.0;
            _2206 = 0.0;
            _2208 = 0.0;
        }
        else
        {
            float _2199;
            float _2201;
            float _2203;
            float _2205;
            float _2207;
            float _2209;
            float _2423 = 0.0;
            float _2424 = 0.0;
            float _2425 = 0.0;
            float _2426 = 0.0;
            float _2427 = 0.0;
            float _2428 = 0.0;
            uint _2429 = 0u;
            uint _2438;
            bool _2439;
            for (;;)
            {
                _2438 = texelFetch(g_lightClassification, int((((_2142 << 5u) + (_2128 << 9u)) + (_2429 << 2u)) >> 2u)).x;
                _2439 = _2438 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2439)
                {
                    frontier_phi_58_pred = _2428;
                    frontier_phi_58_pred_1 = _2427;
                    frontier_phi_58_pred_2 = _2426;
                    frontier_phi_58_pred_3 = _2425;
                    frontier_phi_58_pred_4 = _2424;
                    frontier_phi_58_pred_5 = _2423;
                }
                else
                {
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    uint _2626;
                    _2620 = _2423;
                    _2621 = _2424;
                    _2622 = _2425;
                    _2623 = _2426;
                    _2624 = _2427;
                    _2625 = _2428;
                    _2626 = _2438;
                    float _2551;
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    float _2556;
                    for (;;)
                    {
                        uint _2630 = uint(findLSB(_2626)) + (_2429 << 5u);
                        uint _2627 = (_2626 + 4294967295u) & _2626;
                        uint _2632 = _2630 * 48u;
                        vec4 _2646 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 3u)).x));
                        uint _2652 = (_2630 * 48u) + 4u;
                        vec4 _2665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2652)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 3u)).x));
                        float _2666 = _2665.x;
                        float _2667 = _2665.y;
                        float _2668 = _2665.z;
                        uint _2671 = (_2630 * 48u) + 8u;
                        vec3 _2682 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2671)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 2u)).x));
                        uint _2687 = (_2630 * 48u) + 12u;
                        vec2 _2695 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x));
                        float _2701 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
                        float _2702 = _2701 * _2102;
                        float _2703 = _2701 * _2103;
                        float _2704 = _2701 * _2104;
                        float _2705 = _2646.x - _2102;
                        float _2706 = _2646.y - _2103;
                        float _2707 = _2646.z - _2104;
                        float _2708 = dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707));
                        float _2711 = inversesqrt(_2708);
                        float _2712 = _2711 * _2705;
                        float _2713 = _2711 * _2706;
                        float _2714 = _2711 * _2707;
                        float _2715 = dot(vec3(_614, _617, _620), vec3(_2712, _2713, _2714));
                        float _2720 = 1.0 - (_2708 * _2646.w);
                        float _4074 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2721 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2722 = sqrt(_2708) * _2665.w;
                        float _2725 = 1.39999997615814208984375 / (_2722 + 1.39999997615814208984375);
                        float _2726 = _2725 * _2725;
                        float _2727 = 1.0 - _2726;
                        float _2729 = (_2727 * _2727) * _574;
                        float _2732 = ((_2727 * _2715) + _2726) + _2729;
                        float _2737 = _2722 * _2722;
                        float _2742 = ((isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))) * _2721) / (((_2729 * 2.0) + 1.0) * ((_2737 * 0.699999988079071044921875) + 1.0));
                        float _2746 = dot(vec3(_2712, _2713, _2714), vec3(_2702, _2703, _2704));
                        float _4090 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2753 = dot(vec3((-0.0) - _2702, (-0.0) - _2703, (-0.0) - _2704), vec3(_614, _617, _620)) + 1.0;
                        float _2755 = (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))) * 0.5;
                        float _2762 = ((_2755 * _2755) * _2695.x) * exp2((_2695.y * 32.0) * log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))));
                        float _2764 = _574 / (_574 + 1.0);
                        float _2780 = (-0.0) - _2102;
                        float _2781 = (-0.0) - _2103;
                        float _2782 = (-0.0) - _2104;
                        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
                        float _2787 = _2786 * _2780;
                        float _2788 = _2786 * _2781;
                        float _2789 = _2786 * _2782;
                        float _2797 = exp2(log2(1.0 / ((_2737 * 3.5) + 5.0)) * 0.25);
                        float _2798 = 1.0 - _689;
                        float _2805 = sqrt(1.0 - ((1.0 - (_2798 * _2798)) * (1.0 - (_2797 * _2797))));
                        float _2806 = _2805 * _2805;
                        float _2807 = _2806 * _2806;
                        float _2808 = _2787 + _2712;
                        float _2809 = _2788 + _2713;
                        float _2810 = _2789 + _2714;
                        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
                        float _2818 = dot(vec3(_614, _617, _620), vec3(_2787, _2788, _2789));
                        float _4106 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                        float _2822 = dot(vec3(_614, _617, _620), vec3(_2814 * _2808, _2814 * _2809, _2814 * _2810));
                        float _4117 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2825 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2829 = ((_2825 * _2825) * (_2807 + (-1.0))) + 1.0;
                        float _2830 = _2725 * _2806;
                        float _2831 = _2830 * _2830;
                        float _2834 = ((1.0 - _2831) * _2715) + _2831;
                        float _4128 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2835 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                        float _2836 = 1.0 - _2806;
                        float _2846 = (0.5 / (((_2835 * ((_2821 * _2836) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2835 * _2836) + _2806) * _2821))) * _2835;
                        float _4139 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2857 = (((_2807 * 3.1415927410125732421875) * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) / ((_2829 * _2829) * ((_2737 * 2.1991131305694580078125) + 3.141590118408203125))) * _2721;
                        _2554 = (((((_2666 * 0.3183098733425140380859375) * _2764) * _2762) + _2666) * _2742) + _2623;
                        _2555 = (((((_2667 * 0.3183098733425140380859375) * _2764) * _2762) + _2667) * _2742) + _2624;
                        _2556 = (((((_2668 * 0.3183098733425140380859375) * _2764) * _2762) + _2668) * _2742) + _2625;
                        _2551 = (_2857 * _2682.x) + _2620;
                        _2552 = (_2857 * _2682.y) + _2621;
                        _2553 = (_2857 * _2682.z) + _2622;
                        if (_2627 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2620 = _2551;
                            _2621 = _2552;
                            _2622 = _2553;
                            _2623 = _2554;
                            _2624 = _2555;
                            _2625 = _2556;
                            _2626 = _2627;
                        }
                    }
                    frontier_phi_58_pred = _2556;
                    frontier_phi_58_pred_1 = _2555;
                    frontier_phi_58_pred_2 = _2554;
                    frontier_phi_58_pred_3 = _2553;
                    frontier_phi_58_pred_4 = _2552;
                    frontier_phi_58_pred_5 = _2551;
                }
                _2209 = frontier_phi_58_pred;
                _2207 = frontier_phi_58_pred_1;
                _2205 = frontier_phi_58_pred_2;
                _2203 = frontier_phi_58_pred_3;
                _2201 = frontier_phi_58_pred_4;
                _2199 = frontier_phi_58_pred_5;
                uint _2430 = _2429 + 1u;
                if (_2430 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2423 = _2199;
                    _2424 = _2201;
                    _2425 = _2203;
                    _2426 = _2205;
                    _2427 = _2207;
                    _2428 = _2209;
                    _2429 = _2430;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2198 = _2199;
            _2200 = _2201;
            _2202 = _2203;
            _2204 = _2205;
            _2206 = _2207;
            _2208 = _2209;
        }
        uvec4 _2212 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2213 = _2212.z;
        uint _2215 = (_2213 >> 8u) & 15u;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        float _2401;
        if (((4294967295u << _2215) & _2148) == 0u)
        {
            _2391 = _2198;
            _2393 = _2200;
            _2395 = _2202;
            _2397 = _2204;
            _2399 = _2206;
            _2401 = _2208;
        }
        else
        {
            float _2416 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
            float _2417 = _2416 * _2102;
            float _2418 = _2416 * _2103;
            float _2419 = _2416 * _2104;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2215 < ((_2213 >> 12u) & 15u))
            {
                float _2392;
                float _2394;
                float _2396;
                float _2398;
                float _2400;
                float _2402;
                float _2603 = _2198;
                float _2604 = _2200;
                float _2605 = _2202;
                float _2606 = _2204;
                float _2607 = _2206;
                float _2608 = _2208;
                uint _2609 = _2215;
                uint _2618;
                bool _2619;
                for (;;)
                {
                    _2618 = texelFetch(g_lightClassification, int((((_2142 << 5u) + (_2128 << 9u)) + (_2609 << 2u)) >> 2u)).x;
                    _2619 = _2618 == 0u;
                    float frontier_phi_66_pred;
                    float frontier_phi_66_pred_1;
                    float frontier_phi_66_pred_2;
                    float frontier_phi_66_pred_3;
                    float frontier_phi_66_pred_4;
                    float frontier_phi_66_pred_5;
                    if (_2619)
                    {
                        frontier_phi_66_pred = _2608;
                        frontier_phi_66_pred_1 = _2607;
                        frontier_phi_66_pred_2 = _2606;
                        frontier_phi_66_pred_3 = _2605;
                        frontier_phi_66_pred_4 = _2604;
                        frontier_phi_66_pred_5 = _2603;
                    }
                    else
                    {
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _2913 = _2603;
                        float _2914 = _2604;
                        float _2915 = _2605;
                        float _2916 = _2606;
                        float _2917 = _2607;
                        float _2918 = _2608;
                        uint _2919 = _2618;
                        uint _2920;
                        vec4 _2945;
                        float _2946;
                        vec4 _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        vec3 _2976;
                        vec2 _2985;
                        vec4 _3000;
                        vec4 _3016;
                        float _3063;
                        bool _3064;
                        for (;;)
                        {
                            uint _2930 = ((_2609 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2919));
                            _2920 = (_2919 + 4294967295u) & _2919;
                            uint _2932 = _2930 * 40u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            _2946 = _2945.w;
                            uint _2948 = (_2930 * 40u) + 4u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            _2962 = _2961.x;
                            _2963 = _2961.y;
                            _2964 = _2961.z;
                            uint _2966 = (_2930 * 40u) + 8u;
                            _2976 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x));
                            uint _2978 = (_2930 * 40u) + 12u;
                            _2985 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x));
                            uint _2987 = (_2930 * 40u) + 16u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3003 = (_2930 * 40u) + 20u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3019 = (_2930 * 40u) + 24u;
                            vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3038 = (_2930 * 40u) + 28u;
                            vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            _3063 = fma(_2104, _3051.z, fma(_2103, _3051.y, _3051.x * _2102)) + _3051.w;
                            _3064 = !((fma(_2104, _3032.z, fma(_2103, _3032.y, _3032.x * _2102)) + _3032.w) <= 0.0);
                            float frontier_phi_72_pred;
                            float frontier_phi_72_pred_1;
                            float frontier_phi_72_pred_2;
                            float frontier_phi_72_pred_3;
                            float frontier_phi_72_pred_4;
                            float frontier_phi_72_pred_5;
                            if (_3064)
                            {
                                float _3090 = _2945.x - _2102;
                                float _3091 = _2945.y - _2103;
                                float _3092 = _2945.z - _2104;
                                float _3093 = dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092));
                                float _3096 = inversesqrt(_3093);
                                float _3097 = _3096 * _3090;
                                float _3098 = _3096 * _3091;
                                float _3099 = _3096 * _3092;
                                float _3103 = 1.0 - (_3093 / (_2946 * _2946));
                                float _4150 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3104 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                                float _3108 = sqrt(_3093) * _2961.w;
                                float _3110 = 1.39999997615814208984375 / (_3108 + 1.39999997615814208984375);
                                float _3111 = _3110 * _3110;
                                float _3112 = 1.0 - _3111;
                                float _3114 = (_3112 * _3112) * _574;
                                float _3117 = ((_3112 * dot(vec3(_3097, _3098, _3099), vec3(_614, _617, _620))) + _3111) + _3114;
                                float _3122 = _3108 * _3108;
                                float _3127 = (fma(_2104, _3000.z, fma(_2103, _3000.y, _3000.x * _2102)) + _3000.w) / _3063;
                                float _3128 = (fma(_2104, _3016.z, fma(_2103, _3016.y, _3016.x * _2102)) + _3016.w) / _3063;
                                float _3132 = 1.0 - dot(vec2(_3127, _3128), vec2(_3127, _3128));
                                float _4166 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3133 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3134 = _3133 * (((isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))) * _3104) / (((_3114 * 2.0) + 1.0) * ((_3122 * 0.699999988079071044921875) + 1.0)));
                                float _3135 = (-0.0) - _2417;
                                float _3136 = (-0.0) - _2418;
                                float _3137 = (-0.0) - _2419;
                                float _3138 = dot(vec3(_3097, _3098, _3099), vec3(_2417, _2418, _2419));
                                float _4177 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3145 = dot(vec3(_3135, _3136, _3137), vec3(_614, _617, _620)) + 1.0;
                                float _3147 = (isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))) * 0.5;
                                float _3154 = ((_3147 * _3147) * _2985.x) * exp2((_2985.y * 32.0) * log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))));
                                float _3156 = _574 / (_574 + 1.0);
                                float _3177 = exp2(log2(1.0 / ((_3122 * 3.5) + 5.0)) * 0.25);
                                float _3178 = 1.0 - _689;
                                float _3185 = sqrt(1.0 - ((1.0 - (_3178 * _3178)) * (1.0 - (_3177 * _3177))));
                                float _3186 = _3185 * _3185;
                                float _3187 = _3186 * _3186;
                                float _3188 = _3097 - _2417;
                                float _3189 = _3098 - _2418;
                                float _3190 = _3099 - _2419;
                                float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                                float _3198 = dot(vec3(_614, _617, _620), vec3(_3135, _3136, _3137));
                                float _4193 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3201 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3202 = dot(vec3(_614, _617, _620), vec3(_3194 * _3188, _3194 * _3189, _3194 * _3190));
                                float _4204 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3205 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3209 = ((_3205 * _3205) * (_3187 + (-1.0))) + 1.0;
                                float _3210 = _3110 * _3186;
                                float _3211 = _3210 * _3210;
                                float _3217 = ((1.0 - _3211) * dot(vec3(_614, _617, _620), vec3(_3097, _3098, _3099))) + _3211;
                                float _4215 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3218 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3219 = 1.0 - _3186;
                                float _3229 = (0.5 / (((_3218 * ((_3201 * _3219) + _3186)) + 9.9999999392252902907785028219223e-09) + (((_3218 * _3219) + _3186) * _3201))) * _3218;
                                float _4226 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3239 = (_3133 * _3104) * (((_3187 * 3.1415927410125732421875) * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) / ((_3209 * _3209) * ((_3122 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_72_pred = ((((_2963 * 0.3183098733425140380859375) * _3156) * _3154) + _2963) * _3134;
                                frontier_phi_72_pred_1 = ((((_2964 * 0.3183098733425140380859375) * _3156) * _3154) + _2964) * _3134;
                                frontier_phi_72_pred_2 = _3239 * _2976.x;
                                frontier_phi_72_pred_3 = ((((_2962 * 0.3183098733425140380859375) * _3156) * _3154) + _2962) * _3134;
                                frontier_phi_72_pred_4 = _3239 * _2976.z;
                                frontier_phi_72_pred_5 = _3239 * _2976.y;
                            }
                            else
                            {
                                frontier_phi_72_pred = 0.0;
                                frontier_phi_72_pred_1 = 0.0;
                                frontier_phi_72_pred_2 = 0.0;
                                frontier_phi_72_pred_3 = 0.0;
                                frontier_phi_72_pred_4 = 0.0;
                                frontier_phi_72_pred_5 = 0.0;
                            }
                            _3247 = frontier_phi_72_pred;
                            _3248 = frontier_phi_72_pred_1;
                            _3243 = frontier_phi_72_pred_2;
                            _3246 = frontier_phi_72_pred_3;
                            _3245 = frontier_phi_72_pred_4;
                            _3244 = frontier_phi_72_pred_5;
                            _2903 = _3246 + _2916;
                            _2904 = _3247 + _2917;
                            _2905 = _3248 + _2918;
                            _2900 = _3243 + _2913;
                            _2901 = _3244 + _2914;
                            _2902 = _3245 + _2915;
                            if (_2920 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2920;
                                continue;
                            }
                        }
                        frontier_phi_66_pred = _2905;
                        frontier_phi_66_pred_1 = _2904;
                        frontier_phi_66_pred_2 = _2903;
                        frontier_phi_66_pred_3 = _2902;
                        frontier_phi_66_pred_4 = _2901;
                        frontier_phi_66_pred_5 = _2900;
                    }
                    _2402 = frontier_phi_66_pred;
                    _2400 = frontier_phi_66_pred_1;
                    _2398 = frontier_phi_66_pred_2;
                    _2396 = frontier_phi_66_pred_3;
                    _2394 = frontier_phi_66_pred_4;
                    _2392 = frontier_phi_66_pred_5;
                    uint _2610 = _2609 + 1u;
                    if (_2610 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2603 = _2392;
                        _2604 = _2394;
                        _2605 = _2396;
                        _2606 = _2398;
                        _2607 = _2400;
                        _2608 = _2402;
                        _2609 = _2610;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2402;
                frontier_phi_51_52_ladder_1 = _2400;
                frontier_phi_51_52_ladder_2 = _2398;
                frontier_phi_51_52_ladder_3 = _2394;
                frontier_phi_51_52_ladder_4 = _2396;
                frontier_phi_51_52_ladder_5 = _2392;
            }
            else
            {
                frontier_phi_51_52_ladder = _2208;
                frontier_phi_51_52_ladder_1 = _2206;
                frontier_phi_51_52_ladder_2 = _2204;
                frontier_phi_51_52_ladder_3 = _2200;
                frontier_phi_51_52_ladder_4 = _2202;
                frontier_phi_51_52_ladder_5 = _2198;
            }
            _2391 = frontier_phi_51_52_ladder_5;
            _2393 = frontier_phi_51_52_ladder_3;
            _2395 = frontier_phi_51_52_ladder_4;
            _2397 = frontier_phi_51_52_ladder_2;
            _2399 = frontier_phi_51_52_ladder_1;
            _2401 = frontier_phi_51_52_ladder;
        }
        float _2406 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
        _2160 = (_2406 * _2397) + _1845;
        _2162 = (_2406 * _2399) + _1846;
        _2164 = (_2406 * _2401) + _1847;
        _2166 = ((_2391 * _658) * _2406) + _2022;
        _2168 = ((_2393 * _660) * _2406) + _2023;
        _2170 = ((_2395 * _661) * _2406) + _2024;
    }
    else
    {
        _2160 = _1845;
        _2162 = _1846;
        _2164 = _1847;
        _2166 = _2022;
        _2168 = _2023;
        _2170 = _2024;
    }
    float _2286;
    float _2287;
    float _2288;
    if (_574 > 0.0)
    {
        uint _2219 = _1735 + 4u;
        float _2225 = (-0.0) - _386;
        float _2226 = (-0.0) - _387;
        float _2227 = (-0.0) - _388;
        float _2228 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_2225, _2226, _2227));
        float _4242 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2232 = _679 + 1.0;
        float _2234 = (isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0))) * 0.5;
        float _2239 = _2234 * _2234;
        float _2240 = _2239 * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 32.0);
        float _2242 = _574 / (_574 + 1.0);
        float _2243 = isnan(_1744) ? 1.0 : (isnan(1.0) ? _1744 : min(1.0, _1744));
        uint _2256 = _1735 + 5u;
        float _2262 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_2225, _2226, _2227));
        float _4263 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2269 = _2239 * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * 32.0);
        float _2270 = isnan(_1745) ? 1.0 : (isnan(1.0) ? _1745 : min(1.0, _1745));
        _2286 = ((((_2269 * cbLight._m0[_2256].x) * _2242) * _2270) + ((((cbLight._m0[_2219].x * _1727) * _2240) * _2242) * _2243)) * 0.3183098733425140380859375;
        _2287 = ((((_2269 * cbLight._m0[_2256].y) * _2242) * _2270) + ((((cbLight._m0[_2219].y * _1728) * _2240) * _2242) * _2243)) * 0.3183098733425140380859375;
        _2288 = ((((_2269 * cbLight._m0[_2256].z) * _2242) * _2270) + ((((cbLight._m0[_2219].z * _1729) * _2240) * _2242) * _2243)) * 0.3183098733425140380859375;
    }
    else
    {
        _2286 = 0.0;
        _2287 = 0.0;
        _2288 = 0.0;
    }
    float _4279 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4290 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4301 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4312 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _2294 = 0.959999978542327880859375 - (_578 * 0.959999978542327880859375);
    float _2305 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * ((_2160 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _668)) + _2286);
    float _2306 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * ((_2162 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _668)) + _2287);
    float _2307 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * ((_2164 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _668)) + _2288);
    float _2311 = _2294 - (exp2(log2(1.0 - _683) * 5.0) * _2294);
    float _2331 = cbInstanceData._m0[_633 + 6u].w * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)));
    float _2336 = _535 / cbSceneParam._m0[86u].x;
    float _2337 = _536 / cbSceneParam._m0[86u].y;
    vec4 _2351 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, (log2((isnan(cbSceneParam._m0[77u].w) ? _594 : (isnan(_594) ? cbSceneParam._m0[77u].w : min(_594, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2353 = _2351.x;
    float _2354 = _2351.y;
    float _2355 = _2351.z;
    float _2356 = _2351.w;
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    if (_594 > cbSceneParam._m0[78u].w)
    {
        float _2444 = isnan(_594) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _594 : min(cbSceneParam._m0[80u].w, _594));
        float _2445 = _2444 / _594;
        float _2456 = _2445 * _276;
        float _2457 = _277 * _2445;
        float _2458 = (-0.0) - _2457;
        float _2459 = _2445 * _278;
        float _2461 = (cbSceneParam._m0[77u].w * _2458) / _2444;
        float _2462 = _2461 + cbSceneParam._m0[79u].w;
        float _2463 = cbSceneParam._m0[79u].w - _2457;
        float _2469 = sqrt(((_2456 * _2456) + (_2457 * _2457)) + (_2459 * _2459));
        float _2472 = (1.0 - (cbSceneParam._m0[77u].w / _2444)) * _2469;
        float _2477 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2479 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2862;
        if (abs((_2458 - _2461) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2862 = ((((_2462 > 0.0) ? exp2(_2477 * _2462) : (2.0 - exp2(_2479 * _2462))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2472;
        }
        else
        {
            float _2576 = 1.0 / cbSceneParam._m0[80u].x;
            float _2577 = isnan(_2463) ? _2462 : (isnan(_2462) ? _2463 : max(_2462, _2463));
            float _2578 = isnan(_2463) ? _2462 : (isnan(_2462) ? _2463 : min(_2462, _2463));
            float _2587 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : min(_2577, 0.0));
            float _2588 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : min(_2578, 0.0));
            _2862 = ((abs(_2469 / _2458) * cbSceneParam._m0[80u].y) * ((((_2587 - _2588) * 2.0) - ((exp2(_2477 * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0)))) - exp2(_2477 * (isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0))))) * _2576)) - ((exp2(_2479 * _2587) - exp2(_2479 * _2588)) * _2576))) + (_2472 * cbSceneParam._m0[80u].z);
        }
        vec4 _2864 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, 1.0), 0.0);
        float _2873 = exp2((_2862 * (-1.44269502162933349609375)) * (1.0 - _2864.w));
        float _2874 = log2(_2873);
        float _2890 = log2(_2356);
        _2481 = (exp2(_2890 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2874 * cbSceneParam._m0[78u].x)) * _2864.x) / cbSceneParam._m0[78u].x)) + _2353;
        _2483 = (exp2(_2890 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2874 * cbSceneParam._m0[78u].y)) * _2864.y) / cbSceneParam._m0[78u].y)) + _2354;
        _2485 = (exp2(_2890 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2874 * cbSceneParam._m0[78u].z)) * _2864.z) / cbSceneParam._m0[78u].z)) + _2355;
        _2487 = _2873 * _2356;
    }
    else
    {
        _2481 = _2353;
        _2483 = _2354;
        _2485 = _2355;
        _2487 = _2356;
    }
    float _2498 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2499 = _2498 == 3.0;
    float _2500 = log2(_2487);
    float _2507 = exp2(_2500 * cbSceneParam._m0[78u].x) * ((_2305 + ((_2166 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _559.x) * _2311) - _2305) * _523));
    float _2508 = exp2(_2500 * cbSceneParam._m0[78u].y) * ((_2306 + ((_2168 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _559.y) * _2311) - _2306) * _523));
    float _2509 = exp2(_2500 * cbSceneParam._m0[78u].z) * ((_2307 + ((_2170 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _559.z) * _2311) - _2307) * _523));
    float _2518 = (_2498 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2518 * (_2499 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2481)));
    SV_Target.y = _2518 * (_2499 ? _2508 : (_2508 + (cbSceneParam._m0[72u].w * _2483)));
    SV_Target.z = _2518 * (_2499 ? _2509 : (_2509 + (cbSceneParam._m0[72u].w * _2485)));
    SV_Target.w = _2331;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2331;
}


