#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Crystal_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1102;
float _3485;
float _3486;
float _3487;
float _3488;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _202 = _201 * _194;
    float _203 = _201 * _195;
    float _204 = _201 * _196;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = _215 * TANGENT.x;
    float _217 = _215 * TANGENT.y;
    float _218 = _215 * TANGENT.z;
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _295 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _301 = _295.w;
    float _312 = dot(vec3(_280, _281, _282), vec3(_202, _203, _204));
    float _315 = dot(vec3(_280, _281, _282), vec3(_216, _217, _218));
    float _318 = dot(vec3(_280, _281, _282), vec3(_223, _224, _225));
    float _324 = inversesqrt(dot(vec3(_312, _315, _318), vec3(_312, _315, _318)));
    float _346 = dot(vec4(texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _366 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_312 * cbMtdParam._m0[12u].x) * _324) * _346) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_315 * cbMtdParam._m0[12u].x) * _324) * _346) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _389 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _390 = _389 * _280;
    float _391 = _389 * _281;
    float _392 = _389 * _282;
    float _393 = dot(vec4(_390, _391, _392, 0.0), vec4(_223, _224, _225, 0.0));
    float _396 = _393 - cbMtdParam._m0[13u].x;
    float _3497 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _403 = exp2(log2(1.0 - (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _419 = ((((_295.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _366.x) * cbMtdParam._m0[9u].x) * ((_403 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _424 = ((((_295.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _366.y) * cbMtdParam._m0[9u].y) * ((_403 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _429 = ((((_295.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _366.z) * cbMtdParam._m0[9u].z) * ((_403 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _446 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _454 = (_446.x * 2.0) + (-1.0);
    float _455 = (_446.y * 2.0) + (-1.0);
    float _456 = dot(vec2(_454, _455), vec2(_454, _455));
    float _3513 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _461 = sqrt(1.0 - (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))));
    float _464 = fma(_461, _223, fma(_455, _216, _454 * _202));
    float _467 = fma(_461, _224, fma(_455, _217, _454 * _203));
    float _470 = fma(_461, _225, fma(_455, _218, _454 * _204));
    float _474 = inversesqrt(dot(vec3(_464, _467, _470), vec3(_464, _467, _470)));
    float _475 = _474 * _464;
    float _476 = _474 * _467;
    float _478 = cbMtdParam._m0[14u].z + _446.z;
    vec4 _490 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _494 = cbMtdParam._m0[13u].w * _490.x;
    vec4 _507 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _516 = _393 - cbMtdParam._m0[12u].w;
    float _3524 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _526 = ((cbMtdParam._m0[14u].w * _507.x) + cbMtdParam._m0[14u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[14u].x));
    float _3540 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _550 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (_475 * cbMtdParam._m0[15u].x));
    float _551 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (_476 * cbMtdParam._m0[15u].x));
    float _558 = isnan(cbInstanceData._m0[8u].x) ? _550 : (isnan(_550) ? cbInstanceData._m0[8u].x : max(_550, cbInstanceData._m0[8u].x));
    float _559 = isnan(cbInstanceData._m0[8u].y) ? _551 : (isnan(_551) ? cbInstanceData._m0[8u].y : max(_551, cbInstanceData._m0[8u].y));
    vec4 _563 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _558 : (isnan(_558) ? cbInstanceData._m0[8u].z : min(_558, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _559 : (isnan(_559) ? cbInstanceData._m0[8u].w : min(_559, cbInstanceData._m0[8u].w))));
    float _575 = _474 * _470;
    float _3571 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _576 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _3582 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _577 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _578 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3598 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _3609 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3620 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3631 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _582 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _598 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _603 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _605 = _603.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _781 = sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282));
        float _787 = (cbMatDynParam._m0[5u].x * _781) + cbMatDynParam._m0[5u].y;
        float _3642 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _792 = (cbMatDynParam._m0[5u].z * _781) + cbMatDynParam._m0[5u].w;
        float _3653 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) - _788)) + _788) < ((_605 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _615 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _616 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _636 = fma(_575, cbSceneParam._m0[5u].z, fma(_476, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _475));
    float _639 = fma(_575, cbSceneParam._m0[6u].z, fma(_476, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _475));
    float _642 = fma(_575, cbSceneParam._m0[7u].z, fma(_476, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _475));
    uint _655 = uint(roundEven(NORMAL.w)) * 13u;
    uint _656 = _655 + 9u;
    uint _657 = _656 + uint(cbMatDynParam._m0[0u].w);
    float _663 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_657].x;
    float _664 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_657].y;
    float _665 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_657].z;
    float _3664 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _669 = 1.0 - _582;
    float _670 = _666 * _669;
    float _671 = _667 * _669;
    float _672 = _668 * _669;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _582;
    float _678 = (_667 + (-0.039999999105930328369140625)) * _582;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _582;
    float _680 = _677 + 0.039999999105930328369140625;
    float _682 = _678 + 0.039999999105930328369140625;
    float _683 = _679 + 0.039999999105930328369140625;
    vec4 _691 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _615, cbSceneParam._m0[86u].y * _616));
    float _694 = _691.x * TEXCOORD.z;
    float _695 = dot(vec3(_475, _476, _575), vec3(_390, _391, _392));
    float _698 = _695 * 2.0;
    float _702 = (_698 * _475) - _390;
    float _703 = (_698 * _476) - _391;
    float _704 = (_698 * _575) - _392;
    float _705 = dot(vec3(_390, _391, _392), vec3(_475, _476, _575));
    float _708 = abs(_705);
    float _3697 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _709 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _715 = sqrt(_577);
    float _727 = exp2((_715 * 5.0) * log2(1.0 - (_709 * 0.999000012874603271484375))) / (4.0 - (_715 * 3.0));
    float _733 = (1.0 - _727) * ((_715 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _734 = _727 * _715;
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1101;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _826 = fma(_770, cbModelParam._m0[26u].z, fma(_766, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _762));
        float _830 = fma(_770, cbModelParam._m0[27u].z, fma(_766, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _762));
        float _834 = fma(_770, cbModelParam._m0[28u].z, fma(_766, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _762));
        float _859 = _762 + _475;
        float _860 = _766 + _476;
        float _861 = _770 + _575;
        float _871 = fma(_861, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) - _826;
        float _872 = fma(_861, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) - _830;
        float _873 = fma(_861, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) - _834;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_826 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_830 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[34u].z) + ((((((_834 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _929 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_895.x + (-0.5));
        float _931 = _929 * (_895.y + (-0.5));
        float _932 = _929 * (_895.z + (-0.5));
        float _939 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_902.x + (-0.5));
        float _941 = _939 * (_902.y + (-0.5));
        float _942 = _939 * (_902.z + (-0.5));
        float _949 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_909.x + (-0.5));
        float _951 = _949 * (_909.y + (-0.5));
        float _952 = _949 * (_909.z + (-0.5));
        float _959 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_916.x + (-0.5));
        float _961 = _959 * (_916.y + (-0.5));
        float _962 = _959 * (_916.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _983 = (dot(vec3(_475, _476, _575), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _993 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3745 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_995 + 1.0))) + _1000) * _963;
        float _1010 = _931 * 0.5;
        float _1011 = _941 * 0.5;
        float _1012 = _951 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_475, _476, _575), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3778 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1037 + 1.0))) + _1042) * _964;
        float _1052 = _932 * 0.5;
        float _1053 = _942 * 0.5;
        float _1054 = _952 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_475, _476, _575), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3811 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1079 + 1.0))) + _1084) * _965;
        _1101 = _932;
        _1103 = _931;
        _1104 = _930;
        _1105 = _942;
        _1106 = _941;
        _1107 = _940;
        _1108 = _952;
        _1109 = _951;
        _1110 = _950;
        _1111 = _965;
        _1112 = _964;
        _1113 = _963;
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _1102;
        _1103 = _1102;
        _1104 = _1102;
        _1105 = _1102;
        _1106 = _1102;
        _1107 = _1102;
        _1108 = _1102;
        _1109 = _1102;
        _1110 = _1102;
        _1111 = _1102;
        _1112 = _1102;
        _1113 = _1102;
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1145 = fma(_770, cbModelParam._m0[30u].z, fma(_766, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _762));
        float _1149 = fma(_770, cbModelParam._m0[31u].z, fma(_766, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _762));
        float _1153 = fma(_770, cbModelParam._m0[32u].z, fma(_766, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _762));
        float _1176 = _762 + _475;
        float _1177 = _766 + _476;
        float _1178 = _770 + _575;
        float _1188 = fma(_1178, cbModelParam._m0[30u].z, fma(_1177, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1176)) - _1145;
        float _1189 = fma(_1178, cbModelParam._m0[31u].z, fma(_1177, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1176)) - _1149;
        float _1190 = fma(_1178, cbModelParam._m0[32u].z, fma(_1177, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1176)) - _1153;
        float _1194 = inversesqrt(dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190)));
        float _1207 = ((_1194 * _1188) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1145 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1194 * _1189) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1149 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1194 * _1190) / cbModelParam._m0[35u].z) + ((((((_1153 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        float _1244 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1211.x + (-0.5));
        float _1246 = _1244 * (_1211.y + (-0.5));
        float _1247 = _1244 * (_1211.z + (-0.5));
        float _1254 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1218.x + (-0.5));
        float _1256 = _1254 * (_1218.y + (-0.5));
        float _1257 = _1254 * (_1218.z + (-0.5));
        float _1264 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1225.x + (-0.5));
        float _1266 = _1264 * (_1225.y + (-0.5));
        float _1267 = _1264 * (_1225.z + (-0.5));
        float _1274 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1232.x + (-0.5));
        float _1276 = _1274 * (_1232.y + (-0.5));
        float _1277 = _1274 * (_1232.z + (-0.5));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = _1245 * 0.5;
        float _1282 = _1255 * 0.5;
        float _1283 = _1265 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_475, _476, _575), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3874 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1308 + 1.0))) + _1313) * _1278;
        float _1323 = _1246 * 0.5;
        float _1324 = _1256 * 0.5;
        float _1325 = _1266 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_475, _476, _575), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3907 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1350 + 1.0))) + _1355) * _1279;
        float _1365 = _1247 * 0.5;
        float _1366 = _1257 * 0.5;
        float _1367 = _1267 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_475, _476, _575), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _3940 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1392 + 1.0))) + _1397) * _1280;
        _1414 = _1247;
        _1415 = _1246;
        _1416 = _1245;
        _1417 = _1257;
        _1418 = _1256;
        _1419 = _1255;
        _1420 = _1267;
        _1421 = _1266;
        _1422 = _1265;
        _1423 = _1280;
        _1424 = _1279;
        _1425 = _1278;
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
    }
    else
    {
        _1414 = _1102;
        _1415 = _1102;
        _1416 = _1102;
        _1417 = _1102;
        _1418 = _1102;
        _1419 = _1102;
        _1420 = _1102;
        _1421 = _1102;
        _1422 = _1102;
        _1423 = _1102;
        _1424 = _1102;
        _1425 = _1102;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1114)) + _1114;
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1115)) + _1115;
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1116)) + _1116;
    float _1461 = fma(_1440, cbSceneParam._m0[89u].z, fma(_1439, cbSceneParam._m0[89u].y, _1438 * cbSceneParam._m0[89u].x));
    float _1464 = fma(_1440, cbSceneParam._m0[90u].z, fma(_1439, cbSceneParam._m0[90u].y, _1438 * cbSceneParam._m0[90u].x));
    float _1467 = fma(_1440, cbSceneParam._m0[91u].z, fma(_1439, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1438));
    float _1482 = _702 * 0.5;
    float _1483 = _703 * 0.5;
    float _1484 = _704 * 0.5;
    float _1485 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1488 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1491 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1525;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1498 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1101, _1105, _1108, _1111));
        float _1502 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1506 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1513 = dot(vec4(cbModelParam._m0[39u]), vec4(_1482, _1483, _1484, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1513) ? 0.0 : (isnan(0.0) ? _1513 : max(0.0, _1513))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1536;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1527 = dot(vec4(cbModelParam._m0[40u]), vec4(_1482, _1483, _1484, 1.0));
        _1536 = dot(vec3(isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1527) ? 0.0 : (isnan(0.0) ? _1527 : max(0.0, _1527))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1536 = 1.0;
    }
    float _1540 = (_1536 * cbModelParam._m0[1u].x) + (_1525 * (1.0 - cbModelParam._m0[1u].x));
    float _1550 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _577);
    float _1551 = isnan(_1550) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1550 : min(cbModelParam._m0[25u].z, _1550));
    float _1631;
    float _1633;
    float _1635;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1598 = fma(_770, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _762)) + cbModelParam._m0[13u].w;
        float _1602 = fma(_770, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _762)) + cbModelParam._m0[14u].w;
        float _1606 = fma(_770, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _762)) + cbModelParam._m0[15u].w;
        float _1609 = fma(_704, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _702));
        float _1612 = fma(_704, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _702));
        float _1615 = fma(_704, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _702));
        float _1643;
        if (_1609 > 0.0)
        {
            _1643 = abs((1.0 - _1598) / _1609);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1598 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1643 = frontier_phi_19_17_ladder;
        }
        float _1839;
        if (_1612 > 0.0)
        {
            _1839 = abs((1.0 - _1602) / _1612);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1602 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1839 = frontier_phi_28_24_ladder;
        }
        float _2088;
        if (_1615 > 0.0)
        {
            _2088 = abs((1.0 - _1606) / _1615);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1606 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2088 = frontier_phi_39_35_ladder;
        }
        float _2090 = isnan(_1839) ? _1643 : (isnan(_1643) ? _1839 : min(_1643, _1839));
        float _2091 = isnan(_2088) ? _2090 : (isnan(_2090) ? _2088 : min(_2090, _2088));
        float _2095 = (_2091 * _1609) + _1598;
        float _2096 = (_2091 * _1612) + _1602;
        float _2097 = (_2091 * _1615) + _1606;
        float _2098 = _2091 * 9.9999997473787516355514526367188e-05;
        float _2100 = (-1.0) - _2098;
        float _2102 = _2098 + 1.0;
        float frontier_phi_18_39_ladder;
        float frontier_phi_18_39_ladder_1;
        float frontier_phi_18_39_ladder_2;
        if ((_2097 > _2102) || ((_2097 < _2100) || ((_2096 > _2102) || ((_2096 < _2100) || ((_2095 < _2100) || (_2095 > _2102))))))
        {
            frontier_phi_18_39_ladder = 0.0;
            frontier_phi_18_39_ladder_1 = 0.0;
            frontier_phi_18_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2247 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2097, cbModelParam._m0[9u].z, fma(_2096, cbModelParam._m0[9u].y, _2095 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2097, cbModelParam._m0[10u].z, fma(_2096, cbModelParam._m0[10u].y, _2095 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2097, cbModelParam._m0[11u].z, fma(_2096, cbModelParam._m0[11u].y, _2095 * cbModelParam._m0[11u].x))), _1551);
            frontier_phi_18_39_ladder = _2247.z * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_1 = _2247.y * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_2 = _2247.x * cbModelParam._m0[1u].y;
        }
        _1631 = frontier_phi_18_39_ladder_2;
        _1633 = frontier_phi_18_39_ladder_1;
        _1635 = frontier_phi_18_39_ladder;
    }
    else
    {
        vec4 _1619 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_702, _703, _704), _1551);
        _1631 = _1619.x * cbModelParam._m0[1u].y;
        _1633 = _1619.y * cbModelParam._m0[1u].y;
        _1635 = _1619.z * cbModelParam._m0[1u].y;
    }
    float _1639 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _577);
    float _1640 = isnan(_1639) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1639 : min(cbModelParam._m0[25u].w, _1639));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1697 = fma(_770, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _762)) + cbModelParam._m0[21u].w;
        float _1701 = fma(_770, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _762)) + cbModelParam._m0[22u].w;
        float _1705 = fma(_770, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _762)) + cbModelParam._m0[23u].w;
        float _1708 = fma(_704, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _702));
        float _1711 = fma(_704, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _702));
        float _1714 = fma(_704, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _702));
        float _1844;
        if (_1708 > 0.0)
        {
            _1844 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1844 = frontier_phi_30_26_ladder;
        }
        float _2115;
        if (_1711 > 0.0)
        {
            _2115 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _2115 = frontier_phi_41_37_ladder;
        }
        float _2423;
        if (_1714 > 0.0)
        {
            _2423 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2423 = frontier_phi_52_47_ladder;
        }
        float _2425 = isnan(_2115) ? _1844 : (isnan(_1844) ? _2115 : min(_1844, _2115));
        float _2426 = isnan(_2423) ? _2425 : (isnan(_2425) ? _2423 : min(_2425, _2423));
        float _2430 = (_2426 * _1708) + _1697;
        float _2431 = (_2426 * _1711) + _1701;
        float _2432 = (_2426 * _1714) + _1705;
        float _2433 = _2426 * 9.9999997473787516355514526367188e-05;
        float _2434 = (-1.0) - _2433;
        float _2436 = _2433 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2432 > _2436) || ((_2432 < _2434) || ((_2431 > _2436) || ((_2431 < _2434) || ((_2430 < _2434) || (_2430 > _2436))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2432, cbModelParam._m0[17u].z, fma(_2431, cbModelParam._m0[17u].y, _2430 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2432, cbModelParam._m0[18u].z, fma(_2431, cbModelParam._m0[18u].y, _2430 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2432, cbModelParam._m0[19u].z, fma(_2431, cbModelParam._m0[19u].y, _2430 * cbModelParam._m0[19u].x))), _1640);
            frontier_phi_27_52_ladder = _2612.x * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2612.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2612.y * cbModelParam._m0[1u].z;
        }
        _1733 = frontier_phi_27_52_ladder;
        _1735 = frontier_phi_27_52_ladder_2;
        _1737 = frontier_phi_27_52_ladder_1;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_702, _703, _704), _1640);
        _1733 = _1717.x * cbModelParam._m0[1u].z;
        _1735 = _1717.y * cbModelParam._m0[1u].z;
        _1737 = _1717.z * cbModelParam._m0[1u].z;
    }
    float _1750 = (((_733 * _680) + _734) * _694) * ((cbModelParam._m0[1u].w * (_1733 - _1631)) + _1631);
    float _1752 = (((_733 * _682) + _734) * _694) * ((cbModelParam._m0[1u].w * (_1735 - _1633)) + _1633);
    float _1754 = (((_733 * _683) + _734) * _694) * ((cbModelParam._m0[1u].w * (_1737 - _1635)) + _1635);
    float _1757 = fma(_1754, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1754, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1754, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, _1750 * cbSceneParam._m0[91u].x));
    vec4 _1771 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_615, _616));
    float _1773 = _1771.w;
    float _1785 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1773);
    float _1786 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1773);
    float _1787 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1773);
    uvec4 _1791 = floatBitsToUint(cbInstanceData._m0[_655 + 5u]);
    uint _1793 = _1791.x * 14u;
    uint _1794 = _1793 + 13u;
    float _1799 = _694 + (-1.0);
    float _1802 = (cbLight._m0[_1794].x * _1799) + 1.0;
    float _1803 = (cbLight._m0[_1794].y * _1799) + 1.0;
    uint _1805 = _1793 + 4u;
    float _1816 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_475, _476, _575));
    float _1819 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
    float _1820 = cbLight._m0[_1805].x * _1785;
    float _1821 = cbLight._m0[_1805].y * _1786;
    float _1822 = cbLight._m0[_1805].z * _1787;
    uint _1823 = _1793 + 5u;
    uint _1829 = _1793 | 1u;
    float _1835 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_475, _476, _575));
    float _1838 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
    float _1903;
    float _1904;
    float _1905;
    if (_578 == 0.0)
    {
        float _4076 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _4087 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1857 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
        float _1859 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
        _1903 = ((cbLight._m0[_1823].x * _1838) * _1859) + ((_1820 * _1819) * _1857);
        _1904 = ((_1838 * cbLight._m0[_1823].y) * _1859) + ((_1821 * _1819) * _1857);
        _1905 = ((_1838 * cbLight._m0[_1823].z) * _1859) + ((_1822 * _1819) * _1857);
    }
    else
    {
        float _1869 = _1816 + _578;
        float _1872 = (_578 * 2.0) + 1.0;
        float _1873 = (isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) / _1872;
        float _1880 = _1835 + _578;
        float _1882 = (isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) / _1872;
        _1903 = (((_1882 * cbLight._m0[_1823].x) * _1838) + ((_1820 * _1873) * _1819)) * 0.3183098733425140380859375;
        _1904 = (((_1882 * cbLight._m0[_1823].y) * _1838) + ((_1821 * _1873) * _1819)) * 0.3183098733425140380859375;
        _1905 = (((_1882 * cbLight._m0[_1823].z) * _1838) + ((_1822 * _1873) * _1819)) * 0.3183098733425140380859375;
    }
    uint _1909 = _1793 + 8u;
    float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _577) * 0.949999988079071044921875);
    float _1926 = _1925 * _1925;
    float _1927 = cbLight._m0[_1793].x + _390;
    float _1928 = cbLight._m0[_1793].y + _391;
    float _1929 = cbLight._m0[_1793].z + _392;
    float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
    float _1934 = _1933 * _1927;
    float _1935 = _1933 * _1928;
    float _1936 = _1933 * _1929;
    float _1937 = dot(vec3(_475, _476, _575), vec3(cbLight._m0[_1793].xyz));
    float _4108 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _1941 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _1942 = dot(vec3(_475, _476, _575), vec3(_1934, _1935, _1936));
    float _4130 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _1946 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1934, _1935, _1936));
    float _4141 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1950 = _1926 * _1926;
    float _1954 = ((_1945 * _1945) * (_1950 + (-1.0))) + 1.0;
    float _1962 = exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0);
    float _1963 = 0.959999978542327880859375 - _677;
    float _1965 = 0.959999978542327880859375 - _678;
    float _1966 = 0.959999978542327880859375 - _679;
    float _1973 = 1.0 - _1926;
    float _1984 = (0.5 / (((_1941 * ((_1940 * _1973) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _1973) + _1926) * _1940))) * _1940;
    float _4152 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1986 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1950 / ((_1954 * _1954) * 3.141590118408203125));
    uint _2002 = _1793 + 9u;
    float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _577) * 0.949999988079071044921875);
    float _2017 = _2016 * _2016;
    float _2018 = cbLight._m0[_1829].x + _390;
    float _2019 = cbLight._m0[_1829].y + _391;
    float _2020 = cbLight._m0[_1829].z + _392;
    float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
    float _2025 = _2024 * _2018;
    float _2026 = _2024 * _2019;
    float _2027 = _2024 * _2020;
    float _2028 = dot(vec3(_475, _476, _575), vec3(cbLight._m0[_1829].xyz));
    float _4163 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2032 = dot(vec3(_475, _476, _575), vec3(_2025, _2026, _2027));
    float _4174 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2036 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_2025, _2026, _2027));
    float _4185 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2040 = _2017 * _2017;
    float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
    float _2051 = exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0);
    float _2058 = 1.0 - _2017;
    float _2068 = (0.5 / (((_1941 * ((_2031 * _2058) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2058) + _2017) * _2031))) * _2031;
    float _4196 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
    float _2080 = (((((_2051 * _1963) + _680) * cbLight._m0[_2002].x) * _2070) * _1838) + ((((cbLight._m0[_1909].x * _1785) * ((_1962 * _1963) + _680)) * _1986) * _1819);
    float _2081 = (((((_2051 * _1965) + _682) * cbLight._m0[_2002].y) * _2070) * _1838) + ((((cbLight._m0[_1909].y * _1786) * ((_1962 * _1965) + _682)) * _1986) * _1819);
    float _2082 = (((((_2051 * _1966) + _683) * cbLight._m0[_2002].z) * _2070) * _1838) + ((((cbLight._m0[_1909].z * _1787) * ((_1962 * _1966) + _683)) * _1986) * _1819);
    float _2218;
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    float _2228;
    if (_1791.y == 0u)
    {
        float _2159 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2159;
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2159;
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2159;
        uvec4 _2174 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2175 = _2174.x;
        uint _2186 = uint((float(_2174.y) * floor(float(uint(cbSceneParam._m0[85u].y * _616) / _2175))) + floor(float(uint(cbSceneParam._m0[85u].x * _615) / _2175)));
        float _2196 = (log2(_2162 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2197 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        uint _2200 = uint(isnan(14.0) ? _2197 : (isnan(_2197) ? 14.0 : min(_2197, 14.0)));
        uvec4 _2205 = texelFetch(g_lightClusterGridBuffer, int(((_2200 << 2u) + (_2186 << 6u)) >> 2u));
        uint _2206 = _2205.x;
        uint _2207 = _2174.z;
        float _2256;
        float _2258;
        float _2260;
        float _2262;
        float _2264;
        float _2266;
        if (((((1u << ((_2207 >> 4u) & 15u)) + 4294967295u) & _2206) == 0u) || ((_2207 & 240u) == 0u))
        {
            _2256 = 0.0;
            _2258 = 0.0;
            _2260 = 0.0;
            _2262 = 0.0;
            _2264 = 0.0;
            _2266 = 0.0;
        }
        else
        {
            float _2257;
            float _2259;
            float _2261;
            float _2263;
            float _2265;
            float _2267;
            float _2481 = 0.0;
            float _2482 = 0.0;
            float _2483 = 0.0;
            float _2484 = 0.0;
            float _2485 = 0.0;
            float _2486 = 0.0;
            uint _2487 = 0u;
            uint _2496;
            bool _2497;
            for (;;)
            {
                _2496 = texelFetch(g_lightClassification, int((((_2200 << 5u) + (_2186 << 9u)) + (_2487 << 2u)) >> 2u)).x;
                _2497 = _2496 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2497)
                {
                    frontier_phi_61_pred = _2482;
                    frontier_phi_61_pred_1 = _2486;
                    frontier_phi_61_pred_2 = _2485;
                    frontier_phi_61_pred_3 = _2484;
                    frontier_phi_61_pred_4 = _2483;
                    frontier_phi_61_pred_5 = _2481;
                }
                else
                {
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    uint _2708;
                    _2702 = _2481;
                    _2703 = _2482;
                    _2704 = _2483;
                    _2705 = _2484;
                    _2706 = _2485;
                    _2707 = _2486;
                    _2708 = _2496;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    for (;;)
                    {
                        uint _2712 = uint(findLSB(_2708)) + (_2487 << 5u);
                        uint _2709 = (_2708 + 4294967295u) & _2708;
                        uint _2714 = _2712 * 48u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        uint _2734 = (_2712 * 48u) + 4u;
                        vec4 _2747 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 3u)).x));
                        float _2748 = _2747.x;
                        float _2749 = _2747.y;
                        float _2750 = _2747.z;
                        uint _2753 = (_2712 * 48u) + 8u;
                        vec3 _2764 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x));
                        uint _2769 = (_2712 * 48u) + 12u;
                        vec2 _2777 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x));
                        float _2783 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
                        float _2784 = _2783 * _2160;
                        float _2785 = _2783 * _2161;
                        float _2786 = _2783 * _2162;
                        float _2787 = _2728.x - _2160;
                        float _2788 = _2728.y - _2161;
                        float _2789 = _2728.z - _2162;
                        float _2790 = dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789));
                        float _2793 = inversesqrt(_2790);
                        float _2794 = _2793 * _2787;
                        float _2795 = _2793 * _2788;
                        float _2796 = _2793 * _2789;
                        float _2797 = dot(vec3(_636, _639, _642), vec3(_2794, _2795, _2796));
                        float _2802 = 1.0 - (_2790 * _2728.w);
                        float _4217 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2803 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2804 = sqrt(_2790) * _2747.w;
                        float _2807 = 1.39999997615814208984375 / (_2804 + 1.39999997615814208984375);
                        float _2808 = _2807 * _2807;
                        float _2809 = 1.0 - _2808;
                        float _2811 = (_2809 * _2809) * _578;
                        float _2814 = ((_2809 * _2797) + _2808) + _2811;
                        float _2819 = _2804 * _2804;
                        float _2824 = ((isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))) * _2803) / (((_2811 * 2.0) + 1.0) * ((_2819 * 0.699999988079071044921875) + 1.0));
                        float _2828 = dot(vec3(_2794, _2795, _2796), vec3(_2784, _2785, _2786));
                        float _4233 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2835 = dot(vec3((-0.0) - _2784, (-0.0) - _2785, (-0.0) - _2786), vec3(_636, _639, _642)) + 1.0;
                        float _2837 = (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))) * 0.5;
                        float _2844 = ((_2837 * _2837) * _2777.x) * exp2((_2777.y * 32.0) * log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))));
                        float _2846 = _578 / (_578 + 1.0);
                        float _2862 = (-0.0) - _2160;
                        float _2863 = (-0.0) - _2161;
                        float _2864 = (-0.0) - _2162;
                        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
                        float _2869 = _2868 * _2862;
                        float _2870 = _2868 * _2863;
                        float _2871 = _2868 * _2864;
                        float _2879 = exp2(log2(1.0 / ((_2819 * 3.5) + 5.0)) * 0.25);
                        float _2880 = 1.0 - _715;
                        float _2887 = sqrt(1.0 - ((1.0 - (_2880 * _2880)) * (1.0 - (_2879 * _2879))));
                        float _2888 = _2887 * _2887;
                        float _2889 = _2888 * _2888;
                        float _2890 = _2869 + _2794;
                        float _2891 = _2870 + _2795;
                        float _2892 = _2871 + _2796;
                        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
                        float _2900 = dot(vec3(_636, _639, _642), vec3(_2869, _2870, _2871));
                        float _4249 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2903 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2904 = dot(vec3(_636, _639, _642), vec3(_2896 * _2890, _2896 * _2891, _2896 * _2892));
                        float _4260 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2907 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                        float _2911 = ((_2907 * _2907) * (_2889 + (-1.0))) + 1.0;
                        float _2912 = _2807 * _2888;
                        float _2913 = _2912 * _2912;
                        float _2916 = ((1.0 - _2913) * _2797) + _2913;
                        float _4271 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2917 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                        float _2918 = 1.0 - _2888;
                        float _2928 = (0.5 / (((_2917 * ((_2903 * _2918) + _2888)) + 9.9999999392252902907785028219223e-09) + (((_2917 * _2918) + _2888) * _2903))) * _2917;
                        float _4282 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2939 = (((_2889 * 3.1415927410125732421875) * (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) / ((_2911 * _2911) * ((_2819 * 2.1991131305694580078125) + 3.141590118408203125))) * _2803;
                        _2620 = (((((_2748 * 0.3183098733425140380859375) * _2846) * _2844) + _2748) * _2824) + _2705;
                        _2621 = (((((_2749 * 0.3183098733425140380859375) * _2846) * _2844) + _2749) * _2824) + _2706;
                        _2622 = (((((_2750 * 0.3183098733425140380859375) * _2846) * _2844) + _2750) * _2824) + _2707;
                        _2617 = (_2939 * _2764.x) + _2702;
                        _2618 = (_2939 * _2764.y) + _2703;
                        _2619 = (_2939 * _2764.z) + _2704;
                        if (_2709 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2702 = _2617;
                            _2703 = _2618;
                            _2704 = _2619;
                            _2705 = _2620;
                            _2706 = _2621;
                            _2707 = _2622;
                            _2708 = _2709;
                        }
                    }
                    frontier_phi_61_pred = _2618;
                    frontier_phi_61_pred_1 = _2622;
                    frontier_phi_61_pred_2 = _2621;
                    frontier_phi_61_pred_3 = _2620;
                    frontier_phi_61_pred_4 = _2619;
                    frontier_phi_61_pred_5 = _2617;
                }
                _2259 = frontier_phi_61_pred;
                _2267 = frontier_phi_61_pred_1;
                _2265 = frontier_phi_61_pred_2;
                _2263 = frontier_phi_61_pred_3;
                _2261 = frontier_phi_61_pred_4;
                _2257 = frontier_phi_61_pred_5;
                uint _2488 = _2487 + 1u;
                if (_2488 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2481 = _2257;
                    _2482 = _2259;
                    _2483 = _2261;
                    _2484 = _2263;
                    _2485 = _2265;
                    _2486 = _2267;
                    _2487 = _2488;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2256 = _2257;
            _2258 = _2259;
            _2260 = _2261;
            _2262 = _2263;
            _2264 = _2265;
            _2266 = _2267;
        }
        uvec4 _2270 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2271 = _2270.z;
        uint _2273 = (_2271 >> 8u) & 15u;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        if (((4294967295u << _2273) & _2206) == 0u)
        {
            _2449 = _2256;
            _2451 = _2258;
            _2453 = _2260;
            _2455 = _2262;
            _2457 = _2264;
            _2459 = _2266;
        }
        else
        {
            float _2474 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
            float _2475 = _2474 * _2160;
            float _2476 = _2474 * _2161;
            float _2477 = _2474 * _2162;
            float frontier_phi_54_55_ladder;
            float frontier_phi_54_55_ladder_1;
            float frontier_phi_54_55_ladder_2;
            float frontier_phi_54_55_ladder_3;
            float frontier_phi_54_55_ladder_4;
            float frontier_phi_54_55_ladder_5;
            if (_2273 < ((_2271 >> 12u) & 15u))
            {
                float _2450;
                float _2452;
                float _2454;
                float _2456;
                float _2458;
                float _2460;
                float _2685 = _2256;
                float _2686 = _2258;
                float _2687 = _2260;
                float _2688 = _2262;
                float _2689 = _2264;
                float _2690 = _2266;
                uint _2691 = _2273;
                uint _2700;
                bool _2701;
                for (;;)
                {
                    _2700 = texelFetch(g_lightClassification, int((((_2200 << 5u) + (_2186 << 9u)) + (_2691 << 2u)) >> 2u)).x;
                    _2701 = _2700 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2701)
                    {
                        frontier_phi_73_pred = _2690;
                        frontier_phi_73_pred_1 = _2689;
                        frontier_phi_73_pred_2 = _2688;
                        frontier_phi_73_pred_3 = _2687;
                        frontier_phi_73_pred_4 = _2686;
                        frontier_phi_73_pred_5 = _2685;
                    }
                    else
                    {
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3009 = _2685;
                        float _3010 = _2686;
                        float _3011 = _2687;
                        float _3012 = _2688;
                        float _3013 = _2689;
                        float _3014 = _2690;
                        uint _3015 = _2700;
                        uint _3016;
                        vec4 _3041;
                        float _3042;
                        vec4 _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        vec3 _3072;
                        vec2 _3081;
                        vec4 _3096;
                        vec4 _3112;
                        float _3159;
                        bool _3160;
                        for (;;)
                        {
                            uint _3026 = ((_2691 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3015));
                            _3016 = (_3015 + 4294967295u) & _3015;
                            uint _3028 = _3026 * 40u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3042 = _3041.w;
                            uint _3044 = (_3026 * 40u) + 4u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            _3058 = _3057.x;
                            _3059 = _3057.y;
                            _3060 = _3057.z;
                            uint _3062 = (_3026 * 40u) + 8u;
                            _3072 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x));
                            uint _3074 = (_3026 * 40u) + 12u;
                            _3081 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x));
                            uint _3083 = (_3026 * 40u) + 16u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3099 = (_3026 * 40u) + 20u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3115 = (_3026 * 40u) + 24u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3134 = (_3026 * 40u) + 28u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3159 = fma(_2162, _3147.z, fma(_2161, _3147.y, _3147.x * _2160)) + _3147.w;
                            _3160 = !((fma(_2162, _3128.z, fma(_2161, _3128.y, _3128.x * _2160)) + _3128.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3160)
                            {
                                float _3186 = _3041.x - _2160;
                                float _3187 = _3041.y - _2161;
                                float _3188 = _3041.z - _2162;
                                float _3189 = dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188));
                                float _3192 = inversesqrt(_3189);
                                float _3193 = _3192 * _3186;
                                float _3194 = _3192 * _3187;
                                float _3195 = _3192 * _3188;
                                float _3199 = 1.0 - (_3189 / (_3042 * _3042));
                                float _4293 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3204 = sqrt(_3189) * _3057.w;
                                float _3206 = 1.39999997615814208984375 / (_3204 + 1.39999997615814208984375);
                                float _3207 = _3206 * _3206;
                                float _3208 = 1.0 - _3207;
                                float _3210 = (_3208 * _3208) * _578;
                                float _3213 = ((_3208 * dot(vec3(_3193, _3194, _3195), vec3(_636, _639, _642))) + _3207) + _3210;
                                float _3218 = _3204 * _3204;
                                float _3223 = (fma(_2162, _3096.z, fma(_2161, _3096.y, _3096.x * _2160)) + _3096.w) / _3159;
                                float _3224 = (fma(_2162, _3112.z, fma(_2161, _3112.y, _3112.x * _2160)) + _3112.w) / _3159;
                                float _3228 = 1.0 - dot(vec2(_3223, _3224), vec2(_3223, _3224));
                                float _4309 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3230 = _3229 * (((isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))) * _3200) / (((_3210 * 2.0) + 1.0) * ((_3218 * 0.699999988079071044921875) + 1.0)));
                                float _3231 = (-0.0) - _2475;
                                float _3232 = (-0.0) - _2476;
                                float _3233 = (-0.0) - _2477;
                                float _3234 = dot(vec3(_3193, _3194, _3195), vec3(_2475, _2476, _2477));
                                float _4320 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3241 = dot(vec3(_3231, _3232, _3233), vec3(_636, _639, _642)) + 1.0;
                                float _3243 = (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * 0.5;
                                float _3250 = ((_3243 * _3243) * _3081.x) * exp2((_3081.y * 32.0) * log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))));
                                float _3252 = _578 / (_578 + 1.0);
                                float _3273 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                                float _3274 = 1.0 - _715;
                                float _3281 = sqrt(1.0 - ((1.0 - (_3274 * _3274)) * (1.0 - (_3273 * _3273))));
                                float _3282 = _3281 * _3281;
                                float _3283 = _3282 * _3282;
                                float _3284 = _3193 - _2475;
                                float _3285 = _3194 - _2476;
                                float _3286 = _3195 - _2477;
                                float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                                float _3294 = dot(vec3(_636, _639, _642), vec3(_3231, _3232, _3233));
                                float _4336 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3297 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3298 = dot(vec3(_636, _639, _642), vec3(_3290 * _3284, _3290 * _3285, _3290 * _3286));
                                float _4347 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3305 = ((_3301 * _3301) * (_3283 + (-1.0))) + 1.0;
                                float _3306 = _3206 * _3282;
                                float _3307 = _3306 * _3306;
                                float _3313 = ((1.0 - _3307) * dot(vec3(_636, _639, _642), vec3(_3193, _3194, _3195))) + _3307;
                                float _4358 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3315 = 1.0 - _3282;
                                float _3325 = (0.5 / (((_3314 * ((_3297 * _3315) + _3282)) + 9.9999999392252902907785028219223e-09) + (((_3314 * _3315) + _3282) * _3297))) * _3314;
                                float _4369 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3335 = (_3229 * _3200) * (((_3283 * 3.1415927410125732421875) * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) / ((_3305 * _3305) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3335 * _3072.y;
                                frontier_phi_82_pred_1 = _3335 * _3072.x;
                                frontier_phi_82_pred_2 = _3335 * _3072.z;
                                frontier_phi_82_pred_3 = ((((_3060 * 0.3183098733425140380859375) * _3252) * _3250) + _3060) * _3230;
                                frontier_phi_82_pred_4 = ((((_3059 * 0.3183098733425140380859375) * _3252) * _3250) + _3059) * _3230;
                                frontier_phi_82_pred_5 = ((((_3058 * 0.3183098733425140380859375) * _3252) * _3250) + _3058) * _3230;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3340 = frontier_phi_82_pred;
                            _3339 = frontier_phi_82_pred_1;
                            _3341 = frontier_phi_82_pred_2;
                            _3344 = frontier_phi_82_pred_3;
                            _3343 = frontier_phi_82_pred_4;
                            _3342 = frontier_phi_82_pred_5;
                            _2990 = _3342 + _3012;
                            _2991 = _3343 + _3013;
                            _2992 = _3344 + _3014;
                            _2987 = _3339 + _3009;
                            _2988 = _3340 + _3010;
                            _2989 = _3341 + _3011;
                            if (_3016 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3009 = _2987;
                                _3010 = _2988;
                                _3011 = _2989;
                                _3012 = _2990;
                                _3013 = _2991;
                                _3014 = _2992;
                                _3015 = _3016;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _2992;
                        frontier_phi_73_pred_1 = _2991;
                        frontier_phi_73_pred_2 = _2990;
                        frontier_phi_73_pred_3 = _2989;
                        frontier_phi_73_pred_4 = _2988;
                        frontier_phi_73_pred_5 = _2987;
                    }
                    _2460 = frontier_phi_73_pred;
                    _2458 = frontier_phi_73_pred_1;
                    _2456 = frontier_phi_73_pred_2;
                    _2454 = frontier_phi_73_pred_3;
                    _2452 = frontier_phi_73_pred_4;
                    _2450 = frontier_phi_73_pred_5;
                    uint _2692 = _2691 + 1u;
                    if (_2692 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2685 = _2450;
                        _2686 = _2452;
                        _2687 = _2454;
                        _2688 = _2456;
                        _2689 = _2458;
                        _2690 = _2460;
                        _2691 = _2692;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_54_55_ladder = _2460;
                frontier_phi_54_55_ladder_1 = _2458;
                frontier_phi_54_55_ladder_2 = _2456;
                frontier_phi_54_55_ladder_3 = _2454;
                frontier_phi_54_55_ladder_4 = _2452;
                frontier_phi_54_55_ladder_5 = _2450;
            }
            else
            {
                frontier_phi_54_55_ladder = _2266;
                frontier_phi_54_55_ladder_1 = _2264;
                frontier_phi_54_55_ladder_2 = _2262;
                frontier_phi_54_55_ladder_3 = _2260;
                frontier_phi_54_55_ladder_4 = _2258;
                frontier_phi_54_55_ladder_5 = _2256;
            }
            _2449 = frontier_phi_54_55_ladder_5;
            _2451 = frontier_phi_54_55_ladder_4;
            _2453 = frontier_phi_54_55_ladder_3;
            _2455 = frontier_phi_54_55_ladder_2;
            _2457 = frontier_phi_54_55_ladder_1;
            _2459 = frontier_phi_54_55_ladder;
        }
        float _2464 = isnan(1.0) ? _694 : (isnan(_694) ? 1.0 : min(_694, 1.0));
        _2218 = (_2464 * _2455) + _1903;
        _2220 = (_2464 * _2457) + _1904;
        _2222 = (_2464 * _2459) + _1905;
        _2224 = ((_2449 * _680) * _2464) + _2080;
        _2226 = ((_2451 * _682) * _2464) + _2081;
        _2228 = ((_2453 * _683) * _2464) + _2082;
    }
    else
    {
        _2218 = _1903;
        _2220 = _1904;
        _2222 = _1905;
        _2224 = _2080;
        _2226 = _2081;
        _2228 = _2082;
    }
    float _2344;
    float _2345;
    float _2346;
    if (_578 > 0.0)
    {
        uint _2277 = _1793 + 4u;
        float _2283 = (-0.0) - _390;
        float _2284 = (-0.0) - _391;
        float _2285 = (-0.0) - _392;
        float _2286 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_2283, _2284, _2285));
        float _4385 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2290 = _705 + 1.0;
        float _2292 = (isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0))) * 0.5;
        float _2297 = _2292 * _2292;
        float _2298 = _2297 * exp2(log2(isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 32.0);
        float _2300 = _578 / (_578 + 1.0);
        float _2301 = isnan(_1802) ? 1.0 : (isnan(1.0) ? _1802 : min(1.0, _1802));
        uint _2314 = _1793 + 5u;
        float _2320 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_2283, _2284, _2285));
        float _4406 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2327 = _2297 * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * 32.0);
        float _2328 = isnan(_1803) ? 1.0 : (isnan(1.0) ? _1803 : min(1.0, _1803));
        _2344 = ((((_2327 * cbLight._m0[_2314].x) * _2300) * _2328) + ((((cbLight._m0[_2277].x * _1785) * _2298) * _2300) * _2301)) * 0.3183098733425140380859375;
        _2345 = ((((_2327 * cbLight._m0[_2314].y) * _2300) * _2328) + ((((cbLight._m0[_2277].y * _1786) * _2298) * _2300) * _2301)) * 0.3183098733425140380859375;
        _2346 = ((((_2327 * cbLight._m0[_2314].z) * _2300) * _2328) + ((((cbLight._m0[_2277].z * _1787) * _2298) * _2300) * _2301)) * 0.3183098733425140380859375;
    }
    else
    {
        _2344 = 0.0;
        _2345 = 0.0;
        _2346 = 0.0;
    }
    float _4422 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4433 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4444 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4455 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _2352 = 0.959999978542327880859375 - (_582 * 0.959999978542327880859375);
    float _2363 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * ((_2218 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _694)) + _2344);
    float _2364 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * ((_2220 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _694)) + _2345);
    float _2365 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * ((_2222 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _694)) + _2346);
    float _2369 = _2352 - (exp2(log2(1.0 - _709) * 5.0) * _2352);
    float _2380 = (_2363 + ((_2224 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1540)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _563.x) * _2369) - _2363) * _527);
    float _2382 = (_2364 + ((_2226 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1540)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _563.y) * _2369) - _2364) * _527);
    float _2384 = (_2365 + ((_2228 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1540)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _563.z) * _2369) - _2365) * _527);
    float _2389 = cbInstanceData._m0[_655 + 6u].w * (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)));
    float _2394 = _615 / cbSceneParam._m0[86u].x;
    float _2395 = _616 / cbSceneParam._m0[86u].y;
    vec4 _2409 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2394, _2395, (log2((isnan(cbSceneParam._m0[77u].w) ? _598 : (isnan(_598) ? cbSceneParam._m0[77u].w : min(_598, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2411 = _2409.x;
    float _2412 = _2409.y;
    float _2413 = _2409.z;
    float _2414 = _2409.w;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    if (_598 > cbSceneParam._m0[78u].w)
    {
        float _2502 = isnan(_598) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _598 : min(cbSceneParam._m0[80u].w, _598));
        float _2503 = _2502 / _598;
        float _2514 = _2503 * _280;
        float _2515 = _281 * _2503;
        float _2516 = (-0.0) - _2515;
        float _2517 = _2503 * _282;
        float _2519 = (cbSceneParam._m0[77u].w * _2516) / _2502;
        float _2520 = _2519 + cbSceneParam._m0[79u].w;
        float _2521 = cbSceneParam._m0[79u].w - _2515;
        float _2527 = sqrt(((_2514 * _2514) + (_2515 * _2515)) + (_2517 * _2517));
        float _2530 = (1.0 - (cbSceneParam._m0[77u].w / _2502)) * _2527;
        float _2535 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2537 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2944;
        if (abs((_2516 - _2519) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2944 = ((((_2520 > 0.0) ? exp2(_2535 * _2520) : (2.0 - exp2(_2537 * _2520))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2530;
        }
        else
        {
            float _2642 = 1.0 / cbSceneParam._m0[80u].x;
            float _2643 = isnan(_2521) ? _2520 : (isnan(_2520) ? _2521 : max(_2520, _2521));
            float _2644 = isnan(_2521) ? _2520 : (isnan(_2520) ? _2521 : min(_2520, _2521));
            float _2653 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : min(_2643, 0.0));
            float _2654 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : min(_2644, 0.0));
            _2944 = ((abs(_2527 / _2516) * cbSceneParam._m0[80u].y) * ((((_2653 - _2654) * 2.0) - ((exp2(_2535 * (isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0)))) - exp2(_2535 * (isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0))))) * _2642)) - ((exp2(_2537 * _2653) - exp2(_2537 * _2654)) * _2642))) + (_2530 * cbSceneParam._m0[80u].z);
        }
        vec4 _2946 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2394, _2395, 1.0), 0.0);
        float _2955 = exp2((_2944 * (-1.44269502162933349609375)) * (1.0 - _2946.w));
        float _2956 = log2(_2955);
        float _2972 = log2(_2414);
        _2539 = (exp2(_2972 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].x)) * _2946.x) / cbSceneParam._m0[78u].x)) + _2411;
        _2541 = (exp2(_2972 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].y)) * _2946.y) / cbSceneParam._m0[78u].y)) + _2412;
        _2543 = (exp2(_2972 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].z)) * _2946.z) / cbSceneParam._m0[78u].z)) + _2413;
        _2545 = _2955 * _2414;
    }
    else
    {
        _2539 = _2411;
        _2541 = _2412;
        _2543 = _2413;
        _2545 = _2414;
    }
    bool _2982;
    vec4 _2554;
    vec4 _2576;
    float _2578;
    float _2582;
    float _2583;
    float _2584;
    float _2585;
    bool _2595;
    for (;;)
    {
        _2554 = cbMatDynParam._m0[0u];
        float _2556 = roundEven(_2554.y);
        bool _2557 = _2556 == 3.0;
        float _2558 = log2(_2545);
        float _2565 = exp2(_2558 * cbSceneParam._m0[78u].x) * _2380;
        float _2566 = exp2(_2558 * cbSceneParam._m0[78u].y) * _2382;
        float _2567 = exp2(_2558 * cbSceneParam._m0[78u].z) * _2384;
        float _2574 = _605 + (-0.5);
        _2576 = cbMtdParam._m0[1u];
        _2578 = _2576.y * _2574;
        float _2581 = (_2556 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2582 = _2581 * (_2557 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2539)));
        _2583 = _2581 * (_2557 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2541)));
        _2584 = _2581 * (_2557 ? _2567 : (_2567 + (cbSceneParam._m0[72u].w * _2543)));
        _2585 = _2574 * 0.999000012874603271484375;
        _2595 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2595)
        {
            if ((cbInstanceData._m0[_655 + 7u].x + _2585) < 0.5)
            {
                _2982 = true;
                break;
            }
        }
        uint _2677 = _656 + uint(_2554.w);
        if ((cbInstanceData._m0[_2677].w < 1.0) && ((cbInstanceData._m0[_2677].w + _2585) < 0.5))
        {
            _2982 = true;
            break;
        }
        if ((_2578 + _301) < _2576.x)
        {
            _2982 = true;
            break;
        }
        _2982 = false;
        break;
    }
    float _3000;
    if (_2982)
    {
        discard_state = true;
        _3000 = 0.0;
    }
    else
    {
        _3000 = _2389;
    }
    SV_Target.x = _2582;
    SV_Target.y = _2583;
    SV_Target.z = _2584;
    SV_Target.w = _3000;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2389;
    discard_exit();
}


