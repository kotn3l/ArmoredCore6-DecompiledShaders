#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Crystal_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_Crystal_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1121;
float _3763;
float _3764;
float _3765;
float _3766;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _206 = _205 * _198;
    float _207 = _205 * _199;
    float _208 = _205 * _200;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _227;
    float _228;
    float _229;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
    }
    else
    {
        _227 = _213;
        _228 = _214;
        _229 = _215;
    }
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    vec4 _299 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _305 = _299.w;
    float _316 = dot(vec3(_284, _285, _286), vec3(_206, _207, _208));
    float _319 = dot(vec3(_284, _285, _286), vec3(_220, _221, _222));
    float _322 = dot(vec3(_284, _285, _286), vec3(_227, _228, _229));
    float _328 = inversesqrt(dot(vec3(_316, _319, _322), vec3(_316, _319, _322)));
    float _350 = dot(vec4(texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _370 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_316 * cbMtdParam._m0[12u].x) * _328) * _350) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_319 * cbMtdParam._m0[12u].x) * _328) * _350) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _393 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _394 = _393 * _284;
    float _395 = _393 * _285;
    float _396 = _393 * _286;
    float _397 = dot(vec4(_394, _395, _396, 0.0), vec4(_227, _228, _229, 0.0));
    float _400 = _397 - cbMtdParam._m0[13u].x;
    float _3775 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _407 = exp2(log2(1.0 - (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _423 = ((((_299.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _370.x) * cbMtdParam._m0[9u].x) * ((_407 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _428 = ((((_299.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _370.y) * cbMtdParam._m0[9u].y) * ((_407 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _433 = ((((_299.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _370.z) * cbMtdParam._m0[9u].z) * ((_407 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _446 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _453 = cbMtdParam._m0[14u].y + _446.x;
    vec4 _466 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _474 = (_466.x * 2.0) + (-1.0);
    float _475 = (_466.y * 2.0) + (-1.0);
    float _476 = dot(vec2(_474, _475), vec2(_474, _475));
    float _3791 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _481 = sqrt(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))));
    float _484 = fma(_481, _227, fma(_475, _220, _474 * _206));
    float _487 = fma(_481, _228, fma(_475, _221, _474 * _207));
    float _490 = fma(_481, _229, fma(_475, _222, _474 * _208));
    float _494 = inversesqrt(dot(vec3(_484, _487, _490), vec3(_484, _487, _490)));
    float _495 = _494 * _484;
    float _496 = _494 * _487;
    float _498 = cbMtdParam._m0[14u].z + _466.z;
    vec4 _510 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _514 = cbMtdParam._m0[13u].w * _510.x;
    vec4 _527 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _536 = _397 - cbMtdParam._m0[12u].w;
    float _3802 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _546 = ((cbMtdParam._m0[14u].w * _527.x) + cbMtdParam._m0[14u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[14u].x));
    float _3818 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _570 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (_495 * cbMtdParam._m0[15u].x));
    float _571 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (_496 * cbMtdParam._m0[15u].x));
    float _578 = isnan(cbInstanceData._m0[8u].x) ? _570 : (isnan(_570) ? cbInstanceData._m0[8u].x : max(_570, cbInstanceData._m0[8u].x));
    float _579 = isnan(cbInstanceData._m0[8u].y) ? _571 : (isnan(_571) ? cbInstanceData._m0[8u].y : max(_571, cbInstanceData._m0[8u].y));
    vec4 _583 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _578 : (isnan(_578) ? cbInstanceData._m0[8u].z : min(_578, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _579 : (isnan(_579) ? cbInstanceData._m0[8u].w : min(_579, cbInstanceData._m0[8u].w))));
    float _595 = _494 * _490;
    float _3849 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _596 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _597 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _598 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3876 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _3887 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3898 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3909 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _602 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _618 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _623 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _625 = _623.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _800 = sqrt(((_284 * _284) + (_285 * _285)) + (_286 * _286));
        float _806 = (cbMatDynParam._m0[5u].x * _800) + cbMatDynParam._m0[5u].y;
        float _3920 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _811 = (cbMatDynParam._m0[5u].z * _800) + cbMatDynParam._m0[5u].w;
        float _3931 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) - _807)) + _807) < ((_625 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _635 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _636 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _655 = fma(_595, cbSceneParam._m0[5u].z, fma(_496, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _495));
    float _658 = fma(_595, cbSceneParam._m0[6u].z, fma(_496, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _495));
    float _661 = fma(_595, cbSceneParam._m0[7u].z, fma(_496, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _495));
    uint _674 = uint(roundEven(NORMAL.w)) * 13u;
    uint _675 = _674 + 9u;
    uint _676 = _675 + uint(cbMatDynParam._m0[0u].w);
    float _682 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_676].x;
    float _683 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * cbInstanceData._m0[_676].y;
    float _684 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * cbInstanceData._m0[_676].z;
    float _3942 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _688 = 1.0 - _602;
    float _689 = _685 * _688;
    float _690 = _686 * _688;
    float _691 = _687 * _688;
    float _696 = (_685 + (-0.039999999105930328369140625)) * _602;
    float _697 = (_686 + (-0.039999999105930328369140625)) * _602;
    float _698 = (_687 + (-0.039999999105930328369140625)) * _602;
    float _699 = _696 + 0.039999999105930328369140625;
    float _701 = _697 + 0.039999999105930328369140625;
    float _702 = _698 + 0.039999999105930328369140625;
    vec4 _710 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _635, cbSceneParam._m0[86u].y * _636));
    float _713 = _710.x * TEXCOORD.z;
    float _714 = dot(vec3(_495, _496, _595), vec3(_394, _395, _396));
    float _717 = _714 * 2.0;
    float _721 = (_717 * _495) - _394;
    float _722 = (_717 * _496) - _395;
    float _723 = (_717 * _595) - _396;
    float _724 = dot(vec3(_394, _395, _396), vec3(_495, _496, _595));
    float _727 = abs(_724);
    float _3975 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _728 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _734 = sqrt(_597);
    float _746 = exp2((_734 * 5.0) * log2(1.0 - (_728 * 0.999000012874603271484375))) / (4.0 - (_734 * 3.0));
    float _752 = (1.0 - _746) * ((_734 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _753 = _746 * _734;
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1120;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _845 = fma(_789, cbModelParam._m0[26u].z, fma(_785, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781));
        float _849 = fma(_789, cbModelParam._m0[27u].z, fma(_785, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781));
        float _853 = fma(_789, cbModelParam._m0[28u].z, fma(_785, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781));
        float _878 = _781 + _495;
        float _879 = _785 + _496;
        float _880 = _789 + _595;
        float _890 = fma(_880, cbModelParam._m0[26u].z, fma(_879, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _878)) - _845;
        float _891 = fma(_880, cbModelParam._m0[27u].z, fma(_879, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _878)) - _849;
        float _892 = fma(_880, cbModelParam._m0[28u].z, fma(_879, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _878)) - _853;
        float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
        float _909 = ((_896 * _890) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_845 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_896 * _891) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_849 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_896 * _892) / cbModelParam._m0[34u].z) + ((((((_853 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        float _948 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_914.x + (-0.5));
        float _950 = _948 * (_914.y + (-0.5));
        float _951 = _948 * (_914.z + (-0.5));
        float _958 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_921.x + (-0.5));
        float _960 = _958 * (_921.y + (-0.5));
        float _961 = _958 * (_921.z + (-0.5));
        float _968 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_928.x + (-0.5));
        float _970 = _968 * (_928.y + (-0.5));
        float _971 = _968 * (_928.z + (-0.5));
        float _978 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_935.x + (-0.5));
        float _980 = _978 * (_935.y + (-0.5));
        float _981 = _978 * (_935.z + (-0.5));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = _949 * 0.5;
        float _986 = _959 * 0.5;
        float _987 = _969 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1002 = (dot(vec3(_495, _496, _595), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1012 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _4023 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1014 + 1.0))) + _1019) * _982;
        float _1029 = _950 * 0.5;
        float _1030 = _960 * 0.5;
        float _1031 = _970 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_495, _496, _595), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _4056 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1056 + 1.0))) + _1061) * _983;
        float _1071 = _951 * 0.5;
        float _1072 = _961 * 0.5;
        float _1073 = _971 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_495, _496, _595), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _4089 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1098 + 1.0))) + _1103) * _984;
        _1120 = _951;
        _1122 = _950;
        _1123 = _949;
        _1124 = _961;
        _1125 = _960;
        _1126 = _959;
        _1127 = _971;
        _1128 = _970;
        _1129 = _969;
        _1130 = _984;
        _1131 = _983;
        _1132 = _982;
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
    }
    else
    {
        _1120 = _1121;
        _1122 = _1121;
        _1123 = _1121;
        _1124 = _1121;
        _1125 = _1121;
        _1126 = _1121;
        _1127 = _1121;
        _1128 = _1121;
        _1129 = _1121;
        _1130 = _1121;
        _1131 = _1121;
        _1132 = _1121;
        _1133 = 0.0;
        _1134 = 0.0;
        _1135 = 0.0;
    }
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1164 = fma(_789, cbModelParam._m0[30u].z, fma(_785, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _781));
        float _1168 = fma(_789, cbModelParam._m0[31u].z, fma(_785, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _781));
        float _1172 = fma(_789, cbModelParam._m0[32u].z, fma(_785, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _781));
        float _1195 = _781 + _495;
        float _1196 = _785 + _496;
        float _1197 = _789 + _595;
        float _1207 = fma(_1197, cbModelParam._m0[30u].z, fma(_1196, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1195)) - _1164;
        float _1208 = fma(_1197, cbModelParam._m0[31u].z, fma(_1196, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1195)) - _1168;
        float _1209 = fma(_1197, cbModelParam._m0[32u].z, fma(_1196, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1195)) - _1172;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1164 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1168 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[35u].z) + ((((((_1172 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1263 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1230.x + (-0.5));
        float _1265 = _1263 * (_1230.y + (-0.5));
        float _1266 = _1263 * (_1230.z + (-0.5));
        float _1273 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1237.x + (-0.5));
        float _1275 = _1273 * (_1237.y + (-0.5));
        float _1276 = _1273 * (_1237.z + (-0.5));
        float _1283 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1244.x + (-0.5));
        float _1285 = _1283 * (_1244.y + (-0.5));
        float _1286 = _1283 * (_1244.z + (-0.5));
        float _1293 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1251.x + (-0.5));
        float _1295 = _1293 * (_1251.y + (-0.5));
        float _1296 = _1293 * (_1251.z + (-0.5));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = _1264 * 0.5;
        float _1301 = _1274 * 0.5;
        float _1302 = _1284 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_495, _496, _595), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4152 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1327 + 1.0))) + _1332) * _1297;
        float _1342 = _1265 * 0.5;
        float _1343 = _1275 * 0.5;
        float _1344 = _1285 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_495, _496, _595), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4185 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1369 + 1.0))) + _1374) * _1298;
        float _1384 = _1266 * 0.5;
        float _1385 = _1276 * 0.5;
        float _1386 = _1286 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_495, _496, _595), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4218 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1411 + 1.0))) + _1416) * _1299;
        _1433 = _1266;
        _1434 = _1265;
        _1435 = _1264;
        _1436 = _1276;
        _1437 = _1275;
        _1438 = _1274;
        _1439 = _1286;
        _1440 = _1285;
        _1441 = _1284;
        _1442 = _1299;
        _1443 = _1298;
        _1444 = _1297;
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
    }
    else
    {
        _1433 = _1121;
        _1434 = _1121;
        _1435 = _1121;
        _1436 = _1121;
        _1437 = _1121;
        _1438 = _1121;
        _1439 = _1121;
        _1440 = _1121;
        _1441 = _1121;
        _1442 = _1121;
        _1443 = _1121;
        _1444 = _1121;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1133)) + _1133;
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1134)) + _1134;
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1135)) + _1135;
    float _1480 = fma(_1459, cbSceneParam._m0[89u].z, fma(_1458, cbSceneParam._m0[89u].y, _1457 * cbSceneParam._m0[89u].x));
    float _1483 = fma(_1459, cbSceneParam._m0[90u].z, fma(_1458, cbSceneParam._m0[90u].y, _1457 * cbSceneParam._m0[90u].x));
    float _1486 = fma(_1459, cbSceneParam._m0[91u].z, fma(_1458, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1457));
    float _1501 = _721 * 0.5;
    float _1502 = _722 * 0.5;
    float _1503 = _723 * 0.5;
    float _1504 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1507 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1510 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1544;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1517 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1120, _1124, _1127, _1130));
        float _1521 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1122, _1125, _1128, _1131));
        float _1525 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1123, _1126, _1129, _1132));
        float _1532 = dot(vec4(cbModelParam._m0[39u]), vec4(_1501, _1502, _1503, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1555;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1546 = dot(vec4(cbModelParam._m0[40u]), vec4(_1501, _1502, _1503, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1559 = (_1555 * cbModelParam._m0[1u].x) + (_1544 * (1.0 - cbModelParam._m0[1u].x));
    float _1569 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _597);
    float _1570 = isnan(_1569) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1569 : min(cbModelParam._m0[25u].z, _1569));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1617 = fma(_789, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781)) + cbModelParam._m0[13u].w;
        float _1621 = fma(_789, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781)) + cbModelParam._m0[14u].w;
        float _1625 = fma(_789, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781)) + cbModelParam._m0[15u].w;
        float _1628 = fma(_723, cbModelParam._m0[13u].z, fma(_722, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _721));
        float _1631 = fma(_723, cbModelParam._m0[14u].z, fma(_722, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _721));
        float _1634 = fma(_723, cbModelParam._m0[15u].z, fma(_722, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _721));
        float _1662;
        if (_1628 > 0.0)
        {
            _1662 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1662 = frontier_phi_19_17_ladder;
        }
        float _1837;
        if (_1631 > 0.0)
        {
            _1837 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1837 = frontier_phi_28_24_ladder;
        }
        float _2101;
        if (_1634 > 0.0)
        {
            _2101 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2101 = frontier_phi_40_35_ladder;
        }
        float _2103 = isnan(_1837) ? _1662 : (isnan(_1662) ? _1837 : min(_1662, _1837));
        float _2104 = isnan(_2101) ? _2103 : (isnan(_2103) ? _2101 : min(_2103, _2101));
        float _2108 = (_2104 * _1628) + _1617;
        float _2109 = (_2104 * _1631) + _1621;
        float _2110 = (_2104 * _1634) + _1625;
        float _2111 = _2104 * 9.9999997473787516355514526367188e-05;
        float _2113 = (-1.0) - _2111;
        float _2115 = _2111 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2110 > _2115) || ((_2110 < _2113) || ((_2109 > _2115) || ((_2109 < _2113) || ((_2108 < _2113) || (_2108 > _2115))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2264 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2110, cbModelParam._m0[9u].z, fma(_2109, cbModelParam._m0[9u].y, _2108 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2110, cbModelParam._m0[10u].z, fma(_2109, cbModelParam._m0[10u].y, _2108 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2110, cbModelParam._m0[11u].z, fma(_2109, cbModelParam._m0[11u].y, _2108 * cbModelParam._m0[11u].x))), _1570);
            frontier_phi_18_40_ladder = _2264.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2264.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2264.x * cbModelParam._m0[1u].y;
        }
        _1650 = frontier_phi_18_40_ladder_2;
        _1652 = frontier_phi_18_40_ladder_1;
        _1654 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_721, _722, _723), _1570);
        _1650 = _1638.x * cbModelParam._m0[1u].y;
        _1652 = _1638.y * cbModelParam._m0[1u].y;
        _1654 = _1638.z * cbModelParam._m0[1u].y;
    }
    float _1658 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _597);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1658 : min(cbModelParam._m0[25u].w, _1658));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1716 = fma(_789, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781)) + cbModelParam._m0[21u].w;
        float _1720 = fma(_789, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781)) + cbModelParam._m0[22u].w;
        float _1724 = fma(_789, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781)) + cbModelParam._m0[23u].w;
        float _1727 = fma(_723, cbModelParam._m0[21u].z, fma(_722, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _721));
        float _1730 = fma(_723, cbModelParam._m0[22u].z, fma(_722, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _721));
        float _1733 = fma(_723, cbModelParam._m0[23u].z, fma(_722, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _721));
        float _1842;
        if (_1727 > 0.0)
        {
            _1842 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1842 = frontier_phi_30_26_ladder;
        }
        float _2128;
        if (_1730 > 0.0)
        {
            _2128 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2128 = frontier_phi_42_37_ladder;
        }
        float _2458;
        if (_1733 > 0.0)
        {
            _2458 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_51_49_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_51_49_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_51_49_ladder = 5000.0;
            }
            _2458 = frontier_phi_51_49_ladder;
        }
        float _2460 = isnan(_2128) ? _1842 : (isnan(_1842) ? _2128 : min(_1842, _2128));
        float _2461 = isnan(_2458) ? _2460 : (isnan(_2460) ? _2458 : min(_2460, _2458));
        float _2465 = (_2461 * _1727) + _1716;
        float _2466 = (_2461 * _1730) + _1720;
        float _2467 = (_2461 * _1733) + _1724;
        float _2468 = _2461 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2468;
        float _2471 = _2468 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2467 > _2471) || ((_2467 < _2469) || ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 < _2469) || (_2465 > _2471))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2467, cbModelParam._m0[17u].z, fma(_2466, cbModelParam._m0[17u].y, _2465 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2467, cbModelParam._m0[18u].z, fma(_2466, cbModelParam._m0[18u].y, _2465 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2467, cbModelParam._m0[19u].z, fma(_2466, cbModelParam._m0[19u].y, _2465 * cbModelParam._m0[19u].x))), _1659);
            frontier_phi_27_51_ladder = _2568.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2568.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2568.x * cbModelParam._m0[1u].z;
        }
        _1752 = frontier_phi_27_51_ladder_2;
        _1754 = frontier_phi_27_51_ladder_1;
        _1756 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_721, _722, _723), _1659);
        _1752 = _1736.x * cbModelParam._m0[1u].z;
        _1754 = _1736.y * cbModelParam._m0[1u].z;
        _1756 = _1736.z * cbModelParam._m0[1u].z;
    }
    float _1769 = (((_752 * _699) + _753) * _713) * ((cbModelParam._m0[1u].w * (_1752 - _1650)) + _1650);
    float _1771 = (((_752 * _701) + _753) * _713) * ((cbModelParam._m0[1u].w * (_1754 - _1652)) + _1652);
    float _1773 = (((_752 * _702) + _753) * _713) * ((cbModelParam._m0[1u].w * (_1756 - _1654)) + _1654);
    float _1776 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, _1769 * cbSceneParam._m0[91u].x));
    float _1816 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1820 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1824 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1828 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1829 = _1816 / _1828;
    float _1830 = _1820 / _1828;
    float _1831 = _1824 / _1828;
    float _1978;
    float _1979;
    float _1980;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1858 = ((uint(_1831 > cbSceneParam._m0[59u].y) + uint(_1831 > cbSceneParam._m0[59u].x)) + uint(_1831 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1859 = _1858 + 43u;
        uint _1867 = _1858 + 44u;
        uint _1875 = _1858 + 45u;
        uint _1883 = _1858 + 46u;
        float _1894 = fma(_1828, cbSceneParam._m0[_1859].w, fma(_1824, cbSceneParam._m0[_1859].z, fma(_1820, cbSceneParam._m0[_1859].y, _1816 * cbSceneParam._m0[_1859].x)));
        float _1898 = fma(_1828, cbSceneParam._m0[_1867].w, fma(_1824, cbSceneParam._m0[_1867].z, fma(_1820, cbSceneParam._m0[_1867].y, _1816 * cbSceneParam._m0[_1867].x)));
        float _1906 = fma(_1828, cbSceneParam._m0[_1883].w, fma(_1824, cbSceneParam._m0[_1883].z, fma(_1820, cbSceneParam._m0[_1883].y, _1816 * cbSceneParam._m0[_1883].x)));
        float _1911 = cbSceneParam._m0[33u].z * _1906;
        float _1913 = cbSceneParam._m0[33u].w * _1906;
        float _1916 = fma(_1828, cbSceneParam._m0[_1875].w, fma(_1824, cbSceneParam._m0[_1875].z, fma(_1820, cbSceneParam._m0[_1875].y, _1816 * cbSceneParam._m0[_1875].x))) / _1906;
        float _1964 = (cbSceneParam._m0[33u].x - sqrt(((_1830 * _1830) + (_1829 * _1829)) + (_1831 * _1831))) * cbSceneParam._m0[33u].y;
        float _4344 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1971 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1911 + _1894) / _1906, (_1913 + _1898) / _1906), _1916), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1913 + _1894) / _1906, (_1898 - _1911) / _1906), _1916), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1894 - _1911) / _1906, (_1898 - _1913) / _1906), _1916), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1894 - _1913) / _1906, (_1911 + _1898) / _1906), _1916), 0.0)).x), vec4(0.25)));
        _1978 = 1.0 - (_1971 * cbSceneParam._m0[34u].x);
        _1979 = 1.0 - (_1971 * cbSceneParam._m0[34u].y);
        _1980 = 1.0 - (_1971 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1978 = 1.0;
        _1979 = 1.0;
        _1980 = 1.0;
    }
    float _2044;
    float _2046;
    float _2048;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2032 = fma(_1828, cbSceneParam._m0[63u].w, fma(_1824, cbSceneParam._m0[63u].z, fma(_1820, cbSceneParam._m0[63u].y, _1816 * cbSceneParam._m0[63u].x)));
        float _2033 = fma(_1828, cbSceneParam._m0[60u].w, fma(_1824, cbSceneParam._m0[60u].z, fma(_1820, cbSceneParam._m0[60u].y, _1816 * cbSceneParam._m0[60u].x))) / _2032;
        float _2034 = fma(_1828, cbSceneParam._m0[61u].w, fma(_1824, cbSceneParam._m0[61u].z, fma(_1820, cbSceneParam._m0[61u].y, _1816 * cbSceneParam._m0[61u].x))) / _2032;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2033 >= cbSceneParam._m0[64u].x) && (_2034 >= cbSceneParam._m0[64u].y)) && (_2033 <= cbSceneParam._m0[64u].z)) && (_2034 <= cbSceneParam._m0[64u].w))
        {
            float _2141 = fma(_1828, cbSceneParam._m0[62u].w, fma(_1824, cbSceneParam._m0[62u].z, fma(_1820, cbSceneParam._m0[62u].y, _1816 * cbSceneParam._m0[62u].x))) / _2032;
            float _2145 = isnan(cbSceneParam._m0[41u].w) ? _2141 : (isnan(_2141) ? cbSceneParam._m0[41u].w : max(_2141, cbSceneParam._m0[41u].w));
            float _2188 = (cbSceneParam._m0[33u].x - sqrt(((_1830 * _1830) + (_1829 * _1829)) + (_1831 * _1831))) * cbSceneParam._m0[33u].y;
            float _4360 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
            float _2195 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2033, cbSceneParam._m0[33u].w + _2034), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2033, _2034 - cbSceneParam._m0[33u].z), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2033 - cbSceneParam._m0[33u].z, _2034 - cbSceneParam._m0[33u].w), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2033 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2034), _2145), 0.0)).x), vec4(0.25)));
            float _2199 = 1.0 - (_2195 * cbSceneParam._m0[34u].x);
            float _2200 = 1.0 - (_2195 * cbSceneParam._m0[34u].y);
            float _2201 = 1.0 - (_2195 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2201) ? _1980 : (isnan(_1980) ? _2201 : min(_1980, _2201));
            frontier_phi_39_38_ladder_1 = isnan(_2200) ? _1979 : (isnan(_1979) ? _2200 : min(_1979, _2200));
            frontier_phi_39_38_ladder_2 = isnan(_2199) ? _1978 : (isnan(_1978) ? _2199 : min(_1978, _2199));
        }
        else
        {
            frontier_phi_39_38_ladder = _1980;
            frontier_phi_39_38_ladder_1 = _1979;
            frontier_phi_39_38_ladder_2 = _1978;
        }
        _2044 = frontier_phi_39_38_ladder_2;
        _2046 = frontier_phi_39_38_ladder_1;
        _2048 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2044 = _1978;
        _2046 = _1979;
        _2048 = _1980;
    }
    uvec4 _2053 = floatBitsToUint(cbInstanceData._m0[_674 + 5u]);
    uint _2055 = _2053.x * 14u;
    uint _2056 = _2055 + 13u;
    float _2061 = _713 + (-1.0);
    float _2064 = (cbLight._m0[_2056].x * _2061) + 1.0;
    float _2065 = (cbLight._m0[_2056].y * _2061) + 1.0;
    uint _2067 = _2055 + 4u;
    float _2078 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_495, _496, _595));
    float _2081 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    float _2082 = cbLight._m0[_2067].x * _2044;
    float _2083 = cbLight._m0[_2067].y * _2046;
    float _2084 = cbLight._m0[_2067].z * _2048;
    uint _2085 = _2055 + 5u;
    uint _2091 = _2055 | 1u;
    float _2097 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_495, _496, _595));
    float _2100 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    float _2273;
    float _2274;
    float _2275;
    if (_598 == 0.0)
    {
        float _4396 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _4407 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2210 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * 0.3183098733425140380859375;
        float _2212 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * 0.3183098733425140380859375;
        _2273 = ((cbLight._m0[_2085].x * _2100) * _2212) + ((_2082 * _2081) * _2210);
        _2274 = ((_2100 * cbLight._m0[_2085].y) * _2212) + ((_2083 * _2081) * _2210);
        _2275 = ((_2100 * cbLight._m0[_2085].z) * _2212) + ((_2084 * _2081) * _2210);
    }
    else
    {
        float _2222 = _2078 + _598;
        float _2225 = (_598 * 2.0) + 1.0;
        float _2226 = (isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0))) / _2225;
        float _2233 = _2097 + _598;
        float _2235 = (isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0))) / _2225;
        _2273 = (((_2235 * cbLight._m0[_2085].x) * _2100) + ((_2082 * _2226) * _2081)) * 0.3183098733425140380859375;
        _2274 = (((_2235 * cbLight._m0[_2085].y) * _2100) + ((_2083 * _2226) * _2081)) * 0.3183098733425140380859375;
        _2275 = (((_2235 * cbLight._m0[_2085].z) * _2100) + ((_2084 * _2226) * _2081)) * 0.3183098733425140380859375;
    }
    uint _2279 = _2055 + 8u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _597) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2055].x + _394;
    float _2298 = cbLight._m0[_2055].y + _395;
    float _2299 = cbLight._m0[_2055].z + _396;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_495, _496, _595), vec3(cbLight._m0[_2055].xyz));
    float _4428 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _4439 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _2311 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2312 = dot(vec3(_495, _496, _595), vec3(_2304, _2305, _2306));
    float _4450 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2304, _2305, _2306));
    float _4461 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2296 * _2296;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0);
    float _2333 = 0.959999978542327880859375 - _696;
    float _2335 = 0.959999978542327880859375 - _697;
    float _2336 = 0.959999978542327880859375 - _698;
    float _2343 = 1.0 - _2296;
    float _2354 = (0.5 / (((_2311 * ((_2310 * _2343) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2343) + _2296) * _2310))) * _2310;
    float _4472 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    uint _2372 = _2055 + 9u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _597) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2091].x + _394;
    float _2389 = cbLight._m0[_2091].y + _395;
    float _2390 = cbLight._m0[_2091].z + _396;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_495, _496, _595), vec3(cbLight._m0[_2091].xyz));
    float _4483 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2402 = dot(vec3(_495, _496, _595), vec3(_2395, _2396, _2397));
    float _4494 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2406 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2395, _2396, _2397));
    float _4505 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2410 = _2387 * _2387;
    float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
    float _2421 = exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0);
    float _2428 = 1.0 - _2387;
    float _2438 = (0.5 / (((_2311 * ((_2401 * _2428) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2428) + _2387) * _2401))) * _2401;
    float _4516 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
    float _2450 = (((((_2421 * _2333) + _699) * cbLight._m0[_2372].x) * _2440) * _2100) + ((((cbLight._m0[_2279].x * _2044) * ((_2332 * _2333) + _699)) * _2356) * _2081);
    float _2451 = (((((_2421 * _2335) + _701) * cbLight._m0[_2372].y) * _2440) * _2100) + ((((cbLight._m0[_2279].y * _2046) * ((_2332 * _2335) + _701)) * _2356) * _2081);
    float _2452 = (((((_2421 * _2336) + _702) * cbLight._m0[_2372].z) * _2440) * _2100) + ((((cbLight._m0[_2279].z * _2048) * ((_2332 * _2336) + _702)) * _2356) * _2081);
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    if (_2053.y == 0u)
    {
        uvec4 _2495 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2496 = _2495.x;
        uint _2507 = uint((float(_2495.y) * floor(float(uint(cbSceneParam._m0[85u].y * _636) / _2496))) + floor(float(uint(cbSceneParam._m0[85u].x * _635) / _2496)));
        float _2517 = (log2(_1831 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2518 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        uint _2521 = uint(isnan(14.0) ? _2518 : (isnan(_2518) ? 14.0 : min(_2518, 14.0)));
        uvec4 _2526 = texelFetch(g_lightClusterGridBuffer, int(((_2521 << 2u) + (_2507 << 6u)) >> 2u));
        uint _2527 = _2526.x;
        uint _2528 = _2495.z;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        if (((((1u << ((_2528 >> 4u) & 15u)) + 4294967295u) & _2527) == 0u) || ((_2528 & 240u) == 0u))
        {
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
        }
        else
        {
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2582;
            float _2584;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            uint _2778 = 0u;
            uint _2787;
            bool _2788;
            for (;;)
            {
                _2787 = texelFetch(g_lightClassification, int((((_2521 << 5u) + (_2507 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                _2788 = _2787 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2788)
                {
                    frontier_phi_66_pred = _2774;
                    frontier_phi_66_pred_1 = _2773;
                    frontier_phi_66_pred_2 = _2772;
                    frontier_phi_66_pred_3 = _2775;
                    frontier_phi_66_pred_4 = _2777;
                    frontier_phi_66_pred_5 = _2776;
                }
                else
                {
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    uint _2978;
                    _2972 = _2772;
                    _2973 = _2773;
                    _2974 = _2774;
                    _2975 = _2775;
                    _2976 = _2776;
                    _2977 = _2777;
                    _2978 = _2787;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    for (;;)
                    {
                        uint _2982 = uint(findLSB(_2978)) + (_2778 << 5u);
                        uint _2979 = (_2978 + 4294967295u) & _2978;
                        uint _2984 = _2982 * 48u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3004 = (_2982 * 48u) + 4u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        float _3018 = _3017.x;
                        float _3019 = _3017.y;
                        float _3020 = _3017.z;
                        uint _3023 = (_2982 * 48u) + 8u;
                        vec3 _3034 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x));
                        uint _3039 = (_2982 * 48u) + 12u;
                        vec2 _3047 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x));
                        float _3053 = inversesqrt(dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831)));
                        float _3054 = _3053 * _1829;
                        float _3055 = _3053 * _1830;
                        float _3056 = _3053 * _1831;
                        float _3057 = _2998.x - _1829;
                        float _3058 = _2998.y - _1830;
                        float _3059 = _2998.z - _1831;
                        float _3060 = dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059));
                        float _3063 = inversesqrt(_3060);
                        float _3064 = _3063 * _3057;
                        float _3065 = _3063 * _3058;
                        float _3066 = _3063 * _3059;
                        float _3067 = dot(vec3(_655, _658, _661), vec3(_3064, _3065, _3066));
                        float _3072 = 1.0 - (_3060 * _2998.w);
                        float _4537 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3073 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3074 = sqrt(_3060) * _3017.w;
                        float _3077 = 1.39999997615814208984375 / (_3074 + 1.39999997615814208984375);
                        float _3078 = _3077 * _3077;
                        float _3079 = 1.0 - _3078;
                        float _3081 = (_3079 * _3079) * _598;
                        float _3084 = ((_3079 * _3067) + _3078) + _3081;
                        float _3089 = _3074 * _3074;
                        float _3094 = ((isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))) * _3073) / (((_3081 * 2.0) + 1.0) * ((_3089 * 0.699999988079071044921875) + 1.0));
                        float _3098 = dot(vec3(_3064, _3065, _3066), vec3(_3054, _3055, _3056));
                        float _4553 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3105 = dot(vec3((-0.0) - _3054, (-0.0) - _3055, (-0.0) - _3056), vec3(_655, _658, _661)) + 1.0;
                        float _3107 = (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * 0.5;
                        float _3114 = ((_3107 * _3107) * _3047.x) * exp2((_3047.y * 32.0) * log2(isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))));
                        float _3116 = _598 / (_598 + 1.0);
                        float _3132 = (-0.0) - _1829;
                        float _3133 = (-0.0) - _1830;
                        float _3134 = (-0.0) - _1831;
                        float _3138 = inversesqrt(dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134)));
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3148 = exp2(log2(1.0 / ((_3089 * 3.5) + 5.0)) * 0.25);
                        float _3149 = 1.0 - _734;
                        float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                        float _3157 = _3156 * _3156;
                        float _3158 = _3157 * _3157;
                        float _3159 = _3139 + _3064;
                        float _3160 = _3140 + _3065;
                        float _3161 = _3141 + _3066;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3169 = dot(vec3(_655, _658, _661), vec3(_3139, _3140, _3141));
                        float _4569 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3173 = dot(vec3(_655, _658, _661), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                        float _4580 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3176 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                        float _3181 = _3077 * _3157;
                        float _3182 = _3181 * _3181;
                        float _3185 = ((1.0 - _3182) * _3067) + _3182;
                        float _4591 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3186 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3187 = 1.0 - _3157;
                        float _3197 = (0.5 / (((_3186 * ((_3172 * _3187) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3186 * _3187) + _3157) * _3172))) * _3186;
                        float _4602 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3208 = (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) / ((_3180 * _3180) * ((_3089 * 2.1991131305694580078125) + 3.141590118408203125))) * _3073;
                        _2890 = (((((_3018 * 0.3183098733425140380859375) * _3116) * _3114) + _3018) * _3094) + _2975;
                        _2891 = (((((_3019 * 0.3183098733425140380859375) * _3116) * _3114) + _3019) * _3094) + _2976;
                        _2892 = (((((_3020 * 0.3183098733425140380859375) * _3116) * _3114) + _3020) * _3094) + _2977;
                        _2887 = (_3208 * _3034.x) + _2972;
                        _2888 = (_3208 * _3034.y) + _2973;
                        _2889 = (_3208 * _3034.z) + _2974;
                        if (_2979 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2972 = _2887;
                            _2973 = _2888;
                            _2974 = _2889;
                            _2975 = _2890;
                            _2976 = _2891;
                            _2977 = _2892;
                            _2978 = _2979;
                        }
                    }
                    frontier_phi_66_pred = _2889;
                    frontier_phi_66_pred_1 = _2888;
                    frontier_phi_66_pred_2 = _2887;
                    frontier_phi_66_pred_3 = _2890;
                    frontier_phi_66_pred_4 = _2892;
                    frontier_phi_66_pred_5 = _2891;
                }
                _2578 = frontier_phi_66_pred;
                _2576 = frontier_phi_66_pred_1;
                _2574 = frontier_phi_66_pred_2;
                _2580 = frontier_phi_66_pred_3;
                _2584 = frontier_phi_66_pred_4;
                _2582 = frontier_phi_66_pred_5;
                uint _2779 = _2778 + 1u;
                if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2772 = _2574;
                    _2773 = _2576;
                    _2774 = _2578;
                    _2775 = _2580;
                    _2776 = _2582;
                    _2777 = _2584;
                    _2778 = _2779;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
        }
        uvec4 _2587 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2588 = _2587.z;
        uint _2590 = (_2588 >> 8u) & 15u;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        if (((4294967295u << _2590) & _2527) == 0u)
        {
            _2740 = _2573;
            _2742 = _2575;
            _2744 = _2577;
            _2746 = _2579;
            _2748 = _2581;
            _2750 = _2583;
        }
        else
        {
            float _2765 = inversesqrt(dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831)));
            float _2766 = _2765 * _1829;
            float _2767 = _2765 * _1830;
            float _2768 = _2765 * _1831;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2590 < ((_2588 >> 12u) & 15u))
            {
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2955 = _2573;
                float _2956 = _2575;
                float _2957 = _2577;
                float _2958 = _2579;
                float _2959 = _2581;
                float _2960 = _2583;
                uint _2961 = _2590;
                uint _2970;
                bool _2971;
                for (;;)
                {
                    _2970 = texelFetch(g_lightClassification, int((((_2521 << 5u) + (_2507 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                    _2971 = _2970 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2971)
                    {
                        frontier_phi_78_pred = _2957;
                        frontier_phi_78_pred_1 = _2956;
                        frontier_phi_78_pred_2 = _2955;
                        frontier_phi_78_pred_3 = _2960;
                        frontier_phi_78_pred_4 = _2959;
                        frontier_phi_78_pred_5 = _2958;
                    }
                    else
                    {
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3278 = _2955;
                        float _3279 = _2956;
                        float _3280 = _2957;
                        float _3281 = _2958;
                        float _3282 = _2959;
                        float _3283 = _2960;
                        uint _3284 = _2970;
                        uint _3285;
                        vec4 _3310;
                        float _3311;
                        vec4 _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        vec3 _3341;
                        vec2 _3350;
                        vec4 _3365;
                        vec4 _3381;
                        float _3428;
                        bool _3429;
                        for (;;)
                        {
                            uint _3295 = ((_2961 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3284));
                            _3285 = (_3284 + 4294967295u) & _3284;
                            uint _3297 = _3295 * 40u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3311 = _3310.w;
                            uint _3313 = (_3295 * 40u) + 4u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            _3327 = _3326.x;
                            _3328 = _3326.y;
                            _3329 = _3326.z;
                            uint _3331 = (_3295 * 40u) + 8u;
                            _3341 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x));
                            uint _3343 = (_3295 * 40u) + 12u;
                            _3350 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x));
                            uint _3352 = (_3295 * 40u) + 16u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3368 = (_3295 * 40u) + 20u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3384 = (_3295 * 40u) + 24u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3403 = (_3295 * 40u) + 28u;
                            vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3428 = fma(_1831, _3416.z, fma(_1830, _3416.y, _3416.x * _1829)) + _3416.w;
                            _3429 = !((fma(_1831, _3397.z, fma(_1830, _3397.y, _3397.x * _1829)) + _3397.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3429)
                            {
                                float _3455 = _3310.x - _1829;
                                float _3456 = _3310.y - _1830;
                                float _3457 = _3310.z - _1831;
                                float _3458 = dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457));
                                float _3461 = inversesqrt(_3458);
                                float _3462 = _3461 * _3455;
                                float _3463 = _3461 * _3456;
                                float _3464 = _3461 * _3457;
                                float _3468 = 1.0 - (_3458 / (_3311 * _3311));
                                float _4613 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3473 = sqrt(_3458) * _3326.w;
                                float _3475 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                                float _3476 = _3475 * _3475;
                                float _3477 = 1.0 - _3476;
                                float _3479 = (_3477 * _3477) * _598;
                                float _3482 = ((_3477 * dot(vec3(_3462, _3463, _3464), vec3(_655, _658, _661))) + _3476) + _3479;
                                float _3487 = _3473 * _3473;
                                float _3492 = (fma(_1831, _3365.z, fma(_1830, _3365.y, _3365.x * _1829)) + _3365.w) / _3428;
                                float _3493 = (fma(_1831, _3381.z, fma(_1830, _3381.y, _3381.x * _1829)) + _3381.w) / _3428;
                                float _3497 = 1.0 - dot(vec2(_3492, _3493), vec2(_3492, _3493));
                                float _4629 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3499 = _3498 * (((isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0))) * _3469) / (((_3479 * 2.0) + 1.0) * ((_3487 * 0.699999988079071044921875) + 1.0)));
                                float _3500 = (-0.0) - _2766;
                                float _3501 = (-0.0) - _2767;
                                float _3502 = (-0.0) - _2768;
                                float _3503 = dot(vec3(_3462, _3463, _3464), vec3(_2766, _2767, _2768));
                                float _4640 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3510 = dot(vec3(_3500, _3501, _3502), vec3(_655, _658, _661)) + 1.0;
                                float _3512 = (isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0))) * 0.5;
                                float _3519 = ((_3512 * _3512) * _3350.x) * exp2((_3350.y * 32.0) * log2(isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))));
                                float _3521 = _598 / (_598 + 1.0);
                                float _3542 = exp2(log2(1.0 / ((_3487 * 3.5) + 5.0)) * 0.25);
                                float _3543 = 1.0 - _734;
                                float _3550 = sqrt(1.0 - ((1.0 - (_3543 * _3543)) * (1.0 - (_3542 * _3542))));
                                float _3551 = _3550 * _3550;
                                float _3552 = _3551 * _3551;
                                float _3553 = _3462 - _2766;
                                float _3554 = _3463 - _2767;
                                float _3555 = _3464 - _2768;
                                float _3559 = inversesqrt(dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555)));
                                float _3563 = dot(vec3(_655, _658, _661), vec3(_3500, _3501, _3502));
                                float _4656 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3566 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3567 = dot(vec3(_655, _658, _661), vec3(_3559 * _3553, _3559 * _3554, _3559 * _3555));
                                float _4667 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3570 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3574 = ((_3570 * _3570) * (_3552 + (-1.0))) + 1.0;
                                float _3575 = _3475 * _3551;
                                float _3576 = _3575 * _3575;
                                float _3582 = ((1.0 - _3576) * dot(vec3(_655, _658, _661), vec3(_3462, _3463, _3464))) + _3576;
                                float _4678 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3583 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3584 = 1.0 - _3551;
                                float _3594 = (0.5 / (((_3583 * ((_3566 * _3584) + _3551)) + 9.9999999392252902907785028219223e-09) + (((_3583 * _3584) + _3551) * _3566))) * _3583;
                                float _4689 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3604 = (_3498 * _3469) * (((_3552 * 3.1415927410125732421875) * (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) / ((_3574 * _3574) * ((_3487 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = ((((_3329 * 0.3183098733425140380859375) * _3521) * _3519) + _3329) * _3499;
                                frontier_phi_87_pred_1 = ((((_3327 * 0.3183098733425140380859375) * _3521) * _3519) + _3327) * _3499;
                                frontier_phi_87_pred_2 = _3604 * _3341.z;
                                frontier_phi_87_pred_3 = _3604 * _3341.y;
                                frontier_phi_87_pred_4 = _3604 * _3341.x;
                                frontier_phi_87_pred_5 = ((((_3328 * 0.3183098733425140380859375) * _3521) * _3519) + _3328) * _3499;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3613 = frontier_phi_87_pred;
                            _3611 = frontier_phi_87_pred_1;
                            _3610 = frontier_phi_87_pred_2;
                            _3609 = frontier_phi_87_pred_3;
                            _3608 = frontier_phi_87_pred_4;
                            _3612 = frontier_phi_87_pred_5;
                            _3259 = _3611 + _3281;
                            _3260 = _3612 + _3282;
                            _3261 = _3613 + _3283;
                            _3256 = _3608 + _3278;
                            _3257 = _3609 + _3279;
                            _3258 = _3610 + _3280;
                            if (_3285 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3278 = _3256;
                                _3279 = _3257;
                                _3280 = _3258;
                                _3281 = _3259;
                                _3282 = _3260;
                                _3283 = _3261;
                                _3284 = _3285;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _3258;
                        frontier_phi_78_pred_1 = _3257;
                        frontier_phi_78_pred_2 = _3256;
                        frontier_phi_78_pred_3 = _3261;
                        frontier_phi_78_pred_4 = _3260;
                        frontier_phi_78_pred_5 = _3259;
                    }
                    _2745 = frontier_phi_78_pred;
                    _2743 = frontier_phi_78_pred_1;
                    _2741 = frontier_phi_78_pred_2;
                    _2751 = frontier_phi_78_pred_3;
                    _2749 = frontier_phi_78_pred_4;
                    _2747 = frontier_phi_78_pred_5;
                    uint _2962 = _2961 + 1u;
                    if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2955 = _2741;
                        _2956 = _2743;
                        _2957 = _2745;
                        _2958 = _2747;
                        _2959 = _2749;
                        _2960 = _2751;
                        _2961 = _2962;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2745;
                frontier_phi_60_61_ladder_1 = _2743;
                frontier_phi_60_61_ladder_2 = _2741;
                frontier_phi_60_61_ladder_3 = _2751;
                frontier_phi_60_61_ladder_4 = _2749;
                frontier_phi_60_61_ladder_5 = _2747;
            }
            else
            {
                frontier_phi_60_61_ladder = _2577;
                frontier_phi_60_61_ladder_1 = _2575;
                frontier_phi_60_61_ladder_2 = _2573;
                frontier_phi_60_61_ladder_3 = _2583;
                frontier_phi_60_61_ladder_4 = _2581;
                frontier_phi_60_61_ladder_5 = _2579;
            }
            _2740 = frontier_phi_60_61_ladder_2;
            _2742 = frontier_phi_60_61_ladder_1;
            _2744 = frontier_phi_60_61_ladder;
            _2746 = frontier_phi_60_61_ladder_5;
            _2748 = frontier_phi_60_61_ladder_4;
            _2750 = frontier_phi_60_61_ladder_3;
        }
        float _2755 = isnan(1.0) ? _713 : (isnan(_713) ? 1.0 : min(_713, 1.0));
        _2539 = (_2755 * _2746) + _2273;
        _2541 = (_2755 * _2748) + _2274;
        _2543 = (_2755 * _2750) + _2275;
        _2545 = ((_2740 * _699) * _2755) + _2450;
        _2547 = ((_2742 * _701) * _2755) + _2451;
        _2549 = ((_2744 * _702) * _2755) + _2452;
    }
    else
    {
        _2539 = _2273;
        _2541 = _2274;
        _2543 = _2275;
        _2545 = _2450;
        _2547 = _2451;
        _2549 = _2452;
    }
    float _2661;
    float _2662;
    float _2663;
    if (_598 > 0.0)
    {
        uint _2594 = _2055 + 4u;
        float _2600 = (-0.0) - _394;
        float _2601 = (-0.0) - _395;
        float _2602 = (-0.0) - _396;
        float _2603 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2600, _2601, _2602));
        float _4705 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2607 = _724 + 1.0;
        float _2609 = (isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0))) * 0.5;
        float _2614 = _2609 * _2609;
        float _2615 = _2614 * exp2(log2(isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * 32.0);
        float _2617 = _598 / (_598 + 1.0);
        float _2618 = isnan(_2064) ? 1.0 : (isnan(1.0) ? _2064 : min(1.0, _2064));
        uint _2631 = _2055 + 5u;
        float _2637 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2600, _2601, _2602));
        float _4726 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2644 = _2614 * exp2(log2(isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * 32.0);
        float _2645 = isnan(_2065) ? 1.0 : (isnan(1.0) ? _2065 : min(1.0, _2065));
        _2661 = ((((_2644 * cbLight._m0[_2631].x) * _2617) * _2645) + ((((cbLight._m0[_2594].x * _2044) * _2615) * _2617) * _2618)) * 0.3183098733425140380859375;
        _2662 = ((((_2644 * cbLight._m0[_2631].y) * _2617) * _2645) + ((((cbLight._m0[_2594].y * _2046) * _2615) * _2617) * _2618)) * 0.3183098733425140380859375;
        _2663 = ((((_2644 * cbLight._m0[_2631].z) * _2617) * _2645) + ((((cbLight._m0[_2594].z * _2048) * _2615) * _2617) * _2618)) * 0.3183098733425140380859375;
    }
    else
    {
        _2661 = 0.0;
        _2662 = 0.0;
        _2663 = 0.0;
    }
    float _4742 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4753 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4764 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4775 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _2669 = 0.959999978542327880859375 - (_602 * 0.959999978542327880859375);
    float _2680 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * ((_2539 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _713)) + _2661);
    float _2681 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * ((_2541 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _713)) + _2662);
    float _2682 = (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * ((_2543 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _713)) + _2663);
    float _2686 = _2669 - (exp2(log2(1.0 - _728) * 5.0) * _2669);
    float _2697 = (_2680 + ((_2545 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _583.x) * _2686) - _2680) * _547);
    float _2699 = (_2681 + ((_2547 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _583.y) * _2686) - _2681) * _547);
    float _2701 = (_2682 + ((_2549 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _583.z) * _2686) - _2682) * _547);
    float _2706 = cbInstanceData._m0[_674 + 6u].w * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)));
    float _2711 = _635 / cbSceneParam._m0[86u].x;
    float _2712 = _636 / cbSceneParam._m0[86u].y;
    vec4 _2726 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, (log2((isnan(cbSceneParam._m0[77u].w) ? _618 : (isnan(_618) ? cbSceneParam._m0[77u].w : min(_618, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2728 = _2726.x;
    float _2729 = _2726.y;
    float _2730 = _2726.z;
    float _2731 = _2726.w;
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    if (_618 > cbSceneParam._m0[78u].w)
    {
        float _2793 = isnan(_618) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _618 : min(cbSceneParam._m0[80u].w, _618));
        float _2794 = _2793 / _618;
        float _2805 = _2794 * _284;
        float _2806 = _285 * _2794;
        float _2807 = (-0.0) - _2806;
        float _2808 = _2794 * _286;
        float _2810 = (cbSceneParam._m0[77u].w * _2807) / _2793;
        float _2811 = _2810 + cbSceneParam._m0[79u].w;
        float _2812 = cbSceneParam._m0[79u].w - _2806;
        float _2818 = sqrt(((_2805 * _2805) + (_2806 * _2806)) + (_2808 * _2808));
        float _2821 = (1.0 - (cbSceneParam._m0[77u].w / _2793)) * _2818;
        float _2826 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2828 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3213;
        if (abs((_2807 - _2810) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3213 = ((((_2811 > 0.0) ? exp2(_2826 * _2811) : (2.0 - exp2(_2828 * _2811))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2821;
        }
        else
        {
            float _2912 = 1.0 / cbSceneParam._m0[80u].x;
            float _2913 = isnan(_2812) ? _2811 : (isnan(_2811) ? _2812 : max(_2811, _2812));
            float _2914 = isnan(_2812) ? _2811 : (isnan(_2811) ? _2812 : min(_2811, _2812));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            _3213 = ((abs(_2818 / _2807) * cbSceneParam._m0[80u].y) * ((((_2923 - _2924) * 2.0) - ((exp2(_2826 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0)))) - exp2(_2826 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))))) * _2912)) - ((exp2(_2828 * _2923) - exp2(_2828 * _2924)) * _2912))) + (_2821 * cbSceneParam._m0[80u].z);
        }
        vec4 _3215 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, 1.0), 0.0);
        float _3224 = exp2((_3213 * (-1.44269502162933349609375)) * (1.0 - _3215.w));
        float _3225 = log2(_3224);
        float _3241 = log2(_2731);
        _2830 = (exp2(_3241 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3225 * cbSceneParam._m0[78u].x)) * _3215.x) / cbSceneParam._m0[78u].x)) + _2728;
        _2832 = (exp2(_3241 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3225 * cbSceneParam._m0[78u].y)) * _3215.y) / cbSceneParam._m0[78u].y)) + _2729;
        _2834 = (exp2(_3241 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3225 * cbSceneParam._m0[78u].z)) * _3215.z) / cbSceneParam._m0[78u].z)) + _2730;
        _2836 = _3224 * _2731;
    }
    else
    {
        _2830 = _2728;
        _2832 = _2729;
        _2834 = _2730;
        _2836 = _2731;
    }
    bool _3251;
    vec4 _2845;
    vec4 _2867;
    float _2869;
    float _2873;
    float _2874;
    float _2875;
    float _2876;
    bool _2886;
    for (;;)
    {
        _2845 = cbMatDynParam._m0[0u];
        float _2847 = roundEven(_2845.y);
        bool _2848 = _2847 == 3.0;
        float _2849 = log2(_2836);
        float _2856 = exp2(_2849 * cbSceneParam._m0[78u].x) * _2697;
        float _2857 = exp2(_2849 * cbSceneParam._m0[78u].y) * _2699;
        float _2858 = exp2(_2849 * cbSceneParam._m0[78u].z) * _2701;
        float _2865 = _625 + (-0.5);
        _2867 = cbMtdParam._m0[1u];
        _2869 = _2867.y * _2865;
        float _2872 = (_2847 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2873 = _2872 * (_2848 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2830)));
        _2874 = _2872 * (_2848 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2832)));
        _2875 = _2872 * (_2848 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2834)));
        _2876 = _2865 * 0.999000012874603271484375;
        _2886 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2886)
        {
            if ((cbInstanceData._m0[_674 + 7u].x + _2876) < 0.5)
            {
                _3251 = true;
                break;
            }
        }
        uint _2947 = _675 + uint(_2845.w);
        if ((cbInstanceData._m0[_2947].w < 1.0) && ((cbInstanceData._m0[_2947].w + _2876) < 0.5))
        {
            _3251 = true;
            break;
        }
        if ((_2869 + _305) < _2867.x)
        {
            _3251 = true;
            break;
        }
        _3251 = false;
        break;
    }
    float _3269;
    if (_3251)
    {
        discard_state = true;
        _3269 = 0.0;
    }
    else
    {
        _3269 = _2706;
    }
    SV_Target.x = _2873;
    SV_Target.y = _2874;
    SV_Target.z = _2875;
    SV_Target.w = _3269;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2706;
    discard_exit();
}


