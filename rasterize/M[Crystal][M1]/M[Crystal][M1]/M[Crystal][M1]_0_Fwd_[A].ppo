#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Crystal_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_Crystal_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1117;
float _3473;
float _3474;
float _3475;
float _3476;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _202 = _201 * _194;
    float _203 = _201 * _195;
    float _204 = _201 * _196;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = _215 * TANGENT.x;
    float _217 = _215 * TANGENT.y;
    float _218 = _215 * TANGENT.z;
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _295 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _301 = _295.w;
    float _312 = dot(vec3(_280, _281, _282), vec3(_202, _203, _204));
    float _315 = dot(vec3(_280, _281, _282), vec3(_216, _217, _218));
    float _318 = dot(vec3(_280, _281, _282), vec3(_223, _224, _225));
    float _324 = inversesqrt(dot(vec3(_312, _315, _318), vec3(_312, _315, _318)));
    float _346 = dot(vec4(texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _366 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_312 * cbMtdParam._m0[12u].x) * _324) * _346) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_315 * cbMtdParam._m0[12u].x) * _324) * _346) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _389 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _390 = _389 * _280;
    float _391 = _389 * _281;
    float _392 = _389 * _282;
    float _393 = dot(vec4(_390, _391, _392, 0.0), vec4(_223, _224, _225, 0.0));
    float _396 = _393 - cbMtdParam._m0[13u].x;
    float _3485 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _403 = exp2(log2(1.0 - (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _419 = ((((_295.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _366.x) * cbMtdParam._m0[9u].x) * ((_403 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _424 = ((((_295.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _366.y) * cbMtdParam._m0[9u].y) * ((_403 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _429 = ((((_295.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _366.z) * cbMtdParam._m0[9u].z) * ((_403 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _442 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _449 = cbMtdParam._m0[14u].y + _442.x;
    vec4 _462 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _470 = (_462.x * 2.0) + (-1.0);
    float _471 = (_462.y * 2.0) + (-1.0);
    float _472 = dot(vec2(_470, _471), vec2(_470, _471));
    float _3501 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))));
    float _480 = fma(_477, _223, fma(_471, _216, _470 * _202));
    float _483 = fma(_477, _224, fma(_471, _217, _470 * _203));
    float _486 = fma(_477, _225, fma(_471, _218, _470 * _204));
    float _490 = inversesqrt(dot(vec3(_480, _483, _486), vec3(_480, _483, _486)));
    float _491 = _490 * _480;
    float _492 = _490 * _483;
    float _494 = cbMtdParam._m0[14u].z + _462.z;
    vec4 _506 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _510 = cbMtdParam._m0[13u].w * _506.x;
    vec4 _523 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _532 = _393 - cbMtdParam._m0[12u].w;
    float _3512 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _542 = ((cbMtdParam._m0[14u].w * _523.x) + cbMtdParam._m0[14u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[14u].x));
    float _3528 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _566 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (_491 * cbMtdParam._m0[15u].x));
    float _567 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (_492 * cbMtdParam._m0[15u].x));
    float _574 = isnan(cbInstanceData._m0[8u].x) ? _566 : (isnan(_566) ? cbInstanceData._m0[8u].x : max(_566, cbInstanceData._m0[8u].x));
    float _575 = isnan(cbInstanceData._m0[8u].y) ? _567 : (isnan(_567) ? cbInstanceData._m0[8u].y : max(_567, cbInstanceData._m0[8u].y));
    vec4 _579 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _574 : (isnan(_574) ? cbInstanceData._m0[8u].z : min(_574, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _575 : (isnan(_575) ? cbInstanceData._m0[8u].w : min(_575, cbInstanceData._m0[8u].w))));
    float _591 = _490 * _486;
    float _3559 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _592 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _593 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _594 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3586 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _3597 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3608 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3619 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _598 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _614 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _619 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _621 = _619.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _796 = sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282));
        float _802 = (cbMatDynParam._m0[5u].x * _796) + cbMatDynParam._m0[5u].y;
        float _3630 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _807 = (cbMatDynParam._m0[5u].z * _796) + cbMatDynParam._m0[5u].w;
        float _3641 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) - _803)) + _803) < ((_621 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _631 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _632 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _651 = fma(_591, cbSceneParam._m0[5u].z, fma(_492, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _491));
    float _654 = fma(_591, cbSceneParam._m0[6u].z, fma(_492, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _491));
    float _657 = fma(_591, cbSceneParam._m0[7u].z, fma(_492, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _491));
    uint _670 = uint(roundEven(NORMAL.w)) * 13u;
    uint _671 = _670 + 9u;
    uint _672 = _671 + uint(cbMatDynParam._m0[0u].w);
    float _678 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_672].x;
    float _679 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_672].y;
    float _680 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_672].z;
    float _3652 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _681 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _684 = 1.0 - _598;
    float _685 = _681 * _684;
    float _686 = _682 * _684;
    float _687 = _683 * _684;
    float _692 = (_681 + (-0.039999999105930328369140625)) * _598;
    float _693 = (_682 + (-0.039999999105930328369140625)) * _598;
    float _694 = (_683 + (-0.039999999105930328369140625)) * _598;
    float _695 = _692 + 0.039999999105930328369140625;
    float _697 = _693 + 0.039999999105930328369140625;
    float _698 = _694 + 0.039999999105930328369140625;
    vec4 _706 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _631, cbSceneParam._m0[86u].y * _632));
    float _709 = _706.x * TEXCOORD.z;
    float _710 = dot(vec3(_491, _492, _591), vec3(_390, _391, _392));
    float _713 = _710 * 2.0;
    float _717 = (_713 * _491) - _390;
    float _718 = (_713 * _492) - _391;
    float _719 = (_713 * _591) - _392;
    float _720 = dot(vec3(_390, _391, _392), vec3(_491, _492, _591));
    float _723 = abs(_720);
    float _3685 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _724 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _730 = sqrt(_593);
    float _742 = exp2((_730 * 5.0) * log2(1.0 - (_724 * 0.999000012874603271484375))) / (4.0 - (_730 * 3.0));
    float _748 = (1.0 - _742) * ((_730 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _749 = _742 * _730;
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1116;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _841 = fma(_785, cbModelParam._m0[26u].z, fma(_781, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777));
        float _845 = fma(_785, cbModelParam._m0[27u].z, fma(_781, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777));
        float _849 = fma(_785, cbModelParam._m0[28u].z, fma(_781, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777));
        float _874 = _777 + _491;
        float _875 = _781 + _492;
        float _876 = _785 + _591;
        float _886 = fma(_876, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _874)) - _841;
        float _887 = fma(_876, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _874)) - _845;
        float _888 = fma(_876, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _874)) - _849;
        float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
        float _905 = ((_892 * _886) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_841 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_892 * _887) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_845 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_892 * _888) / cbModelParam._m0[34u].z) + ((((((_849 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        float _944 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_910.x + (-0.5));
        float _946 = _944 * (_910.y + (-0.5));
        float _947 = _944 * (_910.z + (-0.5));
        float _954 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_917.x + (-0.5));
        float _956 = _954 * (_917.y + (-0.5));
        float _957 = _954 * (_917.z + (-0.5));
        float _964 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_924.x + (-0.5));
        float _966 = _964 * (_924.y + (-0.5));
        float _967 = _964 * (_924.z + (-0.5));
        float _974 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_931.x + (-0.5));
        float _976 = _974 * (_931.y + (-0.5));
        float _977 = _974 * (_931.z + (-0.5));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = _945 * 0.5;
        float _982 = _955 * 0.5;
        float _983 = _965 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _998 = (dot(vec3(_491, _492, _591), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1008 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3733 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1010 + 1.0))) + _1015) * _978;
        float _1025 = _946 * 0.5;
        float _1026 = _956 * 0.5;
        float _1027 = _966 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_491, _492, _591), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3766 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1052 + 1.0))) + _1057) * _979;
        float _1067 = _947 * 0.5;
        float _1068 = _957 * 0.5;
        float _1069 = _967 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_491, _492, _591), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3799 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1094 + 1.0))) + _1099) * _980;
        _1116 = _947;
        _1118 = _946;
        _1119 = _945;
        _1120 = _957;
        _1121 = _956;
        _1122 = _955;
        _1123 = _967;
        _1124 = _966;
        _1125 = _965;
        _1126 = _980;
        _1127 = _979;
        _1128 = _978;
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _1117;
        _1118 = _1117;
        _1119 = _1117;
        _1120 = _1117;
        _1121 = _1117;
        _1122 = _1117;
        _1123 = _1117;
        _1124 = _1117;
        _1125 = _1117;
        _1126 = _1117;
        _1127 = _1117;
        _1128 = _1117;
        _1129 = 0.0;
        _1130 = 0.0;
        _1131 = 0.0;
    }
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1160 = fma(_785, cbModelParam._m0[30u].z, fma(_781, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _777));
        float _1164 = fma(_785, cbModelParam._m0[31u].z, fma(_781, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _777));
        float _1168 = fma(_785, cbModelParam._m0[32u].z, fma(_781, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _777));
        float _1191 = _777 + _491;
        float _1192 = _781 + _492;
        float _1193 = _785 + _591;
        float _1203 = fma(_1193, cbModelParam._m0[30u].z, fma(_1192, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191)) - _1160;
        float _1204 = fma(_1193, cbModelParam._m0[31u].z, fma(_1192, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191)) - _1164;
        float _1205 = fma(_1193, cbModelParam._m0[32u].z, fma(_1192, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191)) - _1168;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1160 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1164 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[35u].z) + ((((((_1168 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1259 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1226.x + (-0.5));
        float _1261 = _1259 * (_1226.y + (-0.5));
        float _1262 = _1259 * (_1226.z + (-0.5));
        float _1269 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1233.x + (-0.5));
        float _1271 = _1269 * (_1233.y + (-0.5));
        float _1272 = _1269 * (_1233.z + (-0.5));
        float _1279 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1240.x + (-0.5));
        float _1281 = _1279 * (_1240.y + (-0.5));
        float _1282 = _1279 * (_1240.z + (-0.5));
        float _1289 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1247.x + (-0.5));
        float _1291 = _1289 * (_1247.y + (-0.5));
        float _1292 = _1289 * (_1247.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_491, _492, _591), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3862 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1323 + 1.0))) + _1328) * _1293;
        float _1338 = _1261 * 0.5;
        float _1339 = _1271 * 0.5;
        float _1340 = _1281 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_491, _492, _591), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3895 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1365 + 1.0))) + _1370) * _1294;
        float _1380 = _1262 * 0.5;
        float _1381 = _1272 * 0.5;
        float _1382 = _1282 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_491, _492, _591), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3928 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1407 + 1.0))) + _1412) * _1295;
        _1429 = _1262;
        _1430 = _1261;
        _1431 = _1260;
        _1432 = _1272;
        _1433 = _1271;
        _1434 = _1270;
        _1435 = _1282;
        _1436 = _1281;
        _1437 = _1280;
        _1438 = _1295;
        _1439 = _1294;
        _1440 = _1293;
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1117;
        _1430 = _1117;
        _1431 = _1117;
        _1432 = _1117;
        _1433 = _1117;
        _1434 = _1117;
        _1435 = _1117;
        _1436 = _1117;
        _1437 = _1117;
        _1438 = _1117;
        _1439 = _1117;
        _1440 = _1117;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1129)) + _1129;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1130)) + _1130;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1131)) + _1131;
    float _1476 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1454, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1454, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1454, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1453));
    float _1497 = _717 * 0.5;
    float _1498 = _718 * 0.5;
    float _1499 = _719 * 0.5;
    float _1500 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1503 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1506 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1540;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1513 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1116, _1120, _1123, _1126));
        float _1517 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1521 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1528 = dot(vec4(cbModelParam._m0[39u]), vec4(_1497, _1498, _1499, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1551;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1542 = dot(vec4(cbModelParam._m0[40u]), vec4(_1497, _1498, _1499, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1555 = (_1551 * cbModelParam._m0[1u].x) + (_1540 * (1.0 - cbModelParam._m0[1u].x));
    float _1565 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _593);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1565 : min(cbModelParam._m0[25u].z, _1565));
    float _1646;
    float _1648;
    float _1650;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1613 = fma(_785, cbModelParam._m0[13u].z, fma(_781, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777)) + cbModelParam._m0[13u].w;
        float _1617 = fma(_785, cbModelParam._m0[14u].z, fma(_781, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777)) + cbModelParam._m0[14u].w;
        float _1621 = fma(_785, cbModelParam._m0[15u].z, fma(_781, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777)) + cbModelParam._m0[15u].w;
        float _1624 = fma(_719, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717));
        float _1627 = fma(_719, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717));
        float _1630 = fma(_719, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717));
        float _1658;
        if (_1624 > 0.0)
        {
            _1658 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1658 = frontier_phi_19_17_ladder;
        }
        float _1833;
        if (_1627 > 0.0)
        {
            _1833 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1833 = frontier_phi_28_24_ladder;
        }
        float _2079;
        if (_1630 > 0.0)
        {
            _2079 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2079 = frontier_phi_39_35_ladder;
        }
        float _2081 = isnan(_1833) ? _1658 : (isnan(_1658) ? _1833 : min(_1658, _1833));
        float _2082 = isnan(_2079) ? _2081 : (isnan(_2081) ? _2079 : min(_2081, _2079));
        float _2086 = (_2082 * _1624) + _1613;
        float _2087 = (_2082 * _1627) + _1617;
        float _2088 = (_2082 * _1630) + _1621;
        float _2089 = _2082 * 9.9999997473787516355514526367188e-05;
        float _2091 = (-1.0) - _2089;
        float _2093 = _2089 + 1.0;
        float frontier_phi_18_39_ladder;
        float frontier_phi_18_39_ladder_1;
        float frontier_phi_18_39_ladder_2;
        if ((_2088 > _2093) || ((_2088 < _2091) || ((_2087 > _2093) || ((_2087 < _2091) || ((_2086 < _2091) || (_2086 > _2093))))))
        {
            frontier_phi_18_39_ladder = 0.0;
            frontier_phi_18_39_ladder_1 = 0.0;
            frontier_phi_18_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2238 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2088, cbModelParam._m0[9u].z, fma(_2087, cbModelParam._m0[9u].y, _2086 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2088, cbModelParam._m0[10u].z, fma(_2087, cbModelParam._m0[10u].y, _2086 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2088, cbModelParam._m0[11u].z, fma(_2087, cbModelParam._m0[11u].y, _2086 * cbModelParam._m0[11u].x))), _1566);
            frontier_phi_18_39_ladder = _2238.z * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_1 = _2238.y * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_2 = _2238.x * cbModelParam._m0[1u].y;
        }
        _1646 = frontier_phi_18_39_ladder_2;
        _1648 = frontier_phi_18_39_ladder_1;
        _1650 = frontier_phi_18_39_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_717, _718, _719), _1566);
        _1646 = _1634.x * cbModelParam._m0[1u].y;
        _1648 = _1634.y * cbModelParam._m0[1u].y;
        _1650 = _1634.z * cbModelParam._m0[1u].y;
    }
    float _1654 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _593);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1654 : min(cbModelParam._m0[25u].w, _1654));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1712 = fma(_785, cbModelParam._m0[21u].z, fma(_781, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777)) + cbModelParam._m0[21u].w;
        float _1716 = fma(_785, cbModelParam._m0[22u].z, fma(_781, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777)) + cbModelParam._m0[22u].w;
        float _1720 = fma(_785, cbModelParam._m0[23u].z, fma(_781, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777)) + cbModelParam._m0[23u].w;
        float _1723 = fma(_719, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717));
        float _1726 = fma(_719, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717));
        float _1729 = fma(_719, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717));
        float _1838;
        if (_1723 > 0.0)
        {
            _1838 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1838 = frontier_phi_30_26_ladder;
        }
        float _2106;
        if (_1726 > 0.0)
        {
            _2106 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _2106 = frontier_phi_41_37_ladder;
        }
        float _2411;
        if (_1729 > 0.0)
        {
            _2411 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2411 = frontier_phi_52_47_ladder;
        }
        float _2413 = isnan(_2106) ? _1838 : (isnan(_1838) ? _2106 : min(_1838, _2106));
        float _2414 = isnan(_2411) ? _2413 : (isnan(_2413) ? _2411 : min(_2413, _2411));
        float _2418 = (_2414 * _1723) + _1712;
        float _2419 = (_2414 * _1726) + _1716;
        float _2420 = (_2414 * _1729) + _1720;
        float _2421 = _2414 * 9.9999997473787516355514526367188e-05;
        float _2422 = (-1.0) - _2421;
        float _2424 = _2421 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2420 > _2424) || ((_2420 < _2422) || ((_2419 > _2424) || ((_2419 < _2422) || ((_2418 < _2422) || (_2418 > _2424))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2420, cbModelParam._m0[17u].z, fma(_2419, cbModelParam._m0[17u].y, _2418 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2420, cbModelParam._m0[18u].z, fma(_2419, cbModelParam._m0[18u].y, _2418 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2420, cbModelParam._m0[19u].z, fma(_2419, cbModelParam._m0[19u].y, _2418 * cbModelParam._m0[19u].x))), _1655);
            frontier_phi_27_52_ladder = _2600.x * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2600.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2600.y * cbModelParam._m0[1u].z;
        }
        _1748 = frontier_phi_27_52_ladder;
        _1750 = frontier_phi_27_52_ladder_2;
        _1752 = frontier_phi_27_52_ladder_1;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_717, _718, _719), _1655);
        _1748 = _1732.x * cbModelParam._m0[1u].z;
        _1750 = _1732.y * cbModelParam._m0[1u].z;
        _1752 = _1732.z * cbModelParam._m0[1u].z;
    }
    float _1765 = (((_748 * _695) + _749) * _709) * ((cbModelParam._m0[1u].w * (_1748 - _1646)) + _1646);
    float _1767 = (((_748 * _697) + _749) * _709) * ((cbModelParam._m0[1u].w * (_1750 - _1648)) + _1648);
    float _1769 = (((_748 * _698) + _749) * _709) * ((cbModelParam._m0[1u].w * (_1752 - _1650)) + _1650);
    float _1772 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1775 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1778 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, _1765 * cbSceneParam._m0[91u].x));
    uvec4 _1788 = floatBitsToUint(cbInstanceData._m0[_670 + 5u]);
    uint _1790 = _1788.x * 14u;
    uint _1791 = _1790 + 13u;
    float _1796 = _709 + (-1.0);
    float _1799 = (cbLight._m0[_1791].x * _1796) + 1.0;
    float _1800 = (cbLight._m0[_1791].y * _1796) + 1.0;
    uint _1802 = _1790 + 4u;
    float _1813 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_491, _492, _591));
    float _1816 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1817 = _1790 + 5u;
    uint _1823 = _1790 | 1u;
    float _1829 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_491, _492, _591));
    float _1832 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    float _1897;
    float _1898;
    float _1899;
    if (_594 == 0.0)
    {
        float _4064 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _4075 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1851 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
        float _1853 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
        _1897 = ((cbLight._m0[_1817].x * _1832) * _1853) + ((cbLight._m0[_1802].x * _1816) * _1851);
        _1898 = ((_1832 * cbLight._m0[_1817].y) * _1853) + ((_1816 * cbLight._m0[_1802].y) * _1851);
        _1899 = ((_1832 * cbLight._m0[_1817].z) * _1853) + ((_1816 * cbLight._m0[_1802].z) * _1851);
    }
    else
    {
        float _1863 = _1813 + _594;
        float _1866 = (_594 * 2.0) + 1.0;
        float _1867 = (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) / _1866;
        float _1874 = _1829 + _594;
        float _1876 = (isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) / _1866;
        _1897 = (((_1876 * cbLight._m0[_1817].x) * _1832) + ((_1867 * cbLight._m0[_1802].x) * _1816)) * 0.3183098733425140380859375;
        _1898 = (((_1876 * cbLight._m0[_1817].y) * _1832) + ((_1867 * cbLight._m0[_1802].y) * _1816)) * 0.3183098733425140380859375;
        _1899 = (((_1876 * cbLight._m0[_1817].z) * _1832) + ((_1867 * cbLight._m0[_1802].z) * _1816)) * 0.3183098733425140380859375;
    }
    uint _1903 = _1790 + 8u;
    float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * _593) * 0.949999988079071044921875);
    float _1920 = _1919 * _1919;
    float _1921 = cbLight._m0[_1790].x + _390;
    float _1922 = cbLight._m0[_1790].y + _391;
    float _1923 = cbLight._m0[_1790].z + _392;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1928 = _1927 * _1921;
    float _1929 = _1927 * _1922;
    float _1930 = _1927 * _1923;
    float _1931 = dot(vec3(_491, _492, _591), vec3(cbLight._m0[_1790].xyz));
    float _4096 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _1935 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _1936 = dot(vec3(_491, _492, _591), vec3(_1928, _1929, _1930));
    float _4118 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1940 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1928, _1929, _1930));
    float _4129 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1944 = _1920 * _1920;
    float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
    float _1956 = exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0);
    float _1957 = 0.959999978542327880859375 - _692;
    float _1959 = 0.959999978542327880859375 - _693;
    float _1960 = 0.959999978542327880859375 - _694;
    float _1967 = 1.0 - _1920;
    float _1978 = (0.5 / (((_1935 * ((_1934 * _1967) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _1967) + _1920) * _1934))) * _1934;
    float _4140 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1980 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
    uint _1993 = _1790 + 9u;
    float _2007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _593) * 0.949999988079071044921875);
    float _2008 = _2007 * _2007;
    float _2009 = cbLight._m0[_1823].x + _390;
    float _2010 = cbLight._m0[_1823].y + _391;
    float _2011 = cbLight._m0[_1823].z + _392;
    float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
    float _2016 = _2015 * _2009;
    float _2017 = _2015 * _2010;
    float _2018 = _2015 * _2011;
    float _2019 = dot(vec3(_491, _492, _591), vec3(cbLight._m0[_1823].xyz));
    float _4151 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2023 = dot(vec3(_491, _492, _591), vec3(_2016, _2017, _2018));
    float _4162 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2016, _2017, _2018));
    float _4173 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2008 * _2008;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2042 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
    float _2049 = 1.0 - _2008;
    float _2059 = (0.5 / (((_1935 * ((_2022 * _2049) + _2008)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2049) + _2008) * _2022))) * _2022;
    float _4184 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    float _2071 = (((((_2042 * _1957) + _695) * cbLight._m0[_1993].x) * _2061) * _1832) + (((((_1956 * _1957) + _695) * cbLight._m0[_1903].x) * _1980) * _1816);
    float _2072 = (((((_2042 * _1959) + _697) * cbLight._m0[_1993].y) * _2061) * _1832) + (((((_1956 * _1959) + _697) * cbLight._m0[_1903].y) * _1980) * _1816);
    float _2073 = (((((_2042 * _1960) + _698) * cbLight._m0[_1993].z) * _2061) * _1832) + (((((_1956 * _1960) + _698) * cbLight._m0[_1903].z) * _1980) * _1816);
    float _2209;
    float _2211;
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    if (_1788.y == 0u)
    {
        float _2150 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2151 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2150;
        float _2152 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2150;
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2150;
        uvec4 _2165 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2166 = _2165.x;
        uint _2177 = uint((float(_2165.y) * floor(float(uint(cbSceneParam._m0[85u].y * _632) / _2166))) + floor(float(uint(cbSceneParam._m0[85u].x * _631) / _2166)));
        float _2187 = (log2(_2153 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2188 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        uint _2191 = uint(isnan(14.0) ? _2188 : (isnan(_2188) ? 14.0 : min(_2188, 14.0)));
        uvec4 _2196 = texelFetch(g_lightClusterGridBuffer, int(((_2191 << 2u) + (_2177 << 6u)) >> 2u));
        uint _2197 = _2196.x;
        uint _2198 = _2165.z;
        float _2247;
        float _2249;
        float _2251;
        float _2253;
        float _2255;
        float _2257;
        if (((((1u << ((_2198 >> 4u) & 15u)) + 4294967295u) & _2197) == 0u) || ((_2198 & 240u) == 0u))
        {
            _2247 = 0.0;
            _2249 = 0.0;
            _2251 = 0.0;
            _2253 = 0.0;
            _2255 = 0.0;
            _2257 = 0.0;
        }
        else
        {
            float _2248;
            float _2250;
            float _2252;
            float _2254;
            float _2256;
            float _2258;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            uint _2475 = 0u;
            uint _2484;
            bool _2485;
            for (;;)
            {
                _2484 = texelFetch(g_lightClassification, int((((_2191 << 5u) + (_2177 << 9u)) + (_2475 << 2u)) >> 2u)).x;
                _2485 = _2484 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2485)
                {
                    frontier_phi_61_pred = _2470;
                    frontier_phi_61_pred_1 = _2474;
                    frontier_phi_61_pred_2 = _2473;
                    frontier_phi_61_pred_3 = _2472;
                    frontier_phi_61_pred_4 = _2471;
                    frontier_phi_61_pred_5 = _2469;
                }
                else
                {
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    uint _2696;
                    _2690 = _2469;
                    _2691 = _2470;
                    _2692 = _2471;
                    _2693 = _2472;
                    _2694 = _2473;
                    _2695 = _2474;
                    _2696 = _2484;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    for (;;)
                    {
                        uint _2700 = uint(findLSB(_2696)) + (_2475 << 5u);
                        uint _2697 = (_2696 + 4294967295u) & _2696;
                        uint _2702 = _2700 * 48u;
                        vec4 _2716 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 3u)).x));
                        uint _2722 = (_2700 * 48u) + 4u;
                        vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2722)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 3u)).x));
                        float _2736 = _2735.x;
                        float _2737 = _2735.y;
                        float _2738 = _2735.z;
                        uint _2741 = (_2700 * 48u) + 8u;
                        vec3 _2752 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x));
                        uint _2757 = (_2700 * 48u) + 12u;
                        vec2 _2765 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x));
                        float _2771 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
                        float _2772 = _2771 * _2151;
                        float _2773 = _2771 * _2152;
                        float _2774 = _2771 * _2153;
                        float _2775 = _2716.x - _2151;
                        float _2776 = _2716.y - _2152;
                        float _2777 = _2716.z - _2153;
                        float _2778 = dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777));
                        float _2781 = inversesqrt(_2778);
                        float _2782 = _2781 * _2775;
                        float _2783 = _2781 * _2776;
                        float _2784 = _2781 * _2777;
                        float _2785 = dot(vec3(_651, _654, _657), vec3(_2782, _2783, _2784));
                        float _2790 = 1.0 - (_2778 * _2716.w);
                        float _4205 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2791 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                        float _2792 = sqrt(_2778) * _2735.w;
                        float _2795 = 1.39999997615814208984375 / (_2792 + 1.39999997615814208984375);
                        float _2796 = _2795 * _2795;
                        float _2797 = 1.0 - _2796;
                        float _2799 = (_2797 * _2797) * _594;
                        float _2802 = ((_2797 * _2785) + _2796) + _2799;
                        float _2807 = _2792 * _2792;
                        float _2812 = ((isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))) * _2791) / (((_2799 * 2.0) + 1.0) * ((_2807 * 0.699999988079071044921875) + 1.0));
                        float _2816 = dot(vec3(_2782, _2783, _2784), vec3(_2772, _2773, _2774));
                        float _4221 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2823 = dot(vec3((-0.0) - _2772, (-0.0) - _2773, (-0.0) - _2774), vec3(_651, _654, _657)) + 1.0;
                        float _2825 = (isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))) * 0.5;
                        float _2832 = ((_2825 * _2825) * _2765.x) * exp2((_2765.y * 32.0) * log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))));
                        float _2834 = _594 / (_594 + 1.0);
                        float _2850 = (-0.0) - _2151;
                        float _2851 = (-0.0) - _2152;
                        float _2852 = (-0.0) - _2153;
                        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
                        float _2857 = _2856 * _2850;
                        float _2858 = _2856 * _2851;
                        float _2859 = _2856 * _2852;
                        float _2867 = exp2(log2(1.0 / ((_2807 * 3.5) + 5.0)) * 0.25);
                        float _2868 = 1.0 - _730;
                        float _2875 = sqrt(1.0 - ((1.0 - (_2868 * _2868)) * (1.0 - (_2867 * _2867))));
                        float _2876 = _2875 * _2875;
                        float _2877 = _2876 * _2876;
                        float _2878 = _2857 + _2782;
                        float _2879 = _2858 + _2783;
                        float _2880 = _2859 + _2784;
                        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
                        float _2888 = dot(vec3(_651, _654, _657), vec3(_2857, _2858, _2859));
                        float _4237 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2891 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2892 = dot(vec3(_651, _654, _657), vec3(_2884 * _2878, _2884 * _2879, _2884 * _2880));
                        float _4248 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2895 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2899 = ((_2895 * _2895) * (_2877 + (-1.0))) + 1.0;
                        float _2900 = _2795 * _2876;
                        float _2901 = _2900 * _2900;
                        float _2904 = ((1.0 - _2901) * _2785) + _2901;
                        float _4259 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2905 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2906 = 1.0 - _2876;
                        float _2916 = (0.5 / (((_2905 * ((_2891 * _2906) + _2876)) + 9.9999999392252902907785028219223e-09) + (((_2905 * _2906) + _2876) * _2891))) * _2905;
                        float _4270 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2927 = (((_2877 * 3.1415927410125732421875) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) / ((_2899 * _2899) * ((_2807 * 2.1991131305694580078125) + 3.141590118408203125))) * _2791;
                        _2608 = (((((_2736 * 0.3183098733425140380859375) * _2834) * _2832) + _2736) * _2812) + _2693;
                        _2609 = (((((_2737 * 0.3183098733425140380859375) * _2834) * _2832) + _2737) * _2812) + _2694;
                        _2610 = (((((_2738 * 0.3183098733425140380859375) * _2834) * _2832) + _2738) * _2812) + _2695;
                        _2605 = (_2927 * _2752.x) + _2690;
                        _2606 = (_2927 * _2752.y) + _2691;
                        _2607 = (_2927 * _2752.z) + _2692;
                        if (_2697 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2690 = _2605;
                            _2691 = _2606;
                            _2692 = _2607;
                            _2693 = _2608;
                            _2694 = _2609;
                            _2695 = _2610;
                            _2696 = _2697;
                        }
                    }
                    frontier_phi_61_pred = _2606;
                    frontier_phi_61_pred_1 = _2610;
                    frontier_phi_61_pred_2 = _2609;
                    frontier_phi_61_pred_3 = _2608;
                    frontier_phi_61_pred_4 = _2607;
                    frontier_phi_61_pred_5 = _2605;
                }
                _2250 = frontier_phi_61_pred;
                _2258 = frontier_phi_61_pred_1;
                _2256 = frontier_phi_61_pred_2;
                _2254 = frontier_phi_61_pred_3;
                _2252 = frontier_phi_61_pred_4;
                _2248 = frontier_phi_61_pred_5;
                uint _2476 = _2475 + 1u;
                if (_2476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2469 = _2248;
                    _2470 = _2250;
                    _2471 = _2252;
                    _2472 = _2254;
                    _2473 = _2256;
                    _2474 = _2258;
                    _2475 = _2476;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2247 = _2248;
            _2249 = _2250;
            _2251 = _2252;
            _2253 = _2254;
            _2255 = _2256;
            _2257 = _2258;
        }
        uvec4 _2261 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2262 = _2261.z;
        uint _2264 = (_2262 >> 8u) & 15u;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        if (((4294967295u << _2264) & _2197) == 0u)
        {
            _2437 = _2247;
            _2439 = _2249;
            _2441 = _2251;
            _2443 = _2253;
            _2445 = _2255;
            _2447 = _2257;
        }
        else
        {
            float _2462 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
            float _2463 = _2462 * _2151;
            float _2464 = _2462 * _2152;
            float _2465 = _2462 * _2153;
            float frontier_phi_54_55_ladder;
            float frontier_phi_54_55_ladder_1;
            float frontier_phi_54_55_ladder_2;
            float frontier_phi_54_55_ladder_3;
            float frontier_phi_54_55_ladder_4;
            float frontier_phi_54_55_ladder_5;
            if (_2264 < ((_2262 >> 12u) & 15u))
            {
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2673 = _2247;
                float _2674 = _2249;
                float _2675 = _2251;
                float _2676 = _2253;
                float _2677 = _2255;
                float _2678 = _2257;
                uint _2679 = _2264;
                uint _2688;
                bool _2689;
                for (;;)
                {
                    _2688 = texelFetch(g_lightClassification, int((((_2191 << 5u) + (_2177 << 9u)) + (_2679 << 2u)) >> 2u)).x;
                    _2689 = _2688 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2689)
                    {
                        frontier_phi_73_pred = _2678;
                        frontier_phi_73_pred_1 = _2677;
                        frontier_phi_73_pred_2 = _2676;
                        frontier_phi_73_pred_3 = _2675;
                        frontier_phi_73_pred_4 = _2674;
                        frontier_phi_73_pred_5 = _2673;
                    }
                    else
                    {
                        float _2975;
                        float _2976;
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _2997 = _2673;
                        float _2998 = _2674;
                        float _2999 = _2675;
                        float _3000 = _2676;
                        float _3001 = _2677;
                        float _3002 = _2678;
                        uint _3003 = _2688;
                        uint _3004;
                        vec4 _3029;
                        float _3030;
                        vec4 _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        vec3 _3060;
                        vec2 _3069;
                        vec4 _3084;
                        vec4 _3100;
                        float _3147;
                        bool _3148;
                        for (;;)
                        {
                            uint _3014 = ((_2679 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3003));
                            _3004 = (_3003 + 4294967295u) & _3003;
                            uint _3016 = _3014 * 40u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3030 = _3029.w;
                            uint _3032 = (_3014 * 40u) + 4u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            _3046 = _3045.x;
                            _3047 = _3045.y;
                            _3048 = _3045.z;
                            uint _3050 = (_3014 * 40u) + 8u;
                            _3060 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x));
                            uint _3062 = (_3014 * 40u) + 12u;
                            _3069 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x));
                            uint _3071 = (_3014 * 40u) + 16u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3087 = (_3014 * 40u) + 20u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3103 = (_3014 * 40u) + 24u;
                            vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3122 = (_3014 * 40u) + 28u;
                            vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3147 = fma(_2153, _3135.z, fma(_2152, _3135.y, _3135.x * _2151)) + _3135.w;
                            _3148 = !((fma(_2153, _3116.z, fma(_2152, _3116.y, _3116.x * _2151)) + _3116.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3148)
                            {
                                float _3174 = _3029.x - _2151;
                                float _3175 = _3029.y - _2152;
                                float _3176 = _3029.z - _2153;
                                float _3177 = dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176));
                                float _3180 = inversesqrt(_3177);
                                float _3181 = _3180 * _3174;
                                float _3182 = _3180 * _3175;
                                float _3183 = _3180 * _3176;
                                float _3187 = 1.0 - (_3177 / (_3030 * _3030));
                                float _4281 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3188 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3192 = sqrt(_3177) * _3045.w;
                                float _3194 = 1.39999997615814208984375 / (_3192 + 1.39999997615814208984375);
                                float _3195 = _3194 * _3194;
                                float _3196 = 1.0 - _3195;
                                float _3198 = (_3196 * _3196) * _594;
                                float _3201 = ((_3196 * dot(vec3(_3181, _3182, _3183), vec3(_651, _654, _657))) + _3195) + _3198;
                                float _3206 = _3192 * _3192;
                                float _3211 = (fma(_2153, _3084.z, fma(_2152, _3084.y, _3084.x * _2151)) + _3084.w) / _3147;
                                float _3212 = (fma(_2153, _3100.z, fma(_2152, _3100.y, _3100.x * _2151)) + _3100.w) / _3147;
                                float _3216 = 1.0 - dot(vec2(_3211, _3212), vec2(_3211, _3212));
                                float _4297 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3218 = _3217 * (((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3188) / (((_3198 * 2.0) + 1.0) * ((_3206 * 0.699999988079071044921875) + 1.0)));
                                float _3219 = (-0.0) - _2463;
                                float _3220 = (-0.0) - _2464;
                                float _3221 = (-0.0) - _2465;
                                float _3222 = dot(vec3(_3181, _3182, _3183), vec3(_2463, _2464, _2465));
                                float _4308 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3229 = dot(vec3(_3219, _3220, _3221), vec3(_651, _654, _657)) + 1.0;
                                float _3231 = (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))) * 0.5;
                                float _3238 = ((_3231 * _3231) * _3069.x) * exp2((_3069.y * 32.0) * log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))));
                                float _3240 = _594 / (_594 + 1.0);
                                float _3261 = exp2(log2(1.0 / ((_3206 * 3.5) + 5.0)) * 0.25);
                                float _3262 = 1.0 - _730;
                                float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                                float _3270 = _3269 * _3269;
                                float _3271 = _3270 * _3270;
                                float _3272 = _3181 - _2463;
                                float _3273 = _3182 - _2464;
                                float _3274 = _3183 - _2465;
                                float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                                float _3282 = dot(vec3(_651, _654, _657), vec3(_3219, _3220, _3221));
                                float _4324 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3286 = dot(vec3(_651, _654, _657), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                                float _4335 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                                float _3294 = _3194 * _3270;
                                float _3295 = _3294 * _3294;
                                float _3301 = ((1.0 - _3295) * dot(vec3(_651, _654, _657), vec3(_3181, _3182, _3183))) + _3295;
                                float _4346 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3303 = 1.0 - _3270;
                                float _3313 = (0.5 / (((_3302 * ((_3285 * _3303) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3270) * _3285))) * _3302;
                                float _4357 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3323 = (_3217 * _3188) * (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) / ((_3293 * _3293) * ((_3206 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3323 * _3060.y;
                                frontier_phi_82_pred_1 = _3323 * _3060.x;
                                frontier_phi_82_pred_2 = _3323 * _3060.z;
                                frontier_phi_82_pred_3 = ((((_3048 * 0.3183098733425140380859375) * _3240) * _3238) + _3048) * _3218;
                                frontier_phi_82_pred_4 = ((((_3047 * 0.3183098733425140380859375) * _3240) * _3238) + _3047) * _3218;
                                frontier_phi_82_pred_5 = ((((_3046 * 0.3183098733425140380859375) * _3240) * _3238) + _3046) * _3218;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3328 = frontier_phi_82_pred;
                            _3327 = frontier_phi_82_pred_1;
                            _3329 = frontier_phi_82_pred_2;
                            _3332 = frontier_phi_82_pred_3;
                            _3331 = frontier_phi_82_pred_4;
                            _3330 = frontier_phi_82_pred_5;
                            _2978 = _3330 + _3000;
                            _2979 = _3331 + _3001;
                            _2980 = _3332 + _3002;
                            _2975 = _3327 + _2997;
                            _2976 = _3328 + _2998;
                            _2977 = _3329 + _2999;
                            if (_3004 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2997 = _2975;
                                _2998 = _2976;
                                _2999 = _2977;
                                _3000 = _2978;
                                _3001 = _2979;
                                _3002 = _2980;
                                _3003 = _3004;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _2980;
                        frontier_phi_73_pred_1 = _2979;
                        frontier_phi_73_pred_2 = _2978;
                        frontier_phi_73_pred_3 = _2977;
                        frontier_phi_73_pred_4 = _2976;
                        frontier_phi_73_pred_5 = _2975;
                    }
                    _2448 = frontier_phi_73_pred;
                    _2446 = frontier_phi_73_pred_1;
                    _2444 = frontier_phi_73_pred_2;
                    _2442 = frontier_phi_73_pred_3;
                    _2440 = frontier_phi_73_pred_4;
                    _2438 = frontier_phi_73_pred_5;
                    uint _2680 = _2679 + 1u;
                    if (_2680 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2673 = _2438;
                        _2674 = _2440;
                        _2675 = _2442;
                        _2676 = _2444;
                        _2677 = _2446;
                        _2678 = _2448;
                        _2679 = _2680;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_54_55_ladder = _2448;
                frontier_phi_54_55_ladder_1 = _2446;
                frontier_phi_54_55_ladder_2 = _2444;
                frontier_phi_54_55_ladder_3 = _2442;
                frontier_phi_54_55_ladder_4 = _2440;
                frontier_phi_54_55_ladder_5 = _2438;
            }
            else
            {
                frontier_phi_54_55_ladder = _2257;
                frontier_phi_54_55_ladder_1 = _2255;
                frontier_phi_54_55_ladder_2 = _2253;
                frontier_phi_54_55_ladder_3 = _2251;
                frontier_phi_54_55_ladder_4 = _2249;
                frontier_phi_54_55_ladder_5 = _2247;
            }
            _2437 = frontier_phi_54_55_ladder_5;
            _2439 = frontier_phi_54_55_ladder_4;
            _2441 = frontier_phi_54_55_ladder_3;
            _2443 = frontier_phi_54_55_ladder_2;
            _2445 = frontier_phi_54_55_ladder_1;
            _2447 = frontier_phi_54_55_ladder;
        }
        float _2452 = isnan(1.0) ? _709 : (isnan(_709) ? 1.0 : min(_709, 1.0));
        _2209 = (_2452 * _2443) + _1897;
        _2211 = (_2452 * _2445) + _1898;
        _2213 = (_2452 * _2447) + _1899;
        _2215 = ((_2437 * _695) * _2452) + _2071;
        _2217 = ((_2439 * _697) * _2452) + _2072;
        _2219 = ((_2441 * _698) * _2452) + _2073;
    }
    else
    {
        _2209 = _1897;
        _2211 = _1898;
        _2213 = _1899;
        _2215 = _2071;
        _2217 = _2072;
        _2219 = _2073;
    }
    float _2332;
    float _2333;
    float _2334;
    if (_594 > 0.0)
    {
        uint _2268 = _1790 + 4u;
        float _2274 = (-0.0) - _390;
        float _2275 = (-0.0) - _391;
        float _2276 = (-0.0) - _392;
        float _2277 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_2274, _2275, _2276));
        float _4373 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2281 = _720 + 1.0;
        float _2283 = (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0))) * 0.5;
        float _2288 = _2283 * _2283;
        float _2289 = _2288 * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 32.0);
        float _2291 = _594 / (_594 + 1.0);
        float _2292 = isnan(_1799) ? 1.0 : (isnan(1.0) ? _1799 : min(1.0, _1799));
        uint _2302 = _1790 + 5u;
        float _2308 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2274, _2275, _2276));
        float _4394 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2315 = _2288 * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 32.0);
        float _2316 = isnan(_1800) ? 1.0 : (isnan(1.0) ? _1800 : min(1.0, _1800));
        _2332 = ((((_2315 * cbLight._m0[_2302].x) * _2291) * _2316) + (((_2289 * cbLight._m0[_2268].x) * _2291) * _2292)) * 0.3183098733425140380859375;
        _2333 = ((((_2315 * cbLight._m0[_2302].y) * _2291) * _2316) + (((_2289 * cbLight._m0[_2268].y) * _2291) * _2292)) * 0.3183098733425140380859375;
        _2334 = ((((_2315 * cbLight._m0[_2302].z) * _2291) * _2316) + (((_2289 * cbLight._m0[_2268].z) * _2291) * _2292)) * 0.3183098733425140380859375;
    }
    else
    {
        _2332 = 0.0;
        _2333 = 0.0;
        _2334 = 0.0;
    }
    float _4410 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4421 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4432 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4443 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _2340 = 0.959999978542327880859375 - (_598 * 0.959999978542327880859375);
    float _2351 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * ((_2209 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _709)) + _2332);
    float _2352 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * ((_2211 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _709)) + _2333);
    float _2353 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * ((_2213 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _709)) + _2334);
    float _2357 = _2340 - (exp2(log2(1.0 - _724) * 5.0) * _2340);
    float _2368 = (_2351 + ((_2215 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1555)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _579.x) * _2357) - _2351) * _543);
    float _2370 = (_2352 + ((_2217 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1555)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _579.y) * _2357) - _2352) * _543);
    float _2372 = (_2353 + ((_2219 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1555)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _579.z) * _2357) - _2353) * _543);
    float _2377 = cbInstanceData._m0[_670 + 6u].w * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)));
    float _2382 = _631 / cbSceneParam._m0[86u].x;
    float _2383 = _632 / cbSceneParam._m0[86u].y;
    vec4 _2397 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2382, _2383, (log2((isnan(cbSceneParam._m0[77u].w) ? _614 : (isnan(_614) ? cbSceneParam._m0[77u].w : min(_614, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2399 = _2397.x;
    float _2400 = _2397.y;
    float _2401 = _2397.z;
    float _2402 = _2397.w;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    if (_614 > cbSceneParam._m0[78u].w)
    {
        float _2490 = isnan(_614) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _614 : min(cbSceneParam._m0[80u].w, _614));
        float _2491 = _2490 / _614;
        float _2502 = _2491 * _280;
        float _2503 = _281 * _2491;
        float _2504 = (-0.0) - _2503;
        float _2505 = _2491 * _282;
        float _2507 = (cbSceneParam._m0[77u].w * _2504) / _2490;
        float _2508 = _2507 + cbSceneParam._m0[79u].w;
        float _2509 = cbSceneParam._m0[79u].w - _2503;
        float _2515 = sqrt(((_2502 * _2502) + (_2503 * _2503)) + (_2505 * _2505));
        float _2518 = (1.0 - (cbSceneParam._m0[77u].w / _2490)) * _2515;
        float _2523 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2525 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2932;
        if (abs((_2504 - _2507) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2932 = ((((_2508 > 0.0) ? exp2(_2523 * _2508) : (2.0 - exp2(_2525 * _2508))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2518;
        }
        else
        {
            float _2630 = 1.0 / cbSceneParam._m0[80u].x;
            float _2631 = isnan(_2509) ? _2508 : (isnan(_2508) ? _2509 : max(_2508, _2509));
            float _2632 = isnan(_2509) ? _2508 : (isnan(_2508) ? _2509 : min(_2508, _2509));
            float _2641 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : min(_2631, 0.0));
            float _2642 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : min(_2632, 0.0));
            _2932 = ((abs(_2515 / _2504) * cbSceneParam._m0[80u].y) * ((((_2641 - _2642) * 2.0) - ((exp2(_2523 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0)))) - exp2(_2523 * (isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0))))) * _2630)) - ((exp2(_2525 * _2641) - exp2(_2525 * _2642)) * _2630))) + (_2518 * cbSceneParam._m0[80u].z);
        }
        vec4 _2934 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2382, _2383, 1.0), 0.0);
        float _2943 = exp2((_2932 * (-1.44269502162933349609375)) * (1.0 - _2934.w));
        float _2944 = log2(_2943);
        float _2960 = log2(_2402);
        _2527 = (exp2(_2960 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2944 * cbSceneParam._m0[78u].x)) * _2934.x) / cbSceneParam._m0[78u].x)) + _2399;
        _2529 = (exp2(_2960 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2944 * cbSceneParam._m0[78u].y)) * _2934.y) / cbSceneParam._m0[78u].y)) + _2400;
        _2531 = (exp2(_2960 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2944 * cbSceneParam._m0[78u].z)) * _2934.z) / cbSceneParam._m0[78u].z)) + _2401;
        _2533 = _2943 * _2402;
    }
    else
    {
        _2527 = _2399;
        _2529 = _2400;
        _2531 = _2401;
        _2533 = _2402;
    }
    bool _2970;
    vec4 _2542;
    vec4 _2564;
    float _2566;
    float _2570;
    float _2571;
    float _2572;
    float _2573;
    bool _2583;
    for (;;)
    {
        _2542 = cbMatDynParam._m0[0u];
        float _2544 = roundEven(_2542.y);
        bool _2545 = _2544 == 3.0;
        float _2546 = log2(_2533);
        float _2553 = exp2(_2546 * cbSceneParam._m0[78u].x) * _2368;
        float _2554 = exp2(_2546 * cbSceneParam._m0[78u].y) * _2370;
        float _2555 = exp2(_2546 * cbSceneParam._m0[78u].z) * _2372;
        float _2562 = _621 + (-0.5);
        _2564 = cbMtdParam._m0[1u];
        _2566 = _2564.y * _2562;
        float _2569 = (_2544 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2570 = _2569 * (_2545 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2527)));
        _2571 = _2569 * (_2545 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2529)));
        _2572 = _2569 * (_2545 ? _2555 : (_2555 + (cbSceneParam._m0[72u].w * _2531)));
        _2573 = _2562 * 0.999000012874603271484375;
        _2583 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2583)
        {
            if ((cbInstanceData._m0[_670 + 7u].x + _2573) < 0.5)
            {
                _2970 = true;
                break;
            }
        }
        uint _2665 = _671 + uint(_2542.w);
        if ((cbInstanceData._m0[_2665].w < 1.0) && ((cbInstanceData._m0[_2665].w + _2573) < 0.5))
        {
            _2970 = true;
            break;
        }
        if ((_2566 + _301) < _2564.x)
        {
            _2970 = true;
            break;
        }
        _2970 = false;
        break;
    }
    float _2988;
    if (_2970)
    {
        discard_state = true;
        _2988 = 0.0;
    }
    else
    {
        _2988 = _2377;
    }
    SV_Target.x = _2570;
    SV_Target.y = _2571;
    SV_Target.z = _2572;
    SV_Target.w = _2988;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2377;
    discard_exit();
}


