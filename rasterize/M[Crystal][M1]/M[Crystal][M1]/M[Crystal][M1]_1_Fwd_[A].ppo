#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Crystal_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Crystal_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Crystal_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Crystal_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Crystal_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Crystal_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1100;
float _3456;
float _3457;
float _3458;
float _3459;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    vec4 _293 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _299 = _293.w;
    float _310 = dot(vec3(_278, _279, _280), vec3(_200, _201, _202));
    float _313 = dot(vec3(_278, _279, _280), vec3(_214, _215, _216));
    float _316 = dot(vec3(_278, _279, _280), vec3(_221, _222, _223));
    float _322 = inversesqrt(dot(vec3(_310, _313, _316), vec3(_310, _313, _316)));
    float _344 = dot(vec4(texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _364 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_310 * cbMtdParam._m0[12u].x) * _322) * _344) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_313 * cbMtdParam._m0[12u].x) * _322) * _344) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _387 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _388 = _387 * _278;
    float _389 = _387 * _279;
    float _390 = _387 * _280;
    float _391 = dot(vec4(_388, _389, _390, 0.0), vec4(_221, _222, _223, 0.0));
    float _394 = _391 - cbMtdParam._m0[13u].x;
    float _3468 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _401 = exp2(log2(1.0 - (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].y : (isnan(cbMtdParam._m0[13u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].y, 0.001000000047497451305389404296875))));
    float _417 = ((((_293.x * 4.55000019073486328125) * cbMtdParam._m0[10u].x) * _364.x) * cbMtdParam._m0[9u].x) * ((_401 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _422 = ((((_293.y * 4.55000019073486328125) * cbMtdParam._m0[10u].y) * _364.y) * cbMtdParam._m0[9u].y) * ((_401 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _427 = ((((_293.z * 4.55000019073486328125) * cbMtdParam._m0[10u].z) * _364.z) * cbMtdParam._m0[9u].z) * ((_401 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _444 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _452 = (_444.x * 2.0) + (-1.0);
    float _453 = (_444.y * 2.0) + (-1.0);
    float _454 = dot(vec2(_452, _453), vec2(_452, _453));
    float _3484 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))));
    float _462 = fma(_459, _221, fma(_453, _214, _452 * _200));
    float _465 = fma(_459, _222, fma(_453, _215, _452 * _201));
    float _468 = fma(_459, _223, fma(_453, _216, _452 * _202));
    float _472 = inversesqrt(dot(vec3(_462, _465, _468), vec3(_462, _465, _468)));
    float _473 = _472 * _462;
    float _474 = _472 * _465;
    float _476 = cbMtdParam._m0[14u].z + _444.z;
    vec4 _488 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _492 = cbMtdParam._m0[13u].w * _488.x;
    vec4 _505 = texture(sampler2D(M_Crystal_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _514 = _391 - cbMtdParam._m0[12u].w;
    float _3495 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _524 = ((cbMtdParam._m0[14u].w * _505.x) + cbMtdParam._m0[14u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[14u].x));
    float _3511 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _548 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (_473 * cbMtdParam._m0[15u].x));
    float _549 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (_474 * cbMtdParam._m0[15u].x));
    float _556 = isnan(cbInstanceData._m0[8u].x) ? _548 : (isnan(_548) ? cbInstanceData._m0[8u].x : max(_548, cbInstanceData._m0[8u].x));
    float _557 = isnan(cbInstanceData._m0[8u].y) ? _549 : (isnan(_549) ? cbInstanceData._m0[8u].y : max(_549, cbInstanceData._m0[8u].y));
    vec4 _561 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _556 : (isnan(_556) ? cbInstanceData._m0[8u].z : min(_556, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _557 : (isnan(_557) ? cbInstanceData._m0[8u].w : min(_557, cbInstanceData._m0[8u].w))));
    float _573 = _472 * _468;
    float _3542 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _574 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _575 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _576 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3569 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3580 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3591 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3602 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _580 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _596 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _601 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _603 = _601.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _779 = sqrt(((_278 * _278) + (_279 * _279)) + (_280 * _280));
        float _785 = (cbMatDynParam._m0[5u].x * _779) + cbMatDynParam._m0[5u].y;
        float _3613 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _790 = (cbMatDynParam._m0[5u].z * _779) + cbMatDynParam._m0[5u].w;
        float _3624 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) - _786)) + _786) < ((_603 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _613 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _614 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _634 = fma(_573, cbSceneParam._m0[5u].z, fma(_474, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _473));
    float _637 = fma(_573, cbSceneParam._m0[6u].z, fma(_474, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _473));
    float _640 = fma(_573, cbSceneParam._m0[7u].z, fma(_474, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _473));
    uint _653 = uint(roundEven(NORMAL.w)) * 13u;
    uint _654 = _653 + 9u;
    uint _655 = _654 + uint(cbMatDynParam._m0[0u].w);
    float _661 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_655].x;
    float _662 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_655].y;
    float _663 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_655].z;
    float _3635 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _667 = 1.0 - _580;
    float _668 = _664 * _667;
    float _669 = _665 * _667;
    float _670 = _666 * _667;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _580;
    float _676 = (_665 + (-0.039999999105930328369140625)) * _580;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _580;
    float _678 = _675 + 0.039999999105930328369140625;
    float _680 = _676 + 0.039999999105930328369140625;
    float _681 = _677 + 0.039999999105930328369140625;
    vec4 _689 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _613, cbSceneParam._m0[86u].y * _614));
    float _692 = _689.x * TEXCOORD.z;
    float _693 = dot(vec3(_473, _474, _573), vec3(_388, _389, _390));
    float _696 = _693 * 2.0;
    float _700 = (_696 * _473) - _388;
    float _701 = (_696 * _474) - _389;
    float _702 = (_696 * _573) - _390;
    float _703 = dot(vec3(_388, _389, _390), vec3(_473, _474, _573));
    float _706 = abs(_703);
    float _3668 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _707 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _713 = sqrt(_575);
    float _725 = exp2((_713 * 5.0) * log2(1.0 - (_707 * 0.999000012874603271484375))) / (4.0 - (_713 * 3.0));
    float _731 = (1.0 - _725) * ((_713 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _732 = _725 * _713;
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1099;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _824 = fma(_768, cbModelParam._m0[26u].z, fma(_764, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _760));
        float _828 = fma(_768, cbModelParam._m0[27u].z, fma(_764, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _760));
        float _832 = fma(_768, cbModelParam._m0[28u].z, fma(_764, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _760));
        float _857 = _760 + _473;
        float _858 = _764 + _474;
        float _859 = _768 + _573;
        float _869 = fma(_859, cbModelParam._m0[26u].z, fma(_858, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857)) - _824;
        float _870 = fma(_859, cbModelParam._m0[27u].z, fma(_858, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857)) - _828;
        float _871 = fma(_859, cbModelParam._m0[28u].z, fma(_858, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857)) - _832;
        float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
        float _888 = ((_875 * _869) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_824 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_875 * _870) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_828 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_875 * _871) / cbModelParam._m0[34u].z) + ((((((_832 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        float _927 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_893.x + (-0.5));
        float _929 = _927 * (_893.y + (-0.5));
        float _930 = _927 * (_893.z + (-0.5));
        float _937 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_900.x + (-0.5));
        float _939 = _937 * (_900.y + (-0.5));
        float _940 = _937 * (_900.z + (-0.5));
        float _947 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_907.x + (-0.5));
        float _949 = _947 * (_907.y + (-0.5));
        float _950 = _947 * (_907.z + (-0.5));
        float _957 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_914.x + (-0.5));
        float _959 = _957 * (_914.y + (-0.5));
        float _960 = _957 * (_914.z + (-0.5));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = _928 * 0.5;
        float _965 = _938 * 0.5;
        float _966 = _948 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _981 = (dot(vec3(_473, _474, _573), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _991 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3716 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_993 + 1.0))) + _998) * _961;
        float _1008 = _929 * 0.5;
        float _1009 = _939 * 0.5;
        float _1010 = _949 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_473, _474, _573), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3749 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1035 + 1.0))) + _1040) * _962;
        float _1050 = _930 * 0.5;
        float _1051 = _940 * 0.5;
        float _1052 = _950 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_473, _474, _573), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3782 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1077 + 1.0))) + _1082) * _963;
        _1099 = _930;
        _1101 = _929;
        _1102 = _928;
        _1103 = _940;
        _1104 = _939;
        _1105 = _938;
        _1106 = _950;
        _1107 = _949;
        _1108 = _948;
        _1109 = _963;
        _1110 = _962;
        _1111 = _961;
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1113 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
    }
    else
    {
        _1099 = _1100;
        _1101 = _1100;
        _1102 = _1100;
        _1103 = _1100;
        _1104 = _1100;
        _1105 = _1100;
        _1106 = _1100;
        _1107 = _1100;
        _1108 = _1100;
        _1109 = _1100;
        _1110 = _1100;
        _1111 = _1100;
        _1112 = 0.0;
        _1113 = 0.0;
        _1114 = 0.0;
    }
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1143 = fma(_768, cbModelParam._m0[30u].z, fma(_764, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _760));
        float _1147 = fma(_768, cbModelParam._m0[31u].z, fma(_764, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _760));
        float _1151 = fma(_768, cbModelParam._m0[32u].z, fma(_764, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _760));
        float _1174 = _760 + _473;
        float _1175 = _764 + _474;
        float _1176 = _768 + _573;
        float _1186 = fma(_1176, cbModelParam._m0[30u].z, fma(_1175, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1174)) - _1143;
        float _1187 = fma(_1176, cbModelParam._m0[31u].z, fma(_1175, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1174)) - _1147;
        float _1188 = fma(_1176, cbModelParam._m0[32u].z, fma(_1175, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1174)) - _1151;
        float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
        float _1205 = ((_1192 * _1186) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1143 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1192 * _1187) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1147 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1192 * _1188) / cbModelParam._m0[35u].z) + ((((((_1151 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        float _1242 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1209.x + (-0.5));
        float _1244 = _1242 * (_1209.y + (-0.5));
        float _1245 = _1242 * (_1209.z + (-0.5));
        float _1252 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1216.x + (-0.5));
        float _1254 = _1252 * (_1216.y + (-0.5));
        float _1255 = _1252 * (_1216.z + (-0.5));
        float _1262 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1223.x + (-0.5));
        float _1264 = _1262 * (_1223.y + (-0.5));
        float _1265 = _1262 * (_1223.z + (-0.5));
        float _1272 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1230.x + (-0.5));
        float _1274 = _1272 * (_1230.y + (-0.5));
        float _1275 = _1272 * (_1230.z + (-0.5));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = _1243 * 0.5;
        float _1280 = _1253 * 0.5;
        float _1281 = _1263 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_473, _474, _573), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3845 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1306 + 1.0))) + _1311) * _1276;
        float _1321 = _1244 * 0.5;
        float _1322 = _1254 * 0.5;
        float _1323 = _1264 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_473, _474, _573), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3878 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1348 + 1.0))) + _1353) * _1277;
        float _1363 = _1245 * 0.5;
        float _1364 = _1255 * 0.5;
        float _1365 = _1265 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_473, _474, _573), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3911 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1390 + 1.0))) + _1395) * _1278;
        _1412 = _1245;
        _1413 = _1244;
        _1414 = _1243;
        _1415 = _1255;
        _1416 = _1254;
        _1417 = _1253;
        _1418 = _1265;
        _1419 = _1264;
        _1420 = _1263;
        _1421 = _1278;
        _1422 = _1277;
        _1423 = _1276;
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
    }
    else
    {
        _1412 = _1100;
        _1413 = _1100;
        _1414 = _1100;
        _1415 = _1100;
        _1416 = _1100;
        _1417 = _1100;
        _1418 = _1100;
        _1419 = _1100;
        _1420 = _1100;
        _1421 = _1100;
        _1422 = _1100;
        _1423 = _1100;
        _1424 = 0.0;
        _1425 = 0.0;
        _1426 = 0.0;
    }
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1112)) + _1112;
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1113)) + _1113;
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1114)) + _1114;
    float _1459 = fma(_1438, cbSceneParam._m0[89u].z, fma(_1437, cbSceneParam._m0[89u].y, _1436 * cbSceneParam._m0[89u].x));
    float _1462 = fma(_1438, cbSceneParam._m0[90u].z, fma(_1437, cbSceneParam._m0[90u].y, _1436 * cbSceneParam._m0[90u].x));
    float _1465 = fma(_1438, cbSceneParam._m0[91u].z, fma(_1437, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1436));
    float _1480 = _700 * 0.5;
    float _1481 = _701 * 0.5;
    float _1482 = _702 * 0.5;
    float _1483 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1486 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1489 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1523;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1496 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1099, _1103, _1106, _1109));
        float _1500 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1101, _1104, _1107, _1110));
        float _1504 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1102, _1105, _1108, _1111));
        float _1511 = dot(vec4(cbModelParam._m0[39u]), vec4(_1480, _1481, _1482, 1.0));
        _1523 = dot(vec3(isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1511) ? 0.0 : (isnan(0.0) ? _1511 : max(0.0, _1511))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1523 = 1.0;
    }
    float _1534;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1525 = dot(vec4(cbModelParam._m0[40u]), vec4(_1480, _1481, _1482, 1.0));
        _1534 = dot(vec3(isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1525) ? 0.0 : (isnan(0.0) ? _1525 : max(0.0, _1525))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1534 = 1.0;
    }
    float _1538 = (_1534 * cbModelParam._m0[1u].x) + (_1523 * (1.0 - cbModelParam._m0[1u].x));
    float _1548 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _575);
    float _1549 = isnan(_1548) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1548 : min(cbModelParam._m0[25u].z, _1548));
    float _1629;
    float _1631;
    float _1633;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1596 = fma(_768, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _760)) + cbModelParam._m0[13u].w;
        float _1600 = fma(_768, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _760)) + cbModelParam._m0[14u].w;
        float _1604 = fma(_768, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _760)) + cbModelParam._m0[15u].w;
        float _1607 = fma(_702, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _700));
        float _1610 = fma(_702, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _700));
        float _1613 = fma(_702, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _700));
        float _1641;
        if (_1607 > 0.0)
        {
            _1641 = abs((1.0 - _1596) / _1607);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1596 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1641 = frontier_phi_19_17_ladder;
        }
        float _1816;
        if (_1610 > 0.0)
        {
            _1816 = abs((1.0 - _1600) / _1610);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1600 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1816 = frontier_phi_28_24_ladder;
        }
        float _2062;
        if (_1613 > 0.0)
        {
            _2062 = abs((1.0 - _1604) / _1613);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1604 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2062 = frontier_phi_39_35_ladder;
        }
        float _2064 = isnan(_1816) ? _1641 : (isnan(_1641) ? _1816 : min(_1641, _1816));
        float _2065 = isnan(_2062) ? _2064 : (isnan(_2064) ? _2062 : min(_2064, _2062));
        float _2069 = (_2065 * _1607) + _1596;
        float _2070 = (_2065 * _1610) + _1600;
        float _2071 = (_2065 * _1613) + _1604;
        float _2072 = _2065 * 9.9999997473787516355514526367188e-05;
        float _2074 = (-1.0) - _2072;
        float _2076 = _2072 + 1.0;
        float frontier_phi_18_39_ladder;
        float frontier_phi_18_39_ladder_1;
        float frontier_phi_18_39_ladder_2;
        if ((_2071 > _2076) || ((_2071 < _2074) || ((_2070 > _2076) || ((_2070 < _2074) || ((_2069 < _2074) || (_2069 > _2076))))))
        {
            frontier_phi_18_39_ladder = 0.0;
            frontier_phi_18_39_ladder_1 = 0.0;
            frontier_phi_18_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2221 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2071, cbModelParam._m0[9u].z, fma(_2070, cbModelParam._m0[9u].y, _2069 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2071, cbModelParam._m0[10u].z, fma(_2070, cbModelParam._m0[10u].y, _2069 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2071, cbModelParam._m0[11u].z, fma(_2070, cbModelParam._m0[11u].y, _2069 * cbModelParam._m0[11u].x))), _1549);
            frontier_phi_18_39_ladder = _2221.z * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_1 = _2221.y * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_2 = _2221.x * cbModelParam._m0[1u].y;
        }
        _1629 = frontier_phi_18_39_ladder_2;
        _1631 = frontier_phi_18_39_ladder_1;
        _1633 = frontier_phi_18_39_ladder;
    }
    else
    {
        vec4 _1617 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_700, _701, _702), _1549);
        _1629 = _1617.x * cbModelParam._m0[1u].y;
        _1631 = _1617.y * cbModelParam._m0[1u].y;
        _1633 = _1617.z * cbModelParam._m0[1u].y;
    }
    float _1637 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _575);
    float _1638 = isnan(_1637) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1637 : min(cbModelParam._m0[25u].w, _1637));
    float _1731;
    float _1733;
    float _1735;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1695 = fma(_768, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _760)) + cbModelParam._m0[21u].w;
        float _1699 = fma(_768, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _760)) + cbModelParam._m0[22u].w;
        float _1703 = fma(_768, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _760)) + cbModelParam._m0[23u].w;
        float _1706 = fma(_702, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _700));
        float _1709 = fma(_702, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _700));
        float _1712 = fma(_702, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _700));
        float _1821;
        if (_1706 > 0.0)
        {
            _1821 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1821 = frontier_phi_30_26_ladder;
        }
        float _2089;
        if (_1709 > 0.0)
        {
            _2089 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _2089 = frontier_phi_41_37_ladder;
        }
        float _2394;
        if (_1712 > 0.0)
        {
            _2394 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2394 = frontier_phi_52_47_ladder;
        }
        float _2396 = isnan(_2089) ? _1821 : (isnan(_1821) ? _2089 : min(_1821, _2089));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1706) + _1695;
        float _2402 = (_2397 * _1709) + _1699;
        float _2403 = (_2397 * _1712) + _1703;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2404;
        float _2407 = _2404 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2403 > _2407) || ((_2403 < _2405) || ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 < _2405) || (_2401 > _2407))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2403, cbModelParam._m0[17u].z, fma(_2402, cbModelParam._m0[17u].y, _2401 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2403, cbModelParam._m0[18u].z, fma(_2402, cbModelParam._m0[18u].y, _2401 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2403, cbModelParam._m0[19u].z, fma(_2402, cbModelParam._m0[19u].y, _2401 * cbModelParam._m0[19u].x))), _1638);
            frontier_phi_27_52_ladder = _2583.x * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2583.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2583.y * cbModelParam._m0[1u].z;
        }
        _1731 = frontier_phi_27_52_ladder;
        _1733 = frontier_phi_27_52_ladder_2;
        _1735 = frontier_phi_27_52_ladder_1;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_700, _701, _702), _1638);
        _1731 = _1715.x * cbModelParam._m0[1u].z;
        _1733 = _1715.y * cbModelParam._m0[1u].z;
        _1735 = _1715.z * cbModelParam._m0[1u].z;
    }
    float _1748 = (((_731 * _678) + _732) * _692) * ((cbModelParam._m0[1u].w * (_1731 - _1629)) + _1629);
    float _1750 = (((_731 * _680) + _732) * _692) * ((cbModelParam._m0[1u].w * (_1733 - _1631)) + _1631);
    float _1752 = (((_731 * _681) + _732) * _692) * ((cbModelParam._m0[1u].w * (_1735 - _1633)) + _1633);
    float _1755 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1750, cbSceneParam._m0[89u].y, _1748 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1750, cbSceneParam._m0[90u].y, _1748 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1750, cbSceneParam._m0[91u].y, _1748 * cbSceneParam._m0[91u].x));
    uvec4 _1771 = floatBitsToUint(cbInstanceData._m0[_653 + 5u]);
    uint _1773 = _1771.x * 14u;
    uint _1774 = _1773 + 13u;
    float _1779 = _692 + (-1.0);
    float _1782 = (cbLight._m0[_1774].x * _1779) + 1.0;
    float _1783 = (cbLight._m0[_1774].y * _1779) + 1.0;
    uint _1785 = _1773 + 4u;
    float _1796 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_473, _474, _573));
    float _1799 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
    uint _1800 = _1773 + 5u;
    uint _1806 = _1773 | 1u;
    float _1812 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_473, _474, _573));
    float _1815 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
    float _1880;
    float _1881;
    float _1882;
    if (_576 == 0.0)
    {
        float _4047 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _4058 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1834 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * 0.3183098733425140380859375;
        float _1836 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
        _1880 = ((cbLight._m0[_1800].x * _1815) * _1836) + ((cbLight._m0[_1785].x * _1799) * _1834);
        _1881 = ((_1815 * cbLight._m0[_1800].y) * _1836) + ((_1799 * cbLight._m0[_1785].y) * _1834);
        _1882 = ((_1815 * cbLight._m0[_1800].z) * _1836) + ((_1799 * cbLight._m0[_1785].z) * _1834);
    }
    else
    {
        float _1846 = _1796 + _576;
        float _1849 = (_576 * 2.0) + 1.0;
        float _1850 = (isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) / _1849;
        float _1857 = _1812 + _576;
        float _1859 = (isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) / _1849;
        _1880 = (((_1859 * cbLight._m0[_1800].x) * _1815) + ((_1850 * cbLight._m0[_1785].x) * _1799)) * 0.3183098733425140380859375;
        _1881 = (((_1859 * cbLight._m0[_1800].y) * _1815) + ((_1850 * cbLight._m0[_1785].y) * _1799)) * 0.3183098733425140380859375;
        _1882 = (((_1859 * cbLight._m0[_1800].z) * _1815) + ((_1850 * cbLight._m0[_1785].z) * _1799)) * 0.3183098733425140380859375;
    }
    uint _1886 = _1773 + 8u;
    float _1902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1773].w)) * _575) * 0.949999988079071044921875);
    float _1903 = _1902 * _1902;
    float _1904 = cbLight._m0[_1773].x + _388;
    float _1905 = cbLight._m0[_1773].y + _389;
    float _1906 = cbLight._m0[_1773].z + _390;
    float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
    float _1911 = _1910 * _1904;
    float _1912 = _1910 * _1905;
    float _1913 = _1910 * _1906;
    float _1914 = dot(vec3(_473, _474, _573), vec3(cbLight._m0[_1773].xyz));
    float _4079 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _1918 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _1919 = dot(vec3(_473, _474, _573), vec3(_1911, _1912, _1913));
    float _4101 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _1923 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1911, _1912, _1913));
    float _4112 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1927 = _1903 * _1903;
    float _1931 = ((_1922 * _1922) * (_1927 + (-1.0))) + 1.0;
    float _1939 = exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0);
    float _1940 = 0.959999978542327880859375 - _675;
    float _1942 = 0.959999978542327880859375 - _676;
    float _1943 = 0.959999978542327880859375 - _677;
    float _1950 = 1.0 - _1903;
    float _1961 = (0.5 / (((_1918 * ((_1917 * _1950) + _1903)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _1950) + _1903) * _1917))) * _1917;
    float _4123 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1963 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1927 / ((_1931 * _1931) * 3.141590118408203125));
    uint _1976 = _1773 + 9u;
    float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _575) * 0.949999988079071044921875);
    float _1991 = _1990 * _1990;
    float _1992 = cbLight._m0[_1806].x + _388;
    float _1993 = cbLight._m0[_1806].y + _389;
    float _1994 = cbLight._m0[_1806].z + _390;
    float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
    float _1999 = _1998 * _1992;
    float _2000 = _1998 * _1993;
    float _2001 = _1998 * _1994;
    float _2002 = dot(vec3(_473, _474, _573), vec3(cbLight._m0[_1806].xyz));
    float _4134 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2006 = dot(vec3(_473, _474, _573), vec3(_1999, _2000, _2001));
    float _4145 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2010 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_1999, _2000, _2001));
    float _4156 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2014 = _1991 * _1991;
    float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
    float _2025 = exp2(log2(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * 5.0);
    float _2032 = 1.0 - _1991;
    float _2042 = (0.5 / (((_1918 * ((_2005 * _2032) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2032) + _1991) * _2005))) * _2005;
    float _4167 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
    float _2054 = (((((_2025 * _1940) + _678) * cbLight._m0[_1976].x) * _2044) * _1815) + (((((_1939 * _1940) + _678) * cbLight._m0[_1886].x) * _1963) * _1799);
    float _2055 = (((((_2025 * _1942) + _680) * cbLight._m0[_1976].y) * _2044) * _1815) + (((((_1939 * _1942) + _680) * cbLight._m0[_1886].y) * _1963) * _1799);
    float _2056 = (((((_2025 * _1943) + _681) * cbLight._m0[_1976].z) * _2044) * _1815) + (((((_1939 * _1943) + _681) * cbLight._m0[_1886].z) * _1963) * _1799);
    float _2192;
    float _2194;
    float _2196;
    float _2198;
    float _2200;
    float _2202;
    if (_1771.y == 0u)
    {
        float _2133 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2134 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2133;
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2133;
        float _2136 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2133;
        uvec4 _2148 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2149 = _2148.x;
        uint _2160 = uint((float(_2148.y) * floor(float(uint(cbSceneParam._m0[85u].y * _614) / _2149))) + floor(float(uint(cbSceneParam._m0[85u].x * _613) / _2149)));
        float _2170 = (log2(_2136 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2171 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        uint _2174 = uint(isnan(14.0) ? _2171 : (isnan(_2171) ? 14.0 : min(_2171, 14.0)));
        uvec4 _2179 = texelFetch(g_lightClusterGridBuffer, int(((_2174 << 2u) + (_2160 << 6u)) >> 2u));
        uint _2180 = _2179.x;
        uint _2181 = _2148.z;
        float _2230;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        if (((((1u << ((_2181 >> 4u) & 15u)) + 4294967295u) & _2180) == 0u) || ((_2181 & 240u) == 0u))
        {
            _2230 = 0.0;
            _2232 = 0.0;
            _2234 = 0.0;
            _2236 = 0.0;
            _2238 = 0.0;
            _2240 = 0.0;
        }
        else
        {
            float _2231;
            float _2233;
            float _2235;
            float _2237;
            float _2239;
            float _2241;
            float _2452 = 0.0;
            float _2453 = 0.0;
            float _2454 = 0.0;
            float _2455 = 0.0;
            float _2456 = 0.0;
            float _2457 = 0.0;
            uint _2458 = 0u;
            uint _2467;
            bool _2468;
            for (;;)
            {
                _2467 = texelFetch(g_lightClassification, int((((_2174 << 5u) + (_2160 << 9u)) + (_2458 << 2u)) >> 2u)).x;
                _2468 = _2467 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2468)
                {
                    frontier_phi_61_pred = _2453;
                    frontier_phi_61_pred_1 = _2457;
                    frontier_phi_61_pred_2 = _2456;
                    frontier_phi_61_pred_3 = _2455;
                    frontier_phi_61_pred_4 = _2454;
                    frontier_phi_61_pred_5 = _2452;
                }
                else
                {
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    uint _2679;
                    _2673 = _2452;
                    _2674 = _2453;
                    _2675 = _2454;
                    _2676 = _2455;
                    _2677 = _2456;
                    _2678 = _2457;
                    _2679 = _2467;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    for (;;)
                    {
                        uint _2683 = uint(findLSB(_2679)) + (_2458 << 5u);
                        uint _2680 = (_2679 + 4294967295u) & _2679;
                        uint _2685 = _2683 * 48u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2705 = (_2683 * 48u) + 4u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        float _2719 = _2718.x;
                        float _2720 = _2718.y;
                        float _2721 = _2718.z;
                        uint _2724 = (_2683 * 48u) + 8u;
                        vec3 _2735 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x));
                        uint _2740 = (_2683 * 48u) + 12u;
                        vec2 _2748 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x));
                        float _2754 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
                        float _2755 = _2754 * _2134;
                        float _2756 = _2754 * _2135;
                        float _2757 = _2754 * _2136;
                        float _2758 = _2699.x - _2134;
                        float _2759 = _2699.y - _2135;
                        float _2760 = _2699.z - _2136;
                        float _2761 = dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760));
                        float _2764 = inversesqrt(_2761);
                        float _2765 = _2764 * _2758;
                        float _2766 = _2764 * _2759;
                        float _2767 = _2764 * _2760;
                        float _2768 = dot(vec3(_634, _637, _640), vec3(_2765, _2766, _2767));
                        float _2773 = 1.0 - (_2761 * _2699.w);
                        float _4188 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2774 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2775 = sqrt(_2761) * _2718.w;
                        float _2778 = 1.39999997615814208984375 / (_2775 + 1.39999997615814208984375);
                        float _2779 = _2778 * _2778;
                        float _2780 = 1.0 - _2779;
                        float _2782 = (_2780 * _2780) * _576;
                        float _2785 = ((_2780 * _2768) + _2779) + _2782;
                        float _2790 = _2775 * _2775;
                        float _2795 = ((isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0))) * _2774) / (((_2782 * 2.0) + 1.0) * ((_2790 * 0.699999988079071044921875) + 1.0));
                        float _2799 = dot(vec3(_2765, _2766, _2767), vec3(_2755, _2756, _2757));
                        float _4204 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2806 = dot(vec3((-0.0) - _2755, (-0.0) - _2756, (-0.0) - _2757), vec3(_634, _637, _640)) + 1.0;
                        float _2808 = (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))) * 0.5;
                        float _2815 = ((_2808 * _2808) * _2748.x) * exp2((_2748.y * 32.0) * log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))));
                        float _2817 = _576 / (_576 + 1.0);
                        float _2833 = (-0.0) - _2134;
                        float _2834 = (-0.0) - _2135;
                        float _2835 = (-0.0) - _2136;
                        float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
                        float _2840 = _2839 * _2833;
                        float _2841 = _2839 * _2834;
                        float _2842 = _2839 * _2835;
                        float _2850 = exp2(log2(1.0 / ((_2790 * 3.5) + 5.0)) * 0.25);
                        float _2851 = 1.0 - _713;
                        float _2858 = sqrt(1.0 - ((1.0 - (_2851 * _2851)) * (1.0 - (_2850 * _2850))));
                        float _2859 = _2858 * _2858;
                        float _2860 = _2859 * _2859;
                        float _2861 = _2840 + _2765;
                        float _2862 = _2841 + _2766;
                        float _2863 = _2842 + _2767;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2871 = dot(vec3(_634, _637, _640), vec3(_2840, _2841, _2842));
                        float _4220 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2874 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2875 = dot(vec3(_634, _637, _640), vec3(_2867 * _2861, _2867 * _2862, _2867 * _2863));
                        float _4231 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2878 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _2882 = ((_2878 * _2878) * (_2860 + (-1.0))) + 1.0;
                        float _2883 = _2778 * _2859;
                        float _2884 = _2883 * _2883;
                        float _2887 = ((1.0 - _2884) * _2768) + _2884;
                        float _4242 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2888 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                        float _2889 = 1.0 - _2859;
                        float _2899 = (0.5 / (((_2888 * ((_2874 * _2889) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2888 * _2889) + _2859) * _2874))) * _2888;
                        float _4253 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2910 = (((_2860 * 3.1415927410125732421875) * (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) / ((_2882 * _2882) * ((_2790 * 2.1991131305694580078125) + 3.141590118408203125))) * _2774;
                        _2591 = (((((_2719 * 0.3183098733425140380859375) * _2817) * _2815) + _2719) * _2795) + _2676;
                        _2592 = (((((_2720 * 0.3183098733425140380859375) * _2817) * _2815) + _2720) * _2795) + _2677;
                        _2593 = (((((_2721 * 0.3183098733425140380859375) * _2817) * _2815) + _2721) * _2795) + _2678;
                        _2588 = (_2910 * _2735.x) + _2673;
                        _2589 = (_2910 * _2735.y) + _2674;
                        _2590 = (_2910 * _2735.z) + _2675;
                        if (_2680 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2673 = _2588;
                            _2674 = _2589;
                            _2675 = _2590;
                            _2676 = _2591;
                            _2677 = _2592;
                            _2678 = _2593;
                            _2679 = _2680;
                        }
                    }
                    frontier_phi_61_pred = _2589;
                    frontier_phi_61_pred_1 = _2593;
                    frontier_phi_61_pred_2 = _2592;
                    frontier_phi_61_pred_3 = _2591;
                    frontier_phi_61_pred_4 = _2590;
                    frontier_phi_61_pred_5 = _2588;
                }
                _2233 = frontier_phi_61_pred;
                _2241 = frontier_phi_61_pred_1;
                _2239 = frontier_phi_61_pred_2;
                _2237 = frontier_phi_61_pred_3;
                _2235 = frontier_phi_61_pred_4;
                _2231 = frontier_phi_61_pred_5;
                uint _2459 = _2458 + 1u;
                if (_2459 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2452 = _2231;
                    _2453 = _2233;
                    _2454 = _2235;
                    _2455 = _2237;
                    _2456 = _2239;
                    _2457 = _2241;
                    _2458 = _2459;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2230 = _2231;
            _2232 = _2233;
            _2234 = _2235;
            _2236 = _2237;
            _2238 = _2239;
            _2240 = _2241;
        }
        uvec4 _2244 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2245 = _2244.z;
        uint _2247 = (_2245 >> 8u) & 15u;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        if (((4294967295u << _2247) & _2180) == 0u)
        {
            _2420 = _2230;
            _2422 = _2232;
            _2424 = _2234;
            _2426 = _2236;
            _2428 = _2238;
            _2430 = _2240;
        }
        else
        {
            float _2445 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
            float _2446 = _2445 * _2134;
            float _2447 = _2445 * _2135;
            float _2448 = _2445 * _2136;
            float frontier_phi_54_55_ladder;
            float frontier_phi_54_55_ladder_1;
            float frontier_phi_54_55_ladder_2;
            float frontier_phi_54_55_ladder_3;
            float frontier_phi_54_55_ladder_4;
            float frontier_phi_54_55_ladder_5;
            if (_2247 < ((_2245 >> 12u) & 15u))
            {
                float _2421;
                float _2423;
                float _2425;
                float _2427;
                float _2429;
                float _2431;
                float _2656 = _2230;
                float _2657 = _2232;
                float _2658 = _2234;
                float _2659 = _2236;
                float _2660 = _2238;
                float _2661 = _2240;
                uint _2662 = _2247;
                uint _2671;
                bool _2672;
                for (;;)
                {
                    _2671 = texelFetch(g_lightClassification, int((((_2174 << 5u) + (_2160 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                    _2672 = _2671 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2672)
                    {
                        frontier_phi_73_pred = _2661;
                        frontier_phi_73_pred_1 = _2660;
                        frontier_phi_73_pred_2 = _2659;
                        frontier_phi_73_pred_3 = _2658;
                        frontier_phi_73_pred_4 = _2657;
                        frontier_phi_73_pred_5 = _2656;
                    }
                    else
                    {
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _2980 = _2656;
                        float _2981 = _2657;
                        float _2982 = _2658;
                        float _2983 = _2659;
                        float _2984 = _2660;
                        float _2985 = _2661;
                        uint _2986 = _2671;
                        uint _2987;
                        vec4 _3012;
                        float _3013;
                        vec4 _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        vec3 _3043;
                        vec2 _3052;
                        vec4 _3067;
                        vec4 _3083;
                        float _3130;
                        bool _3131;
                        for (;;)
                        {
                            uint _2997 = ((_2662 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2986));
                            _2987 = (_2986 + 4294967295u) & _2986;
                            uint _2999 = _2997 * 40u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            _3013 = _3012.w;
                            uint _3015 = (_2997 * 40u) + 4u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            _3029 = _3028.x;
                            _3030 = _3028.y;
                            _3031 = _3028.z;
                            uint _3033 = (_2997 * 40u) + 8u;
                            _3043 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x));
                            uint _3045 = (_2997 * 40u) + 12u;
                            _3052 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x));
                            uint _3054 = (_2997 * 40u) + 16u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3070 = (_2997 * 40u) + 20u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3086 = (_2997 * 40u) + 24u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3105 = (_2997 * 40u) + 28u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3130 = fma(_2136, _3118.z, fma(_2135, _3118.y, _3118.x * _2134)) + _3118.w;
                            _3131 = !((fma(_2136, _3099.z, fma(_2135, _3099.y, _3099.x * _2134)) + _3099.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3131)
                            {
                                float _3157 = _3012.x - _2134;
                                float _3158 = _3012.y - _2135;
                                float _3159 = _3012.z - _2136;
                                float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                                float _3163 = inversesqrt(_3160);
                                float _3164 = _3163 * _3157;
                                float _3165 = _3163 * _3158;
                                float _3166 = _3163 * _3159;
                                float _3170 = 1.0 - (_3160 / (_3013 * _3013));
                                float _4264 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3175 = sqrt(_3160) * _3028.w;
                                float _3177 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                                float _3178 = _3177 * _3177;
                                float _3179 = 1.0 - _3178;
                                float _3181 = (_3179 * _3179) * _576;
                                float _3184 = ((_3179 * dot(vec3(_3164, _3165, _3166), vec3(_634, _637, _640))) + _3178) + _3181;
                                float _3189 = _3175 * _3175;
                                float _3194 = (fma(_2136, _3067.z, fma(_2135, _3067.y, _3067.x * _2134)) + _3067.w) / _3130;
                                float _3195 = (fma(_2136, _3083.z, fma(_2135, _3083.y, _3083.x * _2134)) + _3083.w) / _3130;
                                float _3199 = 1.0 - dot(vec2(_3194, _3195), vec2(_3194, _3195));
                                float _4280 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3201 = _3200 * (((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3171) / (((_3181 * 2.0) + 1.0) * ((_3189 * 0.699999988079071044921875) + 1.0)));
                                float _3202 = (-0.0) - _2446;
                                float _3203 = (-0.0) - _2447;
                                float _3204 = (-0.0) - _2448;
                                float _3205 = dot(vec3(_3164, _3165, _3166), vec3(_2446, _2447, _2448));
                                float _4291 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3212 = dot(vec3(_3202, _3203, _3204), vec3(_634, _637, _640)) + 1.0;
                                float _3214 = (isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * 0.5;
                                float _3221 = ((_3214 * _3214) * _3052.x) * exp2((_3052.y * 32.0) * log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))));
                                float _3223 = _576 / (_576 + 1.0);
                                float _3244 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                                float _3245 = 1.0 - _713;
                                float _3252 = sqrt(1.0 - ((1.0 - (_3245 * _3245)) * (1.0 - (_3244 * _3244))));
                                float _3253 = _3252 * _3252;
                                float _3254 = _3253 * _3253;
                                float _3255 = _3164 - _2446;
                                float _3256 = _3165 - _2447;
                                float _3257 = _3166 - _2448;
                                float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                                float _3265 = dot(vec3(_634, _637, _640), vec3(_3202, _3203, _3204));
                                float _4307 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3269 = dot(vec3(_634, _637, _640), vec3(_3261 * _3255, _3261 * _3256, _3261 * _3257));
                                float _4318 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3276 = ((_3272 * _3272) * (_3254 + (-1.0))) + 1.0;
                                float _3277 = _3177 * _3253;
                                float _3278 = _3277 * _3277;
                                float _3284 = ((1.0 - _3278) * dot(vec3(_634, _637, _640), vec3(_3164, _3165, _3166))) + _3278;
                                float _4329 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3286 = 1.0 - _3253;
                                float _3296 = (0.5 / (((_3285 * ((_3268 * _3286) + _3253)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3253) * _3268))) * _3285;
                                float _4340 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3306 = (_3200 * _3171) * (((_3254 * 3.1415927410125732421875) * (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) / ((_3276 * _3276) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3306 * _3043.y;
                                frontier_phi_82_pred_1 = _3306 * _3043.x;
                                frontier_phi_82_pred_2 = _3306 * _3043.z;
                                frontier_phi_82_pred_3 = ((((_3031 * 0.3183098733425140380859375) * _3223) * _3221) + _3031) * _3201;
                                frontier_phi_82_pred_4 = ((((_3030 * 0.3183098733425140380859375) * _3223) * _3221) + _3030) * _3201;
                                frontier_phi_82_pred_5 = ((((_3029 * 0.3183098733425140380859375) * _3223) * _3221) + _3029) * _3201;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3311 = frontier_phi_82_pred;
                            _3310 = frontier_phi_82_pred_1;
                            _3312 = frontier_phi_82_pred_2;
                            _3315 = frontier_phi_82_pred_3;
                            _3314 = frontier_phi_82_pred_4;
                            _3313 = frontier_phi_82_pred_5;
                            _2961 = _3313 + _2983;
                            _2962 = _3314 + _2984;
                            _2963 = _3315 + _2985;
                            _2958 = _3310 + _2980;
                            _2959 = _3311 + _2981;
                            _2960 = _3312 + _2982;
                            if (_2987 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2980 = _2958;
                                _2981 = _2959;
                                _2982 = _2960;
                                _2983 = _2961;
                                _2984 = _2962;
                                _2985 = _2963;
                                _2986 = _2987;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _2963;
                        frontier_phi_73_pred_1 = _2962;
                        frontier_phi_73_pred_2 = _2961;
                        frontier_phi_73_pred_3 = _2960;
                        frontier_phi_73_pred_4 = _2959;
                        frontier_phi_73_pred_5 = _2958;
                    }
                    _2431 = frontier_phi_73_pred;
                    _2429 = frontier_phi_73_pred_1;
                    _2427 = frontier_phi_73_pred_2;
                    _2425 = frontier_phi_73_pred_3;
                    _2423 = frontier_phi_73_pred_4;
                    _2421 = frontier_phi_73_pred_5;
                    uint _2663 = _2662 + 1u;
                    if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2656 = _2421;
                        _2657 = _2423;
                        _2658 = _2425;
                        _2659 = _2427;
                        _2660 = _2429;
                        _2661 = _2431;
                        _2662 = _2663;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_54_55_ladder = _2431;
                frontier_phi_54_55_ladder_1 = _2429;
                frontier_phi_54_55_ladder_2 = _2427;
                frontier_phi_54_55_ladder_3 = _2425;
                frontier_phi_54_55_ladder_4 = _2423;
                frontier_phi_54_55_ladder_5 = _2421;
            }
            else
            {
                frontier_phi_54_55_ladder = _2240;
                frontier_phi_54_55_ladder_1 = _2238;
                frontier_phi_54_55_ladder_2 = _2236;
                frontier_phi_54_55_ladder_3 = _2234;
                frontier_phi_54_55_ladder_4 = _2232;
                frontier_phi_54_55_ladder_5 = _2230;
            }
            _2420 = frontier_phi_54_55_ladder_5;
            _2422 = frontier_phi_54_55_ladder_4;
            _2424 = frontier_phi_54_55_ladder_3;
            _2426 = frontier_phi_54_55_ladder_2;
            _2428 = frontier_phi_54_55_ladder_1;
            _2430 = frontier_phi_54_55_ladder;
        }
        float _2435 = isnan(1.0) ? _692 : (isnan(_692) ? 1.0 : min(_692, 1.0));
        _2192 = (_2435 * _2426) + _1880;
        _2194 = (_2435 * _2428) + _1881;
        _2196 = (_2435 * _2430) + _1882;
        _2198 = ((_2420 * _678) * _2435) + _2054;
        _2200 = ((_2422 * _680) * _2435) + _2055;
        _2202 = ((_2424 * _681) * _2435) + _2056;
    }
    else
    {
        _2192 = _1880;
        _2194 = _1881;
        _2196 = _1882;
        _2198 = _2054;
        _2200 = _2055;
        _2202 = _2056;
    }
    float _2315;
    float _2316;
    float _2317;
    if (_576 > 0.0)
    {
        uint _2251 = _1773 + 4u;
        float _2257 = (-0.0) - _388;
        float _2258 = (-0.0) - _389;
        float _2259 = (-0.0) - _390;
        float _2260 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_2257, _2258, _2259));
        float _4356 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2264 = _703 + 1.0;
        float _2266 = (isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0))) * 0.5;
        float _2271 = _2266 * _2266;
        float _2272 = _2271 * exp2(log2(isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 32.0);
        float _2274 = _576 / (_576 + 1.0);
        float _2275 = isnan(_1782) ? 1.0 : (isnan(1.0) ? _1782 : min(1.0, _1782));
        uint _2285 = _1773 + 5u;
        float _2291 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_2257, _2258, _2259));
        float _4377 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2298 = _2271 * exp2(log2(isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 32.0);
        float _2299 = isnan(_1783) ? 1.0 : (isnan(1.0) ? _1783 : min(1.0, _1783));
        _2315 = ((((_2298 * cbLight._m0[_2285].x) * _2274) * _2299) + (((_2272 * cbLight._m0[_2251].x) * _2274) * _2275)) * 0.3183098733425140380859375;
        _2316 = ((((_2298 * cbLight._m0[_2285].y) * _2274) * _2299) + (((_2272 * cbLight._m0[_2251].y) * _2274) * _2275)) * 0.3183098733425140380859375;
        _2317 = ((((_2298 * cbLight._m0[_2285].z) * _2274) * _2299) + (((_2272 * cbLight._m0[_2251].z) * _2274) * _2275)) * 0.3183098733425140380859375;
    }
    else
    {
        _2315 = 0.0;
        _2316 = 0.0;
        _2317 = 0.0;
    }
    float _4393 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4404 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4415 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4426 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _2323 = 0.959999978542327880859375 - (_580 * 0.959999978542327880859375);
    float _2334 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * ((_2192 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _692)) + _2315);
    float _2335 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * ((_2194 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _692)) + _2316);
    float _2336 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * ((_2196 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _692)) + _2317);
    float _2340 = _2323 - (exp2(log2(1.0 - _707) * 5.0) * _2323);
    float _2351 = (_2334 + ((_2198 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1538)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _561.x) * _2340) - _2334) * _525);
    float _2353 = (_2335 + ((_2200 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1538)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _561.y) * _2340) - _2335) * _525);
    float _2355 = (_2336 + ((_2202 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1538)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _561.z) * _2340) - _2336) * _525);
    float _2360 = cbInstanceData._m0[_653 + 6u].w * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)));
    float _2365 = _613 / cbSceneParam._m0[86u].x;
    float _2366 = _614 / cbSceneParam._m0[86u].y;
    vec4 _2380 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2365, _2366, (log2((isnan(cbSceneParam._m0[77u].w) ? _596 : (isnan(_596) ? cbSceneParam._m0[77u].w : min(_596, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2382 = _2380.x;
    float _2383 = _2380.y;
    float _2384 = _2380.z;
    float _2385 = _2380.w;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    if (_596 > cbSceneParam._m0[78u].w)
    {
        float _2473 = isnan(_596) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _596 : min(cbSceneParam._m0[80u].w, _596));
        float _2474 = _2473 / _596;
        float _2485 = _2474 * _278;
        float _2486 = _279 * _2474;
        float _2487 = (-0.0) - _2486;
        float _2488 = _2474 * _280;
        float _2490 = (cbSceneParam._m0[77u].w * _2487) / _2473;
        float _2491 = _2490 + cbSceneParam._m0[79u].w;
        float _2492 = cbSceneParam._m0[79u].w - _2486;
        float _2498 = sqrt(((_2485 * _2485) + (_2486 * _2486)) + (_2488 * _2488));
        float _2501 = (1.0 - (cbSceneParam._m0[77u].w / _2473)) * _2498;
        float _2506 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2508 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2915;
        if (abs((_2487 - _2490) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2915 = ((((_2491 > 0.0) ? exp2(_2506 * _2491) : (2.0 - exp2(_2508 * _2491))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2501;
        }
        else
        {
            float _2613 = 1.0 / cbSceneParam._m0[80u].x;
            float _2614 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : max(_2491, _2492));
            float _2615 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : min(_2491, _2492));
            float _2624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : min(_2614, 0.0));
            float _2625 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : min(_2615, 0.0));
            _2915 = ((abs(_2498 / _2487) * cbSceneParam._m0[80u].y) * ((((_2624 - _2625) * 2.0) - ((exp2(_2506 * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0)))) - exp2(_2506 * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0))))) * _2613)) - ((exp2(_2508 * _2624) - exp2(_2508 * _2625)) * _2613))) + (_2501 * cbSceneParam._m0[80u].z);
        }
        vec4 _2917 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2365, _2366, 1.0), 0.0);
        float _2926 = exp2((_2915 * (-1.44269502162933349609375)) * (1.0 - _2917.w));
        float _2927 = log2(_2926);
        float _2943 = log2(_2385);
        _2510 = (exp2(_2943 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].x)) * _2917.x) / cbSceneParam._m0[78u].x)) + _2382;
        _2512 = (exp2(_2943 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].y)) * _2917.y) / cbSceneParam._m0[78u].y)) + _2383;
        _2514 = (exp2(_2943 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].z)) * _2917.z) / cbSceneParam._m0[78u].z)) + _2384;
        _2516 = _2926 * _2385;
    }
    else
    {
        _2510 = _2382;
        _2512 = _2383;
        _2514 = _2384;
        _2516 = _2385;
    }
    bool _2953;
    vec4 _2525;
    vec4 _2547;
    float _2549;
    float _2553;
    float _2554;
    float _2555;
    float _2556;
    bool _2566;
    for (;;)
    {
        _2525 = cbMatDynParam._m0[0u];
        float _2527 = roundEven(_2525.y);
        bool _2528 = _2527 == 3.0;
        float _2529 = log2(_2516);
        float _2536 = exp2(_2529 * cbSceneParam._m0[78u].x) * _2351;
        float _2537 = exp2(_2529 * cbSceneParam._m0[78u].y) * _2353;
        float _2538 = exp2(_2529 * cbSceneParam._m0[78u].z) * _2355;
        float _2545 = _603 + (-0.5);
        _2547 = cbMtdParam._m0[1u];
        _2549 = _2547.y * _2545;
        float _2552 = (_2527 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2553 = _2552 * (_2528 ? _2536 : (_2536 + (cbSceneParam._m0[72u].w * _2510)));
        _2554 = _2552 * (_2528 ? _2537 : (_2537 + (cbSceneParam._m0[72u].w * _2512)));
        _2555 = _2552 * (_2528 ? _2538 : (_2538 + (cbSceneParam._m0[72u].w * _2514)));
        _2556 = _2545 * 0.999000012874603271484375;
        _2566 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2566)
        {
            if ((cbInstanceData._m0[_653 + 7u].x + _2556) < 0.5)
            {
                _2953 = true;
                break;
            }
        }
        uint _2648 = _654 + uint(_2525.w);
        if ((cbInstanceData._m0[_2648].w < 1.0) && ((cbInstanceData._m0[_2648].w + _2556) < 0.5))
        {
            _2953 = true;
            break;
        }
        if ((_2549 + _299) < _2547.x)
        {
            _2953 = true;
            break;
        }
        _2953 = false;
        break;
    }
    float _2971;
    if (_2953)
    {
        discard_state = true;
        _2971 = 0.0;
    }
    else
    {
        _2971 = _2360;
    }
    SV_Target.x = _2553;
    SV_Target.y = _2554;
    SV_Target.z = _2555;
    SV_Target.w = _2971;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2360;
    discard_exit();
}


