#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _923;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _238 = texture(sampler2D(P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _238.x;
    float _242 = _238.y;
    float _243 = _238.z;
    float _244 = _238.w;
    vec4 _260 = texture(sampler2D(P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _263 = _260.x + cbMtdParam._m0[9u].x;
    vec4 _275 = texture(sampler2D(P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _279 = _275.z;
    float _283 = (_275.x * 2.0) + (-1.0);
    float _285 = (_275.y * 2.0) + (-1.0);
    float _286 = dot(vec2(_283, _285), vec2(_283, _285));
    float _3324 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _292 = sqrt(1.0 - (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))));
    vec4 _305 = texture(sampler2D(P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _315 = fma(_292, _222, fma(_285, _214 * TANGENT.x, (_200 * _192) * _283));
    float _318 = fma(_292, _223, fma(_285, _214 * TANGENT.y, (_200 * _193) * _283));
    float _321 = fma(_292, _224, fma(_285, _214 * TANGENT.z, (_200 * _194) * _283));
    float _325 = inversesqrt(dot(vec3(_315, _318, _321), vec3(_315, _318, _321)));
    float _326 = _325 * _315;
    float _327 = _325 * _318;
    float _328 = _325 * _321;
    float _3335 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _329 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _3346 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _330 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _3357 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3368 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3379 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3390 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _334 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _350 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _392 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _402 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _392);
    float _403 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _392);
    float _404 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _392);
    float _408 = inversesqrt(dot(vec3(_402, _403, _404), vec3(_402, _403, _404)));
    float _409 = _402 * _408;
    float _410 = _403 * _408;
    float _411 = _404 * _408;
    float _417 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _418 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _420 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _422 = _420.w;
    float _443 = fma(_328, cbSceneParam._m0[5u].z, fma(_327, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _326));
    float _446 = fma(_328, cbSceneParam._m0[6u].z, fma(_327, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _326));
    float _449 = fma(_328, cbSceneParam._m0[7u].z, fma(_327, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _326));
    vec4 _451 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _462 = (((_451.y - _330) + (_451.w * _330)) * cbMtdParam._m0[3u].x) + _330;
    uint _475 = uint(roundEven(NORMAL.w)) * 13u;
    uint _477 = _475 + 9u;
    uint _478 = _477 + uint(cbMatDynParam._m0[0u].w);
    float _484 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * cbInstanceData._m0[_478].x;
    float _485 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0)))) * cbInstanceData._m0[_478].y;
    float _486 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_478].z;
    float _3401 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    vec4 _490 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _495 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _506 = (((_495.x - _334) + (_495.w * _334)) * cbMtdParam._m0[3u].x) + _334;
    float _519 = (cbMtdParam._m0[3u].x * (((_487 * _422) - _487) + _490.x)) + _487;
    float _520 = (cbMtdParam._m0[3u].x * (((_488 * _422) - _488) + _490.y)) + _488;
    float _521 = (cbMtdParam._m0[3u].x * (((_489 * _422) - _489) + _490.z)) + _489;
    float _522 = 1.0 - _506;
    float _523 = _522 * _519;
    float _524 = _522 * _520;
    float _525 = _522 * _521;
    float _530 = (_519 + (-0.039999999105930328369140625)) * _506;
    float _531 = (_520 + (-0.039999999105930328369140625)) * _506;
    float _532 = (_521 + (-0.039999999105930328369140625)) * _506;
    float _533 = _530 + 0.039999999105930328369140625;
    float _535 = _531 + 0.039999999105930328369140625;
    float _536 = _532 + 0.039999999105930328369140625;
    vec4 _545 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _417, cbSceneParam._m0[86u].y * _418));
    float _548 = _545.x * TEXCOORD_4;
    float _549 = dot(vec3(_326, _327, _328), vec3(_409, _410, _411));
    float _552 = _549 * 2.0;
    float _556 = (_552 * _326) - _409;
    float _557 = (_552 * _327) - _410;
    float _558 = (_552 * _328) - _411;
    float _562 = abs(dot(vec3(_409, _410, _411), vec3(_326, _327, _328)));
    float _3434 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _564 = sqrt(_462);
    float _577 = exp2((_564 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_564 * 3.0));
    float _583 = (1.0 - _577) * ((_564 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _584 = _577 * _564;
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _922;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _647 = fma(_620, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612));
        float _651 = fma(_620, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612));
        float _655 = fma(_620, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612));
        float _680 = _612 + _326;
        float _681 = _616 + _327;
        float _682 = _620 + _328;
        float _692 = fma(_682, cbModelParam._m0[26u].z, fma(_681, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _680)) - _647;
        float _693 = fma(_682, cbModelParam._m0[27u].z, fma(_681, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _680)) - _651;
        float _694 = fma(_682, cbModelParam._m0[28u].z, fma(_681, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _680)) - _655;
        float _698 = inversesqrt(dot(vec3(_692, _693, _694), vec3(_692, _693, _694)));
        float _711 = ((_698 * _692) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_647 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _712 = ((_698 * _693) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_651 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _713 = ((_698 * _694) / cbModelParam._m0[34u].z) + ((((((_655 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_711, _712, _713), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_711, _712, _713), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_711, _712, _713), 0.0);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_711, _712, _713), 0.0);
        float _750 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_716.x + (-0.5));
        float _752 = _750 * (_716.y + (-0.5));
        float _753 = _750 * (_716.z + (-0.5));
        float _760 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_723.x + (-0.5));
        float _762 = _760 * (_723.y + (-0.5));
        float _763 = _760 * (_723.z + (-0.5));
        float _770 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_730.x + (-0.5));
        float _772 = _770 * (_730.y + (-0.5));
        float _773 = _770 * (_730.z + (-0.5));
        float _780 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _781 = _780 * (_737.x + (-0.5));
        float _782 = _780 * (_737.y + (-0.5));
        float _783 = _780 * (_737.z + (-0.5));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = _751 * 0.5;
        float _788 = _761 * 0.5;
        float _789 = _771 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _804 = (dot(vec3(_326, _327, _328), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _814 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3482 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_816 + 1.0))) + _821) * _784;
        float _831 = _752 * 0.5;
        float _832 = _762 * 0.5;
        float _833 = _772 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_326, _327, _328), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3515 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_858 + 1.0))) + _863) * _785;
        float _873 = _753 * 0.5;
        float _874 = _763 * 0.5;
        float _875 = _773 * 0.5;
        float _876 = dot(vec3(_873, _874, _875), vec3(_873, _874, _875));
        float _881 = (_876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_876);
        float _889 = (dot(vec3(_326, _327, _328), vec3(_881 * _873, _881 * _874, _881 * _875)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _898 = sqrt(((_874 * _874) + (_873 * _873)) + (_875 * _875)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3548 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_900 + 1.0))) + _905) * _786;
        _922 = _753;
        _924 = _752;
        _925 = _751;
        _926 = _763;
        _927 = _762;
        _928 = _761;
        _929 = _773;
        _930 = _772;
        _931 = _771;
        _932 = _786;
        _933 = _785;
        _934 = _784;
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
    }
    else
    {
        _922 = _923;
        _924 = _923;
        _925 = _923;
        _926 = _923;
        _927 = _923;
        _928 = _923;
        _929 = _923;
        _930 = _923;
        _931 = _923;
        _932 = _923;
        _933 = _923;
        _934 = _923;
        _935 = 0.0;
        _936 = 0.0;
        _937 = 0.0;
    }
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _963 = fma(_620, cbModelParam._m0[30u].z, fma(_616, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _612));
        float _967 = fma(_620, cbModelParam._m0[31u].z, fma(_616, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _612));
        float _971 = fma(_620, cbModelParam._m0[32u].z, fma(_616, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _612));
        float _994 = _612 + _326;
        float _995 = _616 + _327;
        float _996 = _620 + _328;
        float _1006 = fma(_996, cbModelParam._m0[30u].z, fma(_995, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _994)) - _963;
        float _1007 = fma(_996, cbModelParam._m0[31u].z, fma(_995, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _994)) - _967;
        float _1008 = fma(_996, cbModelParam._m0[32u].z, fma(_995, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _994)) - _971;
        float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
        float _1025 = ((_1012 * _1006) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_963 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1012 * _1007) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_967 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1012 * _1008) / cbModelParam._m0[35u].z) + ((((((_971 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        float _1062 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1029.x + (-0.5));
        float _1064 = _1062 * (_1029.y + (-0.5));
        float _1065 = _1062 * (_1029.z + (-0.5));
        float _1072 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1036.x + (-0.5));
        float _1074 = _1072 * (_1036.y + (-0.5));
        float _1075 = _1072 * (_1036.z + (-0.5));
        float _1082 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1043.x + (-0.5));
        float _1084 = _1082 * (_1043.y + (-0.5));
        float _1085 = _1082 * (_1043.z + (-0.5));
        float _1092 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1050.x + (-0.5));
        float _1094 = _1092 * (_1050.y + (-0.5));
        float _1095 = _1092 * (_1050.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_326, _327, _328), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3611 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1126 + 1.0))) + _1131) * _1096;
        float _1141 = _1064 * 0.5;
        float _1142 = _1074 * 0.5;
        float _1143 = _1084 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_326, _327, _328), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3644 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1168 + 1.0))) + _1173) * _1097;
        float _1183 = _1065 * 0.5;
        float _1184 = _1075 * 0.5;
        float _1185 = _1085 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_326, _327, _328), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3677 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1210 + 1.0))) + _1215) * _1098;
        _1232 = _1065;
        _1233 = _1064;
        _1234 = _1063;
        _1235 = _1075;
        _1236 = _1074;
        _1237 = _1073;
        _1238 = _1085;
        _1239 = _1084;
        _1240 = _1083;
        _1241 = _1098;
        _1242 = _1097;
        _1243 = _1096;
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
    }
    else
    {
        _1232 = _923;
        _1233 = _923;
        _1234 = _923;
        _1235 = _923;
        _1236 = _923;
        _1237 = _923;
        _1238 = _923;
        _1239 = _923;
        _1240 = _923;
        _1241 = _923;
        _1242 = _923;
        _1243 = _923;
        _1244 = 0.0;
        _1245 = 0.0;
        _1246 = 0.0;
    }
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _935)) + _935;
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _936)) + _936;
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _937)) + _937;
    float _1279 = fma(_1258, cbSceneParam._m0[89u].z, fma(_1257, cbSceneParam._m0[89u].y, _1256 * cbSceneParam._m0[89u].x));
    float _1282 = fma(_1258, cbSceneParam._m0[90u].z, fma(_1257, cbSceneParam._m0[90u].y, _1256 * cbSceneParam._m0[90u].x));
    float _1285 = fma(_1258, cbSceneParam._m0[91u].z, fma(_1257, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1256));
    float _1300 = _556 * 0.5;
    float _1301 = _557 * 0.5;
    float _1302 = _558 * 0.5;
    float _1303 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1306 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1309 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1343;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1316 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_922, _926, _929, _932));
        float _1320 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_924, _927, _930, _933));
        float _1324 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_925, _928, _931, _934));
        float _1331 = dot(vec4(cbModelParam._m0[39u]), vec4(_1300, _1301, _1302, 1.0));
        _1343 = dot(vec3(isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1343 = 1.0;
    }
    float _1354;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1345 = dot(vec4(cbModelParam._m0[40u]), vec4(_1300, _1301, _1302, 1.0));
        _1354 = dot(vec3(isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1345) ? 0.0 : (isnan(0.0) ? _1345 : max(0.0, _1345))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1354 = 1.0;
    }
    float _1358 = (_1354 * cbModelParam._m0[1u].x) + (_1343 * (1.0 - cbModelParam._m0[1u].x));
    float _1368 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _462);
    float _1369 = isnan(_1368) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1368 : min(cbModelParam._m0[25u].z, _1368));
    float _1451;
    float _1453;
    float _1455;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1418 = fma(_620, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _612)) + cbModelParam._m0[13u].w;
        float _1422 = fma(_620, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _612)) + cbModelParam._m0[14u].w;
        float _1426 = fma(_620, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _612)) + cbModelParam._m0[15u].w;
        float _1429 = fma(_558, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556));
        float _1432 = fma(_558, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556));
        float _1435 = fma(_558, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556));
        float _1463;
        if (_1429 > 0.0)
        {
            _1463 = abs((1.0 - _1418) / _1429);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1418 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1463 = frontier_phi_16_14_ladder;
        }
        float _1692;
        if (_1432 > 0.0)
        {
            _1692 = abs((1.0 - _1422) / _1432);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1422 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1692 = frontier_phi_25_21_ladder;
        }
        float _1949;
        if (_1435 > 0.0)
        {
            _1949 = abs((1.0 - _1426) / _1435);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1426 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1949 = frontier_phi_37_32_ladder;
        }
        float _1951 = isnan(_1692) ? _1463 : (isnan(_1463) ? _1692 : min(_1463, _1692));
        float _1952 = isnan(_1949) ? _1951 : (isnan(_1951) ? _1949 : min(_1951, _1949));
        float _1956 = (_1952 * _1429) + _1418;
        float _1957 = (_1952 * _1432) + _1422;
        float _1958 = (_1952 * _1435) + _1426;
        float _1959 = _1952 * 9.9999997473787516355514526367188e-05;
        float _1961 = (-1.0) - _1959;
        float _1963 = _1959 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1958 > _1963) || ((_1958 < _1961) || ((_1957 > _1963) || ((_1957 < _1961) || ((_1956 < _1961) || (_1956 > _1963))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2086 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1958, cbModelParam._m0[9u].z, fma(_1957, cbModelParam._m0[9u].y, _1956 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1958, cbModelParam._m0[10u].z, fma(_1957, cbModelParam._m0[10u].y, _1956 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1958, cbModelParam._m0[11u].z, fma(_1957, cbModelParam._m0[11u].y, _1956 * cbModelParam._m0[11u].x))), _1369);
            frontier_phi_15_37_ladder = _2086.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2086.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2086.x * cbModelParam._m0[1u].y;
        }
        _1451 = frontier_phi_15_37_ladder_2;
        _1453 = frontier_phi_15_37_ladder_1;
        _1455 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_556, _557, _558), _1369);
        _1451 = _1439.x * cbModelParam._m0[1u].y;
        _1453 = _1439.y * cbModelParam._m0[1u].y;
        _1455 = _1439.z * cbModelParam._m0[1u].y;
    }
    float _1459 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _462);
    float _1460 = isnan(_1459) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1459 : min(cbModelParam._m0[25u].w, _1459));
    float _1553;
    float _1555;
    float _1557;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1517 = fma(_620, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _612)) + cbModelParam._m0[21u].w;
        float _1521 = fma(_620, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _612)) + cbModelParam._m0[22u].w;
        float _1525 = fma(_620, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _612)) + cbModelParam._m0[23u].w;
        float _1528 = fma(_558, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556));
        float _1531 = fma(_558, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556));
        float _1534 = fma(_558, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556));
        float _1697;
        if (_1528 > 0.0)
        {
            _1697 = abs((1.0 - _1517) / _1528);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1517 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1697 = frontier_phi_27_23_ladder;
        }
        float _1976;
        if (_1531 > 0.0)
        {
            _1976 = abs((1.0 - _1521) / _1531);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1521 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1976 = frontier_phi_39_34_ladder;
        }
        float _2189;
        if (_1534 > 0.0)
        {
            _2189 = abs((1.0 - _1525) / _1534);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1525 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2189 = frontier_phi_48_45_ladder;
        }
        float _2191 = isnan(_1976) ? _1697 : (isnan(_1697) ? _1976 : min(_1697, _1976));
        float _2192 = isnan(_2189) ? _2191 : (isnan(_2191) ? _2189 : min(_2191, _2189));
        float _2196 = (_2192 * _1528) + _1517;
        float _2197 = (_2192 * _1531) + _1521;
        float _2198 = (_2192 * _1534) + _1525;
        float _2199 = _2192 * 9.9999997473787516355514526367188e-05;
        float _2200 = (-1.0) - _2199;
        float _2202 = _2199 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2198 > _2202) || ((_2198 < _2200) || ((_2197 > _2202) || ((_2197 < _2200) || ((_2196 < _2200) || (_2196 > _2202))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2198, cbModelParam._m0[17u].z, fma(_2197, cbModelParam._m0[17u].y, _2196 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2198, cbModelParam._m0[18u].z, fma(_2197, cbModelParam._m0[18u].y, _2196 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2198, cbModelParam._m0[19u].z, fma(_2197, cbModelParam._m0[19u].y, _2196 * cbModelParam._m0[19u].x))), _1460);
            frontier_phi_24_48_ladder = _2427.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2427.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2427.x * cbModelParam._m0[1u].z;
        }
        _1553 = frontier_phi_24_48_ladder_2;
        _1555 = frontier_phi_24_48_ladder_1;
        _1557 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_556, _557, _558), _1460);
        _1553 = _1537.x * cbModelParam._m0[1u].z;
        _1555 = _1537.y * cbModelParam._m0[1u].z;
        _1557 = _1537.z * cbModelParam._m0[1u].z;
    }
    float _1570 = (((_583 * _533) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1553 - _1451)) + _1451);
    float _1572 = (((_583 * _535) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1555 - _1453)) + _1453);
    float _1574 = (((_583 * _536) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1557 - _1455)) + _1455);
    float _1577 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1572, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1580 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1572, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1583 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1572, cbSceneParam._m0[91u].y, _1570 * cbSceneParam._m0[91u].x));
    vec4 _1591 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_417, _418));
    float _1593 = _1591.w;
    float _1605 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1593);
    float _1606 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1593);
    float _1607 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1593);
    uvec4 _1611 = floatBitsToUint(cbInstanceData._m0[_475 + 5u]);
    uint _1613 = _1611.x * 14u;
    uint _1614 = _1613 + 13u;
    float _1621 = _548 + (-1.0);
    float _1626 = (cbLight._m0[_1614].x * _1621) + 1.0;
    float _1627 = (cbLight._m0[_1614].y * _1621) + 1.0;
    float _1628 = (cbLight._m0[_1614].z * _1621) + 1.0;
    float _1629 = (cbLight._m0[_1614].w * _1621) + 1.0;
    uint _1630 = _1613 + 5u;
    float _1636 = isnan(1.0) ? _1627 : (isnan(_1627) ? 1.0 : min(_1627, 1.0));
    uint _1640 = _1613 + 4u;
    float _1650 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
    uint _1654 = _1613 | 1u;
    float _1665 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_326, _327, _328));
    float _1668 = dot(vec3(cbLight._m0[_1654].xyz), vec3(_326, _327, _328));
    float _3813 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _3824 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1673 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.3183098733425140380859375;
    float _1675 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.3183098733425140380859375;
    float _1682 = ((cbLight._m0[_1630].x * _1636) * _1675) + (((cbLight._m0[_1640].x * _1605) * _1650) * _1673);
    float _1683 = ((_1636 * cbLight._m0[_1630].y) * _1675) + (((cbLight._m0[_1640].y * _1606) * _1650) * _1673);
    float _1684 = ((_1636 * cbLight._m0[_1630].z) * _1675) + (((cbLight._m0[_1640].z * _1607) * _1650) * _1673);
    uvec4 _1689 = floatBitsToUint(cbLight._m0[_1613 + 12u]);
    bool _1691 = _1689.x == 0u;
    float _1702;
    float _1704;
    float _1706;
    if (_1691)
    {
        _1702 = _1682;
        _1704 = _1683;
        _1706 = _1684;
    }
    else
    {
        uint _1710 = _1613 + 6u;
        float _1726 = (dot(vec3(cbLight._m0[_1613 + 2u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1727 = _1726 * _1726;
        float _3835 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1729 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
        _1702 = (((cbLight._m0[_1710].x * 0.3183098733425140380859375) * _1728) * _1729) + _1682;
        _1704 = (((cbLight._m0[_1710].y * 0.3183098733425140380859375) * _1728) * _1729) + _1683;
        _1706 = (((cbLight._m0[_1710].z * 0.3183098733425140380859375) * _1728) * _1729) + _1684;
    }
    bool _1709 = _1689.y == 0u;
    float _1747;
    float _1749;
    float _1751;
    if (_1709)
    {
        _1747 = _1702;
        _1749 = _1704;
        _1751 = _1706;
    }
    else
    {
        uint _1920 = _1613 + 7u;
        float _1936 = (dot(vec3(cbLight._m0[_1613 + 3u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1937 = _1936 * _1936;
        float _3851 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1938 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1939 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
        _1747 = (((cbLight._m0[_1920].x * 0.3183098733425140380859375) * _1938) * _1939) + _1702;
        _1749 = (((cbLight._m0[_1920].y * 0.3183098733425140380859375) * _1938) * _1939) + _1704;
        _1751 = (((cbLight._m0[_1920].z * 0.3183098733425140380859375) * _1938) * _1939) + _1706;
    }
    uint _1754 = _1613 + 8u;
    float _1767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1613].w)) * _462) * 0.949999988079071044921875);
    float _1768 = _1767 * _1767;
    float _1769 = cbLight._m0[_1613].x + _409;
    float _1770 = cbLight._m0[_1613].y + _410;
    float _1771 = cbLight._m0[_1613].z + _411;
    float _1775 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
    float _1776 = _1775 * _1769;
    float _1777 = _1775 * _1770;
    float _1778 = _1775 * _1771;
    float _1779 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1613].xyz));
    float _3867 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1782 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _1783 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _1784 = dot(vec3(_326, _327, _328), vec3(_1776, _1777, _1778));
    float _3889 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1788 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_1776, _1777, _1778));
    float _3900 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1792 = _1768 * _1768;
    float _1796 = ((_1787 * _1787) * (_1792 + (-1.0))) + 1.0;
    float _1804 = exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0);
    float _1805 = 0.959999978542327880859375 - _530;
    float _1807 = 0.959999978542327880859375 - _531;
    float _1808 = 0.959999978542327880859375 - _532;
    float _1815 = 1.0 - _1768;
    float _1826 = (0.5 / (((_1783 * ((_1782 * _1815) + _1768)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _1815) + _1768) * _1782))) * _1782;
    float _3911 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1828 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1792 / ((_1796 * _1796) * 3.141590118408203125));
    uint _1842 = _1613 + 9u;
    float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1654].w)) * _462) * 0.949999988079071044921875);
    float _1854 = _1853 * _1853;
    float _1855 = cbLight._m0[_1654].x + _409;
    float _1856 = cbLight._m0[_1654].y + _410;
    float _1857 = cbLight._m0[_1654].z + _411;
    float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
    float _1862 = _1861 * _1855;
    float _1863 = _1861 * _1856;
    float _1864 = _1861 * _1857;
    float _1865 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1654].xyz));
    float _3922 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _1869 = dot(vec3(_326, _327, _328), vec3(_1862, _1863, _1864));
    float _3933 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1654].xyz), vec3(_1862, _1863, _1864));
    float _3944 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1877 = _1854 * _1854;
    float _1881 = ((_1872 * _1872) * (_1877 + (-1.0))) + 1.0;
    float _1888 = exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0);
    float _1895 = 1.0 - _1854;
    float _1905 = (0.5 / (((_1783 * ((_1868 * _1895) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _1895) + _1854) * _1868))) * _1868;
    float _3955 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1907 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1877 / ((_1881 * _1881) * 3.141590118408203125));
    float _1917 = (((((_1888 * _1805) + _533) * cbLight._m0[_1842].x) * _1907) * _1636) + ((((cbLight._m0[_1754].x * _1605) * ((_1804 * _1805) + _533)) * _1828) * _1650);
    float _1918 = (((((_1888 * _1807) + _535) * cbLight._m0[_1842].y) * _1907) * _1636) + ((((cbLight._m0[_1754].y * _1606) * ((_1804 * _1807) + _535)) * _1828) * _1650);
    float _1919 = (((((_1888 * _1808) + _536) * cbLight._m0[_1842].z) * _1907) * _1636) + ((((cbLight._m0[_1754].z * _1607) * ((_1804 * _1808) + _536)) * _1828) * _1650);
    float _1981;
    float _1983;
    float _1985;
    if (_1691)
    {
        _1981 = _1917;
        _1983 = _1918;
        _1985 = _1919;
    }
    else
    {
        uint _1987 = _1613 + 2u;
        uint _1991 = _1613 + 10u;
        float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1987].w)) * _462) * 0.949999988079071044921875);
        float _2006 = _2005 * _2005;
        float _2007 = cbLight._m0[_1987].x + _409;
        float _2008 = cbLight._m0[_1987].y + _410;
        float _2009 = cbLight._m0[_1987].z + _411;
        float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
        float _2014 = _2013 * _2007;
        float _2015 = _2013 * _2008;
        float _2016 = _2013 * _2009;
        float _2017 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1987].xyz));
        float _3966 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2020 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _2021 = dot(vec3(_326, _327, _328), vec3(_2014, _2015, _2016));
        float _3977 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2025 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_2014, _2015, _2016));
        float _3988 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2029 = _2006 * _2006;
        float _2033 = ((_2024 * _2024) * (_2029 + (-1.0))) + 1.0;
        float _2040 = exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0);
        float _2047 = 1.0 - _2006;
        float _2057 = (0.5 / (((_1783 * ((_2020 * _2047) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _2047) + _2006) * _2020))) * _2020;
        float _3999 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2059 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_2029 / ((_2033 * _2033) * 3.141590118408203125));
        float _2060 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
        _1981 = (((((_2040 * _1805) + _533) * cbLight._m0[_1991].x) * _2059) * _2060) + _1917;
        _1983 = (((((_2040 * _1807) + _535) * cbLight._m0[_1991].y) * _2059) * _2060) + _1918;
        _1985 = (((((_2040 * _1808) + _536) * cbLight._m0[_1991].z) * _2059) * _2060) + _1919;
    }
    float _2095;
    float _2097;
    float _2099;
    if (_1709)
    {
        _2095 = _1981;
        _2097 = _1983;
        _2099 = _1985;
    }
    else
    {
        uint _2106 = _1613 + 3u;
        uint _2110 = _1613 + 11u;
        float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _462) * 0.949999988079071044921875);
        float _2125 = _2124 * _2124;
        float _2126 = cbLight._m0[_2106].x + _409;
        float _2127 = cbLight._m0[_2106].y + _410;
        float _2128 = cbLight._m0[_2106].z + _411;
        float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
        float _2133 = _2132 * _2126;
        float _2134 = _2132 * _2127;
        float _2135 = _2132 * _2128;
        float _2136 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_2106].xyz));
        float _4015 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2139 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2140 = dot(vec3(_326, _327, _328), vec3(_2133, _2134, _2135));
        float _4026 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2144 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2133, _2134, _2135));
        float _4037 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2148 = _2125 * _2125;
        float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
        float _2159 = exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0);
        float _2166 = 1.0 - _2125;
        float _2176 = (0.5 / (((_1783 * ((_2139 * _2166) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _2166) + _2125) * _2139))) * _2139;
        float _4048 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2178 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
        float _2179 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
        _2095 = (((((_2159 * _1805) + _533) * cbLight._m0[_2110].x) * _2178) * _2179) + _1981;
        _2097 = (((((_2159 * _1807) + _535) * cbLight._m0[_2110].y) * _2178) * _2179) + _1983;
        _2099 = (((((_2159 * _1808) + _536) * cbLight._m0[_2110].z) * _2178) * _2179) + _1985;
    }
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    if (_1611.y == 0u)
    {
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2255 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2254;
        float _2256 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2254;
        float _2257 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2254;
        uvec4 _2269 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2270 = _2269.x;
        uint _2281 = uint((float(_2269.y) * floor(float(uint(cbSceneParam._m0[85u].y * _418) / _2270))) + floor(float(uint(cbSceneParam._m0[85u].x * _417) / _2270)));
        float _2291 = (log2(_2257 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2292 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        uint _2295 = uint(isnan(14.0) ? _2292 : (isnan(_2292) ? 14.0 : min(_2292, 14.0)));
        uvec4 _2300 = texelFetch(g_lightClusterGridBuffer, int(((_2295 << 2u) + (_2281 << 6u)) >> 2u));
        uint _2301 = _2300.x;
        uint _2302 = _2269.z;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        if (((((1u << ((_2302 >> 4u) & 15u)) + 4294967295u) & _2301) == 0u) || ((_2302 & 240u) == 0u))
        {
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
        }
        else
        {
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2441;
            float _2443;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            uint _2591 = 0u;
            uint _2600;
            bool _2601;
            for (;;)
            {
                _2600 = texelFetch(g_lightClassification, int((((_2295 << 5u) + (_2281 << 9u)) + (_2591 << 2u)) >> 2u)).x;
                _2601 = _2600 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2601)
                {
                    frontier_phi_63_pred = _2590;
                    frontier_phi_63_pred_1 = _2589;
                    frontier_phi_63_pred_2 = _2588;
                    frontier_phi_63_pred_3 = _2587;
                    frontier_phi_63_pred_4 = _2586;
                    frontier_phi_63_pred_5 = _2585;
                }
                else
                {
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    uint _2715;
                    _2709 = _2585;
                    _2710 = _2586;
                    _2711 = _2587;
                    _2712 = _2588;
                    _2713 = _2589;
                    _2714 = _2590;
                    _2715 = _2600;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    for (;;)
                    {
                        uint _2719 = uint(findLSB(_2715)) + (_2591 << 5u);
                        uint _2716 = (_2715 + 4294967295u) & _2715;
                        uint _2721 = _2719 * 48u;
                        vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 3u)).x));
                        uint _2741 = (_2719 * 48u) + 4u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 3u)).x));
                        uint _2760 = (_2719 * 48u) + 8u;
                        vec3 _2771 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x));
                        float _2775 = _2735.x - _2255;
                        float _2776 = _2735.y - _2256;
                        float _2777 = _2735.z - _2257;
                        float _2778 = dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777));
                        float _2781 = inversesqrt(_2778);
                        float _2782 = _2781 * _2775;
                        float _2783 = _2781 * _2776;
                        float _2784 = _2781 * _2777;
                        float _2785 = dot(vec3(_443, _446, _449), vec3(_2782, _2783, _2784));
                        float _2790 = 1.0 - (_2778 * _2735.w);
                        float _4074 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2791 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2792 = sqrt(_2778) * _2754.w;
                        float _2795 = 1.39999997615814208984375 / (_2792 + 1.39999997615814208984375);
                        float _2796 = _2795 * _2795;
                        float _2799 = ((1.0 - _2796) * _2785) + _2796;
                        float _2802 = _2792 * _2792;
                        float _2806 = ((isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))) * _2791) / ((_2802 * 0.699999988079071044921875) + 1.0);
                        float _2810 = (-0.0) - _2255;
                        float _2811 = (-0.0) - _2256;
                        float _2812 = (-0.0) - _2257;
                        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
                        float _2817 = _2816 * _2810;
                        float _2818 = _2816 * _2811;
                        float _2819 = _2816 * _2812;
                        float _2827 = exp2(log2(1.0 / ((_2802 * 3.5) + 5.0)) * 0.25);
                        float _2828 = 1.0 - _564;
                        float _2835 = sqrt(1.0 - ((1.0 - (_2828 * _2828)) * (1.0 - (_2827 * _2827))));
                        float _2836 = _2835 * _2835;
                        float _2837 = _2836 * _2836;
                        float _2838 = _2817 + _2782;
                        float _2839 = _2818 + _2783;
                        float _2840 = _2819 + _2784;
                        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
                        float _2848 = dot(vec3(_443, _446, _449), vec3(_2817, _2818, _2819));
                        float _4090 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2851 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                        float _2852 = dot(vec3(_443, _446, _449), vec3(_2844 * _2838, _2844 * _2839, _2844 * _2840));
                        float _4101 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2855 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2859 = ((_2855 * _2855) * (_2837 + (-1.0))) + 1.0;
                        float _2860 = _2795 * _2836;
                        float _2861 = _2860 * _2860;
                        float _2864 = ((1.0 - _2861) * _2785) + _2861;
                        float _4112 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2865 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2866 = 1.0 - _2836;
                        float _2876 = (0.5 / (((_2865 * ((_2851 * _2866) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2865 * _2866) + _2836) * _2851))) * _2865;
                        float _4123 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2887 = (((_2837 * 3.1415927410125732421875) * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) / ((_2859 * _2859) * ((_2802 * 2.1991131305694580078125) + 3.141590118408203125))) * _2791;
                        _2644 = (_2806 * _2754.x) + _2712;
                        _2645 = (_2806 * _2754.y) + _2713;
                        _2646 = (_2806 * _2754.z) + _2714;
                        _2641 = (_2887 * _2771.x) + _2709;
                        _2642 = (_2887 * _2771.y) + _2710;
                        _2643 = (_2887 * _2771.z) + _2711;
                        if (_2716 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2709 = _2641;
                            _2710 = _2642;
                            _2711 = _2643;
                            _2712 = _2644;
                            _2713 = _2645;
                            _2714 = _2646;
                            _2715 = _2716;
                        }
                    }
                    frontier_phi_63_pred = _2646;
                    frontier_phi_63_pred_1 = _2645;
                    frontier_phi_63_pred_2 = _2644;
                    frontier_phi_63_pred_3 = _2643;
                    frontier_phi_63_pred_4 = _2642;
                    frontier_phi_63_pred_5 = _2641;
                }
                _2443 = frontier_phi_63_pred;
                _2441 = frontier_phi_63_pred_1;
                _2439 = frontier_phi_63_pred_2;
                _2437 = frontier_phi_63_pred_3;
                _2435 = frontier_phi_63_pred_4;
                _2433 = frontier_phi_63_pred_5;
                uint _2592 = _2591 + 1u;
                if (_2592 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2585 = _2433;
                    _2586 = _2435;
                    _2587 = _2437;
                    _2588 = _2439;
                    _2589 = _2441;
                    _2590 = _2443;
                    _2591 = _2592;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
        }
        uvec4 _2446 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2447 = _2446.z;
        uint _2449 = (_2447 >> 8u) & 15u;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((4294967295u << _2449) & _2301) == 0u)
        {
            _2553 = _2432;
            _2555 = _2434;
            _2557 = _2436;
            _2559 = _2438;
            _2561 = _2440;
            _2563 = _2442;
        }
        else
        {
            float _2578 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
            float _2579 = _2578 * _2255;
            float _2580 = _2578 * _2256;
            float _2581 = _2578 * _2257;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2449 < ((_2447 >> 12u) & 15u))
            {
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2692 = _2432;
                float _2693 = _2434;
                float _2694 = _2436;
                float _2695 = _2438;
                float _2696 = _2440;
                float _2697 = _2442;
                uint _2698 = _2449;
                uint _2707;
                bool _2708;
                for (;;)
                {
                    _2707 = texelFetch(g_lightClassification, int((((_2295 << 5u) + (_2281 << 9u)) + (_2698 << 2u)) >> 2u)).x;
                    _2708 = _2707 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2708)
                    {
                        frontier_phi_69_pred = _2697;
                        frontier_phi_69_pred_1 = _2696;
                        frontier_phi_69_pred_2 = _2695;
                        frontier_phi_69_pred_3 = _2694;
                        frontier_phi_69_pred_4 = _2693;
                        frontier_phi_69_pred_5 = _2692;
                    }
                    else
                    {
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _2905 = _2692;
                        float _2906 = _2693;
                        float _2907 = _2694;
                        float _2908 = _2695;
                        float _2909 = _2696;
                        float _2910 = _2697;
                        uint _2911 = _2707;
                        uint _2912;
                        vec4 _2937;
                        float _2938;
                        vec4 _2953;
                        vec3 _2965;
                        vec4 _2981;
                        vec4 _2997;
                        float _3044;
                        bool _3045;
                        for (;;)
                        {
                            uint _2922 = ((_2698 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2911));
                            _2912 = (_2911 + 4294967295u) & _2911;
                            uint _2924 = _2922 * 40u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            _2938 = _2937.w;
                            uint _2940 = (_2922 * 40u) + 4u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2955 = (_2922 * 40u) + 8u;
                            _2965 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x));
                            uint _2968 = (_2922 * 40u) + 16u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2984 = (_2922 * 40u) + 20u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _3000 = (_2922 * 40u) + 24u;
                            vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3019 = (_2922 * 40u) + 28u;
                            vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            _3044 = fma(_2257, _3032.z, fma(_2256, _3032.y, _3032.x * _2255)) + _3032.w;
                            _3045 = !((fma(_2257, _3013.z, fma(_2256, _3013.y, _3013.x * _2255)) + _3013.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3045)
                            {
                                float _3072 = _2937.x - _2255;
                                float _3073 = _2937.y - _2256;
                                float _3074 = _2937.z - _2257;
                                float _3075 = dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074));
                                float _3078 = inversesqrt(_3075);
                                float _3079 = _3078 * _3072;
                                float _3080 = _3078 * _3073;
                                float _3081 = _3078 * _3074;
                                float _3085 = 1.0 - (_3075 / (_2938 * _2938));
                                float _4134 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3086 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3090 = sqrt(_3075) * _2953.w;
                                float _3092 = 1.39999997615814208984375 / (_3090 + 1.39999997615814208984375);
                                float _3093 = _3092 * _3092;
                                float _3096 = ((1.0 - _3093) * dot(vec3(_3079, _3080, _3081), vec3(_443, _446, _449))) + _3093;
                                float _3099 = _3090 * _3090;
                                float _3103 = (fma(_2257, _2981.z, fma(_2256, _2981.y, _2981.x * _2255)) + _2981.w) / _3044;
                                float _3104 = (fma(_2257, _2997.z, fma(_2256, _2997.y, _2997.x * _2255)) + _2997.w) / _3044;
                                float _3108 = 1.0 - dot(vec2(_3103, _3104), vec2(_3103, _3104));
                                float _4150 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3109 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                                float _3110 = _3109 * (((isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0))) * _3086) / ((_3099 * 0.699999988079071044921875) + 1.0));
                                float _3122 = exp2(log2(1.0 / ((_3099 * 3.5) + 5.0)) * 0.25);
                                float _3123 = 1.0 - _564;
                                float _3130 = sqrt(1.0 - ((1.0 - (_3123 * _3123)) * (1.0 - (_3122 * _3122))));
                                float _3131 = _3130 * _3130;
                                float _3132 = _3131 * _3131;
                                float _3133 = _3079 - _2579;
                                float _3134 = _3080 - _2580;
                                float _3135 = _3081 - _2581;
                                float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                                float _3143 = dot(vec3(_443, _446, _449), vec3((-0.0) - _2579, (-0.0) - _2580, (-0.0) - _2581));
                                float _4161 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3146 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3147 = dot(vec3(_443, _446, _449), vec3(_3139 * _3133, _3139 * _3134, _3139 * _3135));
                                float _4172 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3150 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3154 = ((_3150 * _3150) * (_3132 + (-1.0))) + 1.0;
                                float _3155 = _3092 * _3131;
                                float _3156 = _3155 * _3155;
                                float _3162 = ((1.0 - _3156) * dot(vec3(_443, _446, _449), vec3(_3079, _3080, _3081))) + _3156;
                                float _4183 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3163 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3164 = 1.0 - _3131;
                                float _3174 = (0.5 / (((_3163 * ((_3146 * _3164) + _3131)) + 9.9999999392252902907785028219223e-09) + (((_3163 * _3164) + _3131) * _3146))) * _3163;
                                float _4194 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3184 = (_3109 * _3086) * (((_3132 * 3.1415927410125732421875) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) / ((_3154 * _3154) * ((_3099 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3110 * _2953.z;
                                frontier_phi_75_pred_1 = _3110 * _2953.y;
                                frontier_phi_75_pred_2 = _3110 * _2953.x;
                                frontier_phi_75_pred_3 = _3184 * _2965.z;
                                frontier_phi_75_pred_4 = _3184 * _2965.y;
                                frontier_phi_75_pred_5 = _3184 * _2965.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3193 = frontier_phi_75_pred;
                            _3192 = frontier_phi_75_pred_1;
                            _3191 = frontier_phi_75_pred_2;
                            _3190 = frontier_phi_75_pred_3;
                            _3189 = frontier_phi_75_pred_4;
                            _3188 = frontier_phi_75_pred_5;
                            _2895 = _3191 + _2908;
                            _2896 = _3192 + _2909;
                            _2897 = _3193 + _2910;
                            _2892 = _3188 + _2905;
                            _2893 = _3189 + _2906;
                            _2894 = _3190 + _2907;
                            if (_2912 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2912;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2897;
                        frontier_phi_69_pred_1 = _2896;
                        frontier_phi_69_pred_2 = _2895;
                        frontier_phi_69_pred_3 = _2894;
                        frontier_phi_69_pred_4 = _2893;
                        frontier_phi_69_pred_5 = _2892;
                    }
                    _2564 = frontier_phi_69_pred;
                    _2562 = frontier_phi_69_pred_1;
                    _2560 = frontier_phi_69_pred_2;
                    _2558 = frontier_phi_69_pred_3;
                    _2556 = frontier_phi_69_pred_4;
                    _2554 = frontier_phi_69_pred_5;
                    uint _2699 = _2698 + 1u;
                    if (_2699 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2692 = _2554;
                        _2693 = _2556;
                        _2694 = _2558;
                        _2695 = _2560;
                        _2696 = _2562;
                        _2697 = _2564;
                        _2698 = _2699;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2564;
                frontier_phi_57_58_ladder_1 = _2562;
                frontier_phi_57_58_ladder_2 = _2560;
                frontier_phi_57_58_ladder_3 = _2558;
                frontier_phi_57_58_ladder_4 = _2556;
                frontier_phi_57_58_ladder_5 = _2554;
            }
            else
            {
                frontier_phi_57_58_ladder = _2442;
                frontier_phi_57_58_ladder_1 = _2440;
                frontier_phi_57_58_ladder_2 = _2438;
                frontier_phi_57_58_ladder_3 = _2436;
                frontier_phi_57_58_ladder_4 = _2434;
                frontier_phi_57_58_ladder_5 = _2432;
            }
            _2553 = frontier_phi_57_58_ladder_5;
            _2555 = frontier_phi_57_58_ladder_4;
            _2557 = frontier_phi_57_58_ladder_3;
            _2559 = frontier_phi_57_58_ladder_2;
            _2561 = frontier_phi_57_58_ladder_1;
            _2563 = frontier_phi_57_58_ladder;
        }
        float _2568 = isnan(1.0) ? _548 : (isnan(_548) ? 1.0 : min(_548, 1.0));
        _2313 = (_2568 * _2559) + _1747;
        _2315 = (_2568 * _2561) + _1749;
        _2317 = (_2568 * _2563) + _1751;
        _2319 = ((_2553 * _533) * _2568) + _2095;
        _2321 = ((_2555 * _535) * _2568) + _2097;
        _2323 = ((_2557 * _536) * _2568) + _2099;
    }
    else
    {
        _2313 = _1747;
        _2315 = _1749;
        _2317 = _1751;
        _2319 = _2095;
        _2321 = _2097;
        _2323 = _2099;
    }
    uint _2329 = _477 + uint(cbMatDynParam._m0[0u].w);
    float _2335 = (_305.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2329].x;
    float _2336 = (_305.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2329].y;
    float _2337 = (_305.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2329].z;
    float _4210 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4221 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _4232 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4243 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _2355 = (((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2313 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _548))) + ((_2319 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1358)) * cbPerFrame._m0[3u].x)) + _2335;
    float _2357 = (_2336 + ((_2321 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1358)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2315 + ((isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))) * _548)));
    float _2359 = (_2337 + ((_2323 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1358)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2317 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _548)));
    float _4269 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2372 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2377 = cbInstanceData._m0[_475 + 6u].w * (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)));
    float _2382 = _417 / cbSceneParam._m0[86u].x;
    float _2383 = _418 / cbSceneParam._m0[86u].y;
    vec4 _2397 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2382, _2383, (log2((isnan(cbSceneParam._m0[77u].w) ? _350 : (isnan(_350) ? cbSceneParam._m0[77u].w : min(_350, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2399 = _2397.x;
    float _2400 = _2397.y;
    float _2401 = _2397.z;
    float _2402 = _2397.w;
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    if (_350 > cbSceneParam._m0[78u].w)
    {
        float _2457 = isnan(_350) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _350 : min(cbSceneParam._m0[80u].w, _350));
        float _2458 = _2457 / _350;
        float _2469 = _2458 * _402;
        float _2470 = _403 * _2458;
        float _2471 = (-0.0) - _2470;
        float _2472 = _2458 * _404;
        float _2474 = (cbSceneParam._m0[77u].w * _2471) / _2457;
        float _2475 = _2474 + cbSceneParam._m0[79u].w;
        float _2476 = cbSceneParam._m0[79u].w - _2470;
        float _2482 = sqrt(((_2469 * _2469) + (_2470 * _2470)) + (_2472 * _2472));
        float _2485 = (1.0 - (cbSceneParam._m0[77u].w / _2457)) * _2482;
        float _2490 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2492 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2654;
        if (abs((_2471 - _2474) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2654 = ((((_2475 > 0.0) ? exp2(_2490 * _2475) : (2.0 - exp2(_2492 * _2475))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2485;
        }
        else
        {
            float _2614 = 1.0 / cbSceneParam._m0[80u].x;
            float _2615 = isnan(_2476) ? _2475 : (isnan(_2475) ? _2476 : max(_2475, _2476));
            float _2616 = isnan(_2476) ? _2475 : (isnan(_2475) ? _2476 : min(_2475, _2476));
            float _2625 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : min(_2615, 0.0));
            float _2626 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : min(_2616, 0.0));
            _2654 = ((abs(_2482 / _2471) * cbSceneParam._m0[80u].y) * ((((_2625 - _2626) * 2.0) - ((exp2(_2490 * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0)))) - exp2(_2490 * (isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0))))) * _2614)) - ((exp2(_2492 * _2625) - exp2(_2492 * _2626)) * _2614))) + (_2485 * cbSceneParam._m0[80u].z);
        }
        vec4 _2656 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2382, _2383, 1.0), 0.0);
        float _2665 = exp2((_2654 * (-1.44269502162933349609375)) * (1.0 - _2656.w));
        float _2666 = log2(_2665);
        float _2682 = log2(_2402);
        _2494 = (exp2(_2682 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].x)) * _2656.x) / cbSceneParam._m0[78u].x)) + _2399;
        _2496 = (exp2(_2682 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].y)) * _2656.y) / cbSceneParam._m0[78u].y)) + _2400;
        _2498 = (exp2(_2682 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].z)) * _2656.z) / cbSceneParam._m0[78u].z)) + _2401;
        _2500 = _2665 * _2402;
    }
    else
    {
        _2494 = _2399;
        _2496 = _2400;
        _2498 = _2401;
        _2500 = _2402;
    }
    float _2512 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2513 = _2512 == 3.0;
    float _2514 = log2(_2500);
    float _2518 = exp2(_2514 * cbSceneParam._m0[78u].x);
    float _2519 = exp2(_2514 * cbSceneParam._m0[78u].y);
    float _2520 = exp2(_2514 * cbSceneParam._m0[78u].z);
    float _2521 = _2518 * (isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0)));
    float _2522 = _2519 * (isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0)));
    float _2523 = _2520 * (isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0)));
    float _2532 = (_2512 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2532 * (_2513 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2494)));
    SV_Target.y = _2532 * (_2513 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2496)));
    SV_Target.z = _2532 * (_2513 ? _2523 : (_2523 + (cbSceneParam._m0[72u].w * _2498)));
    SV_Target.w = _2377;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2335) * _2372) * _2518) * _2532;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2336) * _2372) * _2519) * _2532;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2337) * _2372) * _2520) * _2532;
    SV_Target_1.w = _2377;
}


