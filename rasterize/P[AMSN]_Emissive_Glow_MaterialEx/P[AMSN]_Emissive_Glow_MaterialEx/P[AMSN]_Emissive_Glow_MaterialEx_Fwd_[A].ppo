#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _966;
float _3397;
float _3398;
float _3399;
float _3400;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _240 = texture(sampler2D(P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _240.x;
    float _244 = _240.y;
    float _245 = _240.z;
    float _246 = _240.w;
    vec4 _262 = texture(sampler2D(P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = _262.x + cbMtdParam._m0[9u].x;
    vec4 _277 = texture(sampler2D(P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _281 = _277.z;
    float _285 = (_277.x * 2.0) + (-1.0);
    float _287 = (_277.y * 2.0) + (-1.0);
    float _288 = dot(vec2(_285, _287), vec2(_285, _287));
    float _3409 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _294 = sqrt(1.0 - (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))));
    vec4 _307 = texture(sampler2D(P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _317 = fma(_294, _224, fma(_287, _216 * TANGENT.x, (_202 * _194) * _285));
    float _320 = fma(_294, _225, fma(_287, _216 * TANGENT.y, (_202 * _195) * _285));
    float _323 = fma(_294, _226, fma(_287, _216 * TANGENT.z, (_202 * _196) * _285));
    float _327 = inversesqrt(dot(vec3(_317, _320, _323), vec3(_317, _320, _323)));
    float _328 = _327 * _317;
    float _329 = _327 * _320;
    float _330 = _327 * _323;
    float _3420 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _331 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _3431 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _332 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _3442 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3453 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3464 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3475 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _336 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _352 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _394 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _404 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _394);
    float _405 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _394);
    float _406 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _394);
    float _410 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
    float _411 = _404 * _410;
    float _412 = _405 * _410;
    float _413 = _406 * _410;
    vec4 _418 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _420 = _418.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _645 = sqrt(((_404 * _404) + (_405 * _405)) + (_406 * _406));
        float _651 = (cbMatDynParam._m0[5u].x * _645) + cbMatDynParam._m0[5u].y;
        float _3486 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _652 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _656 = (cbMatDynParam._m0[5u].z * _645) + cbMatDynParam._m0[5u].w;
        float _3497 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) - _652)) + _652) < ((_420 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _432 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _433 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _435 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _437 = _435.w;
    float _457 = fma(_330, cbSceneParam._m0[5u].z, fma(_329, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _328));
    float _460 = fma(_330, cbSceneParam._m0[6u].z, fma(_329, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _328));
    float _463 = fma(_330, cbSceneParam._m0[7u].z, fma(_329, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _328));
    vec4 _465 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _476 = (((_465.y - _332) + (_465.w * _332)) * cbMtdParam._m0[3u].x) + _332;
    uint _489 = uint(roundEven(NORMAL.w)) * 13u;
    uint _491 = _489 + 9u;
    uint _492 = _491 + uint(cbMatDynParam._m0[0u].w);
    float _498 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) * cbInstanceData._m0[_492].x;
    float _499 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * cbInstanceData._m0[_492].y;
    float _500 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_492].z;
    float _3508 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _501 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _503 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    vec4 _504 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _509 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _520 = (((_509.x - _336) + (_509.w * _336)) * cbMtdParam._m0[3u].x) + _336;
    float _533 = (cbMtdParam._m0[3u].x * (((_501 * _437) - _501) + _504.x)) + _501;
    float _534 = (cbMtdParam._m0[3u].x * (((_502 * _437) - _502) + _504.y)) + _502;
    float _535 = (cbMtdParam._m0[3u].x * (((_503 * _437) - _503) + _504.z)) + _503;
    float _536 = 1.0 - _520;
    float _537 = _536 * _533;
    float _538 = _536 * _534;
    float _539 = _536 * _535;
    float _544 = (_533 + (-0.039999999105930328369140625)) * _520;
    float _545 = (_534 + (-0.039999999105930328369140625)) * _520;
    float _546 = (_535 + (-0.039999999105930328369140625)) * _520;
    float _547 = _544 + 0.039999999105930328369140625;
    float _549 = _545 + 0.039999999105930328369140625;
    float _550 = _546 + 0.039999999105930328369140625;
    vec4 _559 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _432, cbSceneParam._m0[86u].y * _433));
    float _562 = _559.x * TEXCOORD_4;
    float _563 = dot(vec3(_328, _329, _330), vec3(_411, _412, _413));
    float _566 = _563 * 2.0;
    float _570 = (_566 * _328) - _411;
    float _571 = (_566 * _329) - _412;
    float _572 = (_566 * _330) - _413;
    float _576 = abs(dot(vec3(_411, _412, _413), vec3(_328, _329, _330)));
    float _3541 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _578 = sqrt(_476);
    float _591 = exp2((_578 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_578 * 3.0));
    float _597 = (1.0 - _591) * ((_578 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _598 = _591 * _578;
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _965;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _690 = fma(_634, cbModelParam._m0[26u].z, fma(_630, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _626));
        float _694 = fma(_634, cbModelParam._m0[27u].z, fma(_630, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _626));
        float _698 = fma(_634, cbModelParam._m0[28u].z, fma(_630, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _626));
        float _723 = _626 + _328;
        float _724 = _630 + _329;
        float _725 = _634 + _330;
        float _735 = fma(_725, cbModelParam._m0[26u].z, fma(_724, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _723)) - _690;
        float _736 = fma(_725, cbModelParam._m0[27u].z, fma(_724, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _723)) - _694;
        float _737 = fma(_725, cbModelParam._m0[28u].z, fma(_724, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _723)) - _698;
        float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
        float _754 = ((_741 * _735) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_690 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _755 = ((_741 * _736) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_694 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _756 = ((_741 * _737) / cbModelParam._m0[34u].z) + ((((((_698 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        float _793 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_759.x + (-0.5));
        float _795 = _793 * (_759.y + (-0.5));
        float _796 = _793 * (_759.z + (-0.5));
        float _803 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_766.x + (-0.5));
        float _805 = _803 * (_766.y + (-0.5));
        float _806 = _803 * (_766.z + (-0.5));
        float _813 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_773.x + (-0.5));
        float _815 = _813 * (_773.y + (-0.5));
        float _816 = _813 * (_773.z + (-0.5));
        float _823 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_780.x + (-0.5));
        float _825 = _823 * (_780.y + (-0.5));
        float _826 = _823 * (_780.z + (-0.5));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = _794 * 0.5;
        float _831 = _804 * 0.5;
        float _832 = _814 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _847 = (dot(vec3(_328, _329, _330), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _857 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3589 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_859 + 1.0))) + _864) * _827;
        float _874 = _795 * 0.5;
        float _875 = _805 * 0.5;
        float _876 = _815 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_328, _329, _330), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3622 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_901 + 1.0))) + _906) * _828;
        float _916 = _796 * 0.5;
        float _917 = _806 * 0.5;
        float _918 = _816 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _932 = (dot(vec3(_328, _329, _330), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _941 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3655 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_943 + 1.0))) + _948) * _829;
        _965 = _796;
        _967 = _795;
        _968 = _794;
        _969 = _806;
        _970 = _805;
        _971 = _804;
        _972 = _816;
        _973 = _815;
        _974 = _814;
        _975 = _829;
        _976 = _828;
        _977 = _827;
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
    }
    else
    {
        _965 = _966;
        _967 = _966;
        _968 = _966;
        _969 = _966;
        _970 = _966;
        _971 = _966;
        _972 = _966;
        _973 = _966;
        _974 = _966;
        _975 = _966;
        _976 = _966;
        _977 = _966;
        _978 = 0.0;
        _979 = 0.0;
        _980 = 0.0;
    }
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1009 = fma(_634, cbModelParam._m0[30u].z, fma(_630, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _626));
        float _1013 = fma(_634, cbModelParam._m0[31u].z, fma(_630, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _626));
        float _1017 = fma(_634, cbModelParam._m0[32u].z, fma(_630, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _626));
        float _1040 = _626 + _328;
        float _1041 = _630 + _329;
        float _1042 = _634 + _330;
        float _1052 = fma(_1042, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1040)) - _1009;
        float _1053 = fma(_1042, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1040)) - _1013;
        float _1054 = fma(_1042, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1040)) - _1017;
        float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
        float _1071 = ((_1058 * _1052) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1009 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1058 * _1053) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1013 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1058 * _1054) / cbModelParam._m0[35u].z) + ((((((_1017 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1108 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1075.x + (-0.5));
        float _1110 = _1108 * (_1075.y + (-0.5));
        float _1111 = _1108 * (_1075.z + (-0.5));
        float _1118 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1082.x + (-0.5));
        float _1120 = _1118 * (_1082.y + (-0.5));
        float _1121 = _1118 * (_1082.z + (-0.5));
        float _1128 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1089.x + (-0.5));
        float _1130 = _1128 * (_1089.y + (-0.5));
        float _1131 = _1128 * (_1089.z + (-0.5));
        float _1138 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1096.x + (-0.5));
        float _1140 = _1138 * (_1096.y + (-0.5));
        float _1141 = _1138 * (_1096.z + (-0.5));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = _1109 * 0.5;
        float _1146 = _1119 * 0.5;
        float _1147 = _1129 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_328, _329, _330), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3718 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1172 + 1.0))) + _1177) * _1142;
        float _1187 = _1110 * 0.5;
        float _1188 = _1120 * 0.5;
        float _1189 = _1130 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_328, _329, _330), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3751 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1214 + 1.0))) + _1219) * _1143;
        float _1229 = _1111 * 0.5;
        float _1230 = _1121 * 0.5;
        float _1231 = _1131 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_328, _329, _330), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3784 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1256 + 1.0))) + _1261) * _1144;
        _1278 = _1111;
        _1279 = _1110;
        _1280 = _1109;
        _1281 = _1121;
        _1282 = _1120;
        _1283 = _1119;
        _1284 = _1131;
        _1285 = _1130;
        _1286 = _1129;
        _1287 = _1144;
        _1288 = _1143;
        _1289 = _1142;
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
    }
    else
    {
        _1278 = _966;
        _1279 = _966;
        _1280 = _966;
        _1281 = _966;
        _1282 = _966;
        _1283 = _966;
        _1284 = _966;
        _1285 = _966;
        _1286 = _966;
        _1287 = _966;
        _1288 = _966;
        _1289 = _966;
        _1290 = 0.0;
        _1291 = 0.0;
        _1292 = 0.0;
    }
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _978)) + _978;
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _979)) + _979;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _980)) + _980;
    float _1325 = fma(_1304, cbSceneParam._m0[89u].z, fma(_1303, cbSceneParam._m0[89u].y, _1302 * cbSceneParam._m0[89u].x));
    float _1328 = fma(_1304, cbSceneParam._m0[90u].z, fma(_1303, cbSceneParam._m0[90u].y, _1302 * cbSceneParam._m0[90u].x));
    float _1331 = fma(_1304, cbSceneParam._m0[91u].z, fma(_1303, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1302));
    float _1346 = _570 * 0.5;
    float _1347 = _571 * 0.5;
    float _1348 = _572 * 0.5;
    float _1349 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1352 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1355 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1389;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1362 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_965, _969, _972, _975));
        float _1366 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_967, _970, _973, _976));
        float _1370 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_968, _971, _974, _977));
        float _1377 = dot(vec4(cbModelParam._m0[39u]), vec4(_1346, _1347, _1348, 1.0));
        _1389 = dot(vec3(isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1377) ? 0.0 : (isnan(0.0) ? _1377 : max(0.0, _1377))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1389 = 1.0;
    }
    float _1400;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1391 = dot(vec4(cbModelParam._m0[40u]), vec4(_1346, _1347, _1348, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1391) ? 0.0 : (isnan(0.0) ? _1391 : max(0.0, _1391))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1404 = (_1400 * cbModelParam._m0[1u].x) + (_1389 * (1.0 - cbModelParam._m0[1u].x));
    float _1414 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _476);
    float _1415 = isnan(_1414) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1414 : min(cbModelParam._m0[25u].z, _1414));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1464 = fma(_634, cbModelParam._m0[13u].z, fma(_630, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _626)) + cbModelParam._m0[13u].w;
        float _1468 = fma(_634, cbModelParam._m0[14u].z, fma(_630, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _626)) + cbModelParam._m0[14u].w;
        float _1472 = fma(_634, cbModelParam._m0[15u].z, fma(_630, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _626)) + cbModelParam._m0[15u].w;
        float _1475 = fma(_572, cbModelParam._m0[13u].z, fma(_571, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570));
        float _1478 = fma(_572, cbModelParam._m0[14u].z, fma(_571, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570));
        float _1481 = fma(_572, cbModelParam._m0[15u].z, fma(_571, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570));
        float _1509;
        if (_1475 > 0.0)
        {
            _1509 = abs((1.0 - _1464) / _1475);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1464 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1509 = frontier_phi_19_17_ladder;
        }
        float _1717;
        if (_1478 > 0.0)
        {
            _1717 = abs((1.0 - _1468) / _1478);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1468 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1717 = frontier_phi_28_24_ladder;
        }
        float _1971;
        if (_1481 > 0.0)
        {
            _1971 = abs((1.0 - _1472) / _1481);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1472 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1971 = frontier_phi_40_35_ladder;
        }
        float _1973 = isnan(_1717) ? _1509 : (isnan(_1509) ? _1717 : min(_1509, _1717));
        float _1974 = isnan(_1971) ? _1973 : (isnan(_1973) ? _1971 : min(_1973, _1971));
        float _1978 = (_1974 * _1475) + _1464;
        float _1979 = (_1974 * _1478) + _1468;
        float _1980 = (_1974 * _1481) + _1472;
        float _1981 = _1974 * 9.9999997473787516355514526367188e-05;
        float _1983 = (-1.0) - _1981;
        float _1985 = _1981 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1980 > _1985) || ((_1980 < _1983) || ((_1979 > _1985) || ((_1979 < _1983) || ((_1978 < _1983) || (_1978 > _1985))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2108 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1980, cbModelParam._m0[9u].z, fma(_1979, cbModelParam._m0[9u].y, _1978 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1980, cbModelParam._m0[10u].z, fma(_1979, cbModelParam._m0[10u].y, _1978 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1980, cbModelParam._m0[11u].z, fma(_1979, cbModelParam._m0[11u].y, _1978 * cbModelParam._m0[11u].x))), _1415);
            frontier_phi_18_40_ladder = _2108.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2108.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2108.x * cbModelParam._m0[1u].y;
        }
        _1497 = frontier_phi_18_40_ladder_2;
        _1499 = frontier_phi_18_40_ladder_1;
        _1501 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_570, _571, _572), _1415);
        _1497 = _1485.x * cbModelParam._m0[1u].y;
        _1499 = _1485.y * cbModelParam._m0[1u].y;
        _1501 = _1485.z * cbModelParam._m0[1u].y;
    }
    float _1505 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _476);
    float _1506 = isnan(_1505) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1505 : min(cbModelParam._m0[25u].w, _1505));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1563 = fma(_634, cbModelParam._m0[21u].z, fma(_630, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _626)) + cbModelParam._m0[21u].w;
        float _1567 = fma(_634, cbModelParam._m0[22u].z, fma(_630, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _626)) + cbModelParam._m0[22u].w;
        float _1571 = fma(_634, cbModelParam._m0[23u].z, fma(_630, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _626)) + cbModelParam._m0[23u].w;
        float _1574 = fma(_572, cbModelParam._m0[21u].z, fma(_571, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570));
        float _1577 = fma(_572, cbModelParam._m0[22u].z, fma(_571, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570));
        float _1580 = fma(_572, cbModelParam._m0[23u].z, fma(_571, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570));
        float _1722;
        if (_1574 > 0.0)
        {
            _1722 = abs((1.0 - _1563) / _1574);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1563 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1722 = frontier_phi_30_26_ladder;
        }
        float _1998;
        if (_1577 > 0.0)
        {
            _1998 = abs((1.0 - _1567) / _1577);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1567 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1998 = frontier_phi_42_37_ladder;
        }
        float _2211;
        if (_1580 > 0.0)
        {
            _2211 = abs((1.0 - _1571) / _1580);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1571 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2211 = frontier_phi_51_48_ladder;
        }
        float _2213 = isnan(_1998) ? _1722 : (isnan(_1722) ? _1998 : min(_1722, _1998));
        float _2214 = isnan(_2211) ? _2213 : (isnan(_2213) ? _2211 : min(_2213, _2211));
        float _2218 = (_2214 * _1574) + _1563;
        float _2219 = (_2214 * _1577) + _1567;
        float _2220 = (_2214 * _1580) + _1571;
        float _2221 = _2214 * 9.9999997473787516355514526367188e-05;
        float _2222 = (-1.0) - _2221;
        float _2224 = _2221 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2220 > _2224) || ((_2220 < _2222) || ((_2219 > _2224) || ((_2219 < _2222) || ((_2218 < _2222) || (_2218 > _2224))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2220, cbModelParam._m0[17u].z, fma(_2219, cbModelParam._m0[17u].y, _2218 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2220, cbModelParam._m0[18u].z, fma(_2219, cbModelParam._m0[18u].y, _2218 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2220, cbModelParam._m0[19u].z, fma(_2219, cbModelParam._m0[19u].y, _2218 * cbModelParam._m0[19u].x))), _1506);
            frontier_phi_27_51_ladder = _2449.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2449.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2449.x * cbModelParam._m0[1u].z;
        }
        _1599 = frontier_phi_27_51_ladder_2;
        _1601 = frontier_phi_27_51_ladder_1;
        _1603 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_570, _571, _572), _1506);
        _1599 = _1583.x * cbModelParam._m0[1u].z;
        _1601 = _1583.y * cbModelParam._m0[1u].z;
        _1603 = _1583.z * cbModelParam._m0[1u].z;
    }
    float _1616 = (((_597 * _547) + _598) * _562) * ((cbModelParam._m0[1u].w * (_1599 - _1497)) + _1497);
    float _1618 = (((_597 * _549) + _598) * _562) * ((cbModelParam._m0[1u].w * (_1601 - _1499)) + _1499);
    float _1620 = (((_597 * _550) + _598) * _562) * ((cbModelParam._m0[1u].w * (_1603 - _1501)) + _1501);
    float _1623 = fma(_1620, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1616 * cbSceneParam._m0[89u].x));
    float _1626 = fma(_1620, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1616 * cbSceneParam._m0[90u].x));
    float _1629 = fma(_1620, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, _1616 * cbSceneParam._m0[91u].x));
    uvec4 _1639 = floatBitsToUint(cbInstanceData._m0[_489 + 5u]);
    uint _1641 = _1639.x * 14u;
    uint _1642 = _1641 + 13u;
    float _1649 = _562 + (-1.0);
    float _1654 = (cbLight._m0[_1642].x * _1649) + 1.0;
    float _1655 = (cbLight._m0[_1642].y * _1649) + 1.0;
    float _1656 = (cbLight._m0[_1642].z * _1649) + 1.0;
    float _1657 = (cbLight._m0[_1642].w * _1649) + 1.0;
    uint _1658 = _1641 + 5u;
    float _1664 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
    uint _1668 = _1641 + 4u;
    float _1675 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
    uint _1679 = _1641 | 1u;
    float _1690 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_328, _329, _330));
    float _1693 = dot(vec3(cbLight._m0[_1679].xyz), vec3(_328, _329, _330));
    float _3920 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _3931 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1698 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1700 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.3183098733425140380859375;
    float _1707 = ((cbLight._m0[_1658].x * _1664) * _1700) + ((cbLight._m0[_1668].x * _1675) * _1698);
    float _1708 = ((_1664 * cbLight._m0[_1658].y) * _1700) + ((_1675 * cbLight._m0[_1668].y) * _1698);
    float _1709 = ((_1664 * cbLight._m0[_1658].z) * _1700) + ((_1675 * cbLight._m0[_1668].z) * _1698);
    uvec4 _1714 = floatBitsToUint(cbLight._m0[_1641 + 12u]);
    bool _1716 = _1714.x == 0u;
    float _1727;
    float _1729;
    float _1731;
    if (_1716)
    {
        _1727 = _1707;
        _1729 = _1708;
        _1731 = _1709;
    }
    else
    {
        uint _1735 = _1641 + 6u;
        float _1751 = (dot(vec3(cbLight._m0[_1641 + 2u].xyz), vec3(_328, _329, _330)) * 0.5) + 0.5;
        float _1752 = _1751 * _1751;
        float _3942 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1754 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
        _1727 = (((cbLight._m0[_1735].x * 0.3183098733425140380859375) * _1753) * _1754) + _1707;
        _1729 = (((cbLight._m0[_1735].y * 0.3183098733425140380859375) * _1753) * _1754) + _1708;
        _1731 = (((cbLight._m0[_1735].z * 0.3183098733425140380859375) * _1753) * _1754) + _1709;
    }
    bool _1734 = _1714.y == 0u;
    float _1772;
    float _1774;
    float _1776;
    if (_1734)
    {
        _1772 = _1727;
        _1774 = _1729;
        _1776 = _1731;
    }
    else
    {
        uint _1942 = _1641 + 7u;
        float _1958 = (dot(vec3(cbLight._m0[_1641 + 3u].xyz), vec3(_328, _329, _330)) * 0.5) + 0.5;
        float _1959 = _1958 * _1958;
        float _3958 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1961 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _1772 = (((cbLight._m0[_1942].x * 0.3183098733425140380859375) * _1960) * _1961) + _1727;
        _1774 = (((cbLight._m0[_1942].y * 0.3183098733425140380859375) * _1960) * _1961) + _1729;
        _1776 = (((cbLight._m0[_1942].z * 0.3183098733425140380859375) * _1960) * _1961) + _1731;
    }
    uint _1779 = _1641 + 8u;
    float _1792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1641].w)) * _476) * 0.949999988079071044921875);
    float _1793 = _1792 * _1792;
    float _1794 = cbLight._m0[_1641].x + _411;
    float _1795 = cbLight._m0[_1641].y + _412;
    float _1796 = cbLight._m0[_1641].z + _413;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1801 = _1800 * _1794;
    float _1802 = _1800 * _1795;
    float _1803 = _1800 * _1796;
    float _1804 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1641].xyz));
    float _3974 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _1808 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1809 = dot(vec3(_328, _329, _330), vec3(_1801, _1802, _1803));
    float _3996 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1813 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_1801, _1802, _1803));
    float _4007 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1817 = _1793 * _1793;
    float _1821 = ((_1812 * _1812) * (_1817 + (-1.0))) + 1.0;
    float _1829 = exp2(log2(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * 5.0);
    float _1830 = 0.959999978542327880859375 - _544;
    float _1832 = 0.959999978542327880859375 - _545;
    float _1833 = 0.959999978542327880859375 - _546;
    float _1840 = 1.0 - _1793;
    float _1851 = (0.5 / (((_1808 * ((_1807 * _1840) + _1793)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1840) + _1793) * _1807))) * _1807;
    float _4018 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1853 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1817 / ((_1821 * _1821) * 3.141590118408203125));
    uint _1864 = _1641 + 9u;
    float _1875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1679].w)) * _476) * 0.949999988079071044921875);
    float _1876 = _1875 * _1875;
    float _1877 = cbLight._m0[_1679].x + _411;
    float _1878 = cbLight._m0[_1679].y + _412;
    float _1879 = cbLight._m0[_1679].z + _413;
    float _1883 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
    float _1884 = _1883 * _1877;
    float _1885 = _1883 * _1878;
    float _1886 = _1883 * _1879;
    float _1887 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1679].xyz));
    float _4029 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1891 = dot(vec3(_328, _329, _330), vec3(_1884, _1885, _1886));
    float _4040 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1679].xyz), vec3(_1884, _1885, _1886));
    float _4051 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1876 * _1876;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1910 = exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0);
    float _1917 = 1.0 - _1876;
    float _1927 = (0.5 / (((_1808 * ((_1890 * _1917) + _1876)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1917) + _1876) * _1890))) * _1890;
    float _4062 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1929 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    float _1939 = (((((_1910 * _1830) + _547) * cbLight._m0[_1864].x) * _1929) * _1664) + (((((_1829 * _1830) + _547) * cbLight._m0[_1779].x) * _1853) * _1675);
    float _1940 = (((((_1910 * _1832) + _549) * cbLight._m0[_1864].y) * _1929) * _1664) + (((((_1829 * _1832) + _549) * cbLight._m0[_1779].y) * _1853) * _1675);
    float _1941 = (((((_1910 * _1833) + _550) * cbLight._m0[_1864].z) * _1929) * _1664) + (((((_1829 * _1833) + _550) * cbLight._m0[_1779].z) * _1853) * _1675);
    float _2003;
    float _2005;
    float _2007;
    if (_1716)
    {
        _2003 = _1939;
        _2005 = _1940;
        _2007 = _1941;
    }
    else
    {
        uint _2009 = _1641 + 2u;
        uint _2013 = _1641 + 10u;
        float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _476) * 0.949999988079071044921875);
        float _2028 = _2027 * _2027;
        float _2029 = cbLight._m0[_2009].x + _411;
        float _2030 = cbLight._m0[_2009].y + _412;
        float _2031 = cbLight._m0[_2009].z + _413;
        float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
        float _2036 = _2035 * _2029;
        float _2037 = _2035 * _2030;
        float _2038 = _2035 * _2031;
        float _2039 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_2009].xyz));
        float _4073 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2043 = dot(vec3(_328, _329, _330), vec3(_2036, _2037, _2038));
        float _4084 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2047 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2036, _2037, _2038));
        float _4095 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2051 = _2028 * _2028;
        float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
        float _2062 = exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0);
        float _2069 = 1.0 - _2028;
        float _2079 = (0.5 / (((_1808 * ((_2042 * _2069) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _2069) + _2028) * _2042))) * _2042;
        float _4106 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2081 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
        float _2082 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
        _2003 = (((((_2062 * _1830) + _547) * cbLight._m0[_2013].x) * _2081) * _2082) + _1939;
        _2005 = (((((_2062 * _1832) + _549) * cbLight._m0[_2013].y) * _2081) * _2082) + _1940;
        _2007 = (((((_2062 * _1833) + _550) * cbLight._m0[_2013].z) * _2081) * _2082) + _1941;
    }
    float _2117;
    float _2119;
    float _2121;
    if (_1734)
    {
        _2117 = _2003;
        _2119 = _2005;
        _2121 = _2007;
    }
    else
    {
        uint _2128 = _1641 + 3u;
        uint _2132 = _1641 + 11u;
        float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _476) * 0.949999988079071044921875);
        float _2147 = _2146 * _2146;
        float _2148 = cbLight._m0[_2128].x + _411;
        float _2149 = cbLight._m0[_2128].y + _412;
        float _2150 = cbLight._m0[_2128].z + _413;
        float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
        float _2155 = _2154 * _2148;
        float _2156 = _2154 * _2149;
        float _2157 = _2154 * _2150;
        float _2158 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_2128].xyz));
        float _4122 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2162 = dot(vec3(_328, _329, _330), vec3(_2155, _2156, _2157));
        float _4133 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2166 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2155, _2156, _2157));
        float _4144 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2170 = _2147 * _2147;
        float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
        float _2181 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
        float _2188 = 1.0 - _2147;
        float _2198 = (0.5 / (((_1808 * ((_2161 * _2188) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _2188) + _2147) * _2161))) * _2161;
        float _4155 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2200 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
        float _2201 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _2117 = (((((_2181 * _1830) + _547) * cbLight._m0[_2132].x) * _2200) * _2201) + _2003;
        _2119 = (((((_2181 * _1832) + _549) * cbLight._m0[_2132].y) * _2200) * _2201) + _2005;
        _2121 = (((((_2181 * _1833) + _550) * cbLight._m0[_2132].z) * _2200) * _2201) + _2007;
    }
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    if (_1639.y == 0u)
    {
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2276;
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2276;
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2276;
        uvec4 _2291 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2292 = _2291.x;
        uint _2303 = uint((float(_2291.y) * floor(float(uint(cbSceneParam._m0[85u].y * _433) / _2292))) + floor(float(uint(cbSceneParam._m0[85u].x * _432) / _2292)));
        float _2313 = (log2(_2279 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2314 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        uint _2317 = uint(isnan(14.0) ? _2314 : (isnan(_2314) ? 14.0 : min(_2314, 14.0)));
        uvec4 _2322 = texelFetch(g_lightClusterGridBuffer, int(((_2317 << 2u) + (_2303 << 6u)) >> 2u));
        uint _2323 = _2322.x;
        uint _2324 = _2291.z;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        if (((((1u << ((_2324 >> 4u) & 15u)) + 4294967295u) & _2323) == 0u) || ((_2324 & 240u) == 0u))
        {
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
        }
        else
        {
            float _2455;
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            uint _2621 = 0u;
            uint _2630;
            bool _2631;
            for (;;)
            {
                _2630 = texelFetch(g_lightClassification, int((((_2317 << 5u) + (_2303 << 9u)) + (_2621 << 2u)) >> 2u)).x;
                _2631 = _2630 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2631)
                {
                    frontier_phi_68_pred = _2617;
                    frontier_phi_68_pred_1 = _2620;
                    frontier_phi_68_pred_2 = _2619;
                    frontier_phi_68_pred_3 = _2618;
                    frontier_phi_68_pred_4 = _2616;
                    frontier_phi_68_pred_5 = _2615;
                }
                else
                {
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    uint _2766;
                    _2760 = _2615;
                    _2761 = _2616;
                    _2762 = _2617;
                    _2763 = _2618;
                    _2764 = _2619;
                    _2765 = _2620;
                    _2766 = _2630;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    for (;;)
                    {
                        uint _2770 = uint(findLSB(_2766)) + (_2621 << 5u);
                        uint _2767 = (_2766 + 4294967295u) & _2766;
                        uint _2772 = _2770 * 48u;
                        vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 3u)).x));
                        uint _2792 = (_2770 * 48u) + 4u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2811 = (_2770 * 48u) + 8u;
                        vec3 _2822 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x));
                        float _2826 = _2786.x - _2277;
                        float _2827 = _2786.y - _2278;
                        float _2828 = _2786.z - _2279;
                        float _2829 = dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828));
                        float _2832 = inversesqrt(_2829);
                        float _2833 = _2832 * _2826;
                        float _2834 = _2832 * _2827;
                        float _2835 = _2832 * _2828;
                        float _2836 = dot(vec3(_457, _460, _463), vec3(_2833, _2834, _2835));
                        float _2841 = 1.0 - (_2829 * _2786.w);
                        float _4181 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2842 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2843 = sqrt(_2829) * _2805.w;
                        float _2846 = 1.39999997615814208984375 / (_2843 + 1.39999997615814208984375);
                        float _2847 = _2846 * _2846;
                        float _2850 = ((1.0 - _2847) * _2836) + _2847;
                        float _2853 = _2843 * _2843;
                        float _2857 = ((isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))) * _2842) / ((_2853 * 0.699999988079071044921875) + 1.0);
                        float _2861 = (-0.0) - _2277;
                        float _2862 = (-0.0) - _2278;
                        float _2863 = (-0.0) - _2279;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2878 = exp2(log2(1.0 / ((_2853 * 3.5) + 5.0)) * 0.25);
                        float _2879 = 1.0 - _578;
                        float _2886 = sqrt(1.0 - ((1.0 - (_2879 * _2879)) * (1.0 - (_2878 * _2878))));
                        float _2887 = _2886 * _2886;
                        float _2888 = _2887 * _2887;
                        float _2889 = _2868 + _2833;
                        float _2890 = _2869 + _2834;
                        float _2891 = _2870 + _2835;
                        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
                        float _2899 = dot(vec3(_457, _460, _463), vec3(_2868, _2869, _2870));
                        float _4197 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2903 = dot(vec3(_457, _460, _463), vec3(_2895 * _2889, _2895 * _2890, _2895 * _2891));
                        float _4208 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2906 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2910 = ((_2906 * _2906) * (_2888 + (-1.0))) + 1.0;
                        float _2911 = _2846 * _2887;
                        float _2912 = _2911 * _2911;
                        float _2915 = ((1.0 - _2912) * _2836) + _2912;
                        float _4219 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                        float _2917 = 1.0 - _2887;
                        float _2927 = (0.5 / (((_2916 * ((_2902 * _2917) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2916 * _2917) + _2887) * _2902))) * _2916;
                        float _4230 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2938 = (((_2888 * 3.1415927410125732421875) * (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) / ((_2910 * _2910) * ((_2853 * 2.1991131305694580078125) + 3.141590118408203125))) * _2842;
                        _2690 = (_2857 * _2805.x) + _2763;
                        _2691 = (_2857 * _2805.y) + _2764;
                        _2692 = (_2857 * _2805.z) + _2765;
                        _2687 = (_2938 * _2822.x) + _2760;
                        _2688 = (_2938 * _2822.y) + _2761;
                        _2689 = (_2938 * _2822.z) + _2762;
                        if (_2767 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2760 = _2687;
                            _2761 = _2688;
                            _2762 = _2689;
                            _2763 = _2690;
                            _2764 = _2691;
                            _2765 = _2692;
                            _2766 = _2767;
                        }
                    }
                    frontier_phi_68_pred = _2689;
                    frontier_phi_68_pred_1 = _2692;
                    frontier_phi_68_pred_2 = _2691;
                    frontier_phi_68_pred_3 = _2690;
                    frontier_phi_68_pred_4 = _2688;
                    frontier_phi_68_pred_5 = _2687;
                }
                _2459 = frontier_phi_68_pred;
                _2465 = frontier_phi_68_pred_1;
                _2463 = frontier_phi_68_pred_2;
                _2461 = frontier_phi_68_pred_3;
                _2457 = frontier_phi_68_pred_4;
                _2455 = frontier_phi_68_pred_5;
                uint _2622 = _2621 + 1u;
                if (_2622 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2615 = _2455;
                    _2616 = _2457;
                    _2617 = _2459;
                    _2618 = _2461;
                    _2619 = _2463;
                    _2620 = _2465;
                    _2621 = _2622;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
        }
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.z;
        uint _2471 = (_2469 >> 8u) & 15u;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        if (((4294967295u << _2471) & _2323) == 0u)
        {
            _2583 = _2454;
            _2585 = _2456;
            _2587 = _2458;
            _2589 = _2460;
            _2591 = _2462;
            _2593 = _2464;
        }
        else
        {
            float _2608 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
            float _2609 = _2608 * _2277;
            float _2610 = _2608 * _2278;
            float _2611 = _2608 * _2279;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2471 < ((_2469 >> 12u) & 15u))
            {
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2594;
                float _2743 = _2454;
                float _2744 = _2456;
                float _2745 = _2458;
                float _2746 = _2460;
                float _2747 = _2462;
                float _2748 = _2464;
                uint _2749 = _2471;
                uint _2758;
                bool _2759;
                for (;;)
                {
                    _2758 = texelFetch(g_lightClassification, int((((_2317 << 5u) + (_2303 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                    _2759 = _2758 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2759)
                    {
                        frontier_phi_79_pred = _2748;
                        frontier_phi_79_pred_1 = _2747;
                        frontier_phi_79_pred_2 = _2746;
                        frontier_phi_79_pred_3 = _2745;
                        frontier_phi_79_pred_4 = _2744;
                        frontier_phi_79_pred_5 = _2743;
                    }
                    else
                    {
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _2965 = _2743;
                        float _2966 = _2744;
                        float _2967 = _2745;
                        float _2968 = _2746;
                        float _2969 = _2747;
                        float _2970 = _2748;
                        uint _2971 = _2758;
                        uint _2972;
                        vec4 _2997;
                        float _2998;
                        vec4 _3013;
                        vec3 _3025;
                        vec4 _3041;
                        vec4 _3057;
                        float _3104;
                        bool _3105;
                        for (;;)
                        {
                            uint _2982 = ((_2749 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2971));
                            _2972 = (_2971 + 4294967295u) & _2971;
                            uint _2984 = _2982 * 40u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            _2998 = _2997.w;
                            uint _3000 = (_2982 * 40u) + 4u;
                            _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3015 = (_2982 * 40u) + 8u;
                            _3025 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x));
                            uint _3028 = (_2982 * 40u) + 16u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3044 = (_2982 * 40u) + 20u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3060 = (_2982 * 40u) + 24u;
                            vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3079 = (_2982 * 40u) + 28u;
                            vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3104 = fma(_2279, _3092.z, fma(_2278, _3092.y, _3092.x * _2277)) + _3092.w;
                            _3105 = !((fma(_2279, _3073.z, fma(_2278, _3073.y, _3073.x * _2277)) + _3073.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3105)
                            {
                                float _3132 = _2997.x - _2277;
                                float _3133 = _2997.y - _2278;
                                float _3134 = _2997.z - _2279;
                                float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                                float _3138 = inversesqrt(_3135);
                                float _3139 = _3138 * _3132;
                                float _3140 = _3138 * _3133;
                                float _3141 = _3138 * _3134;
                                float _3145 = 1.0 - (_3135 / (_2998 * _2998));
                                float _4241 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3150 = sqrt(_3135) * _3013.w;
                                float _3152 = 1.39999997615814208984375 / (_3150 + 1.39999997615814208984375);
                                float _3153 = _3152 * _3152;
                                float _3156 = ((1.0 - _3153) * dot(vec3(_3139, _3140, _3141), vec3(_457, _460, _463))) + _3153;
                                float _3159 = _3150 * _3150;
                                float _3163 = (fma(_2279, _3041.z, fma(_2278, _3041.y, _3041.x * _2277)) + _3041.w) / _3104;
                                float _3164 = (fma(_2279, _3057.z, fma(_2278, _3057.y, _3057.x * _2277)) + _3057.w) / _3104;
                                float _3168 = 1.0 - dot(vec2(_3163, _3164), vec2(_3163, _3164));
                                float _4257 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3170 = _3169 * (((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3146) / ((_3159 * 0.699999988079071044921875) + 1.0));
                                float _3182 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                                float _3183 = 1.0 - _578;
                                float _3190 = sqrt(1.0 - ((1.0 - (_3183 * _3183)) * (1.0 - (_3182 * _3182))));
                                float _3191 = _3190 * _3190;
                                float _3192 = _3191 * _3191;
                                float _3193 = _3139 - _2609;
                                float _3194 = _3140 - _2610;
                                float _3195 = _3141 - _2611;
                                float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                                float _3203 = dot(vec3(_457, _460, _463), vec3((-0.0) - _2609, (-0.0) - _2610, (-0.0) - _2611));
                                float _4268 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3206 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3207 = dot(vec3(_457, _460, _463), vec3(_3199 * _3193, _3199 * _3194, _3199 * _3195));
                                float _4279 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3210 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3214 = ((_3210 * _3210) * (_3192 + (-1.0))) + 1.0;
                                float _3215 = _3152 * _3191;
                                float _3216 = _3215 * _3215;
                                float _3222 = ((1.0 - _3216) * dot(vec3(_457, _460, _463), vec3(_3139, _3140, _3141))) + _3216;
                                float _4290 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3224 = 1.0 - _3191;
                                float _3234 = (0.5 / (((_3223 * ((_3206 * _3224) + _3191)) + 9.9999999392252902907785028219223e-09) + (((_3223 * _3224) + _3191) * _3206))) * _3223;
                                float _4301 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3244 = (_3169 * _3146) * (((_3192 * 3.1415927410125732421875) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) / ((_3214 * _3214) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3170 * _3013.z;
                                frontier_phi_85_pred_1 = _3170 * _3013.y;
                                frontier_phi_85_pred_2 = _3170 * _3013.x;
                                frontier_phi_85_pred_3 = _3244 * _3025.z;
                                frontier_phi_85_pred_4 = _3244 * _3025.y;
                                frontier_phi_85_pred_5 = _3244 * _3025.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3253 = frontier_phi_85_pred;
                            _3252 = frontier_phi_85_pred_1;
                            _3251 = frontier_phi_85_pred_2;
                            _3250 = frontier_phi_85_pred_3;
                            _3249 = frontier_phi_85_pred_4;
                            _3248 = frontier_phi_85_pred_5;
                            _2955 = _3251 + _2968;
                            _2956 = _3252 + _2969;
                            _2957 = _3253 + _2970;
                            _2952 = _3248 + _2965;
                            _2953 = _3249 + _2966;
                            _2954 = _3250 + _2967;
                            if (_2972 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2965 = _2952;
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2972;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2957;
                        frontier_phi_79_pred_1 = _2956;
                        frontier_phi_79_pred_2 = _2955;
                        frontier_phi_79_pred_3 = _2954;
                        frontier_phi_79_pred_4 = _2953;
                        frontier_phi_79_pred_5 = _2952;
                    }
                    _2594 = frontier_phi_79_pred;
                    _2592 = frontier_phi_79_pred_1;
                    _2590 = frontier_phi_79_pred_2;
                    _2588 = frontier_phi_79_pred_3;
                    _2586 = frontier_phi_79_pred_4;
                    _2584 = frontier_phi_79_pred_5;
                    uint _2750 = _2749 + 1u;
                    if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2743 = _2584;
                        _2744 = _2586;
                        _2745 = _2588;
                        _2746 = _2590;
                        _2747 = _2592;
                        _2748 = _2594;
                        _2749 = _2750;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2590;
                frontier_phi_60_61_ladder_1 = _2594;
                frontier_phi_60_61_ladder_2 = _2592;
                frontier_phi_60_61_ladder_3 = _2588;
                frontier_phi_60_61_ladder_4 = _2586;
                frontier_phi_60_61_ladder_5 = _2584;
            }
            else
            {
                frontier_phi_60_61_ladder = _2460;
                frontier_phi_60_61_ladder_1 = _2464;
                frontier_phi_60_61_ladder_2 = _2462;
                frontier_phi_60_61_ladder_3 = _2458;
                frontier_phi_60_61_ladder_4 = _2456;
                frontier_phi_60_61_ladder_5 = _2454;
            }
            _2583 = frontier_phi_60_61_ladder_5;
            _2585 = frontier_phi_60_61_ladder_4;
            _2587 = frontier_phi_60_61_ladder_3;
            _2589 = frontier_phi_60_61_ladder;
            _2591 = frontier_phi_60_61_ladder_2;
            _2593 = frontier_phi_60_61_ladder_1;
        }
        float _2598 = isnan(1.0) ? _562 : (isnan(_562) ? 1.0 : min(_562, 1.0));
        _2335 = (_2598 * _2589) + _1772;
        _2337 = (_2598 * _2591) + _1774;
        _2339 = (_2598 * _2593) + _1776;
        _2341 = ((_2583 * _547) * _2598) + _2117;
        _2343 = ((_2585 * _549) * _2598) + _2119;
        _2345 = ((_2587 * _550) * _2598) + _2121;
    }
    else
    {
        _2335 = _1772;
        _2337 = _1774;
        _2339 = _1776;
        _2341 = _2117;
        _2343 = _2119;
        _2345 = _2121;
    }
    uint _2351 = _491 + uint(cbMatDynParam._m0[0u].w);
    float _2357 = (_307.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2351].x;
    float _2358 = (_307.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2351].y;
    float _2359 = (_307.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2351].z;
    float _4317 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _4328 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4339 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4350 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _2377 = (((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2335 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _562))) + ((_2341 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1404)) * cbPerFrame._m0[3u].x)) + _2357;
    float _2379 = (_2358 + ((_2343 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1404)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2337 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _562)));
    float _2381 = (_2359 + ((_2345 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1404)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2339 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _562)));
    float _2382 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2383 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2384 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2390 = cbMtdParam._m0[2u].x * _2357;
    float _2391 = cbMtdParam._m0[2u].y * _2358;
    float _2392 = cbMtdParam._m0[2u].z * _2359;
    float _4376 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2394 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2399 = cbInstanceData._m0[_489 + 6u].w * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)));
    float _2404 = _432 / cbSceneParam._m0[86u].x;
    float _2405 = _433 / cbSceneParam._m0[86u].y;
    vec4 _2419 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, (log2((isnan(cbSceneParam._m0[77u].w) ? _352 : (isnan(_352) ? cbSceneParam._m0[77u].w : min(_352, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2421 = _2419.x;
    float _2422 = _2419.y;
    float _2423 = _2419.z;
    float _2424 = _2419.w;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_352 > cbSceneParam._m0[78u].w)
    {
        float _2479 = isnan(_352) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _352 : min(cbSceneParam._m0[80u].w, _352));
        float _2480 = _2479 / _352;
        float _2491 = _2480 * _404;
        float _2492 = _405 * _2480;
        float _2493 = (-0.0) - _2492;
        float _2494 = _2480 * _406;
        float _2496 = (cbSceneParam._m0[77u].w * _2493) / _2479;
        float _2497 = _2496 + cbSceneParam._m0[79u].w;
        float _2498 = cbSceneParam._m0[79u].w - _2492;
        float _2504 = sqrt(((_2491 * _2491) + (_2492 * _2492)) + (_2494 * _2494));
        float _2507 = (1.0 - (cbSceneParam._m0[77u].w / _2479)) * _2504;
        float _2512 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2514 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2700;
        if (abs((_2493 - _2496) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2700 = ((((_2497 > 0.0) ? exp2(_2512 * _2497) : (2.0 - exp2(_2514 * _2497))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2507;
        }
        else
        {
            float _2644 = 1.0 / cbSceneParam._m0[80u].x;
            float _2645 = isnan(_2498) ? _2497 : (isnan(_2497) ? _2498 : max(_2497, _2498));
            float _2646 = isnan(_2498) ? _2497 : (isnan(_2497) ? _2498 : min(_2497, _2498));
            float _2655 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : min(_2645, 0.0));
            float _2656 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : min(_2646, 0.0));
            _2700 = ((abs(_2504 / _2493) * cbSceneParam._m0[80u].y) * ((((_2655 - _2656) * 2.0) - ((exp2(_2512 * (isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0)))) - exp2(_2512 * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0))))) * _2644)) - ((exp2(_2514 * _2655) - exp2(_2514 * _2656)) * _2644))) + (_2507 * cbSceneParam._m0[80u].z);
        }
        vec4 _2702 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, 1.0), 0.0);
        float _2711 = exp2((_2700 * (-1.44269502162933349609375)) * (1.0 - _2702.w));
        float _2712 = log2(_2711);
        float _2728 = log2(_2424);
        _2516 = (exp2(_2728 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].x)) * _2702.x) / cbSceneParam._m0[78u].x)) + _2421;
        _2518 = (exp2(_2728 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].y)) * _2702.y) / cbSceneParam._m0[78u].y)) + _2422;
        _2520 = (exp2(_2728 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].z)) * _2702.z) / cbSceneParam._m0[78u].z)) + _2423;
        _2522 = _2711 * _2424;
    }
    else
    {
        _2516 = _2421;
        _2518 = _2422;
        _2520 = _2423;
        _2522 = _2424;
    }
    bool _2738;
    vec4 _2532;
    vec4 _2554;
    float _2556;
    float _2560;
    float _2561;
    float _2562;
    float _2565;
    float _2568;
    float _2571;
    float _2572;
    bool _2582;
    for (;;)
    {
        _2532 = cbMatDynParam._m0[0u];
        float _2534 = roundEven(_2532.y);
        bool _2535 = _2534 == 3.0;
        float _2536 = log2(_2522);
        float _2540 = exp2(_2536 * cbSceneParam._m0[78u].x);
        float _2541 = exp2(_2536 * cbSceneParam._m0[78u].y);
        float _2542 = exp2(_2536 * cbSceneParam._m0[78u].z);
        float _2543 = _2540 * _2382;
        float _2544 = _2541 * _2383;
        float _2545 = _2542 * _2384;
        float _2552 = _420 + (-0.5);
        _2554 = cbMtdParam._m0[1u];
        _2556 = _2554.y * _2552;
        float _2559 = (_2534 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2560 = _2559 * (_2535 ? _2543 : (_2543 + (cbSceneParam._m0[72u].w * _2516)));
        _2561 = _2559 * (_2535 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2518)));
        _2562 = _2559 * (_2535 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2520)));
        _2565 = ((_2390 * _2394) * _2540) * _2559;
        _2568 = ((_2391 * _2394) * _2541) * _2559;
        _2571 = ((_2392 * _2394) * _2542) * _2559;
        _2572 = _2552 * 0.999000012874603271484375;
        _2582 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2582)
        {
            if ((cbInstanceData._m0[_489 + 7u].x + _2572) < 0.5)
            {
                _2738 = true;
                break;
            }
        }
        uint _2679 = _491 + uint(_2532.w);
        if ((cbInstanceData._m0[_2679].w < 1.0) && ((cbInstanceData._m0[_2679].w + _2572) < 0.5))
        {
            _2738 = true;
            break;
        }
        if ((_2556 + _246) < _2554.x)
        {
            _2738 = true;
            break;
        }
        _2738 = false;
        break;
    }
    float _2943;
    if (_2738)
    {
        discard_state = true;
        _2943 = 0.0;
    }
    else
    {
        _2943 = _2399;
    }
    SV_Target.x = _2560;
    SV_Target.y = _2561;
    SV_Target.z = _2562;
    SV_Target.w = _2943;
    SV_Target_1.x = _2565;
    SV_Target_1.y = _2568;
    SV_Target_1.z = _2571;
    SV_Target_1.w = _2399;
    discard_exit();
}


