#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1315;
float _3672;
float _3673;
float _3674;
float _3675;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3684 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3695 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3706 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[24u].z) + _441) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3717 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _469 = (_326.x * cbMtdParam._m0[9u].x) * ((_459 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357);
    float _470 = (_326.y * cbMtdParam._m0[9u].y) * ((_459 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358);
    float _471 = (_326.z * cbMtdParam._m0[9u].z) * ((_459 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359);
    float _475 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _469;
    float _478 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _470;
    float _481 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _471;
    float _489 = (((_469 - _475) * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) + _475) * 4.55000019073486328125;
    float _491 = (((_470 - _478) * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) + _478) * 4.55000019073486328125;
    float _493 = (((_471 - _481) * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) + _481) * 4.55000019073486328125;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _576 = _574.x;
    float _577 = _574.y;
    float _578 = _574.z;
    float _587 = ((_557.z - _578) * _459) + _578;
    float _590 = ((((_557.x - _576) * _459) + _576) * 2.0) + (-1.0);
    float _591 = ((((_557.y - _577) * _459) + _577) * 2.0) + (-1.0);
    float _592 = dot(vec2(_590, _591), vec2(_590, _591));
    float _3728 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _597 = sqrt(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _638 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _640 = _638.x;
    float _641 = 1.0 - _640;
    float _654 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_640 - _641) * cbMtdParam._m0[24u].w) + _641) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3739 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _655 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _662 = (_655 * ((_512.x * cbMtdParam._m0[18u].x) - _489)) + _489;
    float _663 = (_655 * ((_512.y * cbMtdParam._m0[18u].y) - _491)) + _491;
    float _664 = (_655 * ((_512.z * cbMtdParam._m0[18u].z) - _493)) + _493;
    float _669 = (((_532.z - _587) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _587;
    float _673 = ((_613.z - _669) * cbMtdParam._m0[19u].w) + _669;
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _693 = (_686.x * 2.0) + (-1.0);
    float _694 = (_686.y * 2.0) + (-1.0);
    float _695 = dot(vec2(_693, _694), vec2(_693, _694));
    float _3750 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _703 = (_655 * (_686.z - _673)) + _673;
    float _712 = (_590 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_532.x * 2.0) + (-1.0)))) + (((_613.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _713 = (_591 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_532.y * 2.0) + (-1.0)))) + (((_613.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _725 = (((_693 - _712) + (cbMtdParam._m0[21u].x * _712)) * _655) + _712;
    float _726 = (((_694 - _713) + (cbMtdParam._m0[21u].x * _713)) * _655) + _713;
    float _727 = (_655 * (sqrt(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) - _597)) + _597;
    float _729 = cbMtdParam._m0[22u].x + _613.w;
    float _731 = gl_FragCoord.x * 0.125;
    float _733 = gl_FragCoord.y * 0.125;
    float _743 = fma(_727, _236 * NORMAL.x, fma(_726, _243 * TANGENT.x, (_229 * _221) * _725));
    float _746 = fma(_727, _236 * NORMAL.y, fma(_726, _243 * TANGENT.y, (_229 * _222) * _725));
    float _749 = fma(_727, _236 * NORMAL.z, fma(_726, _243 * TANGENT.z, (_229 * _223) * _725));
    float _753 = inversesqrt(dot(vec3(_743, _746, _749), vec3(_743, _746, _749)));
    float _754 = _753 * _743;
    float _755 = _753 * _746;
    float _756 = _753 * _749;
    float _3761 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _757 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _3783 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3794 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3805 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_731, _733)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _779 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _830 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _820);
    float _831 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _820);
    float _832 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _820);
    float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
    float _837 = _830 * _836;
    float _838 = _831 * _836;
    float _839 = _832 * _836;
    vec4 _841 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_731, _733));
    float _843 = _841.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _997 = sqrt(((_830 * _830) + (_831 * _831)) + (_832 * _832));
        float _1003 = (cbMatDynParam._m0[5u].x * _997) + cbMatDynParam._m0[5u].y;
        float _3816 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1008 = (cbMatDynParam._m0[5u].z * _997) + cbMatDynParam._m0[5u].w;
        float _3827 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) - _1004)) + _1004) < ((_843 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _854 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _855 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _873 = fma(_756, cbSceneParam._m0[5u].z, fma(_755, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _754));
    float _876 = fma(_756, cbSceneParam._m0[6u].z, fma(_755, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _754));
    float _879 = fma(_756, cbSceneParam._m0[7u].z, fma(_755, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _754));
    uint _892 = _270 + 9u;
    uint _893 = _892 + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_893].z;
    float _3838 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    vec4 _913 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _854, cbSceneParam._m0[86u].y * _855));
    float _917 = ((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * TEXCOORD_5.w) * _913.x;
    float _918 = dot(vec3(_754, _755, _756), vec3(_837, _838, _839));
    float _921 = _918 * 2.0;
    float _925 = (_921 * _754) - _837;
    float _926 = (_921 * _755) - _838;
    float _927 = (_921 * _756) - _839;
    float _931 = abs(dot(vec3(_837, _838, _839), vec3(_754, _755, _756)));
    float _3871 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _933 = sqrt(_757);
    float _946 = exp2((_933 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_933 * 3.0));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1314;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1039 = fma(_986, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978));
        float _1043 = fma(_986, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978));
        float _1047 = fma(_986, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978));
        float _1072 = _978 + _754;
        float _1073 = _982 + _755;
        float _1074 = _986 + _756;
        float _1084 = fma(_1074, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072)) - _1039;
        float _1085 = fma(_1074, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072)) - _1043;
        float _1086 = fma(_1074, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072)) - _1047;
        float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
        float _1103 = ((_1090 * _1084) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1039 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1090 * _1085) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1043 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1090 * _1086) / cbModelParam._m0[34u].z) + ((((((_1047 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1142 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1108.x + (-0.5));
        float _1144 = _1142 * (_1108.y + (-0.5));
        float _1145 = _1142 * (_1108.z + (-0.5));
        float _1152 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1115.x + (-0.5));
        float _1154 = _1152 * (_1115.y + (-0.5));
        float _1155 = _1152 * (_1115.z + (-0.5));
        float _1162 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1122.x + (-0.5));
        float _1164 = _1162 * (_1122.y + (-0.5));
        float _1165 = _1162 * (_1122.z + (-0.5));
        float _1172 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1129.x + (-0.5));
        float _1174 = _1172 * (_1129.y + (-0.5));
        float _1175 = _1172 * (_1129.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1196 = (dot(vec3(_754, _755, _756), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1206 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3919 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1208 + 1.0))) + _1213) * _1176;
        float _1223 = _1144 * 0.5;
        float _1224 = _1154 * 0.5;
        float _1225 = _1164 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_754, _755, _756), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3952 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1250 + 1.0))) + _1255) * _1177;
        float _1265 = _1145 * 0.5;
        float _1266 = _1155 * 0.5;
        float _1267 = _1165 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_754, _755, _756), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3985 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1292 + 1.0))) + _1297) * _1178;
        _1314 = _1145;
        _1316 = _1144;
        _1317 = _1143;
        _1318 = _1155;
        _1319 = _1154;
        _1320 = _1153;
        _1321 = _1165;
        _1322 = _1164;
        _1323 = _1163;
        _1324 = _1178;
        _1325 = _1177;
        _1326 = _1176;
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1315;
        _1316 = _1315;
        _1317 = _1315;
        _1318 = _1315;
        _1319 = _1315;
        _1320 = _1315;
        _1321 = _1315;
        _1322 = _1315;
        _1323 = _1315;
        _1324 = _1315;
        _1325 = _1315;
        _1326 = _1315;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1354 = fma(_986, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978));
        float _1358 = fma(_986, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978));
        float _1362 = fma(_986, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978));
        float _1385 = _978 + _754;
        float _1386 = _982 + _755;
        float _1387 = _986 + _756;
        float _1397 = fma(_1387, cbModelParam._m0[30u].z, fma(_1386, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1385)) - _1354;
        float _1398 = fma(_1387, cbModelParam._m0[31u].z, fma(_1386, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1385)) - _1358;
        float _1399 = fma(_1387, cbModelParam._m0[32u].z, fma(_1386, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1385)) - _1362;
        float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
        float _1416 = ((_1403 * _1397) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1354 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1403 * _1398) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1358 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1403 * _1399) / cbModelParam._m0[35u].z) + ((((((_1362 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        float _1453 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1420.x + (-0.5));
        float _1455 = _1453 * (_1420.y + (-0.5));
        float _1456 = _1453 * (_1420.z + (-0.5));
        float _1463 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1427.x + (-0.5));
        float _1465 = _1463 * (_1427.y + (-0.5));
        float _1466 = _1463 * (_1427.z + (-0.5));
        float _1473 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1434.x + (-0.5));
        float _1475 = _1473 * (_1434.y + (-0.5));
        float _1476 = _1473 * (_1434.z + (-0.5));
        float _1483 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1441.x + (-0.5));
        float _1485 = _1483 * (_1441.y + (-0.5));
        float _1486 = _1483 * (_1441.z + (-0.5));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = _1454 * 0.5;
        float _1491 = _1464 * 0.5;
        float _1492 = _1474 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_754, _755, _756), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4048 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1517 + 1.0))) + _1522) * _1487;
        float _1532 = _1455 * 0.5;
        float _1533 = _1465 * 0.5;
        float _1534 = _1475 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_754, _755, _756), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4081 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1559 + 1.0))) + _1564) * _1488;
        float _1574 = _1456 * 0.5;
        float _1575 = _1466 * 0.5;
        float _1576 = _1476 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_754, _755, _756), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4114 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1601 + 1.0))) + _1606) * _1489;
        _1623 = _1456;
        _1624 = _1455;
        _1625 = _1454;
        _1626 = _1466;
        _1627 = _1465;
        _1628 = _1464;
        _1629 = _1476;
        _1630 = _1475;
        _1631 = _1474;
        _1632 = _1489;
        _1633 = _1488;
        _1634 = _1487;
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
    }
    else
    {
        _1623 = _1315;
        _1624 = _1315;
        _1625 = _1315;
        _1626 = _1315;
        _1627 = _1315;
        _1628 = _1315;
        _1629 = _1315;
        _1630 = _1315;
        _1631 = _1315;
        _1632 = _1315;
        _1633 = _1315;
        _1634 = _1315;
        _1635 = 0.0;
        _1636 = 0.0;
        _1637 = 0.0;
    }
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1327)) + _1327;
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1328)) + _1328;
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1329)) + _1329;
    float _1670 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1647));
    float _1691 = _925 * 0.5;
    float _1692 = _926 * 0.5;
    float _1693 = _927 * 0.5;
    float _1694 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1697 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1700 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1734;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1707 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1314, _1318, _1321, _1324));
        float _1711 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1715 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1722 = dot(vec4(cbModelParam._m0[39u]), vec4(_1691, _1692, _1693, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1722) ? 0.0 : (isnan(0.0) ? _1722 : max(0.0, _1722))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1745;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1736 = dot(vec4(cbModelParam._m0[40u]), vec4(_1691, _1692, _1693, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1749 = (_1745 * cbModelParam._m0[1u].x) + (_1734 * (1.0 - cbModelParam._m0[1u].x));
    float _1759 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _757);
    float _1760 = isnan(_1759) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1759 : min(cbModelParam._m0[25u].z, _1759));
    float _1840;
    float _1842;
    float _1844;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1807 = fma(_986, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978)) + cbModelParam._m0[13u].w;
        float _1811 = fma(_986, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978)) + cbModelParam._m0[14u].w;
        float _1815 = fma(_986, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978)) + cbModelParam._m0[15u].w;
        float _1818 = fma(_927, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925));
        float _1821 = fma(_927, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925));
        float _1824 = fma(_927, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925));
        float _1852;
        if (_1818 > 0.0)
        {
            _1852 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1852 = frontier_phi_19_17_ladder;
        }
        float _2052;
        if (_1821 > 0.0)
        {
            _2052 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2052 = frontier_phi_28_24_ladder;
        }
        float _2295;
        if (_1824 > 0.0)
        {
            _2295 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2295 = frontier_phi_40_35_ladder;
        }
        float _2297 = isnan(_2052) ? _1852 : (isnan(_1852) ? _2052 : min(_1852, _2052));
        float _2298 = isnan(_2295) ? _2297 : (isnan(_2297) ? _2295 : min(_2297, _2295));
        float _2302 = (_2298 * _1818) + _1807;
        float _2303 = (_2298 * _1821) + _1811;
        float _2304 = (_2298 * _1824) + _1815;
        float _2305 = _2298 * 9.9999997473787516355514526367188e-05;
        float _2307 = (-1.0) - _2305;
        float _2309 = _2305 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2304 > _2309) || ((_2304 < _2307) || ((_2303 > _2309) || ((_2303 < _2307) || ((_2302 < _2307) || (_2302 > _2309))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2428 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2304, cbModelParam._m0[9u].z, fma(_2303, cbModelParam._m0[9u].y, _2302 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2304, cbModelParam._m0[10u].z, fma(_2303, cbModelParam._m0[10u].y, _2302 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2304, cbModelParam._m0[11u].z, fma(_2303, cbModelParam._m0[11u].y, _2302 * cbModelParam._m0[11u].x))), _1760);
            frontier_phi_18_40_ladder = _2428.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2428.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2428.x * cbModelParam._m0[1u].y;
        }
        _1840 = frontier_phi_18_40_ladder_2;
        _1842 = frontier_phi_18_40_ladder_1;
        _1844 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1828 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_925, _926, _927), _1760);
        _1840 = _1828.x * cbModelParam._m0[1u].y;
        _1842 = _1828.y * cbModelParam._m0[1u].y;
        _1844 = _1828.z * cbModelParam._m0[1u].y;
    }
    float _1848 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _757);
    float _1849 = isnan(_1848) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1848 : min(cbModelParam._m0[25u].w, _1848));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1902 = fma(_986, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978)) + cbModelParam._m0[21u].w;
        float _1906 = fma(_986, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978)) + cbModelParam._m0[22u].w;
        float _1910 = fma(_986, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978)) + cbModelParam._m0[23u].w;
        float _1913 = fma(_927, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925));
        float _1916 = fma(_927, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925));
        float _1919 = fma(_927, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925));
        float _2057;
        if (_1913 > 0.0)
        {
            _2057 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2057 = frontier_phi_30_26_ladder;
        }
        float _2322;
        if (_1916 > 0.0)
        {
            _2322 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2322 = frontier_phi_42_37_ladder;
        }
        float _2527;
        if (_1919 > 0.0)
        {
            _2527 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2527 = frontier_phi_51_48_ladder;
        }
        float _2529 = isnan(_2322) ? _2057 : (isnan(_2057) ? _2322 : min(_2057, _2322));
        float _2530 = isnan(_2527) ? _2529 : (isnan(_2529) ? _2527 : min(_2529, _2527));
        float _2534 = (_2530 * _1913) + _1902;
        float _2535 = (_2530 * _1916) + _1906;
        float _2536 = (_2530 * _1919) + _1910;
        float _2537 = _2530 * 9.9999997473787516355514526367188e-05;
        float _2538 = (-1.0) - _2537;
        float _2540 = _2537 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2536 > _2540) || ((_2536 < _2538) || ((_2535 > _2540) || ((_2535 < _2538) || ((_2534 < _2538) || (_2534 > _2540))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2735 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2536, cbModelParam._m0[17u].z, fma(_2535, cbModelParam._m0[17u].y, _2534 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2536, cbModelParam._m0[18u].z, fma(_2535, cbModelParam._m0[18u].y, _2534 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2536, cbModelParam._m0[19u].z, fma(_2535, cbModelParam._m0[19u].y, _2534 * cbModelParam._m0[19u].x))), _1849);
            frontier_phi_27_51_ladder = _2735.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2735.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2735.x * cbModelParam._m0[1u].z;
        }
        _1938 = frontier_phi_27_51_ladder_2;
        _1940 = frontier_phi_27_51_ladder_1;
        _1942 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_925, _926, _927), _1849);
        _1938 = _1922.x * cbModelParam._m0[1u].z;
        _1940 = _1922.y * cbModelParam._m0[1u].z;
        _1942 = _1922.z * cbModelParam._m0[1u].z;
    }
    float _1954 = ((((1.0 - _946) * ((_933 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_946 * _933)) * _917;
    float _1955 = _1954 * ((cbModelParam._m0[1u].w * (_1938 - _1840)) + _1840);
    float _1956 = _1954 * ((cbModelParam._m0[1u].w * (_1940 - _1842)) + _1842);
    float _1957 = _1954 * ((cbModelParam._m0[1u].w * (_1942 - _1844)) + _1844);
    float _1960 = fma(_1957, cbSceneParam._m0[89u].z, fma(_1956, cbSceneParam._m0[89u].y, _1955 * cbSceneParam._m0[89u].x));
    float _1963 = fma(_1957, cbSceneParam._m0[90u].z, fma(_1956, cbSceneParam._m0[90u].y, _1955 * cbSceneParam._m0[90u].x));
    float _1966 = fma(_1957, cbSceneParam._m0[91u].z, fma(_1956, cbSceneParam._m0[91u].y, _1955 * cbSceneParam._m0[91u].x));
    uvec4 _1976 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1978 = _1976.x * 14u;
    uint _1979 = _1978 + 13u;
    float _1986 = _917 + (-1.0);
    float _1991 = (cbLight._m0[_1979].x * _1986) + 1.0;
    float _1992 = (cbLight._m0[_1979].y * _1986) + 1.0;
    float _1993 = (cbLight._m0[_1979].z * _1986) + 1.0;
    float _1994 = (cbLight._m0[_1979].w * _1986) + 1.0;
    uint _1995 = _1978 + 5u;
    float _2001 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2005 = _1978 + 4u;
    float _2011 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
    uint _2015 = _1978 | 1u;
    float _2026 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_754, _755, _756));
    float _2029 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_754, _755, _756));
    float _4250 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _4261 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2034 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _2036 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.3183098733425140380859375;
    float _2043 = ((cbLight._m0[_1995].x * _2001) * _2036) + ((cbLight._m0[_2005].x * _2011) * _2034);
    float _2044 = ((_2001 * cbLight._m0[_1995].y) * _2036) + ((_2011 * cbLight._m0[_2005].y) * _2034);
    float _2045 = ((_2001 * cbLight._m0[_1995].z) * _2036) + ((_2011 * cbLight._m0[_2005].z) * _2034);
    uvec4 _2049 = floatBitsToUint(cbLight._m0[_1978 + 12u]);
    bool _2051 = _2049.x == 0u;
    float _2062;
    float _2064;
    float _2066;
    if (_2051)
    {
        _2062 = _2043;
        _2064 = _2044;
        _2066 = _2045;
    }
    else
    {
        uint _2070 = _1978 + 6u;
        float _2086 = (dot(vec3(cbLight._m0[_1978 + 2u].xyz), vec3(_754, _755, _756)) * 0.5) + 0.5;
        float _2087 = _2086 * _2086;
        float _4272 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2088 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2089 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2062 = (((cbLight._m0[_2070].x * 0.3183098733425140380859375) * _2088) * _2089) + _2043;
        _2064 = (((cbLight._m0[_2070].y * 0.3183098733425140380859375) * _2088) * _2089) + _2044;
        _2066 = (((cbLight._m0[_2070].z * 0.3183098733425140380859375) * _2088) * _2089) + _2045;
    }
    bool _2069 = _2049.y == 0u;
    float _2107;
    float _2109;
    float _2111;
    if (_2069)
    {
        _2107 = _2062;
        _2109 = _2064;
        _2111 = _2066;
    }
    else
    {
        uint _2266 = _1978 + 7u;
        float _2282 = (dot(vec3(cbLight._m0[_1978 + 3u].xyz), vec3(_754, _755, _756)) * 0.5) + 0.5;
        float _2283 = _2282 * _2282;
        float _4288 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2284 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2285 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2107 = (((cbLight._m0[_2266].x * 0.3183098733425140380859375) * _2284) * _2285) + _2062;
        _2109 = (((cbLight._m0[_2266].y * 0.3183098733425140380859375) * _2284) * _2285) + _2064;
        _2111 = (((cbLight._m0[_2266].z * 0.3183098733425140380859375) * _2284) * _2285) + _2066;
    }
    uint _2114 = _1978 + 8u;
    float _2127 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _757) * 0.949999988079071044921875);
    float _2128 = _2127 * _2127;
    float _2129 = cbLight._m0[_1978].x + _837;
    float _2130 = cbLight._m0[_1978].y + _838;
    float _2131 = cbLight._m0[_1978].z + _839;
    float _2135 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
    float _2136 = _2135 * _2129;
    float _2137 = _2135 * _2130;
    float _2138 = _2135 * _2131;
    float _2139 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_1978].xyz));
    float _4304 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2143 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2144 = dot(vec3(_754, _755, _756), vec3(_2136, _2137, _2138));
    float _4326 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2136, _2137, _2138));
    float _4337 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = _2128 * _2128;
    float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
    float _2167 = (exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2168 = 1.0 - _2128;
    float _2179 = (0.5 / (((_2143 * ((_2142 * _2168) + _2128)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2168) + _2128) * _2142))) * _2142;
    float _4348 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2181 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
    uint _2192 = _1978 + 9u;
    float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _757) * 0.949999988079071044921875);
    float _2204 = _2203 * _2203;
    float _2205 = cbLight._m0[_2015].x + _837;
    float _2206 = cbLight._m0[_2015].y + _838;
    float _2207 = cbLight._m0[_2015].z + _839;
    float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
    float _2212 = _2211 * _2205;
    float _2213 = _2211 * _2206;
    float _2214 = _2211 * _2207;
    float _2215 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2015].xyz));
    float _4359 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2219 = dot(vec3(_754, _755, _756), vec3(_2212, _2213, _2214));
    float _4370 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2223 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2212, _2213, _2214));
    float _4381 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2227 = _2204 * _2204;
    float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
    float _2240 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2241 = 1.0 - _2204;
    float _2251 = (0.5 / (((_2143 * ((_2218 * _2241) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2241) + _2204) * _2218))) * _2218;
    float _4392 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2253 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
    float _2263 = (((_2240 * cbLight._m0[_2192].x) * _2253) * _2001) + (((_2167 * cbLight._m0[_2114].x) * _2181) * _2011);
    float _2264 = (((_2240 * cbLight._m0[_2192].y) * _2253) * _2001) + (((_2167 * cbLight._m0[_2114].y) * _2181) * _2011);
    float _2265 = (((_2240 * cbLight._m0[_2192].z) * _2253) * _2001) + (((_2167 * cbLight._m0[_2114].z) * _2181) * _2011);
    float _2327;
    float _2329;
    float _2331;
    if (_2051)
    {
        _2327 = _2263;
        _2329 = _2264;
        _2331 = _2265;
    }
    else
    {
        uint _2333 = _1978 + 2u;
        uint _2337 = _1978 + 10u;
        float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2333].w)) * _757) * 0.949999988079071044921875);
        float _2352 = _2351 * _2351;
        float _2353 = cbLight._m0[_2333].x + _837;
        float _2354 = cbLight._m0[_2333].y + _838;
        float _2355 = cbLight._m0[_2333].z + _839;
        float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
        float _2360 = _2359 * _2353;
        float _2361 = _2359 * _2354;
        float _2362 = _2359 * _2355;
        float _2363 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2333].xyz));
        float _4403 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2367 = dot(vec3(_754, _755, _756), vec3(_2360, _2361, _2362));
        float _4414 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2371 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_2360, _2361, _2362));
        float _4425 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2375 = _2352 * _2352;
        float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
        float _2388 = (exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2389 = 1.0 - _2352;
        float _2399 = (0.5 / (((_2143 * ((_2366 * _2389) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2389) + _2352) * _2366))) * _2366;
        float _4436 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2401 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
        float _2402 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2327 = (((_2388 * cbLight._m0[_2337].x) * _2401) * _2402) + _2263;
        _2329 = (((_2388 * cbLight._m0[_2337].y) * _2401) * _2402) + _2264;
        _2331 = (((_2388 * cbLight._m0[_2337].z) * _2401) * _2402) + _2265;
    }
    float _2437;
    float _2439;
    float _2441;
    if (_2069)
    {
        _2437 = _2327;
        _2439 = _2329;
        _2441 = _2331;
    }
    else
    {
        uint _2448 = _1978 + 3u;
        uint _2452 = _1978 + 11u;
        float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _757) * 0.949999988079071044921875);
        float _2467 = _2466 * _2466;
        float _2468 = cbLight._m0[_2448].x + _837;
        float _2469 = cbLight._m0[_2448].y + _838;
        float _2470 = cbLight._m0[_2448].z + _839;
        float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
        float _2475 = _2474 * _2468;
        float _2476 = _2474 * _2469;
        float _2477 = _2474 * _2470;
        float _2478 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2448].xyz));
        float _4452 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2482 = dot(vec3(_754, _755, _756), vec3(_2475, _2476, _2477));
        float _4463 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2486 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2475, _2476, _2477));
        float _4474 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2490 = _2467 * _2467;
        float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
        float _2503 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2504 = 1.0 - _2467;
        float _2514 = (0.5 / (((_2143 * ((_2481 * _2504) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2504) + _2467) * _2481))) * _2481;
        float _4485 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2516 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
        float _2517 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2437 = (((_2503 * cbLight._m0[_2452].x) * _2516) * _2517) + _2327;
        _2439 = (((_2503 * cbLight._m0[_2452].y) * _2516) * _2517) + _2329;
        _2441 = (((_2503 * cbLight._m0[_2452].z) * _2516) * _2517) + _2331;
    }
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    if (_1976.y == 0u)
    {
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2592;
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2592;
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2592;
        uvec4 _2607 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2608 = _2607.x;
        uint _2619 = uint((float(_2607.y) * floor(float(uint(cbSceneParam._m0[85u].y * _855) / _2608))) + floor(float(uint(cbSceneParam._m0[85u].x * _854) / _2608)));
        float _2629 = (log2(_2595 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2630 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        uint _2633 = uint(isnan(14.0) ? _2630 : (isnan(_2630) ? 14.0 : min(_2630, 14.0)));
        uvec4 _2638 = texelFetch(g_lightClusterGridBuffer, int(((_2633 << 2u) + (_2619 << 6u)) >> 2u));
        uint _2639 = _2638.x;
        uint _2640 = _2607.z;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        if (((((1u << ((_2640 >> 4u) & 15u)) + 4294967295u) & _2639) == 0u) || ((_2640 & 240u) == 0u))
        {
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
        }
        else
        {
            float _2741;
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            uint _2899 = 0u;
            uint _2908;
            bool _2909;
            for (;;)
            {
                _2908 = texelFetch(g_lightClassification, int((((_2633 << 5u) + (_2619 << 9u)) + (_2899 << 2u)) >> 2u)).x;
                _2909 = _2908 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2909)
                {
                    frontier_phi_68_pred = _2893;
                    frontier_phi_68_pred_1 = _2898;
                    frontier_phi_68_pred_2 = _2897;
                    frontier_phi_68_pred_3 = _2896;
                    frontier_phi_68_pred_4 = _2895;
                    frontier_phi_68_pred_5 = _2894;
                }
                else
                {
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    uint _3044;
                    _3038 = _2893;
                    _3039 = _2894;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2908;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    for (;;)
                    {
                        uint _3048 = uint(findLSB(_3044)) + (_2899 << 5u);
                        uint _3045 = (_3044 + 4294967295u) & _3044;
                        uint _3050 = _3048 * 48u;
                        vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 3u)).x));
                        uint _3070 = (_3048 * 48u) + 4u;
                        vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3089 = (_3048 * 48u) + 8u;
                        vec3 _3100 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x));
                        float _3104 = _3064.x - _2593;
                        float _3105 = _3064.y - _2594;
                        float _3106 = _3064.z - _2595;
                        float _3107 = dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106));
                        float _3110 = inversesqrt(_3107);
                        float _3111 = _3110 * _3104;
                        float _3112 = _3110 * _3105;
                        float _3113 = _3110 * _3106;
                        float _3114 = dot(vec3(_873, _876, _879), vec3(_3111, _3112, _3113));
                        float _3119 = 1.0 - (_3107 * _3064.w);
                        float _4511 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3120 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3121 = sqrt(_3107) * _3083.w;
                        float _3124 = 1.39999997615814208984375 / (_3121 + 1.39999997615814208984375);
                        float _3125 = _3124 * _3124;
                        float _3128 = ((1.0 - _3125) * _3114) + _3125;
                        float _3131 = _3121 * _3121;
                        float _3135 = ((isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))) * _3120) / ((_3131 * 0.699999988079071044921875) + 1.0);
                        float _3139 = (-0.0) - _2593;
                        float _3140 = (-0.0) - _2594;
                        float _3141 = (-0.0) - _2595;
                        float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                        float _3146 = _3145 * _3139;
                        float _3147 = _3145 * _3140;
                        float _3148 = _3145 * _3141;
                        float _3156 = exp2(log2(1.0 / ((_3131 * 3.5) + 5.0)) * 0.25);
                        float _3157 = 1.0 - _933;
                        float _3164 = sqrt(1.0 - ((1.0 - (_3157 * _3157)) * (1.0 - (_3156 * _3156))));
                        float _3165 = _3164 * _3164;
                        float _3166 = _3165 * _3165;
                        float _3167 = _3146 + _3111;
                        float _3168 = _3147 + _3112;
                        float _3169 = _3148 + _3113;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3177 = dot(vec3(_873, _876, _879), vec3(_3146, _3147, _3148));
                        float _4527 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3180 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3181 = dot(vec3(_873, _876, _879), vec3(_3173 * _3167, _3173 * _3168, _3173 * _3169));
                        float _4538 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3184 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3188 = ((_3184 * _3184) * (_3166 + (-1.0))) + 1.0;
                        float _3189 = _3124 * _3165;
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3114) + _3190;
                        float _4549 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3194 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3195 = 1.0 - _3165;
                        float _3205 = (0.5 / (((_3194 * ((_3180 * _3195) + _3165)) + 9.9999999392252902907785028219223e-09) + (((_3194 * _3195) + _3165) * _3180))) * _3194;
                        float _4560 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3216 = (((_3166 * 3.1415927410125732421875) * (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) / ((_3188 * _3188) * ((_3131 * 2.1991131305694580078125) + 3.141590118408203125))) * _3120;
                        _2968 = (_3135 * _3083.x) + _3041;
                        _2969 = (_3135 * _3083.y) + _3042;
                        _2970 = (_3135 * _3083.z) + _3043;
                        _2965 = (_3216 * _3100.x) + _3038;
                        _2966 = (_3216 * _3100.y) + _3039;
                        _2967 = (_3216 * _3100.z) + _3040;
                        if (_3045 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3038 = _2965;
                            _3039 = _2966;
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _3045;
                        }
                    }
                    frontier_phi_68_pred = _2965;
                    frontier_phi_68_pred_1 = _2970;
                    frontier_phi_68_pred_2 = _2969;
                    frontier_phi_68_pred_3 = _2968;
                    frontier_phi_68_pred_4 = _2967;
                    frontier_phi_68_pred_5 = _2966;
                }
                _2741 = frontier_phi_68_pred;
                _2751 = frontier_phi_68_pred_1;
                _2749 = frontier_phi_68_pred_2;
                _2747 = frontier_phi_68_pred_3;
                _2745 = frontier_phi_68_pred_4;
                _2743 = frontier_phi_68_pred_5;
                uint _2900 = _2899 + 1u;
                if (_2900 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2893 = _2741;
                    _2894 = _2743;
                    _2895 = _2745;
                    _2896 = _2747;
                    _2897 = _2749;
                    _2898 = _2751;
                    _2899 = _2900;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
        }
        uvec4 _2754 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2755 = _2754.z;
        uint _2757 = (_2755 >> 8u) & 15u;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        if (((4294967295u << _2757) & _2639) == 0u)
        {
            _2861 = _2740;
            _2863 = _2742;
            _2865 = _2744;
            _2867 = _2746;
            _2869 = _2748;
            _2871 = _2750;
        }
        else
        {
            float _2886 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
            float _2887 = _2886 * _2593;
            float _2888 = _2886 * _2594;
            float _2889 = _2886 * _2595;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2757 < ((_2755 >> 12u) & 15u))
            {
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _2872;
                float _3021 = _2740;
                float _3022 = _2742;
                float _3023 = _2744;
                float _3024 = _2746;
                float _3025 = _2748;
                float _3026 = _2750;
                uint _3027 = _2757;
                uint _3036;
                bool _3037;
                for (;;)
                {
                    _3036 = texelFetch(g_lightClassification, int((((_2633 << 5u) + (_2619 << 9u)) + (_3027 << 2u)) >> 2u)).x;
                    _3037 = _3036 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3037)
                    {
                        frontier_phi_79_pred = _3026;
                        frontier_phi_79_pred_1 = _3025;
                        frontier_phi_79_pred_2 = _3024;
                        frontier_phi_79_pred_3 = _3023;
                        frontier_phi_79_pred_4 = _3022;
                        frontier_phi_79_pred_5 = _3021;
                    }
                    else
                    {
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3243 = _3021;
                        float _3244 = _3022;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        float _3247 = _3025;
                        float _3248 = _3026;
                        uint _3249 = _3036;
                        uint _3250;
                        vec4 _3275;
                        float _3276;
                        vec4 _3291;
                        vec3 _3303;
                        vec4 _3318;
                        vec4 _3333;
                        float _3379;
                        bool _3380;
                        for (;;)
                        {
                            uint _3260 = ((_3027 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3249));
                            _3250 = (_3249 + 4294967295u) & _3249;
                            uint _3262 = _3260 * 40u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            _3276 = _3275.w;
                            uint _3278 = (_3260 * 40u) + 4u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3293 = (_3260 * 40u) + 8u;
                            _3303 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x));
                            uint _3305 = (_3260 * 40u) + 16u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3260 * 40u) + 20u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3260 * 40u) + 24u;
                            vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3354 = (_3260 * 40u) + 28u;
                            vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3379 = fma(_2595, _3367.z, fma(_2594, _3367.y, _3367.x * _2593)) + _3367.w;
                            _3380 = !((fma(_2595, _3348.z, fma(_2594, _3348.y, _3348.x * _2593)) + _3348.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3380)
                            {
                                float _3407 = _3275.x - _2593;
                                float _3408 = _3275.y - _2594;
                                float _3409 = _3275.z - _2595;
                                float _3410 = dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409));
                                float _3413 = inversesqrt(_3410);
                                float _3414 = _3413 * _3407;
                                float _3415 = _3413 * _3408;
                                float _3416 = _3413 * _3409;
                                float _3420 = 1.0 - (_3410 / (_3276 * _3276));
                                float _4571 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3425 = sqrt(_3410) * _3291.w;
                                float _3427 = 1.39999997615814208984375 / (_3425 + 1.39999997615814208984375);
                                float _3428 = _3427 * _3427;
                                float _3431 = ((1.0 - _3428) * dot(vec3(_3414, _3415, _3416), vec3(_873, _876, _879))) + _3428;
                                float _3434 = _3425 * _3425;
                                float _3438 = (fma(_2595, _3318.z, fma(_2594, _3318.y, _3318.x * _2593)) + _3318.w) / _3379;
                                float _3439 = (fma(_2595, _3333.z, fma(_2594, _3333.y, _3333.x * _2593)) + _3333.w) / _3379;
                                float _3443 = 1.0 - dot(vec2(_3438, _3439), vec2(_3438, _3439));
                                float _4587 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3445 = _3444 * (((isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0))) * _3421) / ((_3434 * 0.699999988079071044921875) + 1.0));
                                float _3457 = exp2(log2(1.0 / ((_3434 * 3.5) + 5.0)) * 0.25);
                                float _3458 = 1.0 - _933;
                                float _3465 = sqrt(1.0 - ((1.0 - (_3458 * _3458)) * (1.0 - (_3457 * _3457))));
                                float _3466 = _3465 * _3465;
                                float _3467 = _3466 * _3466;
                                float _3468 = _3414 - _2887;
                                float _3469 = _3415 - _2888;
                                float _3470 = _3416 - _2889;
                                float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                                float _3478 = dot(vec3(_873, _876, _879), vec3((-0.0) - _2887, (-0.0) - _2888, (-0.0) - _2889));
                                float _4598 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3481 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3482 = dot(vec3(_873, _876, _879), vec3(_3474 * _3468, _3474 * _3469, _3474 * _3470));
                                float _4609 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3485 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3489 = ((_3485 * _3485) * (_3467 + (-1.0))) + 1.0;
                                float _3490 = _3427 * _3466;
                                float _3491 = _3490 * _3490;
                                float _3497 = ((1.0 - _3491) * dot(vec3(_873, _876, _879), vec3(_3414, _3415, _3416))) + _3491;
                                float _4620 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3499 = 1.0 - _3466;
                                float _3509 = (0.5 / (((_3498 * ((_3481 * _3499) + _3466)) + 9.9999999392252902907785028219223e-09) + (((_3498 * _3499) + _3466) * _3481))) * _3498;
                                float _4631 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3519 = (_3444 * _3421) * (((_3467 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3489 * _3489) * ((_3434 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3445 * _3291.y;
                                frontier_phi_85_pred_1 = _3445 * _3291.x;
                                frontier_phi_85_pred_2 = _3519 * _3303.z;
                                frontier_phi_85_pred_3 = _3519 * _3303.y;
                                frontier_phi_85_pred_4 = _3519 * _3303.x;
                                frontier_phi_85_pred_5 = _3445 * _3291.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3527 = frontier_phi_85_pred;
                            _3526 = frontier_phi_85_pred_1;
                            _3525 = frontier_phi_85_pred_2;
                            _3524 = frontier_phi_85_pred_3;
                            _3523 = frontier_phi_85_pred_4;
                            _3528 = frontier_phi_85_pred_5;
                            _3233 = _3526 + _3246;
                            _3234 = _3527 + _3247;
                            _3235 = _3528 + _3248;
                            _3230 = _3523 + _3243;
                            _3231 = _3524 + _3244;
                            _3232 = _3525 + _3245;
                            if (_3250 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3250;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3235;
                        frontier_phi_79_pred_1 = _3234;
                        frontier_phi_79_pred_2 = _3233;
                        frontier_phi_79_pred_3 = _3232;
                        frontier_phi_79_pred_4 = _3231;
                        frontier_phi_79_pred_5 = _3230;
                    }
                    _2872 = frontier_phi_79_pred;
                    _2870 = frontier_phi_79_pred_1;
                    _2868 = frontier_phi_79_pred_2;
                    _2866 = frontier_phi_79_pred_3;
                    _2864 = frontier_phi_79_pred_4;
                    _2862 = frontier_phi_79_pred_5;
                    uint _3028 = _3027 + 1u;
                    if (_3028 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3021 = _2862;
                        _3022 = _2864;
                        _3023 = _2866;
                        _3024 = _2868;
                        _3025 = _2870;
                        _3026 = _2872;
                        _3027 = _3028;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2866;
                frontier_phi_60_61_ladder_1 = _2872;
                frontier_phi_60_61_ladder_2 = _2870;
                frontier_phi_60_61_ladder_3 = _2868;
                frontier_phi_60_61_ladder_4 = _2864;
                frontier_phi_60_61_ladder_5 = _2862;
            }
            else
            {
                frontier_phi_60_61_ladder = _2744;
                frontier_phi_60_61_ladder_1 = _2750;
                frontier_phi_60_61_ladder_2 = _2748;
                frontier_phi_60_61_ladder_3 = _2746;
                frontier_phi_60_61_ladder_4 = _2742;
                frontier_phi_60_61_ladder_5 = _2740;
            }
            _2861 = frontier_phi_60_61_ladder_5;
            _2863 = frontier_phi_60_61_ladder_4;
            _2865 = frontier_phi_60_61_ladder;
            _2867 = frontier_phi_60_61_ladder_3;
            _2869 = frontier_phi_60_61_ladder_2;
            _2871 = frontier_phi_60_61_ladder_1;
        }
        float _2876 = isnan(1.0) ? _917 : (isnan(_917) ? 1.0 : min(_917, 1.0));
        _2652 = (_2876 * _2867) + _2107;
        _2654 = (_2876 * _2869) + _2109;
        _2656 = (_2876 * _2871) + _2111;
        _2658 = ((_2861 * 0.039999999105930328369140625) * _2876) + _2437;
        _2660 = ((_2863 * 0.039999999105930328369140625) * _2876) + _2439;
        _2662 = ((_2865 * 0.039999999105930328369140625) * _2876) + _2441;
    }
    else
    {
        _2652 = _2107;
        _2654 = _2109;
        _2656 = _2111;
        _2658 = _2437;
        _2660 = _2439;
        _2662 = _2441;
    }
    float _4647 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4658 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4669 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _2679 = ((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2652 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _917))) + ((_2658 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1749)) * cbPerFrame._m0[3u].x);
    float _2680 = ((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2654 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _917))) + ((_2660 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1749)) * cbPerFrame._m0[3u].x);
    float _2681 = ((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2656 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _917))) + ((_2662 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1749)) * cbPerFrame._m0[3u].x);
    uint _2682 = _270 + 6u;
    float _2690 = _854 / cbSceneParam._m0[86u].x;
    float _2691 = _855 / cbSceneParam._m0[86u].y;
    vec4 _2705 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2690, _2691, (log2((isnan(cbSceneParam._m0[77u].w) ? _779 : (isnan(_779) ? cbSceneParam._m0[77u].w : min(_779, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2707 = _2705.x;
    float _2708 = _2705.y;
    float _2709 = _2705.z;
    float _2710 = _2705.w;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    if (_779 > cbSceneParam._m0[78u].w)
    {
        float _2765 = isnan(_779) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _779 : min(cbSceneParam._m0[80u].w, _779));
        float _2766 = _2765 / _779;
        float _2777 = _2766 * _830;
        float _2778 = _831 * _2766;
        float _2779 = (-0.0) - _2778;
        float _2781 = _2766 * _832;
        float _2783 = (cbSceneParam._m0[77u].w * _2779) / _2765;
        float _2784 = _2783 + cbSceneParam._m0[79u].w;
        float _2785 = cbSceneParam._m0[79u].w - _2778;
        float _2791 = sqrt(((_2777 * _2777) + (_2778 * _2778)) + (_2781 * _2781));
        float _2794 = (1.0 - (cbSceneParam._m0[77u].w / _2765)) * _2791;
        float _2799 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2801 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2978;
        if (abs((_2779 - _2783) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2978 = ((((_2784 > 0.0) ? exp2(_2799 * _2784) : (2.0 - exp2(_2801 * _2784))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2794;
        }
        else
        {
            float _2922 = 1.0 / cbSceneParam._m0[80u].x;
            float _2923 = isnan(_2785) ? _2784 : (isnan(_2784) ? _2785 : max(_2784, _2785));
            float _2924 = isnan(_2785) ? _2784 : (isnan(_2784) ? _2785 : min(_2784, _2785));
            float _2933 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : min(_2923, 0.0));
            float _2934 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : min(_2924, 0.0));
            _2978 = ((abs(_2791 / _2779) * cbSceneParam._m0[80u].y) * ((((_2933 - _2934) * 2.0) - ((exp2(_2799 * (isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0)))) - exp2(_2799 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))))) * _2922)) - ((exp2(_2801 * _2933) - exp2(_2801 * _2934)) * _2922))) + (_2794 * cbSceneParam._m0[80u].z);
        }
        vec4 _2980 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2690, _2691, 1.0), 0.0);
        float _2989 = exp2((_2978 * (-1.44269502162933349609375)) * (1.0 - _2980.w));
        float _2990 = log2(_2989);
        float _3006 = log2(_2710);
        _2803 = (exp2(_3006 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2990 * cbSceneParam._m0[78u].x)) * _2980.x) / cbSceneParam._m0[78u].x)) + _2707;
        _2805 = (exp2(_3006 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2990 * cbSceneParam._m0[78u].y)) * _2980.y) / cbSceneParam._m0[78u].y)) + _2708;
        _2807 = (exp2(_3006 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2990 * cbSceneParam._m0[78u].z)) * _2980.z) / cbSceneParam._m0[78u].z)) + _2709;
        _2809 = _2989 * _2710;
    }
    else
    {
        _2803 = _2707;
        _2805 = _2708;
        _2807 = _2709;
        _2809 = _2710;
    }
    bool _3016;
    vec4 _2819;
    vec4 _2841;
    float _2843;
    float _2847;
    float _2848;
    float _2849;
    float _2850;
    bool _2860;
    for (;;)
    {
        _2819 = cbMatDynParam._m0[0u];
        float _2821 = roundEven(_2819.y);
        bool _2822 = _2821 == 3.0;
        float _2823 = log2(_2809);
        float _2830 = exp2(_2823 * cbSceneParam._m0[78u].x) * _2679;
        float _2831 = exp2(_2823 * cbSceneParam._m0[78u].y) * _2680;
        float _2832 = exp2(_2823 * cbSceneParam._m0[78u].z) * _2681;
        float _2839 = _843 + (-0.5);
        _2841 = cbMtdParam._m0[1u];
        _2843 = _2841.y * _2839;
        float _2846 = (_2821 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2847 = _2846 * (_2822 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2803)));
        _2848 = _2846 * (_2822 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2805)));
        _2849 = _2846 * (_2822 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2807)));
        _2850 = _2839 * 0.999000012874603271484375;
        _2860 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2860)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _2850) < 0.5)
            {
                _3016 = true;
                break;
            }
        }
        uint _2957 = _892 + uint(_2819.w);
        if ((cbInstanceData._m0[_2957].w < 1.0) && ((cbInstanceData._m0[_2957].w + _2850) < 0.5))
        {
            _3016 = true;
            break;
        }
        if ((_2843 + 1.0) < _2841.x)
        {
            _3016 = true;
            break;
        }
        _3016 = false;
        break;
    }
    float _3221;
    if (_3016)
    {
        discard_state = true;
        _3221 = 0.0;
    }
    else
    {
        _3221 = cbInstanceData._m0[_2682].w;
    }
    SV_Target.x = _2847;
    SV_Target.y = _2848;
    SV_Target.z = _2849;
    SV_Target.w = _3221;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2682].w;
    discard_exit();
}


