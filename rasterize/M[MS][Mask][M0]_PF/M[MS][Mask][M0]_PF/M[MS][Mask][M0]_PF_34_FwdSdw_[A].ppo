#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1319;
float _3959;
float _3960;
float _3961;
float _3962;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3971 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3982 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3993 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[24u].z) + _445) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4004 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _473 = (_330.x * cbMtdParam._m0[9u].x) * ((_463 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361);
    float _474 = (_330.y * cbMtdParam._m0[9u].y) * ((_463 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362);
    float _475 = (_330.z * cbMtdParam._m0[9u].z) * ((_463 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363);
    float _479 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _473;
    float _482 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _474;
    float _485 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _475;
    float _493 = (((_473 - _479) * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) + _479) * 4.55000019073486328125;
    float _495 = (((_474 - _482) * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) + _482) * 4.55000019073486328125;
    float _497 = (((_475 - _485) * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) + _485) * 4.55000019073486328125;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _293) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _294) + cbTextureTilingScale._m0[14u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _580 = _578.x;
    float _581 = _578.y;
    float _582 = _578.z;
    float _591 = ((_561.z - _582) * _463) + _582;
    float _594 = ((((_561.x - _580) * _463) + _580) * 2.0) + (-1.0);
    float _595 = ((((_561.y - _581) * _463) + _581) * 2.0) + (-1.0);
    float _596 = dot(vec2(_594, _595), vec2(_594, _595));
    float _4015 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _601 = sqrt(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _644 = _642.x;
    float _645 = 1.0 - _644;
    float _658 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_644 - _645) * cbMtdParam._m0[24u].w) + _645) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4026 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _666 = (_659 * ((_516.x * cbMtdParam._m0[18u].x) - _493)) + _493;
    float _667 = (_659 * ((_516.y * cbMtdParam._m0[18u].y) - _495)) + _495;
    float _668 = (_659 * ((_516.z * cbMtdParam._m0[18u].z) - _497)) + _497;
    float _673 = (((_536.z - _591) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _591;
    float _677 = ((_617.z - _673) * cbMtdParam._m0[19u].w) + _673;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _697 = (_690.x * 2.0) + (-1.0);
    float _698 = (_690.y * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _4037 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _707 = (_659 * (_690.z - _677)) + _677;
    float _716 = (_594 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_536.x * 2.0) + (-1.0)))) + (((_617.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _717 = (_595 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_536.y * 2.0) + (-1.0)))) + (((_617.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _729 = (((_697 - _716) + (cbMtdParam._m0[21u].x * _716)) * _659) + _716;
    float _730 = (((_698 - _717) + (cbMtdParam._m0[21u].x * _717)) * _659) + _717;
    float _731 = (_659 * (sqrt(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) - _601)) + _601;
    float _733 = cbMtdParam._m0[22u].x + _617.w;
    float _735 = gl_FragCoord.x * 0.125;
    float _737 = gl_FragCoord.y * 0.125;
    float _747 = fma(_731, _240 * NORMAL.x, fma(_730, _247 * TANGENT.x, (_233 * _225) * _729));
    float _750 = fma(_731, _240 * NORMAL.y, fma(_730, _247 * TANGENT.y, (_233 * _226) * _729));
    float _753 = fma(_731, _240 * NORMAL.z, fma(_730, _247 * TANGENT.z, (_233 * _227) * _729));
    float _757 = inversesqrt(dot(vec3(_747, _750, _753), vec3(_747, _750, _753)));
    float _758 = _757 * _747;
    float _759 = _757 * _750;
    float _760 = _757 * _753;
    float _4048 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _761 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4070 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4081 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4092 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_735, _737)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _783 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _834 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _824);
    float _835 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _824);
    float _836 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _824);
    float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
    float _841 = _834 * _840;
    float _842 = _835 * _840;
    float _843 = _836 * _840;
    vec4 _845 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_735, _737));
    float _847 = _845.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1001 = sqrt(((_834 * _834) + (_835 * _835)) + (_836 * _836));
        float _1007 = (cbMatDynParam._m0[5u].x * _1001) + cbMatDynParam._m0[5u].y;
        float _4103 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1012 = (cbMatDynParam._m0[5u].z * _1001) + cbMatDynParam._m0[5u].w;
        float _4114 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) - _1008)) + _1008) < ((_847 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _858 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _859 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _877 = fma(_760, cbSceneParam._m0[5u].z, fma(_759, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _758));
    float _880 = fma(_760, cbSceneParam._m0[6u].z, fma(_759, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _758));
    float _883 = fma(_760, cbSceneParam._m0[7u].z, fma(_759, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _758));
    uint _896 = _274 + 9u;
    uint _897 = _896 + uint(cbMatDynParam._m0[0u].w);
    float _903 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_897].x;
    float _904 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * cbInstanceData._m0[_897].y;
    float _905 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * cbInstanceData._m0[_897].z;
    float _4125 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    vec4 _917 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _858, cbSceneParam._m0[86u].y * _859));
    float _921 = ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * TEXCOORD_5.w) * _917.x;
    float _922 = dot(vec3(_758, _759, _760), vec3(_841, _842, _843));
    float _925 = _922 * 2.0;
    float _929 = (_925 * _758) - _841;
    float _930 = (_925 * _759) - _842;
    float _931 = (_925 * _760) - _843;
    float _935 = abs(dot(vec3(_841, _842, _843), vec3(_758, _759, _760)));
    float _4158 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _937 = sqrt(_761);
    float _950 = exp2((_937 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_937 * 3.0));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_990, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _982));
        float _1047 = fma(_990, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _982));
        float _1051 = fma(_990, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _982));
        float _1076 = _982 + _758;
        float _1077 = _986 + _759;
        float _1078 = _990 + _760;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1043;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1047;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1051;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_758, _759, _760), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4206 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_758, _759, _760), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4239 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_758, _759, _760), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4272 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1358 = fma(_990, cbModelParam._m0[30u].z, fma(_986, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982));
        float _1362 = fma(_990, cbModelParam._m0[31u].z, fma(_986, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982));
        float _1366 = fma(_990, cbModelParam._m0[32u].z, fma(_986, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982));
        float _1389 = _982 + _758;
        float _1390 = _986 + _759;
        float _1391 = _990 + _760;
        float _1401 = fma(_1391, cbModelParam._m0[30u].z, fma(_1390, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1389)) - _1358;
        float _1402 = fma(_1391, cbModelParam._m0[31u].z, fma(_1390, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1389)) - _1362;
        float _1403 = fma(_1391, cbModelParam._m0[32u].z, fma(_1390, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1389)) - _1366;
        float _1407 = inversesqrt(dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403)));
        float _1420 = ((_1407 * _1401) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1358 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1407 * _1402) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1362 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1407 * _1403) / cbModelParam._m0[35u].z) + ((((((_1366 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        float _1457 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1424.x + (-0.5));
        float _1459 = _1457 * (_1424.y + (-0.5));
        float _1460 = _1457 * (_1424.z + (-0.5));
        float _1467 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1431.x + (-0.5));
        float _1469 = _1467 * (_1431.y + (-0.5));
        float _1470 = _1467 * (_1431.z + (-0.5));
        float _1477 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1438.x + (-0.5));
        float _1479 = _1477 * (_1438.y + (-0.5));
        float _1480 = _1477 * (_1438.z + (-0.5));
        float _1487 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1445.x + (-0.5));
        float _1489 = _1487 * (_1445.y + (-0.5));
        float _1490 = _1487 * (_1445.z + (-0.5));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = _1458 * 0.5;
        float _1495 = _1468 * 0.5;
        float _1496 = _1478 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_758, _759, _760), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4335 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1521 + 1.0))) + _1526) * _1491;
        float _1536 = _1459 * 0.5;
        float _1537 = _1469 * 0.5;
        float _1538 = _1479 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_758, _759, _760), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4368 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1563 + 1.0))) + _1568) * _1492;
        float _1578 = _1460 * 0.5;
        float _1579 = _1470 * 0.5;
        float _1580 = _1480 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_758, _759, _760), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4379 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4390 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4401 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_1605 + 1.0))) + _1610) * _1493;
        _1627 = _1460;
        _1628 = _1459;
        _1629 = _1458;
        _1630 = _1470;
        _1631 = _1469;
        _1632 = _1468;
        _1633 = _1480;
        _1634 = _1479;
        _1635 = _1478;
        _1636 = _1493;
        _1637 = _1492;
        _1638 = _1491;
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
    }
    else
    {
        _1627 = _1319;
        _1628 = _1319;
        _1629 = _1319;
        _1630 = _1319;
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = _1319;
        _1638 = _1319;
        _1639 = 0.0;
        _1640 = 0.0;
        _1641 = 0.0;
    }
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1331)) + _1331;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1332)) + _1332;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1333)) + _1333;
    float _1674 = fma(_1653, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1653, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1653, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1651));
    float _1695 = _929 * 0.5;
    float _1696 = _930 * 0.5;
    float _1697 = _931 * 0.5;
    float _1698 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1701 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1704 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1738;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1711 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1715 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1719 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1726 = dot(vec4(cbModelParam._m0[39u]), vec4(_1695, _1696, _1697, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1749;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1740 = dot(vec4(cbModelParam._m0[40u]), vec4(_1695, _1696, _1697, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1753 = (_1749 * cbModelParam._m0[1u].x) + (_1738 * (1.0 - cbModelParam._m0[1u].x));
    float _1763 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _761);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1763 : min(cbModelParam._m0[25u].z, _1763));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1811 = fma(_990, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982)) + cbModelParam._m0[13u].w;
        float _1815 = fma(_990, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982)) + cbModelParam._m0[14u].w;
        float _1819 = fma(_990, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982)) + cbModelParam._m0[15u].w;
        float _1822 = fma(_931, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _929));
        float _1825 = fma(_931, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _929));
        float _1828 = fma(_931, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _929));
        float _1856;
        if (_1822 > 0.0)
        {
            _1856 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1856 = frontier_phi_19_17_ladder;
        }
        float _2025;
        if (_1825 > 0.0)
        {
            _2025 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2025 = frontier_phi_28_24_ladder;
        }
        float _2320;
        if (_1828 > 0.0)
        {
            _2320 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2320 = frontier_phi_40_35_ladder;
        }
        float _2322 = isnan(_2025) ? _1856 : (isnan(_1856) ? _2025 : min(_1856, _2025));
        float _2323 = isnan(_2320) ? _2322 : (isnan(_2322) ? _2320 : min(_2322, _2320));
        float _2327 = (_2323 * _1822) + _1811;
        float _2328 = (_2323 * _1825) + _1815;
        float _2329 = (_2323 * _1828) + _1819;
        float _2330 = _2323 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2330;
        float _2334 = _2330 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 > _2334) || ((_2328 < _2332) || ((_2327 < _2332) || (_2327 > _2334))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2329, cbModelParam._m0[9u].z, fma(_2328, cbModelParam._m0[9u].y, _2327 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2329, cbModelParam._m0[10u].z, fma(_2328, cbModelParam._m0[10u].y, _2327 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2329, cbModelParam._m0[11u].z, fma(_2328, cbModelParam._m0[11u].y, _2327 * cbModelParam._m0[11u].x))), _1764);
            frontier_phi_18_40_ladder = _2474.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2474.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2474.x * cbModelParam._m0[1u].y;
        }
        _1844 = frontier_phi_18_40_ladder_2;
        _1846 = frontier_phi_18_40_ladder_1;
        _1848 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_929, _930, _931), _1764);
        _1844 = _1832.x * cbModelParam._m0[1u].y;
        _1846 = _1832.y * cbModelParam._m0[1u].y;
        _1848 = _1832.z * cbModelParam._m0[1u].y;
    }
    float _1852 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _761);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1852 : min(cbModelParam._m0[25u].w, _1852));
    float _1942;
    float _1944;
    float _1946;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1906 = fma(_990, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982)) + cbModelParam._m0[21u].w;
        float _1910 = fma(_990, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982)) + cbModelParam._m0[22u].w;
        float _1914 = fma(_990, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982)) + cbModelParam._m0[23u].w;
        float _1917 = fma(_931, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _929));
        float _1920 = fma(_931, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _929));
        float _1923 = fma(_931, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _929));
        float _2030;
        if (_1917 > 0.0)
        {
            _2030 = abs((1.0 - _1906) / _1917);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1906 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2030 = frontier_phi_30_26_ladder;
        }
        float _2347;
        if (_1920 > 0.0)
        {
            _2347 = abs((1.0 - _1910) / _1920);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1910 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2347 = frontier_phi_42_37_ladder;
        }
        float _2674;
        if (_1923 > 0.0)
        {
            _2674 = abs((1.0 - _1914) / _1923);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1914 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2674 = frontier_phi_52_49_ladder;
        }
        float _2676 = isnan(_2347) ? _2030 : (isnan(_2030) ? _2347 : min(_2030, _2347));
        float _2677 = isnan(_2674) ? _2676 : (isnan(_2676) ? _2674 : min(_2676, _2674));
        float _2681 = (_2677 * _1917) + _1906;
        float _2682 = (_2677 * _1920) + _1910;
        float _2683 = (_2677 * _1923) + _1914;
        float _2684 = _2677 * 9.9999997473787516355514526367188e-05;
        float _2685 = (-1.0) - _2684;
        float _2687 = _2684 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2683 > _2687) || ((_2683 < _2685) || ((_2682 > _2687) || ((_2682 < _2685) || ((_2681 < _2685) || (_2681 > _2687))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2683, cbModelParam._m0[17u].z, fma(_2682, cbModelParam._m0[17u].y, _2681 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2683, cbModelParam._m0[18u].z, fma(_2682, cbModelParam._m0[18u].y, _2681 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2683, cbModelParam._m0[19u].z, fma(_2682, cbModelParam._m0[19u].y, _2681 * cbModelParam._m0[19u].x))), _1853);
            frontier_phi_27_52_ladder = _2801.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2801.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2801.x * cbModelParam._m0[1u].z;
        }
        _1942 = frontier_phi_27_52_ladder_2;
        _1944 = frontier_phi_27_52_ladder_1;
        _1946 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_929, _930, _931), _1853);
        _1942 = _1926.x * cbModelParam._m0[1u].z;
        _1944 = _1926.y * cbModelParam._m0[1u].z;
        _1946 = _1926.z * cbModelParam._m0[1u].z;
    }
    float _1958 = ((((1.0 - _950) * ((_937 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_950 * _937)) * _921;
    float _1959 = _1958 * ((cbModelParam._m0[1u].w * (_1942 - _1844)) + _1844);
    float _1960 = _1958 * ((cbModelParam._m0[1u].w * (_1944 - _1846)) + _1846);
    float _1961 = _1958 * ((cbModelParam._m0[1u].w * (_1946 - _1848)) + _1848);
    float _1964 = fma(_1961, cbSceneParam._m0[89u].z, fma(_1960, cbSceneParam._m0[89u].y, _1959 * cbSceneParam._m0[89u].x));
    float _1967 = fma(_1961, cbSceneParam._m0[90u].z, fma(_1960, cbSceneParam._m0[90u].y, _1959 * cbSceneParam._m0[90u].x));
    float _1970 = fma(_1961, cbSceneParam._m0[91u].z, fma(_1960, cbSceneParam._m0[91u].y, _1959 * cbSceneParam._m0[91u].x));
    float _2004 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2008 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2017 = _2004 / _2016;
    float _2018 = _2008 / _2016;
    float _2019 = _2012 / _2016;
    float _2166;
    float _2167;
    float _2168;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2046 = ((uint(_2019 > cbSceneParam._m0[59u].y) + uint(_2019 > cbSceneParam._m0[59u].x)) + uint(_2019 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2047 = _2046 + 43u;
        uint _2055 = _2046 + 44u;
        uint _2063 = _2046 + 45u;
        uint _2071 = _2046 + 46u;
        float _2082 = fma(_2016, cbSceneParam._m0[_2047].w, fma(_2012, cbSceneParam._m0[_2047].z, fma(_2008, cbSceneParam._m0[_2047].y, _2004 * cbSceneParam._m0[_2047].x)));
        float _2086 = fma(_2016, cbSceneParam._m0[_2055].w, fma(_2012, cbSceneParam._m0[_2055].z, fma(_2008, cbSceneParam._m0[_2055].y, _2004 * cbSceneParam._m0[_2055].x)));
        float _2094 = fma(_2016, cbSceneParam._m0[_2071].w, fma(_2012, cbSceneParam._m0[_2071].z, fma(_2008, cbSceneParam._m0[_2071].y, _2004 * cbSceneParam._m0[_2071].x)));
        float _2099 = cbSceneParam._m0[33u].z * _2094;
        float _2101 = cbSceneParam._m0[33u].w * _2094;
        float _2104 = fma(_2016, cbSceneParam._m0[_2063].w, fma(_2012, cbSceneParam._m0[_2063].z, fma(_2008, cbSceneParam._m0[_2063].y, _2004 * cbSceneParam._m0[_2063].x))) / _2094;
        float _2152 = (cbSceneParam._m0[33u].x - sqrt(((_2018 * _2018) + (_2017 * _2017)) + (_2019 * _2019))) * cbSceneParam._m0[33u].y;
        float _4527 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2159 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2099 + _2082) / _2094, (_2101 + _2086) / _2094), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 + _2082) / _2094, (_2086 - _2099) / _2094), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2082 - _2099) / _2094, (_2086 - _2101) / _2094), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2082 - _2101) / _2094, (_2099 + _2086) / _2094), _2104), 0.0)).x), vec4(0.25)));
        _2166 = 1.0 - (_2159 * cbSceneParam._m0[34u].x);
        _2167 = 1.0 - (_2159 * cbSceneParam._m0[34u].y);
        _2168 = 1.0 - (_2159 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2166 = 1.0;
        _2167 = 1.0;
        _2168 = 1.0;
    }
    float _2232;
    float _2234;
    float _2236;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2220 = fma(_2016, cbSceneParam._m0[63u].w, fma(_2012, cbSceneParam._m0[63u].z, fma(_2008, cbSceneParam._m0[63u].y, _2004 * cbSceneParam._m0[63u].x)));
        float _2221 = fma(_2016, cbSceneParam._m0[60u].w, fma(_2012, cbSceneParam._m0[60u].z, fma(_2008, cbSceneParam._m0[60u].y, _2004 * cbSceneParam._m0[60u].x))) / _2220;
        float _2222 = fma(_2016, cbSceneParam._m0[61u].w, fma(_2012, cbSceneParam._m0[61u].z, fma(_2008, cbSceneParam._m0[61u].y, _2004 * cbSceneParam._m0[61u].x))) / _2220;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2221 >= cbSceneParam._m0[64u].x) && (_2222 >= cbSceneParam._m0[64u].y)) && (_2221 <= cbSceneParam._m0[64u].z)) && (_2222 <= cbSceneParam._m0[64u].w))
        {
            float _2360 = fma(_2016, cbSceneParam._m0[62u].w, fma(_2012, cbSceneParam._m0[62u].z, fma(_2008, cbSceneParam._m0[62u].y, _2004 * cbSceneParam._m0[62u].x))) / _2220;
            float _2364 = isnan(cbSceneParam._m0[41u].w) ? _2360 : (isnan(_2360) ? cbSceneParam._m0[41u].w : max(_2360, cbSceneParam._m0[41u].w));
            float _2407 = (cbSceneParam._m0[33u].x - sqrt(((_2018 * _2018) + (_2017 * _2017)) + (_2019 * _2019))) * cbSceneParam._m0[33u].y;
            float _4543 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
            float _2414 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2221, cbSceneParam._m0[33u].w + _2222), _2364), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2221, _2222 - cbSceneParam._m0[33u].z), _2364), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2221 - cbSceneParam._m0[33u].z, _2222 - cbSceneParam._m0[33u].w), _2364), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2221 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2222), _2364), 0.0)).x), vec4(0.25)));
            float _2418 = 1.0 - (_2414 * cbSceneParam._m0[34u].x);
            float _2419 = 1.0 - (_2414 * cbSceneParam._m0[34u].y);
            float _2420 = 1.0 - (_2414 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2420) ? _2168 : (isnan(_2168) ? _2420 : min(_2168, _2420));
            frontier_phi_39_38_ladder_1 = isnan(_2419) ? _2167 : (isnan(_2167) ? _2419 : min(_2167, _2419));
            frontier_phi_39_38_ladder_2 = isnan(_2418) ? _2166 : (isnan(_2166) ? _2418 : min(_2166, _2418));
        }
        else
        {
            frontier_phi_39_38_ladder = _2168;
            frontier_phi_39_38_ladder_1 = _2167;
            frontier_phi_39_38_ladder_2 = _2166;
        }
        _2232 = frontier_phi_39_38_ladder_2;
        _2234 = frontier_phi_39_38_ladder_1;
        _2236 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2232 = _2166;
        _2234 = _2167;
        _2236 = _2168;
    }
    uvec4 _2241 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2243 = _2241.x * 14u;
    uint _2244 = _2243 + 13u;
    float _2251 = _921 + (-1.0);
    float _2256 = (cbLight._m0[_2244].x * _2251) + 1.0;
    float _2257 = (cbLight._m0[_2244].y * _2251) + 1.0;
    float _2258 = (cbLight._m0[_2244].z * _2251) + 1.0;
    float _2259 = (cbLight._m0[_2244].w * _2251) + 1.0;
    uint _2260 = _2243 + 5u;
    float _2266 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2270 = _2243 + 4u;
    float _2279 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
    uint _2283 = _2243 | 1u;
    float _2294 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_758, _759, _760));
    float _2297 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_758, _759, _760));
    float _4579 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _4590 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2302 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * 0.3183098733425140380859375;
    float _2304 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * 0.3183098733425140380859375;
    float _2311 = ((cbLight._m0[_2260].x * _2266) * _2304) + (((cbLight._m0[_2270].x * _2232) * _2279) * _2302);
    float _2312 = ((_2266 * cbLight._m0[_2260].y) * _2304) + (((cbLight._m0[_2270].y * _2234) * _2279) * _2302);
    float _2313 = ((_2266 * cbLight._m0[_2260].z) * _2304) + (((cbLight._m0[_2270].z * _2236) * _2279) * _2302);
    uvec4 _2317 = floatBitsToUint(cbLight._m0[_2243 + 12u]);
    bool _2319 = _2317.x == 0u;
    float _2421;
    float _2423;
    float _2425;
    if (_2319)
    {
        _2421 = _2311;
        _2423 = _2312;
        _2425 = _2313;
    }
    else
    {
        uint _2429 = _2243 + 6u;
        float _2445 = (dot(vec3(cbLight._m0[_2243 + 2u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2446 = _2445 * _2445;
        float _4601 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2447 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2448 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        _2421 = (((cbLight._m0[_2429].x * 0.3183098733425140380859375) * _2447) * _2448) + _2311;
        _2423 = (((cbLight._m0[_2429].y * 0.3183098733425140380859375) * _2447) * _2448) + _2312;
        _2425 = (((cbLight._m0[_2429].z * 0.3183098733425140380859375) * _2447) * _2448) + _2313;
    }
    bool _2428 = _2317.y == 0u;
    float _2483;
    float _2485;
    float _2487;
    if (_2428)
    {
        _2483 = _2421;
        _2485 = _2423;
        _2487 = _2425;
    }
    else
    {
        uint _2645 = _2243 + 7u;
        float _2661 = (dot(vec3(cbLight._m0[_2243 + 3u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2662 = _2661 * _2661;
        float _4617 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2663 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2664 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2483 = (((cbLight._m0[_2645].x * 0.3183098733425140380859375) * _2663) * _2664) + _2421;
        _2485 = (((cbLight._m0[_2645].y * 0.3183098733425140380859375) * _2663) * _2664) + _2423;
        _2487 = (((cbLight._m0[_2645].z * 0.3183098733425140380859375) * _2663) * _2664) + _2425;
    }
    uint _2490 = _2243 + 8u;
    float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2243].w)) * _761) * 0.949999988079071044921875);
    float _2504 = _2503 * _2503;
    float _2505 = cbLight._m0[_2243].x + _841;
    float _2506 = cbLight._m0[_2243].y + _842;
    float _2507 = cbLight._m0[_2243].z + _843;
    float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
    float _2512 = _2511 * _2505;
    float _2513 = _2511 * _2506;
    float _2514 = _2511 * _2507;
    float _2515 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2243].xyz));
    float _4633 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _4644 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _2519 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2520 = dot(vec3(_758, _759, _760), vec3(_2512, _2513, _2514));
    float _4655 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2524 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_2512, _2513, _2514));
    float _4666 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2528 = _2504 * _2504;
    float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
    float _2543 = (exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2544 = 1.0 - _2504;
    float _2555 = (0.5 / (((_2519 * ((_2518 * _2544) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2519 * _2544) + _2504) * _2518))) * _2518;
    float _4677 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
    uint _2571 = _2243 + 9u;
    float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _761) * 0.949999988079071044921875);
    float _2583 = _2582 * _2582;
    float _2584 = cbLight._m0[_2283].x + _841;
    float _2585 = cbLight._m0[_2283].y + _842;
    float _2586 = cbLight._m0[_2283].z + _843;
    float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
    float _2591 = _2590 * _2584;
    float _2592 = _2590 * _2585;
    float _2593 = _2590 * _2586;
    float _2594 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2283].xyz));
    float _4688 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2597 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _2598 = dot(vec3(_758, _759, _760), vec3(_2591, _2592, _2593));
    float _4699 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2601 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _2602 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2591, _2592, _2593));
    float _4710 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2606 = _2583 * _2583;
    float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
    float _2619 = (exp2(log2(1.0 - (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2620 = 1.0 - _2583;
    float _2630 = (0.5 / (((_2519 * ((_2597 * _2620) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2519 * _2620) + _2583) * _2597))) * _2597;
    float _4721 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2632 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
    float _2642 = (((_2619 * cbLight._m0[_2571].x) * _2632) * _2266) + ((((cbLight._m0[_2490].x * _2232) * _2543) * _2557) * _2279);
    float _2643 = (((_2619 * cbLight._m0[_2571].y) * _2632) * _2266) + ((((cbLight._m0[_2490].y * _2234) * _2543) * _2557) * _2279);
    float _2644 = (((_2619 * cbLight._m0[_2571].z) * _2632) * _2266) + ((((cbLight._m0[_2490].z * _2236) * _2543) * _2557) * _2279);
    float _2700;
    float _2702;
    float _2704;
    if (_2319)
    {
        _2700 = _2642;
        _2702 = _2643;
        _2704 = _2644;
    }
    else
    {
        uint _2706 = _2243 + 2u;
        uint _2710 = _2243 + 10u;
        float _2724 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2706].w)) * _761) * 0.949999988079071044921875);
        float _2725 = _2724 * _2724;
        float _2726 = cbLight._m0[_2706].x + _841;
        float _2727 = cbLight._m0[_2706].y + _842;
        float _2728 = cbLight._m0[_2706].z + _843;
        float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
        float _2733 = _2732 * _2726;
        float _2734 = _2732 * _2727;
        float _2735 = _2732 * _2728;
        float _2736 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2706].xyz));
        float _4732 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2740 = dot(vec3(_758, _759, _760), vec3(_2733, _2734, _2735));
        float _4743 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2743 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2744 = dot(vec3(cbLight._m0[_2706].xyz), vec3(_2733, _2734, _2735));
        float _4754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2748 = _2725 * _2725;
        float _2752 = ((_2743 * _2743) * (_2748 + (-1.0))) + 1.0;
        float _2761 = (exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2762 = 1.0 - _2725;
        float _2772 = (0.5 / (((_2519 * ((_2739 * _2762) + _2725)) + 9.9999999392252902907785028219223e-09) + (((_2519 * _2762) + _2725) * _2739))) * _2739;
        float _4765 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2774 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2748 / ((_2752 * _2752) * 3.141590118408203125));
        float _2775 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        _2700 = (((_2761 * cbLight._m0[_2710].x) * _2774) * _2775) + _2642;
        _2702 = (((_2761 * cbLight._m0[_2710].y) * _2774) * _2775) + _2643;
        _2704 = (((_2761 * cbLight._m0[_2710].z) * _2774) * _2775) + _2644;
    }
    float _2806;
    float _2808;
    float _2810;
    if (_2428)
    {
        _2806 = _2700;
        _2808 = _2702;
        _2810 = _2704;
    }
    else
    {
        uint _2817 = _2243 + 3u;
        uint _2821 = _2243 + 11u;
        float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2817].w)) * _761) * 0.949999988079071044921875);
        float _2836 = _2835 * _2835;
        float _2837 = cbLight._m0[_2817].x + _841;
        float _2838 = cbLight._m0[_2817].y + _842;
        float _2839 = cbLight._m0[_2817].z + _843;
        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
        float _2844 = _2843 * _2837;
        float _2845 = _2843 * _2838;
        float _2846 = _2843 * _2839;
        float _2847 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2817].xyz));
        float _4781 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2851 = dot(vec3(_758, _759, _760), vec3(_2844, _2845, _2846));
        float _4792 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2855 = dot(vec3(cbLight._m0[_2817].xyz), vec3(_2844, _2845, _2846));
        float _4803 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2859 = _2836 * _2836;
        float _2863 = ((_2854 * _2854) * (_2859 + (-1.0))) + 1.0;
        float _2872 = (exp2(log2(1.0 - (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2873 = 1.0 - _2836;
        float _2883 = (0.5 / (((_2519 * ((_2850 * _2873) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2519 * _2873) + _2836) * _2850))) * _2850;
        float _4814 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2885 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2859 / ((_2863 * _2863) * 3.141590118408203125));
        float _2886 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2806 = (((_2872 * cbLight._m0[_2821].x) * _2885) * _2886) + _2700;
        _2808 = (((_2872 * cbLight._m0[_2821].y) * _2885) * _2886) + _2702;
        _2810 = (((_2872 * cbLight._m0[_2821].z) * _2885) * _2886) + _2704;
    }
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_2241.y == 0u)
    {
        uvec4 _2907 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2908 = _2907.x;
        uint _2919 = uint((float(_2907.y) * floor(float(uint(cbSceneParam._m0[85u].y * _859) / _2908))) + floor(float(uint(cbSceneParam._m0[85u].x * _858) / _2908)));
        float _2929 = (log2(_2019 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2930 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        uint _2933 = uint(isnan(14.0) ? _2930 : (isnan(_2930) ? 14.0 : min(_2930, 14.0)));
        uvec4 _2938 = texelFetch(g_lightClusterGridBuffer, int(((_2933 << 2u) + (_2919 << 6u)) >> 2u));
        uint _2939 = _2938.x;
        uint _2940 = _2907.z;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        if (((((1u << ((_2940 >> 4u) & 15u)) + 4294967295u) & _2939) == 0u) || ((_2940 & 240u) == 0u))
        {
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
        }
        else
        {
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3030;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            uint _3178 = 0u;
            uint _3187;
            bool _3188;
            for (;;)
            {
                _3187 = texelFetch(g_lightClassification, int((((_2933 << 5u) + (_2919 << 9u)) + (_3178 << 2u)) >> 2u)).x;
                _3188 = _3187 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3188)
                {
                    frontier_phi_73_pred = _3177;
                    frontier_phi_73_pred_1 = _3176;
                    frontier_phi_73_pred_2 = _3175;
                    frontier_phi_73_pred_3 = _3174;
                    frontier_phi_73_pred_4 = _3173;
                    frontier_phi_73_pred_5 = _3172;
                }
                else
                {
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    uint _3323;
                    _3317 = _3172;
                    _3318 = _3173;
                    _3319 = _3174;
                    _3320 = _3175;
                    _3321 = _3176;
                    _3322 = _3177;
                    _3323 = _3187;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    for (;;)
                    {
                        uint _3327 = uint(findLSB(_3323)) + (_3178 << 5u);
                        uint _3324 = (_3323 + 4294967295u) & _3323;
                        uint _3329 = _3327 * 48u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 3u)).x));
                        uint _3349 = (_3327 * 48u) + 4u;
                        vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 3u)).x));
                        uint _3368 = (_3327 * 48u) + 8u;
                        vec3 _3379 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x));
                        float _3383 = _3343.x - _2017;
                        float _3384 = _3343.y - _2018;
                        float _3385 = _3343.z - _2019;
                        float _3386 = dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385));
                        float _3389 = inversesqrt(_3386);
                        float _3390 = _3389 * _3383;
                        float _3391 = _3389 * _3384;
                        float _3392 = _3389 * _3385;
                        float _3393 = dot(vec3(_877, _880, _883), vec3(_3390, _3391, _3392));
                        float _3398 = 1.0 - (_3386 * _3343.w);
                        float _4840 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3399 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                        float _3400 = sqrt(_3386) * _3362.w;
                        float _3403 = 1.39999997615814208984375 / (_3400 + 1.39999997615814208984375);
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3393) + _3404;
                        float _3410 = _3400 * _3400;
                        float _3414 = ((isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0))) * _3399) / ((_3410 * 0.699999988079071044921875) + 1.0);
                        float _3418 = (-0.0) - _2017;
                        float _3419 = (-0.0) - _2018;
                        float _3420 = (-0.0) - _2019;
                        float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                        float _3425 = _3424 * _3418;
                        float _3426 = _3424 * _3419;
                        float _3427 = _3424 * _3420;
                        float _3434 = exp2(log2(1.0 / ((_3410 * 3.5) + 5.0)) * 0.25);
                        float _3435 = 1.0 - _937;
                        float _3442 = sqrt(1.0 - ((1.0 - (_3435 * _3435)) * (1.0 - (_3434 * _3434))));
                        float _3443 = _3442 * _3442;
                        float _3444 = _3443 * _3443;
                        float _3445 = _3425 + _3390;
                        float _3446 = _3426 + _3391;
                        float _3447 = _3427 + _3392;
                        float _3451 = inversesqrt(dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447)));
                        float _3455 = dot(vec3(_877, _880, _883), vec3(_3425, _3426, _3427));
                        float _4856 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3458 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                        float _3459 = dot(vec3(_877, _880, _883), vec3(_3451 * _3445, _3451 * _3446, _3451 * _3447));
                        float _4867 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3462 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3466 = ((_3462 * _3462) * (_3444 + (-1.0))) + 1.0;
                        float _3467 = _3403 * _3443;
                        float _3468 = _3467 * _3467;
                        float _3471 = ((1.0 - _3468) * _3393) + _3468;
                        float _4878 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3472 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3473 = 1.0 - _3443;
                        float _3483 = (0.5 / (((_3472 * ((_3458 * _3473) + _3443)) + 9.9999999392252902907785028219223e-09) + (((_3472 * _3473) + _3443) * _3458))) * _3472;
                        float _4889 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3494 = (((_3444 * 3.1415927410125732421875) * (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) / ((_3466 * _3466) * ((_3410 * 2.1991131305694580078125) + 3.141590118408203125))) * _3399;
                        _3247 = (_3414 * _3362.x) + _3320;
                        _3248 = (_3414 * _3362.y) + _3321;
                        _3249 = (_3414 * _3362.z) + _3322;
                        _3244 = (_3494 * _3379.x) + _3317;
                        _3245 = (_3494 * _3379.y) + _3318;
                        _3246 = (_3494 * _3379.z) + _3319;
                        if (_3324 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3317 = _3244;
                            _3318 = _3245;
                            _3319 = _3246;
                            _3320 = _3247;
                            _3321 = _3248;
                            _3322 = _3249;
                            _3323 = _3324;
                        }
                    }
                    frontier_phi_73_pred = _3249;
                    frontier_phi_73_pred_1 = _3248;
                    frontier_phi_73_pred_2 = _3247;
                    frontier_phi_73_pred_3 = _3246;
                    frontier_phi_73_pred_4 = _3245;
                    frontier_phi_73_pred_5 = _3244;
                }
                _3030 = frontier_phi_73_pred;
                _3028 = frontier_phi_73_pred_1;
                _3026 = frontier_phi_73_pred_2;
                _3024 = frontier_phi_73_pred_3;
                _3022 = frontier_phi_73_pred_4;
                _3020 = frontier_phi_73_pred_5;
                uint _3179 = _3178 + 1u;
                if (_3179 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3172 = _3020;
                    _3173 = _3022;
                    _3174 = _3024;
                    _3175 = _3026;
                    _3176 = _3028;
                    _3177 = _3030;
                    _3178 = _3179;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
        }
        uvec4 _3033 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3034 = _3033.z;
        uint _3036 = (_3034 >> 8u) & 15u;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        if (((4294967295u << _3036) & _2939) == 0u)
        {
            _3140 = _3019;
            _3142 = _3021;
            _3144 = _3023;
            _3146 = _3025;
            _3148 = _3027;
            _3150 = _3029;
        }
        else
        {
            float _3165 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
            float _3166 = _3165 * _2017;
            float _3167 = _3165 * _2018;
            float _3168 = _3165 * _2019;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3036 < ((_3034 >> 12u) & 15u))
            {
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3300 = _3019;
                float _3301 = _3021;
                float _3302 = _3023;
                float _3303 = _3025;
                float _3304 = _3027;
                float _3305 = _3029;
                uint _3306 = _3036;
                uint _3315;
                bool _3316;
                for (;;)
                {
                    _3315 = texelFetch(g_lightClassification, int((((_2933 << 5u) + (_2919 << 9u)) + (_3306 << 2u)) >> 2u)).x;
                    _3316 = _3315 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3316)
                    {
                        frontier_phi_84_pred = _3305;
                        frontier_phi_84_pred_1 = _3304;
                        frontier_phi_84_pred_2 = _3303;
                        frontier_phi_84_pred_3 = _3302;
                        frontier_phi_84_pred_4 = _3301;
                        frontier_phi_84_pred_5 = _3300;
                    }
                    else
                    {
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3521 = _3300;
                        float _3522 = _3301;
                        float _3523 = _3302;
                        float _3524 = _3303;
                        float _3525 = _3304;
                        float _3526 = _3305;
                        uint _3527 = _3315;
                        uint _3528;
                        vec4 _3553;
                        float _3554;
                        vec4 _3569;
                        vec3 _3581;
                        vec4 _3596;
                        vec4 _3611;
                        float _3657;
                        bool _3658;
                        for (;;)
                        {
                            uint _3538 = ((_3306 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3527));
                            _3528 = (_3527 + 4294967295u) & _3527;
                            uint _3540 = _3538 * 40u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            _3554 = _3553.w;
                            uint _3556 = (_3538 * 40u) + 4u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3571 = (_3538 * 40u) + 8u;
                            _3581 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x));
                            uint _3583 = (_3538 * 40u) + 16u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3538 * 40u) + 20u;
                            _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3613 = (_3538 * 40u) + 24u;
                            vec4 _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3632 = (_3538 * 40u) + 28u;
                            vec4 _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            _3657 = fma(_2019, _3645.z, fma(_2018, _3645.y, _3645.x * _2017)) + _3645.w;
                            _3658 = !((fma(_2019, _3626.z, fma(_2018, _3626.y, _3626.x * _2017)) + _3626.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3658)
                            {
                                float _3685 = _3553.x - _2017;
                                float _3686 = _3553.y - _2018;
                                float _3687 = _3553.z - _2019;
                                float _3688 = dot(vec3(_3685, _3686, _3687), vec3(_3685, _3686, _3687));
                                float _3691 = inversesqrt(_3688);
                                float _3692 = _3691 * _3685;
                                float _3693 = _3691 * _3686;
                                float _3694 = _3691 * _3687;
                                float _3698 = 1.0 - (_3688 / (_3554 * _3554));
                                float _4900 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3699 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3703 = sqrt(_3688) * _3569.w;
                                float _3705 = 1.39999997615814208984375 / (_3703 + 1.39999997615814208984375);
                                float _3706 = _3705 * _3705;
                                float _3709 = ((1.0 - _3706) * dot(vec3(_3692, _3693, _3694), vec3(_877, _880, _883))) + _3706;
                                float _3712 = _3703 * _3703;
                                float _3716 = (fma(_2019, _3596.z, fma(_2018, _3596.y, _3596.x * _2017)) + _3596.w) / _3657;
                                float _3717 = (fma(_2019, _3611.z, fma(_2018, _3611.y, _3611.x * _2017)) + _3611.w) / _3657;
                                float _3721 = 1.0 - dot(vec2(_3716, _3717), vec2(_3716, _3717));
                                float _4916 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3723 = _3722 * (((isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0))) * _3699) / ((_3712 * 0.699999988079071044921875) + 1.0));
                                float _3735 = exp2(log2(1.0 / ((_3712 * 3.5) + 5.0)) * 0.25);
                                float _3736 = 1.0 - _937;
                                float _3743 = sqrt(1.0 - ((1.0 - (_3736 * _3736)) * (1.0 - (_3735 * _3735))));
                                float _3744 = _3743 * _3743;
                                float _3745 = _3744 * _3744;
                                float _3746 = _3692 - _3166;
                                float _3747 = _3693 - _3167;
                                float _3748 = _3694 - _3168;
                                float _3752 = inversesqrt(dot(vec3(_3746, _3747, _3748), vec3(_3746, _3747, _3748)));
                                float _3756 = dot(vec3(_877, _880, _883), vec3((-0.0) - _3166, (-0.0) - _3167, (-0.0) - _3168));
                                float _4927 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3759 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3760 = dot(vec3(_877, _880, _883), vec3(_3752 * _3746, _3752 * _3747, _3752 * _3748));
                                float _4938 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3763 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3767 = ((_3763 * _3763) * (_3745 + (-1.0))) + 1.0;
                                float _3768 = _3705 * _3744;
                                float _3769 = _3768 * _3768;
                                float _3775 = ((1.0 - _3769) * dot(vec3(_877, _880, _883), vec3(_3692, _3693, _3694))) + _3769;
                                float _4949 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3776 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3777 = 1.0 - _3744;
                                float _3787 = (0.5 / (((_3776 * ((_3759 * _3777) + _3744)) + 9.9999999392252902907785028219223e-09) + (((_3776 * _3777) + _3744) * _3759))) * _3776;
                                float _4960 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3797 = (_3722 * _3699) * (((_3745 * 3.1415927410125732421875) * (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)))) / ((_3767 * _3767) * ((_3712 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3723 * _3569.z;
                                frontier_phi_90_pred_1 = _3723 * _3569.y;
                                frontier_phi_90_pred_2 = _3723 * _3569.x;
                                frontier_phi_90_pred_3 = _3797 * _3581.z;
                                frontier_phi_90_pred_4 = _3797 * _3581.y;
                                frontier_phi_90_pred_5 = _3797 * _3581.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3806 = frontier_phi_90_pred;
                            _3805 = frontier_phi_90_pred_1;
                            _3804 = frontier_phi_90_pred_2;
                            _3803 = frontier_phi_90_pred_3;
                            _3802 = frontier_phi_90_pred_4;
                            _3801 = frontier_phi_90_pred_5;
                            _3511 = _3804 + _3524;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            _3508 = _3801 + _3521;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            if (_3528 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3528;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3513;
                        frontier_phi_84_pred_1 = _3512;
                        frontier_phi_84_pred_2 = _3511;
                        frontier_phi_84_pred_3 = _3510;
                        frontier_phi_84_pred_4 = _3509;
                        frontier_phi_84_pred_5 = _3508;
                    }
                    _3151 = frontier_phi_84_pred;
                    _3149 = frontier_phi_84_pred_1;
                    _3147 = frontier_phi_84_pred_2;
                    _3145 = frontier_phi_84_pred_3;
                    _3143 = frontier_phi_84_pred_4;
                    _3141 = frontier_phi_84_pred_5;
                    uint _3307 = _3306 + 1u;
                    if (_3307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3300 = _3141;
                        _3301 = _3143;
                        _3302 = _3145;
                        _3303 = _3147;
                        _3304 = _3149;
                        _3305 = _3151;
                        _3306 = _3307;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3147;
                frontier_phi_65_66_ladder_1 = _3151;
                frontier_phi_65_66_ladder_2 = _3149;
                frontier_phi_65_66_ladder_3 = _3145;
                frontier_phi_65_66_ladder_4 = _3143;
                frontier_phi_65_66_ladder_5 = _3141;
            }
            else
            {
                frontier_phi_65_66_ladder = _3025;
                frontier_phi_65_66_ladder_1 = _3029;
                frontier_phi_65_66_ladder_2 = _3027;
                frontier_phi_65_66_ladder_3 = _3023;
                frontier_phi_65_66_ladder_4 = _3021;
                frontier_phi_65_66_ladder_5 = _3019;
            }
            _3140 = frontier_phi_65_66_ladder_5;
            _3142 = frontier_phi_65_66_ladder_4;
            _3144 = frontier_phi_65_66_ladder_3;
            _3146 = frontier_phi_65_66_ladder;
            _3148 = frontier_phi_65_66_ladder_2;
            _3150 = frontier_phi_65_66_ladder_1;
        }
        float _3155 = isnan(1.0) ? _921 : (isnan(_921) ? 1.0 : min(_921, 1.0));
        _2952 = (_3155 * _3146) + _2483;
        _2954 = (_3155 * _3148) + _2485;
        _2956 = (_3155 * _3150) + _2487;
        _2958 = ((_3140 * 0.039999999105930328369140625) * _3155) + _2806;
        _2960 = ((_3142 * 0.039999999105930328369140625) * _3155) + _2808;
        _2962 = ((_3144 * 0.039999999105930328369140625) * _3155) + _2810;
    }
    else
    {
        _2952 = _2483;
        _2954 = _2485;
        _2956 = _2487;
        _2958 = _2806;
        _2960 = _2808;
        _2962 = _2810;
    }
    float _4976 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4987 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4998 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _2979 = ((isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_2952 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _921))) + ((_2958 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1753)) * cbPerFrame._m0[3u].x);
    float _2980 = ((isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_2954 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _921))) + ((_2960 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1753)) * cbPerFrame._m0[3u].x);
    float _2981 = ((isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_2956 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _921))) + ((_2962 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1753)) * cbPerFrame._m0[3u].x);
    uint _2982 = _274 + 6u;
    float _2990 = _858 / cbSceneParam._m0[86u].x;
    float _2991 = _859 / cbSceneParam._m0[86u].y;
    vec4 _3005 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2990, _2991, (log2((isnan(cbSceneParam._m0[77u].w) ? _783 : (isnan(_783) ? cbSceneParam._m0[77u].w : min(_783, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3007 = _3005.x;
    float _3008 = _3005.y;
    float _3009 = _3005.z;
    float _3010 = _3005.w;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    if (_783 > cbSceneParam._m0[78u].w)
    {
        float _3044 = isnan(_783) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _783 : min(cbSceneParam._m0[80u].w, _783));
        float _3045 = _3044 / _783;
        float _3056 = _3045 * _834;
        float _3057 = _835 * _3045;
        float _3058 = (-0.0) - _3057;
        float _3060 = _3045 * _836;
        float _3062 = (cbSceneParam._m0[77u].w * _3058) / _3044;
        float _3063 = _3062 + cbSceneParam._m0[79u].w;
        float _3064 = cbSceneParam._m0[79u].w - _3057;
        float _3070 = sqrt(((_3056 * _3056) + (_3057 * _3057)) + (_3060 * _3060));
        float _3073 = (1.0 - (cbSceneParam._m0[77u].w / _3044)) * _3070;
        float _3078 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3080 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3257;
        if (abs((_3058 - _3062) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3257 = ((((_3063 > 0.0) ? exp2(_3078 * _3063) : (2.0 - exp2(_3080 * _3063))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3073;
        }
        else
        {
            float _3201 = 1.0 / cbSceneParam._m0[80u].x;
            float _3202 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : max(_3063, _3064));
            float _3203 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : min(_3063, _3064));
            float _3212 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : min(_3202, 0.0));
            float _3213 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : min(_3203, 0.0));
            _3257 = ((abs(_3070 / _3058) * cbSceneParam._m0[80u].y) * ((((_3212 - _3213) * 2.0) - ((exp2(_3078 * (isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0)))) - exp2(_3078 * (isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0))))) * _3201)) - ((exp2(_3080 * _3212) - exp2(_3080 * _3213)) * _3201))) + (_3073 * cbSceneParam._m0[80u].z);
        }
        vec4 _3259 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2990, _2991, 1.0), 0.0);
        float _3268 = exp2((_3257 * (-1.44269502162933349609375)) * (1.0 - _3259.w));
        float _3269 = log2(_3268);
        float _3285 = log2(_3010);
        _3082 = (exp2(_3285 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].x)) * _3259.x) / cbSceneParam._m0[78u].x)) + _3007;
        _3084 = (exp2(_3285 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].y)) * _3259.y) / cbSceneParam._m0[78u].y)) + _3008;
        _3086 = (exp2(_3285 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].z)) * _3259.z) / cbSceneParam._m0[78u].z)) + _3009;
        _3088 = _3268 * _3010;
    }
    else
    {
        _3082 = _3007;
        _3084 = _3008;
        _3086 = _3009;
        _3088 = _3010;
    }
    bool _3295;
    vec4 _3098;
    vec4 _3120;
    float _3122;
    float _3126;
    float _3127;
    float _3128;
    float _3129;
    bool _3139;
    for (;;)
    {
        _3098 = cbMatDynParam._m0[0u];
        float _3100 = roundEven(_3098.y);
        bool _3101 = _3100 == 3.0;
        float _3102 = log2(_3088);
        float _3109 = exp2(_3102 * cbSceneParam._m0[78u].x) * _2979;
        float _3110 = exp2(_3102 * cbSceneParam._m0[78u].y) * _2980;
        float _3111 = exp2(_3102 * cbSceneParam._m0[78u].z) * _2981;
        float _3118 = _847 + (-0.5);
        _3120 = cbMtdParam._m0[1u];
        _3122 = _3120.y * _3118;
        float _3125 = (_3100 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3126 = _3125 * (_3101 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3082)));
        _3127 = _3125 * (_3101 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3084)));
        _3128 = _3125 * (_3101 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3086)));
        _3129 = _3118 * 0.999000012874603271484375;
        _3139 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3139)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _3129) < 0.5)
            {
                _3295 = true;
                break;
            }
        }
        uint _3236 = _896 + uint(_3098.w);
        if ((cbInstanceData._m0[_3236].w < 1.0) && ((cbInstanceData._m0[_3236].w + _3129) < 0.5))
        {
            _3295 = true;
            break;
        }
        if ((_3122 + 1.0) < _3120.x)
        {
            _3295 = true;
            break;
        }
        _3295 = false;
        break;
    }
    float _3499;
    if (_3295)
    {
        discard_state = true;
        _3499 = 0.0;
    }
    else
    {
        _3499 = cbInstanceData._m0[_2982].w;
    }
    SV_Target.x = _3126;
    SV_Target.y = _3127;
    SV_Target.z = _3128;
    SV_Target.w = _3499;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2982].w;
    discard_exit();
}


