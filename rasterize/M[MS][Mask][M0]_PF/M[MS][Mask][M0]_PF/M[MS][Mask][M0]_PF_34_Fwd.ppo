#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1260;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3564 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3575 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3586 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[27u].x * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].y * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].w, cbMtdParam._m0[29u].xy, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[24u].z) + _437) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3597 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _465 = (_322.x * cbMtdParam._m0[9u].x) * ((_455 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353);
    float _466 = (_322.y * cbMtdParam._m0[9u].y) * ((_455 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354);
    float _467 = (_322.z * cbMtdParam._m0[9u].z) * ((_455 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355);
    float _471 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _465;
    float _474 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _466;
    float _477 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _467;
    float _485 = (((_465 - _471) * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) + _471) * 4.55000019073486328125;
    float _487 = (((_466 - _474) * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) + _474) * 4.55000019073486328125;
    float _489 = (((_467 - _477) * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) + _477) * 4.55000019073486328125;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _285) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _286) + cbTextureTilingScale._m0[14u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _572 = _570.x;
    float _573 = _570.y;
    float _574 = _570.z;
    float _583 = ((_553.z - _574) * _455) + _574;
    float _586 = ((((_553.x - _572) * _455) + _572) * 2.0) + (-1.0);
    float _587 = ((((_553.y - _573) * _455) + _573) * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _3608 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _593 = sqrt(1.0 - (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _285) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _286) + cbTextureTilingScale._m0[11u].w));
    float _636 = _634.x;
    float _637 = 1.0 - _636;
    float _650 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_636 - _637) * cbMtdParam._m0[24u].w) + _637) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3619 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _658 = (_651 * ((_508.x * cbMtdParam._m0[18u].x) - _485)) + _485;
    float _659 = (_651 * ((_508.y * cbMtdParam._m0[18u].y) - _487)) + _487;
    float _660 = (_651 * ((_508.z * cbMtdParam._m0[18u].z) - _489)) + _489;
    float _665 = (((_528.z - _583) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _583;
    float _669 = ((_609.z - _665) * cbMtdParam._m0[19u].w) + _665;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_PF_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _285) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _286) + cbTextureTilingScale._m0[15u].w));
    float _689 = (_682.x * 2.0) + (-1.0);
    float _690 = (_682.y * 2.0) + (-1.0);
    float _691 = dot(vec2(_689, _690), vec2(_689, _690));
    float _3630 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _699 = (_651 * (_682.z - _669)) + _669;
    float _708 = (_586 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_528.x * 2.0) + (-1.0)))) + (((_609.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _709 = (_587 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_528.y * 2.0) + (-1.0)))) + (((_609.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _721 = (((_689 - _708) + (cbMtdParam._m0[21u].x * _708)) * _651) + _708;
    float _722 = (((_690 - _709) + (cbMtdParam._m0[21u].x * _709)) * _651) + _709;
    float _723 = (_651 * (sqrt(1.0 - (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) - _593)) + _593;
    float _725 = cbMtdParam._m0[22u].x + _609.w;
    float _728 = fma(_723, _232 * NORMAL.x, fma(_722, _239 * TANGENT.x, (_225 * _217) * _721));
    float _731 = fma(_723, _232 * NORMAL.y, fma(_722, _239 * TANGENT.y, (_225 * _218) * _721));
    float _734 = fma(_723, _232 * NORMAL.z, fma(_722, _239 * TANGENT.z, (_225 * _219) * _721));
    float _738 = inversesqrt(dot(vec3(_728, _731, _734), vec3(_728, _731, _734)));
    float _739 = _738 * _728;
    float _740 = _738 * _731;
    float _741 = _738 * _734;
    float _3641 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _742 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _3663 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3674 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3685 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _760 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _811 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _801);
    float _812 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _801);
    float _813 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _801);
    float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
    float _818 = _811 * _817;
    float _819 = _812 * _817;
    float _820 = _813 * _817;
    float _826 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _827 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _845 = fma(_741, cbSceneParam._m0[5u].z, fma(_740, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _739));
    float _848 = fma(_741, cbSceneParam._m0[6u].z, fma(_740, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _739));
    float _851 = fma(_741, cbSceneParam._m0[7u].z, fma(_740, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _739));
    uint _865 = (_266 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _871 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * cbInstanceData._m0[_865].x;
    float _872 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * cbInstanceData._m0[_865].y;
    float _873 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) * cbInstanceData._m0[_865].z;
    float _3696 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    vec4 _885 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _826, cbSceneParam._m0[86u].y * _827));
    float _889 = ((isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * TEXCOORD_5.w) * _885.x;
    float _890 = dot(vec3(_739, _740, _741), vec3(_818, _819, _820));
    float _893 = _890 * 2.0;
    float _897 = (_893 * _739) - _818;
    float _898 = (_893 * _740) - _819;
    float _899 = (_893 * _741) - _820;
    float _903 = abs(dot(vec3(_818, _819, _820), vec3(_739, _740, _741)));
    float _3729 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _905 = sqrt(_742);
    float _918 = exp2((_905 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_905 * 3.0));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1259;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _984 = fma(_958, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950));
        float _988 = fma(_958, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950));
        float _992 = fma(_958, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950));
        float _1017 = _950 + _739;
        float _1018 = _954 + _740;
        float _1019 = _958 + _741;
        float _1029 = fma(_1019, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017)) - _984;
        float _1030 = fma(_1019, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017)) - _988;
        float _1031 = fma(_1019, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017)) - _992;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_984 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_988 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[34u].z) + ((((((_992 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1087 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1053.x + (-0.5));
        float _1089 = _1087 * (_1053.y + (-0.5));
        float _1090 = _1087 * (_1053.z + (-0.5));
        float _1097 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1060.x + (-0.5));
        float _1099 = _1097 * (_1060.y + (-0.5));
        float _1100 = _1097 * (_1060.z + (-0.5));
        float _1107 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1067.x + (-0.5));
        float _1109 = _1107 * (_1067.y + (-0.5));
        float _1110 = _1107 * (_1067.z + (-0.5));
        float _1117 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1074.x + (-0.5));
        float _1119 = _1117 * (_1074.y + (-0.5));
        float _1120 = _1117 * (_1074.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1141 = (dot(vec3(_739, _740, _741), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1151 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3777 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1153 + 1.0))) + _1158) * _1121;
        float _1168 = _1089 * 0.5;
        float _1169 = _1099 * 0.5;
        float _1170 = _1109 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_739, _740, _741), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3810 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1195 + 1.0))) + _1200) * _1122;
        float _1210 = _1090 * 0.5;
        float _1211 = _1100 * 0.5;
        float _1212 = _1110 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_739, _740, _741), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3843 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1237 + 1.0))) + _1242) * _1123;
        _1259 = _1090;
        _1261 = _1089;
        _1262 = _1088;
        _1263 = _1100;
        _1264 = _1099;
        _1265 = _1098;
        _1266 = _1110;
        _1267 = _1109;
        _1268 = _1108;
        _1269 = _1123;
        _1270 = _1122;
        _1271 = _1121;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _1260;
        _1261 = _1260;
        _1262 = _1260;
        _1263 = _1260;
        _1264 = _1260;
        _1265 = _1260;
        _1266 = _1260;
        _1267 = _1260;
        _1268 = _1260;
        _1269 = _1260;
        _1270 = _1260;
        _1271 = _1260;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1299 = fma(_958, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950));
        float _1303 = fma(_958, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950));
        float _1307 = fma(_958, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950));
        float _1330 = _950 + _739;
        float _1331 = _954 + _740;
        float _1332 = _958 + _741;
        float _1342 = fma(_1332, cbModelParam._m0[30u].z, fma(_1331, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1330)) - _1299;
        float _1343 = fma(_1332, cbModelParam._m0[31u].z, fma(_1331, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1330)) - _1303;
        float _1344 = fma(_1332, cbModelParam._m0[32u].z, fma(_1331, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1330)) - _1307;
        float _1348 = inversesqrt(dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344)));
        float _1361 = ((_1348 * _1342) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1299 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1348 * _1343) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1303 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1348 * _1344) / cbModelParam._m0[35u].z) + ((((((_1307 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        float _1398 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1365.x + (-0.5));
        float _1400 = _1398 * (_1365.y + (-0.5));
        float _1401 = _1398 * (_1365.z + (-0.5));
        float _1408 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1372.x + (-0.5));
        float _1410 = _1408 * (_1372.y + (-0.5));
        float _1411 = _1408 * (_1372.z + (-0.5));
        float _1418 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1379.x + (-0.5));
        float _1420 = _1418 * (_1379.y + (-0.5));
        float _1421 = _1418 * (_1379.z + (-0.5));
        float _1428 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1386.x + (-0.5));
        float _1430 = _1428 * (_1386.y + (-0.5));
        float _1431 = _1428 * (_1386.z + (-0.5));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = _1399 * 0.5;
        float _1436 = _1409 * 0.5;
        float _1437 = _1419 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_739, _740, _741), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _3906 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1462 + 1.0))) + _1467) * _1432;
        float _1477 = _1400 * 0.5;
        float _1478 = _1410 * 0.5;
        float _1479 = _1420 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_739, _740, _741), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _3939 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1504 + 1.0))) + _1509) * _1433;
        float _1519 = _1401 * 0.5;
        float _1520 = _1411 * 0.5;
        float _1521 = _1421 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_739, _740, _741), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _3972 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1546 + 1.0))) + _1551) * _1434;
        _1568 = _1401;
        _1569 = _1400;
        _1570 = _1399;
        _1571 = _1411;
        _1572 = _1410;
        _1573 = _1409;
        _1574 = _1421;
        _1575 = _1420;
        _1576 = _1419;
        _1577 = _1434;
        _1578 = _1433;
        _1579 = _1432;
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _1260;
        _1569 = _1260;
        _1570 = _1260;
        _1571 = _1260;
        _1572 = _1260;
        _1573 = _1260;
        _1574 = _1260;
        _1575 = _1260;
        _1576 = _1260;
        _1577 = _1260;
        _1578 = _1260;
        _1579 = _1260;
        _1580 = 0.0;
        _1581 = 0.0;
        _1582 = 0.0;
    }
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1272)) + _1272;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1273)) + _1273;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1274)) + _1274;
    float _1615 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1592));
    float _1636 = _897 * 0.5;
    float _1637 = _898 * 0.5;
    float _1638 = _899 * 0.5;
    float _1639 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1642 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1645 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1679;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1652 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1259, _1263, _1266, _1269));
        float _1656 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1660 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1667 = dot(vec4(cbModelParam._m0[39u]), vec4(_1636, _1637, _1638, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1690;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1681 = dot(vec4(cbModelParam._m0[40u]), vec4(_1636, _1637, _1638, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1694 = (_1690 * cbModelParam._m0[1u].x) + (_1679 * (1.0 - cbModelParam._m0[1u].x));
    float _1704 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _742);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1704 : min(cbModelParam._m0[25u].z, _1704));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1752 = fma(_958, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950)) + cbModelParam._m0[13u].w;
        float _1756 = fma(_958, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950)) + cbModelParam._m0[14u].w;
        float _1760 = fma(_958, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950)) + cbModelParam._m0[15u].w;
        float _1763 = fma(_899, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897));
        float _1766 = fma(_899, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897));
        float _1769 = fma(_899, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897));
        float _1797;
        if (_1763 > 0.0)
        {
            _1797 = abs((1.0 - _1752) / _1763);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1752 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1797 = frontier_phi_14_12_ladder;
        }
        float _1997;
        if (_1766 > 0.0)
        {
            _1997 = abs((1.0 - _1756) / _1766);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1756 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1997 = frontier_phi_23_19_ladder;
        }
        float _2240;
        if (_1769 > 0.0)
        {
            _2240 = abs((1.0 - _1760) / _1769);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1760 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2240 = frontier_phi_35_30_ladder;
        }
        float _2242 = isnan(_1997) ? _1797 : (isnan(_1797) ? _1997 : min(_1797, _1997));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1763) + _1752;
        float _2248 = (_2243 * _1766) + _1756;
        float _2249 = (_2243 * _1769) + _1760;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2250;
        float _2254 = _2250 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 > _2254) || ((_2248 < _2252) || ((_2247 < _2252) || (_2247 > _2254))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2249, cbModelParam._m0[9u].z, fma(_2248, cbModelParam._m0[9u].y, _2247 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2249, cbModelParam._m0[10u].z, fma(_2248, cbModelParam._m0[10u].y, _2247 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2249, cbModelParam._m0[11u].z, fma(_2248, cbModelParam._m0[11u].y, _2247 * cbModelParam._m0[11u].x))), _1705);
            frontier_phi_13_35_ladder = _2373.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2373.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2373.x * cbModelParam._m0[1u].y;
        }
        _1785 = frontier_phi_13_35_ladder_2;
        _1787 = frontier_phi_13_35_ladder_1;
        _1789 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_897, _898, _899), _1705);
        _1785 = _1773.x * cbModelParam._m0[1u].y;
        _1787 = _1773.y * cbModelParam._m0[1u].y;
        _1789 = _1773.z * cbModelParam._m0[1u].y;
    }
    float _1793 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _742);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1793 : min(cbModelParam._m0[25u].w, _1793));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1847 = fma(_958, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950)) + cbModelParam._m0[21u].w;
        float _1851 = fma(_958, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950)) + cbModelParam._m0[22u].w;
        float _1855 = fma(_958, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950)) + cbModelParam._m0[23u].w;
        float _1858 = fma(_899, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897));
        float _1861 = fma(_899, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897));
        float _1864 = fma(_899, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897));
        float _2002;
        if (_1858 > 0.0)
        {
            _2002 = abs((1.0 - _1847) / _1858);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1847 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2002 = frontier_phi_25_21_ladder;
        }
        float _2267;
        if (_1861 > 0.0)
        {
            _2267 = abs((1.0 - _1851) / _1861);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1851 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2267 = frontier_phi_37_32_ladder;
        }
        float _2472;
        if (_1864 > 0.0)
        {
            _2472 = abs((1.0 - _1855) / _1864);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1855 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2472 = frontier_phi_46_43_ladder;
        }
        float _2474 = isnan(_2267) ? _2002 : (isnan(_2002) ? _2267 : min(_2002, _2267));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1858) + _1847;
        float _2480 = (_2475 * _1861) + _1851;
        float _2481 = (_2475 * _1864) + _1855;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2482;
        float _2485 = _2482 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2481 > _2485) || ((_2481 < _2483) || ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 < _2483) || (_2479 > _2485))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2481, cbModelParam._m0[17u].z, fma(_2480, cbModelParam._m0[17u].y, _2479 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2481, cbModelParam._m0[18u].z, fma(_2480, cbModelParam._m0[18u].y, _2479 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2481, cbModelParam._m0[19u].z, fma(_2480, cbModelParam._m0[19u].y, _2479 * cbModelParam._m0[19u].x))), _1794);
            frontier_phi_22_46_ladder = _2680.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2680.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2680.x * cbModelParam._m0[1u].z;
        }
        _1883 = frontier_phi_22_46_ladder_2;
        _1885 = frontier_phi_22_46_ladder_1;
        _1887 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_897, _898, _899), _1794);
        _1883 = _1867.x * cbModelParam._m0[1u].z;
        _1885 = _1867.y * cbModelParam._m0[1u].z;
        _1887 = _1867.z * cbModelParam._m0[1u].z;
    }
    float _1899 = ((((1.0 - _918) * ((_905 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_918 * _905)) * _889;
    float _1900 = _1899 * ((cbModelParam._m0[1u].w * (_1883 - _1785)) + _1785);
    float _1901 = _1899 * ((cbModelParam._m0[1u].w * (_1885 - _1787)) + _1787);
    float _1902 = _1899 * ((cbModelParam._m0[1u].w * (_1887 - _1789)) + _1789);
    float _1905 = fma(_1902, cbSceneParam._m0[89u].z, fma(_1901, cbSceneParam._m0[89u].y, _1900 * cbSceneParam._m0[89u].x));
    float _1908 = fma(_1902, cbSceneParam._m0[90u].z, fma(_1901, cbSceneParam._m0[90u].y, _1900 * cbSceneParam._m0[90u].x));
    float _1911 = fma(_1902, cbSceneParam._m0[91u].z, fma(_1901, cbSceneParam._m0[91u].y, _1900 * cbSceneParam._m0[91u].x));
    uvec4 _1921 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _1923 = _1921.x * 14u;
    uint _1924 = _1923 + 13u;
    float _1931 = _889 + (-1.0);
    float _1936 = (cbLight._m0[_1924].x * _1931) + 1.0;
    float _1937 = (cbLight._m0[_1924].y * _1931) + 1.0;
    float _1938 = (cbLight._m0[_1924].z * _1931) + 1.0;
    float _1939 = (cbLight._m0[_1924].w * _1931) + 1.0;
    uint _1940 = _1923 + 5u;
    float _1946 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1950 = _1923 + 4u;
    float _1956 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1960 = _1923 | 1u;
    float _1971 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_739, _740, _741));
    float _1974 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_739, _740, _741));
    float _4108 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _4119 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1979 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.3183098733425140380859375;
    float _1981 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.3183098733425140380859375;
    float _1988 = ((cbLight._m0[_1940].x * _1946) * _1981) + ((cbLight._m0[_1950].x * _1956) * _1979);
    float _1989 = ((_1946 * cbLight._m0[_1940].y) * _1981) + ((_1956 * cbLight._m0[_1950].y) * _1979);
    float _1990 = ((_1946 * cbLight._m0[_1940].z) * _1981) + ((_1956 * cbLight._m0[_1950].z) * _1979);
    uvec4 _1994 = floatBitsToUint(cbLight._m0[_1923 + 12u]);
    bool _1996 = _1994.x == 0u;
    float _2007;
    float _2009;
    float _2011;
    if (_1996)
    {
        _2007 = _1988;
        _2009 = _1989;
        _2011 = _1990;
    }
    else
    {
        uint _2015 = _1923 + 6u;
        float _2031 = (dot(vec3(cbLight._m0[_1923 + 2u].xyz), vec3(_739, _740, _741)) * 0.5) + 0.5;
        float _2032 = _2031 * _2031;
        float _4130 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2033 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2034 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2007 = (((cbLight._m0[_2015].x * 0.3183098733425140380859375) * _2033) * _2034) + _1988;
        _2009 = (((cbLight._m0[_2015].y * 0.3183098733425140380859375) * _2033) * _2034) + _1989;
        _2011 = (((cbLight._m0[_2015].z * 0.3183098733425140380859375) * _2033) * _2034) + _1990;
    }
    bool _2014 = _1994.y == 0u;
    float _2052;
    float _2054;
    float _2056;
    if (_2014)
    {
        _2052 = _2007;
        _2054 = _2009;
        _2056 = _2011;
    }
    else
    {
        uint _2211 = _1923 + 7u;
        float _2227 = (dot(vec3(cbLight._m0[_1923 + 3u].xyz), vec3(_739, _740, _741)) * 0.5) + 0.5;
        float _2228 = _2227 * _2227;
        float _4146 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2229 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2230 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2052 = (((cbLight._m0[_2211].x * 0.3183098733425140380859375) * _2229) * _2230) + _2007;
        _2054 = (((cbLight._m0[_2211].y * 0.3183098733425140380859375) * _2229) * _2230) + _2009;
        _2056 = (((cbLight._m0[_2211].z * 0.3183098733425140380859375) * _2229) * _2230) + _2011;
    }
    uint _2059 = _1923 + 8u;
    float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _742) * 0.949999988079071044921875);
    float _2073 = _2072 * _2072;
    float _2074 = cbLight._m0[_1923].x + _818;
    float _2075 = cbLight._m0[_1923].y + _819;
    float _2076 = cbLight._m0[_1923].z + _820;
    float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
    float _2081 = _2080 * _2074;
    float _2082 = _2080 * _2075;
    float _2083 = _2080 * _2076;
    float _2084 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_1923].xyz));
    float _4162 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _2088 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2089 = dot(vec3(_739, _740, _741), vec3(_2081, _2082, _2083));
    float _4184 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2093 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2081, _2082, _2083));
    float _4195 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = _2073 * _2073;
    float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
    float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2113 = 1.0 - _2073;
    float _2124 = (0.5 / (((_2088 * ((_2087 * _2113) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2113) + _2073) * _2087))) * _2087;
    float _4206 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2126 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
    uint _2137 = _1923 + 9u;
    float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _742) * 0.949999988079071044921875);
    float _2149 = _2148 * _2148;
    float _2150 = cbLight._m0[_1960].x + _818;
    float _2151 = cbLight._m0[_1960].y + _819;
    float _2152 = cbLight._m0[_1960].z + _820;
    float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
    float _2157 = _2156 * _2150;
    float _2158 = _2156 * _2151;
    float _2159 = _2156 * _2152;
    float _2160 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_1960].xyz));
    float _4217 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2164 = dot(vec3(_739, _740, _741), vec3(_2157, _2158, _2159));
    float _4228 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2168 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_2157, _2158, _2159));
    float _4239 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2172 = _2149 * _2149;
    float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
    float _2185 = (exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2186 = 1.0 - _2149;
    float _2196 = (0.5 / (((_2088 * ((_2163 * _2186) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2186) + _2149) * _2163))) * _2163;
    float _4250 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
    float _2208 = (((_2185 * cbLight._m0[_2137].x) * _2198) * _1946) + (((_2112 * cbLight._m0[_2059].x) * _2126) * _1956);
    float _2209 = (((_2185 * cbLight._m0[_2137].y) * _2198) * _1946) + (((_2112 * cbLight._m0[_2059].y) * _2126) * _1956);
    float _2210 = (((_2185 * cbLight._m0[_2137].z) * _2198) * _1946) + (((_2112 * cbLight._m0[_2059].z) * _2126) * _1956);
    float _2272;
    float _2274;
    float _2276;
    if (_1996)
    {
        _2272 = _2208;
        _2274 = _2209;
        _2276 = _2210;
    }
    else
    {
        uint _2278 = _1923 + 2u;
        uint _2282 = _1923 + 10u;
        float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _742) * 0.949999988079071044921875);
        float _2297 = _2296 * _2296;
        float _2298 = cbLight._m0[_2278].x + _818;
        float _2299 = cbLight._m0[_2278].y + _819;
        float _2300 = cbLight._m0[_2278].z + _820;
        float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
        float _2305 = _2304 * _2298;
        float _2306 = _2304 * _2299;
        float _2307 = _2304 * _2300;
        float _2308 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2278].xyz));
        float _4261 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2312 = dot(vec3(_739, _740, _741), vec3(_2305, _2306, _2307));
        float _4272 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2316 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2305, _2306, _2307));
        float _4283 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2320 = _2297 * _2297;
        float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
        float _2333 = (exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2334 = 1.0 - _2297;
        float _2344 = (0.5 / (((_2088 * ((_2311 * _2334) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2334) + _2297) * _2311))) * _2311;
        float _4294 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2346 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
        float _2347 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2272 = (((_2333 * cbLight._m0[_2282].x) * _2346) * _2347) + _2208;
        _2274 = (((_2333 * cbLight._m0[_2282].y) * _2346) * _2347) + _2209;
        _2276 = (((_2333 * cbLight._m0[_2282].z) * _2346) * _2347) + _2210;
    }
    float _2382;
    float _2384;
    float _2386;
    if (_2014)
    {
        _2382 = _2272;
        _2384 = _2274;
        _2386 = _2276;
    }
    else
    {
        uint _2393 = _1923 + 3u;
        uint _2397 = _1923 + 11u;
        float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _742) * 0.949999988079071044921875);
        float _2412 = _2411 * _2411;
        float _2413 = cbLight._m0[_2393].x + _818;
        float _2414 = cbLight._m0[_2393].y + _819;
        float _2415 = cbLight._m0[_2393].z + _820;
        float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
        float _2420 = _2419 * _2413;
        float _2421 = _2419 * _2414;
        float _2422 = _2419 * _2415;
        float _2423 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2393].xyz));
        float _4310 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2427 = dot(vec3(_739, _740, _741), vec3(_2420, _2421, _2422));
        float _4321 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2431 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2420, _2421, _2422));
        float _4332 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _2412 * _2412;
        float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
        float _2448 = (exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2449 = 1.0 - _2412;
        float _2459 = (0.5 / (((_2088 * ((_2426 * _2449) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2449) + _2412) * _2426))) * _2426;
        float _4343 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2382 = (((_2448 * cbLight._m0[_2397].x) * _2461) * _2462) + _2272;
        _2384 = (((_2448 * cbLight._m0[_2397].y) * _2461) * _2462) + _2274;
        _2386 = (((_2448 * cbLight._m0[_2397].z) * _2461) * _2462) + _2276;
    }
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    if (_1921.y == 0u)
    {
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2537;
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2537;
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2537;
        uvec4 _2552 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2553 = _2552.x;
        uint _2564 = uint((float(_2552.y) * floor(float(uint(cbSceneParam._m0[85u].y * _827) / _2553))) + floor(float(uint(cbSceneParam._m0[85u].x * _826) / _2553)));
        float _2574 = (log2(_2540 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2575 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        uint _2578 = uint(isnan(14.0) ? _2575 : (isnan(_2575) ? 14.0 : min(_2575, 14.0)));
        uvec4 _2583 = texelFetch(g_lightClusterGridBuffer, int(((_2578 << 2u) + (_2564 << 6u)) >> 2u));
        uint _2584 = _2583.x;
        uint _2585 = _2552.z;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((((1u << ((_2585 >> 4u) & 15u)) + 4294967295u) & _2584) == 0u) || ((_2585 & 240u) == 0u))
        {
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
        }
        else
        {
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            uint _2836 = 0u;
            uint _2845;
            bool _2846;
            for (;;)
            {
                _2845 = texelFetch(g_lightClassification, int((((_2578 << 5u) + (_2564 << 9u)) + (_2836 << 2u)) >> 2u)).x;
                _2846 = _2845 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2846)
                {
                    frontier_phi_61_pred = _2830;
                    frontier_phi_61_pred_1 = _2835;
                    frontier_phi_61_pred_2 = _2834;
                    frontier_phi_61_pred_3 = _2833;
                    frontier_phi_61_pred_4 = _2832;
                    frontier_phi_61_pred_5 = _2831;
                }
                else
                {
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    uint _2960;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2845;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    for (;;)
                    {
                        uint _2964 = uint(findLSB(_2960)) + (_2836 << 5u);
                        uint _2961 = (_2960 + 4294967295u) & _2960;
                        uint _2966 = _2964 * 48u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 3u)).x));
                        uint _2986 = (_2964 * 48u) + 4u;
                        vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 3u)).x));
                        uint _3005 = (_2964 * 48u) + 8u;
                        vec3 _3016 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x));
                        float _3020 = _2980.x - _2538;
                        float _3021 = _2980.y - _2539;
                        float _3022 = _2980.z - _2540;
                        float _3023 = dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022));
                        float _3026 = inversesqrt(_3023);
                        float _3027 = _3026 * _3020;
                        float _3028 = _3026 * _3021;
                        float _3029 = _3026 * _3022;
                        float _3030 = dot(vec3(_845, _848, _851), vec3(_3027, _3028, _3029));
                        float _3035 = 1.0 - (_3023 * _2980.w);
                        float _4369 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3036 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3037 = sqrt(_3023) * _2999.w;
                        float _3040 = 1.39999997615814208984375 / (_3037 + 1.39999997615814208984375);
                        float _3041 = _3040 * _3040;
                        float _3044 = ((1.0 - _3041) * _3030) + _3041;
                        float _3047 = _3037 * _3037;
                        float _3051 = ((isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))) * _3036) / ((_3047 * 0.699999988079071044921875) + 1.0);
                        float _3055 = (-0.0) - _2538;
                        float _3056 = (-0.0) - _2539;
                        float _3057 = (-0.0) - _2540;
                        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
                        float _3062 = _3061 * _3055;
                        float _3063 = _3061 * _3056;
                        float _3064 = _3061 * _3057;
                        float _3072 = exp2(log2(1.0 / ((_3047 * 3.5) + 5.0)) * 0.25);
                        float _3073 = 1.0 - _905;
                        float _3080 = sqrt(1.0 - ((1.0 - (_3073 * _3073)) * (1.0 - (_3072 * _3072))));
                        float _3081 = _3080 * _3080;
                        float _3082 = _3081 * _3081;
                        float _3083 = _3062 + _3027;
                        float _3084 = _3063 + _3028;
                        float _3085 = _3064 + _3029;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3093 = dot(vec3(_845, _848, _851), vec3(_3062, _3063, _3064));
                        float _4385 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3097 = dot(vec3(_845, _848, _851), vec3(_3089 * _3083, _3089 * _3084, _3089 * _3085));
                        float _4396 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3100 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3104 = ((_3100 * _3100) * (_3082 + (-1.0))) + 1.0;
                        float _3105 = _3040 * _3081;
                        float _3106 = _3105 * _3105;
                        float _3109 = ((1.0 - _3106) * _3030) + _3106;
                        float _4407 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3110 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3111 = 1.0 - _3081;
                        float _3121 = (0.5 / (((_3110 * ((_3096 * _3111) + _3081)) + 9.9999999392252902907785028219223e-09) + (((_3110 * _3111) + _3081) * _3096))) * _3110;
                        float _4418 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3132 = (((_3082 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3104 * _3104) * ((_3047 * 2.1991131305694580078125) + 3.141590118408203125))) * _3036;
                        _2889 = (_3051 * _2999.x) + _2957;
                        _2890 = (_3051 * _2999.y) + _2958;
                        _2891 = (_3051 * _2999.z) + _2959;
                        _2886 = (_3132 * _3016.x) + _2954;
                        _2887 = (_3132 * _3016.y) + _2955;
                        _2888 = (_3132 * _3016.z) + _2956;
                        if (_2961 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2961;
                        }
                    }
                    frontier_phi_61_pred = _2886;
                    frontier_phi_61_pred_1 = _2891;
                    frontier_phi_61_pred_2 = _2890;
                    frontier_phi_61_pred_3 = _2889;
                    frontier_phi_61_pred_4 = _2888;
                    frontier_phi_61_pred_5 = _2887;
                }
                _2686 = frontier_phi_61_pred;
                _2696 = frontier_phi_61_pred_1;
                _2694 = frontier_phi_61_pred_2;
                _2692 = frontier_phi_61_pred_3;
                _2690 = frontier_phi_61_pred_4;
                _2688 = frontier_phi_61_pred_5;
                uint _2837 = _2836 + 1u;
                if (_2837 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2830 = _2686;
                    _2831 = _2688;
                    _2832 = _2690;
                    _2833 = _2692;
                    _2834 = _2694;
                    _2835 = _2696;
                    _2836 = _2837;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
        }
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.z;
        uint _2702 = (_2700 >> 8u) & 15u;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((4294967295u << _2702) & _2584) == 0u)
        {
            _2798 = _2685;
            _2800 = _2687;
            _2802 = _2689;
            _2804 = _2691;
            _2806 = _2693;
            _2808 = _2695;
        }
        else
        {
            float _2823 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
            float _2824 = _2823 * _2538;
            float _2825 = _2823 * _2539;
            float _2826 = _2823 * _2540;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2702 < ((_2700 >> 12u) & 15u))
            {
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2937 = _2685;
                float _2938 = _2687;
                float _2939 = _2689;
                float _2940 = _2691;
                float _2941 = _2693;
                float _2942 = _2695;
                uint _2943 = _2702;
                uint _2952;
                bool _2953;
                for (;;)
                {
                    _2952 = texelFetch(g_lightClassification, int((((_2578 << 5u) + (_2564 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                    _2953 = _2952 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2953)
                    {
                        frontier_phi_67_pred = _2940;
                        frontier_phi_67_pred_1 = _2941;
                        frontier_phi_67_pred_2 = _2942;
                        frontier_phi_67_pred_3 = _2939;
                        frontier_phi_67_pred_4 = _2938;
                        frontier_phi_67_pred_5 = _2937;
                    }
                    else
                    {
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3150 = _2937;
                        float _3151 = _2938;
                        float _3152 = _2939;
                        float _3153 = _2940;
                        float _3154 = _2941;
                        float _3155 = _2942;
                        uint _3156 = _2952;
                        uint _3157;
                        vec4 _3182;
                        float _3183;
                        vec4 _3198;
                        vec3 _3210;
                        vec4 _3225;
                        vec4 _3240;
                        float _3286;
                        bool _3287;
                        for (;;)
                        {
                            uint _3167 = ((_2943 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3156));
                            _3157 = (_3156 + 4294967295u) & _3156;
                            uint _3169 = _3167 * 40u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            _3183 = _3182.w;
                            uint _3185 = (_3167 * 40u) + 4u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3200 = (_3167 * 40u) + 8u;
                            _3210 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x));
                            uint _3212 = (_3167 * 40u) + 16u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3227 = (_3167 * 40u) + 20u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3167 * 40u) + 24u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3261 = (_3167 * 40u) + 28u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            _3286 = fma(_2540, _3274.z, fma(_2539, _3274.y, _3274.x * _2538)) + _3274.w;
                            _3287 = !((fma(_2540, _3255.z, fma(_2539, _3255.y, _3255.x * _2538)) + _3255.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3287)
                            {
                                float _3314 = _3182.x - _2538;
                                float _3315 = _3182.y - _2539;
                                float _3316 = _3182.z - _2540;
                                float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                                float _3320 = inversesqrt(_3317);
                                float _3321 = _3320 * _3314;
                                float _3322 = _3320 * _3315;
                                float _3323 = _3320 * _3316;
                                float _3327 = 1.0 - (_3317 / (_3183 * _3183));
                                float _4429 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3332 = sqrt(_3317) * _3198.w;
                                float _3334 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                                float _3335 = _3334 * _3334;
                                float _3338 = ((1.0 - _3335) * dot(vec3(_3321, _3322, _3323), vec3(_845, _848, _851))) + _3335;
                                float _3341 = _3332 * _3332;
                                float _3345 = (fma(_2540, _3225.z, fma(_2539, _3225.y, _3225.x * _2538)) + _3225.w) / _3286;
                                float _3346 = (fma(_2540, _3240.z, fma(_2539, _3240.y, _3240.x * _2538)) + _3240.w) / _3286;
                                float _3350 = 1.0 - dot(vec2(_3345, _3346), vec2(_3345, _3346));
                                float _4445 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3352 = _3351 * (((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3328) / ((_3341 * 0.699999988079071044921875) + 1.0));
                                float _3364 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                                float _3365 = 1.0 - _905;
                                float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                                float _3373 = _3372 * _3372;
                                float _3374 = _3373 * _3373;
                                float _3375 = _3321 - _2824;
                                float _3376 = _3322 - _2825;
                                float _3377 = _3323 - _2826;
                                float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                                float _3385 = dot(vec3(_845, _848, _851), vec3((-0.0) - _2824, (-0.0) - _2825, (-0.0) - _2826));
                                float _4456 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3389 = dot(vec3(_845, _848, _851), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                                float _4467 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                                float _3397 = _3334 * _3373;
                                float _3398 = _3397 * _3397;
                                float _3404 = ((1.0 - _3398) * dot(vec3(_845, _848, _851), vec3(_3321, _3322, _3323))) + _3398;
                                float _4478 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3406 = 1.0 - _3373;
                                float _3416 = (0.5 / (((_3405 * ((_3388 * _3406) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3405 * _3406) + _3373) * _3388))) * _3405;
                                float _4489 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3426 = (_3351 * _3328) * (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) / ((_3396 * _3396) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3426 * _3210.x;
                                frontier_phi_73_pred_1 = _3426 * _3210.y;
                                frontier_phi_73_pred_2 = _3352 * _3198.z;
                                frontier_phi_73_pred_3 = _3352 * _3198.y;
                                frontier_phi_73_pred_4 = _3352 * _3198.x;
                                frontier_phi_73_pred_5 = _3426 * _3210.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3430 = frontier_phi_73_pred;
                            _3431 = frontier_phi_73_pred_1;
                            _3435 = frontier_phi_73_pred_2;
                            _3434 = frontier_phi_73_pred_3;
                            _3433 = frontier_phi_73_pred_4;
                            _3432 = frontier_phi_73_pred_5;
                            _3140 = _3433 + _3153;
                            _3141 = _3434 + _3154;
                            _3142 = _3435 + _3155;
                            _3137 = _3430 + _3150;
                            _3138 = _3431 + _3151;
                            _3139 = _3432 + _3152;
                            if (_3157 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3157;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3140;
                        frontier_phi_67_pred_1 = _3141;
                        frontier_phi_67_pred_2 = _3142;
                        frontier_phi_67_pred_3 = _3139;
                        frontier_phi_67_pred_4 = _3138;
                        frontier_phi_67_pred_5 = _3137;
                    }
                    _2805 = frontier_phi_67_pred;
                    _2807 = frontier_phi_67_pred_1;
                    _2809 = frontier_phi_67_pred_2;
                    _2803 = frontier_phi_67_pred_3;
                    _2801 = frontier_phi_67_pred_4;
                    _2799 = frontier_phi_67_pred_5;
                    uint _2944 = _2943 + 1u;
                    if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2937 = _2799;
                        _2938 = _2801;
                        _2939 = _2803;
                        _2940 = _2805;
                        _2941 = _2807;
                        _2942 = _2809;
                        _2943 = _2944;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2807;
                frontier_phi_55_56_ladder_1 = _2809;
                frontier_phi_55_56_ladder_2 = _2805;
                frontier_phi_55_56_ladder_3 = _2803;
                frontier_phi_55_56_ladder_4 = _2801;
                frontier_phi_55_56_ladder_5 = _2799;
            }
            else
            {
                frontier_phi_55_56_ladder = _2693;
                frontier_phi_55_56_ladder_1 = _2695;
                frontier_phi_55_56_ladder_2 = _2691;
                frontier_phi_55_56_ladder_3 = _2689;
                frontier_phi_55_56_ladder_4 = _2687;
                frontier_phi_55_56_ladder_5 = _2685;
            }
            _2798 = frontier_phi_55_56_ladder_5;
            _2800 = frontier_phi_55_56_ladder_4;
            _2802 = frontier_phi_55_56_ladder_3;
            _2804 = frontier_phi_55_56_ladder_2;
            _2806 = frontier_phi_55_56_ladder;
            _2808 = frontier_phi_55_56_ladder_1;
        }
        float _2813 = isnan(1.0) ? _889 : (isnan(_889) ? 1.0 : min(_889, 1.0));
        _2597 = (_2813 * _2804) + _2052;
        _2599 = (_2813 * _2806) + _2054;
        _2601 = (_2813 * _2808) + _2056;
        _2603 = ((_2798 * 0.039999999105930328369140625) * _2813) + _2382;
        _2605 = ((_2800 * 0.039999999105930328369140625) * _2813) + _2384;
        _2607 = ((_2802 * 0.039999999105930328369140625) * _2813) + _2386;
    }
    else
    {
        _2597 = _2052;
        _2599 = _2054;
        _2601 = _2056;
        _2603 = _2382;
        _2605 = _2384;
        _2607 = _2386;
    }
    float _4505 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4516 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4527 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    uint _2627 = _266 + 6u;
    float _2635 = _826 / cbSceneParam._m0[86u].x;
    float _2636 = _827 / cbSceneParam._m0[86u].y;
    vec4 _2650 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2635, _2636, (log2((isnan(cbSceneParam._m0[77u].w) ? _760 : (isnan(_760) ? cbSceneParam._m0[77u].w : min(_760, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2652 = _2650.x;
    float _2653 = _2650.y;
    float _2654 = _2650.z;
    float _2655 = _2650.w;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_760 > cbSceneParam._m0[78u].w)
    {
        float _2710 = isnan(_760) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _760 : min(cbSceneParam._m0[80u].w, _760));
        float _2711 = _2710 / _760;
        float _2722 = _2711 * _811;
        float _2723 = _812 * _2711;
        float _2724 = (-0.0) - _2723;
        float _2726 = _2711 * _813;
        float _2728 = (cbSceneParam._m0[77u].w * _2724) / _2710;
        float _2729 = _2728 + cbSceneParam._m0[79u].w;
        float _2730 = cbSceneParam._m0[79u].w - _2723;
        float _2736 = sqrt(((_2722 * _2722) + (_2723 * _2723)) + (_2726 * _2726));
        float _2739 = (1.0 - (cbSceneParam._m0[77u].w / _2710)) * _2736;
        float _2744 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2746 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2899;
        if (abs((_2724 - _2728) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2899 = ((((_2729 > 0.0) ? exp2(_2744 * _2729) : (2.0 - exp2(_2746 * _2729))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2739;
        }
        else
        {
            float _2859 = 1.0 / cbSceneParam._m0[80u].x;
            float _2860 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : max(_2729, _2730));
            float _2861 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : min(_2729, _2730));
            float _2870 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : min(_2860, 0.0));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            _2899 = ((abs(_2736 / _2724) * cbSceneParam._m0[80u].y) * ((((_2870 - _2871) * 2.0) - ((exp2(_2744 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0)))) - exp2(_2744 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))))) * _2859)) - ((exp2(_2746 * _2870) - exp2(_2746 * _2871)) * _2859))) + (_2739 * cbSceneParam._m0[80u].z);
        }
        vec4 _2901 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2635, _2636, 1.0), 0.0);
        float _2910 = exp2((_2899 * (-1.44269502162933349609375)) * (1.0 - _2901.w));
        float _2911 = log2(_2910);
        float _2927 = log2(_2655);
        _2748 = (exp2(_2927 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].x)) * _2901.x) / cbSceneParam._m0[78u].x)) + _2652;
        _2750 = (exp2(_2927 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].y)) * _2901.y) / cbSceneParam._m0[78u].y)) + _2653;
        _2752 = (exp2(_2927 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].z)) * _2901.z) / cbSceneParam._m0[78u].z)) + _2654;
        _2754 = _2910 * _2655;
    }
    else
    {
        _2748 = _2652;
        _2750 = _2653;
        _2752 = _2654;
        _2754 = _2655;
    }
    float _2766 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2767 = _2766 == 3.0;
    float _2768 = log2(_2754);
    float _2775 = exp2(_2768 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2597 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _889))) + ((_2603 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1694)) * cbPerFrame._m0[3u].x));
    float _2776 = exp2(_2768 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2599 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _889))) + ((_2605 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1694)) * cbPerFrame._m0[3u].x));
    float _2777 = exp2(_2768 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2601 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _889))) + ((_2607 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1694)) * cbPerFrame._m0[3u].x));
    float _2786 = (_2766 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2786 * (_2767 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.y = _2786 * (_2767 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2750)));
    SV_Target.z = _2786 * (_2767 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2752)));
    SV_Target.w = cbInstanceData._m0[_2627].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2627].w;
}


