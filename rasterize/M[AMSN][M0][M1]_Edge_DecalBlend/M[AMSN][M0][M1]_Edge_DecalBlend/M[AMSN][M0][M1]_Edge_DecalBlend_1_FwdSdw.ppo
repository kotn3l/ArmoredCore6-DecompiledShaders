#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _801;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _246 = _242.z;
    float _250 = (_242.x * 2.0) + (-1.0);
    float _252 = (_242.y * 2.0) + (-1.0);
    float _253 = dot(vec2(_250, _252), vec2(_250, _252));
    float _3400 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _259 = sqrt(1.0 - (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))));
    float _262 = fma(_259, _192 * NORMAL.x, fma(_252, _199 * TANGENT.x, (_185 * _178) * _250));
    float _265 = fma(_259, _192 * NORMAL.y, fma(_252, _199 * TANGENT.y, (_185 * _179) * _250));
    float _268 = fma(_259, _192 * NORMAL.z, fma(_252, _199 * TANGENT.z, (_185 * _180) * _250));
    float _272 = inversesqrt(dot(vec3(_262, _265, _268), vec3(_262, _265, _268)));
    float _273 = _272 * _262;
    float _274 = _272 * _265;
    float _275 = _272 * _268;
    float _3411 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _276 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _3422 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3433 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3444 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _295 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _337 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _347 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _337);
    float _348 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _337);
    float _349 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _337);
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _347 * _353;
    float _355 = _348 * _353;
    float _356 = _349 * _353;
    float _362 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _363 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _384 = fma(_275, cbSceneParam._m0[5u].z, fma(_274, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _273));
    float _387 = fma(_275, cbSceneParam._m0[6u].z, fma(_274, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _273));
    float _390 = fma(_275, cbSceneParam._m0[7u].z, fma(_274, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _273));
    uint _403 = uint(roundEven(NORMAL.w)) * 13u;
    uint _406 = (_403 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _412 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_406].x;
    float _413 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_406].y;
    float _414 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_406].z;
    float _3455 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _3466 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _416 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    vec4 _426 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _362, cbSceneParam._m0[86u].y * _363));
    float _429 = _426.x * TEXCOORD.z;
    float _430 = dot(vec3(_273, _274, _275), vec3(_354, _355, _356));
    float _433 = _430 * 2.0;
    float _437 = (_433 * _273) - _354;
    float _438 = (_433 * _274) - _355;
    float _439 = (_433 * _275) - _356;
    float _443 = abs(dot(vec3(_354, _355, _356), vec3(_273, _274, _275)));
    float _3488 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _445 = sqrt(_276);
    float _458 = exp2((_445 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_445 * 3.0));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _800;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _525 = fma(_498, cbModelParam._m0[26u].z, fma(_494, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _490));
        float _529 = fma(_498, cbModelParam._m0[27u].z, fma(_494, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _490));
        float _533 = fma(_498, cbModelParam._m0[28u].z, fma(_494, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _490));
        float _558 = _490 + _273;
        float _559 = _494 + _274;
        float _560 = _498 + _275;
        float _570 = fma(_560, cbModelParam._m0[26u].z, fma(_559, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _558)) - _525;
        float _571 = fma(_560, cbModelParam._m0[27u].z, fma(_559, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _558)) - _529;
        float _572 = fma(_560, cbModelParam._m0[28u].z, fma(_559, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _558)) - _533;
        float _576 = inversesqrt(dot(vec3(_570, _571, _572), vec3(_570, _571, _572)));
        float _589 = ((_576 * _570) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_525 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _590 = ((_576 * _571) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_529 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _591 = ((_576 * _572) / cbModelParam._m0[34u].z) + ((((((_533 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_589, _590, _591), 0.0);
        float _628 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_594.x + (-0.5));
        float _630 = _628 * (_594.y + (-0.5));
        float _631 = _628 * (_594.z + (-0.5));
        float _638 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_601.x + (-0.5));
        float _640 = _638 * (_601.y + (-0.5));
        float _641 = _638 * (_601.z + (-0.5));
        float _648 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_608.x + (-0.5));
        float _650 = _648 * (_608.y + (-0.5));
        float _651 = _648 * (_608.z + (-0.5));
        float _658 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_615.x + (-0.5));
        float _660 = _658 * (_615.y + (-0.5));
        float _661 = _658 * (_615.z + (-0.5));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _664 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _665 = _629 * 0.5;
        float _666 = _639 * 0.5;
        float _667 = _649 * 0.5;
        float _668 = dot(vec3(_665, _666, _667), vec3(_665, _666, _667));
        float _673 = (_668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_668);
        float _682 = (dot(vec3(_273, _274, _275), vec3(_673 * _665, _673 * _666, _673 * _667)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _692 = sqrt(((_666 * _666) + (_665 * _665)) + (_667 * _667)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _694 = _693 * 2.0;
        float _698 = (1.0 - _693) / (_693 + 1.0);
        float _3536 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _708 = ((((1.0 - _699) * (_694 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_694 + 1.0))) + _699) * _662;
        float _709 = _630 * 0.5;
        float _710 = _640 * 0.5;
        float _711 = _650 * 0.5;
        float _712 = dot(vec3(_709, _710, _711), vec3(_709, _710, _711));
        float _717 = (_712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_712);
        float _725 = (dot(vec3(_273, _274, _275), vec3(_717 * _709, _717 * _710, _717 * _711)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _734 = sqrt(((_710 * _710) + (_709 * _709)) + (_711 * _711)) / (_663 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _736 = _735 * 2.0;
        float _740 = (1.0 - _735) / (_735 + 1.0);
        float _3569 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _750 = ((((1.0 - _741) * (_736 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_736 + 1.0))) + _741) * _663;
        float _751 = _631 * 0.5;
        float _752 = _641 * 0.5;
        float _753 = _651 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _767 = (dot(vec3(_273, _274, _275), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _776 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_664 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _778 = _777 * 2.0;
        float _782 = (1.0 - _777) / (_777 + 1.0);
        float _3602 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _792 = ((((1.0 - _783) * (_778 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_778 + 1.0))) + _783) * _664;
        _800 = _631;
        _802 = _630;
        _803 = _629;
        _804 = _641;
        _805 = _640;
        _806 = _639;
        _807 = _651;
        _808 = _650;
        _809 = _649;
        _810 = _664;
        _811 = _663;
        _812 = _662;
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0)));
        _814 = cbModelParam._m0[36u].z * (isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0)));
        _815 = cbModelParam._m0[36u].z * (isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)));
    }
    else
    {
        _800 = _801;
        _802 = _801;
        _803 = _801;
        _804 = _801;
        _805 = _801;
        _806 = _801;
        _807 = _801;
        _808 = _801;
        _809 = _801;
        _810 = _801;
        _811 = _801;
        _812 = _801;
        _813 = 0.0;
        _814 = 0.0;
        _815 = 0.0;
    }
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _841 = fma(_498, cbModelParam._m0[30u].z, fma(_494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _490));
        float _845 = fma(_498, cbModelParam._m0[31u].z, fma(_494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _490));
        float _849 = fma(_498, cbModelParam._m0[32u].z, fma(_494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _490));
        float _872 = _490 + _273;
        float _873 = _494 + _274;
        float _874 = _498 + _275;
        float _884 = fma(_874, cbModelParam._m0[30u].z, fma(_873, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872)) - _841;
        float _885 = fma(_874, cbModelParam._m0[31u].z, fma(_873, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872)) - _845;
        float _886 = fma(_874, cbModelParam._m0[32u].z, fma(_873, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872)) - _849;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_841 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_845 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[35u].z) + ((((((_849 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _940 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_907.x + (-0.5));
        float _942 = _940 * (_907.y + (-0.5));
        float _943 = _940 * (_907.z + (-0.5));
        float _950 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_914.x + (-0.5));
        float _952 = _950 * (_914.y + (-0.5));
        float _953 = _950 * (_914.z + (-0.5));
        float _960 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_921.x + (-0.5));
        float _962 = _960 * (_921.y + (-0.5));
        float _963 = _960 * (_921.z + (-0.5));
        float _970 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_928.x + (-0.5));
        float _972 = _970 * (_928.y + (-0.5));
        float _973 = _970 * (_928.z + (-0.5));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = _941 * 0.5;
        float _978 = _951 * 0.5;
        float _979 = _961 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_273, _274, _275), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3665 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1004 + 1.0))) + _1009) * _974;
        float _1019 = _942 * 0.5;
        float _1020 = _952 * 0.5;
        float _1021 = _962 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_273, _274, _275), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3698 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1046 + 1.0))) + _1051) * _975;
        float _1061 = _943 * 0.5;
        float _1062 = _953 * 0.5;
        float _1063 = _963 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_273, _274, _275), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3731 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1088 + 1.0))) + _1093) * _976;
        _1110 = _943;
        _1111 = _942;
        _1112 = _941;
        _1113 = _953;
        _1114 = _952;
        _1115 = _951;
        _1116 = _963;
        _1117 = _962;
        _1118 = _961;
        _1119 = _976;
        _1120 = _975;
        _1121 = _974;
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
    }
    else
    {
        _1110 = _801;
        _1111 = _801;
        _1112 = _801;
        _1113 = _801;
        _1114 = _801;
        _1115 = _801;
        _1116 = _801;
        _1117 = _801;
        _1118 = _801;
        _1119 = _801;
        _1120 = _801;
        _1121 = _801;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _813)) + _813;
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _814)) + _814;
    float _1136 = (cbModelParam._m0[1u].x * (_1124 - _815)) + _815;
    float _1157 = fma(_1136, cbSceneParam._m0[89u].z, fma(_1135, cbSceneParam._m0[89u].y, _1134 * cbSceneParam._m0[89u].x));
    float _1160 = fma(_1136, cbSceneParam._m0[90u].z, fma(_1135, cbSceneParam._m0[90u].y, _1134 * cbSceneParam._m0[90u].x));
    float _1163 = fma(_1136, cbSceneParam._m0[91u].z, fma(_1135, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1134));
    float _1178 = _437 * 0.5;
    float _1179 = _438 * 0.5;
    float _1180 = _439 * 0.5;
    float _1181 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1112, _1115, _1118, _1121));
    float _1184 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1187 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1221;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1194 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_800, _804, _807, _810));
        float _1198 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_802, _805, _808, _811));
        float _1202 = dot(vec4(_1178, _1179, _1180, 1.0), vec4(_803, _806, _809, _812));
        float _1209 = dot(vec4(cbModelParam._m0[39u]), vec4(_1178, _1179, _1180, 1.0));
        _1221 = dot(vec3(isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1209) ? 0.0 : (isnan(0.0) ? _1209 : max(0.0, _1209))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1221 = 1.0;
    }
    float _1232;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1223 = dot(vec4(cbModelParam._m0[40u]), vec4(_1178, _1179, _1180, 1.0));
        _1232 = dot(vec3(isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1223) ? 0.0 : (isnan(0.0) ? _1223 : max(0.0, _1223))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1232 = 1.0;
    }
    float _1236 = (_1232 * cbModelParam._m0[1u].x) + (_1221 * (1.0 - cbModelParam._m0[1u].x));
    float _1246 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _276);
    float _1247 = isnan(_1246) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1246 : min(cbModelParam._m0[25u].z, _1246));
    float _1329;
    float _1331;
    float _1333;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1296 = fma(_498, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _490)) + cbModelParam._m0[13u].w;
        float _1300 = fma(_498, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _490)) + cbModelParam._m0[14u].w;
        float _1304 = fma(_498, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _490)) + cbModelParam._m0[15u].w;
        float _1307 = fma(_439, cbModelParam._m0[13u].z, fma(_438, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _437));
        float _1310 = fma(_439, cbModelParam._m0[14u].z, fma(_438, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _437));
        float _1313 = fma(_439, cbModelParam._m0[15u].z, fma(_438, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _437));
        float _1341;
        if (_1307 > 0.0)
        {
            _1341 = abs((1.0 - _1296) / _1307);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1296 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1341 = frontier_phi_14_12_ladder;
        }
        float _1515;
        if (_1310 > 0.0)
        {
            _1515 = abs((1.0 - _1300) / _1310);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1300 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1515 = frontier_phi_23_19_ladder;
        }
        float _1811;
        if (_1313 > 0.0)
        {
            _1811 = abs((1.0 - _1304) / _1313);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1304 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1811 = frontier_phi_35_30_ladder;
        }
        float _1813 = isnan(_1515) ? _1341 : (isnan(_1341) ? _1515 : min(_1341, _1515));
        float _1814 = isnan(_1811) ? _1813 : (isnan(_1813) ? _1811 : min(_1813, _1811));
        float _1818 = (_1814 * _1307) + _1296;
        float _1819 = (_1814 * _1310) + _1300;
        float _1820 = (_1814 * _1313) + _1304;
        float _1821 = _1814 * 9.9999997473787516355514526367188e-05;
        float _1823 = (-1.0) - _1821;
        float _1825 = _1821 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1820 > _1825) || ((_1820 < _1823) || ((_1819 > _1825) || ((_1819 < _1823) || ((_1818 < _1823) || (_1818 > _1825))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1965 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1820, cbModelParam._m0[9u].z, fma(_1819, cbModelParam._m0[9u].y, _1818 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1820, cbModelParam._m0[10u].z, fma(_1819, cbModelParam._m0[10u].y, _1818 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1820, cbModelParam._m0[11u].z, fma(_1819, cbModelParam._m0[11u].y, _1818 * cbModelParam._m0[11u].x))), _1247);
            frontier_phi_13_35_ladder = _1965.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1965.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1965.x * cbModelParam._m0[1u].y;
        }
        _1329 = frontier_phi_13_35_ladder_2;
        _1331 = frontier_phi_13_35_ladder_1;
        _1333 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1317 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_437, _438, _439), _1247);
        _1329 = _1317.x * cbModelParam._m0[1u].y;
        _1331 = _1317.y * cbModelParam._m0[1u].y;
        _1333 = _1317.z * cbModelParam._m0[1u].y;
    }
    float _1337 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _276);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1337 : min(cbModelParam._m0[25u].w, _1337));
    float _1431;
    float _1433;
    float _1435;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1395 = fma(_498, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _490)) + cbModelParam._m0[21u].w;
        float _1399 = fma(_498, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _490)) + cbModelParam._m0[22u].w;
        float _1403 = fma(_498, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _490)) + cbModelParam._m0[23u].w;
        float _1406 = fma(_439, cbModelParam._m0[21u].z, fma(_438, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _437));
        float _1409 = fma(_439, cbModelParam._m0[22u].z, fma(_438, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _437));
        float _1412 = fma(_439, cbModelParam._m0[23u].z, fma(_438, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _437));
        float _1520;
        if (_1406 > 0.0)
        {
            _1520 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1520 = frontier_phi_25_21_ladder;
        }
        float _1838;
        if (_1409 > 0.0)
        {
            _1838 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1838 = frontier_phi_37_32_ladder;
        }
        float _2165;
        if (_1412 > 0.0)
        {
            _2165 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2165 = frontier_phi_47_44_ladder;
        }
        float _2167 = isnan(_1838) ? _1520 : (isnan(_1520) ? _1838 : min(_1520, _1838));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1406) + _1395;
        float _2173 = (_2168 * _1409) + _1399;
        float _2174 = (_2168 * _1412) + _1403;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2176 = (-1.0) - _2175;
        float _2178 = _2175 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2174 > _2178) || ((_2174 < _2176) || ((_2173 > _2178) || ((_2173 < _2176) || ((_2172 < _2176) || (_2172 > _2178))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2292 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2174, cbModelParam._m0[17u].z, fma(_2173, cbModelParam._m0[17u].y, _2172 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2174, cbModelParam._m0[18u].z, fma(_2173, cbModelParam._m0[18u].y, _2172 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2174, cbModelParam._m0[19u].z, fma(_2173, cbModelParam._m0[19u].y, _2172 * cbModelParam._m0[19u].x))), _1338);
            frontier_phi_22_47_ladder = _2292.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2292.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2292.x * cbModelParam._m0[1u].z;
        }
        _1431 = frontier_phi_22_47_ladder_2;
        _1433 = frontier_phi_22_47_ladder_1;
        _1435 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1415 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_437, _438, _439), _1338);
        _1431 = _1415.x * cbModelParam._m0[1u].z;
        _1433 = _1415.y * cbModelParam._m0[1u].z;
        _1435 = _1415.z * cbModelParam._m0[1u].z;
    }
    float _1447 = ((((1.0 - _458) * ((_445 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_458 * _445)) * _429;
    float _1448 = _1447 * ((cbModelParam._m0[1u].w * (_1431 - _1329)) + _1329);
    float _1449 = _1447 * ((cbModelParam._m0[1u].w * (_1433 - _1331)) + _1331);
    float _1450 = _1447 * ((cbModelParam._m0[1u].w * (_1435 - _1333)) + _1333);
    float _1453 = fma(_1450, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1448 * cbSceneParam._m0[89u].x));
    float _1456 = fma(_1450, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1448 * cbSceneParam._m0[90u].x));
    float _1459 = fma(_1450, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, _1448 * cbSceneParam._m0[91u].x));
    float _1494 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1498 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1502 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1506 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1507 = _1494 / _1506;
    float _1508 = _1498 / _1506;
    float _1509 = _1502 / _1506;
    float _1656;
    float _1657;
    float _1658;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1536 = ((uint(_1509 > cbSceneParam._m0[59u].y) + uint(_1509 > cbSceneParam._m0[59u].x)) + uint(_1509 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1537 = _1536 + 43u;
        uint _1545 = _1536 + 44u;
        uint _1553 = _1536 + 45u;
        uint _1561 = _1536 + 46u;
        float _1572 = fma(_1506, cbSceneParam._m0[_1537].w, fma(_1502, cbSceneParam._m0[_1537].z, fma(_1498, cbSceneParam._m0[_1537].y, _1494 * cbSceneParam._m0[_1537].x)));
        float _1576 = fma(_1506, cbSceneParam._m0[_1545].w, fma(_1502, cbSceneParam._m0[_1545].z, fma(_1498, cbSceneParam._m0[_1545].y, _1494 * cbSceneParam._m0[_1545].x)));
        float _1584 = fma(_1506, cbSceneParam._m0[_1561].w, fma(_1502, cbSceneParam._m0[_1561].z, fma(_1498, cbSceneParam._m0[_1561].y, _1494 * cbSceneParam._m0[_1561].x)));
        float _1589 = cbSceneParam._m0[33u].z * _1584;
        float _1591 = cbSceneParam._m0[33u].w * _1584;
        float _1594 = fma(_1506, cbSceneParam._m0[_1553].w, fma(_1502, cbSceneParam._m0[_1553].z, fma(_1498, cbSceneParam._m0[_1553].y, _1494 * cbSceneParam._m0[_1553].x))) / _1584;
        float _1642 = (cbSceneParam._m0[33u].x - sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509))) * cbSceneParam._m0[33u].y;
        float _3857 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1649 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1589 + _1572) / _1584, (_1591 + _1576) / _1584), _1594), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1591 + _1572) / _1584, (_1576 - _1589) / _1584), _1594), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1572 - _1589) / _1584, (_1576 - _1591) / _1584), _1594), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1572 - _1591) / _1584, (_1589 + _1576) / _1584), _1594), 0.0)).x), vec4(0.25)));
        _1656 = 1.0 - (_1649 * cbSceneParam._m0[34u].x);
        _1657 = 1.0 - (_1649 * cbSceneParam._m0[34u].y);
        _1658 = 1.0 - (_1649 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1656 = 1.0;
        _1657 = 1.0;
        _1658 = 1.0;
    }
    float _1722;
    float _1724;
    float _1726;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1710 = fma(_1506, cbSceneParam._m0[63u].w, fma(_1502, cbSceneParam._m0[63u].z, fma(_1498, cbSceneParam._m0[63u].y, _1494 * cbSceneParam._m0[63u].x)));
        float _1711 = fma(_1506, cbSceneParam._m0[60u].w, fma(_1502, cbSceneParam._m0[60u].z, fma(_1498, cbSceneParam._m0[60u].y, _1494 * cbSceneParam._m0[60u].x))) / _1710;
        float _1712 = fma(_1506, cbSceneParam._m0[61u].w, fma(_1502, cbSceneParam._m0[61u].z, fma(_1498, cbSceneParam._m0[61u].y, _1494 * cbSceneParam._m0[61u].x))) / _1710;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1711 >= cbSceneParam._m0[64u].x) && (_1712 >= cbSceneParam._m0[64u].y)) && (_1711 <= cbSceneParam._m0[64u].z)) && (_1712 <= cbSceneParam._m0[64u].w))
        {
            float _1851 = fma(_1506, cbSceneParam._m0[62u].w, fma(_1502, cbSceneParam._m0[62u].z, fma(_1498, cbSceneParam._m0[62u].y, _1494 * cbSceneParam._m0[62u].x))) / _1710;
            float _1855 = isnan(cbSceneParam._m0[41u].w) ? _1851 : (isnan(_1851) ? cbSceneParam._m0[41u].w : max(_1851, cbSceneParam._m0[41u].w));
            float _1898 = (cbSceneParam._m0[33u].x - sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509))) * cbSceneParam._m0[33u].y;
            float _3873 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
            float _1905 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1711, cbSceneParam._m0[33u].w + _1712), _1855), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1711, _1712 - cbSceneParam._m0[33u].z), _1855), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1711 - cbSceneParam._m0[33u].z, _1712 - cbSceneParam._m0[33u].w), _1855), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1711 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1712), _1855), 0.0)).x), vec4(0.25)));
            float _1909 = 1.0 - (_1905 * cbSceneParam._m0[34u].x);
            float _1910 = 1.0 - (_1905 * cbSceneParam._m0[34u].y);
            float _1911 = 1.0 - (_1905 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1911) ? _1658 : (isnan(_1658) ? _1911 : min(_1658, _1911));
            frontier_phi_34_33_ladder_1 = isnan(_1910) ? _1657 : (isnan(_1657) ? _1910 : min(_1657, _1910));
            frontier_phi_34_33_ladder_2 = isnan(_1909) ? _1656 : (isnan(_1656) ? _1909 : min(_1656, _1909));
        }
        else
        {
            frontier_phi_34_33_ladder = _1658;
            frontier_phi_34_33_ladder_1 = _1657;
            frontier_phi_34_33_ladder_2 = _1656;
        }
        _1722 = frontier_phi_34_33_ladder_2;
        _1724 = frontier_phi_34_33_ladder_1;
        _1726 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1722 = _1656;
        _1724 = _1657;
        _1726 = _1658;
    }
    uvec4 _1731 = floatBitsToUint(cbInstanceData._m0[_403 + 5u]);
    uint _1733 = _1731.x * 14u;
    uint _1734 = _1733 + 13u;
    float _1741 = _429 + (-1.0);
    float _1746 = (cbLight._m0[_1734].x * _1741) + 1.0;
    float _1747 = (cbLight._m0[_1734].y * _1741) + 1.0;
    float _1748 = (cbLight._m0[_1734].z * _1741) + 1.0;
    float _1749 = (cbLight._m0[_1734].w * _1741) + 1.0;
    uint _1750 = _1733 + 5u;
    float _1756 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
    uint _1760 = _1733 + 4u;
    float _1770 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1774 = _1733 | 1u;
    float _1785 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_273, _274, _275));
    float _1788 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_273, _274, _275));
    float _3909 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _3920 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1793 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.3183098733425140380859375;
    float _1795 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1802 = ((cbLight._m0[_1750].x * _1756) * _1795) + (((cbLight._m0[_1760].x * _1722) * _1770) * _1793);
    float _1803 = ((_1756 * cbLight._m0[_1750].y) * _1795) + (((cbLight._m0[_1760].y * _1724) * _1770) * _1793);
    float _1804 = ((_1756 * cbLight._m0[_1750].z) * _1795) + (((cbLight._m0[_1760].z * _1726) * _1770) * _1793);
    uvec4 _1808 = floatBitsToUint(cbLight._m0[_1733 + 12u]);
    bool _1810 = _1808.x == 0u;
    float _1912;
    float _1914;
    float _1916;
    if (_1810)
    {
        _1912 = _1802;
        _1914 = _1803;
        _1916 = _1804;
    }
    else
    {
        uint _1920 = _1733 + 6u;
        float _1936 = (dot(vec3(cbLight._m0[_1733 + 2u].xyz), vec3(_273, _274, _275)) * 0.5) + 0.5;
        float _1937 = _1936 * _1936;
        float _3931 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1938 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1939 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1912 = (((cbLight._m0[_1920].x * 0.3183098733425140380859375) * _1938) * _1939) + _1802;
        _1914 = (((cbLight._m0[_1920].y * 0.3183098733425140380859375) * _1938) * _1939) + _1803;
        _1916 = (((cbLight._m0[_1920].z * 0.3183098733425140380859375) * _1938) * _1939) + _1804;
    }
    bool _1919 = _1808.y == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1919)
    {
        _1974 = _1912;
        _1976 = _1914;
        _1978 = _1916;
    }
    else
    {
        uint _2136 = _1733 + 7u;
        float _2152 = (dot(vec3(cbLight._m0[_1733 + 3u].xyz), vec3(_273, _274, _275)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _3947 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _2155 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _1974 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _1912;
        _1976 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _1914;
        _1978 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _1916;
    }
    uint _1981 = _1733 + 8u;
    float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1733].w)) * _276) * 0.949999988079071044921875);
    float _1995 = _1994 * _1994;
    float _1996 = cbLight._m0[_1733].x + _354;
    float _1997 = cbLight._m0[_1733].y + _355;
    float _1998 = cbLight._m0[_1733].z + _356;
    float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
    float _2003 = _2002 * _1996;
    float _2004 = _2002 * _1997;
    float _2005 = _2002 * _1998;
    float _2006 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1733].xyz));
    float _3963 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _2010 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _2011 = dot(vec3(_273, _274, _275), vec3(_2003, _2004, _2005));
    float _3985 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_2003, _2004, _2005));
    float _3996 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1995 * _1995;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2034 = (exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2035 = 1.0 - _1995;
    float _2046 = (0.5 / (((_2010 * ((_2009 * _2035) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2035) + _1995) * _2009))) * _2009;
    float _4007 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2048 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    uint _2062 = _1733 + 9u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1774].w)) * _276) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1774].x + _354;
    float _2076 = cbLight._m0[_1774].y + _355;
    float _2077 = cbLight._m0[_1774].z + _356;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1774].xyz));
    float _4018 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _2089 = dot(vec3(_273, _274, _275), vec3(_2082, _2083, _2084));
    float _4029 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _2093 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_2082, _2083, _2084));
    float _4040 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = _2074 * _2074;
    float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
    float _2110 = (exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2111 = 1.0 - _2074;
    float _2121 = (0.5 / (((_2010 * ((_2088 * _2111) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2111) + _2074) * _2088))) * _2088;
    float _4051 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2123 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
    float _2133 = (((_2110 * cbLight._m0[_2062].x) * _2123) * _1756) + ((((cbLight._m0[_1981].x * _1722) * _2034) * _2048) * _1770);
    float _2134 = (((_2110 * cbLight._m0[_2062].y) * _2123) * _1756) + ((((cbLight._m0[_1981].y * _1724) * _2034) * _2048) * _1770);
    float _2135 = (((_2110 * cbLight._m0[_2062].z) * _2123) * _1756) + ((((cbLight._m0[_1981].z * _1726) * _2034) * _2048) * _1770);
    float _2191;
    float _2193;
    float _2195;
    if (_1810)
    {
        _2191 = _2133;
        _2193 = _2134;
        _2195 = _2135;
    }
    else
    {
        uint _2197 = _1733 + 2u;
        uint _2201 = _1733 + 10u;
        float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _276) * 0.949999988079071044921875);
        float _2216 = _2215 * _2215;
        float _2217 = cbLight._m0[_2197].x + _354;
        float _2218 = cbLight._m0[_2197].y + _355;
        float _2219 = cbLight._m0[_2197].z + _356;
        float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
        float _2224 = _2223 * _2217;
        float _2225 = _2223 * _2218;
        float _2226 = _2223 * _2219;
        float _2227 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_2197].xyz));
        float _4062 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2230 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2231 = dot(vec3(_273, _274, _275), vec3(_2224, _2225, _2226));
        float _4073 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2235 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2224, _2225, _2226));
        float _4084 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2239 = _2216 * _2216;
        float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
        float _2252 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2253 = 1.0 - _2216;
        float _2263 = (0.5 / (((_2010 * ((_2230 * _2253) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2253) + _2216) * _2230))) * _2230;
        float _4095 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2265 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
        float _2266 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2191 = (((_2252 * cbLight._m0[_2201].x) * _2265) * _2266) + _2133;
        _2193 = (((_2252 * cbLight._m0[_2201].y) * _2265) * _2266) + _2134;
        _2195 = (((_2252 * cbLight._m0[_2201].z) * _2265) * _2266) + _2135;
    }
    float _2297;
    float _2299;
    float _2301;
    if (_1919)
    {
        _2297 = _2191;
        _2299 = _2193;
        _2301 = _2195;
    }
    else
    {
        uint _2308 = _1733 + 3u;
        uint _2312 = _1733 + 11u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _276) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _354;
        float _2329 = cbLight._m0[_2308].y + _355;
        float _2330 = cbLight._m0[_2308].z + _356;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_2308].xyz));
        float _4111 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2342 = dot(vec3(_273, _274, _275), vec3(_2335, _2336, _2337));
        float _4122 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4133 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2363 = (exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2364 = 1.0 - _2327;
        float _2374 = (0.5 / (((_2010 * ((_2341 * _2364) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2364) + _2327) * _2341))) * _2341;
        float _4144 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2376 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2377 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _2297 = (((_2363 * cbLight._m0[_2312].x) * _2376) * _2377) + _2191;
        _2299 = (((_2363 * cbLight._m0[_2312].y) * _2376) * _2377) + _2193;
        _2301 = (((_2363 * cbLight._m0[_2312].z) * _2376) * _2377) + _2195;
    }
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    if (_1731.y == 0u)
    {
        uvec4 _2398 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2399 = _2398.x;
        uint _2410 = uint((float(_2398.y) * floor(float(uint(cbSceneParam._m0[85u].y * _363) / _2399))) + floor(float(uint(cbSceneParam._m0[85u].x * _362) / _2399)));
        float _2420 = (log2(_1509 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2421 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        uint _2424 = uint(isnan(14.0) ? _2421 : (isnan(_2421) ? 14.0 : min(_2421, 14.0)));
        uvec4 _2429 = texelFetch(g_lightClusterGridBuffer, int(((_2424 << 2u) + (_2410 << 6u)) >> 2u));
        uint _2430 = _2429.x;
        uint _2431 = _2398.z;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        if (((((1u << ((_2431 >> 4u) & 15u)) + 4294967295u) & _2430) == 0u) || ((_2431 & 240u) == 0u))
        {
            _2510 = 0.0;
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
        }
        else
        {
            float _2511;
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            uint _2661 = 0u;
            uint _2670;
            bool _2671;
            for (;;)
            {
                _2670 = texelFetch(g_lightClassification, int((((_2424 << 5u) + (_2410 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                _2671 = _2670 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2671)
                {
                    frontier_phi_66_pred = _2660;
                    frontier_phi_66_pred_1 = _2659;
                    frontier_phi_66_pred_2 = _2658;
                    frontier_phi_66_pred_3 = _2657;
                    frontier_phi_66_pred_4 = _2656;
                    frontier_phi_66_pred_5 = _2655;
                }
                else
                {
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    uint _2785;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2670;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    for (;;)
                    {
                        uint _2789 = uint(findLSB(_2785)) + (_2661 << 5u);
                        uint _2786 = (_2785 + 4294967295u) & _2785;
                        uint _2791 = _2789 * 48u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2791)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 3u)).x));
                        uint _2811 = (_2789 * 48u) + 4u;
                        vec4 _2824 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 3u)).x));
                        uint _2830 = (_2789 * 48u) + 8u;
                        vec3 _2841 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2830)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 2u)).x));
                        float _2845 = _2805.x - _1507;
                        float _2846 = _2805.y - _1508;
                        float _2847 = _2805.z - _1509;
                        float _2848 = dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847));
                        float _2851 = inversesqrt(_2848);
                        float _2852 = _2851 * _2845;
                        float _2853 = _2851 * _2846;
                        float _2854 = _2851 * _2847;
                        float _2855 = dot(vec3(_384, _387, _390), vec3(_2852, _2853, _2854));
                        float _2860 = 1.0 - (_2848 * _2805.w);
                        float _4170 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2861 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2862 = sqrt(_2848) * _2824.w;
                        float _2865 = 1.39999997615814208984375 / (_2862 + 1.39999997615814208984375);
                        float _2866 = _2865 * _2865;
                        float _2869 = ((1.0 - _2866) * _2855) + _2866;
                        float _2872 = _2862 * _2862;
                        float _2876 = ((isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))) * _2861) / ((_2872 * 0.699999988079071044921875) + 1.0);
                        float _2880 = (-0.0) - _1507;
                        float _2881 = (-0.0) - _1508;
                        float _2882 = (-0.0) - _1509;
                        float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
                        float _2887 = _2886 * _2880;
                        float _2888 = _2886 * _2881;
                        float _2889 = _2886 * _2882;
                        float _2896 = exp2(log2(1.0 / ((_2872 * 3.5) + 5.0)) * 0.25);
                        float _2897 = 1.0 - _445;
                        float _2904 = sqrt(1.0 - ((1.0 - (_2897 * _2897)) * (1.0 - (_2896 * _2896))));
                        float _2905 = _2904 * _2904;
                        float _2906 = _2905 * _2905;
                        float _2907 = _2887 + _2852;
                        float _2908 = _2888 + _2853;
                        float _2909 = _2889 + _2854;
                        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
                        float _2917 = dot(vec3(_384, _387, _390), vec3(_2887, _2888, _2889));
                        float _4186 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2920 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2921 = dot(vec3(_384, _387, _390), vec3(_2913 * _2907, _2913 * _2908, _2913 * _2909));
                        float _4197 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2928 = ((_2924 * _2924) * (_2906 + (-1.0))) + 1.0;
                        float _2929 = _2865 * _2905;
                        float _2930 = _2929 * _2929;
                        float _2933 = ((1.0 - _2930) * _2855) + _2930;
                        float _4208 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2934 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2935 = 1.0 - _2905;
                        float _2945 = (0.5 / (((_2934 * ((_2920 * _2935) + _2905)) + 9.9999999392252902907785028219223e-09) + (((_2934 * _2935) + _2905) * _2920))) * _2934;
                        float _4219 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2956 = (((_2906 * 3.1415927410125732421875) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) / ((_2928 * _2928) * ((_2872 * 2.1991131305694580078125) + 3.141590118408203125))) * _2861;
                        _2714 = (_2876 * _2824.x) + _2782;
                        _2715 = (_2876 * _2824.y) + _2783;
                        _2716 = (_2876 * _2824.z) + _2784;
                        _2711 = (_2956 * _2841.x) + _2779;
                        _2712 = (_2956 * _2841.y) + _2780;
                        _2713 = (_2956 * _2841.z) + _2781;
                        if (_2786 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2786;
                        }
                    }
                    frontier_phi_66_pred = _2716;
                    frontier_phi_66_pred_1 = _2715;
                    frontier_phi_66_pred_2 = _2714;
                    frontier_phi_66_pred_3 = _2713;
                    frontier_phi_66_pred_4 = _2712;
                    frontier_phi_66_pred_5 = _2711;
                }
                _2521 = frontier_phi_66_pred;
                _2519 = frontier_phi_66_pred_1;
                _2517 = frontier_phi_66_pred_2;
                _2515 = frontier_phi_66_pred_3;
                _2513 = frontier_phi_66_pred_4;
                _2511 = frontier_phi_66_pred_5;
                uint _2662 = _2661 + 1u;
                if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2655 = _2511;
                    _2656 = _2513;
                    _2657 = _2515;
                    _2658 = _2517;
                    _2659 = _2519;
                    _2660 = _2521;
                    _2661 = _2662;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2510 = _2511;
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
        }
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.z;
        uint _2527 = (_2525 >> 8u) & 15u;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        if (((4294967295u << _2527) & _2430) == 0u)
        {
            _2623 = _2510;
            _2625 = _2512;
            _2627 = _2514;
            _2629 = _2516;
            _2631 = _2518;
            _2633 = _2520;
        }
        else
        {
            float _2648 = inversesqrt(dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509)));
            float _2649 = _2648 * _1507;
            float _2650 = _2648 * _1508;
            float _2651 = _2648 * _1509;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2527 < ((_2525 >> 12u) & 15u))
            {
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2762 = _2510;
                float _2763 = _2512;
                float _2764 = _2514;
                float _2765 = _2516;
                float _2766 = _2518;
                float _2767 = _2520;
                uint _2768 = _2527;
                uint _2777;
                bool _2778;
                for (;;)
                {
                    _2777 = texelFetch(g_lightClassification, int((((_2424 << 5u) + (_2410 << 9u)) + (_2768 << 2u)) >> 2u)).x;
                    _2778 = _2777 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2778)
                    {
                        frontier_phi_72_pred = _2767;
                        frontier_phi_72_pred_1 = _2766;
                        frontier_phi_72_pred_2 = _2765;
                        frontier_phi_72_pred_3 = _2764;
                        frontier_phi_72_pred_4 = _2763;
                        frontier_phi_72_pred_5 = _2762;
                    }
                    else
                    {
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _2974 = _2762;
                        float _2975 = _2763;
                        float _2976 = _2764;
                        float _2977 = _2765;
                        float _2978 = _2766;
                        float _2979 = _2767;
                        uint _2980 = _2777;
                        uint _2981;
                        vec4 _3006;
                        float _3007;
                        vec4 _3022;
                        vec3 _3034;
                        vec4 _3050;
                        vec4 _3066;
                        float _3113;
                        bool _3114;
                        for (;;)
                        {
                            uint _2991 = ((_2768 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2980));
                            _2981 = (_2980 + 4294967295u) & _2980;
                            uint _2993 = _2991 * 40u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            _3007 = _3006.w;
                            uint _3009 = (_2991 * 40u) + 4u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3024 = (_2991 * 40u) + 8u;
                            _3034 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x));
                            uint _3037 = (_2991 * 40u) + 16u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3053 = (_2991 * 40u) + 20u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3069 = (_2991 * 40u) + 24u;
                            vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3088 = (_2991 * 40u) + 28u;
                            vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            _3113 = fma(_1509, _3101.z, fma(_1508, _3101.y, _3101.x * _1507)) + _3101.w;
                            _3114 = !((fma(_1509, _3082.z, fma(_1508, _3082.y, _3082.x * _1507)) + _3082.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3114)
                            {
                                float _3141 = _3006.x - _1507;
                                float _3142 = _3006.y - _1508;
                                float _3143 = _3006.z - _1509;
                                float _3144 = dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143));
                                float _3147 = inversesqrt(_3144);
                                float _3148 = _3147 * _3141;
                                float _3149 = _3147 * _3142;
                                float _3150 = _3147 * _3143;
                                float _3154 = 1.0 - (_3144 / (_3007 * _3007));
                                float _4230 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3159 = sqrt(_3144) * _3022.w;
                                float _3161 = 1.39999997615814208984375 / (_3159 + 1.39999997615814208984375);
                                float _3162 = _3161 * _3161;
                                float _3165 = ((1.0 - _3162) * dot(vec3(_3148, _3149, _3150), vec3(_384, _387, _390))) + _3162;
                                float _3168 = _3159 * _3159;
                                float _3172 = (fma(_1509, _3050.z, fma(_1508, _3050.y, _3050.x * _1507)) + _3050.w) / _3113;
                                float _3173 = (fma(_1509, _3066.z, fma(_1508, _3066.y, _3066.x * _1507)) + _3066.w) / _3113;
                                float _3177 = 1.0 - dot(vec2(_3172, _3173), vec2(_3172, _3173));
                                float _4246 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3178 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3179 = _3178 * (((isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))) * _3155) / ((_3168 * 0.699999988079071044921875) + 1.0));
                                float _3191 = exp2(log2(1.0 / ((_3168 * 3.5) + 5.0)) * 0.25);
                                float _3192 = 1.0 - _445;
                                float _3199 = sqrt(1.0 - ((1.0 - (_3192 * _3192)) * (1.0 - (_3191 * _3191))));
                                float _3200 = _3199 * _3199;
                                float _3201 = _3200 * _3200;
                                float _3202 = _3148 - _2649;
                                float _3203 = _3149 - _2650;
                                float _3204 = _3150 - _2651;
                                float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                                float _3212 = dot(vec3(_384, _387, _390), vec3((-0.0) - _2649, (-0.0) - _2650, (-0.0) - _2651));
                                float _4257 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3216 = dot(vec3(_384, _387, _390), vec3(_3208 * _3202, _3208 * _3203, _3208 * _3204));
                                float _4268 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3219 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3223 = ((_3219 * _3219) * (_3201 + (-1.0))) + 1.0;
                                float _3224 = _3161 * _3200;
                                float _3225 = _3224 * _3224;
                                float _3231 = ((1.0 - _3225) * dot(vec3(_384, _387, _390), vec3(_3148, _3149, _3150))) + _3225;
                                float _4279 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3233 = 1.0 - _3200;
                                float _3243 = (0.5 / (((_3232 * ((_3215 * _3233) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_3232 * _3233) + _3200) * _3215))) * _3232;
                                float _4290 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3253 = (_3178 * _3155) * (((_3201 * 3.1415927410125732421875) * (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) / ((_3223 * _3223) * ((_3168 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3179 * _3022.y;
                                frontier_phi_78_pred_1 = _3179 * _3022.x;
                                frontier_phi_78_pred_2 = _3253 * _3034.z;
                                frontier_phi_78_pred_3 = _3253 * _3034.y;
                                frontier_phi_78_pred_4 = _3253 * _3034.x;
                                frontier_phi_78_pred_5 = _3179 * _3022.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3261 = frontier_phi_78_pred;
                            _3260 = frontier_phi_78_pred_1;
                            _3259 = frontier_phi_78_pred_2;
                            _3258 = frontier_phi_78_pred_3;
                            _3257 = frontier_phi_78_pred_4;
                            _3262 = frontier_phi_78_pred_5;
                            _2964 = _3260 + _2977;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            _2961 = _3257 + _2974;
                            _2962 = _3258 + _2975;
                            _2963 = _3259 + _2976;
                            if (_2981 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2981;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2966;
                        frontier_phi_72_pred_1 = _2965;
                        frontier_phi_72_pred_2 = _2964;
                        frontier_phi_72_pred_3 = _2963;
                        frontier_phi_72_pred_4 = _2962;
                        frontier_phi_72_pred_5 = _2961;
                    }
                    _2634 = frontier_phi_72_pred;
                    _2632 = frontier_phi_72_pred_1;
                    _2630 = frontier_phi_72_pred_2;
                    _2628 = frontier_phi_72_pred_3;
                    _2626 = frontier_phi_72_pred_4;
                    _2624 = frontier_phi_72_pred_5;
                    uint _2769 = _2768 + 1u;
                    if (_2769 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2762 = _2624;
                        _2763 = _2626;
                        _2764 = _2628;
                        _2765 = _2630;
                        _2766 = _2632;
                        _2767 = _2634;
                        _2768 = _2769;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2634;
                frontier_phi_60_61_ladder_1 = _2632;
                frontier_phi_60_61_ladder_2 = _2628;
                frontier_phi_60_61_ladder_3 = _2626;
                frontier_phi_60_61_ladder_4 = _2624;
                frontier_phi_60_61_ladder_5 = _2630;
            }
            else
            {
                frontier_phi_60_61_ladder = _2520;
                frontier_phi_60_61_ladder_1 = _2518;
                frontier_phi_60_61_ladder_2 = _2514;
                frontier_phi_60_61_ladder_3 = _2512;
                frontier_phi_60_61_ladder_4 = _2510;
                frontier_phi_60_61_ladder_5 = _2516;
            }
            _2623 = frontier_phi_60_61_ladder_4;
            _2625 = frontier_phi_60_61_ladder_3;
            _2627 = frontier_phi_60_61_ladder_2;
            _2629 = frontier_phi_60_61_ladder_5;
            _2631 = frontier_phi_60_61_ladder_1;
            _2633 = frontier_phi_60_61_ladder;
        }
        float _2638 = isnan(1.0) ? _429 : (isnan(_429) ? 1.0 : min(_429, 1.0));
        _2443 = (_2638 * _2629) + _1974;
        _2445 = (_2638 * _2631) + _1976;
        _2447 = (_2638 * _2633) + _1978;
        _2449 = ((_2623 * 0.039999999105930328369140625) * _2638) + _2297;
        _2451 = ((_2625 * 0.039999999105930328369140625) * _2638) + _2299;
        _2453 = ((_2627 * 0.039999999105930328369140625) * _2638) + _2301;
    }
    else
    {
        _2443 = _1974;
        _2445 = _1976;
        _2447 = _1978;
        _2449 = _2297;
        _2451 = _2299;
        _2453 = _2301;
    }
    float _4306 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _4317 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _4328 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    uint _2473 = _403 + 6u;
    float _2481 = _362 / cbSceneParam._m0[86u].x;
    float _2482 = _363 / cbSceneParam._m0[86u].y;
    vec4 _2496 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2481, _2482, (log2((isnan(cbSceneParam._m0[77u].w) ? _295 : (isnan(_295) ? cbSceneParam._m0[77u].w : min(_295, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2498 = _2496.x;
    float _2499 = _2496.y;
    float _2500 = _2496.z;
    float _2501 = _2496.w;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_295 > cbSceneParam._m0[78u].w)
    {
        float _2535 = isnan(_295) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _295 : min(cbSceneParam._m0[80u].w, _295));
        float _2536 = _2535 / _295;
        float _2547 = _2536 * _347;
        float _2548 = _348 * _2536;
        float _2549 = (-0.0) - _2548;
        float _2551 = _2536 * _349;
        float _2553 = (cbSceneParam._m0[77u].w * _2549) / _2535;
        float _2554 = _2553 + cbSceneParam._m0[79u].w;
        float _2555 = cbSceneParam._m0[79u].w - _2548;
        float _2561 = sqrt(((_2547 * _2547) + (_2548 * _2548)) + (_2551 * _2551));
        float _2564 = (1.0 - (cbSceneParam._m0[77u].w / _2535)) * _2561;
        float _2569 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2571 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2724;
        if (abs((_2549 - _2553) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2724 = ((((_2554 > 0.0) ? exp2(_2569 * _2554) : (2.0 - exp2(_2571 * _2554))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2564;
        }
        else
        {
            float _2684 = 1.0 / cbSceneParam._m0[80u].x;
            float _2685 = isnan(_2555) ? _2554 : (isnan(_2554) ? _2555 : max(_2554, _2555));
            float _2686 = isnan(_2555) ? _2554 : (isnan(_2554) ? _2555 : min(_2554, _2555));
            float _2695 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : min(_2685, 0.0));
            float _2696 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : min(_2686, 0.0));
            _2724 = ((abs(_2561 / _2549) * cbSceneParam._m0[80u].y) * ((((_2695 - _2696) * 2.0) - ((exp2(_2569 * (isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0)))) - exp2(_2569 * (isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))))) * _2684)) - ((exp2(_2571 * _2695) - exp2(_2571 * _2696)) * _2684))) + (_2564 * cbSceneParam._m0[80u].z);
        }
        vec4 _2726 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2481, _2482, 1.0), 0.0);
        float _2735 = exp2((_2724 * (-1.44269502162933349609375)) * (1.0 - _2726.w));
        float _2736 = log2(_2735);
        float _2752 = log2(_2501);
        _2573 = (exp2(_2752 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].x)) * _2726.x) / cbSceneParam._m0[78u].x)) + _2498;
        _2575 = (exp2(_2752 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].y)) * _2726.y) / cbSceneParam._m0[78u].y)) + _2499;
        _2577 = (exp2(_2752 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].z)) * _2726.z) / cbSceneParam._m0[78u].z)) + _2500;
        _2579 = _2735 * _2501;
    }
    else
    {
        _2573 = _2498;
        _2575 = _2499;
        _2577 = _2500;
        _2579 = _2501;
    }
    float _2591 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2592 = _2591 == 3.0;
    float _2593 = log2(_2579);
    float _2600 = exp2(_2593 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2443 + ((isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))) * _429))) + ((_2449 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _1236)) * cbPerFrame._m0[3u].x));
    float _2601 = exp2(_2593 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2445 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _429))) + ((_2451 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _1236)) * cbPerFrame._m0[3u].x));
    float _2602 = exp2(_2593 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2447 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _429))) + ((_2453 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _1236)) * cbPerFrame._m0[3u].x));
    float _2611 = (_2591 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2611 * (_2592 ? _2600 : (_2600 + (cbSceneParam._m0[72u].w * _2573)));
    SV_Target.y = _2611 * (_2592 ? _2601 : (_2601 + (cbSceneParam._m0[72u].w * _2575)));
    SV_Target.z = _2611 * (_2592 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2577)));
    SV_Target.w = cbInstanceData._m0[_2473].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2473].w;
}


