#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _799;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _220 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _226 = _220.x * cbMtdParam._m0[9u].x;
    float _227 = _220.y * cbMtdParam._m0[9u].y;
    float _228 = _220.z * cbMtdParam._m0[9u].z;
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = _240.z;
    float _248 = (_240.x * 2.0) + (-1.0);
    float _250 = (_240.y * 2.0) + (-1.0);
    float _251 = dot(vec2(_248, _250), vec2(_248, _250));
    float _3139 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _257 = sqrt(1.0 - (isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0))));
    float _260 = fma(_257, _190 * NORMAL.x, fma(_250, _197 * TANGENT.x, (_183 * _176) * _248));
    float _263 = fma(_257, _190 * NORMAL.y, fma(_250, _197 * TANGENT.y, (_183 * _177) * _248));
    float _266 = fma(_257, _190 * NORMAL.z, fma(_250, _197 * TANGENT.z, (_183 * _178) * _248));
    float _270 = inversesqrt(dot(vec3(_260, _263, _266), vec3(_260, _263, _266)));
    float _271 = _270 * _260;
    float _272 = _270 * _263;
    float _273 = _270 * _266;
    float _3150 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _274 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
    float _3161 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3172 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3183 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _293 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _335 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _345 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _335);
    float _346 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _335);
    float _347 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _335);
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _345 * _351;
    float _353 = _346 * _351;
    float _354 = _347 * _351;
    float _360 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _361 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _382 = fma(_273, cbSceneParam._m0[5u].z, fma(_272, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _271));
    float _385 = fma(_273, cbSceneParam._m0[6u].z, fma(_272, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _271));
    float _388 = fma(_273, cbSceneParam._m0[7u].z, fma(_272, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _271));
    uint _401 = uint(roundEven(NORMAL.w)) * 13u;
    uint _404 = (_401 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _410 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0)))) * cbInstanceData._m0[_404].x;
    float _411 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0)))) * cbInstanceData._m0[_404].y;
    float _412 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0)))) * cbInstanceData._m0[_404].z;
    float _3194 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _413 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _3205 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _414 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
    float _3216 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
    vec4 _424 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _360, cbSceneParam._m0[86u].y * _361));
    float _427 = _424.x * TEXCOORD.z;
    float _428 = dot(vec3(_271, _272, _273), vec3(_352, _353, _354));
    float _431 = _428 * 2.0;
    float _435 = (_431 * _271) - _352;
    float _436 = (_431 * _272) - _353;
    float _437 = (_431 * _273) - _354;
    float _441 = abs(dot(vec3(_352, _353, _354), vec3(_271, _272, _273)));
    float _3227 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _443 = sqrt(_274);
    float _456 = exp2((_443 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_443 * 3.0));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _798;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _523 = fma(_496, cbModelParam._m0[26u].z, fma(_492, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _488));
        float _527 = fma(_496, cbModelParam._m0[27u].z, fma(_492, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _488));
        float _531 = fma(_496, cbModelParam._m0[28u].z, fma(_492, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _488));
        float _556 = _488 + _271;
        float _557 = _492 + _272;
        float _558 = _496 + _273;
        float _568 = fma(_558, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556)) - _523;
        float _569 = fma(_558, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556)) - _527;
        float _570 = fma(_558, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556)) - _531;
        float _574 = inversesqrt(dot(vec3(_568, _569, _570), vec3(_568, _569, _570)));
        float _587 = ((_574 * _568) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_523 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _588 = ((_574 * _569) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_527 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _589 = ((_574 * _570) / cbModelParam._m0[34u].z) + ((((((_531 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        float _626 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_592.x + (-0.5));
        float _628 = _626 * (_592.y + (-0.5));
        float _629 = _626 * (_592.z + (-0.5));
        float _636 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_599.x + (-0.5));
        float _638 = _636 * (_599.y + (-0.5));
        float _639 = _636 * (_599.z + (-0.5));
        float _646 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_606.x + (-0.5));
        float _648 = _646 * (_606.y + (-0.5));
        float _649 = _646 * (_606.z + (-0.5));
        float _656 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_613.x + (-0.5));
        float _658 = _656 * (_613.y + (-0.5));
        float _659 = _656 * (_613.z + (-0.5));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = _627 * 0.5;
        float _664 = _637 * 0.5;
        float _665 = _647 * 0.5;
        float _666 = dot(vec3(_663, _664, _665), vec3(_663, _664, _665));
        float _671 = (_666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_666);
        float _680 = (dot(vec3(_271, _272, _273), vec3(_671 * _663, _671 * _664, _671 * _665)) + 1.0) * 0.5;
        float _3253 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _690 = sqrt(((_664 * _664) + (_663 * _663)) + (_665 * _665)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3264 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _692 = _691 * 2.0;
        float _696 = (1.0 - _691) / (_691 + 1.0);
        float _3275 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _706 = ((((1.0 - _697) * (_692 + 2.0)) * exp2(log2(isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0))) * (_692 + 1.0))) + _697) * _660;
        float _707 = _628 * 0.5;
        float _708 = _638 * 0.5;
        float _709 = _648 * 0.5;
        float _710 = dot(vec3(_707, _708, _709), vec3(_707, _708, _709));
        float _715 = (_710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_710);
        float _723 = (dot(vec3(_271, _272, _273), vec3(_715 * _707, _715 * _708, _715 * _709)) + 1.0) * 0.5;
        float _3286 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _732 = sqrt(((_708 * _708) + (_707 * _707)) + (_709 * _709)) / (_661 + 9.9999997473787516355514526367188e-06);
        float _3297 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
        float _734 = _733 * 2.0;
        float _738 = (1.0 - _733) / (_733 + 1.0);
        float _3308 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _748 = ((((1.0 - _739) * (_734 + 2.0)) * exp2(log2(isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))) * (_734 + 1.0))) + _739) * _661;
        float _749 = _629 * 0.5;
        float _750 = _639 * 0.5;
        float _751 = _649 * 0.5;
        float _752 = dot(vec3(_749, _750, _751), vec3(_749, _750, _751));
        float _757 = (_752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_752);
        float _765 = (dot(vec3(_271, _272, _273), vec3(_757 * _749, _757 * _750, _757 * _751)) + 1.0) * 0.5;
        float _3319 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _774 = sqrt(((_750 * _750) + (_749 * _749)) + (_751 * _751)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3330 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3341 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) * (_776 + 1.0))) + _781) * _662;
        _798 = _629;
        _800 = _628;
        _801 = _627;
        _802 = _639;
        _803 = _638;
        _804 = _637;
        _805 = _649;
        _806 = _648;
        _807 = _647;
        _808 = _662;
        _809 = _661;
        _810 = _660;
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0)));
        _812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0)));
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
    }
    else
    {
        _798 = _799;
        _800 = _799;
        _801 = _799;
        _802 = _799;
        _803 = _799;
        _804 = _799;
        _805 = _799;
        _806 = _799;
        _807 = _799;
        _808 = _799;
        _809 = _799;
        _810 = _799;
        _811 = 0.0;
        _812 = 0.0;
        _813 = 0.0;
    }
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _839 = fma(_496, cbModelParam._m0[30u].z, fma(_492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _488));
        float _843 = fma(_496, cbModelParam._m0[31u].z, fma(_492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _488));
        float _847 = fma(_496, cbModelParam._m0[32u].z, fma(_492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _488));
        float _870 = _488 + _271;
        float _871 = _492 + _272;
        float _872 = _496 + _273;
        float _882 = fma(_872, cbModelParam._m0[30u].z, fma(_871, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _870)) - _839;
        float _883 = fma(_872, cbModelParam._m0[31u].z, fma(_871, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _870)) - _843;
        float _884 = fma(_872, cbModelParam._m0[32u].z, fma(_871, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _870)) - _847;
        float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
        float _901 = ((_888 * _882) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_839 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_888 * _883) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_843 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_888 * _884) / cbModelParam._m0[35u].z) + ((((((_847 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _938 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_905.x + (-0.5));
        float _940 = _938 * (_905.y + (-0.5));
        float _941 = _938 * (_905.z + (-0.5));
        float _948 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_912.x + (-0.5));
        float _950 = _948 * (_912.y + (-0.5));
        float _951 = _948 * (_912.z + (-0.5));
        float _958 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_919.x + (-0.5));
        float _960 = _958 * (_919.y + (-0.5));
        float _961 = _958 * (_919.z + (-0.5));
        float _968 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_926.x + (-0.5));
        float _970 = _968 * (_926.y + (-0.5));
        float _971 = _968 * (_926.z + (-0.5));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = _939 * 0.5;
        float _976 = _949 * 0.5;
        float _977 = _959 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_271, _272, _273), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3404 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_1002 + 1.0))) + _1007) * _972;
        float _1017 = _940 * 0.5;
        float _1018 = _950 * 0.5;
        float _1019 = _960 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_271, _272, _273), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3437 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_1044 + 1.0))) + _1049) * _973;
        float _1059 = _941 * 0.5;
        float _1060 = _951 * 0.5;
        float _1061 = _961 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_271, _272, _273), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3470 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_1086 + 1.0))) + _1091) * _974;
        _1108 = _941;
        _1109 = _940;
        _1110 = _939;
        _1111 = _951;
        _1112 = _950;
        _1113 = _949;
        _1114 = _961;
        _1115 = _960;
        _1116 = _959;
        _1117 = _974;
        _1118 = _973;
        _1119 = _972;
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
    }
    else
    {
        _1108 = _799;
        _1109 = _799;
        _1110 = _799;
        _1111 = _799;
        _1112 = _799;
        _1113 = _799;
        _1114 = _799;
        _1115 = _799;
        _1116 = _799;
        _1117 = _799;
        _1118 = _799;
        _1119 = _799;
        _1120 = 0.0;
        _1121 = 0.0;
        _1122 = 0.0;
    }
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _811)) + _811;
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _812)) + _812;
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _813)) + _813;
    float _1155 = fma(_1134, cbSceneParam._m0[89u].z, fma(_1133, cbSceneParam._m0[89u].y, _1132 * cbSceneParam._m0[89u].x));
    float _1158 = fma(_1134, cbSceneParam._m0[90u].z, fma(_1133, cbSceneParam._m0[90u].y, _1132 * cbSceneParam._m0[90u].x));
    float _1161 = fma(_1134, cbSceneParam._m0[91u].z, fma(_1133, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1132));
    float _1176 = _435 * 0.5;
    float _1177 = _436 * 0.5;
    float _1178 = _437 * 0.5;
    float _1179 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1182 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1185 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1219;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1192 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_798, _802, _805, _808));
        float _1196 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_800, _803, _806, _809));
        float _1200 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_801, _804, _807, _810));
        float _1207 = dot(vec4(cbModelParam._m0[39u]), vec4(_1176, _1177, _1178, 1.0));
        _1219 = dot(vec3(isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)), isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1207) ? 0.0 : (isnan(0.0) ? _1207 : max(0.0, _1207))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1219 = 1.0;
    }
    float _1230;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1221 = dot(vec4(cbModelParam._m0[40u]), vec4(_1176, _1177, _1178, 1.0));
        _1230 = dot(vec3(isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1221) ? 0.0 : (isnan(0.0) ? _1221 : max(0.0, _1221))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1230 = 1.0;
    }
    float _1234 = (_1230 * cbModelParam._m0[1u].x) + (_1219 * (1.0 - cbModelParam._m0[1u].x));
    float _1244 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _274);
    float _1245 = isnan(_1244) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1244 : min(cbModelParam._m0[25u].z, _1244));
    float _1327;
    float _1329;
    float _1331;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1294 = fma(_496, cbModelParam._m0[13u].z, fma(_492, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _488)) + cbModelParam._m0[13u].w;
        float _1298 = fma(_496, cbModelParam._m0[14u].z, fma(_492, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _488)) + cbModelParam._m0[14u].w;
        float _1302 = fma(_496, cbModelParam._m0[15u].z, fma(_492, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _488)) + cbModelParam._m0[15u].w;
        float _1305 = fma(_437, cbModelParam._m0[13u].z, fma(_436, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _435));
        float _1308 = fma(_437, cbModelParam._m0[14u].z, fma(_436, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _435));
        float _1311 = fma(_437, cbModelParam._m0[15u].z, fma(_436, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _435));
        float _1339;
        if (_1305 > 0.0)
        {
            _1339 = abs((1.0 - _1294) / _1305);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1294 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1339 = frontier_phi_14_12_ladder;
        }
        float _1566;
        if (_1308 > 0.0)
        {
            _1566 = abs((1.0 - _1298) / _1308);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1298 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1566 = frontier_phi_23_19_ladder;
        }
        float _1812;
        if (_1311 > 0.0)
        {
            _1812 = abs((1.0 - _1302) / _1311);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1302 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1812 = frontier_phi_35_30_ladder;
        }
        float _1814 = isnan(_1566) ? _1339 : (isnan(_1339) ? _1566 : min(_1339, _1566));
        float _1815 = isnan(_1812) ? _1814 : (isnan(_1814) ? _1812 : min(_1814, _1812));
        float _1819 = (_1815 * _1305) + _1294;
        float _1820 = (_1815 * _1308) + _1298;
        float _1821 = (_1815 * _1311) + _1302;
        float _1822 = _1815 * 9.9999997473787516355514526367188e-05;
        float _1824 = (-1.0) - _1822;
        float _1826 = _1822 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1821 > _1826) || ((_1821 < _1824) || ((_1820 > _1826) || ((_1820 < _1824) || ((_1819 < _1824) || (_1819 > _1826))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1945 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1821, cbModelParam._m0[9u].z, fma(_1820, cbModelParam._m0[9u].y, _1819 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1821, cbModelParam._m0[10u].z, fma(_1820, cbModelParam._m0[10u].y, _1819 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1821, cbModelParam._m0[11u].z, fma(_1820, cbModelParam._m0[11u].y, _1819 * cbModelParam._m0[11u].x))), _1245);
            frontier_phi_13_35_ladder = _1945.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1945.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1945.x * cbModelParam._m0[1u].y;
        }
        _1327 = frontier_phi_13_35_ladder_2;
        _1329 = frontier_phi_13_35_ladder_1;
        _1331 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_435, _436, _437), _1245);
        _1327 = _1315.x * cbModelParam._m0[1u].y;
        _1329 = _1315.y * cbModelParam._m0[1u].y;
        _1331 = _1315.z * cbModelParam._m0[1u].y;
    }
    float _1335 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _274);
    float _1336 = isnan(_1335) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1335 : min(cbModelParam._m0[25u].w, _1335));
    float _1429;
    float _1431;
    float _1433;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1393 = fma(_496, cbModelParam._m0[21u].z, fma(_492, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _488)) + cbModelParam._m0[21u].w;
        float _1397 = fma(_496, cbModelParam._m0[22u].z, fma(_492, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _488)) + cbModelParam._m0[22u].w;
        float _1401 = fma(_496, cbModelParam._m0[23u].z, fma(_492, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _488)) + cbModelParam._m0[23u].w;
        float _1404 = fma(_437, cbModelParam._m0[21u].z, fma(_436, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _435));
        float _1407 = fma(_437, cbModelParam._m0[22u].z, fma(_436, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _435));
        float _1410 = fma(_437, cbModelParam._m0[23u].z, fma(_436, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _435));
        float _1571;
        if (_1404 > 0.0)
        {
            _1571 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1571 = frontier_phi_25_21_ladder;
        }
        float _1839;
        if (_1407 > 0.0)
        {
            _1839 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1839 = frontier_phi_37_32_ladder;
        }
        float _2044;
        if (_1410 > 0.0)
        {
            _2044 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2044 = frontier_phi_46_43_ladder;
        }
        float _2046 = isnan(_1839) ? _1571 : (isnan(_1571) ? _1839 : min(_1571, _1839));
        float _2047 = isnan(_2044) ? _2046 : (isnan(_2046) ? _2044 : min(_2046, _2044));
        float _2051 = (_2047 * _1404) + _1393;
        float _2052 = (_2047 * _1407) + _1397;
        float _2053 = (_2047 * _1410) + _1401;
        float _2054 = _2047 * 9.9999997473787516355514526367188e-05;
        float _2055 = (-1.0) - _2054;
        float _2057 = _2054 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2053 > _2057) || ((_2053 < _2055) || ((_2052 > _2057) || ((_2052 < _2055) || ((_2051 < _2055) || (_2051 > _2057))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2252 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2053, cbModelParam._m0[17u].z, fma(_2052, cbModelParam._m0[17u].y, _2051 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2053, cbModelParam._m0[18u].z, fma(_2052, cbModelParam._m0[18u].y, _2051 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2053, cbModelParam._m0[19u].z, fma(_2052, cbModelParam._m0[19u].y, _2051 * cbModelParam._m0[19u].x))), _1336);
            frontier_phi_22_46_ladder = _2252.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2252.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2252.x * cbModelParam._m0[1u].z;
        }
        _1429 = frontier_phi_22_46_ladder_2;
        _1431 = frontier_phi_22_46_ladder_1;
        _1433 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1413 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_435, _436, _437), _1336);
        _1429 = _1413.x * cbModelParam._m0[1u].z;
        _1431 = _1413.y * cbModelParam._m0[1u].z;
        _1433 = _1413.z * cbModelParam._m0[1u].z;
    }
    float _1445 = ((((1.0 - _456) * ((_443 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_456 * _443)) * _427;
    float _1446 = _1445 * ((cbModelParam._m0[1u].w * (_1429 - _1327)) + _1327);
    float _1447 = _1445 * ((cbModelParam._m0[1u].w * (_1431 - _1329)) + _1329);
    float _1448 = _1445 * ((cbModelParam._m0[1u].w * (_1433 - _1331)) + _1331);
    float _1451 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1454 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1457 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, _1446 * cbSceneParam._m0[91u].x));
    vec4 _1465 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_360, _361));
    float _1467 = _1465.w;
    float _1479 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1467);
    float _1480 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1467);
    float _1481 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1467);
    uvec4 _1485 = floatBitsToUint(cbInstanceData._m0[_401 + 5u]);
    uint _1487 = _1485.x * 14u;
    uint _1488 = _1487 + 13u;
    float _1495 = _427 + (-1.0);
    float _1500 = (cbLight._m0[_1488].x * _1495) + 1.0;
    float _1501 = (cbLight._m0[_1488].y * _1495) + 1.0;
    float _1502 = (cbLight._m0[_1488].z * _1495) + 1.0;
    float _1503 = (cbLight._m0[_1488].w * _1495) + 1.0;
    uint _1504 = _1487 + 5u;
    float _1510 = isnan(1.0) ? _1501 : (isnan(_1501) ? 1.0 : min(_1501, 1.0));
    uint _1514 = _1487 + 4u;
    float _1524 = isnan(1.0) ? _1500 : (isnan(_1500) ? 1.0 : min(_1500, 1.0));
    uint _1528 = _1487 | 1u;
    float _1539 = dot(vec3(cbLight._m0[_1487].xyz), vec3(_271, _272, _273));
    float _1542 = dot(vec3(cbLight._m0[_1528].xyz), vec3(_271, _272, _273));
    float _3606 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
    float _3617 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
    float _1547 = (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * 0.3183098733425140380859375;
    float _1549 = (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * 0.3183098733425140380859375;
    float _1556 = ((cbLight._m0[_1504].x * _1510) * _1549) + (((cbLight._m0[_1514].x * _1479) * _1524) * _1547);
    float _1557 = ((_1510 * cbLight._m0[_1504].y) * _1549) + (((cbLight._m0[_1514].y * _1480) * _1524) * _1547);
    float _1558 = ((_1510 * cbLight._m0[_1504].z) * _1549) + (((cbLight._m0[_1514].z * _1481) * _1524) * _1547);
    uvec4 _1563 = floatBitsToUint(cbLight._m0[_1487 + 12u]);
    bool _1565 = _1563.x == 0u;
    float _1576;
    float _1578;
    float _1580;
    if (_1565)
    {
        _1576 = _1556;
        _1578 = _1557;
        _1580 = _1558;
    }
    else
    {
        uint _1584 = _1487 + 6u;
        float _1600 = (dot(vec3(cbLight._m0[_1487 + 2u].xyz), vec3(_271, _272, _273)) * 0.5) + 0.5;
        float _1601 = _1600 * _1600;
        float _3628 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1603 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
        _1576 = (((cbLight._m0[_1584].x * 0.3183098733425140380859375) * _1602) * _1603) + _1556;
        _1578 = (((cbLight._m0[_1584].y * 0.3183098733425140380859375) * _1602) * _1603) + _1557;
        _1580 = (((cbLight._m0[_1584].z * 0.3183098733425140380859375) * _1602) * _1603) + _1558;
    }
    bool _1583 = _1563.y == 0u;
    float _1621;
    float _1623;
    float _1625;
    if (_1583)
    {
        _1621 = _1576;
        _1623 = _1578;
        _1625 = _1580;
    }
    else
    {
        uint _1783 = _1487 + 7u;
        float _1799 = (dot(vec3(cbLight._m0[_1487 + 3u].xyz), vec3(_271, _272, _273)) * 0.5) + 0.5;
        float _1800 = _1799 * _1799;
        float _3644 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1802 = isnan(1.0) ? _1503 : (isnan(_1503) ? 1.0 : min(_1503, 1.0));
        _1621 = (((cbLight._m0[_1783].x * 0.3183098733425140380859375) * _1801) * _1802) + _1576;
        _1623 = (((cbLight._m0[_1783].y * 0.3183098733425140380859375) * _1801) * _1802) + _1578;
        _1625 = (((cbLight._m0[_1783].z * 0.3183098733425140380859375) * _1801) * _1802) + _1580;
    }
    uint _1628 = _1487 + 8u;
    float _1641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1487].w)) * _274) * 0.949999988079071044921875);
    float _1642 = _1641 * _1641;
    float _1643 = cbLight._m0[_1487].x + _352;
    float _1644 = cbLight._m0[_1487].y + _353;
    float _1645 = cbLight._m0[_1487].z + _354;
    float _1649 = inversesqrt(dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645)));
    float _1650 = _1649 * _1643;
    float _1651 = _1649 * _1644;
    float _1652 = _1649 * _1645;
    float _1653 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_1487].xyz));
    float _3660 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1656 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _1657 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _1658 = dot(vec3(_271, _272, _273), vec3(_1650, _1651, _1652));
    float _3682 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _1661 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _1662 = dot(vec3(cbLight._m0[_1487].xyz), vec3(_1650, _1651, _1652));
    float _3693 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1666 = _1642 * _1642;
    float _1670 = ((_1661 * _1661) * (_1666 + (-1.0))) + 1.0;
    float _1681 = (exp2(log2(1.0 - (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1682 = 1.0 - _1642;
    float _1693 = (0.5 / (((_1657 * ((_1656 * _1682) + _1642)) + 9.9999999392252902907785028219223e-09) + (((_1657 * _1682) + _1642) * _1656))) * _1656;
    float _3704 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1695 = (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1666 / ((_1670 * _1670) * 3.141590118408203125));
    uint _1709 = _1487 + 9u;
    float _1720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1528].w)) * _274) * 0.949999988079071044921875);
    float _1721 = _1720 * _1720;
    float _1722 = cbLight._m0[_1528].x + _352;
    float _1723 = cbLight._m0[_1528].y + _353;
    float _1724 = cbLight._m0[_1528].z + _354;
    float _1728 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
    float _1729 = _1728 * _1722;
    float _1730 = _1728 * _1723;
    float _1731 = _1728 * _1724;
    float _1732 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_1528].xyz));
    float _3715 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _1736 = dot(vec3(_271, _272, _273), vec3(_1729, _1730, _1731));
    float _3726 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _1740 = dot(vec3(cbLight._m0[_1528].xyz), vec3(_1729, _1730, _1731));
    float _3737 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1744 = _1721 * _1721;
    float _1748 = ((_1739 * _1739) * (_1744 + (-1.0))) + 1.0;
    float _1757 = (exp2(log2(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1758 = 1.0 - _1721;
    float _1768 = (0.5 / (((_1657 * ((_1735 * _1758) + _1721)) + 9.9999999392252902907785028219223e-09) + (((_1657 * _1758) + _1721) * _1735))) * _1735;
    float _3748 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1770 = (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1744 / ((_1748 * _1748) * 3.141590118408203125));
    float _1780 = (((_1757 * cbLight._m0[_1709].x) * _1770) * _1510) + ((((cbLight._m0[_1628].x * _1479) * _1681) * _1695) * _1524);
    float _1781 = (((_1757 * cbLight._m0[_1709].y) * _1770) * _1510) + ((((cbLight._m0[_1628].y * _1480) * _1681) * _1695) * _1524);
    float _1782 = (((_1757 * cbLight._m0[_1709].z) * _1770) * _1510) + ((((cbLight._m0[_1628].z * _1481) * _1681) * _1695) * _1524);
    float _1844;
    float _1846;
    float _1848;
    if (_1565)
    {
        _1844 = _1780;
        _1846 = _1781;
        _1848 = _1782;
    }
    else
    {
        uint _1850 = _1487 + 2u;
        uint _1854 = _1487 + 10u;
        float _1868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _274) * 0.949999988079071044921875);
        float _1869 = _1868 * _1868;
        float _1870 = cbLight._m0[_1850].x + _352;
        float _1871 = cbLight._m0[_1850].y + _353;
        float _1872 = cbLight._m0[_1850].z + _354;
        float _1876 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
        float _1877 = _1876 * _1870;
        float _1878 = _1876 * _1871;
        float _1879 = _1876 * _1872;
        float _1880 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_1850].xyz));
        float _3759 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1883 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1884 = dot(vec3(_271, _272, _273), vec3(_1877, _1878, _1879));
        float _3770 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1887 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1888 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_1877, _1878, _1879));
        float _3781 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1892 = _1869 * _1869;
        float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
        float _1905 = (exp2(log2(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1906 = 1.0 - _1869;
        float _1916 = (0.5 / (((_1657 * ((_1883 * _1906) + _1869)) + 9.9999999392252902907785028219223e-09) + (((_1657 * _1906) + _1869) * _1883))) * _1883;
        float _3792 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1918 = (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
        float _1919 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
        _1844 = (((_1905 * cbLight._m0[_1854].x) * _1918) * _1919) + _1780;
        _1846 = (((_1905 * cbLight._m0[_1854].y) * _1918) * _1919) + _1781;
        _1848 = (((_1905 * cbLight._m0[_1854].z) * _1918) * _1919) + _1782;
    }
    float _1954;
    float _1956;
    float _1958;
    if (_1583)
    {
        _1954 = _1844;
        _1956 = _1846;
        _1958 = _1848;
    }
    else
    {
        uint _1965 = _1487 + 3u;
        uint _1969 = _1487 + 11u;
        float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _274) * 0.949999988079071044921875);
        float _1984 = _1983 * _1983;
        float _1985 = cbLight._m0[_1965].x + _352;
        float _1986 = cbLight._m0[_1965].y + _353;
        float _1987 = cbLight._m0[_1965].z + _354;
        float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
        float _1992 = _1991 * _1985;
        float _1993 = _1991 * _1986;
        float _1994 = _1991 * _1987;
        float _1995 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_1965].xyz));
        float _3808 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1998 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1999 = dot(vec3(_271, _272, _273), vec3(_1992, _1993, _1994));
        float _3819 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _2003 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_1992, _1993, _1994));
        float _3830 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2007 = _1984 * _1984;
        float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
        float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2021 = 1.0 - _1984;
        float _2031 = (0.5 / (((_1657 * ((_1998 * _2021) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1657 * _2021) + _1984) * _1998))) * _1998;
        float _3841 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2033 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
        float _2034 = isnan(1.0) ? _1503 : (isnan(_1503) ? 1.0 : min(_1503, 1.0));
        _1954 = (((_2020 * cbLight._m0[_1969].x) * _2033) * _2034) + _1844;
        _1956 = (((_2020 * cbLight._m0[_1969].y) * _2033) * _2034) + _1846;
        _1958 = (((_2020 * cbLight._m0[_1969].z) * _2033) * _2034) + _1848;
    }
    float _2169;
    float _2171;
    float _2173;
    float _2175;
    float _2177;
    float _2179;
    if (_1485.y == 0u)
    {
        float _2109 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2110 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2109;
        float _2111 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2109;
        float _2112 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2109;
        uvec4 _2124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2125 = _2124.x;
        uint _2136 = uint((float(_2124.y) * floor(float(uint(cbSceneParam._m0[85u].y * _361) / _2125))) + floor(float(uint(cbSceneParam._m0[85u].x * _360) / _2125)));
        float _2146 = (log2(_2112 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2147 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        uint _2150 = uint(isnan(14.0) ? _2147 : (isnan(_2147) ? 14.0 : min(_2147, 14.0)));
        uvec4 _2155 = texelFetch(g_lightClusterGridBuffer, int(((_2150 << 2u) + (_2136 << 6u)) >> 2u));
        uint _2156 = _2155.x;
        uint _2157 = _2124.z;
        float _2257;
        float _2259;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        if (((((1u << ((_2157 >> 4u) & 15u)) + 4294967295u) & _2156) == 0u) || ((_2157 & 240u) == 0u))
        {
            _2257 = 0.0;
            _2259 = 0.0;
            _2261 = 0.0;
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
        }
        else
        {
            float _2258;
            float _2260;
            float _2262;
            float _2264;
            float _2266;
            float _2268;
            float _2402 = 0.0;
            float _2403 = 0.0;
            float _2404 = 0.0;
            float _2405 = 0.0;
            float _2406 = 0.0;
            float _2407 = 0.0;
            uint _2408 = 0u;
            uint _2417;
            bool _2418;
            for (;;)
            {
                _2417 = texelFetch(g_lightClassification, int((((_2150 << 5u) + (_2136 << 9u)) + (_2408 << 2u)) >> 2u)).x;
                _2418 = _2417 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2418)
                {
                    frontier_phi_61_pred = _2402;
                    frontier_phi_61_pred_1 = _2407;
                    frontier_phi_61_pred_2 = _2406;
                    frontier_phi_61_pred_3 = _2405;
                    frontier_phi_61_pred_4 = _2404;
                    frontier_phi_61_pred_5 = _2403;
                }
                else
                {
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    uint _2532;
                    _2526 = _2402;
                    _2527 = _2403;
                    _2528 = _2404;
                    _2529 = _2405;
                    _2530 = _2406;
                    _2531 = _2407;
                    _2532 = _2417;
                    float _2458;
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    float _2463;
                    for (;;)
                    {
                        uint _2536 = uint(findLSB(_2532)) + (_2408 << 5u);
                        uint _2533 = (_2532 + 4294967295u) & _2532;
                        uint _2538 = _2536 * 48u;
                        vec4 _2552 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2538)).x, texelFetch(g_PointLightRenderingBuffer, int(_2538 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2538 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2538 + 3u)).x));
                        uint _2558 = (_2536 * 48u) + 4u;
                        vec4 _2571 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2558)).x, texelFetch(g_PointLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2558 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2558 + 3u)).x));
                        uint _2577 = (_2536 * 48u) + 8u;
                        vec3 _2588 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2577)).x, texelFetch(g_PointLightRenderingBuffer, int(_2577 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2577 + 2u)).x));
                        float _2592 = _2552.x - _2110;
                        float _2593 = _2552.y - _2111;
                        float _2594 = _2552.z - _2112;
                        float _2595 = dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594));
                        float _2598 = inversesqrt(_2595);
                        float _2599 = _2598 * _2592;
                        float _2600 = _2598 * _2593;
                        float _2601 = _2598 * _2594;
                        float _2602 = dot(vec3(_382, _385, _388), vec3(_2599, _2600, _2601));
                        float _2607 = 1.0 - (_2595 * _2552.w);
                        float _3867 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
                        float _2608 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
                        float _2609 = sqrt(_2595) * _2571.w;
                        float _2612 = 1.39999997615814208984375 / (_2609 + 1.39999997615814208984375);
                        float _2613 = _2612 * _2612;
                        float _2616 = ((1.0 - _2613) * _2602) + _2613;
                        float _2619 = _2609 * _2609;
                        float _2623 = ((isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0))) * _2608) / ((_2619 * 0.699999988079071044921875) + 1.0);
                        float _2627 = (-0.0) - _2110;
                        float _2628 = (-0.0) - _2111;
                        float _2629 = (-0.0) - _2112;
                        float _2633 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
                        float _2634 = _2633 * _2627;
                        float _2635 = _2633 * _2628;
                        float _2636 = _2633 * _2629;
                        float _2644 = exp2(log2(1.0 / ((_2619 * 3.5) + 5.0)) * 0.25);
                        float _2645 = 1.0 - _443;
                        float _2652 = sqrt(1.0 - ((1.0 - (_2645 * _2645)) * (1.0 - (_2644 * _2644))));
                        float _2653 = _2652 * _2652;
                        float _2654 = _2653 * _2653;
                        float _2655 = _2634 + _2599;
                        float _2656 = _2635 + _2600;
                        float _2657 = _2636 + _2601;
                        float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
                        float _2665 = dot(vec3(_382, _385, _388), vec3(_2634, _2635, _2636));
                        float _3883 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                        float _2668 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
                        float _2669 = dot(vec3(_382, _385, _388), vec3(_2661 * _2655, _2661 * _2656, _2661 * _2657));
                        float _3894 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2672 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
                        float _2676 = ((_2672 * _2672) * (_2654 + (-1.0))) + 1.0;
                        float _2677 = _2612 * _2653;
                        float _2678 = _2677 * _2677;
                        float _2681 = ((1.0 - _2678) * _2602) + _2678;
                        float _3905 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
                        float _2682 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
                        float _2683 = 1.0 - _2653;
                        float _2693 = (0.5 / (((_2682 * ((_2668 * _2683) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _2683) + _2653) * _2668))) * _2682;
                        float _3916 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                        float _2704 = (((_2654 * 3.1415927410125732421875) * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) / ((_2676 * _2676) * ((_2619 * 2.1991131305694580078125) + 3.141590118408203125))) * _2608;
                        _2461 = (_2623 * _2571.x) + _2529;
                        _2462 = (_2623 * _2571.y) + _2530;
                        _2463 = (_2623 * _2571.z) + _2531;
                        _2458 = (_2704 * _2588.x) + _2526;
                        _2459 = (_2704 * _2588.y) + _2527;
                        _2460 = (_2704 * _2588.z) + _2528;
                        if (_2533 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2526 = _2458;
                            _2527 = _2459;
                            _2528 = _2460;
                            _2529 = _2461;
                            _2530 = _2462;
                            _2531 = _2463;
                            _2532 = _2533;
                        }
                    }
                    frontier_phi_61_pred = _2458;
                    frontier_phi_61_pred_1 = _2463;
                    frontier_phi_61_pred_2 = _2462;
                    frontier_phi_61_pred_3 = _2461;
                    frontier_phi_61_pred_4 = _2460;
                    frontier_phi_61_pred_5 = _2459;
                }
                _2258 = frontier_phi_61_pred;
                _2268 = frontier_phi_61_pred_1;
                _2266 = frontier_phi_61_pred_2;
                _2264 = frontier_phi_61_pred_3;
                _2262 = frontier_phi_61_pred_4;
                _2260 = frontier_phi_61_pred_5;
                uint _2409 = _2408 + 1u;
                if (_2409 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2402 = _2258;
                    _2403 = _2260;
                    _2404 = _2262;
                    _2405 = _2264;
                    _2406 = _2266;
                    _2407 = _2268;
                    _2408 = _2409;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2257 = _2258;
            _2259 = _2260;
            _2261 = _2262;
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
        }
        uvec4 _2271 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2272 = _2271.z;
        uint _2274 = (_2272 >> 8u) & 15u;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        if (((4294967295u << _2274) & _2156) == 0u)
        {
            _2370 = _2257;
            _2372 = _2259;
            _2374 = _2261;
            _2376 = _2263;
            _2378 = _2265;
            _2380 = _2267;
        }
        else
        {
            float _2395 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
            float _2396 = _2395 * _2110;
            float _2397 = _2395 * _2111;
            float _2398 = _2395 * _2112;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2274 < ((_2272 >> 12u) & 15u))
            {
                float _2371;
                float _2373;
                float _2375;
                float _2377;
                float _2379;
                float _2381;
                float _2509 = _2257;
                float _2510 = _2259;
                float _2511 = _2261;
                float _2512 = _2263;
                float _2513 = _2265;
                float _2514 = _2267;
                uint _2515 = _2274;
                uint _2524;
                bool _2525;
                for (;;)
                {
                    _2524 = texelFetch(g_lightClassification, int((((_2150 << 5u) + (_2136 << 9u)) + (_2515 << 2u)) >> 2u)).x;
                    _2525 = _2524 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2525)
                    {
                        frontier_phi_67_pred = _2512;
                        frontier_phi_67_pred_1 = _2513;
                        frontier_phi_67_pred_2 = _2514;
                        frontier_phi_67_pred_3 = _2511;
                        frontier_phi_67_pred_4 = _2510;
                        frontier_phi_67_pred_5 = _2509;
                    }
                    else
                    {
                        float _2709;
                        float _2710;
                        float _2711;
                        float _2712;
                        float _2713;
                        float _2714;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _2722 = _2509;
                        float _2723 = _2510;
                        float _2724 = _2511;
                        float _2725 = _2512;
                        float _2726 = _2513;
                        float _2727 = _2514;
                        uint _2728 = _2524;
                        uint _2729;
                        vec4 _2754;
                        float _2755;
                        vec4 _2770;
                        vec3 _2782;
                        vec4 _2798;
                        vec4 _2814;
                        float _2861;
                        bool _2862;
                        for (;;)
                        {
                            uint _2739 = ((_2515 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2728));
                            _2729 = (_2728 + 4294967295u) & _2728;
                            uint _2741 = _2739 * 40u;
                            _2754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 3u)).x));
                            _2755 = _2754.w;
                            uint _2757 = (_2739 * 40u) + 4u;
                            _2770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 3u)).x));
                            uint _2772 = (_2739 * 40u) + 8u;
                            _2782 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 2u)).x));
                            uint _2785 = (_2739 * 40u) + 16u;
                            _2798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 3u)).x));
                            uint _2801 = (_2739 * 40u) + 20u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            uint _2817 = (_2739 * 40u) + 24u;
                            vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            uint _2836 = (_2739 * 40u) + 28u;
                            vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            _2861 = fma(_2112, _2849.z, fma(_2111, _2849.y, _2849.x * _2110)) + _2849.w;
                            _2862 = !((fma(_2112, _2830.z, fma(_2111, _2830.y, _2830.x * _2110)) + _2830.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2862)
                            {
                                float _2889 = _2754.x - _2110;
                                float _2890 = _2754.y - _2111;
                                float _2891 = _2754.z - _2112;
                                float _2892 = dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891));
                                float _2895 = inversesqrt(_2892);
                                float _2896 = _2895 * _2889;
                                float _2897 = _2895 * _2890;
                                float _2898 = _2895 * _2891;
                                float _2902 = 1.0 - (_2892 / (_2755 * _2755));
                                float _3927 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                                float _2903 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                                float _2907 = sqrt(_2892) * _2770.w;
                                float _2909 = 1.39999997615814208984375 / (_2907 + 1.39999997615814208984375);
                                float _2910 = _2909 * _2909;
                                float _2913 = ((1.0 - _2910) * dot(vec3(_2896, _2897, _2898), vec3(_382, _385, _388))) + _2910;
                                float _2916 = _2907 * _2907;
                                float _2920 = (fma(_2112, _2798.z, fma(_2111, _2798.y, _2798.x * _2110)) + _2798.w) / _2861;
                                float _2921 = (fma(_2112, _2814.z, fma(_2111, _2814.y, _2814.x * _2110)) + _2814.w) / _2861;
                                float _2925 = 1.0 - dot(vec2(_2920, _2921), vec2(_2920, _2921));
                                float _3943 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                                float _2926 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
                                float _2927 = _2926 * (((isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0))) * _2903) / ((_2916 * 0.699999988079071044921875) + 1.0));
                                float _2939 = exp2(log2(1.0 / ((_2916 * 3.5) + 5.0)) * 0.25);
                                float _2940 = 1.0 - _443;
                                float _2947 = sqrt(1.0 - ((1.0 - (_2940 * _2940)) * (1.0 - (_2939 * _2939))));
                                float _2948 = _2947 * _2947;
                                float _2949 = _2948 * _2948;
                                float _2950 = _2896 - _2396;
                                float _2951 = _2897 - _2397;
                                float _2952 = _2898 - _2398;
                                float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                                float _2960 = dot(vec3(_382, _385, _388), vec3((-0.0) - _2396, (-0.0) - _2397, (-0.0) - _2398));
                                float _3954 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2963 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
                                float _2964 = dot(vec3(_382, _385, _388), vec3(_2956 * _2950, _2956 * _2951, _2956 * _2952));
                                float _3965 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2967 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
                                float _2971 = ((_2967 * _2967) * (_2949 + (-1.0))) + 1.0;
                                float _2972 = _2909 * _2948;
                                float _2973 = _2972 * _2972;
                                float _2979 = ((1.0 - _2973) * dot(vec3(_382, _385, _388), vec3(_2896, _2897, _2898))) + _2973;
                                float _3976 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                                float _2980 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
                                float _2981 = 1.0 - _2948;
                                float _2991 = (0.5 / (((_2980 * ((_2963 * _2981) + _2948)) + 9.9999999392252902907785028219223e-09) + (((_2980 * _2981) + _2948) * _2963))) * _2980;
                                float _3987 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _3001 = (_2926 * _2903) * (((_2949 * 3.1415927410125732421875) * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) / ((_2971 * _2971) * ((_2916 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3001 * _2782.x;
                                frontier_phi_73_pred_1 = _3001 * _2782.y;
                                frontier_phi_73_pred_2 = _2927 * _2770.z;
                                frontier_phi_73_pred_3 = _2927 * _2770.y;
                                frontier_phi_73_pred_4 = _2927 * _2770.x;
                                frontier_phi_73_pred_5 = _3001 * _2782.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3005 = frontier_phi_73_pred;
                            _3006 = frontier_phi_73_pred_1;
                            _3010 = frontier_phi_73_pred_2;
                            _3009 = frontier_phi_73_pred_3;
                            _3008 = frontier_phi_73_pred_4;
                            _3007 = frontier_phi_73_pred_5;
                            _2712 = _3008 + _2725;
                            _2713 = _3009 + _2726;
                            _2714 = _3010 + _2727;
                            _2709 = _3005 + _2722;
                            _2710 = _3006 + _2723;
                            _2711 = _3007 + _2724;
                            if (_2729 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2722 = _2709;
                                _2723 = _2710;
                                _2724 = _2711;
                                _2725 = _2712;
                                _2726 = _2713;
                                _2727 = _2714;
                                _2728 = _2729;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2712;
                        frontier_phi_67_pred_1 = _2713;
                        frontier_phi_67_pred_2 = _2714;
                        frontier_phi_67_pred_3 = _2711;
                        frontier_phi_67_pred_4 = _2710;
                        frontier_phi_67_pred_5 = _2709;
                    }
                    _2377 = frontier_phi_67_pred;
                    _2379 = frontier_phi_67_pred_1;
                    _2381 = frontier_phi_67_pred_2;
                    _2375 = frontier_phi_67_pred_3;
                    _2373 = frontier_phi_67_pred_4;
                    _2371 = frontier_phi_67_pred_5;
                    uint _2516 = _2515 + 1u;
                    if (_2516 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2509 = _2371;
                        _2510 = _2373;
                        _2511 = _2375;
                        _2512 = _2377;
                        _2513 = _2379;
                        _2514 = _2381;
                        _2515 = _2516;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2379;
                frontier_phi_55_56_ladder_1 = _2381;
                frontier_phi_55_56_ladder_2 = _2377;
                frontier_phi_55_56_ladder_3 = _2375;
                frontier_phi_55_56_ladder_4 = _2373;
                frontier_phi_55_56_ladder_5 = _2371;
            }
            else
            {
                frontier_phi_55_56_ladder = _2265;
                frontier_phi_55_56_ladder_1 = _2267;
                frontier_phi_55_56_ladder_2 = _2263;
                frontier_phi_55_56_ladder_3 = _2261;
                frontier_phi_55_56_ladder_4 = _2259;
                frontier_phi_55_56_ladder_5 = _2257;
            }
            _2370 = frontier_phi_55_56_ladder_5;
            _2372 = frontier_phi_55_56_ladder_4;
            _2374 = frontier_phi_55_56_ladder_3;
            _2376 = frontier_phi_55_56_ladder_2;
            _2378 = frontier_phi_55_56_ladder;
            _2380 = frontier_phi_55_56_ladder_1;
        }
        float _2385 = isnan(1.0) ? _427 : (isnan(_427) ? 1.0 : min(_427, 1.0));
        _2169 = (_2385 * _2376) + _1621;
        _2171 = (_2385 * _2378) + _1623;
        _2173 = (_2385 * _2380) + _1625;
        _2175 = ((_2370 * 0.039999999105930328369140625) * _2385) + _1954;
        _2177 = ((_2372 * 0.039999999105930328369140625) * _2385) + _1956;
        _2179 = ((_2374 * 0.039999999105930328369140625) * _2385) + _1958;
    }
    else
    {
        _2169 = _1621;
        _2171 = _1623;
        _2173 = _1625;
        _2175 = _1954;
        _2177 = _1956;
        _2179 = _1958;
    }
    float _4003 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _4014 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _4025 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    uint _2199 = _401 + 6u;
    float _2207 = _360 / cbSceneParam._m0[86u].x;
    float _2208 = _361 / cbSceneParam._m0[86u].y;
    vec4 _2222 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2207, _2208, (log2((isnan(cbSceneParam._m0[77u].w) ? _293 : (isnan(_293) ? cbSceneParam._m0[77u].w : min(_293, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2224 = _2222.x;
    float _2225 = _2222.y;
    float _2226 = _2222.z;
    float _2227 = _2222.w;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    if (_293 > cbSceneParam._m0[78u].w)
    {
        float _2282 = isnan(_293) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _293 : min(cbSceneParam._m0[80u].w, _293));
        float _2283 = _2282 / _293;
        float _2294 = _2283 * _345;
        float _2295 = _346 * _2283;
        float _2296 = (-0.0) - _2295;
        float _2298 = _2283 * _347;
        float _2300 = (cbSceneParam._m0[77u].w * _2296) / _2282;
        float _2301 = _2300 + cbSceneParam._m0[79u].w;
        float _2302 = cbSceneParam._m0[79u].w - _2295;
        float _2308 = sqrt(((_2294 * _2294) + (_2295 * _2295)) + (_2298 * _2298));
        float _2311 = (1.0 - (cbSceneParam._m0[77u].w / _2282)) * _2308;
        float _2316 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2318 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2471;
        if (abs((_2296 - _2300) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2471 = ((((_2301 > 0.0) ? exp2(_2316 * _2301) : (2.0 - exp2(_2318 * _2301))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2311;
        }
        else
        {
            float _2431 = 1.0 / cbSceneParam._m0[80u].x;
            float _2432 = isnan(_2302) ? _2301 : (isnan(_2301) ? _2302 : max(_2301, _2302));
            float _2433 = isnan(_2302) ? _2301 : (isnan(_2301) ? _2302 : min(_2301, _2302));
            float _2442 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : min(_2432, 0.0));
            float _2443 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : min(_2433, 0.0));
            _2471 = ((abs(_2308 / _2296) * cbSceneParam._m0[80u].y) * ((((_2442 - _2443) * 2.0) - ((exp2(_2316 * (isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0)))) - exp2(_2316 * (isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0))))) * _2431)) - ((exp2(_2318 * _2442) - exp2(_2318 * _2443)) * _2431))) + (_2311 * cbSceneParam._m0[80u].z);
        }
        vec4 _2473 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2207, _2208, 1.0), 0.0);
        float _2482 = exp2((_2471 * (-1.44269502162933349609375)) * (1.0 - _2473.w));
        float _2483 = log2(_2482);
        float _2499 = log2(_2227);
        _2320 = (exp2(_2499 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2483 * cbSceneParam._m0[78u].x)) * _2473.x) / cbSceneParam._m0[78u].x)) + _2224;
        _2322 = (exp2(_2499 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2483 * cbSceneParam._m0[78u].y)) * _2473.y) / cbSceneParam._m0[78u].y)) + _2225;
        _2324 = (exp2(_2499 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2483 * cbSceneParam._m0[78u].z)) * _2473.z) / cbSceneParam._m0[78u].z)) + _2226;
        _2326 = _2482 * _2227;
    }
    else
    {
        _2320 = _2224;
        _2322 = _2225;
        _2324 = _2226;
        _2326 = _2227;
    }
    float _2338 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2339 = _2338 == 3.0;
    float _2340 = log2(_2326);
    float _2347 = exp2(_2340 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_2169 + ((isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))) * _427))) + ((_2175 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1234)) * cbPerFrame._m0[3u].x));
    float _2348 = exp2(_2340 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_2171 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _427))) + ((_2177 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _1234)) * cbPerFrame._m0[3u].x));
    float _2349 = exp2(_2340 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_2173 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _427))) + ((_2179 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _1234)) * cbPerFrame._m0[3u].x));
    float _2358 = (_2338 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2358 * (_2339 ? _2347 : (_2347 + (cbSceneParam._m0[72u].w * _2320)));
    SV_Target.y = _2358 * (_2339 ? _2348 : (_2348 + (cbSceneParam._m0[72u].w * _2322)));
    SV_Target.z = _2358 * (_2339 ? _2349 : (_2349 + (cbSceneParam._m0[72u].w * _2324)));
    SV_Target.w = cbInstanceData._m0[_2199].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2199].w;
}


