#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _847;
float _3500;
float _3501;
float _3502;
float _3503;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.w;
    float _233 = _226.x * cbMtdParam._m0[9u].x;
    float _234 = _226.y * cbMtdParam._m0[9u].y;
    float _235 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _247 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _251 = _247.z;
    float _255 = (_247.x * 2.0) + (-1.0);
    float _257 = (_247.y * 2.0) + (-1.0);
    float _258 = dot(vec2(_255, _257), vec2(_255, _257));
    float _3512 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _264 = sqrt(1.0 - (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))));
    float _267 = fma(_264, _196 * NORMAL.x, fma(_257, _203 * TANGENT.x, (_189 * _182) * _255));
    float _270 = fma(_264, _196 * NORMAL.y, fma(_257, _203 * TANGENT.y, (_189 * _183) * _255));
    float _273 = fma(_264, _196 * NORMAL.z, fma(_257, _203 * TANGENT.z, (_189 * _184) * _255));
    float _277 = inversesqrt(dot(vec3(_267, _270, _273), vec3(_267, _270, _273)));
    float _278 = _277 * _267;
    float _279 = _277 * _270;
    float _280 = _277 * _273;
    float _3523 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _281 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3545 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3556 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _300 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _342 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _352 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _342);
    float _353 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _342);
    float _354 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _342);
    float _358 = inversesqrt(dot(vec3(_352, _353, _354), vec3(_352, _353, _354)));
    float _359 = _352 * _358;
    float _360 = _353 * _358;
    float _361 = _354 * _358;
    vec4 _366 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _368 = _366.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _526 = sqrt(((_352 * _352) + (_353 * _353)) + (_354 * _354));
        float _532 = (cbMatDynParam._m0[5u].x * _526) + cbMatDynParam._m0[5u].y;
        float _3567 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
        float _533 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _537 = (cbMatDynParam._m0[5u].z * _526) + cbMatDynParam._m0[5u].w;
        float _3578 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) - _533)) + _533) < ((_368 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _380 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _381 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _401 = fma(_280, cbSceneParam._m0[5u].z, fma(_279, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _278));
    float _404 = fma(_280, cbSceneParam._m0[6u].z, fma(_279, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _278));
    float _407 = fma(_280, cbSceneParam._m0[7u].z, fma(_279, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _278));
    uint _420 = uint(roundEven(NORMAL.w)) * 13u;
    uint _422 = _420 + 9u;
    uint _423 = _422 + uint(cbMatDynParam._m0[0u].w);
    float _429 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * cbInstanceData._m0[_423].x;
    float _430 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_423].y;
    float _431 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_423].z;
    float _3589 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    vec4 _443 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _380, cbSceneParam._m0[86u].y * _381));
    float _446 = _443.x * TEXCOORD.z;
    float _447 = dot(vec3(_278, _279, _280), vec3(_359, _360, _361));
    float _450 = _447 * 2.0;
    float _454 = (_450 * _278) - _359;
    float _455 = (_450 * _279) - _360;
    float _456 = (_450 * _280) - _361;
    float _460 = abs(dot(vec3(_359, _360, _361), vec3(_278, _279, _280)));
    float _3622 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _462 = sqrt(_281);
    float _475 = exp2((_462 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_462 * 3.0));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _846;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _571 = fma(_515, cbModelParam._m0[26u].z, fma(_511, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _507));
        float _575 = fma(_515, cbModelParam._m0[27u].z, fma(_511, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _507));
        float _579 = fma(_515, cbModelParam._m0[28u].z, fma(_511, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _507));
        float _604 = _507 + _278;
        float _605 = _511 + _279;
        float _606 = _515 + _280;
        float _616 = fma(_606, cbModelParam._m0[26u].z, fma(_605, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _604)) - _571;
        float _617 = fma(_606, cbModelParam._m0[27u].z, fma(_605, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _604)) - _575;
        float _618 = fma(_606, cbModelParam._m0[28u].z, fma(_605, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _604)) - _579;
        float _622 = inversesqrt(dot(vec3(_616, _617, _618), vec3(_616, _617, _618)));
        float _635 = ((_622 * _616) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_571 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_622 * _617) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_575 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_622 * _618) / cbModelParam._m0[34u].z) + ((((((_579 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        float _674 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _675 = _674 * (_640.x + (-0.5));
        float _676 = _674 * (_640.y + (-0.5));
        float _677 = _674 * (_640.z + (-0.5));
        float _684 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_647.x + (-0.5));
        float _686 = _684 * (_647.y + (-0.5));
        float _687 = _684 * (_647.z + (-0.5));
        float _694 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_654.x + (-0.5));
        float _696 = _694 * (_654.y + (-0.5));
        float _697 = _694 * (_654.z + (-0.5));
        float _704 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_661.x + (-0.5));
        float _706 = _704 * (_661.y + (-0.5));
        float _707 = _704 * (_661.z + (-0.5));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = _675 * 0.5;
        float _712 = _685 * 0.5;
        float _713 = _695 * 0.5;
        float _714 = dot(vec3(_711, _712, _713), vec3(_711, _712, _713));
        float _719 = (_714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_714);
        float _728 = (dot(vec3(_278, _279, _280), vec3(_719 * _711, _719 * _712, _719 * _713)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _738 = sqrt(((_712 * _712) + (_711 * _711)) + (_713 * _713)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _740 = _739 * 2.0;
        float _744 = (1.0 - _739) / (_739 + 1.0);
        float _3670 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _754 = ((((1.0 - _745) * (_740 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_740 + 1.0))) + _745) * _708;
        float _755 = _676 * 0.5;
        float _756 = _686 * 0.5;
        float _757 = _696 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _771 = (dot(vec3(_278, _279, _280), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _780 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3703 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_782 + 1.0))) + _787) * _709;
        float _797 = _677 * 0.5;
        float _798 = _687 * 0.5;
        float _799 = _697 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_278, _279, _280), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3736 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_824 + 1.0))) + _829) * _710;
        _846 = _677;
        _848 = _676;
        _849 = _675;
        _850 = _687;
        _851 = _686;
        _852 = _685;
        _853 = _697;
        _854 = _696;
        _855 = _695;
        _856 = _710;
        _857 = _709;
        _858 = _708;
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
    }
    else
    {
        _846 = _847;
        _848 = _847;
        _849 = _847;
        _850 = _847;
        _851 = _847;
        _852 = _847;
        _853 = _847;
        _854 = _847;
        _855 = _847;
        _856 = _847;
        _857 = _847;
        _858 = _847;
        _859 = 0.0;
        _860 = 0.0;
        _861 = 0.0;
    }
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _890 = fma(_515, cbModelParam._m0[30u].z, fma(_511, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _507));
        float _894 = fma(_515, cbModelParam._m0[31u].z, fma(_511, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _507));
        float _898 = fma(_515, cbModelParam._m0[32u].z, fma(_511, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _507));
        float _921 = _507 + _278;
        float _922 = _511 + _279;
        float _923 = _515 + _280;
        float _933 = fma(_923, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921)) - _890;
        float _934 = fma(_923, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921)) - _894;
        float _935 = fma(_923, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921)) - _898;
        float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
        float _952 = ((_939 * _933) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_890 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_939 * _934) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_894 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_939 * _935) / cbModelParam._m0[35u].z) + ((((((_898 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        float _989 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_956.x + (-0.5));
        float _991 = _989 * (_956.y + (-0.5));
        float _992 = _989 * (_956.z + (-0.5));
        float _999 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_963.x + (-0.5));
        float _1001 = _999 * (_963.y + (-0.5));
        float _1002 = _999 * (_963.z + (-0.5));
        float _1009 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_970.x + (-0.5));
        float _1011 = _1009 * (_970.y + (-0.5));
        float _1012 = _1009 * (_970.z + (-0.5));
        float _1019 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_977.x + (-0.5));
        float _1021 = _1019 * (_977.y + (-0.5));
        float _1022 = _1019 * (_977.z + (-0.5));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = _990 * 0.5;
        float _1027 = _1000 * 0.5;
        float _1028 = _1010 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_278, _279, _280), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3799 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1053 + 1.0))) + _1058) * _1023;
        float _1068 = _991 * 0.5;
        float _1069 = _1001 * 0.5;
        float _1070 = _1011 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_278, _279, _280), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3832 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1095 + 1.0))) + _1100) * _1024;
        float _1110 = _992 * 0.5;
        float _1111 = _1002 * 0.5;
        float _1112 = _1012 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_278, _279, _280), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3865 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1137 + 1.0))) + _1142) * _1025;
        _1159 = _992;
        _1160 = _991;
        _1161 = _990;
        _1162 = _1002;
        _1163 = _1001;
        _1164 = _1000;
        _1165 = _1012;
        _1166 = _1011;
        _1167 = _1010;
        _1168 = _1025;
        _1169 = _1024;
        _1170 = _1023;
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
    }
    else
    {
        _1159 = _847;
        _1160 = _847;
        _1161 = _847;
        _1162 = _847;
        _1163 = _847;
        _1164 = _847;
        _1165 = _847;
        _1166 = _847;
        _1167 = _847;
        _1168 = _847;
        _1169 = _847;
        _1170 = _847;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _859)) + _859;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _860)) + _860;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _861)) + _861;
    float _1206 = fma(_1185, cbSceneParam._m0[89u].z, fma(_1184, cbSceneParam._m0[89u].y, _1183 * cbSceneParam._m0[89u].x));
    float _1209 = fma(_1185, cbSceneParam._m0[90u].z, fma(_1184, cbSceneParam._m0[90u].y, _1183 * cbSceneParam._m0[90u].x));
    float _1212 = fma(_1185, cbSceneParam._m0[91u].z, fma(_1184, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1183));
    float _1227 = _454 * 0.5;
    float _1228 = _455 * 0.5;
    float _1229 = _456 * 0.5;
    float _1230 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1233 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1236 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1270;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1243 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_846, _850, _853, _856));
        float _1247 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_848, _851, _854, _857));
        float _1251 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_849, _852, _855, _858));
        float _1258 = dot(vec4(cbModelParam._m0[39u]), vec4(_1227, _1228, _1229, 1.0));
        _1270 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1270 = 1.0;
    }
    float _1281;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1272 = dot(vec4(cbModelParam._m0[40u]), vec4(_1227, _1228, _1229, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1272) ? 0.0 : (isnan(0.0) ? _1272 : max(0.0, _1272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1285 = (_1281 * cbModelParam._m0[1u].x) + (_1270 * (1.0 - cbModelParam._m0[1u].x));
    float _1295 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _281);
    float _1296 = isnan(_1295) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1295 : min(cbModelParam._m0[25u].z, _1295));
    float _1378;
    float _1380;
    float _1382;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1345 = fma(_515, cbModelParam._m0[13u].z, fma(_511, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _507)) + cbModelParam._m0[13u].w;
        float _1349 = fma(_515, cbModelParam._m0[14u].z, fma(_511, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _507)) + cbModelParam._m0[14u].w;
        float _1353 = fma(_515, cbModelParam._m0[15u].z, fma(_511, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _507)) + cbModelParam._m0[15u].w;
        float _1356 = fma(_456, cbModelParam._m0[13u].z, fma(_455, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _454));
        float _1359 = fma(_456, cbModelParam._m0[14u].z, fma(_455, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _454));
        float _1362 = fma(_456, cbModelParam._m0[15u].z, fma(_455, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _454));
        float _1390;
        if (_1356 > 0.0)
        {
            _1390 = abs((1.0 - _1345) / _1356);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1345 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1390 = frontier_phi_17_15_ladder;
        }
        float _1564;
        if (_1359 > 0.0)
        {
            _1564 = abs((1.0 - _1349) / _1359);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1349 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1564 = frontier_phi_26_22_ladder;
        }
        float _1860;
        if (_1362 > 0.0)
        {
            _1860 = abs((1.0 - _1353) / _1362);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1353 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1860 = frontier_phi_38_33_ladder;
        }
        float _1862 = isnan(_1564) ? _1390 : (isnan(_1390) ? _1564 : min(_1390, _1564));
        float _1863 = isnan(_1860) ? _1862 : (isnan(_1862) ? _1860 : min(_1862, _1860));
        float _1867 = (_1863 * _1356) + _1345;
        float _1868 = (_1863 * _1359) + _1349;
        float _1869 = (_1863 * _1362) + _1353;
        float _1870 = _1863 * 9.9999997473787516355514526367188e-05;
        float _1872 = (-1.0) - _1870;
        float _1874 = _1870 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1869 > _1874) || ((_1869 < _1872) || ((_1868 > _1874) || ((_1868 < _1872) || ((_1867 < _1872) || (_1867 > _1874))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2014 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1869, cbModelParam._m0[9u].z, fma(_1868, cbModelParam._m0[9u].y, _1867 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1869, cbModelParam._m0[10u].z, fma(_1868, cbModelParam._m0[10u].y, _1867 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1869, cbModelParam._m0[11u].z, fma(_1868, cbModelParam._m0[11u].y, _1867 * cbModelParam._m0[11u].x))), _1296);
            frontier_phi_16_38_ladder = _2014.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2014.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2014.x * cbModelParam._m0[1u].y;
        }
        _1378 = frontier_phi_16_38_ladder_2;
        _1380 = frontier_phi_16_38_ladder_1;
        _1382 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1366 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_454, _455, _456), _1296);
        _1378 = _1366.x * cbModelParam._m0[1u].y;
        _1380 = _1366.y * cbModelParam._m0[1u].y;
        _1382 = _1366.z * cbModelParam._m0[1u].y;
    }
    float _1386 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _281);
    float _1387 = isnan(_1386) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1386 : min(cbModelParam._m0[25u].w, _1386));
    float _1480;
    float _1482;
    float _1484;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1444 = fma(_515, cbModelParam._m0[21u].z, fma(_511, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _507)) + cbModelParam._m0[21u].w;
        float _1448 = fma(_515, cbModelParam._m0[22u].z, fma(_511, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _507)) + cbModelParam._m0[22u].w;
        float _1452 = fma(_515, cbModelParam._m0[23u].z, fma(_511, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _507)) + cbModelParam._m0[23u].w;
        float _1455 = fma(_456, cbModelParam._m0[21u].z, fma(_455, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _454));
        float _1458 = fma(_456, cbModelParam._m0[22u].z, fma(_455, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _454));
        float _1461 = fma(_456, cbModelParam._m0[23u].z, fma(_455, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _454));
        float _1569;
        if (_1455 > 0.0)
        {
            _1569 = abs((1.0 - _1444) / _1455);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1444 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1569 = frontier_phi_28_24_ladder;
        }
        float _1887;
        if (_1458 > 0.0)
        {
            _1887 = abs((1.0 - _1448) / _1458);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1448 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1887 = frontier_phi_40_35_ladder;
        }
        float _2214;
        if (_1461 > 0.0)
        {
            _2214 = abs((1.0 - _1452) / _1461);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1452 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2214 = frontier_phi_50_47_ladder;
        }
        float _2216 = isnan(_1887) ? _1569 : (isnan(_1569) ? _1887 : min(_1569, _1887));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1455) + _1444;
        float _2222 = (_2217 * _1458) + _1448;
        float _2223 = (_2217 * _1461) + _1452;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2224;
        float _2227 = _2224 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2223 > _2227) || ((_2223 < _2225) || ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 < _2225) || (_2221 > _2227))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2223, cbModelParam._m0[17u].z, fma(_2222, cbModelParam._m0[17u].y, _2221 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2223, cbModelParam._m0[18u].z, fma(_2222, cbModelParam._m0[18u].y, _2221 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2223, cbModelParam._m0[19u].z, fma(_2222, cbModelParam._m0[19u].y, _2221 * cbModelParam._m0[19u].x))), _1387);
            frontier_phi_25_50_ladder = _2341.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2341.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2341.x * cbModelParam._m0[1u].z;
        }
        _1480 = frontier_phi_25_50_ladder_2;
        _1482 = frontier_phi_25_50_ladder_1;
        _1484 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_454, _455, _456), _1387);
        _1480 = _1464.x * cbModelParam._m0[1u].z;
        _1482 = _1464.y * cbModelParam._m0[1u].z;
        _1484 = _1464.z * cbModelParam._m0[1u].z;
    }
    float _1496 = ((((1.0 - _475) * ((_462 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_475 * _462)) * _446;
    float _1497 = _1496 * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1498 = _1496 * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1499 = _1496 * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1502 = fma(_1499, cbSceneParam._m0[89u].z, fma(_1498, cbSceneParam._m0[89u].y, _1497 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1499, cbSceneParam._m0[90u].z, fma(_1498, cbSceneParam._m0[90u].y, _1497 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1499, cbSceneParam._m0[91u].z, fma(_1498, cbSceneParam._m0[91u].y, _1497 * cbSceneParam._m0[91u].x));
    float _1543 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1547 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1551 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1555 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1556 = _1543 / _1555;
    float _1557 = _1547 / _1555;
    float _1558 = _1551 / _1555;
    float _1705;
    float _1706;
    float _1707;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1585 = ((uint(_1558 > cbSceneParam._m0[59u].y) + uint(_1558 > cbSceneParam._m0[59u].x)) + uint(_1558 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1586 = _1585 + 43u;
        uint _1594 = _1585 + 44u;
        uint _1602 = _1585 + 45u;
        uint _1610 = _1585 + 46u;
        float _1621 = fma(_1555, cbSceneParam._m0[_1586].w, fma(_1551, cbSceneParam._m0[_1586].z, fma(_1547, cbSceneParam._m0[_1586].y, _1543 * cbSceneParam._m0[_1586].x)));
        float _1625 = fma(_1555, cbSceneParam._m0[_1594].w, fma(_1551, cbSceneParam._m0[_1594].z, fma(_1547, cbSceneParam._m0[_1594].y, _1543 * cbSceneParam._m0[_1594].x)));
        float _1633 = fma(_1555, cbSceneParam._m0[_1610].w, fma(_1551, cbSceneParam._m0[_1610].z, fma(_1547, cbSceneParam._m0[_1610].y, _1543 * cbSceneParam._m0[_1610].x)));
        float _1638 = cbSceneParam._m0[33u].z * _1633;
        float _1640 = cbSceneParam._m0[33u].w * _1633;
        float _1643 = fma(_1555, cbSceneParam._m0[_1602].w, fma(_1551, cbSceneParam._m0[_1602].z, fma(_1547, cbSceneParam._m0[_1602].y, _1543 * cbSceneParam._m0[_1602].x))) / _1633;
        float _1691 = (cbSceneParam._m0[33u].x - sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558))) * cbSceneParam._m0[33u].y;
        float _3991 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1698 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1638 + _1621) / _1633, (_1640 + _1625) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1640 + _1621) / _1633, (_1625 - _1638) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1621 - _1638) / _1633, (_1625 - _1640) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1621 - _1640) / _1633, (_1638 + _1625) / _1633), _1643), 0.0)).x), vec4(0.25)));
        _1705 = 1.0 - (_1698 * cbSceneParam._m0[34u].x);
        _1706 = 1.0 - (_1698 * cbSceneParam._m0[34u].y);
        _1707 = 1.0 - (_1698 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1705 = 1.0;
        _1706 = 1.0;
        _1707 = 1.0;
    }
    float _1771;
    float _1773;
    float _1775;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1759 = fma(_1555, cbSceneParam._m0[63u].w, fma(_1551, cbSceneParam._m0[63u].z, fma(_1547, cbSceneParam._m0[63u].y, _1543 * cbSceneParam._m0[63u].x)));
        float _1760 = fma(_1555, cbSceneParam._m0[60u].w, fma(_1551, cbSceneParam._m0[60u].z, fma(_1547, cbSceneParam._m0[60u].y, _1543 * cbSceneParam._m0[60u].x))) / _1759;
        float _1761 = fma(_1555, cbSceneParam._m0[61u].w, fma(_1551, cbSceneParam._m0[61u].z, fma(_1547, cbSceneParam._m0[61u].y, _1543 * cbSceneParam._m0[61u].x))) / _1759;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1760 >= cbSceneParam._m0[64u].x) && (_1761 >= cbSceneParam._m0[64u].y)) && (_1760 <= cbSceneParam._m0[64u].z)) && (_1761 <= cbSceneParam._m0[64u].w))
        {
            float _1900 = fma(_1555, cbSceneParam._m0[62u].w, fma(_1551, cbSceneParam._m0[62u].z, fma(_1547, cbSceneParam._m0[62u].y, _1543 * cbSceneParam._m0[62u].x))) / _1759;
            float _1904 = isnan(cbSceneParam._m0[41u].w) ? _1900 : (isnan(_1900) ? cbSceneParam._m0[41u].w : max(_1900, cbSceneParam._m0[41u].w));
            float _1947 = (cbSceneParam._m0[33u].x - sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558))) * cbSceneParam._m0[33u].y;
            float _4007 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
            float _1954 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1760, cbSceneParam._m0[33u].w + _1761), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1760, _1761 - cbSceneParam._m0[33u].z), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1760 - cbSceneParam._m0[33u].z, _1761 - cbSceneParam._m0[33u].w), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1760 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1761), _1904), 0.0)).x), vec4(0.25)));
            float _1958 = 1.0 - (_1954 * cbSceneParam._m0[34u].x);
            float _1959 = 1.0 - (_1954 * cbSceneParam._m0[34u].y);
            float _1960 = 1.0 - (_1954 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1960) ? _1707 : (isnan(_1707) ? _1960 : min(_1707, _1960));
            frontier_phi_37_36_ladder_1 = isnan(_1959) ? _1706 : (isnan(_1706) ? _1959 : min(_1706, _1959));
            frontier_phi_37_36_ladder_2 = isnan(_1958) ? _1705 : (isnan(_1705) ? _1958 : min(_1705, _1958));
        }
        else
        {
            frontier_phi_37_36_ladder = _1707;
            frontier_phi_37_36_ladder_1 = _1706;
            frontier_phi_37_36_ladder_2 = _1705;
        }
        _1771 = frontier_phi_37_36_ladder_2;
        _1773 = frontier_phi_37_36_ladder_1;
        _1775 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1771 = _1705;
        _1773 = _1706;
        _1775 = _1707;
    }
    uvec4 _1780 = floatBitsToUint(cbInstanceData._m0[_420 + 5u]);
    uint _1782 = _1780.x * 14u;
    uint _1783 = _1782 + 13u;
    float _1790 = _446 + (-1.0);
    float _1795 = (cbLight._m0[_1783].x * _1790) + 1.0;
    float _1796 = (cbLight._m0[_1783].y * _1790) + 1.0;
    float _1797 = (cbLight._m0[_1783].z * _1790) + 1.0;
    float _1798 = (cbLight._m0[_1783].w * _1790) + 1.0;
    uint _1799 = _1782 + 5u;
    float _1805 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1809 = _1782 + 4u;
    float _1819 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1823 = _1782 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_278, _279, _280));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_278, _279, _280));
    float _4043 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _4054 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1799].x * _1805) * _1844) + (((cbLight._m0[_1809].x * _1771) * _1819) * _1842);
    float _1852 = ((_1805 * cbLight._m0[_1799].y) * _1844) + (((cbLight._m0[_1809].y * _1773) * _1819) * _1842);
    float _1853 = ((_1805 * cbLight._m0[_1799].z) * _1844) + (((cbLight._m0[_1809].z * _1775) * _1819) * _1842);
    uvec4 _1857 = floatBitsToUint(cbLight._m0[_1782 + 12u]);
    bool _1859 = _1857.x == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1859)
    {
        _1961 = _1851;
        _1963 = _1852;
        _1965 = _1853;
    }
    else
    {
        uint _1969 = _1782 + 6u;
        float _1985 = (dot(vec3(cbLight._m0[_1782 + 2u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _1986 = _1985 * _1985;
        float _4065 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1988 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _1961 = (((cbLight._m0[_1969].x * 0.3183098733425140380859375) * _1987) * _1988) + _1851;
        _1963 = (((cbLight._m0[_1969].y * 0.3183098733425140380859375) * _1987) * _1988) + _1852;
        _1965 = (((cbLight._m0[_1969].z * 0.3183098733425140380859375) * _1987) * _1988) + _1853;
    }
    bool _1968 = _1857.y == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1968)
    {
        _2023 = _1961;
        _2025 = _1963;
        _2027 = _1965;
    }
    else
    {
        uint _2185 = _1782 + 7u;
        float _2201 = (dot(vec3(cbLight._m0[_1782 + 3u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _2202 = _2201 * _2201;
        float _4081 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2203 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2204 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2023 = (((cbLight._m0[_2185].x * 0.3183098733425140380859375) * _2203) * _2204) + _1961;
        _2025 = (((cbLight._m0[_2185].y * 0.3183098733425140380859375) * _2203) * _2204) + _1963;
        _2027 = (((cbLight._m0[_2185].z * 0.3183098733425140380859375) * _2203) * _2204) + _1965;
    }
    uint _2030 = _1782 + 8u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _281) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1782].x + _359;
    float _2046 = cbLight._m0[_1782].y + _360;
    float _2047 = cbLight._m0[_1782].z + _361;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1782].xyz));
    float _4097 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _2059 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2060 = dot(vec3(_278, _279, _280), vec3(_2052, _2053, _2054));
    float _4119 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_2052, _2053, _2054));
    float _4130 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2044 * _2044;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2083 = (exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2084 = 1.0 - _2044;
    float _2095 = (0.5 / (((_2059 * ((_2058 * _2084) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2084) + _2044) * _2058))) * _2058;
    float _4141 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    uint _2111 = _1782 + 9u;
    float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _281) * 0.949999988079071044921875);
    float _2123 = _2122 * _2122;
    float _2124 = cbLight._m0[_1823].x + _359;
    float _2125 = cbLight._m0[_1823].y + _360;
    float _2126 = cbLight._m0[_1823].z + _361;
    float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
    float _2131 = _2130 * _2124;
    float _2132 = _2130 * _2125;
    float _2133 = _2130 * _2126;
    float _2134 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1823].xyz));
    float _4152 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2138 = dot(vec3(_278, _279, _280), vec3(_2131, _2132, _2133));
    float _4163 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2142 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2131, _2132, _2133));
    float _4174 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2146 = _2123 * _2123;
    float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
    float _2159 = (exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2160 = 1.0 - _2123;
    float _2170 = (0.5 / (((_2059 * ((_2137 * _2160) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2160) + _2123) * _2137))) * _2137;
    float _4185 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2172 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
    float _2182 = (((_2159 * cbLight._m0[_2111].x) * _2172) * _1805) + ((((cbLight._m0[_2030].x * _1771) * _2083) * _2097) * _1819);
    float _2183 = (((_2159 * cbLight._m0[_2111].y) * _2172) * _1805) + ((((cbLight._m0[_2030].y * _1773) * _2083) * _2097) * _1819);
    float _2184 = (((_2159 * cbLight._m0[_2111].z) * _2172) * _1805) + ((((cbLight._m0[_2030].z * _1775) * _2083) * _2097) * _1819);
    float _2240;
    float _2242;
    float _2244;
    if (_1859)
    {
        _2240 = _2182;
        _2242 = _2183;
        _2244 = _2184;
    }
    else
    {
        uint _2246 = _1782 + 2u;
        uint _2250 = _1782 + 10u;
        float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _281) * 0.949999988079071044921875);
        float _2265 = _2264 * _2264;
        float _2266 = cbLight._m0[_2246].x + _359;
        float _2267 = cbLight._m0[_2246].y + _360;
        float _2268 = cbLight._m0[_2246].z + _361;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2273 = _2272 * _2266;
        float _2274 = _2272 * _2267;
        float _2275 = _2272 * _2268;
        float _2276 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_2246].xyz));
        float _4196 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2280 = dot(vec3(_278, _279, _280), vec3(_2273, _2274, _2275));
        float _4207 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2284 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2273, _2274, _2275));
        float _4218 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2288 = _2265 * _2265;
        float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
        float _2301 = (exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2302 = 1.0 - _2265;
        float _2312 = (0.5 / (((_2059 * ((_2279 * _2302) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2302) + _2265) * _2279))) * _2279;
        float _4229 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2314 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
        float _2315 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2240 = (((_2301 * cbLight._m0[_2250].x) * _2314) * _2315) + _2182;
        _2242 = (((_2301 * cbLight._m0[_2250].y) * _2314) * _2315) + _2183;
        _2244 = (((_2301 * cbLight._m0[_2250].z) * _2314) * _2315) + _2184;
    }
    float _2346;
    float _2348;
    float _2350;
    if (_1968)
    {
        _2346 = _2240;
        _2348 = _2242;
        _2350 = _2244;
    }
    else
    {
        uint _2357 = _1782 + 3u;
        uint _2361 = _1782 + 11u;
        float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _281) * 0.949999988079071044921875);
        float _2376 = _2375 * _2375;
        float _2377 = cbLight._m0[_2357].x + _359;
        float _2378 = cbLight._m0[_2357].y + _360;
        float _2379 = cbLight._m0[_2357].z + _361;
        float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
        float _2384 = _2383 * _2377;
        float _2385 = _2383 * _2378;
        float _2386 = _2383 * _2379;
        float _2387 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_2357].xyz));
        float _4245 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2391 = dot(vec3(_278, _279, _280), vec3(_2384, _2385, _2386));
        float _4256 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2395 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2384, _2385, _2386));
        float _4267 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2399 = _2376 * _2376;
        float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
        float _2412 = (exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2413 = 1.0 - _2376;
        float _2423 = (0.5 / (((_2059 * ((_2390 * _2413) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2413) + _2376) * _2390))) * _2390;
        float _4278 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2425 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
        float _2426 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2346 = (((_2412 * cbLight._m0[_2361].x) * _2425) * _2426) + _2240;
        _2348 = (((_2412 * cbLight._m0[_2361].y) * _2425) * _2426) + _2242;
        _2350 = (((_2412 * cbLight._m0[_2361].z) * _2425) * _2426) + _2244;
    }
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    float _2502;
    if (_1780.y == 0u)
    {
        uvec4 _2447 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2448 = _2447.x;
        uint _2459 = uint((float(_2447.y) * floor(float(uint(cbSceneParam._m0[85u].y * _381) / _2448))) + floor(float(uint(cbSceneParam._m0[85u].x * _380) / _2448)));
        float _2469 = (log2(_1558 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2470 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        uint _2473 = uint(isnan(14.0) ? _2470 : (isnan(_2470) ? 14.0 : min(_2470, 14.0)));
        uvec4 _2478 = texelFetch(g_lightClusterGridBuffer, int(((_2473 << 2u) + (_2459 << 6u)) >> 2u));
        uint _2479 = _2478.x;
        uint _2480 = _2447.z;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((((1u << ((_2480 >> 4u) & 15u)) + 4294967295u) & _2479) == 0u) || ((_2480 & 240u) == 0u))
        {
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
        }
        else
        {
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            uint _2718 = 0u;
            uint _2727;
            bool _2728;
            for (;;)
            {
                _2727 = texelFetch(g_lightClassification, int((((_2473 << 5u) + (_2459 << 9u)) + (_2718 << 2u)) >> 2u)).x;
                _2728 = _2727 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2728)
                {
                    frontier_phi_71_pred = _2717;
                    frontier_phi_71_pred_1 = _2716;
                    frontier_phi_71_pred_2 = _2715;
                    frontier_phi_71_pred_3 = _2714;
                    frontier_phi_71_pred_4 = _2713;
                    frontier_phi_71_pred_5 = _2712;
                }
                else
                {
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    uint _2863;
                    _2857 = _2712;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2727;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    for (;;)
                    {
                        uint _2867 = uint(findLSB(_2863)) + (_2718 << 5u);
                        uint _2864 = (_2863 + 4294967295u) & _2863;
                        uint _2869 = _2867 * 48u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2889 = (_2867 * 48u) + 4u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 3u)).x));
                        uint _2908 = (_2867 * 48u) + 8u;
                        vec3 _2919 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x));
                        float _2923 = _2883.x - _1556;
                        float _2924 = _2883.y - _1557;
                        float _2925 = _2883.z - _1558;
                        float _2926 = dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925));
                        float _2929 = inversesqrt(_2926);
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2933 = dot(vec3(_401, _404, _407), vec3(_2930, _2931, _2932));
                        float _2938 = 1.0 - (_2926 * _2883.w);
                        float _4304 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2939 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _2940 = sqrt(_2926) * _2902.w;
                        float _2943 = 1.39999997615814208984375 / (_2940 + 1.39999997615814208984375);
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2933) + _2944;
                        float _2950 = _2940 * _2940;
                        float _2954 = ((isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0))) * _2939) / ((_2950 * 0.699999988079071044921875) + 1.0);
                        float _2958 = (-0.0) - _1556;
                        float _2959 = (-0.0) - _1557;
                        float _2960 = (-0.0) - _1558;
                        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
                        float _2965 = _2964 * _2958;
                        float _2966 = _2964 * _2959;
                        float _2967 = _2964 * _2960;
                        float _2974 = exp2(log2(1.0 / ((_2950 * 3.5) + 5.0)) * 0.25);
                        float _2975 = 1.0 - _462;
                        float _2982 = sqrt(1.0 - ((1.0 - (_2975 * _2975)) * (1.0 - (_2974 * _2974))));
                        float _2983 = _2982 * _2982;
                        float _2984 = _2983 * _2983;
                        float _2985 = _2965 + _2930;
                        float _2986 = _2966 + _2931;
                        float _2987 = _2967 + _2932;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2995 = dot(vec3(_401, _404, _407), vec3(_2965, _2966, _2967));
                        float _4320 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _2999 = dot(vec3(_401, _404, _407), vec3(_2991 * _2985, _2991 * _2986, _2991 * _2987));
                        float _4331 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3002 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3006 = ((_3002 * _3002) * (_2984 + (-1.0))) + 1.0;
                        float _3007 = _2943 * _2983;
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2933) + _3008;
                        float _4342 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3013 = 1.0 - _2983;
                        float _3023 = (0.5 / (((_3012 * ((_2998 * _3013) + _2983)) + 9.9999999392252902907785028219223e-09) + (((_3012 * _3013) + _2983) * _2998))) * _3012;
                        float _4353 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3034 = (((_2984 * 3.1415927410125732421875) * (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) / ((_3006 * _3006) * ((_2950 * 2.1991131305694580078125) + 3.141590118408203125))) * _2939;
                        _2787 = (_2954 * _2902.x) + _2860;
                        _2788 = (_2954 * _2902.y) + _2861;
                        _2789 = (_2954 * _2902.z) + _2862;
                        _2784 = (_3034 * _2919.x) + _2857;
                        _2785 = (_3034 * _2919.y) + _2858;
                        _2786 = (_3034 * _2919.z) + _2859;
                        if (_2864 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2857 = _2784;
                            _2858 = _2785;
                            _2859 = _2786;
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2864;
                        }
                    }
                    frontier_phi_71_pred = _2789;
                    frontier_phi_71_pred_1 = _2788;
                    frontier_phi_71_pred_2 = _2787;
                    frontier_phi_71_pred_3 = _2786;
                    frontier_phi_71_pred_4 = _2785;
                    frontier_phi_71_pred_5 = _2784;
                }
                _2570 = frontier_phi_71_pred;
                _2568 = frontier_phi_71_pred_1;
                _2566 = frontier_phi_71_pred_2;
                _2564 = frontier_phi_71_pred_3;
                _2562 = frontier_phi_71_pred_4;
                _2560 = frontier_phi_71_pred_5;
                uint _2719 = _2718 + 1u;
                if (_2719 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2712 = _2560;
                    _2713 = _2562;
                    _2714 = _2564;
                    _2715 = _2566;
                    _2716 = _2568;
                    _2717 = _2570;
                    _2718 = _2719;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
        }
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.z;
        uint _2576 = (_2574 >> 8u) & 15u;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        if (((4294967295u << _2576) & _2479) == 0u)
        {
            _2680 = _2559;
            _2682 = _2561;
            _2684 = _2563;
            _2686 = _2565;
            _2688 = _2567;
            _2690 = _2569;
        }
        else
        {
            float _2705 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
            float _2706 = _2705 * _1556;
            float _2707 = _2705 * _1557;
            float _2708 = _2705 * _1558;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2576 < ((_2574 >> 12u) & 15u))
            {
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2840 = _2559;
                float _2841 = _2561;
                float _2842 = _2563;
                float _2843 = _2565;
                float _2844 = _2567;
                float _2845 = _2569;
                uint _2846 = _2576;
                uint _2855;
                bool _2856;
                for (;;)
                {
                    _2855 = texelFetch(g_lightClassification, int((((_2473 << 5u) + (_2459 << 9u)) + (_2846 << 2u)) >> 2u)).x;
                    _2856 = _2855 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2856)
                    {
                        frontier_phi_82_pred = _2845;
                        frontier_phi_82_pred_1 = _2844;
                        frontier_phi_82_pred_2 = _2843;
                        frontier_phi_82_pred_3 = _2842;
                        frontier_phi_82_pred_4 = _2841;
                        frontier_phi_82_pred_5 = _2840;
                    }
                    else
                    {
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3061 = _2840;
                        float _3062 = _2841;
                        float _3063 = _2842;
                        float _3064 = _2843;
                        float _3065 = _2844;
                        float _3066 = _2845;
                        uint _3067 = _2855;
                        uint _3068;
                        vec4 _3093;
                        float _3094;
                        vec4 _3109;
                        vec3 _3121;
                        vec4 _3137;
                        vec4 _3153;
                        float _3200;
                        bool _3201;
                        for (;;)
                        {
                            uint _3078 = ((_2846 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3067));
                            _3068 = (_3067 + 4294967295u) & _3067;
                            uint _3080 = _3078 * 40u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            _3094 = _3093.w;
                            uint _3096 = (_3078 * 40u) + 4u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3078 * 40u) + 8u;
                            _3121 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x));
                            uint _3124 = (_3078 * 40u) + 16u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3140 = (_3078 * 40u) + 20u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3156 = (_3078 * 40u) + 24u;
                            vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3175 = (_3078 * 40u) + 28u;
                            vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            _3200 = fma(_1558, _3188.z, fma(_1557, _3188.y, _3188.x * _1556)) + _3188.w;
                            _3201 = !((fma(_1558, _3169.z, fma(_1557, _3169.y, _3169.x * _1556)) + _3169.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3201)
                            {
                                float _3228 = _3093.x - _1556;
                                float _3229 = _3093.y - _1557;
                                float _3230 = _3093.z - _1558;
                                float _3231 = dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230));
                                float _3234 = inversesqrt(_3231);
                                float _3235 = _3234 * _3228;
                                float _3236 = _3234 * _3229;
                                float _3237 = _3234 * _3230;
                                float _3241 = 1.0 - (_3231 / (_3094 * _3094));
                                float _4364 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3242 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3246 = sqrt(_3231) * _3109.w;
                                float _3248 = 1.39999997615814208984375 / (_3246 + 1.39999997615814208984375);
                                float _3249 = _3248 * _3248;
                                float _3252 = ((1.0 - _3249) * dot(vec3(_3235, _3236, _3237), vec3(_401, _404, _407))) + _3249;
                                float _3255 = _3246 * _3246;
                                float _3259 = (fma(_1558, _3137.z, fma(_1557, _3137.y, _3137.x * _1556)) + _3137.w) / _3200;
                                float _3260 = (fma(_1558, _3153.z, fma(_1557, _3153.y, _3153.x * _1556)) + _3153.w) / _3200;
                                float _3264 = 1.0 - dot(vec2(_3259, _3260), vec2(_3259, _3260));
                                float _4380 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3266 = _3265 * (((isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))) * _3242) / ((_3255 * 0.699999988079071044921875) + 1.0));
                                float _3278 = exp2(log2(1.0 / ((_3255 * 3.5) + 5.0)) * 0.25);
                                float _3279 = 1.0 - _462;
                                float _3286 = sqrt(1.0 - ((1.0 - (_3279 * _3279)) * (1.0 - (_3278 * _3278))));
                                float _3287 = _3286 * _3286;
                                float _3288 = _3287 * _3287;
                                float _3289 = _3235 - _2706;
                                float _3290 = _3236 - _2707;
                                float _3291 = _3237 - _2708;
                                float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                                float _3299 = dot(vec3(_401, _404, _407), vec3((-0.0) - _2706, (-0.0) - _2707, (-0.0) - _2708));
                                float _4391 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3302 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3303 = dot(vec3(_401, _404, _407), vec3(_3295 * _3289, _3295 * _3290, _3295 * _3291));
                                float _4402 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3306 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3310 = ((_3306 * _3306) * (_3288 + (-1.0))) + 1.0;
                                float _3311 = _3248 * _3287;
                                float _3312 = _3311 * _3311;
                                float _3318 = ((1.0 - _3312) * dot(vec3(_401, _404, _407), vec3(_3235, _3236, _3237))) + _3312;
                                float _4413 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3320 = 1.0 - _3287;
                                float _3330 = (0.5 / (((_3319 * ((_3302 * _3320) + _3287)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3287) * _3302))) * _3319;
                                float _4424 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3340 = (_3265 * _3242) * (((_3288 * 3.1415927410125732421875) * (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) / ((_3310 * _3310) * ((_3255 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3266 * _3109.z;
                                frontier_phi_88_pred_1 = _3266 * _3109.y;
                                frontier_phi_88_pred_2 = _3266 * _3109.x;
                                frontier_phi_88_pred_3 = _3340 * _3121.z;
                                frontier_phi_88_pred_4 = _3340 * _3121.y;
                                frontier_phi_88_pred_5 = _3340 * _3121.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3349 = frontier_phi_88_pred;
                            _3348 = frontier_phi_88_pred_1;
                            _3347 = frontier_phi_88_pred_2;
                            _3346 = frontier_phi_88_pred_3;
                            _3345 = frontier_phi_88_pred_4;
                            _3344 = frontier_phi_88_pred_5;
                            _3051 = _3347 + _3064;
                            _3052 = _3348 + _3065;
                            _3053 = _3349 + _3066;
                            _3048 = _3344 + _3061;
                            _3049 = _3345 + _3062;
                            _3050 = _3346 + _3063;
                            if (_3068 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3068;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3053;
                        frontier_phi_82_pred_1 = _3052;
                        frontier_phi_82_pred_2 = _3051;
                        frontier_phi_82_pred_3 = _3050;
                        frontier_phi_82_pred_4 = _3049;
                        frontier_phi_82_pred_5 = _3048;
                    }
                    _2691 = frontier_phi_82_pred;
                    _2689 = frontier_phi_82_pred_1;
                    _2687 = frontier_phi_82_pred_2;
                    _2685 = frontier_phi_82_pred_3;
                    _2683 = frontier_phi_82_pred_4;
                    _2681 = frontier_phi_82_pred_5;
                    uint _2847 = _2846 + 1u;
                    if (_2847 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2840 = _2681;
                        _2841 = _2683;
                        _2842 = _2685;
                        _2843 = _2687;
                        _2844 = _2689;
                        _2845 = _2691;
                        _2846 = _2847;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2687;
                frontier_phi_63_64_ladder_1 = _2691;
                frontier_phi_63_64_ladder_2 = _2689;
                frontier_phi_63_64_ladder_3 = _2685;
                frontier_phi_63_64_ladder_4 = _2683;
                frontier_phi_63_64_ladder_5 = _2681;
            }
            else
            {
                frontier_phi_63_64_ladder = _2565;
                frontier_phi_63_64_ladder_1 = _2569;
                frontier_phi_63_64_ladder_2 = _2567;
                frontier_phi_63_64_ladder_3 = _2563;
                frontier_phi_63_64_ladder_4 = _2561;
                frontier_phi_63_64_ladder_5 = _2559;
            }
            _2680 = frontier_phi_63_64_ladder_5;
            _2682 = frontier_phi_63_64_ladder_4;
            _2684 = frontier_phi_63_64_ladder_3;
            _2686 = frontier_phi_63_64_ladder;
            _2688 = frontier_phi_63_64_ladder_2;
            _2690 = frontier_phi_63_64_ladder_1;
        }
        float _2695 = isnan(1.0) ? _446 : (isnan(_446) ? 1.0 : min(_446, 1.0));
        _2492 = (_2695 * _2686) + _2023;
        _2494 = (_2695 * _2688) + _2025;
        _2496 = (_2695 * _2690) + _2027;
        _2498 = ((_2680 * 0.039999999105930328369140625) * _2695) + _2346;
        _2500 = ((_2682 * 0.039999999105930328369140625) * _2695) + _2348;
        _2502 = ((_2684 * 0.039999999105930328369140625) * _2695) + _2350;
    }
    else
    {
        _2492 = _2023;
        _2494 = _2025;
        _2496 = _2027;
        _2498 = _2346;
        _2500 = _2348;
        _2502 = _2350;
    }
    float _4440 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _4451 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4462 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _2519 = ((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2492 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _446))) + ((_2498 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1285)) * cbPerFrame._m0[3u].x);
    float _2520 = ((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2494 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _446))) + ((_2500 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1285)) * cbPerFrame._m0[3u].x);
    float _2521 = ((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2496 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _446))) + ((_2502 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1285)) * cbPerFrame._m0[3u].x);
    uint _2522 = _420 + 6u;
    float _2530 = _380 / cbSceneParam._m0[86u].x;
    float _2531 = _381 / cbSceneParam._m0[86u].y;
    vec4 _2545 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2530, _2531, (log2((isnan(cbSceneParam._m0[77u].w) ? _300 : (isnan(_300) ? cbSceneParam._m0[77u].w : min(_300, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2547 = _2545.x;
    float _2548 = _2545.y;
    float _2549 = _2545.z;
    float _2550 = _2545.w;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    if (_300 > cbSceneParam._m0[78u].w)
    {
        float _2584 = isnan(_300) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _300 : min(cbSceneParam._m0[80u].w, _300));
        float _2585 = _2584 / _300;
        float _2596 = _2585 * _352;
        float _2597 = _353 * _2585;
        float _2598 = (-0.0) - _2597;
        float _2600 = _2585 * _354;
        float _2602 = (cbSceneParam._m0[77u].w * _2598) / _2584;
        float _2603 = _2602 + cbSceneParam._m0[79u].w;
        float _2604 = cbSceneParam._m0[79u].w - _2597;
        float _2610 = sqrt(((_2596 * _2596) + (_2597 * _2597)) + (_2600 * _2600));
        float _2613 = (1.0 - (cbSceneParam._m0[77u].w / _2584)) * _2610;
        float _2618 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2620 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2797;
        if (abs((_2598 - _2602) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2797 = ((((_2603 > 0.0) ? exp2(_2618 * _2603) : (2.0 - exp2(_2620 * _2603))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2613;
        }
        else
        {
            float _2741 = 1.0 / cbSceneParam._m0[80u].x;
            float _2742 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : max(_2603, _2604));
            float _2743 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : min(_2603, _2604));
            float _2752 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : min(_2742, 0.0));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            _2797 = ((abs(_2610 / _2598) * cbSceneParam._m0[80u].y) * ((((_2752 - _2753) * 2.0) - ((exp2(_2618 * (isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0)))) - exp2(_2618 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))))) * _2741)) - ((exp2(_2620 * _2752) - exp2(_2620 * _2753)) * _2741))) + (_2613 * cbSceneParam._m0[80u].z);
        }
        vec4 _2799 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2530, _2531, 1.0), 0.0);
        float _2808 = exp2((_2797 * (-1.44269502162933349609375)) * (1.0 - _2799.w));
        float _2809 = log2(_2808);
        float _2825 = log2(_2550);
        _2622 = (exp2(_2825 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].x)) * _2799.x) / cbSceneParam._m0[78u].x)) + _2547;
        _2624 = (exp2(_2825 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].y)) * _2799.y) / cbSceneParam._m0[78u].y)) + _2548;
        _2626 = (exp2(_2825 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].z)) * _2799.z) / cbSceneParam._m0[78u].z)) + _2549;
        _2628 = _2808 * _2550;
    }
    else
    {
        _2622 = _2547;
        _2624 = _2548;
        _2626 = _2549;
        _2628 = _2550;
    }
    bool _2835;
    vec4 _2638;
    vec4 _2660;
    float _2662;
    float _2666;
    float _2667;
    float _2668;
    float _2669;
    bool _2679;
    for (;;)
    {
        _2638 = cbMatDynParam._m0[0u];
        float _2640 = roundEven(_2638.y);
        bool _2641 = _2640 == 3.0;
        float _2642 = log2(_2628);
        float _2649 = exp2(_2642 * cbSceneParam._m0[78u].x) * _2519;
        float _2650 = exp2(_2642 * cbSceneParam._m0[78u].y) * _2520;
        float _2651 = exp2(_2642 * cbSceneParam._m0[78u].z) * _2521;
        float _2658 = _368 + (-0.5);
        _2660 = cbMtdParam._m0[1u];
        _2662 = _2660.y * _2658;
        float _2665 = (_2640 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2666 = _2665 * (_2641 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2622)));
        _2667 = _2665 * (_2641 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2624)));
        _2668 = _2665 * (_2641 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2626)));
        _2669 = _2658 * 0.999000012874603271484375;
        _2679 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2679)
        {
            if ((cbInstanceData._m0[_420 + 7u].x + _2669) < 0.5)
            {
                _2835 = true;
                break;
            }
        }
        uint _2776 = _422 + uint(_2638.w);
        if ((cbInstanceData._m0[_2776].w < 1.0) && ((cbInstanceData._m0[_2776].w + _2669) < 0.5))
        {
            _2835 = true;
            break;
        }
        if ((_2662 + _232) < _2660.x)
        {
            _2835 = true;
            break;
        }
        _2835 = false;
        break;
    }
    float _3039;
    if (_2835)
    {
        discard_state = true;
        _3039 = 0.0;
    }
    else
    {
        _3039 = cbInstanceData._m0[_2522].w;
    }
    SV_Target.x = _2666;
    SV_Target.y = _2667;
    SV_Target.z = _2668;
    SV_Target.w = _3039;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2522].w;
    discard_exit();
}


