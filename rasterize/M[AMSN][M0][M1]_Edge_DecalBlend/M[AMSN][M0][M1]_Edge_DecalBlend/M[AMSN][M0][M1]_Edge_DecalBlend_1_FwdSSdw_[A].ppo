#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _845;
float _3239;
float _3240;
float _3241;
float _3242;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.w;
    float _231 = _224.x * cbMtdParam._m0[9u].x;
    float _232 = _224.y * cbMtdParam._m0[9u].y;
    float _233 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _245 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _249 = _245.z;
    float _253 = (_245.x * 2.0) + (-1.0);
    float _255 = (_245.y * 2.0) + (-1.0);
    float _256 = dot(vec2(_253, _255), vec2(_253, _255));
    float _3251 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _262 = sqrt(1.0 - (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))));
    float _265 = fma(_262, _194 * NORMAL.x, fma(_255, _201 * TANGENT.x, (_187 * _180) * _253));
    float _268 = fma(_262, _194 * NORMAL.y, fma(_255, _201 * TANGENT.y, (_187 * _181) * _253));
    float _271 = fma(_262, _194 * NORMAL.z, fma(_255, _201 * TANGENT.z, (_187 * _182) * _253));
    float _275 = inversesqrt(dot(vec3(_265, _268, _271), vec3(_265, _268, _271)));
    float _276 = _275 * _265;
    float _277 = _275 * _268;
    float _278 = _275 * _271;
    float _3262 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _279 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _3273 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3284 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3295 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _298 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _340 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _350 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _340);
    float _351 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _340);
    float _352 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _340);
    float _356 = inversesqrt(dot(vec3(_350, _351, _352), vec3(_350, _351, _352)));
    float _357 = _350 * _356;
    float _358 = _351 * _356;
    float _359 = _352 * _356;
    vec4 _364 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _366 = _364.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _524 = sqrt(((_350 * _350) + (_351 * _351)) + (_352 * _352));
        float _530 = (cbMatDynParam._m0[5u].x * _524) + cbMatDynParam._m0[5u].y;
        float _3306 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
        float _531 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
        float _535 = (cbMatDynParam._m0[5u].z * _524) + cbMatDynParam._m0[5u].w;
        float _3317 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) - _531)) + _531) < ((_366 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _378 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _379 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _399 = fma(_278, cbSceneParam._m0[5u].z, fma(_277, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _276));
    float _402 = fma(_278, cbSceneParam._m0[6u].z, fma(_277, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _276));
    float _405 = fma(_278, cbSceneParam._m0[7u].z, fma(_277, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _276));
    uint _418 = uint(roundEven(NORMAL.w)) * 13u;
    uint _420 = _418 + 9u;
    uint _421 = _420 + uint(cbMatDynParam._m0[0u].w);
    float _427 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0)))) * cbInstanceData._m0[_421].x;
    float _428 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_421].y;
    float _429 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_421].z;
    float _3328 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    vec4 _441 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _378, cbSceneParam._m0[86u].y * _379));
    float _444 = _441.x * TEXCOORD.z;
    float _445 = dot(vec3(_276, _277, _278), vec3(_357, _358, _359));
    float _448 = _445 * 2.0;
    float _452 = (_448 * _276) - _357;
    float _453 = (_448 * _277) - _358;
    float _454 = (_448 * _278) - _359;
    float _458 = abs(dot(vec3(_357, _358, _359), vec3(_276, _277, _278)));
    float _3361 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _460 = sqrt(_279);
    float _473 = exp2((_460 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_460 * 3.0));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _844;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _569 = fma(_513, cbModelParam._m0[26u].z, fma(_509, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _505));
        float _573 = fma(_513, cbModelParam._m0[27u].z, fma(_509, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _505));
        float _577 = fma(_513, cbModelParam._m0[28u].z, fma(_509, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _505));
        float _602 = _505 + _276;
        float _603 = _509 + _277;
        float _604 = _513 + _278;
        float _614 = fma(_604, cbModelParam._m0[26u].z, fma(_603, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _602)) - _569;
        float _615 = fma(_604, cbModelParam._m0[27u].z, fma(_603, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _602)) - _573;
        float _616 = fma(_604, cbModelParam._m0[28u].z, fma(_603, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _602)) - _577;
        float _620 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
        float _633 = ((_620 * _614) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_569 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_620 * _615) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_573 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_620 * _616) / cbModelParam._m0[34u].z) + ((((((_577 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        float _672 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_638.x + (-0.5));
        float _674 = _672 * (_638.y + (-0.5));
        float _675 = _672 * (_638.z + (-0.5));
        float _682 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_645.x + (-0.5));
        float _684 = _682 * (_645.y + (-0.5));
        float _685 = _682 * (_645.z + (-0.5));
        float _692 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_652.x + (-0.5));
        float _694 = _692 * (_652.y + (-0.5));
        float _695 = _692 * (_652.z + (-0.5));
        float _702 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_659.x + (-0.5));
        float _704 = _702 * (_659.y + (-0.5));
        float _705 = _702 * (_659.z + (-0.5));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = _673 * 0.5;
        float _710 = _683 * 0.5;
        float _711 = _693 * 0.5;
        float _712 = dot(vec3(_709, _710, _711), vec3(_709, _710, _711));
        float _717 = (_712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_712);
        float _726 = (dot(vec3(_276, _277, _278), vec3(_717 * _709, _717 * _710, _717 * _711)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _736 = sqrt(((_710 * _710) + (_709 * _709)) + (_711 * _711)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _738 = _737 * 2.0;
        float _742 = (1.0 - _737) / (_737 + 1.0);
        float _3409 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _752 = ((((1.0 - _743) * (_738 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_738 + 1.0))) + _743) * _706;
        float _753 = _674 * 0.5;
        float _754 = _684 * 0.5;
        float _755 = _694 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _769 = (dot(vec3(_276, _277, _278), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3420 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _778 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3431 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3442 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * (_780 + 1.0))) + _785) * _707;
        float _795 = _675 * 0.5;
        float _796 = _685 * 0.5;
        float _797 = _695 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _811 = (dot(vec3(_276, _277, _278), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3453 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _820 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3464 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3475 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * (_822 + 1.0))) + _827) * _708;
        _844 = _675;
        _846 = _674;
        _847 = _673;
        _848 = _685;
        _849 = _684;
        _850 = _683;
        _851 = _695;
        _852 = _694;
        _853 = _693;
        _854 = _708;
        _855 = _707;
        _856 = _706;
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
    }
    else
    {
        _844 = _845;
        _846 = _845;
        _847 = _845;
        _848 = _845;
        _849 = _845;
        _850 = _845;
        _851 = _845;
        _852 = _845;
        _853 = _845;
        _854 = _845;
        _855 = _845;
        _856 = _845;
        _857 = 0.0;
        _858 = 0.0;
        _859 = 0.0;
    }
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _888 = fma(_513, cbModelParam._m0[30u].z, fma(_509, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _505));
        float _892 = fma(_513, cbModelParam._m0[31u].z, fma(_509, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _505));
        float _896 = fma(_513, cbModelParam._m0[32u].z, fma(_509, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _505));
        float _919 = _505 + _276;
        float _920 = _509 + _277;
        float _921 = _513 + _278;
        float _931 = fma(_921, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919)) - _888;
        float _932 = fma(_921, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919)) - _892;
        float _933 = fma(_921, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919)) - _896;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_888 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_892 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[35u].z) + ((((((_896 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _987 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_954.x + (-0.5));
        float _989 = _987 * (_954.y + (-0.5));
        float _990 = _987 * (_954.z + (-0.5));
        float _997 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_961.x + (-0.5));
        float _999 = _997 * (_961.y + (-0.5));
        float _1000 = _997 * (_961.z + (-0.5));
        float _1007 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_968.x + (-0.5));
        float _1009 = _1007 * (_968.y + (-0.5));
        float _1010 = _1007 * (_968.z + (-0.5));
        float _1017 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_975.x + (-0.5));
        float _1019 = _1017 * (_975.y + (-0.5));
        float _1020 = _1017 * (_975.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_276, _277, _278), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3538 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_1051 + 1.0))) + _1056) * _1021;
        float _1066 = _989 * 0.5;
        float _1067 = _999 * 0.5;
        float _1068 = _1009 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_276, _277, _278), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3571 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_1093 + 1.0))) + _1098) * _1022;
        float _1108 = _990 * 0.5;
        float _1109 = _1000 * 0.5;
        float _1110 = _1010 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_276, _277, _278), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3604 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_1135 + 1.0))) + _1140) * _1023;
        _1157 = _990;
        _1158 = _989;
        _1159 = _988;
        _1160 = _1000;
        _1161 = _999;
        _1162 = _998;
        _1163 = _1010;
        _1164 = _1009;
        _1165 = _1008;
        _1166 = _1023;
        _1167 = _1022;
        _1168 = _1021;
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _845;
        _1158 = _845;
        _1159 = _845;
        _1160 = _845;
        _1161 = _845;
        _1162 = _845;
        _1163 = _845;
        _1164 = _845;
        _1165 = _845;
        _1166 = _845;
        _1167 = _845;
        _1168 = _845;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _857)) + _857;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _858)) + _858;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _859)) + _859;
    float _1204 = fma(_1183, cbSceneParam._m0[89u].z, fma(_1182, cbSceneParam._m0[89u].y, _1181 * cbSceneParam._m0[89u].x));
    float _1207 = fma(_1183, cbSceneParam._m0[90u].z, fma(_1182, cbSceneParam._m0[90u].y, _1181 * cbSceneParam._m0[90u].x));
    float _1210 = fma(_1183, cbSceneParam._m0[91u].z, fma(_1182, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1181));
    float _1225 = _452 * 0.5;
    float _1226 = _453 * 0.5;
    float _1227 = _454 * 0.5;
    float _1228 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1231 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1234 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1268;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1241 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_844, _848, _851, _854));
        float _1245 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_846, _849, _852, _855));
        float _1249 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_847, _850, _853, _856));
        float _1256 = dot(vec4(cbModelParam._m0[39u]), vec4(_1225, _1226, _1227, 1.0));
        _1268 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1268 = 1.0;
    }
    float _1279;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1270 = dot(vec4(cbModelParam._m0[40u]), vec4(_1225, _1226, _1227, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1283 = (_1279 * cbModelParam._m0[1u].x) + (_1268 * (1.0 - cbModelParam._m0[1u].x));
    float _1293 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _279);
    float _1294 = isnan(_1293) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1293 : min(cbModelParam._m0[25u].z, _1293));
    float _1376;
    float _1378;
    float _1380;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1343 = fma(_513, cbModelParam._m0[13u].z, fma(_509, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _505)) + cbModelParam._m0[13u].w;
        float _1347 = fma(_513, cbModelParam._m0[14u].z, fma(_509, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _505)) + cbModelParam._m0[14u].w;
        float _1351 = fma(_513, cbModelParam._m0[15u].z, fma(_509, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _505)) + cbModelParam._m0[15u].w;
        float _1354 = fma(_454, cbModelParam._m0[13u].z, fma(_453, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _452));
        float _1357 = fma(_454, cbModelParam._m0[14u].z, fma(_453, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _452));
        float _1360 = fma(_454, cbModelParam._m0[15u].z, fma(_453, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _452));
        float _1388;
        if (_1354 > 0.0)
        {
            _1388 = abs((1.0 - _1343) / _1354);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1343 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1388 = frontier_phi_17_15_ladder;
        }
        float _1615;
        if (_1357 > 0.0)
        {
            _1615 = abs((1.0 - _1347) / _1357);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1347 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1615 = frontier_phi_26_22_ladder;
        }
        float _1861;
        if (_1360 > 0.0)
        {
            _1861 = abs((1.0 - _1351) / _1360);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1351 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1861 = frontier_phi_38_33_ladder;
        }
        float _1863 = isnan(_1615) ? _1388 : (isnan(_1388) ? _1615 : min(_1388, _1615));
        float _1864 = isnan(_1861) ? _1863 : (isnan(_1863) ? _1861 : min(_1863, _1861));
        float _1868 = (_1864 * _1354) + _1343;
        float _1869 = (_1864 * _1357) + _1347;
        float _1870 = (_1864 * _1360) + _1351;
        float _1871 = _1864 * 9.9999997473787516355514526367188e-05;
        float _1873 = (-1.0) - _1871;
        float _1875 = _1871 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1870 > _1875) || ((_1870 < _1873) || ((_1869 > _1875) || ((_1869 < _1873) || ((_1868 < _1873) || (_1868 > _1875))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1994 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1870, cbModelParam._m0[9u].z, fma(_1869, cbModelParam._m0[9u].y, _1868 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1870, cbModelParam._m0[10u].z, fma(_1869, cbModelParam._m0[10u].y, _1868 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1870, cbModelParam._m0[11u].z, fma(_1869, cbModelParam._m0[11u].y, _1868 * cbModelParam._m0[11u].x))), _1294);
            frontier_phi_16_38_ladder = _1994.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1994.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1994.x * cbModelParam._m0[1u].y;
        }
        _1376 = frontier_phi_16_38_ladder_2;
        _1378 = frontier_phi_16_38_ladder_1;
        _1380 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_452, _453, _454), _1294);
        _1376 = _1364.x * cbModelParam._m0[1u].y;
        _1378 = _1364.y * cbModelParam._m0[1u].y;
        _1380 = _1364.z * cbModelParam._m0[1u].y;
    }
    float _1384 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _279);
    float _1385 = isnan(_1384) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1384 : min(cbModelParam._m0[25u].w, _1384));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1442 = fma(_513, cbModelParam._m0[21u].z, fma(_509, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _505)) + cbModelParam._m0[21u].w;
        float _1446 = fma(_513, cbModelParam._m0[22u].z, fma(_509, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _505)) + cbModelParam._m0[22u].w;
        float _1450 = fma(_513, cbModelParam._m0[23u].z, fma(_509, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _505)) + cbModelParam._m0[23u].w;
        float _1453 = fma(_454, cbModelParam._m0[21u].z, fma(_453, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _452));
        float _1456 = fma(_454, cbModelParam._m0[22u].z, fma(_453, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _452));
        float _1459 = fma(_454, cbModelParam._m0[23u].z, fma(_453, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _452));
        float _1620;
        if (_1453 > 0.0)
        {
            _1620 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1620 = frontier_phi_28_24_ladder;
        }
        float _1888;
        if (_1456 > 0.0)
        {
            _1888 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1888 = frontier_phi_40_35_ladder;
        }
        float _2093;
        if (_1459 > 0.0)
        {
            _2093 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2093 = frontier_phi_49_46_ladder;
        }
        float _2095 = isnan(_1888) ? _1620 : (isnan(_1620) ? _1888 : min(_1620, _1888));
        float _2096 = isnan(_2093) ? _2095 : (isnan(_2095) ? _2093 : min(_2095, _2093));
        float _2100 = (_2096 * _1453) + _1442;
        float _2101 = (_2096 * _1456) + _1446;
        float _2102 = (_2096 * _1459) + _1450;
        float _2103 = _2096 * 9.9999997473787516355514526367188e-05;
        float _2104 = (-1.0) - _2103;
        float _2106 = _2103 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2102 > _2106) || ((_2102 < _2104) || ((_2101 > _2106) || ((_2101 < _2104) || ((_2100 < _2104) || (_2100 > _2106))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2301 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2102, cbModelParam._m0[17u].z, fma(_2101, cbModelParam._m0[17u].y, _2100 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2102, cbModelParam._m0[18u].z, fma(_2101, cbModelParam._m0[18u].y, _2100 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2102, cbModelParam._m0[19u].z, fma(_2101, cbModelParam._m0[19u].y, _2100 * cbModelParam._m0[19u].x))), _1385);
            frontier_phi_25_49_ladder = _2301.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2301.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2301.x * cbModelParam._m0[1u].z;
        }
        _1478 = frontier_phi_25_49_ladder_2;
        _1480 = frontier_phi_25_49_ladder_1;
        _1482 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1462 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_452, _453, _454), _1385);
        _1478 = _1462.x * cbModelParam._m0[1u].z;
        _1480 = _1462.y * cbModelParam._m0[1u].z;
        _1482 = _1462.z * cbModelParam._m0[1u].z;
    }
    float _1494 = ((((1.0 - _473) * ((_460 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_473 * _460)) * _444;
    float _1495 = _1494 * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1496 = _1494 * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1497 = _1494 * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1500 = fma(_1497, cbSceneParam._m0[89u].z, fma(_1496, cbSceneParam._m0[89u].y, _1495 * cbSceneParam._m0[89u].x));
    float _1503 = fma(_1497, cbSceneParam._m0[90u].z, fma(_1496, cbSceneParam._m0[90u].y, _1495 * cbSceneParam._m0[90u].x));
    float _1506 = fma(_1497, cbSceneParam._m0[91u].z, fma(_1496, cbSceneParam._m0[91u].y, _1495 * cbSceneParam._m0[91u].x));
    vec4 _1514 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_378, _379));
    float _1516 = _1514.w;
    float _1528 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1516);
    float _1529 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1516);
    float _1530 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1516);
    uvec4 _1534 = floatBitsToUint(cbInstanceData._m0[_418 + 5u]);
    uint _1536 = _1534.x * 14u;
    uint _1537 = _1536 + 13u;
    float _1544 = _444 + (-1.0);
    float _1549 = (cbLight._m0[_1537].x * _1544) + 1.0;
    float _1550 = (cbLight._m0[_1537].y * _1544) + 1.0;
    float _1551 = (cbLight._m0[_1537].z * _1544) + 1.0;
    float _1552 = (cbLight._m0[_1537].w * _1544) + 1.0;
    uint _1553 = _1536 + 5u;
    float _1559 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1563 = _1536 + 4u;
    float _1573 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
    uint _1577 = _1536 | 1u;
    float _1588 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_276, _277, _278));
    float _1591 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_276, _277, _278));
    float _3740 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _3751 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1596 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.3183098733425140380859375;
    float _1598 = (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * 0.3183098733425140380859375;
    float _1605 = ((cbLight._m0[_1553].x * _1559) * _1598) + (((cbLight._m0[_1563].x * _1528) * _1573) * _1596);
    float _1606 = ((_1559 * cbLight._m0[_1553].y) * _1598) + (((cbLight._m0[_1563].y * _1529) * _1573) * _1596);
    float _1607 = ((_1559 * cbLight._m0[_1553].z) * _1598) + (((cbLight._m0[_1563].z * _1530) * _1573) * _1596);
    uvec4 _1612 = floatBitsToUint(cbLight._m0[_1536 + 12u]);
    bool _1614 = _1612.x == 0u;
    float _1625;
    float _1627;
    float _1629;
    if (_1614)
    {
        _1625 = _1605;
        _1627 = _1606;
        _1629 = _1607;
    }
    else
    {
        uint _1633 = _1536 + 6u;
        float _1649 = (dot(vec3(cbLight._m0[_1536 + 2u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1650 = _1649 * _1649;
        float _3762 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1652 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1625 = (((cbLight._m0[_1633].x * 0.3183098733425140380859375) * _1651) * _1652) + _1605;
        _1627 = (((cbLight._m0[_1633].y * 0.3183098733425140380859375) * _1651) * _1652) + _1606;
        _1629 = (((cbLight._m0[_1633].z * 0.3183098733425140380859375) * _1651) * _1652) + _1607;
    }
    bool _1632 = _1612.y == 0u;
    float _1670;
    float _1672;
    float _1674;
    if (_1632)
    {
        _1670 = _1625;
        _1672 = _1627;
        _1674 = _1629;
    }
    else
    {
        uint _1832 = _1536 + 7u;
        float _1848 = (dot(vec3(cbLight._m0[_1536 + 3u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1849 = _1848 * _1848;
        float _3778 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1851 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1670 = (((cbLight._m0[_1832].x * 0.3183098733425140380859375) * _1850) * _1851) + _1625;
        _1672 = (((cbLight._m0[_1832].y * 0.3183098733425140380859375) * _1850) * _1851) + _1627;
        _1674 = (((cbLight._m0[_1832].z * 0.3183098733425140380859375) * _1850) * _1851) + _1629;
    }
    uint _1677 = _1536 + 8u;
    float _1690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1536].w)) * _279) * 0.949999988079071044921875);
    float _1691 = _1690 * _1690;
    float _1692 = cbLight._m0[_1536].x + _357;
    float _1693 = cbLight._m0[_1536].y + _358;
    float _1694 = cbLight._m0[_1536].z + _359;
    float _1698 = inversesqrt(dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694)));
    float _1699 = _1698 * _1692;
    float _1700 = _1698 * _1693;
    float _1701 = _1698 * _1694;
    float _1702 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1536].xyz));
    float _3794 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1705 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _1706 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _1707 = dot(vec3(_276, _277, _278), vec3(_1699, _1700, _1701));
    float _3816 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1710 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _1711 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_1699, _1700, _1701));
    float _3827 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1715 = _1691 * _1691;
    float _1719 = ((_1710 * _1710) * (_1715 + (-1.0))) + 1.0;
    float _1730 = (exp2(log2(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1731 = 1.0 - _1691;
    float _1742 = (0.5 / (((_1706 * ((_1705 * _1731) + _1691)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _1731) + _1691) * _1705))) * _1705;
    float _3838 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1744 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1715 / ((_1719 * _1719) * 3.141590118408203125));
    uint _1758 = _1536 + 9u;
    float _1769 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1577].w)) * _279) * 0.949999988079071044921875);
    float _1770 = _1769 * _1769;
    float _1771 = cbLight._m0[_1577].x + _357;
    float _1772 = cbLight._m0[_1577].y + _358;
    float _1773 = cbLight._m0[_1577].z + _359;
    float _1777 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
    float _1778 = _1777 * _1771;
    float _1779 = _1777 * _1772;
    float _1780 = _1777 * _1773;
    float _1781 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1577].xyz));
    float _3849 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1784 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1785 = dot(vec3(_276, _277, _278), vec3(_1778, _1779, _1780));
    float _3860 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _1789 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_1778, _1779, _1780));
    float _3871 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1793 = _1770 * _1770;
    float _1797 = ((_1788 * _1788) * (_1793 + (-1.0))) + 1.0;
    float _1806 = (exp2(log2(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1807 = 1.0 - _1770;
    float _1817 = (0.5 / (((_1706 * ((_1784 * _1807) + _1770)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _1807) + _1770) * _1784))) * _1784;
    float _3882 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1819 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1793 / ((_1797 * _1797) * 3.141590118408203125));
    float _1829 = (((_1806 * cbLight._m0[_1758].x) * _1819) * _1559) + ((((cbLight._m0[_1677].x * _1528) * _1730) * _1744) * _1573);
    float _1830 = (((_1806 * cbLight._m0[_1758].y) * _1819) * _1559) + ((((cbLight._m0[_1677].y * _1529) * _1730) * _1744) * _1573);
    float _1831 = (((_1806 * cbLight._m0[_1758].z) * _1819) * _1559) + ((((cbLight._m0[_1677].z * _1530) * _1730) * _1744) * _1573);
    float _1893;
    float _1895;
    float _1897;
    if (_1614)
    {
        _1893 = _1829;
        _1895 = _1830;
        _1897 = _1831;
    }
    else
    {
        uint _1899 = _1536 + 2u;
        uint _1903 = _1536 + 10u;
        float _1917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _279) * 0.949999988079071044921875);
        float _1918 = _1917 * _1917;
        float _1919 = cbLight._m0[_1899].x + _357;
        float _1920 = cbLight._m0[_1899].y + _358;
        float _1921 = cbLight._m0[_1899].z + _359;
        float _1925 = inversesqrt(dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921)));
        float _1926 = _1925 * _1919;
        float _1927 = _1925 * _1920;
        float _1928 = _1925 * _1921;
        float _1929 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1899].xyz));
        float _3893 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1932 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1933 = dot(vec3(_276, _277, _278), vec3(_1926, _1927, _1928));
        float _3904 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1936 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1937 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_1926, _1927, _1928));
        float _3915 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1941 = _1918 * _1918;
        float _1945 = ((_1936 * _1936) * (_1941 + (-1.0))) + 1.0;
        float _1954 = (exp2(log2(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1955 = 1.0 - _1918;
        float _1965 = (0.5 / (((_1706 * ((_1932 * _1955) + _1918)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _1955) + _1918) * _1932))) * _1932;
        float _3926 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1967 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1941 / ((_1945 * _1945) * 3.141590118408203125));
        float _1968 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1893 = (((_1954 * cbLight._m0[_1903].x) * _1967) * _1968) + _1829;
        _1895 = (((_1954 * cbLight._m0[_1903].y) * _1967) * _1968) + _1830;
        _1897 = (((_1954 * cbLight._m0[_1903].z) * _1967) * _1968) + _1831;
    }
    float _2003;
    float _2005;
    float _2007;
    if (_1632)
    {
        _2003 = _1893;
        _2005 = _1895;
        _2007 = _1897;
    }
    else
    {
        uint _2014 = _1536 + 3u;
        uint _2018 = _1536 + 11u;
        float _2032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _279) * 0.949999988079071044921875);
        float _2033 = _2032 * _2032;
        float _2034 = cbLight._m0[_2014].x + _357;
        float _2035 = cbLight._m0[_2014].y + _358;
        float _2036 = cbLight._m0[_2014].z + _359;
        float _2040 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
        float _2041 = _2040 * _2034;
        float _2042 = _2040 * _2035;
        float _2043 = _2040 * _2036;
        float _2044 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_2014].xyz));
        float _3942 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2047 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2048 = dot(vec3(_276, _277, _278), vec3(_2041, _2042, _2043));
        float _3953 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2051 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _2052 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2041, _2042, _2043));
        float _3964 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2056 = _2033 * _2033;
        float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
        float _2069 = (exp2(log2(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2070 = 1.0 - _2033;
        float _2080 = (0.5 / (((_1706 * ((_2047 * _2070) + _2033)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _2070) + _2033) * _2047))) * _2047;
        float _3975 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2082 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
        float _2083 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _2003 = (((_2069 * cbLight._m0[_2018].x) * _2082) * _2083) + _1893;
        _2005 = (((_2069 * cbLight._m0[_2018].y) * _2082) * _2083) + _1895;
        _2007 = (((_2069 * cbLight._m0[_2018].z) * _2082) * _2083) + _1897;
    }
    float _2218;
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    float _2228;
    if (_1534.y == 0u)
    {
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2159 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2158;
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2158;
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2158;
        uvec4 _2173 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2174 = _2173.x;
        uint _2185 = uint((float(_2173.y) * floor(float(uint(cbSceneParam._m0[85u].y * _379) / _2174))) + floor(float(uint(cbSceneParam._m0[85u].x * _378) / _2174)));
        float _2195 = (log2(_2161 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2196 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        uint _2199 = uint(isnan(14.0) ? _2196 : (isnan(_2196) ? 14.0 : min(_2196, 14.0)));
        uvec4 _2204 = texelFetch(g_lightClusterGridBuffer, int(((_2199 << 2u) + (_2185 << 6u)) >> 2u));
        uint _2205 = _2204.x;
        uint _2206 = _2173.z;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        if (((((1u << ((_2206 >> 4u) & 15u)) + 4294967295u) & _2205) == 0u) || ((_2206 & 240u) == 0u))
        {
            _2306 = 0.0;
            _2308 = 0.0;
            _2310 = 0.0;
            _2312 = 0.0;
            _2314 = 0.0;
            _2316 = 0.0;
        }
        else
        {
            float _2307;
            float _2309;
            float _2311;
            float _2313;
            float _2315;
            float _2317;
            float _2459 = 0.0;
            float _2460 = 0.0;
            float _2461 = 0.0;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            uint _2465 = 0u;
            uint _2474;
            bool _2475;
            for (;;)
            {
                _2474 = texelFetch(g_lightClassification, int((((_2199 << 5u) + (_2185 << 9u)) + (_2465 << 2u)) >> 2u)).x;
                _2475 = _2474 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2475)
                {
                    frontier_phi_66_pred = _2459;
                    frontier_phi_66_pred_1 = _2464;
                    frontier_phi_66_pred_2 = _2463;
                    frontier_phi_66_pred_3 = _2462;
                    frontier_phi_66_pred_4 = _2461;
                    frontier_phi_66_pred_5 = _2460;
                }
                else
                {
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    uint _2610;
                    _2604 = _2459;
                    _2605 = _2460;
                    _2606 = _2461;
                    _2607 = _2462;
                    _2608 = _2463;
                    _2609 = _2464;
                    _2610 = _2474;
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    for (;;)
                    {
                        uint _2614 = uint(findLSB(_2610)) + (_2465 << 5u);
                        uint _2611 = (_2610 + 4294967295u) & _2610;
                        uint _2616 = _2614 * 48u;
                        vec4 _2630 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2616)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 3u)).x));
                        uint _2636 = (_2614 * 48u) + 4u;
                        vec4 _2649 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2636)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 3u)).x));
                        uint _2655 = (_2614 * 48u) + 8u;
                        vec3 _2666 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x));
                        float _2670 = _2630.x - _2159;
                        float _2671 = _2630.y - _2160;
                        float _2672 = _2630.z - _2161;
                        float _2673 = dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672));
                        float _2676 = inversesqrt(_2673);
                        float _2677 = _2676 * _2670;
                        float _2678 = _2676 * _2671;
                        float _2679 = _2676 * _2672;
                        float _2680 = dot(vec3(_399, _402, _405), vec3(_2677, _2678, _2679));
                        float _2685 = 1.0 - (_2673 * _2630.w);
                        float _4001 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                        float _2686 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2687 = sqrt(_2673) * _2649.w;
                        float _2690 = 1.39999997615814208984375 / (_2687 + 1.39999997615814208984375);
                        float _2691 = _2690 * _2690;
                        float _2694 = ((1.0 - _2691) * _2680) + _2691;
                        float _2697 = _2687 * _2687;
                        float _2701 = ((isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0))) * _2686) / ((_2697 * 0.699999988079071044921875) + 1.0);
                        float _2705 = (-0.0) - _2159;
                        float _2706 = (-0.0) - _2160;
                        float _2707 = (-0.0) - _2161;
                        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
                        float _2712 = _2711 * _2705;
                        float _2713 = _2711 * _2706;
                        float _2714 = _2711 * _2707;
                        float _2722 = exp2(log2(1.0 / ((_2697 * 3.5) + 5.0)) * 0.25);
                        float _2723 = 1.0 - _460;
                        float _2730 = sqrt(1.0 - ((1.0 - (_2723 * _2723)) * (1.0 - (_2722 * _2722))));
                        float _2731 = _2730 * _2730;
                        float _2732 = _2731 * _2731;
                        float _2733 = _2712 + _2677;
                        float _2734 = _2713 + _2678;
                        float _2735 = _2714 + _2679;
                        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
                        float _2743 = dot(vec3(_399, _402, _405), vec3(_2712, _2713, _2714));
                        float _4017 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2746 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2747 = dot(vec3(_399, _402, _405), vec3(_2739 * _2733, _2739 * _2734, _2739 * _2735));
                        float _4028 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2750 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2754 = ((_2750 * _2750) * (_2732 + (-1.0))) + 1.0;
                        float _2755 = _2690 * _2731;
                        float _2756 = _2755 * _2755;
                        float _2759 = ((1.0 - _2756) * _2680) + _2756;
                        float _4039 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2760 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2761 = 1.0 - _2731;
                        float _2771 = (0.5 / (((_2760 * ((_2746 * _2761) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2760 * _2761) + _2731) * _2746))) * _2760;
                        float _4050 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2782 = (((_2732 * 3.1415927410125732421875) * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) / ((_2754 * _2754) * ((_2697 * 2.1991131305694580078125) + 3.141590118408203125))) * _2686;
                        _2534 = (_2701 * _2649.x) + _2607;
                        _2535 = (_2701 * _2649.y) + _2608;
                        _2536 = (_2701 * _2649.z) + _2609;
                        _2531 = (_2782 * _2666.x) + _2604;
                        _2532 = (_2782 * _2666.y) + _2605;
                        _2533 = (_2782 * _2666.z) + _2606;
                        if (_2611 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2604 = _2531;
                            _2605 = _2532;
                            _2606 = _2533;
                            _2607 = _2534;
                            _2608 = _2535;
                            _2609 = _2536;
                            _2610 = _2611;
                        }
                    }
                    frontier_phi_66_pred = _2531;
                    frontier_phi_66_pred_1 = _2536;
                    frontier_phi_66_pred_2 = _2535;
                    frontier_phi_66_pred_3 = _2534;
                    frontier_phi_66_pred_4 = _2533;
                    frontier_phi_66_pred_5 = _2532;
                }
                _2307 = frontier_phi_66_pred;
                _2317 = frontier_phi_66_pred_1;
                _2315 = frontier_phi_66_pred_2;
                _2313 = frontier_phi_66_pred_3;
                _2311 = frontier_phi_66_pred_4;
                _2309 = frontier_phi_66_pred_5;
                uint _2466 = _2465 + 1u;
                if (_2466 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2459 = _2307;
                    _2460 = _2309;
                    _2461 = _2311;
                    _2462 = _2313;
                    _2463 = _2315;
                    _2464 = _2317;
                    _2465 = _2466;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2306 = _2307;
            _2308 = _2309;
            _2310 = _2311;
            _2312 = _2313;
            _2314 = _2315;
            _2316 = _2317;
        }
        uvec4 _2320 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2321 = _2320.z;
        uint _2323 = (_2321 >> 8u) & 15u;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        if (((4294967295u << _2323) & _2205) == 0u)
        {
            _2427 = _2306;
            _2429 = _2308;
            _2431 = _2310;
            _2433 = _2312;
            _2435 = _2314;
            _2437 = _2316;
        }
        else
        {
            float _2452 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
            float _2453 = _2452 * _2159;
            float _2454 = _2452 * _2160;
            float _2455 = _2452 * _2161;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2323 < ((_2321 >> 12u) & 15u))
            {
                float _2428;
                float _2430;
                float _2432;
                float _2434;
                float _2436;
                float _2438;
                float _2587 = _2306;
                float _2588 = _2308;
                float _2589 = _2310;
                float _2590 = _2312;
                float _2591 = _2314;
                float _2592 = _2316;
                uint _2593 = _2323;
                uint _2602;
                bool _2603;
                for (;;)
                {
                    _2602 = texelFetch(g_lightClassification, int((((_2199 << 5u) + (_2185 << 9u)) + (_2593 << 2u)) >> 2u)).x;
                    _2603 = _2602 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2603)
                    {
                        frontier_phi_77_pred = _2592;
                        frontier_phi_77_pred_1 = _2591;
                        frontier_phi_77_pred_2 = _2590;
                        frontier_phi_77_pred_3 = _2589;
                        frontier_phi_77_pred_4 = _2588;
                        frontier_phi_77_pred_5 = _2587;
                    }
                    else
                    {
                        float _2796;
                        float _2797;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _2809 = _2587;
                        float _2810 = _2588;
                        float _2811 = _2589;
                        float _2812 = _2590;
                        float _2813 = _2591;
                        float _2814 = _2592;
                        uint _2815 = _2602;
                        uint _2816;
                        vec4 _2841;
                        float _2842;
                        vec4 _2857;
                        vec3 _2869;
                        vec4 _2885;
                        vec4 _2901;
                        float _2948;
                        bool _2949;
                        for (;;)
                        {
                            uint _2826 = ((_2593 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2815));
                            _2816 = (_2815 + 4294967295u) & _2815;
                            uint _2828 = _2826 * 40u;
                            _2841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 3u)).x));
                            _2842 = _2841.w;
                            uint _2844 = (_2826 * 40u) + 4u;
                            _2857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 3u)).x));
                            uint _2859 = (_2826 * 40u) + 8u;
                            _2869 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x));
                            uint _2872 = (_2826 * 40u) + 16u;
                            _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            uint _2888 = (_2826 * 40u) + 20u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            uint _2904 = (_2826 * 40u) + 24u;
                            vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2923 = (_2826 * 40u) + 28u;
                            vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            _2948 = fma(_2161, _2936.z, fma(_2160, _2936.y, _2936.x * _2159)) + _2936.w;
                            _2949 = !((fma(_2161, _2917.z, fma(_2160, _2917.y, _2917.x * _2159)) + _2917.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2949)
                            {
                                float _2976 = _2841.x - _2159;
                                float _2977 = _2841.y - _2160;
                                float _2978 = _2841.z - _2161;
                                float _2979 = dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978));
                                float _2982 = inversesqrt(_2979);
                                float _2983 = _2982 * _2976;
                                float _2984 = _2982 * _2977;
                                float _2985 = _2982 * _2978;
                                float _2989 = 1.0 - (_2979 / (_2842 * _2842));
                                float _4061 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2990 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _2994 = sqrt(_2979) * _2857.w;
                                float _2996 = 1.39999997615814208984375 / (_2994 + 1.39999997615814208984375);
                                float _2997 = _2996 * _2996;
                                float _3000 = ((1.0 - _2997) * dot(vec3(_2983, _2984, _2985), vec3(_399, _402, _405))) + _2997;
                                float _3003 = _2994 * _2994;
                                float _3007 = (fma(_2161, _2885.z, fma(_2160, _2885.y, _2885.x * _2159)) + _2885.w) / _2948;
                                float _3008 = (fma(_2161, _2901.z, fma(_2160, _2901.y, _2901.x * _2159)) + _2901.w) / _2948;
                                float _3012 = 1.0 - dot(vec2(_3007, _3008), vec2(_3007, _3008));
                                float _4077 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3013 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3014 = _3013 * (((isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0))) * _2990) / ((_3003 * 0.699999988079071044921875) + 1.0));
                                float _3026 = exp2(log2(1.0 / ((_3003 * 3.5) + 5.0)) * 0.25);
                                float _3027 = 1.0 - _460;
                                float _3034 = sqrt(1.0 - ((1.0 - (_3027 * _3027)) * (1.0 - (_3026 * _3026))));
                                float _3035 = _3034 * _3034;
                                float _3036 = _3035 * _3035;
                                float _3037 = _2983 - _2453;
                                float _3038 = _2984 - _2454;
                                float _3039 = _2985 - _2455;
                                float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
                                float _3047 = dot(vec3(_399, _402, _405), vec3((-0.0) - _2453, (-0.0) - _2454, (-0.0) - _2455));
                                float _4088 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3050 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3051 = dot(vec3(_399, _402, _405), vec3(_3043 * _3037, _3043 * _3038, _3043 * _3039));
                                float _4099 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3054 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3058 = ((_3054 * _3054) * (_3036 + (-1.0))) + 1.0;
                                float _3059 = _2996 * _3035;
                                float _3060 = _3059 * _3059;
                                float _3066 = ((1.0 - _3060) * dot(vec3(_399, _402, _405), vec3(_2983, _2984, _2985))) + _3060;
                                float _4110 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3067 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3068 = 1.0 - _3035;
                                float _3078 = (0.5 / (((_3067 * ((_3050 * _3068) + _3035)) + 9.9999999392252902907785028219223e-09) + (((_3067 * _3068) + _3035) * _3050))) * _3067;
                                float _4121 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3088 = (_3013 * _2990) * (((_3036 * 3.1415927410125732421875) * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) / ((_3058 * _3058) * ((_3003 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3014 * _2857.y;
                                frontier_phi_83_pred_1 = _3014 * _2857.x;
                                frontier_phi_83_pred_2 = _3088 * _2869.z;
                                frontier_phi_83_pred_3 = _3088 * _2869.y;
                                frontier_phi_83_pred_4 = _3088 * _2869.x;
                                frontier_phi_83_pred_5 = _3014 * _2857.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3096 = frontier_phi_83_pred;
                            _3095 = frontier_phi_83_pred_1;
                            _3094 = frontier_phi_83_pred_2;
                            _3093 = frontier_phi_83_pred_3;
                            _3092 = frontier_phi_83_pred_4;
                            _3097 = frontier_phi_83_pred_5;
                            _2799 = _3095 + _2812;
                            _2800 = _3096 + _2813;
                            _2801 = _3097 + _2814;
                            _2796 = _3092 + _2809;
                            _2797 = _3093 + _2810;
                            _2798 = _3094 + _2811;
                            if (_2816 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2816;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2801;
                        frontier_phi_77_pred_1 = _2800;
                        frontier_phi_77_pred_2 = _2799;
                        frontier_phi_77_pred_3 = _2798;
                        frontier_phi_77_pred_4 = _2797;
                        frontier_phi_77_pred_5 = _2796;
                    }
                    _2438 = frontier_phi_77_pred;
                    _2436 = frontier_phi_77_pred_1;
                    _2434 = frontier_phi_77_pred_2;
                    _2432 = frontier_phi_77_pred_3;
                    _2430 = frontier_phi_77_pred_4;
                    _2428 = frontier_phi_77_pred_5;
                    uint _2594 = _2593 + 1u;
                    if (_2594 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2587 = _2428;
                        _2588 = _2430;
                        _2589 = _2432;
                        _2590 = _2434;
                        _2591 = _2436;
                        _2592 = _2438;
                        _2593 = _2594;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2432;
                frontier_phi_58_59_ladder_1 = _2438;
                frontier_phi_58_59_ladder_2 = _2436;
                frontier_phi_58_59_ladder_3 = _2434;
                frontier_phi_58_59_ladder_4 = _2430;
                frontier_phi_58_59_ladder_5 = _2428;
            }
            else
            {
                frontier_phi_58_59_ladder = _2310;
                frontier_phi_58_59_ladder_1 = _2316;
                frontier_phi_58_59_ladder_2 = _2314;
                frontier_phi_58_59_ladder_3 = _2312;
                frontier_phi_58_59_ladder_4 = _2308;
                frontier_phi_58_59_ladder_5 = _2306;
            }
            _2427 = frontier_phi_58_59_ladder_5;
            _2429 = frontier_phi_58_59_ladder_4;
            _2431 = frontier_phi_58_59_ladder;
            _2433 = frontier_phi_58_59_ladder_3;
            _2435 = frontier_phi_58_59_ladder_2;
            _2437 = frontier_phi_58_59_ladder_1;
        }
        float _2442 = isnan(1.0) ? _444 : (isnan(_444) ? 1.0 : min(_444, 1.0));
        _2218 = (_2442 * _2433) + _1670;
        _2220 = (_2442 * _2435) + _1672;
        _2222 = (_2442 * _2437) + _1674;
        _2224 = ((_2427 * 0.039999999105930328369140625) * _2442) + _2003;
        _2226 = ((_2429 * 0.039999999105930328369140625) * _2442) + _2005;
        _2228 = ((_2431 * 0.039999999105930328369140625) * _2442) + _2007;
    }
    else
    {
        _2218 = _1670;
        _2220 = _1672;
        _2222 = _1674;
        _2224 = _2003;
        _2226 = _2005;
        _2228 = _2007;
    }
    float _4137 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _4148 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _4159 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _2245 = ((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2218 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _444))) + ((_2224 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1283)) * cbPerFrame._m0[3u].x);
    float _2246 = ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2220 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _444))) + ((_2226 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1283)) * cbPerFrame._m0[3u].x);
    float _2247 = ((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2222 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _444))) + ((_2228 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1283)) * cbPerFrame._m0[3u].x);
    uint _2248 = _418 + 6u;
    float _2256 = _378 / cbSceneParam._m0[86u].x;
    float _2257 = _379 / cbSceneParam._m0[86u].y;
    vec4 _2271 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2256, _2257, (log2((isnan(cbSceneParam._m0[77u].w) ? _298 : (isnan(_298) ? cbSceneParam._m0[77u].w : min(_298, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2273 = _2271.x;
    float _2274 = _2271.y;
    float _2275 = _2271.z;
    float _2276 = _2271.w;
    float _2369;
    float _2371;
    float _2373;
    float _2375;
    if (_298 > cbSceneParam._m0[78u].w)
    {
        float _2331 = isnan(_298) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _298 : min(cbSceneParam._m0[80u].w, _298));
        float _2332 = _2331 / _298;
        float _2343 = _2332 * _350;
        float _2344 = _351 * _2332;
        float _2345 = (-0.0) - _2344;
        float _2347 = _2332 * _352;
        float _2349 = (cbSceneParam._m0[77u].w * _2345) / _2331;
        float _2350 = _2349 + cbSceneParam._m0[79u].w;
        float _2351 = cbSceneParam._m0[79u].w - _2344;
        float _2357 = sqrt(((_2343 * _2343) + (_2344 * _2344)) + (_2347 * _2347));
        float _2360 = (1.0 - (cbSceneParam._m0[77u].w / _2331)) * _2357;
        float _2365 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2367 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2544;
        if (abs((_2345 - _2349) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2544 = ((((_2350 > 0.0) ? exp2(_2365 * _2350) : (2.0 - exp2(_2367 * _2350))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2360;
        }
        else
        {
            float _2488 = 1.0 / cbSceneParam._m0[80u].x;
            float _2489 = isnan(_2351) ? _2350 : (isnan(_2350) ? _2351 : max(_2350, _2351));
            float _2490 = isnan(_2351) ? _2350 : (isnan(_2350) ? _2351 : min(_2350, _2351));
            float _2499 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : min(_2489, 0.0));
            float _2500 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : min(_2490, 0.0));
            _2544 = ((abs(_2357 / _2345) * cbSceneParam._m0[80u].y) * ((((_2499 - _2500) * 2.0) - ((exp2(_2365 * (isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0)))) - exp2(_2365 * (isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0))))) * _2488)) - ((exp2(_2367 * _2499) - exp2(_2367 * _2500)) * _2488))) + (_2360 * cbSceneParam._m0[80u].z);
        }
        vec4 _2546 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2256, _2257, 1.0), 0.0);
        float _2555 = exp2((_2544 * (-1.44269502162933349609375)) * (1.0 - _2546.w));
        float _2556 = log2(_2555);
        float _2572 = log2(_2276);
        _2369 = (exp2(_2572 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2556 * cbSceneParam._m0[78u].x)) * _2546.x) / cbSceneParam._m0[78u].x)) + _2273;
        _2371 = (exp2(_2572 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2556 * cbSceneParam._m0[78u].y)) * _2546.y) / cbSceneParam._m0[78u].y)) + _2274;
        _2373 = (exp2(_2572 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2556 * cbSceneParam._m0[78u].z)) * _2546.z) / cbSceneParam._m0[78u].z)) + _2275;
        _2375 = _2555 * _2276;
    }
    else
    {
        _2369 = _2273;
        _2371 = _2274;
        _2373 = _2275;
        _2375 = _2276;
    }
    bool _2582;
    vec4 _2385;
    vec4 _2407;
    float _2409;
    float _2413;
    float _2414;
    float _2415;
    float _2416;
    bool _2426;
    for (;;)
    {
        _2385 = cbMatDynParam._m0[0u];
        float _2387 = roundEven(_2385.y);
        bool _2388 = _2387 == 3.0;
        float _2389 = log2(_2375);
        float _2396 = exp2(_2389 * cbSceneParam._m0[78u].x) * _2245;
        float _2397 = exp2(_2389 * cbSceneParam._m0[78u].y) * _2246;
        float _2398 = exp2(_2389 * cbSceneParam._m0[78u].z) * _2247;
        float _2405 = _366 + (-0.5);
        _2407 = cbMtdParam._m0[1u];
        _2409 = _2407.y * _2405;
        float _2412 = (_2387 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2413 = _2412 * (_2388 ? _2396 : (_2396 + (cbSceneParam._m0[72u].w * _2369)));
        _2414 = _2412 * (_2388 ? _2397 : (_2397 + (cbSceneParam._m0[72u].w * _2371)));
        _2415 = _2412 * (_2388 ? _2398 : (_2398 + (cbSceneParam._m0[72u].w * _2373)));
        _2416 = _2405 * 0.999000012874603271484375;
        _2426 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2426)
        {
            if ((cbInstanceData._m0[_418 + 7u].x + _2416) < 0.5)
            {
                _2582 = true;
                break;
            }
        }
        uint _2523 = _420 + uint(_2385.w);
        if ((cbInstanceData._m0[_2523].w < 1.0) && ((cbInstanceData._m0[_2523].w + _2416) < 0.5))
        {
            _2582 = true;
            break;
        }
        if ((_2409 + _230) < _2407.x)
        {
            _2582 = true;
            break;
        }
        _2582 = false;
        break;
    }
    float _2787;
    if (_2582)
    {
        discard_state = true;
        _2787 = 0.0;
    }
    else
    {
        _2787 = cbInstanceData._m0[_2248].w;
    }
    SV_Target.x = _2413;
    SV_Target.y = _2414;
    SV_Target.z = _2415;
    SV_Target.w = _2787;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2248].w;
    discard_exit();
}


