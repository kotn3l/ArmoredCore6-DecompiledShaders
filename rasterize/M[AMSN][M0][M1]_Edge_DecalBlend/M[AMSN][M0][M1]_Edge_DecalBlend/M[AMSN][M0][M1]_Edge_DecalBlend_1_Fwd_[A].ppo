#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _843;
float _3213;
float _3214;
float _3215;
float _3216;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.w;
    float _229 = _222.x * cbMtdParam._m0[9u].x;
    float _230 = _222.y * cbMtdParam._m0[9u].y;
    float _231 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _243 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _247 = _243.z;
    float _251 = (_243.x * 2.0) + (-1.0);
    float _253 = (_243.y * 2.0) + (-1.0);
    float _254 = dot(vec2(_251, _253), vec2(_251, _253));
    float _3225 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _260 = sqrt(1.0 - (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))));
    float _263 = fma(_260, _192 * NORMAL.x, fma(_253, _199 * TANGENT.x, (_185 * _178) * _251));
    float _266 = fma(_260, _192 * NORMAL.y, fma(_253, _199 * TANGENT.y, (_185 * _179) * _251));
    float _269 = fma(_260, _192 * NORMAL.z, fma(_253, _199 * TANGENT.z, (_185 * _180) * _251));
    float _273 = inversesqrt(dot(vec3(_263, _266, _269), vec3(_263, _266, _269)));
    float _274 = _273 * _263;
    float _275 = _273 * _266;
    float _276 = _273 * _269;
    float _3236 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _277 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
    float _3247 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3258 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3269 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _296 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _338 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _348 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _338);
    float _349 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _338);
    float _350 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _338);
    float _354 = inversesqrt(dot(vec3(_348, _349, _350), vec3(_348, _349, _350)));
    float _355 = _348 * _354;
    float _356 = _349 * _354;
    float _357 = _350 * _354;
    vec4 _362 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _364 = _362.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _522 = sqrt(((_348 * _348) + (_349 * _349)) + (_350 * _350));
        float _528 = (cbMatDynParam._m0[5u].x * _522) + cbMatDynParam._m0[5u].y;
        float _3280 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
        float _529 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
        float _533 = (cbMatDynParam._m0[5u].z * _522) + cbMatDynParam._m0[5u].w;
        float _3291 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) - _529)) + _529) < ((_364 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _376 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _377 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _397 = fma(_276, cbSceneParam._m0[5u].z, fma(_275, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _274));
    float _400 = fma(_276, cbSceneParam._m0[6u].z, fma(_275, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _274));
    float _403 = fma(_276, cbSceneParam._m0[7u].z, fma(_275, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _274));
    uint _416 = uint(roundEven(NORMAL.w)) * 13u;
    uint _418 = _416 + 9u;
    uint _419 = _418 + uint(cbMatDynParam._m0[0u].w);
    float _425 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)))) * cbInstanceData._m0[_419].x;
    float _426 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_419].y;
    float _427 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_419].z;
    float _3302 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    vec4 _439 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _376, cbSceneParam._m0[86u].y * _377));
    float _442 = _439.x * TEXCOORD.z;
    float _443 = dot(vec3(_274, _275, _276), vec3(_355, _356, _357));
    float _446 = _443 * 2.0;
    float _450 = (_446 * _274) - _355;
    float _451 = (_446 * _275) - _356;
    float _452 = (_446 * _276) - _357;
    float _456 = abs(dot(vec3(_355, _356, _357), vec3(_274, _275, _276)));
    float _3335 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _458 = sqrt(_277);
    float _471 = exp2((_458 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_458 * 3.0));
    float _503 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _842;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _567 = fma(_511, cbModelParam._m0[26u].z, fma(_507, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _503));
        float _571 = fma(_511, cbModelParam._m0[27u].z, fma(_507, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _503));
        float _575 = fma(_511, cbModelParam._m0[28u].z, fma(_507, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _503));
        float _600 = _503 + _274;
        float _601 = _507 + _275;
        float _602 = _511 + _276;
        float _612 = fma(_602, cbModelParam._m0[26u].z, fma(_601, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _600)) - _567;
        float _613 = fma(_602, cbModelParam._m0[27u].z, fma(_601, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _600)) - _571;
        float _614 = fma(_602, cbModelParam._m0[28u].z, fma(_601, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _600)) - _575;
        float _618 = inversesqrt(dot(vec3(_612, _613, _614), vec3(_612, _613, _614)));
        float _631 = ((_618 * _612) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_567 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _632 = ((_618 * _613) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_571 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _633 = ((_618 * _614) / cbModelParam._m0[34u].z) + ((((((_575 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_631, _632, _633), 0.0);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_631, _632, _633), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_631, _632, _633), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_631, _632, _633), 0.0);
        float _670 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_636.x + (-0.5));
        float _672 = _670 * (_636.y + (-0.5));
        float _673 = _670 * (_636.z + (-0.5));
        float _680 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_643.x + (-0.5));
        float _682 = _680 * (_643.y + (-0.5));
        float _683 = _680 * (_643.z + (-0.5));
        float _690 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_650.x + (-0.5));
        float _692 = _690 * (_650.y + (-0.5));
        float _693 = _690 * (_650.z + (-0.5));
        float _700 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_657.x + (-0.5));
        float _702 = _700 * (_657.y + (-0.5));
        float _703 = _700 * (_657.z + (-0.5));
        float _704 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = _671 * 0.5;
        float _708 = _681 * 0.5;
        float _709 = _691 * 0.5;
        float _710 = dot(vec3(_707, _708, _709), vec3(_707, _708, _709));
        float _715 = (_710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_710);
        float _724 = (dot(vec3(_274, _275, _276), vec3(_715 * _707, _715 * _708, _715 * _709)) + 1.0) * 0.5;
        float _3361 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _734 = sqrt(((_708 * _708) + (_707 * _707)) + (_709 * _709)) / (_704 + 9.9999997473787516355514526367188e-06);
        float _3372 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _736 = _735 * 2.0;
        float _740 = (1.0 - _735) / (_735 + 1.0);
        float _3383 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _750 = ((((1.0 - _741) * (_736 + 2.0)) * exp2(log2(isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * (_736 + 1.0))) + _741) * _704;
        float _751 = _672 * 0.5;
        float _752 = _682 * 0.5;
        float _753 = _692 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _767 = (dot(vec3(_274, _275, _276), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _776 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _778 = _777 * 2.0;
        float _782 = (1.0 - _777) / (_777 + 1.0);
        float _3416 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _792 = ((((1.0 - _783) * (_778 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_778 + 1.0))) + _783) * _705;
        float _793 = _673 * 0.5;
        float _794 = _683 * 0.5;
        float _795 = _693 * 0.5;
        float _796 = dot(vec3(_793, _794, _795), vec3(_793, _794, _795));
        float _801 = (_796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_796);
        float _809 = (dot(vec3(_274, _275, _276), vec3(_801 * _793, _801 * _794, _801 * _795)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _818 = sqrt(((_794 * _794) + (_793 * _793)) + (_795 * _795)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _820 = _819 * 2.0;
        float _824 = (1.0 - _819) / (_819 + 1.0);
        float _3449 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _834 = ((((1.0 - _825) * (_820 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_820 + 1.0))) + _825) * _706;
        _842 = _673;
        _844 = _672;
        _845 = _671;
        _846 = _683;
        _847 = _682;
        _848 = _681;
        _849 = _693;
        _850 = _692;
        _851 = _691;
        _852 = _706;
        _853 = _705;
        _854 = _704;
        _855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0)));
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)));
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0)));
    }
    else
    {
        _842 = _843;
        _844 = _843;
        _845 = _843;
        _846 = _843;
        _847 = _843;
        _848 = _843;
        _849 = _843;
        _850 = _843;
        _851 = _843;
        _852 = _843;
        _853 = _843;
        _854 = _843;
        _855 = 0.0;
        _856 = 0.0;
        _857 = 0.0;
    }
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _886 = fma(_511, cbModelParam._m0[30u].z, fma(_507, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _503));
        float _890 = fma(_511, cbModelParam._m0[31u].z, fma(_507, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _503));
        float _894 = fma(_511, cbModelParam._m0[32u].z, fma(_507, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _503));
        float _917 = _503 + _274;
        float _918 = _507 + _275;
        float _919 = _511 + _276;
        float _929 = fma(_919, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _917)) - _886;
        float _930 = fma(_919, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _917)) - _890;
        float _931 = fma(_919, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _917)) - _894;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_886 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_890 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[35u].z) + ((((((_894 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _985 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_952.x + (-0.5));
        float _987 = _985 * (_952.y + (-0.5));
        float _988 = _985 * (_952.z + (-0.5));
        float _995 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_959.x + (-0.5));
        float _997 = _995 * (_959.y + (-0.5));
        float _998 = _995 * (_959.z + (-0.5));
        float _1005 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_966.x + (-0.5));
        float _1007 = _1005 * (_966.y + (-0.5));
        float _1008 = _1005 * (_966.z + (-0.5));
        float _1015 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_973.x + (-0.5));
        float _1017 = _1015 * (_973.y + (-0.5));
        float _1018 = _1015 * (_973.z + (-0.5));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = _986 * 0.5;
        float _1023 = _996 * 0.5;
        float _1024 = _1006 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_274, _275, _276), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3512 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_1049 + 1.0))) + _1054) * _1019;
        float _1064 = _987 * 0.5;
        float _1065 = _997 * 0.5;
        float _1066 = _1007 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_274, _275, _276), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3545 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1091 + 1.0))) + _1096) * _1020;
        float _1106 = _988 * 0.5;
        float _1107 = _998 * 0.5;
        float _1108 = _1008 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_274, _275, _276), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3578 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1133 + 1.0))) + _1138) * _1021;
        _1155 = _988;
        _1156 = _987;
        _1157 = _986;
        _1158 = _998;
        _1159 = _997;
        _1160 = _996;
        _1161 = _1008;
        _1162 = _1007;
        _1163 = _1006;
        _1164 = _1021;
        _1165 = _1020;
        _1166 = _1019;
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _843;
        _1156 = _843;
        _1157 = _843;
        _1158 = _843;
        _1159 = _843;
        _1160 = _843;
        _1161 = _843;
        _1162 = _843;
        _1163 = _843;
        _1164 = _843;
        _1165 = _843;
        _1166 = _843;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _855)) + _855;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _856)) + _856;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _857)) + _857;
    float _1202 = fma(_1181, cbSceneParam._m0[89u].z, fma(_1180, cbSceneParam._m0[89u].y, _1179 * cbSceneParam._m0[89u].x));
    float _1205 = fma(_1181, cbSceneParam._m0[90u].z, fma(_1180, cbSceneParam._m0[90u].y, _1179 * cbSceneParam._m0[90u].x));
    float _1208 = fma(_1181, cbSceneParam._m0[91u].z, fma(_1180, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1179));
    float _1223 = _450 * 0.5;
    float _1224 = _451 * 0.5;
    float _1225 = _452 * 0.5;
    float _1226 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1229 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1232 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1266;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1239 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_842, _846, _849, _852));
        float _1243 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_844, _847, _850, _853));
        float _1247 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_845, _848, _851, _854));
        float _1254 = dot(vec4(cbModelParam._m0[39u]), vec4(_1223, _1224, _1225, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1277;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1268 = dot(vec4(cbModelParam._m0[40u]), vec4(_1223, _1224, _1225, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1281 = (_1277 * cbModelParam._m0[1u].x) + (_1266 * (1.0 - cbModelParam._m0[1u].x));
    float _1291 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _277);
    float _1292 = isnan(_1291) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1291 : min(cbModelParam._m0[25u].z, _1291));
    float _1374;
    float _1376;
    float _1378;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1341 = fma(_511, cbModelParam._m0[13u].z, fma(_507, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _503)) + cbModelParam._m0[13u].w;
        float _1345 = fma(_511, cbModelParam._m0[14u].z, fma(_507, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _503)) + cbModelParam._m0[14u].w;
        float _1349 = fma(_511, cbModelParam._m0[15u].z, fma(_507, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _503)) + cbModelParam._m0[15u].w;
        float _1352 = fma(_452, cbModelParam._m0[13u].z, fma(_451, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _450));
        float _1355 = fma(_452, cbModelParam._m0[14u].z, fma(_451, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _450));
        float _1358 = fma(_452, cbModelParam._m0[15u].z, fma(_451, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _450));
        float _1386;
        if (_1352 > 0.0)
        {
            _1386 = abs((1.0 - _1341) / _1352);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1341 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1386 = frontier_phi_17_15_ladder;
        }
        float _1592;
        if (_1355 > 0.0)
        {
            _1592 = abs((1.0 - _1345) / _1355);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1345 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1592 = frontier_phi_26_22_ladder;
        }
        float _1835;
        if (_1358 > 0.0)
        {
            _1835 = abs((1.0 - _1349) / _1358);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1349 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1835 = frontier_phi_38_33_ladder;
        }
        float _1837 = isnan(_1592) ? _1386 : (isnan(_1386) ? _1592 : min(_1386, _1592));
        float _1838 = isnan(_1835) ? _1837 : (isnan(_1837) ? _1835 : min(_1837, _1835));
        float _1842 = (_1838 * _1352) + _1341;
        float _1843 = (_1838 * _1355) + _1345;
        float _1844 = (_1838 * _1358) + _1349;
        float _1845 = _1838 * 9.9999997473787516355514526367188e-05;
        float _1847 = (-1.0) - _1845;
        float _1849 = _1845 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1844 > _1849) || ((_1844 < _1847) || ((_1843 > _1849) || ((_1843 < _1847) || ((_1842 < _1847) || (_1842 > _1849))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1968 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1844, cbModelParam._m0[9u].z, fma(_1843, cbModelParam._m0[9u].y, _1842 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1844, cbModelParam._m0[10u].z, fma(_1843, cbModelParam._m0[10u].y, _1842 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1844, cbModelParam._m0[11u].z, fma(_1843, cbModelParam._m0[11u].y, _1842 * cbModelParam._m0[11u].x))), _1292);
            frontier_phi_16_38_ladder = _1968.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1968.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1968.x * cbModelParam._m0[1u].y;
        }
        _1374 = frontier_phi_16_38_ladder_2;
        _1376 = frontier_phi_16_38_ladder_1;
        _1378 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_450, _451, _452), _1292);
        _1374 = _1362.x * cbModelParam._m0[1u].y;
        _1376 = _1362.y * cbModelParam._m0[1u].y;
        _1378 = _1362.z * cbModelParam._m0[1u].y;
    }
    float _1382 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _277);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1382 : min(cbModelParam._m0[25u].w, _1382));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1440 = fma(_511, cbModelParam._m0[21u].z, fma(_507, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _503)) + cbModelParam._m0[21u].w;
        float _1444 = fma(_511, cbModelParam._m0[22u].z, fma(_507, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _503)) + cbModelParam._m0[22u].w;
        float _1448 = fma(_511, cbModelParam._m0[23u].z, fma(_507, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _503)) + cbModelParam._m0[23u].w;
        float _1451 = fma(_452, cbModelParam._m0[21u].z, fma(_451, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _450));
        float _1454 = fma(_452, cbModelParam._m0[22u].z, fma(_451, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _450));
        float _1457 = fma(_452, cbModelParam._m0[23u].z, fma(_451, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _450));
        float _1597;
        if (_1451 > 0.0)
        {
            _1597 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1597 = frontier_phi_28_24_ladder;
        }
        float _1862;
        if (_1454 > 0.0)
        {
            _1862 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1862 = frontier_phi_40_35_ladder;
        }
        float _2067;
        if (_1457 > 0.0)
        {
            _2067 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2067 = frontier_phi_49_46_ladder;
        }
        float _2069 = isnan(_1862) ? _1597 : (isnan(_1597) ? _1862 : min(_1597, _1862));
        float _2070 = isnan(_2067) ? _2069 : (isnan(_2069) ? _2067 : min(_2069, _2067));
        float _2074 = (_2070 * _1451) + _1440;
        float _2075 = (_2070 * _1454) + _1444;
        float _2076 = (_2070 * _1457) + _1448;
        float _2077 = _2070 * 9.9999997473787516355514526367188e-05;
        float _2078 = (-1.0) - _2077;
        float _2080 = _2077 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2076 > _2080) || ((_2076 < _2078) || ((_2075 > _2080) || ((_2075 < _2078) || ((_2074 < _2078) || (_2074 > _2080))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2275 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2076, cbModelParam._m0[17u].z, fma(_2075, cbModelParam._m0[17u].y, _2074 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2076, cbModelParam._m0[18u].z, fma(_2075, cbModelParam._m0[18u].y, _2074 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2076, cbModelParam._m0[19u].z, fma(_2075, cbModelParam._m0[19u].y, _2074 * cbModelParam._m0[19u].x))), _1383);
            frontier_phi_25_49_ladder = _2275.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2275.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2275.x * cbModelParam._m0[1u].z;
        }
        _1476 = frontier_phi_25_49_ladder_2;
        _1478 = frontier_phi_25_49_ladder_1;
        _1480 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_450, _451, _452), _1383);
        _1476 = _1460.x * cbModelParam._m0[1u].z;
        _1478 = _1460.y * cbModelParam._m0[1u].z;
        _1480 = _1460.z * cbModelParam._m0[1u].z;
    }
    float _1492 = ((((1.0 - _471) * ((_458 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_471 * _458)) * _442;
    float _1493 = _1492 * ((cbModelParam._m0[1u].w * (_1476 - _1374)) + _1374);
    float _1494 = _1492 * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1495 = _1492 * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1498 = fma(_1495, cbSceneParam._m0[89u].z, fma(_1494, cbSceneParam._m0[89u].y, _1493 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1495, cbSceneParam._m0[90u].z, fma(_1494, cbSceneParam._m0[90u].y, _1493 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1495, cbSceneParam._m0[91u].z, fma(_1494, cbSceneParam._m0[91u].y, _1493 * cbSceneParam._m0[91u].x));
    uvec4 _1514 = floatBitsToUint(cbInstanceData._m0[_416 + 5u]);
    uint _1516 = _1514.x * 14u;
    uint _1517 = _1516 + 13u;
    float _1524 = _442 + (-1.0);
    float _1529 = (cbLight._m0[_1517].x * _1524) + 1.0;
    float _1530 = (cbLight._m0[_1517].y * _1524) + 1.0;
    float _1531 = (cbLight._m0[_1517].z * _1524) + 1.0;
    float _1532 = (cbLight._m0[_1517].w * _1524) + 1.0;
    uint _1533 = _1516 + 5u;
    float _1539 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
    uint _1543 = _1516 + 4u;
    float _1550 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
    uint _1554 = _1516 | 1u;
    float _1565 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_274, _275, _276));
    float _1568 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_274, _275, _276));
    float _3714 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _3725 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _1573 = (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.3183098733425140380859375;
    float _1575 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.3183098733425140380859375;
    float _1582 = ((cbLight._m0[_1533].x * _1539) * _1575) + ((cbLight._m0[_1543].x * _1550) * _1573);
    float _1583 = ((_1539 * cbLight._m0[_1533].y) * _1575) + ((_1550 * cbLight._m0[_1543].y) * _1573);
    float _1584 = ((_1539 * cbLight._m0[_1533].z) * _1575) + ((_1550 * cbLight._m0[_1543].z) * _1573);
    uvec4 _1589 = floatBitsToUint(cbLight._m0[_1516 + 12u]);
    bool _1591 = _1589.x == 0u;
    float _1602;
    float _1604;
    float _1606;
    if (_1591)
    {
        _1602 = _1582;
        _1604 = _1583;
        _1606 = _1584;
    }
    else
    {
        uint _1610 = _1516 + 6u;
        float _1626 = (dot(vec3(cbLight._m0[_1516 + 2u].xyz), vec3(_274, _275, _276)) * 0.5) + 0.5;
        float _1627 = _1626 * _1626;
        float _3736 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1629 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1602 = (((cbLight._m0[_1610].x * 0.3183098733425140380859375) * _1628) * _1629) + _1582;
        _1604 = (((cbLight._m0[_1610].y * 0.3183098733425140380859375) * _1628) * _1629) + _1583;
        _1606 = (((cbLight._m0[_1610].z * 0.3183098733425140380859375) * _1628) * _1629) + _1584;
    }
    bool _1609 = _1589.y == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1609)
    {
        _1647 = _1602;
        _1649 = _1604;
        _1651 = _1606;
    }
    else
    {
        uint _1806 = _1516 + 7u;
        float _1822 = (dot(vec3(cbLight._m0[_1516 + 3u].xyz), vec3(_274, _275, _276)) * 0.5) + 0.5;
        float _1823 = _1822 * _1822;
        float _3752 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1825 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1647 = (((cbLight._m0[_1806].x * 0.3183098733425140380859375) * _1824) * _1825) + _1602;
        _1649 = (((cbLight._m0[_1806].y * 0.3183098733425140380859375) * _1824) * _1825) + _1604;
        _1651 = (((cbLight._m0[_1806].z * 0.3183098733425140380859375) * _1824) * _1825) + _1606;
    }
    uint _1654 = _1516 + 8u;
    float _1667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1516].w)) * _277) * 0.949999988079071044921875);
    float _1668 = _1667 * _1667;
    float _1669 = cbLight._m0[_1516].x + _355;
    float _1670 = cbLight._m0[_1516].y + _356;
    float _1671 = cbLight._m0[_1516].z + _357;
    float _1675 = inversesqrt(dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671)));
    float _1676 = _1675 * _1669;
    float _1677 = _1675 * _1670;
    float _1678 = _1675 * _1671;
    float _1679 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1516].xyz));
    float _3768 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1682 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _1683 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _1684 = dot(vec3(_274, _275, _276), vec3(_1676, _1677, _1678));
    float _3790 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1687 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _1688 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_1676, _1677, _1678));
    float _3801 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1692 = _1668 * _1668;
    float _1696 = ((_1687 * _1687) * (_1692 + (-1.0))) + 1.0;
    float _1707 = (exp2(log2(1.0 - (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1708 = 1.0 - _1668;
    float _1719 = (0.5 / (((_1683 * ((_1682 * _1708) + _1668)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1708) + _1668) * _1682))) * _1682;
    float _3812 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1721 = (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1692 / ((_1696 * _1696) * 3.141590118408203125));
    uint _1732 = _1516 + 9u;
    float _1743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1554].w)) * _277) * 0.949999988079071044921875);
    float _1744 = _1743 * _1743;
    float _1745 = cbLight._m0[_1554].x + _355;
    float _1746 = cbLight._m0[_1554].y + _356;
    float _1747 = cbLight._m0[_1554].z + _357;
    float _1751 = inversesqrt(dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747)));
    float _1752 = _1751 * _1745;
    float _1753 = _1751 * _1746;
    float _1754 = _1751 * _1747;
    float _1755 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1554].xyz));
    float _3823 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1758 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1759 = dot(vec3(_274, _275, _276), vec3(_1752, _1753, _1754));
    float _3834 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1762 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _1763 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_1752, _1753, _1754));
    float _3845 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1767 = _1744 * _1744;
    float _1771 = ((_1762 * _1762) * (_1767 + (-1.0))) + 1.0;
    float _1780 = (exp2(log2(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1781 = 1.0 - _1744;
    float _1791 = (0.5 / (((_1683 * ((_1758 * _1781) + _1744)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1781) + _1744) * _1758))) * _1758;
    float _3856 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1793 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1767 / ((_1771 * _1771) * 3.141590118408203125));
    float _1803 = (((_1780 * cbLight._m0[_1732].x) * _1793) * _1539) + (((_1707 * cbLight._m0[_1654].x) * _1721) * _1550);
    float _1804 = (((_1780 * cbLight._m0[_1732].y) * _1793) * _1539) + (((_1707 * cbLight._m0[_1654].y) * _1721) * _1550);
    float _1805 = (((_1780 * cbLight._m0[_1732].z) * _1793) * _1539) + (((_1707 * cbLight._m0[_1654].z) * _1721) * _1550);
    float _1867;
    float _1869;
    float _1871;
    if (_1591)
    {
        _1867 = _1803;
        _1869 = _1804;
        _1871 = _1805;
    }
    else
    {
        uint _1873 = _1516 + 2u;
        uint _1877 = _1516 + 10u;
        float _1891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1873].w)) * _277) * 0.949999988079071044921875);
        float _1892 = _1891 * _1891;
        float _1893 = cbLight._m0[_1873].x + _355;
        float _1894 = cbLight._m0[_1873].y + _356;
        float _1895 = cbLight._m0[_1873].z + _357;
        float _1899 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
        float _1900 = _1899 * _1893;
        float _1901 = _1899 * _1894;
        float _1902 = _1899 * _1895;
        float _1903 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1873].xyz));
        float _3867 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1906 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1907 = dot(vec3(_274, _275, _276), vec3(_1900, _1901, _1902));
        float _3878 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1910 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1911 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_1900, _1901, _1902));
        float _3889 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1915 = _1892 * _1892;
        float _1919 = ((_1910 * _1910) * (_1915 + (-1.0))) + 1.0;
        float _1928 = (exp2(log2(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1929 = 1.0 - _1892;
        float _1939 = (0.5 / (((_1683 * ((_1906 * _1929) + _1892)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1929) + _1892) * _1906))) * _1906;
        float _3900 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1941 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1915 / ((_1919 * _1919) * 3.141590118408203125));
        float _1942 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1867 = (((_1928 * cbLight._m0[_1877].x) * _1941) * _1942) + _1803;
        _1869 = (((_1928 * cbLight._m0[_1877].y) * _1941) * _1942) + _1804;
        _1871 = (((_1928 * cbLight._m0[_1877].z) * _1941) * _1942) + _1805;
    }
    float _1977;
    float _1979;
    float _1981;
    if (_1609)
    {
        _1977 = _1867;
        _1979 = _1869;
        _1981 = _1871;
    }
    else
    {
        uint _1988 = _1516 + 3u;
        uint _1992 = _1516 + 11u;
        float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _277) * 0.949999988079071044921875);
        float _2007 = _2006 * _2006;
        float _2008 = cbLight._m0[_1988].x + _355;
        float _2009 = cbLight._m0[_1988].y + _356;
        float _2010 = cbLight._m0[_1988].z + _357;
        float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
        float _2015 = _2014 * _2008;
        float _2016 = _2014 * _2009;
        float _2017 = _2014 * _2010;
        float _2018 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1988].xyz));
        float _3916 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2021 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2022 = dot(vec3(_274, _275, _276), vec3(_2015, _2016, _2017));
        float _3927 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2025 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _2026 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2015, _2016, _2017));
        float _3938 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2030 = _2007 * _2007;
        float _2034 = ((_2025 * _2025) * (_2030 + (-1.0))) + 1.0;
        float _2043 = (exp2(log2(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2044 = 1.0 - _2007;
        float _2054 = (0.5 / (((_1683 * ((_2021 * _2044) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _2044) + _2007) * _2021))) * _2021;
        float _3949 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2056 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_2030 / ((_2034 * _2034) * 3.141590118408203125));
        float _2057 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1977 = (((_2043 * cbLight._m0[_1992].x) * _2056) * _2057) + _1867;
        _1979 = (((_2043 * cbLight._m0[_1992].y) * _2056) * _2057) + _1869;
        _1981 = (((_2043 * cbLight._m0[_1992].z) * _2056) * _2057) + _1871;
    }
    float _2192;
    float _2194;
    float _2196;
    float _2198;
    float _2200;
    float _2202;
    if (_1514.y == 0u)
    {
        float _2132 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2133 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2132;
        float _2134 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2132;
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2132;
        uvec4 _2147 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2148 = _2147.x;
        uint _2159 = uint((float(_2147.y) * floor(float(uint(cbSceneParam._m0[85u].y * _377) / _2148))) + floor(float(uint(cbSceneParam._m0[85u].x * _376) / _2148)));
        float _2169 = (log2(_2135 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2170 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        uint _2173 = uint(isnan(14.0) ? _2170 : (isnan(_2170) ? 14.0 : min(_2170, 14.0)));
        uvec4 _2178 = texelFetch(g_lightClusterGridBuffer, int(((_2173 << 2u) + (_2159 << 6u)) >> 2u));
        uint _2179 = _2178.x;
        uint _2180 = _2147.z;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        float _2290;
        if (((((1u << ((_2180 >> 4u) & 15u)) + 4294967295u) & _2179) == 0u) || ((_2180 & 240u) == 0u))
        {
            _2280 = 0.0;
            _2282 = 0.0;
            _2284 = 0.0;
            _2286 = 0.0;
            _2288 = 0.0;
            _2290 = 0.0;
        }
        else
        {
            float _2281;
            float _2283;
            float _2285;
            float _2287;
            float _2289;
            float _2291;
            float _2433 = 0.0;
            float _2434 = 0.0;
            float _2435 = 0.0;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            uint _2439 = 0u;
            uint _2448;
            bool _2449;
            for (;;)
            {
                _2448 = texelFetch(g_lightClassification, int((((_2173 << 5u) + (_2159 << 9u)) + (_2439 << 2u)) >> 2u)).x;
                _2449 = _2448 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2449)
                {
                    frontier_phi_66_pred = _2433;
                    frontier_phi_66_pred_1 = _2438;
                    frontier_phi_66_pred_2 = _2437;
                    frontier_phi_66_pred_3 = _2436;
                    frontier_phi_66_pred_4 = _2435;
                    frontier_phi_66_pred_5 = _2434;
                }
                else
                {
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    uint _2584;
                    _2578 = _2433;
                    _2579 = _2434;
                    _2580 = _2435;
                    _2581 = _2436;
                    _2582 = _2437;
                    _2583 = _2438;
                    _2584 = _2448;
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    float _2510;
                    for (;;)
                    {
                        uint _2588 = uint(findLSB(_2584)) + (_2439 << 5u);
                        uint _2585 = (_2584 + 4294967295u) & _2584;
                        uint _2590 = _2588 * 48u;
                        vec4 _2604 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2590)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 3u)).x));
                        uint _2610 = (_2588 * 48u) + 4u;
                        vec4 _2623 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2610)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 3u)).x));
                        uint _2629 = (_2588 * 48u) + 8u;
                        vec3 _2640 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2629)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 2u)).x));
                        float _2644 = _2604.x - _2133;
                        float _2645 = _2604.y - _2134;
                        float _2646 = _2604.z - _2135;
                        float _2647 = dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646));
                        float _2650 = inversesqrt(_2647);
                        float _2651 = _2650 * _2644;
                        float _2652 = _2650 * _2645;
                        float _2653 = _2650 * _2646;
                        float _2654 = dot(vec3(_397, _400, _403), vec3(_2651, _2652, _2653));
                        float _2659 = 1.0 - (_2647 * _2604.w);
                        float _3975 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                        float _2660 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2661 = sqrt(_2647) * _2623.w;
                        float _2664 = 1.39999997615814208984375 / (_2661 + 1.39999997615814208984375);
                        float _2665 = _2664 * _2664;
                        float _2668 = ((1.0 - _2665) * _2654) + _2665;
                        float _2671 = _2661 * _2661;
                        float _2675 = ((isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0))) * _2660) / ((_2671 * 0.699999988079071044921875) + 1.0);
                        float _2679 = (-0.0) - _2133;
                        float _2680 = (-0.0) - _2134;
                        float _2681 = (-0.0) - _2135;
                        float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
                        float _2686 = _2685 * _2679;
                        float _2687 = _2685 * _2680;
                        float _2688 = _2685 * _2681;
                        float _2696 = exp2(log2(1.0 / ((_2671 * 3.5) + 5.0)) * 0.25);
                        float _2697 = 1.0 - _458;
                        float _2704 = sqrt(1.0 - ((1.0 - (_2697 * _2697)) * (1.0 - (_2696 * _2696))));
                        float _2705 = _2704 * _2704;
                        float _2706 = _2705 * _2705;
                        float _2707 = _2686 + _2651;
                        float _2708 = _2687 + _2652;
                        float _2709 = _2688 + _2653;
                        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
                        float _2717 = dot(vec3(_397, _400, _403), vec3(_2686, _2687, _2688));
                        float _3991 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2720 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2721 = dot(vec3(_397, _400, _403), vec3(_2713 * _2707, _2713 * _2708, _2713 * _2709));
                        float _4002 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                        float _2724 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2728 = ((_2724 * _2724) * (_2706 + (-1.0))) + 1.0;
                        float _2729 = _2664 * _2705;
                        float _2730 = _2729 * _2729;
                        float _2733 = ((1.0 - _2730) * _2654) + _2730;
                        float _4013 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2734 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2735 = 1.0 - _2705;
                        float _2745 = (0.5 / (((_2734 * ((_2720 * _2735) + _2705)) + 9.9999999392252902907785028219223e-09) + (((_2734 * _2735) + _2705) * _2720))) * _2734;
                        float _4024 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _2756 = (((_2706 * 3.1415927410125732421875) * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) / ((_2728 * _2728) * ((_2671 * 2.1991131305694580078125) + 3.141590118408203125))) * _2660;
                        _2508 = (_2675 * _2623.x) + _2581;
                        _2509 = (_2675 * _2623.y) + _2582;
                        _2510 = (_2675 * _2623.z) + _2583;
                        _2505 = (_2756 * _2640.x) + _2578;
                        _2506 = (_2756 * _2640.y) + _2579;
                        _2507 = (_2756 * _2640.z) + _2580;
                        if (_2585 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2578 = _2505;
                            _2579 = _2506;
                            _2580 = _2507;
                            _2581 = _2508;
                            _2582 = _2509;
                            _2583 = _2510;
                            _2584 = _2585;
                        }
                    }
                    frontier_phi_66_pred = _2505;
                    frontier_phi_66_pred_1 = _2510;
                    frontier_phi_66_pred_2 = _2509;
                    frontier_phi_66_pred_3 = _2508;
                    frontier_phi_66_pred_4 = _2507;
                    frontier_phi_66_pred_5 = _2506;
                }
                _2281 = frontier_phi_66_pred;
                _2291 = frontier_phi_66_pred_1;
                _2289 = frontier_phi_66_pred_2;
                _2287 = frontier_phi_66_pred_3;
                _2285 = frontier_phi_66_pred_4;
                _2283 = frontier_phi_66_pred_5;
                uint _2440 = _2439 + 1u;
                if (_2440 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2433 = _2281;
                    _2434 = _2283;
                    _2435 = _2285;
                    _2436 = _2287;
                    _2437 = _2289;
                    _2438 = _2291;
                    _2439 = _2440;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2280 = _2281;
            _2282 = _2283;
            _2284 = _2285;
            _2286 = _2287;
            _2288 = _2289;
            _2290 = _2291;
        }
        uvec4 _2294 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2295 = _2294.z;
        uint _2297 = (_2295 >> 8u) & 15u;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        if (((4294967295u << _2297) & _2179) == 0u)
        {
            _2401 = _2280;
            _2403 = _2282;
            _2405 = _2284;
            _2407 = _2286;
            _2409 = _2288;
            _2411 = _2290;
        }
        else
        {
            float _2426 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
            float _2427 = _2426 * _2133;
            float _2428 = _2426 * _2134;
            float _2429 = _2426 * _2135;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2297 < ((_2295 >> 12u) & 15u))
            {
                float _2402;
                float _2404;
                float _2406;
                float _2408;
                float _2410;
                float _2412;
                float _2561 = _2280;
                float _2562 = _2282;
                float _2563 = _2284;
                float _2564 = _2286;
                float _2565 = _2288;
                float _2566 = _2290;
                uint _2567 = _2297;
                uint _2576;
                bool _2577;
                for (;;)
                {
                    _2576 = texelFetch(g_lightClassification, int((((_2173 << 5u) + (_2159 << 9u)) + (_2567 << 2u)) >> 2u)).x;
                    _2577 = _2576 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2577)
                    {
                        frontier_phi_77_pred = _2566;
                        frontier_phi_77_pred_1 = _2565;
                        frontier_phi_77_pred_2 = _2564;
                        frontier_phi_77_pred_3 = _2563;
                        frontier_phi_77_pred_4 = _2562;
                        frontier_phi_77_pred_5 = _2561;
                    }
                    else
                    {
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _2783 = _2561;
                        float _2784 = _2562;
                        float _2785 = _2563;
                        float _2786 = _2564;
                        float _2787 = _2565;
                        float _2788 = _2566;
                        uint _2789 = _2576;
                        uint _2790;
                        vec4 _2815;
                        float _2816;
                        vec4 _2831;
                        vec3 _2843;
                        vec4 _2859;
                        vec4 _2875;
                        float _2922;
                        bool _2923;
                        for (;;)
                        {
                            uint _2800 = ((_2567 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2789));
                            _2790 = (_2789 + 4294967295u) & _2789;
                            uint _2802 = _2800 * 40u;
                            _2815 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 3u)).x));
                            _2816 = _2815.w;
                            uint _2818 = (_2800 * 40u) + 4u;
                            _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            uint _2833 = (_2800 * 40u) + 8u;
                            _2843 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x));
                            uint _2846 = (_2800 * 40u) + 16u;
                            _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            uint _2862 = (_2800 * 40u) + 20u;
                            _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            uint _2878 = (_2800 * 40u) + 24u;
                            vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2897 = (_2800 * 40u) + 28u;
                            vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            _2922 = fma(_2135, _2910.z, fma(_2134, _2910.y, _2910.x * _2133)) + _2910.w;
                            _2923 = !((fma(_2135, _2891.z, fma(_2134, _2891.y, _2891.x * _2133)) + _2891.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2923)
                            {
                                float _2950 = _2815.x - _2133;
                                float _2951 = _2815.y - _2134;
                                float _2952 = _2815.z - _2135;
                                float _2953 = dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952));
                                float _2956 = inversesqrt(_2953);
                                float _2957 = _2956 * _2950;
                                float _2958 = _2956 * _2951;
                                float _2959 = _2956 * _2952;
                                float _2963 = 1.0 - (_2953 / (_2816 * _2816));
                                float _4035 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                                float _2964 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _2968 = sqrt(_2953) * _2831.w;
                                float _2970 = 1.39999997615814208984375 / (_2968 + 1.39999997615814208984375);
                                float _2971 = _2970 * _2970;
                                float _2974 = ((1.0 - _2971) * dot(vec3(_2957, _2958, _2959), vec3(_397, _400, _403))) + _2971;
                                float _2977 = _2968 * _2968;
                                float _2981 = (fma(_2135, _2859.z, fma(_2134, _2859.y, _2859.x * _2133)) + _2859.w) / _2922;
                                float _2982 = (fma(_2135, _2875.z, fma(_2134, _2875.y, _2875.x * _2133)) + _2875.w) / _2922;
                                float _2986 = 1.0 - dot(vec2(_2981, _2982), vec2(_2981, _2982));
                                float _4051 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2987 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _2988 = _2987 * (((isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))) * _2964) / ((_2977 * 0.699999988079071044921875) + 1.0));
                                float _3000 = exp2(log2(1.0 / ((_2977 * 3.5) + 5.0)) * 0.25);
                                float _3001 = 1.0 - _458;
                                float _3008 = sqrt(1.0 - ((1.0 - (_3001 * _3001)) * (1.0 - (_3000 * _3000))));
                                float _3009 = _3008 * _3008;
                                float _3010 = _3009 * _3009;
                                float _3011 = _2957 - _2427;
                                float _3012 = _2958 - _2428;
                                float _3013 = _2959 - _2429;
                                float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
                                float _3021 = dot(vec3(_397, _400, _403), vec3((-0.0) - _2427, (-0.0) - _2428, (-0.0) - _2429));
                                float _4062 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3024 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3025 = dot(vec3(_397, _400, _403), vec3(_3017 * _3011, _3017 * _3012, _3017 * _3013));
                                float _4073 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3028 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3032 = ((_3028 * _3028) * (_3010 + (-1.0))) + 1.0;
                                float _3033 = _2970 * _3009;
                                float _3034 = _3033 * _3033;
                                float _3040 = ((1.0 - _3034) * dot(vec3(_397, _400, _403), vec3(_2957, _2958, _2959))) + _3034;
                                float _4084 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3041 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3042 = 1.0 - _3009;
                                float _3052 = (0.5 / (((_3041 * ((_3024 * _3042) + _3009)) + 9.9999999392252902907785028219223e-09) + (((_3041 * _3042) + _3009) * _3024))) * _3041;
                                float _4095 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3062 = (_2987 * _2964) * (((_3010 * 3.1415927410125732421875) * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) / ((_3032 * _3032) * ((_2977 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2988 * _2831.y;
                                frontier_phi_83_pred_1 = _2988 * _2831.x;
                                frontier_phi_83_pred_2 = _3062 * _2843.z;
                                frontier_phi_83_pred_3 = _3062 * _2843.y;
                                frontier_phi_83_pred_4 = _3062 * _2843.x;
                                frontier_phi_83_pred_5 = _2988 * _2831.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3070 = frontier_phi_83_pred;
                            _3069 = frontier_phi_83_pred_1;
                            _3068 = frontier_phi_83_pred_2;
                            _3067 = frontier_phi_83_pred_3;
                            _3066 = frontier_phi_83_pred_4;
                            _3071 = frontier_phi_83_pred_5;
                            _2773 = _3069 + _2786;
                            _2774 = _3070 + _2787;
                            _2775 = _3071 + _2788;
                            _2770 = _3066 + _2783;
                            _2771 = _3067 + _2784;
                            _2772 = _3068 + _2785;
                            if (_2790 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2790;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2775;
                        frontier_phi_77_pred_1 = _2774;
                        frontier_phi_77_pred_2 = _2773;
                        frontier_phi_77_pred_3 = _2772;
                        frontier_phi_77_pred_4 = _2771;
                        frontier_phi_77_pred_5 = _2770;
                    }
                    _2412 = frontier_phi_77_pred;
                    _2410 = frontier_phi_77_pred_1;
                    _2408 = frontier_phi_77_pred_2;
                    _2406 = frontier_phi_77_pred_3;
                    _2404 = frontier_phi_77_pred_4;
                    _2402 = frontier_phi_77_pred_5;
                    uint _2568 = _2567 + 1u;
                    if (_2568 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2561 = _2402;
                        _2562 = _2404;
                        _2563 = _2406;
                        _2564 = _2408;
                        _2565 = _2410;
                        _2566 = _2412;
                        _2567 = _2568;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2406;
                frontier_phi_58_59_ladder_1 = _2412;
                frontier_phi_58_59_ladder_2 = _2410;
                frontier_phi_58_59_ladder_3 = _2408;
                frontier_phi_58_59_ladder_4 = _2404;
                frontier_phi_58_59_ladder_5 = _2402;
            }
            else
            {
                frontier_phi_58_59_ladder = _2284;
                frontier_phi_58_59_ladder_1 = _2290;
                frontier_phi_58_59_ladder_2 = _2288;
                frontier_phi_58_59_ladder_3 = _2286;
                frontier_phi_58_59_ladder_4 = _2282;
                frontier_phi_58_59_ladder_5 = _2280;
            }
            _2401 = frontier_phi_58_59_ladder_5;
            _2403 = frontier_phi_58_59_ladder_4;
            _2405 = frontier_phi_58_59_ladder;
            _2407 = frontier_phi_58_59_ladder_3;
            _2409 = frontier_phi_58_59_ladder_2;
            _2411 = frontier_phi_58_59_ladder_1;
        }
        float _2416 = isnan(1.0) ? _442 : (isnan(_442) ? 1.0 : min(_442, 1.0));
        _2192 = (_2416 * _2407) + _1647;
        _2194 = (_2416 * _2409) + _1649;
        _2196 = (_2416 * _2411) + _1651;
        _2198 = ((_2401 * 0.039999999105930328369140625) * _2416) + _1977;
        _2200 = ((_2403 * 0.039999999105930328369140625) * _2416) + _1979;
        _2202 = ((_2405 * 0.039999999105930328369140625) * _2416) + _1981;
    }
    else
    {
        _2192 = _1647;
        _2194 = _1649;
        _2196 = _1651;
        _2198 = _1977;
        _2200 = _1979;
        _2202 = _1981;
    }
    float _4111 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _4122 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _4133 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _2219 = ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2192 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _442))) + ((_2198 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1281)) * cbPerFrame._m0[3u].x);
    float _2220 = ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2194 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _442))) + ((_2200 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1281)) * cbPerFrame._m0[3u].x);
    float _2221 = ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2196 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _442))) + ((_2202 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1281)) * cbPerFrame._m0[3u].x);
    uint _2222 = _416 + 6u;
    float _2230 = _376 / cbSceneParam._m0[86u].x;
    float _2231 = _377 / cbSceneParam._m0[86u].y;
    vec4 _2245 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2230, _2231, (log2((isnan(cbSceneParam._m0[77u].w) ? _296 : (isnan(_296) ? cbSceneParam._m0[77u].w : min(_296, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2247 = _2245.x;
    float _2248 = _2245.y;
    float _2249 = _2245.z;
    float _2250 = _2245.w;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    if (_296 > cbSceneParam._m0[78u].w)
    {
        float _2305 = isnan(_296) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _296 : min(cbSceneParam._m0[80u].w, _296));
        float _2306 = _2305 / _296;
        float _2317 = _2306 * _348;
        float _2318 = _349 * _2306;
        float _2319 = (-0.0) - _2318;
        float _2321 = _2306 * _350;
        float _2323 = (cbSceneParam._m0[77u].w * _2319) / _2305;
        float _2324 = _2323 + cbSceneParam._m0[79u].w;
        float _2325 = cbSceneParam._m0[79u].w - _2318;
        float _2331 = sqrt(((_2317 * _2317) + (_2318 * _2318)) + (_2321 * _2321));
        float _2334 = (1.0 - (cbSceneParam._m0[77u].w / _2305)) * _2331;
        float _2339 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2341 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2518;
        if (abs((_2319 - _2323) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2518 = ((((_2324 > 0.0) ? exp2(_2339 * _2324) : (2.0 - exp2(_2341 * _2324))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2334;
        }
        else
        {
            float _2462 = 1.0 / cbSceneParam._m0[80u].x;
            float _2463 = isnan(_2325) ? _2324 : (isnan(_2324) ? _2325 : max(_2324, _2325));
            float _2464 = isnan(_2325) ? _2324 : (isnan(_2324) ? _2325 : min(_2324, _2325));
            float _2473 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : min(_2463, 0.0));
            float _2474 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : min(_2464, 0.0));
            _2518 = ((abs(_2331 / _2319) * cbSceneParam._m0[80u].y) * ((((_2473 - _2474) * 2.0) - ((exp2(_2339 * (isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0)))) - exp2(_2339 * (isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0))))) * _2462)) - ((exp2(_2341 * _2473) - exp2(_2341 * _2474)) * _2462))) + (_2334 * cbSceneParam._m0[80u].z);
        }
        vec4 _2520 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2230, _2231, 1.0), 0.0);
        float _2529 = exp2((_2518 * (-1.44269502162933349609375)) * (1.0 - _2520.w));
        float _2530 = log2(_2529);
        float _2546 = log2(_2250);
        _2343 = (exp2(_2546 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2530 * cbSceneParam._m0[78u].x)) * _2520.x) / cbSceneParam._m0[78u].x)) + _2247;
        _2345 = (exp2(_2546 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2530 * cbSceneParam._m0[78u].y)) * _2520.y) / cbSceneParam._m0[78u].y)) + _2248;
        _2347 = (exp2(_2546 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2530 * cbSceneParam._m0[78u].z)) * _2520.z) / cbSceneParam._m0[78u].z)) + _2249;
        _2349 = _2529 * _2250;
    }
    else
    {
        _2343 = _2247;
        _2345 = _2248;
        _2347 = _2249;
        _2349 = _2250;
    }
    bool _2556;
    vec4 _2359;
    vec4 _2381;
    float _2383;
    float _2387;
    float _2388;
    float _2389;
    float _2390;
    bool _2400;
    for (;;)
    {
        _2359 = cbMatDynParam._m0[0u];
        float _2361 = roundEven(_2359.y);
        bool _2362 = _2361 == 3.0;
        float _2363 = log2(_2349);
        float _2370 = exp2(_2363 * cbSceneParam._m0[78u].x) * _2219;
        float _2371 = exp2(_2363 * cbSceneParam._m0[78u].y) * _2220;
        float _2372 = exp2(_2363 * cbSceneParam._m0[78u].z) * _2221;
        float _2379 = _364 + (-0.5);
        _2381 = cbMtdParam._m0[1u];
        _2383 = _2381.y * _2379;
        float _2386 = (_2361 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2387 = _2386 * (_2362 ? _2370 : (_2370 + (cbSceneParam._m0[72u].w * _2343)));
        _2388 = _2386 * (_2362 ? _2371 : (_2371 + (cbSceneParam._m0[72u].w * _2345)));
        _2389 = _2386 * (_2362 ? _2372 : (_2372 + (cbSceneParam._m0[72u].w * _2347)));
        _2390 = _2379 * 0.999000012874603271484375;
        _2400 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2400)
        {
            if ((cbInstanceData._m0[_416 + 7u].x + _2390) < 0.5)
            {
                _2556 = true;
                break;
            }
        }
        uint _2497 = _418 + uint(_2359.w);
        if ((cbInstanceData._m0[_2497].w < 1.0) && ((cbInstanceData._m0[_2497].w + _2390) < 0.5))
        {
            _2556 = true;
            break;
        }
        if ((_2383 + _228) < _2381.x)
        {
            _2556 = true;
            break;
        }
        _2556 = false;
        break;
    }
    float _2761;
    if (_2556)
    {
        discard_state = true;
        _2761 = 0.0;
    }
    else
    {
        _2761 = cbInstanceData._m0[_2222].w;
    }
    SV_Target.x = _2387;
    SV_Target.y = _2388;
    SV_Target.z = _2389;
    SV_Target.w = _2761;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2222].w;
    discard_exit();
}


