#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 NORMAL;
layout(location = 2) in vec4 TANGENT;
layout(location = 3) in vec3 TEXCOORD;
layout(location = 3, component = 3) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _129 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _130 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _131 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _136 = inversesqrt(dot(vec3(_129, _130, _131), vec3(_129, _130, _131)));
    float _143 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _150 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _173 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _179 = _173.w;
    float _180 = _173.x * cbMtdParam._m0[9u].x;
    float _181 = _173.y * cbMtdParam._m0[9u].y;
    float _182 = _173.z * cbMtdParam._m0[9u].z;
    vec4 _194 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _198 = _194.z;
    float _202 = (_194.x * 2.0) + (-1.0);
    float _204 = (_194.y * 2.0) + (-1.0);
    float _205 = dot(vec2(_202, _204), vec2(_202, _204));
    float _419 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _211 = sqrt(1.0 - (isnan(1.0) ? _419 : (isnan(_419) ? 1.0 : min(_419, 1.0))));
    float _220 = fma(_211, _143 * NORMAL.x, fma(_204, _150 * TANGENT.x, (_136 * _129) * _202));
    float _223 = fma(_211, _143 * NORMAL.y, fma(_204, _150 * TANGENT.y, (_136 * _130) * _202));
    float _226 = fma(_211, _143 * NORMAL.z, fma(_204, _150 * TANGENT.z, (_136 * _131) * _202));
    float _230 = inversesqrt(dot(vec3(_220, _223, _226), vec3(_220, _223, _226)));
    float _430 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _441 = isnan(0.0) ? _180 : (isnan(_180) ? 0.0 : max(_180, 0.0));
    float _232 = isnan(1.0) ? _441 : (isnan(_441) ? 1.0 : min(_441, 1.0));
    float _452 = isnan(0.0) ? _181 : (isnan(_181) ? 0.0 : max(_181, 0.0));
    float _233 = isnan(1.0) ? _452 : (isnan(_452) ? 1.0 : min(_452, 1.0));
    float _463 = isnan(0.0) ? _182 : (isnan(_182) ? 0.0 : max(_182, 0.0));
    float _234 = isnan(1.0) ? _463 : (isnan(_463) ? 1.0 : min(_463, 1.0));
    uint _236 = uint(roundEven(NORMAL.w));
    vec4 _241 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _243 = _241.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _309 = (cbMatDynParam._m0[5u].x * TEXCOORD_8) + cbMatDynParam._m0[5u].y;
        float _474 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
        float _310 = isnan(1.0) ? _474 : (isnan(_474) ? 1.0 : min(_474, 1.0));
        float _314 = (cbMatDynParam._m0[5u].z * TEXCOORD_8) + cbMatDynParam._m0[5u].w;
        float _485 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _485 : (isnan(_485) ? 1.0 : min(_485, 1.0))) - _310)) + _310) < ((_243 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _343;
    uint _263;
    vec4 _268;
    float _275;
    float _276;
    float _277;
    float _281;
    float _282;
    float _283;
    float _284;
    vec4 _288;
    float _290;
    float _291;
    bool _302;
    for (;;)
    {
        _263 = _236 * 13u;
        _268 = cbInstanceData._m0[(_263 + 9u) + uint(cbMatDynParam._m0[0u].w)];
        float _272 = (cbMtdParam._m0[0u].x * _232) * _268.x;
        float _273 = (cbMtdParam._m0[0u].y * _233) * _268.y;
        float _274 = (cbMtdParam._m0[0u].z * _234) * _268.z;
        float _496 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
        _275 = isnan(1.0) ? _496 : (isnan(_496) ? 1.0 : min(_496, 1.0));
        float _507 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
        _276 = isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0));
        float _518 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
        _277 = isnan(1.0) ? _518 : (isnan(_518) ? 1.0 : min(_518, 1.0));
        _281 = cbInstanceData._m0[_263 + 6u].w;
        _282 = _281 * cbMtdParam._m0[10u].x;
        _283 = _281 * cbMtdParam._m0[10u].y;
        _284 = _281 * cbMtdParam._m0[10u].z;
        float _285 = _243 + (-0.5);
        _288 = cbMtdParam._m0[1u];
        _290 = _288.y * _285;
        _291 = _285 * 0.999000012874603271484375;
        _302 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_302)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _291) < 0.5)
            {
                _343 = true;
                break;
            }
        }
        if ((_268.w < 1.0) && ((_268.w + _291) < 0.5))
        {
            _343 = true;
            break;
        }
        if ((_290 + _179) < _288.x)
        {
            _343 = true;
            break;
        }
        _343 = false;
        break;
    }
    if (_343)
    {
        discard_state = true;
    }
    float _370;
    float _371;
    float _372;
    float _373;
    if (cbMtdParam._m0[1u].z != 0.0)
    {
        _370 = _281;
        _371 = _284;
        _372 = _283;
        _373 = _282;
    }
    else
    {
        _370 = 0.0;
        _371 = float(floatBitsToUint(cbInstanceData._m0[_263 + 5u]).x) * 0.0039215688593685626983642578125;
        _372 = TEXCOORD.z;
        _373 = 0.0;
    }
    SV_Target.x = ((_220 * 0.5) * _230) + 0.500488758087158203125;
    SV_Target.y = ((_223 * 0.5) * _230) + 0.500488758087158203125;
    SV_Target.z = ((_226 * 0.5) * _230) + 0.500488758087158203125;
    SV_Target.w = _373;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = isnan(1.0) ? _430 : (isnan(_430) ? 1.0 : min(_430, 1.0));
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _372;
    SV_Target_2.x = _275;
    SV_Target_2.y = _276;
    SV_Target_2.z = _277;
    SV_Target_2.w = _371;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _370;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = _370;
    discard_exit();
}


