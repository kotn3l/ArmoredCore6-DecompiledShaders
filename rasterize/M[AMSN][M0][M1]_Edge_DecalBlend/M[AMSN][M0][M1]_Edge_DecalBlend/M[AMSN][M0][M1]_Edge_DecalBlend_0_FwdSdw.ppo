#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _836;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _246 = _244.x;
    vec4 _258 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3456 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))));
    float _278 = fma(_275, _194 * NORMAL.x, fma(_268, _201 * TANGENT.x, (_187 * _180) * _266));
    float _281 = fma(_275, _194 * NORMAL.y, fma(_268, _201 * TANGENT.y, (_187 * _181) * _266));
    float _284 = fma(_275, _194 * NORMAL.z, fma(_268, _201 * TANGENT.z, (_187 * _182) * _266));
    float _288 = inversesqrt(dot(vec3(_278, _281, _284), vec3(_278, _281, _284)));
    float _289 = _288 * _278;
    float _290 = _288 * _281;
    float _291 = _288 * _284;
    float _3467 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _292 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3489 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3500 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3511 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _296 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _312 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    float _379 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _380 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _401 = fma(_291, cbSceneParam._m0[5u].z, fma(_290, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _289));
    float _404 = fma(_291, cbSceneParam._m0[6u].z, fma(_290, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _289));
    float _407 = fma(_291, cbSceneParam._m0[7u].z, fma(_290, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _289));
    uint _420 = uint(roundEven(NORMAL.w)) * 13u;
    uint _423 = (_420 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _429 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_423].x;
    float _430 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_423].y;
    float _431 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_423].z;
    float _3522 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _435 = 1.0 - _296;
    float _436 = _432 * _435;
    float _437 = _433 * _435;
    float _438 = _434 * _435;
    float _443 = (_432 + (-0.039999999105930328369140625)) * _296;
    float _444 = (_433 + (-0.039999999105930328369140625)) * _296;
    float _445 = (_434 + (-0.039999999105930328369140625)) * _296;
    float _446 = _443 + 0.039999999105930328369140625;
    float _448 = _444 + 0.039999999105930328369140625;
    float _449 = _445 + 0.039999999105930328369140625;
    vec4 _458 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _379, cbSceneParam._m0[86u].y * _380));
    float _461 = _458.x * TEXCOORD.z;
    float _462 = dot(vec3(_289, _290, _291), vec3(_371, _372, _373));
    float _465 = _462 * 2.0;
    float _469 = (_465 * _289) - _371;
    float _470 = (_465 * _290) - _372;
    float _471 = (_465 * _291) - _373;
    float _475 = abs(dot(vec3(_371, _372, _373), vec3(_289, _290, _291)));
    float _3555 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _477 = sqrt(_292);
    float _490 = exp2((_477 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_477 * 3.0));
    float _496 = (1.0 - _490) * ((_477 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _497 = _490 * _477;
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _835;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _560 = fma(_533, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _525));
        float _564 = fma(_533, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _525));
        float _568 = fma(_533, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _525));
        float _593 = _525 + _289;
        float _594 = _529 + _290;
        float _595 = _533 + _291;
        float _605 = fma(_595, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _593)) - _560;
        float _606 = fma(_595, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _593)) - _564;
        float _607 = fma(_595, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _593)) - _568;
        float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
        float _624 = ((_611 * _605) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_560 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _625 = ((_611 * _606) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_564 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _626 = ((_611 * _607) / cbModelParam._m0[34u].z) + ((((((_568 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        float _663 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _664 = _663 * (_629.x + (-0.5));
        float _665 = _663 * (_629.y + (-0.5));
        float _666 = _663 * (_629.z + (-0.5));
        float _673 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_636.x + (-0.5));
        float _675 = _673 * (_636.y + (-0.5));
        float _676 = _673 * (_636.z + (-0.5));
        float _683 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_643.x + (-0.5));
        float _685 = _683 * (_643.y + (-0.5));
        float _686 = _683 * (_643.z + (-0.5));
        float _693 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_650.x + (-0.5));
        float _695 = _693 * (_650.y + (-0.5));
        float _696 = _693 * (_650.z + (-0.5));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _699 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _700 = _664 * 0.5;
        float _701 = _674 * 0.5;
        float _702 = _684 * 0.5;
        float _703 = dot(vec3(_700, _701, _702), vec3(_700, _701, _702));
        float _708 = (_703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_703);
        float _717 = (dot(vec3(_289, _290, _291), vec3(_708 * _700, _708 * _701, _708 * _702)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _727 = sqrt(((_701 * _701) + (_700 * _700)) + (_702 * _702)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _729 = _728 * 2.0;
        float _733 = (1.0 - _728) / (_728 + 1.0);
        float _3603 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _743 = ((((1.0 - _734) * (_729 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_729 + 1.0))) + _734) * _697;
        float _744 = _665 * 0.5;
        float _745 = _675 * 0.5;
        float _746 = _685 * 0.5;
        float _747 = dot(vec3(_744, _745, _746), vec3(_744, _745, _746));
        float _752 = (_747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_747);
        float _760 = (dot(vec3(_289, _290, _291), vec3(_752 * _744, _752 * _745, _752 * _746)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _769 = sqrt(((_745 * _745) + (_744 * _744)) + (_746 * _746)) / (_698 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _771 = _770 * 2.0;
        float _775 = (1.0 - _770) / (_770 + 1.0);
        float _3636 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _785 = ((((1.0 - _776) * (_771 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_771 + 1.0))) + _776) * _698;
        float _786 = _666 * 0.5;
        float _787 = _676 * 0.5;
        float _788 = _686 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _802 = (dot(vec3(_289, _290, _291), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _811 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_699 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3669 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_813 + 1.0))) + _818) * _699;
        _835 = _666;
        _837 = _665;
        _838 = _664;
        _839 = _676;
        _840 = _675;
        _841 = _674;
        _842 = _686;
        _843 = _685;
        _844 = _684;
        _845 = _699;
        _846 = _698;
        _847 = _697;
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0)));
        _849 = cbModelParam._m0[36u].z * (isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0)));
        _850 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
    }
    else
    {
        _835 = _836;
        _837 = _836;
        _838 = _836;
        _839 = _836;
        _840 = _836;
        _841 = _836;
        _842 = _836;
        _843 = _836;
        _844 = _836;
        _845 = _836;
        _846 = _836;
        _847 = _836;
        _848 = 0.0;
        _849 = 0.0;
        _850 = 0.0;
    }
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _876 = fma(_533, cbModelParam._m0[30u].z, fma(_529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _525));
        float _880 = fma(_533, cbModelParam._m0[31u].z, fma(_529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _525));
        float _884 = fma(_533, cbModelParam._m0[32u].z, fma(_529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _525));
        float _907 = _525 + _289;
        float _908 = _529 + _290;
        float _909 = _533 + _291;
        float _919 = fma(_909, cbModelParam._m0[30u].z, fma(_908, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _907)) - _876;
        float _920 = fma(_909, cbModelParam._m0[31u].z, fma(_908, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _907)) - _880;
        float _921 = fma(_909, cbModelParam._m0[32u].z, fma(_908, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _907)) - _884;
        float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
        float _938 = ((_925 * _919) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_876 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_925 * _920) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_880 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_925 * _921) / cbModelParam._m0[35u].z) + ((((((_884 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        float _975 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_942.x + (-0.5));
        float _977 = _975 * (_942.y + (-0.5));
        float _978 = _975 * (_942.z + (-0.5));
        float _985 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_949.x + (-0.5));
        float _987 = _985 * (_949.y + (-0.5));
        float _988 = _985 * (_949.z + (-0.5));
        float _995 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_956.x + (-0.5));
        float _997 = _995 * (_956.y + (-0.5));
        float _998 = _995 * (_956.z + (-0.5));
        float _1005 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_963.x + (-0.5));
        float _1007 = _1005 * (_963.y + (-0.5));
        float _1008 = _1005 * (_963.z + (-0.5));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = _976 * 0.5;
        float _1013 = _986 * 0.5;
        float _1014 = _996 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_289, _290, _291), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3732 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1039 + 1.0))) + _1044) * _1009;
        float _1054 = _977 * 0.5;
        float _1055 = _987 * 0.5;
        float _1056 = _997 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_289, _290, _291), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3765 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1081 + 1.0))) + _1086) * _1010;
        float _1096 = _978 * 0.5;
        float _1097 = _988 * 0.5;
        float _1098 = _998 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_289, _290, _291), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3798 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1123 + 1.0))) + _1128) * _1011;
        _1145 = _978;
        _1146 = _977;
        _1147 = _976;
        _1148 = _988;
        _1149 = _987;
        _1150 = _986;
        _1151 = _998;
        _1152 = _997;
        _1153 = _996;
        _1154 = _1011;
        _1155 = _1010;
        _1156 = _1009;
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1158 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1159 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
    }
    else
    {
        _1145 = _836;
        _1146 = _836;
        _1147 = _836;
        _1148 = _836;
        _1149 = _836;
        _1150 = _836;
        _1151 = _836;
        _1152 = _836;
        _1153 = _836;
        _1154 = _836;
        _1155 = _836;
        _1156 = _836;
        _1157 = 0.0;
        _1158 = 0.0;
        _1159 = 0.0;
    }
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _848)) + _848;
    float _1170 = (cbModelParam._m0[1u].x * (_1158 - _849)) + _849;
    float _1171 = (cbModelParam._m0[1u].x * (_1159 - _850)) + _850;
    float _1192 = fma(_1171, cbSceneParam._m0[89u].z, fma(_1170, cbSceneParam._m0[89u].y, _1169 * cbSceneParam._m0[89u].x));
    float _1195 = fma(_1171, cbSceneParam._m0[90u].z, fma(_1170, cbSceneParam._m0[90u].y, _1169 * cbSceneParam._m0[90u].x));
    float _1198 = fma(_1171, cbSceneParam._m0[91u].z, fma(_1170, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1169));
    float _1213 = _469 * 0.5;
    float _1214 = _470 * 0.5;
    float _1215 = _471 * 0.5;
    float _1216 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1147, _1150, _1153, _1156));
    float _1219 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1146, _1149, _1152, _1155));
    float _1222 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1256;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1229 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_835, _839, _842, _845));
        float _1233 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_837, _840, _843, _846));
        float _1237 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_838, _841, _844, _847));
        float _1244 = dot(vec4(cbModelParam._m0[39u]), vec4(_1213, _1214, _1215, 1.0));
        _1256 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1244) ? 0.0 : (isnan(0.0) ? _1244 : max(0.0, _1244))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1256 = 1.0;
    }
    float _1267;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1258 = dot(vec4(cbModelParam._m0[40u]), vec4(_1213, _1214, _1215, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)), isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1271 = (_1267 * cbModelParam._m0[1u].x) + (_1256 * (1.0 - cbModelParam._m0[1u].x));
    float _1281 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _292);
    float _1282 = isnan(_1281) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1281 : min(cbModelParam._m0[25u].z, _1281));
    float _1364;
    float _1366;
    float _1368;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1331 = fma(_533, cbModelParam._m0[13u].z, fma(_529, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525)) + cbModelParam._m0[13u].w;
        float _1335 = fma(_533, cbModelParam._m0[14u].z, fma(_529, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525)) + cbModelParam._m0[14u].w;
        float _1339 = fma(_533, cbModelParam._m0[15u].z, fma(_529, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525)) + cbModelParam._m0[15u].w;
        float _1342 = fma(_471, cbModelParam._m0[13u].z, fma(_470, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _469));
        float _1345 = fma(_471, cbModelParam._m0[14u].z, fma(_470, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _469));
        float _1348 = fma(_471, cbModelParam._m0[15u].z, fma(_470, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _469));
        float _1376;
        if (_1342 > 0.0)
        {
            _1376 = abs((1.0 - _1331) / _1342);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1331 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1376 = frontier_phi_14_12_ladder;
        }
        float _1552;
        if (_1345 > 0.0)
        {
            _1552 = abs((1.0 - _1335) / _1345);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1335 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1552 = frontier_phi_23_19_ladder;
        }
        float _1848;
        if (_1348 > 0.0)
        {
            _1848 = abs((1.0 - _1339) / _1348);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1339 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1848 = frontier_phi_35_30_ladder;
        }
        float _1850 = isnan(_1552) ? _1376 : (isnan(_1376) ? _1552 : min(_1376, _1552));
        float _1851 = isnan(_1848) ? _1850 : (isnan(_1850) ? _1848 : min(_1850, _1848));
        float _1855 = (_1851 * _1342) + _1331;
        float _1856 = (_1851 * _1345) + _1335;
        float _1857 = (_1851 * _1348) + _1339;
        float _1858 = _1851 * 9.9999997473787516355514526367188e-05;
        float _1860 = (-1.0) - _1858;
        float _1862 = _1858 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1857 > _1862) || ((_1857 < _1860) || ((_1856 > _1862) || ((_1856 < _1860) || ((_1855 < _1860) || (_1855 > _1862))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2002 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1857, cbModelParam._m0[9u].z, fma(_1856, cbModelParam._m0[9u].y, _1855 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1857, cbModelParam._m0[10u].z, fma(_1856, cbModelParam._m0[10u].y, _1855 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1857, cbModelParam._m0[11u].z, fma(_1856, cbModelParam._m0[11u].y, _1855 * cbModelParam._m0[11u].x))), _1282);
            frontier_phi_13_35_ladder = _2002.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2002.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2002.x * cbModelParam._m0[1u].y;
        }
        _1364 = frontier_phi_13_35_ladder_2;
        _1366 = frontier_phi_13_35_ladder_1;
        _1368 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1352 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_469, _470, _471), _1282);
        _1364 = _1352.x * cbModelParam._m0[1u].y;
        _1366 = _1352.y * cbModelParam._m0[1u].y;
        _1368 = _1352.z * cbModelParam._m0[1u].y;
    }
    float _1372 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _292);
    float _1373 = isnan(_1372) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1372 : min(cbModelParam._m0[25u].w, _1372));
    float _1466;
    float _1468;
    float _1470;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1430 = fma(_533, cbModelParam._m0[21u].z, fma(_529, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525)) + cbModelParam._m0[21u].w;
        float _1434 = fma(_533, cbModelParam._m0[22u].z, fma(_529, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525)) + cbModelParam._m0[22u].w;
        float _1438 = fma(_533, cbModelParam._m0[23u].z, fma(_529, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525)) + cbModelParam._m0[23u].w;
        float _1441 = fma(_471, cbModelParam._m0[21u].z, fma(_470, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _469));
        float _1444 = fma(_471, cbModelParam._m0[22u].z, fma(_470, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _469));
        float _1447 = fma(_471, cbModelParam._m0[23u].z, fma(_470, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _469));
        float _1557;
        if (_1441 > 0.0)
        {
            _1557 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1557 = frontier_phi_25_21_ladder;
        }
        float _1875;
        if (_1444 > 0.0)
        {
            _1875 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1875 = frontier_phi_37_32_ladder;
        }
        float _2213;
        if (_1447 > 0.0)
        {
            _2213 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2213 = frontier_phi_47_44_ladder;
        }
        float _2215 = isnan(_1875) ? _1557 : (isnan(_1557) ? _1875 : min(_1557, _1875));
        float _2216 = isnan(_2213) ? _2215 : (isnan(_2215) ? _2213 : min(_2215, _2213));
        float _2220 = (_2216 * _1441) + _1430;
        float _2221 = (_2216 * _1444) + _1434;
        float _2222 = (_2216 * _1447) + _1438;
        float _2223 = _2216 * 9.9999997473787516355514526367188e-05;
        float _2224 = (-1.0) - _2223;
        float _2226 = _2223 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2222 > _2226) || ((_2222 < _2224) || ((_2221 > _2226) || ((_2221 < _2224) || ((_2220 < _2224) || (_2220 > _2226))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2344 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2222, cbModelParam._m0[17u].z, fma(_2221, cbModelParam._m0[17u].y, _2220 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2222, cbModelParam._m0[18u].z, fma(_2221, cbModelParam._m0[18u].y, _2220 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2222, cbModelParam._m0[19u].z, fma(_2221, cbModelParam._m0[19u].y, _2220 * cbModelParam._m0[19u].x))), _1373);
            frontier_phi_22_47_ladder = _2344.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2344.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2344.x * cbModelParam._m0[1u].z;
        }
        _1466 = frontier_phi_22_47_ladder_2;
        _1468 = frontier_phi_22_47_ladder_1;
        _1470 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1450 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_469, _470, _471), _1373);
        _1466 = _1450.x * cbModelParam._m0[1u].z;
        _1468 = _1450.y * cbModelParam._m0[1u].z;
        _1470 = _1450.z * cbModelParam._m0[1u].z;
    }
    float _1483 = (((_496 * _446) + _497) * _461) * ((cbModelParam._m0[1u].w * (_1466 - _1364)) + _1364);
    float _1485 = (((_496 * _448) + _497) * _461) * ((cbModelParam._m0[1u].w * (_1468 - _1366)) + _1366);
    float _1487 = (((_496 * _449) + _497) * _461) * ((cbModelParam._m0[1u].w * (_1470 - _1368)) + _1368);
    float _1490 = fma(_1487, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1483 * cbSceneParam._m0[89u].x));
    float _1493 = fma(_1487, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1483 * cbSceneParam._m0[90u].x));
    float _1496 = fma(_1487, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, _1483 * cbSceneParam._m0[91u].x));
    float _1531 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1535 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1539 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1543 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1544 = _1531 / _1543;
    float _1545 = _1535 / _1543;
    float _1546 = _1539 / _1543;
    float _1693;
    float _1694;
    float _1695;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1573 = ((uint(_1546 > cbSceneParam._m0[59u].y) + uint(_1546 > cbSceneParam._m0[59u].x)) + uint(_1546 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1574 = _1573 + 43u;
        uint _1582 = _1573 + 44u;
        uint _1590 = _1573 + 45u;
        uint _1598 = _1573 + 46u;
        float _1609 = fma(_1543, cbSceneParam._m0[_1574].w, fma(_1539, cbSceneParam._m0[_1574].z, fma(_1535, cbSceneParam._m0[_1574].y, _1531 * cbSceneParam._m0[_1574].x)));
        float _1613 = fma(_1543, cbSceneParam._m0[_1582].w, fma(_1539, cbSceneParam._m0[_1582].z, fma(_1535, cbSceneParam._m0[_1582].y, _1531 * cbSceneParam._m0[_1582].x)));
        float _1621 = fma(_1543, cbSceneParam._m0[_1598].w, fma(_1539, cbSceneParam._m0[_1598].z, fma(_1535, cbSceneParam._m0[_1598].y, _1531 * cbSceneParam._m0[_1598].x)));
        float _1626 = cbSceneParam._m0[33u].z * _1621;
        float _1628 = cbSceneParam._m0[33u].w * _1621;
        float _1631 = fma(_1543, cbSceneParam._m0[_1590].w, fma(_1539, cbSceneParam._m0[_1590].z, fma(_1535, cbSceneParam._m0[_1590].y, _1531 * cbSceneParam._m0[_1590].x))) / _1621;
        float _1679 = (cbSceneParam._m0[33u].x - sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546))) * cbSceneParam._m0[33u].y;
        float _3924 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1686 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1626 + _1609) / _1621, (_1628 + _1613) / _1621), _1631), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1628 + _1609) / _1621, (_1613 - _1626) / _1621), _1631), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1609 - _1626) / _1621, (_1613 - _1628) / _1621), _1631), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1609 - _1628) / _1621, (_1626 + _1613) / _1621), _1631), 0.0)).x), vec4(0.25)));
        _1693 = 1.0 - (_1686 * cbSceneParam._m0[34u].x);
        _1694 = 1.0 - (_1686 * cbSceneParam._m0[34u].y);
        _1695 = 1.0 - (_1686 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1693 = 1.0;
        _1694 = 1.0;
        _1695 = 1.0;
    }
    float _1759;
    float _1761;
    float _1763;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1747 = fma(_1543, cbSceneParam._m0[63u].w, fma(_1539, cbSceneParam._m0[63u].z, fma(_1535, cbSceneParam._m0[63u].y, _1531 * cbSceneParam._m0[63u].x)));
        float _1748 = fma(_1543, cbSceneParam._m0[60u].w, fma(_1539, cbSceneParam._m0[60u].z, fma(_1535, cbSceneParam._m0[60u].y, _1531 * cbSceneParam._m0[60u].x))) / _1747;
        float _1749 = fma(_1543, cbSceneParam._m0[61u].w, fma(_1539, cbSceneParam._m0[61u].z, fma(_1535, cbSceneParam._m0[61u].y, _1531 * cbSceneParam._m0[61u].x))) / _1747;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1748 >= cbSceneParam._m0[64u].x) && (_1749 >= cbSceneParam._m0[64u].y)) && (_1748 <= cbSceneParam._m0[64u].z)) && (_1749 <= cbSceneParam._m0[64u].w))
        {
            float _1888 = fma(_1543, cbSceneParam._m0[62u].w, fma(_1539, cbSceneParam._m0[62u].z, fma(_1535, cbSceneParam._m0[62u].y, _1531 * cbSceneParam._m0[62u].x))) / _1747;
            float _1892 = isnan(cbSceneParam._m0[41u].w) ? _1888 : (isnan(_1888) ? cbSceneParam._m0[41u].w : max(_1888, cbSceneParam._m0[41u].w));
            float _1935 = (cbSceneParam._m0[33u].x - sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546))) * cbSceneParam._m0[33u].y;
            float _3940 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
            float _1942 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1748, cbSceneParam._m0[33u].w + _1749), _1892), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1748, _1749 - cbSceneParam._m0[33u].z), _1892), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1748 - cbSceneParam._m0[33u].z, _1749 - cbSceneParam._m0[33u].w), _1892), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1748 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1749), _1892), 0.0)).x), vec4(0.25)));
            float _1946 = 1.0 - (_1942 * cbSceneParam._m0[34u].x);
            float _1947 = 1.0 - (_1942 * cbSceneParam._m0[34u].y);
            float _1948 = 1.0 - (_1942 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1948) ? _1695 : (isnan(_1695) ? _1948 : min(_1695, _1948));
            frontier_phi_34_33_ladder_1 = isnan(_1947) ? _1694 : (isnan(_1694) ? _1947 : min(_1694, _1947));
            frontier_phi_34_33_ladder_2 = isnan(_1946) ? _1693 : (isnan(_1693) ? _1946 : min(_1693, _1946));
        }
        else
        {
            frontier_phi_34_33_ladder = _1695;
            frontier_phi_34_33_ladder_1 = _1694;
            frontier_phi_34_33_ladder_2 = _1693;
        }
        _1759 = frontier_phi_34_33_ladder_2;
        _1761 = frontier_phi_34_33_ladder_1;
        _1763 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1759 = _1693;
        _1761 = _1694;
        _1763 = _1695;
    }
    uvec4 _1768 = floatBitsToUint(cbInstanceData._m0[_420 + 5u]);
    uint _1770 = _1768.x * 14u;
    uint _1771 = _1770 + 13u;
    float _1778 = _461 + (-1.0);
    float _1783 = (cbLight._m0[_1771].x * _1778) + 1.0;
    float _1784 = (cbLight._m0[_1771].y * _1778) + 1.0;
    float _1785 = (cbLight._m0[_1771].z * _1778) + 1.0;
    float _1786 = (cbLight._m0[_1771].w * _1778) + 1.0;
    uint _1787 = _1770 + 5u;
    float _1793 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1797 = _1770 + 4u;
    float _1807 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
    uint _1811 = _1770 | 1u;
    float _1822 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_289, _290, _291));
    float _1825 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_289, _290, _291));
    float _3976 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _3987 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1830 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * 0.3183098733425140380859375;
    float _1832 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.3183098733425140380859375;
    float _1839 = ((cbLight._m0[_1787].x * _1793) * _1832) + (((cbLight._m0[_1797].x * _1759) * _1807) * _1830);
    float _1840 = ((_1793 * cbLight._m0[_1787].y) * _1832) + (((cbLight._m0[_1797].y * _1761) * _1807) * _1830);
    float _1841 = ((_1793 * cbLight._m0[_1787].z) * _1832) + (((cbLight._m0[_1797].z * _1763) * _1807) * _1830);
    uvec4 _1845 = floatBitsToUint(cbLight._m0[_1770 + 12u]);
    bool _1847 = _1845.x == 0u;
    float _1949;
    float _1951;
    float _1953;
    if (_1847)
    {
        _1949 = _1839;
        _1951 = _1840;
        _1953 = _1841;
    }
    else
    {
        uint _1957 = _1770 + 6u;
        float _1973 = (dot(vec3(cbLight._m0[_1770 + 2u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1974 = _1973 * _1973;
        float _3998 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1975 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1976 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _1949 = (((cbLight._m0[_1957].x * 0.3183098733425140380859375) * _1975) * _1976) + _1839;
        _1951 = (((cbLight._m0[_1957].y * 0.3183098733425140380859375) * _1975) * _1976) + _1840;
        _1953 = (((cbLight._m0[_1957].z * 0.3183098733425140380859375) * _1975) * _1976) + _1841;
    }
    bool _1956 = _1845.y == 0u;
    float _2011;
    float _2013;
    float _2015;
    if (_1956)
    {
        _2011 = _1949;
        _2013 = _1951;
        _2015 = _1953;
    }
    else
    {
        uint _2184 = _1770 + 7u;
        float _2200 = (dot(vec3(cbLight._m0[_1770 + 3u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _2201 = _2200 * _2200;
        float _4014 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2202 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _2203 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2011 = (((cbLight._m0[_2184].x * 0.3183098733425140380859375) * _2202) * _2203) + _1949;
        _2013 = (((cbLight._m0[_2184].y * 0.3183098733425140380859375) * _2202) * _2203) + _1951;
        _2015 = (((cbLight._m0[_2184].z * 0.3183098733425140380859375) * _2202) * _2203) + _1953;
    }
    uint _2018 = _1770 + 8u;
    float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1770].w)) * _292) * 0.949999988079071044921875);
    float _2032 = _2031 * _2031;
    float _2033 = cbLight._m0[_1770].x + _371;
    float _2034 = cbLight._m0[_1770].y + _372;
    float _2035 = cbLight._m0[_1770].z + _373;
    float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
    float _2040 = _2039 * _2033;
    float _2041 = _2039 * _2034;
    float _2042 = _2039 * _2035;
    float _2043 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1770].xyz));
    float _4030 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _2047 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _2048 = dot(vec3(_289, _290, _291), vec3(_2040, _2041, _2042));
    float _4052 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _2052 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_2040, _2041, _2042));
    float _4063 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2056 = _2032 * _2032;
    float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
    float _2068 = exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0);
    float _2069 = 0.959999978542327880859375 - _443;
    float _2071 = 0.959999978542327880859375 - _444;
    float _2072 = 0.959999978542327880859375 - _445;
    float _2079 = 1.0 - _2032;
    float _2090 = (0.5 / (((_2047 * ((_2046 * _2079) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2079) + _2032) * _2046))) * _2046;
    float _4074 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
    uint _2106 = _1770 + 9u;
    float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _292) * 0.949999988079071044921875);
    float _2118 = _2117 * _2117;
    float _2119 = cbLight._m0[_1811].x + _371;
    float _2120 = cbLight._m0[_1811].y + _372;
    float _2121 = cbLight._m0[_1811].z + _373;
    float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
    float _2126 = _2125 * _2119;
    float _2127 = _2125 * _2120;
    float _2128 = _2125 * _2121;
    float _2129 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1811].xyz));
    float _4085 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _2133 = dot(vec3(_289, _290, _291), vec3(_2126, _2127, _2128));
    float _4096 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _2137 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_2126, _2127, _2128));
    float _4107 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2141 = _2118 * _2118;
    float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
    float _2152 = exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0);
    float _2159 = 1.0 - _2118;
    float _2169 = (0.5 / (((_2047 * ((_2132 * _2159) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2159) + _2118) * _2132))) * _2132;
    float _4118 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2171 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
    float _2181 = (((((_2152 * _2069) + _446) * cbLight._m0[_2106].x) * _2171) * _1793) + ((((cbLight._m0[_2018].x * _1759) * ((_2068 * _2069) + _446)) * _2092) * _1807);
    float _2182 = (((((_2152 * _2071) + _448) * cbLight._m0[_2106].y) * _2171) * _1793) + ((((cbLight._m0[_2018].y * _1761) * ((_2068 * _2071) + _448)) * _2092) * _1807);
    float _2183 = (((((_2152 * _2072) + _449) * cbLight._m0[_2106].z) * _2171) * _1793) + ((((cbLight._m0[_2018].z * _1763) * ((_2068 * _2072) + _449)) * _2092) * _1807);
    float _2239;
    float _2241;
    float _2243;
    if (_1847)
    {
        _2239 = _2181;
        _2241 = _2182;
        _2243 = _2183;
    }
    else
    {
        uint _2245 = _1770 + 2u;
        uint _2249 = _1770 + 10u;
        float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _292) * 0.949999988079071044921875);
        float _2264 = _2263 * _2263;
        float _2265 = cbLight._m0[_2245].x + _371;
        float _2266 = cbLight._m0[_2245].y + _372;
        float _2267 = cbLight._m0[_2245].z + _373;
        float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
        float _2272 = _2271 * _2265;
        float _2273 = _2271 * _2266;
        float _2274 = _2271 * _2267;
        float _2275 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2245].xyz));
        float _4129 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2279 = dot(vec3(_289, _290, _291), vec3(_2272, _2273, _2274));
        float _4140 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2283 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2272, _2273, _2274));
        float _4151 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2287 = _2264 * _2264;
        float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
        float _2298 = exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0);
        float _2305 = 1.0 - _2264;
        float _2315 = (0.5 / (((_2047 * ((_2278 * _2305) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2305) + _2264) * _2278))) * _2278;
        float _4162 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2317 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
        float _2318 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _2239 = (((((_2298 * _2069) + _446) * cbLight._m0[_2249].x) * _2317) * _2318) + _2181;
        _2241 = (((((_2298 * _2071) + _448) * cbLight._m0[_2249].y) * _2317) * _2318) + _2182;
        _2243 = (((((_2298 * _2072) + _449) * cbLight._m0[_2249].z) * _2317) * _2318) + _2183;
    }
    float _2349;
    float _2351;
    float _2353;
    if (_1956)
    {
        _2349 = _2239;
        _2351 = _2241;
        _2353 = _2243;
    }
    else
    {
        uint _2360 = _1770 + 3u;
        uint _2364 = _1770 + 11u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _292) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _371;
        float _2381 = cbLight._m0[_2360].y + _372;
        float _2382 = cbLight._m0[_2360].z + _373;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2360].xyz));
        float _4178 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2394 = dot(vec3(_289, _290, _291), vec3(_2387, _2388, _2389));
        float _4189 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4200 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2413 = exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0);
        float _2420 = 1.0 - _2379;
        float _2430 = (0.5 / (((_2047 * ((_2393 * _2420) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2420) + _2379) * _2393))) * _2393;
        float _4211 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2432 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2433 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2349 = (((((_2413 * _2069) + _446) * cbLight._m0[_2364].x) * _2432) * _2433) + _2239;
        _2351 = (((((_2413 * _2071) + _448) * cbLight._m0[_2364].y) * _2432) * _2433) + _2241;
        _2353 = (((((_2413 * _2072) + _449) * cbLight._m0[_2364].z) * _2432) * _2433) + _2243;
    }
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    if (_1768.y == 0u)
    {
        uvec4 _2454 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2455 = _2454.x;
        uint _2466 = uint((float(_2454.y) * floor(float(uint(cbSceneParam._m0[85u].y * _380) / _2455))) + floor(float(uint(cbSceneParam._m0[85u].x * _379) / _2455)));
        float _2476 = (log2(_1546 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2477 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        uint _2480 = uint(isnan(14.0) ? _2477 : (isnan(_2477) ? 14.0 : min(_2477, 14.0)));
        uvec4 _2485 = texelFetch(g_lightClusterGridBuffer, int(((_2480 << 2u) + (_2466 << 6u)) >> 2u));
        uint _2486 = _2485.x;
        uint _2487 = _2454.z;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        if (((((1u << ((_2487 >> 4u) & 15u)) + 4294967295u) & _2486) == 0u) || ((_2487 & 240u) == 0u))
        {
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
        }
        else
        {
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            uint _2717 = 0u;
            uint _2726;
            bool _2727;
            for (;;)
            {
                _2726 = texelFetch(g_lightClassification, int((((_2480 << 5u) + (_2466 << 9u)) + (_2717 << 2u)) >> 2u)).x;
                _2727 = _2726 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2727)
                {
                    frontier_phi_66_pred = _2716;
                    frontier_phi_66_pred_1 = _2715;
                    frontier_phi_66_pred_2 = _2714;
                    frontier_phi_66_pred_3 = _2713;
                    frontier_phi_66_pred_4 = _2712;
                    frontier_phi_66_pred_5 = _2711;
                }
                else
                {
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    uint _2841;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2713;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2716;
                    _2841 = _2726;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    for (;;)
                    {
                        uint _2845 = uint(findLSB(_2841)) + (_2717 << 5u);
                        uint _2842 = (_2841 + 4294967295u) & _2841;
                        uint _2847 = _2845 * 48u;
                        vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 3u)).x));
                        uint _2867 = (_2845 * 48u) + 4u;
                        vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 3u)).x));
                        uint _2886 = (_2845 * 48u) + 8u;
                        vec3 _2897 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x));
                        float _2901 = _2861.x - _1544;
                        float _2902 = _2861.y - _1545;
                        float _2903 = _2861.z - _1546;
                        float _2904 = dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903));
                        float _2907 = inversesqrt(_2904);
                        float _2908 = _2907 * _2901;
                        float _2909 = _2907 * _2902;
                        float _2910 = _2907 * _2903;
                        float _2911 = dot(vec3(_401, _404, _407), vec3(_2908, _2909, _2910));
                        float _2916 = 1.0 - (_2904 * _2861.w);
                        float _4237 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2917 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2918 = sqrt(_2904) * _2880.w;
                        float _2921 = 1.39999997615814208984375 / (_2918 + 1.39999997615814208984375);
                        float _2922 = _2921 * _2921;
                        float _2925 = ((1.0 - _2922) * _2911) + _2922;
                        float _2928 = _2918 * _2918;
                        float _2932 = ((isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0))) * _2917) / ((_2928 * 0.699999988079071044921875) + 1.0);
                        float _2936 = (-0.0) - _1544;
                        float _2937 = (-0.0) - _1545;
                        float _2938 = (-0.0) - _1546;
                        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
                        float _2943 = _2942 * _2936;
                        float _2944 = _2942 * _2937;
                        float _2945 = _2942 * _2938;
                        float _2952 = exp2(log2(1.0 / ((_2928 * 3.5) + 5.0)) * 0.25);
                        float _2953 = 1.0 - _477;
                        float _2960 = sqrt(1.0 - ((1.0 - (_2953 * _2953)) * (1.0 - (_2952 * _2952))));
                        float _2961 = _2960 * _2960;
                        float _2962 = _2961 * _2961;
                        float _2963 = _2943 + _2908;
                        float _2964 = _2944 + _2909;
                        float _2965 = _2945 + _2910;
                        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                        float _2973 = dot(vec3(_401, _404, _407), vec3(_2943, _2944, _2945));
                        float _4253 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2976 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2977 = dot(vec3(_401, _404, _407), vec3(_2969 * _2963, _2969 * _2964, _2969 * _2965));
                        float _4264 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2984 = ((_2980 * _2980) * (_2962 + (-1.0))) + 1.0;
                        float _2985 = _2921 * _2961;
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2911) + _2986;
                        float _4275 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2990 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                        float _2991 = 1.0 - _2961;
                        float _3001 = (0.5 / (((_2990 * ((_2976 * _2991) + _2961)) + 9.9999999392252902907785028219223e-09) + (((_2990 * _2991) + _2961) * _2976))) * _2990;
                        float _4286 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3012 = (((_2962 * 3.1415927410125732421875) * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) / ((_2984 * _2984) * ((_2928 * 2.1991131305694580078125) + 3.141590118408203125))) * _2917;
                        _2770 = (_2932 * _2880.x) + _2838;
                        _2771 = (_2932 * _2880.y) + _2839;
                        _2772 = (_2932 * _2880.z) + _2840;
                        _2767 = (_3012 * _2897.x) + _2835;
                        _2768 = (_3012 * _2897.y) + _2836;
                        _2769 = (_3012 * _2897.z) + _2837;
                        if (_2842 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2769;
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2842;
                        }
                    }
                    frontier_phi_66_pred = _2772;
                    frontier_phi_66_pred_1 = _2771;
                    frontier_phi_66_pred_2 = _2770;
                    frontier_phi_66_pred_3 = _2769;
                    frontier_phi_66_pred_4 = _2768;
                    frontier_phi_66_pred_5 = _2767;
                }
                _2577 = frontier_phi_66_pred;
                _2575 = frontier_phi_66_pred_1;
                _2573 = frontier_phi_66_pred_2;
                _2571 = frontier_phi_66_pred_3;
                _2569 = frontier_phi_66_pred_4;
                _2567 = frontier_phi_66_pred_5;
                uint _2718 = _2717 + 1u;
                if (_2718 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2711 = _2567;
                    _2712 = _2569;
                    _2713 = _2571;
                    _2714 = _2573;
                    _2715 = _2575;
                    _2716 = _2577;
                    _2717 = _2718;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
        }
        uvec4 _2580 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2581 = _2580.z;
        uint _2583 = (_2581 >> 8u) & 15u;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        if (((4294967295u << _2583) & _2486) == 0u)
        {
            _2679 = _2566;
            _2681 = _2568;
            _2683 = _2570;
            _2685 = _2572;
            _2687 = _2574;
            _2689 = _2576;
        }
        else
        {
            float _2704 = inversesqrt(dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546)));
            float _2705 = _2704 * _1544;
            float _2706 = _2704 * _1545;
            float _2707 = _2704 * _1546;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2583 < ((_2581 >> 12u) & 15u))
            {
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2818 = _2566;
                float _2819 = _2568;
                float _2820 = _2570;
                float _2821 = _2572;
                float _2822 = _2574;
                float _2823 = _2576;
                uint _2824 = _2583;
                uint _2833;
                bool _2834;
                for (;;)
                {
                    _2833 = texelFetch(g_lightClassification, int((((_2480 << 5u) + (_2466 << 9u)) + (_2824 << 2u)) >> 2u)).x;
                    _2834 = _2833 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2834)
                    {
                        frontier_phi_72_pred = _2823;
                        frontier_phi_72_pred_1 = _2822;
                        frontier_phi_72_pred_2 = _2821;
                        frontier_phi_72_pred_3 = _2820;
                        frontier_phi_72_pred_4 = _2819;
                        frontier_phi_72_pred_5 = _2818;
                    }
                    else
                    {
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3030 = _2818;
                        float _3031 = _2819;
                        float _3032 = _2820;
                        float _3033 = _2821;
                        float _3034 = _2822;
                        float _3035 = _2823;
                        uint _3036 = _2833;
                        uint _3037;
                        vec4 _3062;
                        float _3063;
                        vec4 _3078;
                        vec3 _3090;
                        vec4 _3106;
                        vec4 _3122;
                        float _3169;
                        bool _3170;
                        for (;;)
                        {
                            uint _3047 = ((_2824 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3036));
                            _3037 = (_3036 + 4294967295u) & _3036;
                            uint _3049 = _3047 * 40u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            _3063 = _3062.w;
                            uint _3065 = (_3047 * 40u) + 4u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3080 = (_3047 * 40u) + 8u;
                            _3090 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x));
                            uint _3093 = (_3047 * 40u) + 16u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3109 = (_3047 * 40u) + 20u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3125 = (_3047 * 40u) + 24u;
                            vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3144 = (_3047 * 40u) + 28u;
                            vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            _3169 = fma(_1546, _3157.z, fma(_1545, _3157.y, _3157.x * _1544)) + _3157.w;
                            _3170 = !((fma(_1546, _3138.z, fma(_1545, _3138.y, _3138.x * _1544)) + _3138.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3170)
                            {
                                float _3197 = _3062.x - _1544;
                                float _3198 = _3062.y - _1545;
                                float _3199 = _3062.z - _1546;
                                float _3200 = dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199));
                                float _3203 = inversesqrt(_3200);
                                float _3204 = _3203 * _3197;
                                float _3205 = _3203 * _3198;
                                float _3206 = _3203 * _3199;
                                float _3210 = 1.0 - (_3200 / (_3063 * _3063));
                                float _4297 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3215 = sqrt(_3200) * _3078.w;
                                float _3217 = 1.39999997615814208984375 / (_3215 + 1.39999997615814208984375);
                                float _3218 = _3217 * _3217;
                                float _3221 = ((1.0 - _3218) * dot(vec3(_3204, _3205, _3206), vec3(_401, _404, _407))) + _3218;
                                float _3224 = _3215 * _3215;
                                float _3228 = (fma(_1546, _3106.z, fma(_1545, _3106.y, _3106.x * _1544)) + _3106.w) / _3169;
                                float _3229 = (fma(_1546, _3122.z, fma(_1545, _3122.y, _3122.x * _1544)) + _3122.w) / _3169;
                                float _3233 = 1.0 - dot(vec2(_3228, _3229), vec2(_3228, _3229));
                                float _4313 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3234 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3235 = _3234 * (((isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))) * _3211) / ((_3224 * 0.699999988079071044921875) + 1.0));
                                float _3247 = exp2(log2(1.0 / ((_3224 * 3.5) + 5.0)) * 0.25);
                                float _3248 = 1.0 - _477;
                                float _3255 = sqrt(1.0 - ((1.0 - (_3248 * _3248)) * (1.0 - (_3247 * _3247))));
                                float _3256 = _3255 * _3255;
                                float _3257 = _3256 * _3256;
                                float _3258 = _3204 - _2705;
                                float _3259 = _3205 - _2706;
                                float _3260 = _3206 - _2707;
                                float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                                float _3268 = dot(vec3(_401, _404, _407), vec3((-0.0) - _2705, (-0.0) - _2706, (-0.0) - _2707));
                                float _4324 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3271 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3272 = dot(vec3(_401, _404, _407), vec3(_3264 * _3258, _3264 * _3259, _3264 * _3260));
                                float _4335 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3275 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3279 = ((_3275 * _3275) * (_3257 + (-1.0))) + 1.0;
                                float _3280 = _3217 * _3256;
                                float _3281 = _3280 * _3280;
                                float _3287 = ((1.0 - _3281) * dot(vec3(_401, _404, _407), vec3(_3204, _3205, _3206))) + _3281;
                                float _4346 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3289 = 1.0 - _3256;
                                float _3299 = (0.5 / (((_3288 * ((_3271 * _3289) + _3256)) + 9.9999999392252902907785028219223e-09) + (((_3288 * _3289) + _3256) * _3271))) * _3288;
                                float _4357 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3309 = (_3234 * _3211) * (((_3257 * 3.1415927410125732421875) * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) / ((_3279 * _3279) * ((_3224 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3235 * _3078.y;
                                frontier_phi_78_pred_1 = _3235 * _3078.x;
                                frontier_phi_78_pred_2 = _3309 * _3090.z;
                                frontier_phi_78_pred_3 = _3309 * _3090.y;
                                frontier_phi_78_pred_4 = _3309 * _3090.x;
                                frontier_phi_78_pred_5 = _3235 * _3078.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3317 = frontier_phi_78_pred;
                            _3316 = frontier_phi_78_pred_1;
                            _3315 = frontier_phi_78_pred_2;
                            _3314 = frontier_phi_78_pred_3;
                            _3313 = frontier_phi_78_pred_4;
                            _3318 = frontier_phi_78_pred_5;
                            _3020 = _3316 + _3033;
                            _3021 = _3317 + _3034;
                            _3022 = _3318 + _3035;
                            _3017 = _3313 + _3030;
                            _3018 = _3314 + _3031;
                            _3019 = _3315 + _3032;
                            if (_3037 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3037;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3022;
                        frontier_phi_72_pred_1 = _3021;
                        frontier_phi_72_pred_2 = _3020;
                        frontier_phi_72_pred_3 = _3019;
                        frontier_phi_72_pred_4 = _3018;
                        frontier_phi_72_pred_5 = _3017;
                    }
                    _2690 = frontier_phi_72_pred;
                    _2688 = frontier_phi_72_pred_1;
                    _2686 = frontier_phi_72_pred_2;
                    _2684 = frontier_phi_72_pred_3;
                    _2682 = frontier_phi_72_pred_4;
                    _2680 = frontier_phi_72_pred_5;
                    uint _2825 = _2824 + 1u;
                    if (_2825 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2818 = _2680;
                        _2819 = _2682;
                        _2820 = _2684;
                        _2821 = _2686;
                        _2822 = _2688;
                        _2823 = _2690;
                        _2824 = _2825;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2690;
                frontier_phi_60_61_ladder_1 = _2688;
                frontier_phi_60_61_ladder_2 = _2684;
                frontier_phi_60_61_ladder_3 = _2682;
                frontier_phi_60_61_ladder_4 = _2680;
                frontier_phi_60_61_ladder_5 = _2686;
            }
            else
            {
                frontier_phi_60_61_ladder = _2576;
                frontier_phi_60_61_ladder_1 = _2574;
                frontier_phi_60_61_ladder_2 = _2570;
                frontier_phi_60_61_ladder_3 = _2568;
                frontier_phi_60_61_ladder_4 = _2566;
                frontier_phi_60_61_ladder_5 = _2572;
            }
            _2679 = frontier_phi_60_61_ladder_4;
            _2681 = frontier_phi_60_61_ladder_3;
            _2683 = frontier_phi_60_61_ladder_2;
            _2685 = frontier_phi_60_61_ladder_5;
            _2687 = frontier_phi_60_61_ladder_1;
            _2689 = frontier_phi_60_61_ladder;
        }
        float _2694 = isnan(1.0) ? _461 : (isnan(_461) ? 1.0 : min(_461, 1.0));
        _2499 = (_2694 * _2685) + _2011;
        _2501 = (_2694 * _2687) + _2013;
        _2503 = (_2694 * _2689) + _2015;
        _2505 = ((_2679 * _446) * _2694) + _2349;
        _2507 = ((_2681 * _448) * _2694) + _2351;
        _2509 = ((_2683 * _449) * _2694) + _2353;
    }
    else
    {
        _2499 = _2011;
        _2501 = _2013;
        _2503 = _2015;
        _2505 = _2349;
        _2507 = _2351;
        _2509 = _2353;
    }
    float _4373 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4384 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4395 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    uint _2529 = _420 + 6u;
    float _2537 = _379 / cbSceneParam._m0[86u].x;
    float _2538 = _380 / cbSceneParam._m0[86u].y;
    vec4 _2552 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2537, _2538, (log2((isnan(cbSceneParam._m0[77u].w) ? _312 : (isnan(_312) ? cbSceneParam._m0[77u].w : min(_312, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2554 = _2552.x;
    float _2555 = _2552.y;
    float _2556 = _2552.z;
    float _2557 = _2552.w;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    if (_312 > cbSceneParam._m0[78u].w)
    {
        float _2591 = isnan(_312) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _312 : min(cbSceneParam._m0[80u].w, _312));
        float _2592 = _2591 / _312;
        float _2603 = _2592 * _364;
        float _2604 = _365 * _2592;
        float _2605 = (-0.0) - _2604;
        float _2607 = _2592 * _366;
        float _2609 = (cbSceneParam._m0[77u].w * _2605) / _2591;
        float _2610 = _2609 + cbSceneParam._m0[79u].w;
        float _2611 = cbSceneParam._m0[79u].w - _2604;
        float _2617 = sqrt(((_2603 * _2603) + (_2604 * _2604)) + (_2607 * _2607));
        float _2620 = (1.0 - (cbSceneParam._m0[77u].w / _2591)) * _2617;
        float _2625 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2627 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2780;
        if (abs((_2605 - _2609) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2780 = ((((_2610 > 0.0) ? exp2(_2625 * _2610) : (2.0 - exp2(_2627 * _2610))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2620;
        }
        else
        {
            float _2740 = 1.0 / cbSceneParam._m0[80u].x;
            float _2741 = isnan(_2611) ? _2610 : (isnan(_2610) ? _2611 : max(_2610, _2611));
            float _2742 = isnan(_2611) ? _2610 : (isnan(_2610) ? _2611 : min(_2610, _2611));
            float _2751 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : min(_2741, 0.0));
            float _2752 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : min(_2742, 0.0));
            _2780 = ((abs(_2617 / _2605) * cbSceneParam._m0[80u].y) * ((((_2751 - _2752) * 2.0) - ((exp2(_2625 * (isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0)))) - exp2(_2625 * (isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0))))) * _2740)) - ((exp2(_2627 * _2751) - exp2(_2627 * _2752)) * _2740))) + (_2620 * cbSceneParam._m0[80u].z);
        }
        vec4 _2782 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2537, _2538, 1.0), 0.0);
        float _2791 = exp2((_2780 * (-1.44269502162933349609375)) * (1.0 - _2782.w));
        float _2792 = log2(_2791);
        float _2808 = log2(_2557);
        _2629 = (exp2(_2808 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2792 * cbSceneParam._m0[78u].x)) * _2782.x) / cbSceneParam._m0[78u].x)) + _2554;
        _2631 = (exp2(_2808 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2792 * cbSceneParam._m0[78u].y)) * _2782.y) / cbSceneParam._m0[78u].y)) + _2555;
        _2633 = (exp2(_2808 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2792 * cbSceneParam._m0[78u].z)) * _2782.z) / cbSceneParam._m0[78u].z)) + _2556;
        _2635 = _2791 * _2557;
    }
    else
    {
        _2629 = _2554;
        _2631 = _2555;
        _2633 = _2556;
        _2635 = _2557;
    }
    float _2647 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2648 = _2647 == 3.0;
    float _2649 = log2(_2635);
    float _2656 = exp2(_2649 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2499 + ((isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))) * _461))) + ((_2505 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _1271)) * cbPerFrame._m0[3u].x));
    float _2657 = exp2(_2649 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2501 + ((isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))) * _461))) + ((_2507 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _1271)) * cbPerFrame._m0[3u].x));
    float _2658 = exp2(_2649 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2503 + ((isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))) * _461))) + ((_2509 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _1271)) * cbPerFrame._m0[3u].x));
    float _2667 = (_2647 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2667 * (_2648 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2629)));
    SV_Target.y = _2667 * (_2648 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2631)));
    SV_Target.z = _2667 * (_2648 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2633)));
    SV_Target.w = cbInstanceData._m0[_2529].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2529].w;
}


