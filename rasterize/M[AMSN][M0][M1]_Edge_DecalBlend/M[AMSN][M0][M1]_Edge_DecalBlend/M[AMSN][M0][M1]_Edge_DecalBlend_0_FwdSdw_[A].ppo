#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _882;
float _3556;
float _3557;
float _3558;
float _3559;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.w;
    float _235 = _228.x * cbMtdParam._m0[9u].x;
    float _236 = _228.y * cbMtdParam._m0[9u].y;
    float _237 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _249 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _249.x;
    vec4 _263 = texture(sampler2D(M_AMSN_M0_M1_Edge_DecalBlend_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3568 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))));
    float _283 = fma(_280, _198 * NORMAL.x, fma(_273, _205 * TANGENT.x, (_191 * _184) * _271));
    float _286 = fma(_280, _198 * NORMAL.y, fma(_273, _205 * TANGENT.y, (_191 * _185) * _271));
    float _289 = fma(_280, _198 * NORMAL.z, fma(_273, _205 * TANGENT.z, (_191 * _186) * _271));
    float _293 = inversesqrt(dot(vec3(_283, _286, _289), vec3(_283, _286, _289)));
    float _294 = _293 * _283;
    float _295 = _293 * _286;
    float _296 = _293 * _289;
    float _3579 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _297 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3601 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3612 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3623 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _301 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _317 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _359 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _369 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _359);
    float _370 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _359);
    float _371 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _359);
    float _375 = inversesqrt(dot(vec3(_369, _370, _371), vec3(_369, _370, _371)));
    float _376 = _369 * _375;
    float _377 = _370 * _375;
    float _378 = _371 * _375;
    vec4 _383 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _385 = _383.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _561 = sqrt(((_369 * _369) + (_370 * _370)) + (_371 * _371));
        float _567 = (cbMatDynParam._m0[5u].x * _561) + cbMatDynParam._m0[5u].y;
        float _3634 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
        float _568 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _572 = (cbMatDynParam._m0[5u].z * _561) + cbMatDynParam._m0[5u].w;
        float _3645 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) - _568)) + _568) < ((_385 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _397 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _398 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _418 = fma(_296, cbSceneParam._m0[5u].z, fma(_295, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _294));
    float _421 = fma(_296, cbSceneParam._m0[6u].z, fma(_295, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _294));
    float _424 = fma(_296, cbSceneParam._m0[7u].z, fma(_295, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _294));
    uint _437 = uint(roundEven(NORMAL.w)) * 13u;
    uint _439 = _437 + 9u;
    uint _440 = _439 + uint(cbMatDynParam._m0[0u].w);
    float _446 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) * cbInstanceData._m0[_440].x;
    float _447 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * cbInstanceData._m0[_440].y;
    float _448 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_440].z;
    float _3656 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _452 = 1.0 - _301;
    float _453 = _449 * _452;
    float _454 = _450 * _452;
    float _455 = _451 * _452;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _301;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _301;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _301;
    float _463 = _460 + 0.039999999105930328369140625;
    float _465 = _461 + 0.039999999105930328369140625;
    float _466 = _462 + 0.039999999105930328369140625;
    vec4 _475 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _397, cbSceneParam._m0[86u].y * _398));
    float _478 = _475.x * TEXCOORD.z;
    float _479 = dot(vec3(_294, _295, _296), vec3(_376, _377, _378));
    float _482 = _479 * 2.0;
    float _486 = (_482 * _294) - _376;
    float _487 = (_482 * _295) - _377;
    float _488 = (_482 * _296) - _378;
    float _492 = abs(dot(vec3(_376, _377, _378), vec3(_294, _295, _296)));
    float _3689 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _494 = sqrt(_297);
    float _507 = exp2((_494 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_494 * 3.0));
    float _513 = (1.0 - _507) * ((_494 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _514 = _507 * _494;
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _881;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _606 = fma(_550, cbModelParam._m0[26u].z, fma(_546, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _542));
        float _610 = fma(_550, cbModelParam._m0[27u].z, fma(_546, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _542));
        float _614 = fma(_550, cbModelParam._m0[28u].z, fma(_546, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _542));
        float _639 = _542 + _294;
        float _640 = _546 + _295;
        float _641 = _550 + _296;
        float _651 = fma(_641, cbModelParam._m0[26u].z, fma(_640, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _639)) - _606;
        float _652 = fma(_641, cbModelParam._m0[27u].z, fma(_640, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _639)) - _610;
        float _653 = fma(_641, cbModelParam._m0[28u].z, fma(_640, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _639)) - _614;
        float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
        float _670 = ((_657 * _651) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_606 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_657 * _652) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_610 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _672 = ((_657 * _653) / cbModelParam._m0[34u].z) + ((((((_614 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        float _709 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_675.x + (-0.5));
        float _711 = _709 * (_675.y + (-0.5));
        float _712 = _709 * (_675.z + (-0.5));
        float _719 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_682.x + (-0.5));
        float _721 = _719 * (_682.y + (-0.5));
        float _722 = _719 * (_682.z + (-0.5));
        float _729 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_689.x + (-0.5));
        float _731 = _729 * (_689.y + (-0.5));
        float _732 = _729 * (_689.z + (-0.5));
        float _739 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_696.x + (-0.5));
        float _741 = _739 * (_696.y + (-0.5));
        float _742 = _739 * (_696.z + (-0.5));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = _710 * 0.5;
        float _747 = _720 * 0.5;
        float _748 = _730 * 0.5;
        float _749 = dot(vec3(_746, _747, _748), vec3(_746, _747, _748));
        float _754 = (_749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_749);
        float _763 = (dot(vec3(_294, _295, _296), vec3(_754 * _746, _754 * _747, _754 * _748)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _773 = sqrt(((_747 * _747) + (_746 * _746)) + (_748 * _748)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _775 = _774 * 2.0;
        float _779 = (1.0 - _774) / (_774 + 1.0);
        float _3737 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _789 = ((((1.0 - _780) * (_775 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_775 + 1.0))) + _780) * _743;
        float _790 = _711 * 0.5;
        float _791 = _721 * 0.5;
        float _792 = _731 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _806 = (dot(vec3(_294, _295, _296), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _815 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3770 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_817 + 1.0))) + _822) * _744;
        float _832 = _712 * 0.5;
        float _833 = _722 * 0.5;
        float _834 = _732 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _848 = (dot(vec3(_294, _295, _296), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _857 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3803 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_859 + 1.0))) + _864) * _745;
        _881 = _712;
        _883 = _711;
        _884 = _710;
        _885 = _722;
        _886 = _721;
        _887 = _720;
        _888 = _732;
        _889 = _731;
        _890 = _730;
        _891 = _745;
        _892 = _744;
        _893 = _743;
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
    }
    else
    {
        _881 = _882;
        _883 = _882;
        _884 = _882;
        _885 = _882;
        _886 = _882;
        _887 = _882;
        _888 = _882;
        _889 = _882;
        _890 = _882;
        _891 = _882;
        _892 = _882;
        _893 = _882;
        _894 = 0.0;
        _895 = 0.0;
        _896 = 0.0;
    }
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _925 = fma(_550, cbModelParam._m0[30u].z, fma(_546, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _542));
        float _929 = fma(_550, cbModelParam._m0[31u].z, fma(_546, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _542));
        float _933 = fma(_550, cbModelParam._m0[32u].z, fma(_546, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _542));
        float _956 = _542 + _294;
        float _957 = _546 + _295;
        float _958 = _550 + _296;
        float _968 = fma(_958, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _956)) - _925;
        float _969 = fma(_958, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _956)) - _929;
        float _970 = fma(_958, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _956)) - _933;
        float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
        float _987 = ((_974 * _968) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_925 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_974 * _969) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_929 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_974 * _970) / cbModelParam._m0[35u].z) + ((((((_933 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        float _1024 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_991.x + (-0.5));
        float _1026 = _1024 * (_991.y + (-0.5));
        float _1027 = _1024 * (_991.z + (-0.5));
        float _1034 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_998.x + (-0.5));
        float _1036 = _1034 * (_998.y + (-0.5));
        float _1037 = _1034 * (_998.z + (-0.5));
        float _1044 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1005.x + (-0.5));
        float _1046 = _1044 * (_1005.y + (-0.5));
        float _1047 = _1044 * (_1005.z + (-0.5));
        float _1054 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1012.x + (-0.5));
        float _1056 = _1054 * (_1012.y + (-0.5));
        float _1057 = _1054 * (_1012.z + (-0.5));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = _1025 * 0.5;
        float _1062 = _1035 * 0.5;
        float _1063 = _1045 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_294, _295, _296), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3866 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1088 + 1.0))) + _1093) * _1058;
        float _1103 = _1026 * 0.5;
        float _1104 = _1036 * 0.5;
        float _1105 = _1046 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_294, _295, _296), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3899 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1130 + 1.0))) + _1135) * _1059;
        float _1145 = _1027 * 0.5;
        float _1146 = _1037 * 0.5;
        float _1147 = _1047 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_294, _295, _296), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3932 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1172 + 1.0))) + _1177) * _1060;
        _1194 = _1027;
        _1195 = _1026;
        _1196 = _1025;
        _1197 = _1037;
        _1198 = _1036;
        _1199 = _1035;
        _1200 = _1047;
        _1201 = _1046;
        _1202 = _1045;
        _1203 = _1060;
        _1204 = _1059;
        _1205 = _1058;
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
    }
    else
    {
        _1194 = _882;
        _1195 = _882;
        _1196 = _882;
        _1197 = _882;
        _1198 = _882;
        _1199 = _882;
        _1200 = _882;
        _1201 = _882;
        _1202 = _882;
        _1203 = _882;
        _1204 = _882;
        _1205 = _882;
        _1206 = 0.0;
        _1207 = 0.0;
        _1208 = 0.0;
    }
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _894)) + _894;
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _895)) + _895;
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _896)) + _896;
    float _1241 = fma(_1220, cbSceneParam._m0[89u].z, fma(_1219, cbSceneParam._m0[89u].y, _1218 * cbSceneParam._m0[89u].x));
    float _1244 = fma(_1220, cbSceneParam._m0[90u].z, fma(_1219, cbSceneParam._m0[90u].y, _1218 * cbSceneParam._m0[90u].x));
    float _1247 = fma(_1220, cbSceneParam._m0[91u].z, fma(_1219, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1218));
    float _1262 = _486 * 0.5;
    float _1263 = _487 * 0.5;
    float _1264 = _488 * 0.5;
    float _1265 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1268 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1271 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1305;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1278 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_881, _885, _888, _891));
        float _1282 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_883, _886, _889, _892));
        float _1286 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_884, _887, _890, _893));
        float _1293 = dot(vec4(cbModelParam._m0[39u]), vec4(_1262, _1263, _1264, 1.0));
        _1305 = dot(vec3(isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1293) ? 0.0 : (isnan(0.0) ? _1293 : max(0.0, _1293))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1305 = 1.0;
    }
    float _1316;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1307 = dot(vec4(cbModelParam._m0[40u]), vec4(_1262, _1263, _1264, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1307) ? 0.0 : (isnan(0.0) ? _1307 : max(0.0, _1307))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1320 = (_1316 * cbModelParam._m0[1u].x) + (_1305 * (1.0 - cbModelParam._m0[1u].x));
    float _1330 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _297);
    float _1331 = isnan(_1330) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1330 : min(cbModelParam._m0[25u].z, _1330));
    float _1413;
    float _1415;
    float _1417;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1380 = fma(_550, cbModelParam._m0[13u].z, fma(_546, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542)) + cbModelParam._m0[13u].w;
        float _1384 = fma(_550, cbModelParam._m0[14u].z, fma(_546, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542)) + cbModelParam._m0[14u].w;
        float _1388 = fma(_550, cbModelParam._m0[15u].z, fma(_546, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542)) + cbModelParam._m0[15u].w;
        float _1391 = fma(_488, cbModelParam._m0[13u].z, fma(_487, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _486));
        float _1394 = fma(_488, cbModelParam._m0[14u].z, fma(_487, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _486));
        float _1397 = fma(_488, cbModelParam._m0[15u].z, fma(_487, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _486));
        float _1425;
        if (_1391 > 0.0)
        {
            _1425 = abs((1.0 - _1380) / _1391);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1380 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1425 = frontier_phi_17_15_ladder;
        }
        float _1601;
        if (_1394 > 0.0)
        {
            _1601 = abs((1.0 - _1384) / _1394);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1384 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1601 = frontier_phi_26_22_ladder;
        }
        float _1897;
        if (_1397 > 0.0)
        {
            _1897 = abs((1.0 - _1388) / _1397);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1388 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1897 = frontier_phi_38_33_ladder;
        }
        float _1899 = isnan(_1601) ? _1425 : (isnan(_1425) ? _1601 : min(_1425, _1601));
        float _1900 = isnan(_1897) ? _1899 : (isnan(_1899) ? _1897 : min(_1899, _1897));
        float _1904 = (_1900 * _1391) + _1380;
        float _1905 = (_1900 * _1394) + _1384;
        float _1906 = (_1900 * _1397) + _1388;
        float _1907 = _1900 * 9.9999997473787516355514526367188e-05;
        float _1909 = (-1.0) - _1907;
        float _1911 = _1907 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1906 > _1911) || ((_1906 < _1909) || ((_1905 > _1911) || ((_1905 < _1909) || ((_1904 < _1909) || (_1904 > _1911))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2051 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1906, cbModelParam._m0[9u].z, fma(_1905, cbModelParam._m0[9u].y, _1904 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1906, cbModelParam._m0[10u].z, fma(_1905, cbModelParam._m0[10u].y, _1904 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1906, cbModelParam._m0[11u].z, fma(_1905, cbModelParam._m0[11u].y, _1904 * cbModelParam._m0[11u].x))), _1331);
            frontier_phi_16_38_ladder = _2051.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2051.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2051.x * cbModelParam._m0[1u].y;
        }
        _1413 = frontier_phi_16_38_ladder_2;
        _1415 = frontier_phi_16_38_ladder_1;
        _1417 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_486, _487, _488), _1331);
        _1413 = _1401.x * cbModelParam._m0[1u].y;
        _1415 = _1401.y * cbModelParam._m0[1u].y;
        _1417 = _1401.z * cbModelParam._m0[1u].y;
    }
    float _1421 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _297);
    float _1422 = isnan(_1421) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1421 : min(cbModelParam._m0[25u].w, _1421));
    float _1515;
    float _1517;
    float _1519;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1479 = fma(_550, cbModelParam._m0[21u].z, fma(_546, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542)) + cbModelParam._m0[21u].w;
        float _1483 = fma(_550, cbModelParam._m0[22u].z, fma(_546, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542)) + cbModelParam._m0[22u].w;
        float _1487 = fma(_550, cbModelParam._m0[23u].z, fma(_546, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542)) + cbModelParam._m0[23u].w;
        float _1490 = fma(_488, cbModelParam._m0[21u].z, fma(_487, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _486));
        float _1493 = fma(_488, cbModelParam._m0[22u].z, fma(_487, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _486));
        float _1496 = fma(_488, cbModelParam._m0[23u].z, fma(_487, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _486));
        float _1606;
        if (_1490 > 0.0)
        {
            _1606 = abs((1.0 - _1479) / _1490);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1479 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1606 = frontier_phi_28_24_ladder;
        }
        float _1924;
        if (_1493 > 0.0)
        {
            _1924 = abs((1.0 - _1483) / _1493);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1483 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1924 = frontier_phi_40_35_ladder;
        }
        float _2262;
        if (_1496 > 0.0)
        {
            _2262 = abs((1.0 - _1487) / _1496);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1487 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2262 = frontier_phi_50_47_ladder;
        }
        float _2264 = isnan(_1924) ? _1606 : (isnan(_1606) ? _1924 : min(_1606, _1924));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1490) + _1479;
        float _2270 = (_2265 * _1493) + _1483;
        float _2271 = (_2265 * _1496) + _1487;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2273 = (-1.0) - _2272;
        float _2275 = _2272 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2271 > _2275) || ((_2271 < _2273) || ((_2270 > _2275) || ((_2270 < _2273) || ((_2269 < _2273) || (_2269 > _2275))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2393 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2271, cbModelParam._m0[17u].z, fma(_2270, cbModelParam._m0[17u].y, _2269 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2271, cbModelParam._m0[18u].z, fma(_2270, cbModelParam._m0[18u].y, _2269 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2271, cbModelParam._m0[19u].z, fma(_2270, cbModelParam._m0[19u].y, _2269 * cbModelParam._m0[19u].x))), _1422);
            frontier_phi_25_50_ladder = _2393.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2393.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2393.x * cbModelParam._m0[1u].z;
        }
        _1515 = frontier_phi_25_50_ladder_2;
        _1517 = frontier_phi_25_50_ladder_1;
        _1519 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1499 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_486, _487, _488), _1422);
        _1515 = _1499.x * cbModelParam._m0[1u].z;
        _1517 = _1499.y * cbModelParam._m0[1u].z;
        _1519 = _1499.z * cbModelParam._m0[1u].z;
    }
    float _1532 = (((_513 * _463) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1515 - _1413)) + _1413);
    float _1534 = (((_513 * _465) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1517 - _1415)) + _1415);
    float _1536 = (((_513 * _466) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1519 - _1417)) + _1417);
    float _1539 = fma(_1536, cbSceneParam._m0[89u].z, fma(_1534, cbSceneParam._m0[89u].y, _1532 * cbSceneParam._m0[89u].x));
    float _1542 = fma(_1536, cbSceneParam._m0[90u].z, fma(_1534, cbSceneParam._m0[90u].y, _1532 * cbSceneParam._m0[90u].x));
    float _1545 = fma(_1536, cbSceneParam._m0[91u].z, fma(_1534, cbSceneParam._m0[91u].y, _1532 * cbSceneParam._m0[91u].x));
    float _1580 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1584 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1588 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1592 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1593 = _1580 / _1592;
    float _1594 = _1584 / _1592;
    float _1595 = _1588 / _1592;
    float _1742;
    float _1743;
    float _1744;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1622 = ((uint(_1595 > cbSceneParam._m0[59u].y) + uint(_1595 > cbSceneParam._m0[59u].x)) + uint(_1595 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1623 = _1622 + 43u;
        uint _1631 = _1622 + 44u;
        uint _1639 = _1622 + 45u;
        uint _1647 = _1622 + 46u;
        float _1658 = fma(_1592, cbSceneParam._m0[_1623].w, fma(_1588, cbSceneParam._m0[_1623].z, fma(_1584, cbSceneParam._m0[_1623].y, _1580 * cbSceneParam._m0[_1623].x)));
        float _1662 = fma(_1592, cbSceneParam._m0[_1631].w, fma(_1588, cbSceneParam._m0[_1631].z, fma(_1584, cbSceneParam._m0[_1631].y, _1580 * cbSceneParam._m0[_1631].x)));
        float _1670 = fma(_1592, cbSceneParam._m0[_1647].w, fma(_1588, cbSceneParam._m0[_1647].z, fma(_1584, cbSceneParam._m0[_1647].y, _1580 * cbSceneParam._m0[_1647].x)));
        float _1675 = cbSceneParam._m0[33u].z * _1670;
        float _1677 = cbSceneParam._m0[33u].w * _1670;
        float _1680 = fma(_1592, cbSceneParam._m0[_1639].w, fma(_1588, cbSceneParam._m0[_1639].z, fma(_1584, cbSceneParam._m0[_1639].y, _1580 * cbSceneParam._m0[_1639].x))) / _1670;
        float _1728 = (cbSceneParam._m0[33u].x - sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595))) * cbSceneParam._m0[33u].y;
        float _4058 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1735 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1675 + _1658) / _1670, (_1677 + _1662) / _1670), _1680), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1677 + _1658) / _1670, (_1662 - _1675) / _1670), _1680), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1658 - _1675) / _1670, (_1662 - _1677) / _1670), _1680), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1658 - _1677) / _1670, (_1675 + _1662) / _1670), _1680), 0.0)).x), vec4(0.25)));
        _1742 = 1.0 - (_1735 * cbSceneParam._m0[34u].x);
        _1743 = 1.0 - (_1735 * cbSceneParam._m0[34u].y);
        _1744 = 1.0 - (_1735 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1742 = 1.0;
        _1743 = 1.0;
        _1744 = 1.0;
    }
    float _1808;
    float _1810;
    float _1812;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1796 = fma(_1592, cbSceneParam._m0[63u].w, fma(_1588, cbSceneParam._m0[63u].z, fma(_1584, cbSceneParam._m0[63u].y, _1580 * cbSceneParam._m0[63u].x)));
        float _1797 = fma(_1592, cbSceneParam._m0[60u].w, fma(_1588, cbSceneParam._m0[60u].z, fma(_1584, cbSceneParam._m0[60u].y, _1580 * cbSceneParam._m0[60u].x))) / _1796;
        float _1798 = fma(_1592, cbSceneParam._m0[61u].w, fma(_1588, cbSceneParam._m0[61u].z, fma(_1584, cbSceneParam._m0[61u].y, _1580 * cbSceneParam._m0[61u].x))) / _1796;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1797 >= cbSceneParam._m0[64u].x) && (_1798 >= cbSceneParam._m0[64u].y)) && (_1797 <= cbSceneParam._m0[64u].z)) && (_1798 <= cbSceneParam._m0[64u].w))
        {
            float _1937 = fma(_1592, cbSceneParam._m0[62u].w, fma(_1588, cbSceneParam._m0[62u].z, fma(_1584, cbSceneParam._m0[62u].y, _1580 * cbSceneParam._m0[62u].x))) / _1796;
            float _1941 = isnan(cbSceneParam._m0[41u].w) ? _1937 : (isnan(_1937) ? cbSceneParam._m0[41u].w : max(_1937, cbSceneParam._m0[41u].w));
            float _1984 = (cbSceneParam._m0[33u].x - sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595))) * cbSceneParam._m0[33u].y;
            float _4074 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
            float _1991 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1797, cbSceneParam._m0[33u].w + _1798), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1797, _1798 - cbSceneParam._m0[33u].z), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1797 - cbSceneParam._m0[33u].z, _1798 - cbSceneParam._m0[33u].w), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1797 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1798), _1941), 0.0)).x), vec4(0.25)));
            float _1995 = 1.0 - (_1991 * cbSceneParam._m0[34u].x);
            float _1996 = 1.0 - (_1991 * cbSceneParam._m0[34u].y);
            float _1997 = 1.0 - (_1991 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1997) ? _1744 : (isnan(_1744) ? _1997 : min(_1744, _1997));
            frontier_phi_37_36_ladder_1 = isnan(_1996) ? _1743 : (isnan(_1743) ? _1996 : min(_1743, _1996));
            frontier_phi_37_36_ladder_2 = isnan(_1995) ? _1742 : (isnan(_1742) ? _1995 : min(_1742, _1995));
        }
        else
        {
            frontier_phi_37_36_ladder = _1744;
            frontier_phi_37_36_ladder_1 = _1743;
            frontier_phi_37_36_ladder_2 = _1742;
        }
        _1808 = frontier_phi_37_36_ladder_2;
        _1810 = frontier_phi_37_36_ladder_1;
        _1812 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1808 = _1742;
        _1810 = _1743;
        _1812 = _1744;
    }
    uvec4 _1817 = floatBitsToUint(cbInstanceData._m0[_437 + 5u]);
    uint _1819 = _1817.x * 14u;
    uint _1820 = _1819 + 13u;
    float _1827 = _478 + (-1.0);
    float _1832 = (cbLight._m0[_1820].x * _1827) + 1.0;
    float _1833 = (cbLight._m0[_1820].y * _1827) + 1.0;
    float _1834 = (cbLight._m0[_1820].z * _1827) + 1.0;
    float _1835 = (cbLight._m0[_1820].w * _1827) + 1.0;
    uint _1836 = _1819 + 5u;
    float _1842 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1846 = _1819 + 4u;
    float _1856 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1860 = _1819 | 1u;
    float _1871 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_294, _295, _296));
    float _1874 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_294, _295, _296));
    float _4110 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _4121 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1879 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.3183098733425140380859375;
    float _1881 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.3183098733425140380859375;
    float _1888 = ((cbLight._m0[_1836].x * _1842) * _1881) + (((cbLight._m0[_1846].x * _1808) * _1856) * _1879);
    float _1889 = ((_1842 * cbLight._m0[_1836].y) * _1881) + (((cbLight._m0[_1846].y * _1810) * _1856) * _1879);
    float _1890 = ((_1842 * cbLight._m0[_1836].z) * _1881) + (((cbLight._m0[_1846].z * _1812) * _1856) * _1879);
    uvec4 _1894 = floatBitsToUint(cbLight._m0[_1819 + 12u]);
    bool _1896 = _1894.x == 0u;
    float _1998;
    float _2000;
    float _2002;
    if (_1896)
    {
        _1998 = _1888;
        _2000 = _1889;
        _2002 = _1890;
    }
    else
    {
        uint _2006 = _1819 + 6u;
        float _2022 = (dot(vec3(cbLight._m0[_1819 + 2u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _2023 = _2022 * _2022;
        float _4132 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2024 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2025 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _1998 = (((cbLight._m0[_2006].x * 0.3183098733425140380859375) * _2024) * _2025) + _1888;
        _2000 = (((cbLight._m0[_2006].y * 0.3183098733425140380859375) * _2024) * _2025) + _1889;
        _2002 = (((cbLight._m0[_2006].z * 0.3183098733425140380859375) * _2024) * _2025) + _1890;
    }
    bool _2005 = _1894.y == 0u;
    float _2060;
    float _2062;
    float _2064;
    if (_2005)
    {
        _2060 = _1998;
        _2062 = _2000;
        _2064 = _2002;
    }
    else
    {
        uint _2233 = _1819 + 7u;
        float _2249 = (dot(vec3(cbLight._m0[_1819 + 3u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4148 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2252 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _2060 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _1998;
        _2062 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2000;
        _2064 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2002;
    }
    uint _2067 = _1819 + 8u;
    float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _297) * 0.949999988079071044921875);
    float _2081 = _2080 * _2080;
    float _2082 = cbLight._m0[_1819].x + _376;
    float _2083 = cbLight._m0[_1819].y + _377;
    float _2084 = cbLight._m0[_1819].z + _378;
    float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
    float _2089 = _2088 * _2082;
    float _2090 = _2088 * _2083;
    float _2091 = _2088 * _2084;
    float _2092 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1819].xyz));
    float _4164 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _2096 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2097 = dot(vec3(_294, _295, _296), vec3(_2089, _2090, _2091));
    float _4186 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2101 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_2089, _2090, _2091));
    float _4197 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2105 = _2081 * _2081;
    float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
    float _2117 = exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0);
    float _2118 = 0.959999978542327880859375 - _460;
    float _2120 = 0.959999978542327880859375 - _461;
    float _2121 = 0.959999978542327880859375 - _462;
    float _2128 = 1.0 - _2081;
    float _2139 = (0.5 / (((_2096 * ((_2095 * _2128) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2128) + _2081) * _2095))) * _2095;
    float _4208 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
    uint _2155 = _1819 + 9u;
    float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _297) * 0.949999988079071044921875);
    float _2167 = _2166 * _2166;
    float _2168 = cbLight._m0[_1860].x + _376;
    float _2169 = cbLight._m0[_1860].y + _377;
    float _2170 = cbLight._m0[_1860].z + _378;
    float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
    float _2175 = _2174 * _2168;
    float _2176 = _2174 * _2169;
    float _2177 = _2174 * _2170;
    float _2178 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1860].xyz));
    float _4219 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2182 = dot(vec3(_294, _295, _296), vec3(_2175, _2176, _2177));
    float _4230 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2175, _2176, _2177));
    float _4241 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2167 * _2167;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2201 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
    float _2208 = 1.0 - _2167;
    float _2218 = (0.5 / (((_2096 * ((_2181 * _2208) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2208) + _2167) * _2181))) * _2181;
    float _4252 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    float _2230 = (((((_2201 * _2118) + _463) * cbLight._m0[_2155].x) * _2220) * _1842) + ((((cbLight._m0[_2067].x * _1808) * ((_2117 * _2118) + _463)) * _2141) * _1856);
    float _2231 = (((((_2201 * _2120) + _465) * cbLight._m0[_2155].y) * _2220) * _1842) + ((((cbLight._m0[_2067].y * _1810) * ((_2117 * _2120) + _465)) * _2141) * _1856);
    float _2232 = (((((_2201 * _2121) + _466) * cbLight._m0[_2155].z) * _2220) * _1842) + ((((cbLight._m0[_2067].z * _1812) * ((_2117 * _2121) + _466)) * _2141) * _1856);
    float _2288;
    float _2290;
    float _2292;
    if (_1896)
    {
        _2288 = _2230;
        _2290 = _2231;
        _2292 = _2232;
    }
    else
    {
        uint _2294 = _1819 + 2u;
        uint _2298 = _1819 + 10u;
        float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _297) * 0.949999988079071044921875);
        float _2313 = _2312 * _2312;
        float _2314 = cbLight._m0[_2294].x + _376;
        float _2315 = cbLight._m0[_2294].y + _377;
        float _2316 = cbLight._m0[_2294].z + _378;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2321 = _2320 * _2314;
        float _2322 = _2320 * _2315;
        float _2323 = _2320 * _2316;
        float _2324 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2294].xyz));
        float _4263 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2328 = dot(vec3(_294, _295, _296), vec3(_2321, _2322, _2323));
        float _4274 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2332 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2321, _2322, _2323));
        float _4285 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2336 = _2313 * _2313;
        float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
        float _2347 = exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0);
        float _2354 = 1.0 - _2313;
        float _2364 = (0.5 / (((_2096 * ((_2327 * _2354) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2354) + _2313) * _2327))) * _2327;
        float _4296 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2366 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
        float _2367 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _2288 = (((((_2347 * _2118) + _463) * cbLight._m0[_2298].x) * _2366) * _2367) + _2230;
        _2290 = (((((_2347 * _2120) + _465) * cbLight._m0[_2298].y) * _2366) * _2367) + _2231;
        _2292 = (((((_2347 * _2121) + _466) * cbLight._m0[_2298].z) * _2366) * _2367) + _2232;
    }
    float _2398;
    float _2400;
    float _2402;
    if (_2005)
    {
        _2398 = _2288;
        _2400 = _2290;
        _2402 = _2292;
    }
    else
    {
        uint _2409 = _1819 + 3u;
        uint _2413 = _1819 + 11u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _297) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _376;
        float _2430 = cbLight._m0[_2409].y + _377;
        float _2431 = cbLight._m0[_2409].z + _378;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2409].xyz));
        float _4312 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2443 = dot(vec3(_294, _295, _296), vec3(_2436, _2437, _2438));
        float _4323 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4334 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0);
        float _2469 = 1.0 - _2428;
        float _2479 = (0.5 / (((_2096 * ((_2442 * _2469) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2469) + _2428) * _2442))) * _2442;
        float _4345 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2481 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2482 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _2398 = (((((_2462 * _2118) + _463) * cbLight._m0[_2413].x) * _2481) * _2482) + _2288;
        _2400 = (((((_2462 * _2120) + _465) * cbLight._m0[_2413].y) * _2481) * _2482) + _2290;
        _2402 = (((((_2462 * _2121) + _466) * cbLight._m0[_2413].z) * _2481) * _2482) + _2292;
    }
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    if (_1817.y == 0u)
    {
        uvec4 _2503 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2504 = _2503.x;
        uint _2515 = uint((float(_2503.y) * floor(float(uint(cbSceneParam._m0[85u].y * _398) / _2504))) + floor(float(uint(cbSceneParam._m0[85u].x * _397) / _2504)));
        float _2525 = (log2(_1595 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2526 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        uint _2529 = uint(isnan(14.0) ? _2526 : (isnan(_2526) ? 14.0 : min(_2526, 14.0)));
        uvec4 _2534 = texelFetch(g_lightClusterGridBuffer, int(((_2529 << 2u) + (_2515 << 6u)) >> 2u));
        uint _2535 = _2534.x;
        uint _2536 = _2503.z;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        if (((((1u << ((_2536 >> 4u) & 15u)) + 4294967295u) & _2535) == 0u) || ((_2536 & 240u) == 0u))
        {
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
        }
        else
        {
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            uint _2774 = 0u;
            uint _2783;
            bool _2784;
            for (;;)
            {
                _2783 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2774 << 2u)) >> 2u)).x;
                _2784 = _2783 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2784)
                {
                    frontier_phi_71_pred = _2773;
                    frontier_phi_71_pred_1 = _2772;
                    frontier_phi_71_pred_2 = _2771;
                    frontier_phi_71_pred_3 = _2770;
                    frontier_phi_71_pred_4 = _2769;
                    frontier_phi_71_pred_5 = _2768;
                }
                else
                {
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    uint _2919;
                    _2913 = _2768;
                    _2914 = _2769;
                    _2915 = _2770;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2783;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    for (;;)
                    {
                        uint _2923 = uint(findLSB(_2919)) + (_2774 << 5u);
                        uint _2920 = (_2919 + 4294967295u) & _2919;
                        uint _2925 = _2923 * 48u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2945 = (_2923 * 48u) + 4u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2964 = (_2923 * 48u) + 8u;
                        vec3 _2975 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x));
                        float _2979 = _2939.x - _1593;
                        float _2980 = _2939.y - _1594;
                        float _2981 = _2939.z - _1595;
                        float _2982 = dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981));
                        float _2985 = inversesqrt(_2982);
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2989 = dot(vec3(_418, _421, _424), vec3(_2986, _2987, _2988));
                        float _2994 = 1.0 - (_2982 * _2939.w);
                        float _4371 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _2996 = sqrt(_2982) * _2958.w;
                        float _2999 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2989) + _3000;
                        float _3006 = _2996 * _2996;
                        float _3010 = ((isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))) * _2995) / ((_3006 * 0.699999988079071044921875) + 1.0);
                        float _3014 = (-0.0) - _1593;
                        float _3015 = (-0.0) - _1594;
                        float _3016 = (-0.0) - _1595;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3030 = exp2(log2(1.0 / ((_3006 * 3.5) + 5.0)) * 0.25);
                        float _3031 = 1.0 - _494;
                        float _3038 = sqrt(1.0 - ((1.0 - (_3031 * _3031)) * (1.0 - (_3030 * _3030))));
                        float _3039 = _3038 * _3038;
                        float _3040 = _3039 * _3039;
                        float _3041 = _3021 + _2986;
                        float _3042 = _3022 + _2987;
                        float _3043 = _3023 + _2988;
                        float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
                        float _3051 = dot(vec3(_418, _421, _424), vec3(_3021, _3022, _3023));
                        float _4387 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3054 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3055 = dot(vec3(_418, _421, _424), vec3(_3047 * _3041, _3047 * _3042, _3047 * _3043));
                        float _4398 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3058 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3062 = ((_3058 * _3058) * (_3040 + (-1.0))) + 1.0;
                        float _3063 = _2999 * _3039;
                        float _3064 = _3063 * _3063;
                        float _3067 = ((1.0 - _3064) * _2989) + _3064;
                        float _4409 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3068 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3069 = 1.0 - _3039;
                        float _3079 = (0.5 / (((_3068 * ((_3054 * _3069) + _3039)) + 9.9999999392252902907785028219223e-09) + (((_3068 * _3069) + _3039) * _3054))) * _3068;
                        float _4420 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3090 = (((_3040 * 3.1415927410125732421875) * (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) / ((_3062 * _3062) * ((_3006 * 2.1991131305694580078125) + 3.141590118408203125))) * _2995;
                        _2843 = (_3010 * _2958.x) + _2916;
                        _2844 = (_3010 * _2958.y) + _2917;
                        _2845 = (_3010 * _2958.z) + _2918;
                        _2840 = (_3090 * _2975.x) + _2913;
                        _2841 = (_3090 * _2975.y) + _2914;
                        _2842 = (_3090 * _2975.z) + _2915;
                        if (_2920 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2913 = _2840;
                            _2914 = _2841;
                            _2915 = _2842;
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2920;
                        }
                    }
                    frontier_phi_71_pred = _2845;
                    frontier_phi_71_pred_1 = _2844;
                    frontier_phi_71_pred_2 = _2843;
                    frontier_phi_71_pred_3 = _2842;
                    frontier_phi_71_pred_4 = _2841;
                    frontier_phi_71_pred_5 = _2840;
                }
                _2626 = frontier_phi_71_pred;
                _2624 = frontier_phi_71_pred_1;
                _2622 = frontier_phi_71_pred_2;
                _2620 = frontier_phi_71_pred_3;
                _2618 = frontier_phi_71_pred_4;
                _2616 = frontier_phi_71_pred_5;
                uint _2775 = _2774 + 1u;
                if (_2775 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2768 = _2616;
                    _2769 = _2618;
                    _2770 = _2620;
                    _2771 = _2622;
                    _2772 = _2624;
                    _2773 = _2626;
                    _2774 = _2775;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
        }
        uvec4 _2629 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2630 = _2629.z;
        uint _2632 = (_2630 >> 8u) & 15u;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        if (((4294967295u << _2632) & _2535) == 0u)
        {
            _2736 = _2615;
            _2738 = _2617;
            _2740 = _2619;
            _2742 = _2621;
            _2744 = _2623;
            _2746 = _2625;
        }
        else
        {
            float _2761 = inversesqrt(dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595)));
            float _2762 = _2761 * _1593;
            float _2763 = _2761 * _1594;
            float _2764 = _2761 * _1595;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2632 < ((_2630 >> 12u) & 15u))
            {
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2896 = _2615;
                float _2897 = _2617;
                float _2898 = _2619;
                float _2899 = _2621;
                float _2900 = _2623;
                float _2901 = _2625;
                uint _2902 = _2632;
                uint _2911;
                bool _2912;
                for (;;)
                {
                    _2911 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                    _2912 = _2911 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2912)
                    {
                        frontier_phi_82_pred = _2901;
                        frontier_phi_82_pred_1 = _2900;
                        frontier_phi_82_pred_2 = _2899;
                        frontier_phi_82_pred_3 = _2898;
                        frontier_phi_82_pred_4 = _2897;
                        frontier_phi_82_pred_5 = _2896;
                    }
                    else
                    {
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3117 = _2896;
                        float _3118 = _2897;
                        float _3119 = _2898;
                        float _3120 = _2899;
                        float _3121 = _2900;
                        float _3122 = _2901;
                        uint _3123 = _2911;
                        uint _3124;
                        vec4 _3149;
                        float _3150;
                        vec4 _3165;
                        vec3 _3177;
                        vec4 _3193;
                        vec4 _3209;
                        float _3256;
                        bool _3257;
                        for (;;)
                        {
                            uint _3134 = ((_2902 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3123));
                            _3124 = (_3123 + 4294967295u) & _3123;
                            uint _3136 = _3134 * 40u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            _3150 = _3149.w;
                            uint _3152 = (_3134 * 40u) + 4u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3167 = (_3134 * 40u) + 8u;
                            _3177 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x));
                            uint _3180 = (_3134 * 40u) + 16u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3196 = (_3134 * 40u) + 20u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3212 = (_3134 * 40u) + 24u;
                            vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3231 = (_3134 * 40u) + 28u;
                            vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            _3256 = fma(_1595, _3244.z, fma(_1594, _3244.y, _3244.x * _1593)) + _3244.w;
                            _3257 = !((fma(_1595, _3225.z, fma(_1594, _3225.y, _3225.x * _1593)) + _3225.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3257)
                            {
                                float _3284 = _3149.x - _1593;
                                float _3285 = _3149.y - _1594;
                                float _3286 = _3149.z - _1595;
                                float _3287 = dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286));
                                float _3290 = inversesqrt(_3287);
                                float _3291 = _3290 * _3284;
                                float _3292 = _3290 * _3285;
                                float _3293 = _3290 * _3286;
                                float _3297 = 1.0 - (_3287 / (_3150 * _3150));
                                float _4431 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3302 = sqrt(_3287) * _3165.w;
                                float _3304 = 1.39999997615814208984375 / (_3302 + 1.39999997615814208984375);
                                float _3305 = _3304 * _3304;
                                float _3308 = ((1.0 - _3305) * dot(vec3(_3291, _3292, _3293), vec3(_418, _421, _424))) + _3305;
                                float _3311 = _3302 * _3302;
                                float _3315 = (fma(_1595, _3193.z, fma(_1594, _3193.y, _3193.x * _1593)) + _3193.w) / _3256;
                                float _3316 = (fma(_1595, _3209.z, fma(_1594, _3209.y, _3209.x * _1593)) + _3209.w) / _3256;
                                float _3320 = 1.0 - dot(vec2(_3315, _3316), vec2(_3315, _3316));
                                float _4447 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3322 = _3321 * (((isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0))) * _3298) / ((_3311 * 0.699999988079071044921875) + 1.0));
                                float _3334 = exp2(log2(1.0 / ((_3311 * 3.5) + 5.0)) * 0.25);
                                float _3335 = 1.0 - _494;
                                float _3342 = sqrt(1.0 - ((1.0 - (_3335 * _3335)) * (1.0 - (_3334 * _3334))));
                                float _3343 = _3342 * _3342;
                                float _3344 = _3343 * _3343;
                                float _3345 = _3291 - _2762;
                                float _3346 = _3292 - _2763;
                                float _3347 = _3293 - _2764;
                                float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                                float _3355 = dot(vec3(_418, _421, _424), vec3((-0.0) - _2762, (-0.0) - _2763, (-0.0) - _2764));
                                float _4458 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3359 = dot(vec3(_418, _421, _424), vec3(_3351 * _3345, _3351 * _3346, _3351 * _3347));
                                float _4469 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3366 = ((_3362 * _3362) * (_3344 + (-1.0))) + 1.0;
                                float _3367 = _3304 * _3343;
                                float _3368 = _3367 * _3367;
                                float _3374 = ((1.0 - _3368) * dot(vec3(_418, _421, _424), vec3(_3291, _3292, _3293))) + _3368;
                                float _4480 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3376 = 1.0 - _3343;
                                float _3386 = (0.5 / (((_3375 * ((_3358 * _3376) + _3343)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3343) * _3358))) * _3375;
                                float _4491 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3396 = (_3321 * _3298) * (((_3344 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3366 * _3366) * ((_3311 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3322 * _3165.z;
                                frontier_phi_88_pred_1 = _3322 * _3165.y;
                                frontier_phi_88_pred_2 = _3322 * _3165.x;
                                frontier_phi_88_pred_3 = _3396 * _3177.z;
                                frontier_phi_88_pred_4 = _3396 * _3177.y;
                                frontier_phi_88_pred_5 = _3396 * _3177.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3405 = frontier_phi_88_pred;
                            _3404 = frontier_phi_88_pred_1;
                            _3403 = frontier_phi_88_pred_2;
                            _3402 = frontier_phi_88_pred_3;
                            _3401 = frontier_phi_88_pred_4;
                            _3400 = frontier_phi_88_pred_5;
                            _3107 = _3403 + _3120;
                            _3108 = _3404 + _3121;
                            _3109 = _3405 + _3122;
                            _3104 = _3400 + _3117;
                            _3105 = _3401 + _3118;
                            _3106 = _3402 + _3119;
                            if (_3124 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3124;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3109;
                        frontier_phi_82_pred_1 = _3108;
                        frontier_phi_82_pred_2 = _3107;
                        frontier_phi_82_pred_3 = _3106;
                        frontier_phi_82_pred_4 = _3105;
                        frontier_phi_82_pred_5 = _3104;
                    }
                    _2747 = frontier_phi_82_pred;
                    _2745 = frontier_phi_82_pred_1;
                    _2743 = frontier_phi_82_pred_2;
                    _2741 = frontier_phi_82_pred_3;
                    _2739 = frontier_phi_82_pred_4;
                    _2737 = frontier_phi_82_pred_5;
                    uint _2903 = _2902 + 1u;
                    if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2896 = _2737;
                        _2897 = _2739;
                        _2898 = _2741;
                        _2899 = _2743;
                        _2900 = _2745;
                        _2901 = _2747;
                        _2902 = _2903;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2743;
                frontier_phi_63_64_ladder_1 = _2747;
                frontier_phi_63_64_ladder_2 = _2745;
                frontier_phi_63_64_ladder_3 = _2741;
                frontier_phi_63_64_ladder_4 = _2739;
                frontier_phi_63_64_ladder_5 = _2737;
            }
            else
            {
                frontier_phi_63_64_ladder = _2621;
                frontier_phi_63_64_ladder_1 = _2625;
                frontier_phi_63_64_ladder_2 = _2623;
                frontier_phi_63_64_ladder_3 = _2619;
                frontier_phi_63_64_ladder_4 = _2617;
                frontier_phi_63_64_ladder_5 = _2615;
            }
            _2736 = frontier_phi_63_64_ladder_5;
            _2738 = frontier_phi_63_64_ladder_4;
            _2740 = frontier_phi_63_64_ladder_3;
            _2742 = frontier_phi_63_64_ladder;
            _2744 = frontier_phi_63_64_ladder_2;
            _2746 = frontier_phi_63_64_ladder_1;
        }
        float _2751 = isnan(1.0) ? _478 : (isnan(_478) ? 1.0 : min(_478, 1.0));
        _2548 = (_2751 * _2742) + _2060;
        _2550 = (_2751 * _2744) + _2062;
        _2552 = (_2751 * _2746) + _2064;
        _2554 = ((_2736 * _463) * _2751) + _2398;
        _2556 = ((_2738 * _465) * _2751) + _2400;
        _2558 = ((_2740 * _466) * _2751) + _2402;
    }
    else
    {
        _2548 = _2060;
        _2550 = _2062;
        _2552 = _2064;
        _2554 = _2398;
        _2556 = _2400;
        _2558 = _2402;
    }
    float _4507 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4518 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4529 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _2575 = ((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2548 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _478))) + ((_2554 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1320)) * cbPerFrame._m0[3u].x);
    float _2576 = ((isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2550 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _478))) + ((_2556 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1320)) * cbPerFrame._m0[3u].x);
    float _2577 = ((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2552 + ((isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))) * _478))) + ((_2558 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _1320)) * cbPerFrame._m0[3u].x);
    uint _2578 = _437 + 6u;
    float _2586 = _397 / cbSceneParam._m0[86u].x;
    float _2587 = _398 / cbSceneParam._m0[86u].y;
    vec4 _2601 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2586, _2587, (log2((isnan(cbSceneParam._m0[77u].w) ? _317 : (isnan(_317) ? cbSceneParam._m0[77u].w : min(_317, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2603 = _2601.x;
    float _2604 = _2601.y;
    float _2605 = _2601.z;
    float _2606 = _2601.w;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    if (_317 > cbSceneParam._m0[78u].w)
    {
        float _2640 = isnan(_317) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _317 : min(cbSceneParam._m0[80u].w, _317));
        float _2641 = _2640 / _317;
        float _2652 = _2641 * _369;
        float _2653 = _370 * _2641;
        float _2654 = (-0.0) - _2653;
        float _2656 = _2641 * _371;
        float _2658 = (cbSceneParam._m0[77u].w * _2654) / _2640;
        float _2659 = _2658 + cbSceneParam._m0[79u].w;
        float _2660 = cbSceneParam._m0[79u].w - _2653;
        float _2666 = sqrt(((_2652 * _2652) + (_2653 * _2653)) + (_2656 * _2656));
        float _2669 = (1.0 - (cbSceneParam._m0[77u].w / _2640)) * _2666;
        float _2674 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2676 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2853;
        if (abs((_2654 - _2658) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2853 = ((((_2659 > 0.0) ? exp2(_2674 * _2659) : (2.0 - exp2(_2676 * _2659))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2669;
        }
        else
        {
            float _2797 = 1.0 / cbSceneParam._m0[80u].x;
            float _2798 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : max(_2659, _2660));
            float _2799 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : min(_2659, _2660));
            float _2808 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : min(_2798, 0.0));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            _2853 = ((abs(_2666 / _2654) * cbSceneParam._m0[80u].y) * ((((_2808 - _2809) * 2.0) - ((exp2(_2674 * (isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0)))) - exp2(_2674 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))))) * _2797)) - ((exp2(_2676 * _2808) - exp2(_2676 * _2809)) * _2797))) + (_2669 * cbSceneParam._m0[80u].z);
        }
        vec4 _2855 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2586, _2587, 1.0), 0.0);
        float _2864 = exp2((_2853 * (-1.44269502162933349609375)) * (1.0 - _2855.w));
        float _2865 = log2(_2864);
        float _2881 = log2(_2606);
        _2678 = (exp2(_2881 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].x)) * _2855.x) / cbSceneParam._m0[78u].x)) + _2603;
        _2680 = (exp2(_2881 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].y)) * _2855.y) / cbSceneParam._m0[78u].y)) + _2604;
        _2682 = (exp2(_2881 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].z)) * _2855.z) / cbSceneParam._m0[78u].z)) + _2605;
        _2684 = _2864 * _2606;
    }
    else
    {
        _2678 = _2603;
        _2680 = _2604;
        _2682 = _2605;
        _2684 = _2606;
    }
    bool _2891;
    vec4 _2694;
    vec4 _2716;
    float _2718;
    float _2722;
    float _2723;
    float _2724;
    float _2725;
    bool _2735;
    for (;;)
    {
        _2694 = cbMatDynParam._m0[0u];
        float _2696 = roundEven(_2694.y);
        bool _2697 = _2696 == 3.0;
        float _2698 = log2(_2684);
        float _2705 = exp2(_2698 * cbSceneParam._m0[78u].x) * _2575;
        float _2706 = exp2(_2698 * cbSceneParam._m0[78u].y) * _2576;
        float _2707 = exp2(_2698 * cbSceneParam._m0[78u].z) * _2577;
        float _2714 = _385 + (-0.5);
        _2716 = cbMtdParam._m0[1u];
        _2718 = _2716.y * _2714;
        float _2721 = (_2696 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2722 = _2721 * (_2697 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2678)));
        _2723 = _2721 * (_2697 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2680)));
        _2724 = _2721 * (_2697 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2682)));
        _2725 = _2714 * 0.999000012874603271484375;
        _2735 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2735)
        {
            if ((cbInstanceData._m0[_437 + 7u].x + _2725) < 0.5)
            {
                _2891 = true;
                break;
            }
        }
        uint _2832 = _439 + uint(_2694.w);
        if ((cbInstanceData._m0[_2832].w < 1.0) && ((cbInstanceData._m0[_2832].w + _2725) < 0.5))
        {
            _2891 = true;
            break;
        }
        if ((_2718 + _234) < _2716.x)
        {
            _2891 = true;
            break;
        }
        _2891 = false;
        break;
    }
    float _3095;
    if (_2891)
    {
        discard_state = true;
        _3095 = 0.0;
    }
    else
    {
        _3095 = cbInstanceData._m0[_2578].w;
    }
    SV_Target.x = _2722;
    SV_Target.y = _2723;
    SV_Target.z = _2724;
    SV_Target.w = _3095;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2578].w;
    discard_exit();
}


