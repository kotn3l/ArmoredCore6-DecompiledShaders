#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 7) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1291;
float _3679;
float _3680;
float _3681;
float _3682;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _228 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _229 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _230 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _234 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _235 = _234 * _228;
    float _236 = _234 * _229;
    float _237 = _234 * _230;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    float _255 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _256 = _255 * TANGENT_2.x;
    float _257 = _255 * TANGENT_2.y;
    float _258 = _255 * TANGENT_2.z;
    float _263;
    float _264;
    float _265;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _263 = (-0.0) - _242;
        _264 = (-0.0) - _243;
        _265 = (-0.0) - _244;
    }
    else
    {
        _263 = _242;
        _264 = _243;
        _265 = _244;
    }
    float _282 = (((1.0 - TEXCOORD_5.y) * (-2.7999999523162841796875)) * cbMtdParam._m0[15u].z) + 1.0;
    float _3691 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    vec4 _298 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _301 = _298.x;
    float _311 = ((cbMtdParam._m0[15u].w * (-1.39999997615814208984375)) * ((_301 + (-1.0)) + ((1.0 - TEXCOORD_5.x) * 2.0))) + 1.0;
    float _3702 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    vec4 _327 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _331 = _327.z;
    float _334 = (_327.x * 2.0) + (-1.0);
    float _335 = (_327.y * 2.0) + (-1.0);
    float _336 = dot(vec2(_334, _335), vec2(_334, _335));
    float _3713 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))));
    float _344 = fma(_341, _263, fma(_335, _256, _334 * _235));
    float _347 = fma(_341, _264, fma(_335, _257, _334 * _236));
    float _350 = fma(_341, _265, fma(_335, _258, _334 * _237));
    float _354 = inversesqrt(dot(vec3(_344, _347, _350), vec3(_344, _347, _350)));
    float _355 = _354 * _344;
    float _356 = _354 * _347;
    float _357 = _354 * _350;
    float _361 = exp2(log2(_356) * cbMtdParam._m0[15u].y) * cbMtdParam._m0[15u].x;
    float _3724 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = ((isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) + (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * (1.0 - (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))));
    float _369 = cbMtdParam._m0[13u].y * _301;
    float _380 = ((cbMtdParam._m0[14u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5.w - _369) + (cbMtdParam._m0[13u].w * TEXCOORD_5.w))) + 1.0;
    float _3735 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _382 = 1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)));
    float _383 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _384 = isnan(1.0) ? _383 : (isnan(_383) ? 1.0 : min(_383, 1.0));
    float _392 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.z - _369) + (cbMtdParam._m0[13u].z * TEXCOORD_5.z))) + 1.0;
    float _3756 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _394 = 1.0 - (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)));
    float _395 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _396 = isnan(1.0) ? _395 : (isnan(_395) ? 1.0 : min(_395, 1.0));
    vec4 _414 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    float _419 = cbMtdParam._m0[11u].x * _396;
    float _421 = cbMtdParam._m0[11u].y * _396;
    float _423 = cbMtdParam._m0[11u].z * _396;
    float _443 = _394 + _382;
    float _444 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _445 = isnan(1.0) ? _444 : (isnan(_444) ? 1.0 : min(_444, 1.0));
    vec4 _463 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _468 = _463.w;
    float _469 = _463.x * cbMtdParam._m0[10u].x;
    float _470 = _463.y * cbMtdParam._m0[10u].y;
    float _471 = _463.z * cbMtdParam._m0[10u].z;
    float _488 = (_469 - (_445 * _469)) + ((((((_416 * (cbMtdParam._m0[9u].x - _419)) * _384) + (_419 * _416)) * 4.55000019073486328125) * _445) * _469);
    float _489 = (_470 - (_445 * _470)) + ((((((_417 * (cbMtdParam._m0[9u].y - _421)) * _384) + (_421 * _417)) * 4.55000019073486328125) * _445) * _470);
    float _490 = (_471 - (_445 * _471)) + ((((((_418 * (cbMtdParam._m0[9u].z - _423)) * _384) + (_423 * _418)) * 4.55000019073486328125) * _445) * _471);
    float _3787 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _491 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _493 = 3.0 - (_491 * 2.0);
    float _495 = _491 * _491;
    float _505 = ((_495 * (cbMtdParam._m0[12u].x - _488)) * _493) + _488;
    float _506 = ((_495 * (cbMtdParam._m0[12u].y - _489)) * _493) + _489;
    float _507 = ((_495 * (cbMtdParam._m0[12u].z - _490)) * _493) + _490;
    vec4 _524 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _531 = (_524.x * 2.0) + (-1.0);
    float _532 = (_524.y * 2.0) + (-1.0);
    float _533 = dot(vec2(_531, _532), vec2(_531, _532));
    float _3798 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _541 = ((_524.z - _331) * _364) + _331;
    vec4 _553 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _559 = (_553.x * 2.0) + (-1.0);
    float _560 = (_553.y * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3809 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _566 = sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))));
    float _569 = fma(_566, _263, fma(_560, _256, _559 * _235));
    float _572 = fma(_566, _264, fma(_560, _257, _559 * _236));
    float _575 = fma(_566, _265, fma(_560, _258, _559 * _237));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    float _580 = _579 * _569;
    float _581 = _579 * _572;
    float _582 = _579 * _575;
    float _585 = fma(_582, _218, fma(_581, _217, _580 * _216));
    float _588 = fma(_582, _251, fma(_581, _250, _580 * _249));
    float _591 = fma(_582, _265, fma(_581, _264, _580 * _263));
    float _595 = inversesqrt(dot(vec3(_585, _588, _591), vec3(_585, _588, _591)));
    float _599 = fma(_357, _218, fma(_356, _217, _355 * _216));
    float _602 = fma(_357, _251, fma(_356, _250, _355 * _249));
    float _605 = fma(_357, _265, fma(_356, _264, _355 * _263));
    float _609 = inversesqrt(dot(vec3(_599, _602, _605), vec3(_599, _602, _605)));
    float _612 = _609 * _605;
    vec4 _625 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _631 = (_625.x * 2.0) + (-1.0);
    float _632 = (_625.y * 2.0) + (-1.0);
    float _633 = dot(vec2(_631, _632), vec2(_631, _632));
    float _3820 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))));
    float _641 = fma(_638, _263, fma(_632, _256, _631 * _235));
    float _644 = fma(_638, _264, fma(_632, _257, _631 * _236));
    float _647 = fma(_638, _265, fma(_632, _258, _631 * _237));
    float _651 = inversesqrt(dot(vec3(_641, _644, _647), vec3(_641, _644, _647)));
    float _652 = _651 * _641;
    float _653 = _651 * _644;
    float _654 = _651 * _647;
    float _657 = fma(_654, _218, fma(_653, _217, _652 * _216));
    float _660 = fma(_654, _251, fma(_653, _250, _652 * _249));
    float _663 = fma(_654, _265, fma(_653, _264, _652 * _263));
    float _667 = inversesqrt(dot(vec3(_657, _660, _663), vec3(_657, _660, _663)));
    float _682 = ((_609 * _599) + (((_585 * _384) * _595) * cbMtdParam._m0[14u].w)) + (((_657 * _396) * _667) * cbMtdParam._m0[14u].z);
    float _684 = ((_609 * _602) + (((_588 * _384) * _595) * cbMtdParam._m0[14u].w)) + (((_660 * _396) * _667) * cbMtdParam._m0[14u].z);
    float _691 = ((_531 - _682) * _364) + _682;
    float _692 = (_364 * (_532 - _684)) + _684;
    float _693 = (_364 * (sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) - _612)) + _612;
    float _696 = fma(_693, _263, fma(_692, _249, _691 * _216));
    float _699 = fma(_693, _264, fma(_692, _250, _691 * _217));
    float _702 = fma(_693, _265, fma(_692, _251, _691 * _218));
    float _706 = inversesqrt(dot(vec3(_696, _699, _702), vec3(_696, _699, _702)));
    float _707 = _706 * _696;
    float _708 = _706 * _699;
    float _709 = _706 * _702;
    float _3831 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _710 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _711 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3864 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3875 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3886 = isnan(0.0) ? cbMtdParam._m0[16u].x : (isnan(cbMtdParam._m0[16u].x) ? 0.0 : max(cbMtdParam._m0[16u].x, 0.0));
    float _715 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _782 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _772);
    float _783 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _772);
    float _784 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _772);
    float _788 = inversesqrt(dot(vec3(_782, _783, _784), vec3(_782, _783, _784)));
    float _789 = _782 * _788;
    float _790 = _783 * _788;
    float _791 = _784 * _788;
    vec4 _796 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _798 = _796.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _970 = sqrt(((_782 * _782) + (_783 * _783)) + (_784 * _784));
        float _976 = (cbMatDynParam._m0[5u].x * _970) + cbMatDynParam._m0[5u].y;
        float _3897 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _981 = (cbMatDynParam._m0[5u].z * _970) + cbMatDynParam._m0[5u].w;
        float _3908 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) - _977)) + _977) < ((_798 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _809 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _810 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _829 = fma(_709, cbSceneParam._m0[5u].z, fma(_708, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _707));
    float _832 = fma(_709, cbSceneParam._m0[6u].z, fma(_708, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _707));
    float _835 = fma(_709, cbSceneParam._m0[7u].z, fma(_708, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _707));
    uint _848 = uint(roundEven(NORMAL.w)) * 13u;
    uint _849 = _848 + 9u;
    uint _850 = _849 + uint(cbMatDynParam._m0[0u].w);
    float _856 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_850].x;
    float _857 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_850].y;
    float _858 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * cbInstanceData._m0[_850].z;
    float _3919 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _862 = 1.0 - _715;
    float _863 = _859 * _862;
    float _864 = _860 * _862;
    float _865 = _861 * _862;
    float _870 = (_859 + (-0.039999999105930328369140625)) * _715;
    float _871 = (_860 + (-0.039999999105930328369140625)) * _715;
    float _872 = (_861 + (-0.039999999105930328369140625)) * _715;
    float _873 = _870 + 0.039999999105930328369140625;
    float _875 = _871 + 0.039999999105930328369140625;
    float _876 = _872 + 0.039999999105930328369140625;
    vec4 _885 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _809, cbSceneParam._m0[86u].y * _810));
    float _888 = _885.x * TEXCOORD_4;
    float _889 = dot(vec3(_707, _708, _709), vec3(_789, _790, _791));
    float _892 = _889 * 2.0;
    float _896 = (_892 * _707) - _789;
    float _897 = (_892 * _708) - _790;
    float _898 = (_892 * _709) - _791;
    float _902 = abs(dot(vec3(_789, _790, _791), vec3(_707, _708, _709)));
    float _3952 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _904 = sqrt(_711);
    float _916 = exp2((_904 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_904 * 3.0));
    float _922 = (1.0 - _916) * ((_904 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _923 = _916 * _904;
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1290;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1015 = fma(_959, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951));
        float _1019 = fma(_959, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951));
        float _1023 = fma(_959, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951));
        float _1048 = _951 + _707;
        float _1049 = _955 + _708;
        float _1050 = _959 + _709;
        float _1060 = fma(_1050, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048)) - _1015;
        float _1061 = fma(_1050, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048)) - _1019;
        float _1062 = fma(_1050, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048)) - _1023;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1015 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1019 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[34u].z) + ((((((_1023 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1118 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1084.x + (-0.5));
        float _1120 = _1118 * (_1084.y + (-0.5));
        float _1121 = _1118 * (_1084.z + (-0.5));
        float _1128 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1091.x + (-0.5));
        float _1130 = _1128 * (_1091.y + (-0.5));
        float _1131 = _1128 * (_1091.z + (-0.5));
        float _1138 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1098.x + (-0.5));
        float _1140 = _1138 * (_1098.y + (-0.5));
        float _1141 = _1138 * (_1098.z + (-0.5));
        float _1148 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1105.x + (-0.5));
        float _1150 = _1148 * (_1105.y + (-0.5));
        float _1151 = _1148 * (_1105.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1172 = (dot(vec3(_707, _708, _709), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1182 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _4000 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1184 + 1.0))) + _1189) * _1152;
        float _1199 = _1120 * 0.5;
        float _1200 = _1130 * 0.5;
        float _1201 = _1140 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_707, _708, _709), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _4033 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1226 + 1.0))) + _1231) * _1153;
        float _1241 = _1121 * 0.5;
        float _1242 = _1131 * 0.5;
        float _1243 = _1141 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_707, _708, _709), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4066 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1268 + 1.0))) + _1273) * _1154;
        _1290 = _1121;
        _1292 = _1120;
        _1293 = _1119;
        _1294 = _1131;
        _1295 = _1130;
        _1296 = _1129;
        _1297 = _1141;
        _1298 = _1140;
        _1299 = _1139;
        _1300 = _1154;
        _1301 = _1153;
        _1302 = _1152;
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _1291;
        _1292 = _1291;
        _1293 = _1291;
        _1294 = _1291;
        _1295 = _1291;
        _1296 = _1291;
        _1297 = _1291;
        _1298 = _1291;
        _1299 = _1291;
        _1300 = _1291;
        _1301 = _1291;
        _1302 = _1291;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1334 = fma(_959, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951));
        float _1338 = fma(_959, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951));
        float _1342 = fma(_959, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951));
        float _1365 = _951 + _707;
        float _1366 = _955 + _708;
        float _1367 = _959 + _709;
        float _1377 = fma(_1367, cbModelParam._m0[30u].z, fma(_1366, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1365)) - _1334;
        float _1378 = fma(_1367, cbModelParam._m0[31u].z, fma(_1366, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1365)) - _1338;
        float _1379 = fma(_1367, cbModelParam._m0[32u].z, fma(_1366, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1365)) - _1342;
        float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
        float _1396 = ((_1383 * _1377) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1334 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1383 * _1378) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1338 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1383 * _1379) / cbModelParam._m0[35u].z) + ((((((_1342 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        float _1433 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1400.x + (-0.5));
        float _1435 = _1433 * (_1400.y + (-0.5));
        float _1436 = _1433 * (_1400.z + (-0.5));
        float _1443 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1407.x + (-0.5));
        float _1445 = _1443 * (_1407.y + (-0.5));
        float _1446 = _1443 * (_1407.z + (-0.5));
        float _1453 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1414.x + (-0.5));
        float _1455 = _1453 * (_1414.y + (-0.5));
        float _1456 = _1453 * (_1414.z + (-0.5));
        float _1463 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1421.x + (-0.5));
        float _1465 = _1463 * (_1421.y + (-0.5));
        float _1466 = _1463 * (_1421.z + (-0.5));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = _1434 * 0.5;
        float _1471 = _1444 * 0.5;
        float _1472 = _1454 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_707, _708, _709), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4129 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1497 + 1.0))) + _1502) * _1467;
        float _1512 = _1435 * 0.5;
        float _1513 = _1445 * 0.5;
        float _1514 = _1455 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_707, _708, _709), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4162 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1539 + 1.0))) + _1544) * _1468;
        float _1554 = _1436 * 0.5;
        float _1555 = _1446 * 0.5;
        float _1556 = _1456 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_707, _708, _709), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4195 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1581 + 1.0))) + _1586) * _1469;
        _1603 = _1436;
        _1604 = _1435;
        _1605 = _1434;
        _1606 = _1446;
        _1607 = _1445;
        _1608 = _1444;
        _1609 = _1456;
        _1610 = _1455;
        _1611 = _1454;
        _1612 = _1469;
        _1613 = _1468;
        _1614 = _1467;
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
    }
    else
    {
        _1603 = _1291;
        _1604 = _1291;
        _1605 = _1291;
        _1606 = _1291;
        _1607 = _1291;
        _1608 = _1291;
        _1609 = _1291;
        _1610 = _1291;
        _1611 = _1291;
        _1612 = _1291;
        _1613 = _1291;
        _1614 = _1291;
        _1615 = 0.0;
        _1616 = 0.0;
        _1617 = 0.0;
    }
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1303)) + _1303;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1305)) + _1305;
    float _1650 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1628, cbSceneParam._m0[89u].y, _1627 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1628, cbSceneParam._m0[90u].y, _1627 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1628, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1627));
    float _1671 = _896 * 0.5;
    float _1672 = _897 * 0.5;
    float _1673 = _898 * 0.5;
    float _1674 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1677 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1680 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1714;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1687 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1290, _1294, _1297, _1300));
        float _1691 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1695 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1702 = dot(vec4(cbModelParam._m0[39u]), vec4(_1671, _1672, _1673, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1725;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1716 = dot(vec4(cbModelParam._m0[40u]), vec4(_1671, _1672, _1673, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1729 = (_1725 * cbModelParam._m0[1u].x) + (_1714 * (1.0 - cbModelParam._m0[1u].x));
    float _1739 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _711);
    float _1740 = isnan(_1739) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1739 : min(cbModelParam._m0[25u].z, _1739));
    float _1820;
    float _1822;
    float _1824;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1787 = fma(_959, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951)) + cbModelParam._m0[13u].w;
        float _1791 = fma(_959, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951)) + cbModelParam._m0[14u].w;
        float _1795 = fma(_959, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951)) + cbModelParam._m0[15u].w;
        float _1798 = fma(_898, cbModelParam._m0[13u].z, fma(_897, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896));
        float _1801 = fma(_898, cbModelParam._m0[14u].z, fma(_897, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896));
        float _1804 = fma(_898, cbModelParam._m0[15u].z, fma(_897, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896));
        float _1832;
        if (_1798 > 0.0)
        {
            _1832 = abs((1.0 - _1787) / _1798);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1787 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1832 = frontier_phi_19_17_ladder;
        }
        float _2038;
        if (_1801 > 0.0)
        {
            _2038 = abs((1.0 - _1791) / _1801);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1791 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2038 = frontier_phi_28_24_ladder;
        }
        float _2292;
        if (_1804 > 0.0)
        {
            _2292 = abs((1.0 - _1795) / _1804);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1795 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2292 = frontier_phi_40_35_ladder;
        }
        float _2294 = isnan(_2038) ? _1832 : (isnan(_1832) ? _2038 : min(_1832, _2038));
        float _2295 = isnan(_2292) ? _2294 : (isnan(_2294) ? _2292 : min(_2294, _2292));
        float _2299 = (_2295 * _1798) + _1787;
        float _2300 = (_2295 * _1801) + _1791;
        float _2301 = (_2295 * _1804) + _1795;
        float _2302 = _2295 * 9.9999997473787516355514526367188e-05;
        float _2304 = (-1.0) - _2302;
        float _2306 = _2302 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2301 > _2306) || ((_2301 < _2304) || ((_2300 > _2306) || ((_2300 < _2304) || ((_2299 < _2304) || (_2299 > _2306))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2301, cbModelParam._m0[9u].z, fma(_2300, cbModelParam._m0[9u].y, _2299 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2301, cbModelParam._m0[10u].z, fma(_2300, cbModelParam._m0[10u].y, _2299 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2301, cbModelParam._m0[11u].z, fma(_2300, cbModelParam._m0[11u].y, _2299 * cbModelParam._m0[11u].x))), _1740);
            frontier_phi_18_40_ladder = _2429.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2429.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2429.x * cbModelParam._m0[1u].y;
        }
        _1820 = frontier_phi_18_40_ladder_2;
        _1822 = frontier_phi_18_40_ladder_1;
        _1824 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_896, _897, _898), _1740);
        _1820 = _1808.x * cbModelParam._m0[1u].y;
        _1822 = _1808.y * cbModelParam._m0[1u].y;
        _1824 = _1808.z * cbModelParam._m0[1u].y;
    }
    float _1828 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _711);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1828 : min(cbModelParam._m0[25u].w, _1828));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1886 = fma(_959, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951)) + cbModelParam._m0[21u].w;
        float _1890 = fma(_959, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951)) + cbModelParam._m0[22u].w;
        float _1894 = fma(_959, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951)) + cbModelParam._m0[23u].w;
        float _1897 = fma(_898, cbModelParam._m0[21u].z, fma(_897, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896));
        float _1900 = fma(_898, cbModelParam._m0[22u].z, fma(_897, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896));
        float _1903 = fma(_898, cbModelParam._m0[23u].z, fma(_897, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896));
        float _2043;
        if (_1897 > 0.0)
        {
            _2043 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2043 = frontier_phi_30_26_ladder;
        }
        float _2319;
        if (_1900 > 0.0)
        {
            _2319 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2319 = frontier_phi_42_37_ladder;
        }
        float _2532;
        if (_1903 > 0.0)
        {
            _2532 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2532 = frontier_phi_51_48_ladder;
        }
        float _2534 = isnan(_2319) ? _2043 : (isnan(_2043) ? _2319 : min(_2043, _2319));
        float _2535 = isnan(_2532) ? _2534 : (isnan(_2534) ? _2532 : min(_2534, _2532));
        float _2539 = (_2535 * _1897) + _1886;
        float _2540 = (_2535 * _1900) + _1890;
        float _2541 = (_2535 * _1903) + _1894;
        float _2542 = _2535 * 9.9999997473787516355514526367188e-05;
        float _2543 = (-1.0) - _2542;
        float _2545 = _2542 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2541 > _2545) || ((_2541 < _2543) || ((_2540 > _2545) || ((_2540 < _2543) || ((_2539 < _2543) || (_2539 > _2545))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2541, cbModelParam._m0[17u].z, fma(_2540, cbModelParam._m0[17u].y, _2539 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2541, cbModelParam._m0[18u].z, fma(_2540, cbModelParam._m0[18u].y, _2539 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2541, cbModelParam._m0[19u].z, fma(_2540, cbModelParam._m0[19u].y, _2539 * cbModelParam._m0[19u].x))), _1829);
            frontier_phi_27_51_ladder = _2741.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2741.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2741.x * cbModelParam._m0[1u].z;
        }
        _1922 = frontier_phi_27_51_ladder_2;
        _1924 = frontier_phi_27_51_ladder_1;
        _1926 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_896, _897, _898), _1829);
        _1922 = _1906.x * cbModelParam._m0[1u].z;
        _1924 = _1906.y * cbModelParam._m0[1u].z;
        _1926 = _1906.z * cbModelParam._m0[1u].z;
    }
    float _1939 = (((_922 * _873) + _923) * _888) * ((cbModelParam._m0[1u].w * (_1922 - _1820)) + _1820);
    float _1941 = (((_922 * _875) + _923) * _888) * ((cbModelParam._m0[1u].w * (_1924 - _1822)) + _1822);
    float _1943 = (((_922 * _876) + _923) * _888) * ((cbModelParam._m0[1u].w * (_1926 - _1824)) + _1824);
    float _1946 = fma(_1943, cbSceneParam._m0[89u].z, fma(_1941, cbSceneParam._m0[89u].y, _1939 * cbSceneParam._m0[89u].x));
    float _1949 = fma(_1943, cbSceneParam._m0[90u].z, fma(_1941, cbSceneParam._m0[90u].y, _1939 * cbSceneParam._m0[90u].x));
    float _1952 = fma(_1943, cbSceneParam._m0[91u].z, fma(_1941, cbSceneParam._m0[91u].y, _1939 * cbSceneParam._m0[91u].x));
    uvec4 _1962 = floatBitsToUint(cbInstanceData._m0[_848 + 5u]);
    uint _1964 = _1962.x * 14u;
    uint _1965 = _1964 + 13u;
    float _1972 = _888 + (-1.0);
    float _1977 = (cbLight._m0[_1965].x * _1972) + 1.0;
    float _1978 = (cbLight._m0[_1965].y * _1972) + 1.0;
    float _1979 = (cbLight._m0[_1965].z * _1972) + 1.0;
    float _1980 = (cbLight._m0[_1965].w * _1972) + 1.0;
    uint _1981 = _1964 + 5u;
    float _1987 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
    uint _1991 = _1964 + 4u;
    float _1997 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
    uint _2001 = _1964 | 1u;
    float _2012 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_707, _708, _709));
    float _2015 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_707, _708, _709));
    float _4331 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _4342 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2020 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * 0.3183098733425140380859375;
    float _2022 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * 0.3183098733425140380859375;
    float _2029 = ((cbLight._m0[_1981].x * _1987) * _2022) + ((cbLight._m0[_1991].x * _1997) * _2020);
    float _2030 = ((_1987 * cbLight._m0[_1981].y) * _2022) + ((_1997 * cbLight._m0[_1991].y) * _2020);
    float _2031 = ((_1987 * cbLight._m0[_1981].z) * _2022) + ((_1997 * cbLight._m0[_1991].z) * _2020);
    uvec4 _2035 = floatBitsToUint(cbLight._m0[_1964 + 12u]);
    bool _2037 = _2035.x == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_2037)
    {
        _2048 = _2029;
        _2050 = _2030;
        _2052 = _2031;
    }
    else
    {
        uint _2056 = _1964 + 6u;
        float _2072 = (dot(vec3(cbLight._m0[_1964 + 2u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2073 = _2072 * _2072;
        float _4353 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2074 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2075 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2048 = (((cbLight._m0[_2056].x * 0.3183098733425140380859375) * _2074) * _2075) + _2029;
        _2050 = (((cbLight._m0[_2056].y * 0.3183098733425140380859375) * _2074) * _2075) + _2030;
        _2052 = (((cbLight._m0[_2056].z * 0.3183098733425140380859375) * _2074) * _2075) + _2031;
    }
    bool _2055 = _2035.y == 0u;
    float _2093;
    float _2095;
    float _2097;
    if (_2055)
    {
        _2093 = _2048;
        _2095 = _2050;
        _2097 = _2052;
    }
    else
    {
        uint _2263 = _1964 + 7u;
        float _2279 = (dot(vec3(cbLight._m0[_1964 + 3u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2280 = _2279 * _2279;
        float _4369 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2281 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2282 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
        _2093 = (((cbLight._m0[_2263].x * 0.3183098733425140380859375) * _2281) * _2282) + _2048;
        _2095 = (((cbLight._m0[_2263].y * 0.3183098733425140380859375) * _2281) * _2282) + _2050;
        _2097 = (((cbLight._m0[_2263].z * 0.3183098733425140380859375) * _2281) * _2282) + _2052;
    }
    uint _2100 = _1964 + 8u;
    float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1964].w)) * _711) * 0.949999988079071044921875);
    float _2114 = _2113 * _2113;
    float _2115 = cbLight._m0[_1964].x + _789;
    float _2116 = cbLight._m0[_1964].y + _790;
    float _2117 = cbLight._m0[_1964].z + _791;
    float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
    float _2122 = _2121 * _2115;
    float _2123 = _2121 * _2116;
    float _2124 = _2121 * _2117;
    float _2125 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_1964].xyz));
    float _4385 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _4396 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2129 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2130 = dot(vec3(_707, _708, _709), vec3(_2122, _2123, _2124));
    float _4407 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2134 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_2122, _2123, _2124));
    float _4418 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = _2114 * _2114;
    float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
    float _2150 = exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0);
    float _2151 = 0.959999978542327880859375 - _870;
    float _2153 = 0.959999978542327880859375 - _871;
    float _2154 = 0.959999978542327880859375 - _872;
    float _2161 = 1.0 - _2114;
    float _2172 = (0.5 / (((_2129 * ((_2128 * _2161) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2161) + _2114) * _2128))) * _2128;
    float _4429 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2174 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
    uint _2185 = _1964 + 9u;
    float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _711) * 0.949999988079071044921875);
    float _2197 = _2196 * _2196;
    float _2198 = cbLight._m0[_2001].x + _789;
    float _2199 = cbLight._m0[_2001].y + _790;
    float _2200 = cbLight._m0[_2001].z + _791;
    float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
    float _2205 = _2204 * _2198;
    float _2206 = _2204 * _2199;
    float _2207 = _2204 * _2200;
    float _2208 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2001].xyz));
    float _4440 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2212 = dot(vec3(_707, _708, _709), vec3(_2205, _2206, _2207));
    float _4451 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2216 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2205, _2206, _2207));
    float _4462 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2220 = _2197 * _2197;
    float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
    float _2231 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
    float _2238 = 1.0 - _2197;
    float _2248 = (0.5 / (((_2129 * ((_2211 * _2238) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2238) + _2197) * _2211))) * _2211;
    float _4473 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2250 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
    float _2260 = (((((_2231 * _2151) + _873) * cbLight._m0[_2185].x) * _2250) * _1987) + (((((_2150 * _2151) + _873) * cbLight._m0[_2100].x) * _2174) * _1997);
    float _2261 = (((((_2231 * _2153) + _875) * cbLight._m0[_2185].y) * _2250) * _1987) + (((((_2150 * _2153) + _875) * cbLight._m0[_2100].y) * _2174) * _1997);
    float _2262 = (((((_2231 * _2154) + _876) * cbLight._m0[_2185].z) * _2250) * _1987) + (((((_2150 * _2154) + _876) * cbLight._m0[_2100].z) * _2174) * _1997);
    float _2324;
    float _2326;
    float _2328;
    if (_2037)
    {
        _2324 = _2260;
        _2326 = _2261;
        _2328 = _2262;
    }
    else
    {
        uint _2330 = _1964 + 2u;
        uint _2334 = _1964 + 10u;
        float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _711) * 0.949999988079071044921875);
        float _2349 = _2348 * _2348;
        float _2350 = cbLight._m0[_2330].x + _789;
        float _2351 = cbLight._m0[_2330].y + _790;
        float _2352 = cbLight._m0[_2330].z + _791;
        float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
        float _2357 = _2356 * _2350;
        float _2358 = _2356 * _2351;
        float _2359 = _2356 * _2352;
        float _2360 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2330].xyz));
        float _4484 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2364 = dot(vec3(_707, _708, _709), vec3(_2357, _2358, _2359));
        float _4495 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2368 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2357, _2358, _2359));
        float _4506 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2372 = _2349 * _2349;
        float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
        float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0);
        float _2390 = 1.0 - _2349;
        float _2400 = (0.5 / (((_2129 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2390) + _2349) * _2363))) * _2363;
        float _4517 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2324 = (((((_2383 * _2151) + _873) * cbLight._m0[_2334].x) * _2402) * _2403) + _2260;
        _2326 = (((((_2383 * _2153) + _875) * cbLight._m0[_2334].y) * _2402) * _2403) + _2261;
        _2328 = (((((_2383 * _2154) + _876) * cbLight._m0[_2334].z) * _2402) * _2403) + _2262;
    }
    float _2438;
    float _2440;
    float _2442;
    if (_2055)
    {
        _2438 = _2324;
        _2440 = _2326;
        _2442 = _2328;
    }
    else
    {
        uint _2449 = _1964 + 3u;
        uint _2453 = _1964 + 11u;
        float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2449].w)) * _711) * 0.949999988079071044921875);
        float _2468 = _2467 * _2467;
        float _2469 = cbLight._m0[_2449].x + _789;
        float _2470 = cbLight._m0[_2449].y + _790;
        float _2471 = cbLight._m0[_2449].z + _791;
        float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
        float _2476 = _2475 * _2469;
        float _2477 = _2475 * _2470;
        float _2478 = _2475 * _2471;
        float _2479 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2449].xyz));
        float _4533 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2483 = dot(vec3(_707, _708, _709), vec3(_2476, _2477, _2478));
        float _4544 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2487 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_2476, _2477, _2478));
        float _4555 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2491 = _2468 * _2468;
        float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
        float _2502 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
        float _2509 = 1.0 - _2468;
        float _2519 = (0.5 / (((_2129 * ((_2482 * _2509) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2509) + _2468) * _2482))) * _2482;
        float _4566 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2521 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
        float _2522 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
        _2438 = (((((_2502 * _2151) + _873) * cbLight._m0[_2453].x) * _2521) * _2522) + _2324;
        _2440 = (((((_2502 * _2153) + _875) * cbLight._m0[_2453].y) * _2521) * _2522) + _2326;
        _2442 = (((((_2502 * _2154) + _876) * cbLight._m0[_2453].z) * _2521) * _2522) + _2328;
    }
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    if (_1962.y == 0u)
    {
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2597;
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2597;
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2597;
        uvec4 _2612 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2613 = _2612.x;
        uint _2624 = uint((float(_2612.y) * floor(float(uint(cbSceneParam._m0[85u].y * _810) / _2613))) + floor(float(uint(cbSceneParam._m0[85u].x * _809) / _2613)));
        float _2634 = (log2(_2600 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2635 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        uint _2638 = uint(isnan(14.0) ? _2635 : (isnan(_2635) ? 14.0 : min(_2635, 14.0)));
        uvec4 _2643 = texelFetch(g_lightClusterGridBuffer, int(((_2638 << 2u) + (_2624 << 6u)) >> 2u));
        uint _2644 = _2643.x;
        uint _2645 = _2612.z;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        if (((((1u << ((_2645 >> 4u) & 15u)) + 4294967295u) & _2644) == 0u) || ((_2645 & 240u) == 0u))
        {
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
        }
        else
        {
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            uint _2904 = 0u;
            uint _2913;
            bool _2914;
            for (;;)
            {
                _2913 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_2904 << 2u)) >> 2u)).x;
                _2914 = _2913 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2914)
                {
                    frontier_phi_68_pred = _2900;
                    frontier_phi_68_pred_1 = _2903;
                    frontier_phi_68_pred_2 = _2902;
                    frontier_phi_68_pred_3 = _2901;
                    frontier_phi_68_pred_4 = _2899;
                    frontier_phi_68_pred_5 = _2898;
                }
                else
                {
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    uint _3049;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2900;
                    _3046 = _2901;
                    _3047 = _2902;
                    _3048 = _2903;
                    _3049 = _2913;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    for (;;)
                    {
                        uint _3053 = uint(findLSB(_3049)) + (_2904 << 5u);
                        uint _3050 = (_3049 + 4294967295u) & _3049;
                        uint _3055 = _3053 * 48u;
                        vec4 _3069 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 3u)).x));
                        uint _3075 = (_3053 * 48u) + 4u;
                        vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 3u)).x));
                        uint _3094 = (_3053 * 48u) + 8u;
                        vec3 _3105 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x));
                        float _3109 = _3069.x - _2598;
                        float _3110 = _3069.y - _2599;
                        float _3111 = _3069.z - _2600;
                        float _3112 = dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111));
                        float _3115 = inversesqrt(_3112);
                        float _3116 = _3115 * _3109;
                        float _3117 = _3115 * _3110;
                        float _3118 = _3115 * _3111;
                        float _3119 = dot(vec3(_829, _832, _835), vec3(_3116, _3117, _3118));
                        float _3124 = 1.0 - (_3112 * _3069.w);
                        float _4592 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3125 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3126 = sqrt(_3112) * _3088.w;
                        float _3129 = 1.39999997615814208984375 / (_3126 + 1.39999997615814208984375);
                        float _3130 = _3129 * _3129;
                        float _3133 = ((1.0 - _3130) * _3119) + _3130;
                        float _3136 = _3126 * _3126;
                        float _3140 = ((isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0))) * _3125) / ((_3136 * 0.699999988079071044921875) + 1.0);
                        float _3144 = (-0.0) - _2598;
                        float _3145 = (-0.0) - _2599;
                        float _3146 = (-0.0) - _2600;
                        float _3150 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
                        float _3151 = _3150 * _3144;
                        float _3152 = _3150 * _3145;
                        float _3153 = _3150 * _3146;
                        float _3161 = exp2(log2(1.0 / ((_3136 * 3.5) + 5.0)) * 0.25);
                        float _3162 = 1.0 - _904;
                        float _3169 = sqrt(1.0 - ((1.0 - (_3162 * _3162)) * (1.0 - (_3161 * _3161))));
                        float _3170 = _3169 * _3169;
                        float _3171 = _3170 * _3170;
                        float _3172 = _3151 + _3116;
                        float _3173 = _3152 + _3117;
                        float _3174 = _3153 + _3118;
                        float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
                        float _3182 = dot(vec3(_829, _832, _835), vec3(_3151, _3152, _3153));
                        float _4608 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3185 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3186 = dot(vec3(_829, _832, _835), vec3(_3178 * _3172, _3178 * _3173, _3178 * _3174));
                        float _4619 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3189 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3193 = ((_3189 * _3189) * (_3171 + (-1.0))) + 1.0;
                        float _3194 = _3129 * _3170;
                        float _3195 = _3194 * _3194;
                        float _3198 = ((1.0 - _3195) * _3119) + _3195;
                        float _4630 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3199 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3200 = 1.0 - _3170;
                        float _3210 = (0.5 / (((_3199 * ((_3185 * _3200) + _3170)) + 9.9999999392252902907785028219223e-09) + (((_3199 * _3200) + _3170) * _3185))) * _3199;
                        float _4641 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3221 = (((_3171 * 3.1415927410125732421875) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) / ((_3193 * _3193) * ((_3136 * 2.1991131305694580078125) + 3.141590118408203125))) * _3125;
                        _2973 = (_3140 * _3088.x) + _3046;
                        _2974 = (_3140 * _3088.y) + _3047;
                        _2975 = (_3140 * _3088.z) + _3048;
                        _2970 = (_3221 * _3105.x) + _3043;
                        _2971 = (_3221 * _3105.y) + _3044;
                        _2972 = (_3221 * _3105.z) + _3045;
                        if (_3050 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _2972;
                            _3046 = _2973;
                            _3047 = _2974;
                            _3048 = _2975;
                            _3049 = _3050;
                        }
                    }
                    frontier_phi_68_pred = _2972;
                    frontier_phi_68_pred_1 = _2975;
                    frontier_phi_68_pred_2 = _2974;
                    frontier_phi_68_pred_3 = _2973;
                    frontier_phi_68_pred_4 = _2971;
                    frontier_phi_68_pred_5 = _2970;
                }
                _2751 = frontier_phi_68_pred;
                _2757 = frontier_phi_68_pred_1;
                _2755 = frontier_phi_68_pred_2;
                _2753 = frontier_phi_68_pred_3;
                _2749 = frontier_phi_68_pred_4;
                _2747 = frontier_phi_68_pred_5;
                uint _2905 = _2904 + 1u;
                if (_2905 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2898 = _2747;
                    _2899 = _2749;
                    _2900 = _2751;
                    _2901 = _2753;
                    _2902 = _2755;
                    _2903 = _2757;
                    _2904 = _2905;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
        }
        uvec4 _2760 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2761 = _2760.z;
        uint _2763 = (_2761 >> 8u) & 15u;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        if (((4294967295u << _2763) & _2644) == 0u)
        {
            _2866 = _2746;
            _2868 = _2748;
            _2870 = _2750;
            _2872 = _2752;
            _2874 = _2754;
            _2876 = _2756;
        }
        else
        {
            float _2891 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
            float _2892 = _2891 * _2598;
            float _2893 = _2891 * _2599;
            float _2894 = _2891 * _2600;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2763 < ((_2761 >> 12u) & 15u))
            {
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _3026 = _2746;
                float _3027 = _2748;
                float _3028 = _2750;
                float _3029 = _2752;
                float _3030 = _2754;
                float _3031 = _2756;
                uint _3032 = _2763;
                uint _3041;
                bool _3042;
                for (;;)
                {
                    _3041 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_3032 << 2u)) >> 2u)).x;
                    _3042 = _3041 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3042)
                    {
                        frontier_phi_79_pred = _3031;
                        frontier_phi_79_pred_1 = _3030;
                        frontier_phi_79_pred_2 = _3029;
                        frontier_phi_79_pred_3 = _3028;
                        frontier_phi_79_pred_4 = _3027;
                        frontier_phi_79_pred_5 = _3026;
                    }
                    else
                    {
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3248 = _3026;
                        float _3249 = _3027;
                        float _3250 = _3028;
                        float _3251 = _3029;
                        float _3252 = _3030;
                        float _3253 = _3031;
                        uint _3254 = _3041;
                        uint _3255;
                        vec4 _3280;
                        float _3281;
                        vec4 _3296;
                        vec3 _3308;
                        vec4 _3323;
                        vec4 _3339;
                        float _3386;
                        bool _3387;
                        for (;;)
                        {
                            uint _3265 = ((_3032 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3254));
                            _3255 = (_3254 + 4294967295u) & _3254;
                            uint _3267 = _3265 * 40u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            _3281 = _3280.w;
                            uint _3283 = (_3265 * 40u) + 4u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3298 = (_3265 * 40u) + 8u;
                            _3308 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x));
                            uint _3310 = (_3265 * 40u) + 16u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3326 = (_3265 * 40u) + 20u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3342 = (_3265 * 40u) + 24u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3361 = (_3265 * 40u) + 28u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3386 = fma(_2600, _3374.z, fma(_2599, _3374.y, _3374.x * _2598)) + _3374.w;
                            _3387 = !((fma(_2600, _3355.z, fma(_2599, _3355.y, _3355.x * _2598)) + _3355.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3387)
                            {
                                float _3414 = _3280.x - _2598;
                                float _3415 = _3280.y - _2599;
                                float _3416 = _3280.z - _2600;
                                float _3417 = dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416));
                                float _3420 = inversesqrt(_3417);
                                float _3421 = _3420 * _3414;
                                float _3422 = _3420 * _3415;
                                float _3423 = _3420 * _3416;
                                float _3427 = 1.0 - (_3417 / (_3281 * _3281));
                                float _4652 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3432 = sqrt(_3417) * _3296.w;
                                float _3434 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                                float _3435 = _3434 * _3434;
                                float _3438 = ((1.0 - _3435) * dot(vec3(_3421, _3422, _3423), vec3(_829, _832, _835))) + _3435;
                                float _3441 = _3432 * _3432;
                                float _3445 = (fma(_2600, _3323.z, fma(_2599, _3323.y, _3323.x * _2598)) + _3323.w) / _3386;
                                float _3446 = (fma(_2600, _3339.z, fma(_2599, _3339.y, _3339.x * _2598)) + _3339.w) / _3386;
                                float _3450 = 1.0 - dot(vec2(_3445, _3446), vec2(_3445, _3446));
                                float _4668 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3452 = _3451 * (((isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0))) * _3428) / ((_3441 * 0.699999988079071044921875) + 1.0));
                                float _3464 = exp2(log2(1.0 / ((_3441 * 3.5) + 5.0)) * 0.25);
                                float _3465 = 1.0 - _904;
                                float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                                float _3473 = _3472 * _3472;
                                float _3474 = _3473 * _3473;
                                float _3475 = _3421 - _2892;
                                float _3476 = _3422 - _2893;
                                float _3477 = _3423 - _2894;
                                float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                                float _3485 = dot(vec3(_829, _832, _835), vec3((-0.0) - _2892, (-0.0) - _2893, (-0.0) - _2894));
                                float _4679 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3489 = dot(vec3(_829, _832, _835), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                                float _4690 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3492 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                                float _3497 = _3434 * _3473;
                                float _3498 = _3497 * _3497;
                                float _3504 = ((1.0 - _3498) * dot(vec3(_829, _832, _835), vec3(_3421, _3422, _3423))) + _3498;
                                float _4701 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3506 = 1.0 - _3473;
                                float _3516 = (0.5 / (((_3505 * ((_3488 * _3506) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3473) * _3488))) * _3505;
                                float _4712 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3526 = (_3451 * _3428) * (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) / ((_3496 * _3496) * ((_3441 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3452 * _3296.z;
                                frontier_phi_85_pred_1 = _3452 * _3296.y;
                                frontier_phi_85_pred_2 = _3452 * _3296.x;
                                frontier_phi_85_pred_3 = _3526 * _3308.z;
                                frontier_phi_85_pred_4 = _3526 * _3308.y;
                                frontier_phi_85_pred_5 = _3526 * _3308.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3535 = frontier_phi_85_pred;
                            _3534 = frontier_phi_85_pred_1;
                            _3533 = frontier_phi_85_pred_2;
                            _3532 = frontier_phi_85_pred_3;
                            _3531 = frontier_phi_85_pred_4;
                            _3530 = frontier_phi_85_pred_5;
                            _3238 = _3533 + _3251;
                            _3239 = _3534 + _3252;
                            _3240 = _3535 + _3253;
                            _3235 = _3530 + _3248;
                            _3236 = _3531 + _3249;
                            _3237 = _3532 + _3250;
                            if (_3255 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3255;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3240;
                        frontier_phi_79_pred_1 = _3239;
                        frontier_phi_79_pred_2 = _3238;
                        frontier_phi_79_pred_3 = _3237;
                        frontier_phi_79_pred_4 = _3236;
                        frontier_phi_79_pred_5 = _3235;
                    }
                    _2877 = frontier_phi_79_pred;
                    _2875 = frontier_phi_79_pred_1;
                    _2873 = frontier_phi_79_pred_2;
                    _2871 = frontier_phi_79_pred_3;
                    _2869 = frontier_phi_79_pred_4;
                    _2867 = frontier_phi_79_pred_5;
                    uint _3033 = _3032 + 1u;
                    if (_3033 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3026 = _2867;
                        _3027 = _2869;
                        _3028 = _2871;
                        _3029 = _2873;
                        _3030 = _2875;
                        _3031 = _2877;
                        _3032 = _3033;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2873;
                frontier_phi_60_61_ladder_1 = _2877;
                frontier_phi_60_61_ladder_2 = _2875;
                frontier_phi_60_61_ladder_3 = _2871;
                frontier_phi_60_61_ladder_4 = _2869;
                frontier_phi_60_61_ladder_5 = _2867;
            }
            else
            {
                frontier_phi_60_61_ladder = _2752;
                frontier_phi_60_61_ladder_1 = _2756;
                frontier_phi_60_61_ladder_2 = _2754;
                frontier_phi_60_61_ladder_3 = _2750;
                frontier_phi_60_61_ladder_4 = _2748;
                frontier_phi_60_61_ladder_5 = _2746;
            }
            _2866 = frontier_phi_60_61_ladder_5;
            _2868 = frontier_phi_60_61_ladder_4;
            _2870 = frontier_phi_60_61_ladder_3;
            _2872 = frontier_phi_60_61_ladder;
            _2874 = frontier_phi_60_61_ladder_2;
            _2876 = frontier_phi_60_61_ladder_1;
        }
        float _2881 = isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0));
        _2656 = (_2881 * _2872) + _2093;
        _2658 = (_2881 * _2874) + _2095;
        _2660 = (_2881 * _2876) + _2097;
        _2662 = ((_2866 * _873) * _2881) + _2438;
        _2664 = ((_2868 * _875) * _2881) + _2440;
        _2666 = ((_2870 * _876) * _2881) + _2442;
    }
    else
    {
        _2656 = _2093;
        _2658 = _2095;
        _2660 = _2097;
        _2662 = _2438;
        _2664 = _2440;
        _2666 = _2442;
    }
    float _4728 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4739 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4750 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4761 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _2684 = ((isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2656 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _888))) + ((_2662 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1729)) * cbPerFrame._m0[3u].x);
    float _2685 = ((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2658 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _888))) + ((_2664 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1729)) * cbPerFrame._m0[3u].x);
    float _2686 = ((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2660 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _888))) + ((_2666 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1729)) * cbPerFrame._m0[3u].x);
    float _2691 = cbInstanceData._m0[_848 + 6u].w * (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)));
    float _2696 = _809 / cbSceneParam._m0[86u].x;
    float _2697 = _810 / cbSceneParam._m0[86u].y;
    vec4 _2711 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2696, _2697, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2713 = _2711.x;
    float _2714 = _2711.y;
    float _2715 = _2711.z;
    float _2716 = _2711.w;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _2771 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _2772 = _2771 / _731;
        float _2783 = _2772 * _782;
        float _2784 = _783 * _2772;
        float _2785 = (-0.0) - _2784;
        float _2786 = _2772 * _784;
        float _2788 = (cbSceneParam._m0[77u].w * _2785) / _2771;
        float _2789 = _2788 + cbSceneParam._m0[79u].w;
        float _2790 = cbSceneParam._m0[79u].w - _2784;
        float _2796 = sqrt(((_2783 * _2783) + (_2784 * _2784)) + (_2786 * _2786));
        float _2799 = (1.0 - (cbSceneParam._m0[77u].w / _2771)) * _2796;
        float _2804 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2806 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2983;
        if (abs((_2785 - _2788) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2983 = ((((_2789 > 0.0) ? exp2(_2804 * _2789) : (2.0 - exp2(_2806 * _2789))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2799;
        }
        else
        {
            float _2927 = 1.0 / cbSceneParam._m0[80u].x;
            float _2928 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : max(_2789, _2790));
            float _2929 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : min(_2789, _2790));
            float _2938 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : min(_2928, 0.0));
            float _2939 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : min(_2929, 0.0));
            _2983 = ((abs(_2796 / _2785) * cbSceneParam._m0[80u].y) * ((((_2938 - _2939) * 2.0) - ((exp2(_2804 * (isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0)))) - exp2(_2804 * (isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0))))) * _2927)) - ((exp2(_2806 * _2938) - exp2(_2806 * _2939)) * _2927))) + (_2799 * cbSceneParam._m0[80u].z);
        }
        vec4 _2985 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2696, _2697, 1.0), 0.0);
        float _2994 = exp2((_2983 * (-1.44269502162933349609375)) * (1.0 - _2985.w));
        float _2995 = log2(_2994);
        float _3011 = log2(_2716);
        _2808 = (exp2(_3011 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].x)) * _2985.x) / cbSceneParam._m0[78u].x)) + _2713;
        _2810 = (exp2(_3011 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].y)) * _2985.y) / cbSceneParam._m0[78u].y)) + _2714;
        _2812 = (exp2(_3011 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].z)) * _2985.z) / cbSceneParam._m0[78u].z)) + _2715;
        _2814 = _2994 * _2716;
    }
    else
    {
        _2808 = _2713;
        _2810 = _2714;
        _2812 = _2715;
        _2814 = _2716;
    }
    bool _3021;
    vec4 _2824;
    vec4 _2846;
    float _2848;
    float _2852;
    float _2853;
    float _2854;
    float _2855;
    bool _2865;
    for (;;)
    {
        _2824 = cbMatDynParam._m0[0u];
        float _2826 = roundEven(_2824.y);
        bool _2827 = _2826 == 3.0;
        float _2828 = log2(_2814);
        float _2835 = exp2(_2828 * cbSceneParam._m0[78u].x) * _2684;
        float _2836 = exp2(_2828 * cbSceneParam._m0[78u].y) * _2685;
        float _2837 = exp2(_2828 * cbSceneParam._m0[78u].z) * _2686;
        float _2844 = _798 + (-0.5);
        _2846 = cbMtdParam._m0[1u];
        _2848 = _2846.y * _2844;
        float _2851 = (_2826 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2852 = _2851 * (_2827 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2808)));
        _2853 = _2851 * (_2827 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2810)));
        _2854 = _2851 * (_2827 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2812)));
        _2855 = _2844 * 0.999000012874603271484375;
        _2865 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2865)
        {
            if ((cbInstanceData._m0[_848 + 7u].x + _2855) < 0.5)
            {
                _3021 = true;
                break;
            }
        }
        uint _2962 = _849 + uint(_2824.w);
        if ((cbInstanceData._m0[_2962].w < 1.0) && ((cbInstanceData._m0[_2962].w + _2855) < 0.5))
        {
            _3021 = true;
            break;
        }
        if ((_2848 + _468) < _2846.x)
        {
            _3021 = true;
            break;
        }
        _3021 = false;
        break;
    }
    float _3226;
    if (_3021)
    {
        discard_state = true;
        _3226 = 0.0;
    }
    else
    {
        _3226 = _2691;
    }
    SV_Target.x = _2852;
    SV_Target.y = _2853;
    SV_Target.z = _2854;
    SV_Target.w = _3226;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2691;
    discard_exit();
}


