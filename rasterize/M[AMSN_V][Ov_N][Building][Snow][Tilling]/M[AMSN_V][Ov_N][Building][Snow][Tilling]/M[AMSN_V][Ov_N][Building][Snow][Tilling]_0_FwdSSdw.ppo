#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 7) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1248;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _226 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _227 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _228 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _232 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _233 = _232 * _226;
    float _234 = _232 * _227;
    float _235 = _232 * _228;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    float _253 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _254 = _253 * TANGENT_2.x;
    float _255 = _253 * TANGENT_2.y;
    float _256 = _253 * TANGENT_2.z;
    float _261;
    float _262;
    float _263;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _261 = (-0.0) - _240;
        _262 = (-0.0) - _241;
        _263 = (-0.0) - _242;
    }
    else
    {
        _261 = _240;
        _262 = _241;
        _263 = _242;
    }
    float _280 = (((1.0 - TEXCOORD_5.y) * (-2.7999999523162841796875)) * cbMtdParam._m0[15u].z) + 1.0;
    float _3606 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    vec4 _296 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _299 = _296.x;
    float _309 = ((cbMtdParam._m0[15u].w * (-1.39999997615814208984375)) * ((_299 + (-1.0)) + ((1.0 - TEXCOORD_5.x) * 2.0))) + 1.0;
    float _3617 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    vec4 _325 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _329 = _325.z;
    float _332 = (_325.x * 2.0) + (-1.0);
    float _333 = (_325.y * 2.0) + (-1.0);
    float _334 = dot(vec2(_332, _333), vec2(_332, _333));
    float _3628 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _339 = sqrt(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))));
    float _342 = fma(_339, _261, fma(_333, _254, _332 * _233));
    float _345 = fma(_339, _262, fma(_333, _255, _332 * _234));
    float _348 = fma(_339, _263, fma(_333, _256, _332 * _235));
    float _352 = inversesqrt(dot(vec3(_342, _345, _348), vec3(_342, _345, _348)));
    float _353 = _352 * _342;
    float _354 = _352 * _345;
    float _355 = _352 * _348;
    float _359 = exp2(log2(_354) * cbMtdParam._m0[15u].y) * cbMtdParam._m0[15u].x;
    float _3639 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _362 = ((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) + (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * (1.0 - (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))));
    float _367 = cbMtdParam._m0[13u].y * _299;
    float _378 = ((cbMtdParam._m0[14u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5.w - _367) + (cbMtdParam._m0[13u].w * TEXCOORD_5.w))) + 1.0;
    float _3650 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _380 = 1.0 - (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)));
    float _381 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _382 = isnan(1.0) ? _381 : (isnan(_381) ? 1.0 : min(_381, 1.0));
    float _390 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.z - _367) + (cbMtdParam._m0[13u].z * TEXCOORD_5.z))) + 1.0;
    float _3671 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _392 = 1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)));
    float _393 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _394 = isnan(1.0) ? _393 : (isnan(_393) ? 1.0 : min(_393, 1.0));
    vec4 _412 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    float _417 = cbMtdParam._m0[11u].x * _394;
    float _419 = cbMtdParam._m0[11u].y * _394;
    float _421 = cbMtdParam._m0[11u].z * _394;
    float _441 = _392 + _380;
    float _442 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _443 = isnan(1.0) ? _442 : (isnan(_442) ? 1.0 : min(_442, 1.0));
    vec4 _461 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _466 = _461.w;
    float _467 = _461.x * cbMtdParam._m0[10u].x;
    float _468 = _461.y * cbMtdParam._m0[10u].y;
    float _469 = _461.z * cbMtdParam._m0[10u].z;
    float _486 = (_467 - (_443 * _467)) + ((((((_414 * (cbMtdParam._m0[9u].x - _417)) * _382) + (_417 * _414)) * 4.55000019073486328125) * _443) * _467);
    float _487 = (_468 - (_443 * _468)) + ((((((_415 * (cbMtdParam._m0[9u].y - _419)) * _382) + (_419 * _415)) * 4.55000019073486328125) * _443) * _468);
    float _488 = (_469 - (_443 * _469)) + ((((((_416 * (cbMtdParam._m0[9u].z - _421)) * _382) + (_421 * _416)) * 4.55000019073486328125) * _443) * _469);
    float _3702 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _489 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _491 = 3.0 - (_489 * 2.0);
    float _493 = _489 * _489;
    float _503 = ((_493 * (cbMtdParam._m0[12u].x - _486)) * _491) + _486;
    float _504 = ((_493 * (cbMtdParam._m0[12u].y - _487)) * _491) + _487;
    float _505 = ((_493 * (cbMtdParam._m0[12u].z - _488)) * _491) + _488;
    vec4 _522 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _529 = (_522.x * 2.0) + (-1.0);
    float _530 = (_522.y * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _3713 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _539 = ((_522.z - _329) * _362) + _329;
    vec4 _551 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _557 = (_551.x * 2.0) + (-1.0);
    float _558 = (_551.y * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _3724 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))));
    float _567 = fma(_564, _261, fma(_558, _254, _557 * _233));
    float _570 = fma(_564, _262, fma(_558, _255, _557 * _234));
    float _573 = fma(_564, _263, fma(_558, _256, _557 * _235));
    float _577 = inversesqrt(dot(vec3(_567, _570, _573), vec3(_567, _570, _573)));
    float _578 = _577 * _567;
    float _579 = _577 * _570;
    float _580 = _577 * _573;
    float _583 = fma(_580, _216, fma(_579, _215, _578 * _214));
    float _586 = fma(_580, _249, fma(_579, _248, _578 * _247));
    float _589 = fma(_580, _263, fma(_579, _262, _578 * _261));
    float _593 = inversesqrt(dot(vec3(_583, _586, _589), vec3(_583, _586, _589)));
    float _597 = fma(_355, _216, fma(_354, _215, _353 * _214));
    float _600 = fma(_355, _249, fma(_354, _248, _353 * _247));
    float _603 = fma(_355, _263, fma(_354, _262, _353 * _261));
    float _607 = inversesqrt(dot(vec3(_597, _600, _603), vec3(_597, _600, _603)));
    float _610 = _607 * _603;
    vec4 _623 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _629 = (_623.x * 2.0) + (-1.0);
    float _630 = (_623.y * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3735 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _636 = sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))));
    float _639 = fma(_636, _261, fma(_630, _254, _629 * _233));
    float _642 = fma(_636, _262, fma(_630, _255, _629 * _234));
    float _645 = fma(_636, _263, fma(_630, _256, _629 * _235));
    float _649 = inversesqrt(dot(vec3(_639, _642, _645), vec3(_639, _642, _645)));
    float _650 = _649 * _639;
    float _651 = _649 * _642;
    float _652 = _649 * _645;
    float _655 = fma(_652, _216, fma(_651, _215, _650 * _214));
    float _658 = fma(_652, _249, fma(_651, _248, _650 * _247));
    float _661 = fma(_652, _263, fma(_651, _262, _650 * _261));
    float _665 = inversesqrt(dot(vec3(_655, _658, _661), vec3(_655, _658, _661)));
    float _680 = ((_607 * _597) + (((_583 * _382) * _593) * cbMtdParam._m0[14u].w)) + (((_655 * _394) * _665) * cbMtdParam._m0[14u].z);
    float _682 = ((_607 * _600) + (((_586 * _382) * _593) * cbMtdParam._m0[14u].w)) + (((_658 * _394) * _665) * cbMtdParam._m0[14u].z);
    float _689 = ((_529 - _680) * _362) + _680;
    float _690 = (_362 * (_530 - _682)) + _682;
    float _691 = (_362 * (sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) - _610)) + _610;
    float _694 = fma(_691, _261, fma(_690, _247, _689 * _214));
    float _697 = fma(_691, _262, fma(_690, _248, _689 * _215));
    float _700 = fma(_691, _263, fma(_690, _249, _689 * _216));
    float _704 = inversesqrt(dot(vec3(_694, _697, _700), vec3(_694, _697, _700)));
    float _705 = _704 * _694;
    float _706 = _704 * _697;
    float _707 = _704 * _700;
    float _3746 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _708 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _709 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3779 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3790 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3801 = isnan(0.0) ? cbMtdParam._m0[16u].x : (isnan(cbMtdParam._m0[16u].x) ? 0.0 : max(cbMtdParam._m0[16u].x, 0.0));
    float _713 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _780 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _770);
    float _781 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _770);
    float _782 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _770);
    float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
    float _787 = _780 * _786;
    float _788 = _781 * _786;
    float _789 = _782 * _786;
    float _795 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _796 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _815 = fma(_707, cbSceneParam._m0[5u].z, fma(_706, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _705));
    float _818 = fma(_707, cbSceneParam._m0[6u].z, fma(_706, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _705));
    float _821 = fma(_707, cbSceneParam._m0[7u].z, fma(_706, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _705));
    uint _834 = uint(roundEven(NORMAL.w)) * 13u;
    uint _836 = (_834 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _842 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_836].x;
    float _843 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_836].y;
    float _844 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_836].z;
    float _3812 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _848 = 1.0 - _713;
    float _849 = _845 * _848;
    float _850 = _846 * _848;
    float _851 = _847 * _848;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _713;
    float _857 = (_846 + (-0.039999999105930328369140625)) * _713;
    float _858 = (_847 + (-0.039999999105930328369140625)) * _713;
    float _859 = _856 + 0.039999999105930328369140625;
    float _861 = _857 + 0.039999999105930328369140625;
    float _862 = _858 + 0.039999999105930328369140625;
    vec4 _871 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _795, cbSceneParam._m0[86u].y * _796));
    float _874 = _871.x * TEXCOORD_4;
    float _875 = dot(vec3(_705, _706, _707), vec3(_787, _788, _789));
    float _878 = _875 * 2.0;
    float _882 = (_878 * _705) - _787;
    float _883 = (_878 * _706) - _788;
    float _884 = (_878 * _707) - _789;
    float _888 = abs(dot(vec3(_787, _788, _789), vec3(_705, _706, _707)));
    float _3845 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _890 = sqrt(_709);
    float _902 = exp2((_890 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_890 * 3.0));
    float _908 = (1.0 - _902) * ((_890 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _909 = _902 * _890;
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1247;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _972 = fma(_945, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937));
        float _976 = fma(_945, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937));
        float _980 = fma(_945, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937));
        float _1005 = _937 + _705;
        float _1006 = _941 + _706;
        float _1007 = _945 + _707;
        float _1017 = fma(_1007, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1005)) - _972;
        float _1018 = fma(_1007, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1005)) - _976;
        float _1019 = fma(_1007, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1005)) - _980;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_972 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_976 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[34u].z) + ((((((_980 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1075 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1041.x + (-0.5));
        float _1077 = _1075 * (_1041.y + (-0.5));
        float _1078 = _1075 * (_1041.z + (-0.5));
        float _1085 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1048.x + (-0.5));
        float _1087 = _1085 * (_1048.y + (-0.5));
        float _1088 = _1085 * (_1048.z + (-0.5));
        float _1095 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1055.x + (-0.5));
        float _1097 = _1095 * (_1055.y + (-0.5));
        float _1098 = _1095 * (_1055.z + (-0.5));
        float _1105 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1062.x + (-0.5));
        float _1107 = _1105 * (_1062.y + (-0.5));
        float _1108 = _1105 * (_1062.z + (-0.5));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = _1076 * 0.5;
        float _1113 = _1086 * 0.5;
        float _1114 = _1096 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1129 = (dot(vec3(_705, _706, _707), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1139 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3893 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1141 + 1.0))) + _1146) * _1109;
        float _1156 = _1077 * 0.5;
        float _1157 = _1087 * 0.5;
        float _1158 = _1097 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_705, _706, _707), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3926 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1183 + 1.0))) + _1188) * _1110;
        float _1198 = _1078 * 0.5;
        float _1199 = _1088 * 0.5;
        float _1200 = _1098 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_705, _706, _707), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3959 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1225 + 1.0))) + _1230) * _1111;
        _1247 = _1078;
        _1249 = _1077;
        _1250 = _1076;
        _1251 = _1088;
        _1252 = _1087;
        _1253 = _1086;
        _1254 = _1098;
        _1255 = _1097;
        _1256 = _1096;
        _1257 = _1111;
        _1258 = _1110;
        _1259 = _1109;
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
    }
    else
    {
        _1247 = _1248;
        _1249 = _1248;
        _1250 = _1248;
        _1251 = _1248;
        _1252 = _1248;
        _1253 = _1248;
        _1254 = _1248;
        _1255 = _1248;
        _1256 = _1248;
        _1257 = _1248;
        _1258 = _1248;
        _1259 = _1248;
        _1260 = 0.0;
        _1261 = 0.0;
        _1262 = 0.0;
    }
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1288 = fma(_945, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _937));
        float _1292 = fma(_945, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _937));
        float _1296 = fma(_945, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _937));
        float _1319 = _937 + _705;
        float _1320 = _941 + _706;
        float _1321 = _945 + _707;
        float _1331 = fma(_1321, cbModelParam._m0[30u].z, fma(_1320, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1319)) - _1288;
        float _1332 = fma(_1321, cbModelParam._m0[31u].z, fma(_1320, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1319)) - _1292;
        float _1333 = fma(_1321, cbModelParam._m0[32u].z, fma(_1320, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1319)) - _1296;
        float _1337 = inversesqrt(dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333)));
        float _1350 = ((_1337 * _1331) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1288 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1337 * _1332) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1292 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1337 * _1333) / cbModelParam._m0[35u].z) + ((((((_1296 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        float _1387 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1354.x + (-0.5));
        float _1389 = _1387 * (_1354.y + (-0.5));
        float _1390 = _1387 * (_1354.z + (-0.5));
        float _1397 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1361.x + (-0.5));
        float _1399 = _1397 * (_1361.y + (-0.5));
        float _1400 = _1397 * (_1361.z + (-0.5));
        float _1407 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1368.x + (-0.5));
        float _1409 = _1407 * (_1368.y + (-0.5));
        float _1410 = _1407 * (_1368.z + (-0.5));
        float _1417 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1375.x + (-0.5));
        float _1419 = _1417 * (_1375.y + (-0.5));
        float _1420 = _1417 * (_1375.z + (-0.5));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = _1388 * 0.5;
        float _1425 = _1398 * 0.5;
        float _1426 = _1408 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_705, _706, _707), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _4022 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1451 + 1.0))) + _1456) * _1421;
        float _1466 = _1389 * 0.5;
        float _1467 = _1399 * 0.5;
        float _1468 = _1409 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_705, _706, _707), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4055 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1493 + 1.0))) + _1498) * _1422;
        float _1508 = _1390 * 0.5;
        float _1509 = _1400 * 0.5;
        float _1510 = _1410 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_705, _706, _707), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4088 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1535 + 1.0))) + _1540) * _1423;
        _1557 = _1390;
        _1558 = _1389;
        _1559 = _1388;
        _1560 = _1400;
        _1561 = _1399;
        _1562 = _1398;
        _1563 = _1410;
        _1564 = _1409;
        _1565 = _1408;
        _1566 = _1423;
        _1567 = _1422;
        _1568 = _1421;
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
    }
    else
    {
        _1557 = _1248;
        _1558 = _1248;
        _1559 = _1248;
        _1560 = _1248;
        _1561 = _1248;
        _1562 = _1248;
        _1563 = _1248;
        _1564 = _1248;
        _1565 = _1248;
        _1566 = _1248;
        _1567 = _1248;
        _1568 = _1248;
        _1569 = 0.0;
        _1570 = 0.0;
        _1571 = 0.0;
    }
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1260)) + _1260;
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1261)) + _1261;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1262)) + _1262;
    float _1604 = fma(_1583, cbSceneParam._m0[89u].z, fma(_1582, cbSceneParam._m0[89u].y, _1581 * cbSceneParam._m0[89u].x));
    float _1607 = fma(_1583, cbSceneParam._m0[90u].z, fma(_1582, cbSceneParam._m0[90u].y, _1581 * cbSceneParam._m0[90u].x));
    float _1610 = fma(_1583, cbSceneParam._m0[91u].z, fma(_1582, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1581));
    float _1625 = _882 * 0.5;
    float _1626 = _883 * 0.5;
    float _1627 = _884 * 0.5;
    float _1628 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1631 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1634 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1668;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1641 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1247, _1251, _1254, _1257));
        float _1645 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1649 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1656 = dot(vec4(cbModelParam._m0[39u]), vec4(_1625, _1626, _1627, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1679;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1670 = dot(vec4(cbModelParam._m0[40u]), vec4(_1625, _1626, _1627, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1683 = (_1679 * cbModelParam._m0[1u].x) + (_1668 * (1.0 - cbModelParam._m0[1u].x));
    float _1693 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _709);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1693 : min(cbModelParam._m0[25u].z, _1693));
    float _1774;
    float _1776;
    float _1778;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1741 = fma(_945, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937)) + cbModelParam._m0[13u].w;
        float _1745 = fma(_945, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937)) + cbModelParam._m0[14u].w;
        float _1749 = fma(_945, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937)) + cbModelParam._m0[15u].w;
        float _1752 = fma(_884, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _882));
        float _1755 = fma(_884, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _882));
        float _1758 = fma(_884, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _882));
        float _1786;
        if (_1752 > 0.0)
        {
            _1786 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1786 = frontier_phi_16_14_ladder;
        }
        float _2013;
        if (_1755 > 0.0)
        {
            _2013 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2013 = frontier_phi_25_21_ladder;
        }
        float _2270;
        if (_1758 > 0.0)
        {
            _2270 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2270 = frontier_phi_37_32_ladder;
        }
        float _2272 = isnan(_2013) ? _1786 : (isnan(_1786) ? _2013 : min(_1786, _2013));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1752) + _1741;
        float _2278 = (_2273 * _1755) + _1745;
        float _2279 = (_2273 * _1758) + _1749;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2280;
        float _2284 = _2280 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 > _2284) || ((_2278 < _2282) || ((_2277 < _2282) || (_2277 > _2284))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2279, cbModelParam._m0[9u].z, fma(_2278, cbModelParam._m0[9u].y, _2277 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2279, cbModelParam._m0[10u].z, fma(_2278, cbModelParam._m0[10u].y, _2277 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2279, cbModelParam._m0[11u].z, fma(_2278, cbModelParam._m0[11u].y, _2277 * cbModelParam._m0[11u].x))), _1694);
            frontier_phi_15_37_ladder = _2407.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2407.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2407.x * cbModelParam._m0[1u].y;
        }
        _1774 = frontier_phi_15_37_ladder_2;
        _1776 = frontier_phi_15_37_ladder_1;
        _1778 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_882, _883, _884), _1694);
        _1774 = _1762.x * cbModelParam._m0[1u].y;
        _1776 = _1762.y * cbModelParam._m0[1u].y;
        _1778 = _1762.z * cbModelParam._m0[1u].y;
    }
    float _1782 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _709);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1782 : min(cbModelParam._m0[25u].w, _1782));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1840 = fma(_945, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937)) + cbModelParam._m0[21u].w;
        float _1844 = fma(_945, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937)) + cbModelParam._m0[22u].w;
        float _1848 = fma(_945, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937)) + cbModelParam._m0[23u].w;
        float _1851 = fma(_884, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _882));
        float _1854 = fma(_884, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _882));
        float _1857 = fma(_884, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _882));
        float _2018;
        if (_1851 > 0.0)
        {
            _2018 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2018 = frontier_phi_27_23_ladder;
        }
        float _2297;
        if (_1854 > 0.0)
        {
            _2297 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2297 = frontier_phi_39_34_ladder;
        }
        float _2510;
        if (_1857 > 0.0)
        {
            _2510 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2510 = frontier_phi_48_45_ladder;
        }
        float _2512 = isnan(_2297) ? _2018 : (isnan(_2018) ? _2297 : min(_2018, _2297));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _1851) + _1840;
        float _2518 = (_2513 * _1854) + _1844;
        float _2519 = (_2513 * _1857) + _1848;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2520;
        float _2523 = _2520 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2519 > _2523) || ((_2519 < _2521) || ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 < _2521) || (_2517 > _2523))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2519, cbModelParam._m0[17u].z, fma(_2518, cbModelParam._m0[17u].y, _2517 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2519, cbModelParam._m0[18u].z, fma(_2518, cbModelParam._m0[18u].y, _2517 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2519, cbModelParam._m0[19u].z, fma(_2518, cbModelParam._m0[19u].y, _2517 * cbModelParam._m0[19u].x))), _1783);
            frontier_phi_24_48_ladder = _2719.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2719.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2719.x * cbModelParam._m0[1u].z;
        }
        _1876 = frontier_phi_24_48_ladder_2;
        _1878 = frontier_phi_24_48_ladder_1;
        _1880 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_882, _883, _884), _1783);
        _1876 = _1860.x * cbModelParam._m0[1u].z;
        _1878 = _1860.y * cbModelParam._m0[1u].z;
        _1880 = _1860.z * cbModelParam._m0[1u].z;
    }
    float _1893 = (((_908 * _859) + _909) * _874) * ((cbModelParam._m0[1u].w * (_1876 - _1774)) + _1774);
    float _1895 = (((_908 * _861) + _909) * _874) * ((cbModelParam._m0[1u].w * (_1878 - _1776)) + _1776);
    float _1897 = (((_908 * _862) + _909) * _874) * ((cbModelParam._m0[1u].w * (_1880 - _1778)) + _1778);
    float _1900 = fma(_1897, cbSceneParam._m0[89u].z, fma(_1895, cbSceneParam._m0[89u].y, _1893 * cbSceneParam._m0[89u].x));
    float _1903 = fma(_1897, cbSceneParam._m0[90u].z, fma(_1895, cbSceneParam._m0[90u].y, _1893 * cbSceneParam._m0[90u].x));
    float _1906 = fma(_1897, cbSceneParam._m0[91u].z, fma(_1895, cbSceneParam._m0[91u].y, _1893 * cbSceneParam._m0[91u].x));
    vec4 _1914 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_795, _796));
    float _1916 = _1914.w;
    float _1928 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1916);
    float _1929 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1916);
    float _1930 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1916);
    uvec4 _1934 = floatBitsToUint(cbInstanceData._m0[_834 + 5u]);
    uint _1936 = _1934.x * 14u;
    uint _1937 = _1936 + 13u;
    float _1944 = _874 + (-1.0);
    float _1949 = (cbLight._m0[_1937].x * _1944) + 1.0;
    float _1950 = (cbLight._m0[_1937].y * _1944) + 1.0;
    float _1951 = (cbLight._m0[_1937].z * _1944) + 1.0;
    float _1952 = (cbLight._m0[_1937].w * _1944) + 1.0;
    uint _1953 = _1936 + 5u;
    float _1959 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
    uint _1963 = _1936 + 4u;
    float _1972 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1976 = _1936 | 1u;
    float _1987 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_705, _706, _707));
    float _1990 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_705, _706, _707));
    float _4224 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _4235 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1995 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _1997 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _2004 = ((cbLight._m0[_1953].x * _1959) * _1997) + (((cbLight._m0[_1963].x * _1928) * _1972) * _1995);
    float _2005 = ((_1959 * cbLight._m0[_1953].y) * _1997) + (((cbLight._m0[_1963].y * _1929) * _1972) * _1995);
    float _2006 = ((_1959 * cbLight._m0[_1953].z) * _1997) + (((cbLight._m0[_1963].z * _1930) * _1972) * _1995);
    uvec4 _2010 = floatBitsToUint(cbLight._m0[_1936 + 12u]);
    bool _2012 = _2010.x == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_2012)
    {
        _2023 = _2004;
        _2025 = _2005;
        _2027 = _2006;
    }
    else
    {
        uint _2031 = _1936 + 6u;
        float _2047 = (dot(vec3(cbLight._m0[_1936 + 2u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _4246 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2050 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2023 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _2004;
        _2025 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _2005;
        _2027 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _2006;
    }
    bool _2030 = _2010.y == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_2030)
    {
        _2068 = _2023;
        _2070 = _2025;
        _2072 = _2027;
    }
    else
    {
        uint _2241 = _1936 + 7u;
        float _2257 = (dot(vec3(cbLight._m0[_1936 + 3u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4262 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2260 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2068 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2023;
        _2070 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2025;
        _2072 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2027;
    }
    uint _2075 = _1936 + 8u;
    float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _709) * 0.949999988079071044921875);
    float _2089 = _2088 * _2088;
    float _2090 = cbLight._m0[_1936].x + _787;
    float _2091 = cbLight._m0[_1936].y + _788;
    float _2092 = cbLight._m0[_1936].z + _789;
    float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
    float _2097 = _2096 * _2090;
    float _2098 = _2096 * _2091;
    float _2099 = _2096 * _2092;
    float _2100 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_1936].xyz));
    float _4278 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _4289 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2104 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2105 = dot(vec3(_705, _706, _707), vec3(_2097, _2098, _2099));
    float _4300 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2109 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_2097, _2098, _2099));
    float _4311 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2113 = _2089 * _2089;
    float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
    float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
    float _2126 = 0.959999978542327880859375 - _856;
    float _2128 = 0.959999978542327880859375 - _857;
    float _2129 = 0.959999978542327880859375 - _858;
    float _2136 = 1.0 - _2089;
    float _2147 = (0.5 / (((_2104 * ((_2103 * _2136) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2136) + _2089) * _2103))) * _2103;
    float _4322 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
    uint _2163 = _1936 + 9u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _709) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1976].x + _787;
    float _2177 = cbLight._m0[_1976].y + _788;
    float _2178 = cbLight._m0[_1976].z + _789;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_1976].xyz));
    float _4333 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2190 = dot(vec3(_705, _706, _707), vec3(_2183, _2184, _2185));
    float _4344 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2183, _2184, _2185));
    float _4355 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2175 * _2175;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0);
    float _2216 = 1.0 - _2175;
    float _2226 = (0.5 / (((_2104 * ((_2189 * _2216) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2216) + _2175) * _2189))) * _2189;
    float _4366 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    float _2238 = (((((_2209 * _2126) + _859) * cbLight._m0[_2163].x) * _2228) * _1959) + ((((cbLight._m0[_2075].x * _1928) * ((_2125 * _2126) + _859)) * _2149) * _1972);
    float _2239 = (((((_2209 * _2128) + _861) * cbLight._m0[_2163].y) * _2228) * _1959) + ((((cbLight._m0[_2075].y * _1929) * ((_2125 * _2128) + _861)) * _2149) * _1972);
    float _2240 = (((((_2209 * _2129) + _862) * cbLight._m0[_2163].z) * _2228) * _1959) + ((((cbLight._m0[_2075].z * _1930) * ((_2125 * _2129) + _862)) * _2149) * _1972);
    float _2302;
    float _2304;
    float _2306;
    if (_2012)
    {
        _2302 = _2238;
        _2304 = _2239;
        _2306 = _2240;
    }
    else
    {
        uint _2308 = _1936 + 2u;
        uint _2312 = _1936 + 10u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _709) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _787;
        float _2329 = cbLight._m0[_2308].y + _788;
        float _2330 = cbLight._m0[_2308].z + _789;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2308].xyz));
        float _4377 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2342 = dot(vec3(_705, _706, _707), vec3(_2335, _2336, _2337));
        float _4388 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4399 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0);
        float _2368 = 1.0 - _2327;
        float _2378 = (0.5 / (((_2104 * ((_2341 * _2368) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2368) + _2327) * _2341))) * _2341;
        float _4410 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2302 = (((((_2361 * _2126) + _859) * cbLight._m0[_2312].x) * _2380) * _2381) + _2238;
        _2304 = (((((_2361 * _2128) + _861) * cbLight._m0[_2312].y) * _2380) * _2381) + _2239;
        _2306 = (((((_2361 * _2129) + _862) * cbLight._m0[_2312].z) * _2380) * _2381) + _2240;
    }
    float _2416;
    float _2418;
    float _2420;
    if (_2030)
    {
        _2416 = _2302;
        _2418 = _2304;
        _2420 = _2306;
    }
    else
    {
        uint _2427 = _1936 + 3u;
        uint _2431 = _1936 + 11u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _709) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _787;
        float _2448 = cbLight._m0[_2427].y + _788;
        float _2449 = cbLight._m0[_2427].z + _789;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2427].xyz));
        float _4426 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2461 = dot(vec3(_705, _706, _707), vec3(_2454, _2455, _2456));
        float _4437 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4448 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
        float _2487 = 1.0 - _2446;
        float _2497 = (0.5 / (((_2104 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2487) + _2446) * _2460))) * _2460;
        float _4459 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2499 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2500 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2416 = (((((_2480 * _2126) + _859) * cbLight._m0[_2431].x) * _2499) * _2500) + _2302;
        _2418 = (((((_2480 * _2128) + _861) * cbLight._m0[_2431].y) * _2499) * _2500) + _2304;
        _2420 = (((((_2480 * _2129) + _862) * cbLight._m0[_2431].z) * _2499) * _2500) + _2306;
    }
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    if (_1934.y == 0u)
    {
        float _2575 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2576 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2575;
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2575;
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2575;
        uvec4 _2590 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2591 = _2590.x;
        uint _2602 = uint((float(_2590.y) * floor(float(uint(cbSceneParam._m0[85u].y * _796) / _2591))) + floor(float(uint(cbSceneParam._m0[85u].x * _795) / _2591)));
        float _2612 = (log2(_2578 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2613 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        uint _2616 = uint(isnan(14.0) ? _2613 : (isnan(_2613) ? 14.0 : min(_2613, 14.0)));
        uvec4 _2621 = texelFetch(g_lightClusterGridBuffer, int(((_2616 << 2u) + (_2602 << 6u)) >> 2u));
        uint _2622 = _2621.x;
        uint _2623 = _2590.z;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        if (((((1u << ((_2623 >> 4u) & 15u)) + 4294967295u) & _2622) == 0u) || ((_2623 & 240u) == 0u))
        {
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
        }
        else
        {
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            uint _2874 = 0u;
            uint _2883;
            bool _2884;
            for (;;)
            {
                _2883 = texelFetch(g_lightClassification, int((((_2616 << 5u) + (_2602 << 9u)) + (_2874 << 2u)) >> 2u)).x;
                _2884 = _2883 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2884)
                {
                    frontier_phi_63_pred = _2873;
                    frontier_phi_63_pred_1 = _2872;
                    frontier_phi_63_pred_2 = _2871;
                    frontier_phi_63_pred_3 = _2870;
                    frontier_phi_63_pred_4 = _2869;
                    frontier_phi_63_pred_5 = _2868;
                }
                else
                {
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    uint _2998;
                    _2992 = _2868;
                    _2993 = _2869;
                    _2994 = _2870;
                    _2995 = _2871;
                    _2996 = _2872;
                    _2997 = _2873;
                    _2998 = _2883;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    for (;;)
                    {
                        uint _3002 = uint(findLSB(_2998)) + (_2874 << 5u);
                        uint _2999 = (_2998 + 4294967295u) & _2998;
                        uint _3004 = _3002 * 48u;
                        vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3024 = (_3002 * 48u) + 4u;
                        vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 3u)).x));
                        uint _3043 = (_3002 * 48u) + 8u;
                        vec3 _3054 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x));
                        float _3058 = _3018.x - _2576;
                        float _3059 = _3018.y - _2577;
                        float _3060 = _3018.z - _2578;
                        float _3061 = dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060));
                        float _3064 = inversesqrt(_3061);
                        float _3065 = _3064 * _3058;
                        float _3066 = _3064 * _3059;
                        float _3067 = _3064 * _3060;
                        float _3068 = dot(vec3(_815, _818, _821), vec3(_3065, _3066, _3067));
                        float _3073 = 1.0 - (_3061 * _3018.w);
                        float _4485 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3074 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3075 = sqrt(_3061) * _3037.w;
                        float _3078 = 1.39999997615814208984375 / (_3075 + 1.39999997615814208984375);
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3068) + _3079;
                        float _3085 = _3075 * _3075;
                        float _3089 = ((isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))) * _3074) / ((_3085 * 0.699999988079071044921875) + 1.0);
                        float _3093 = (-0.0) - _2576;
                        float _3094 = (-0.0) - _2577;
                        float _3095 = (-0.0) - _2578;
                        float _3099 = inversesqrt(dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095)));
                        float _3100 = _3099 * _3093;
                        float _3101 = _3099 * _3094;
                        float _3102 = _3099 * _3095;
                        float _3110 = exp2(log2(1.0 / ((_3085 * 3.5) + 5.0)) * 0.25);
                        float _3111 = 1.0 - _890;
                        float _3118 = sqrt(1.0 - ((1.0 - (_3111 * _3111)) * (1.0 - (_3110 * _3110))));
                        float _3119 = _3118 * _3118;
                        float _3120 = _3119 * _3119;
                        float _3121 = _3100 + _3065;
                        float _3122 = _3101 + _3066;
                        float _3123 = _3102 + _3067;
                        float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                        float _3131 = dot(vec3(_815, _818, _821), vec3(_3100, _3101, _3102));
                        float _4501 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3134 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3135 = dot(vec3(_815, _818, _821), vec3(_3127 * _3121, _3127 * _3122, _3127 * _3123));
                        float _4512 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3138 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3142 = ((_3138 * _3138) * (_3120 + (-1.0))) + 1.0;
                        float _3143 = _3078 * _3119;
                        float _3144 = _3143 * _3143;
                        float _3147 = ((1.0 - _3144) * _3068) + _3144;
                        float _4523 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3149 = 1.0 - _3119;
                        float _3159 = (0.5 / (((_3148 * ((_3134 * _3149) + _3119)) + 9.9999999392252902907785028219223e-09) + (((_3148 * _3149) + _3119) * _3134))) * _3148;
                        float _4534 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3170 = (((_3120 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3142 * _3142) * ((_3085 * 2.1991131305694580078125) + 3.141590118408203125))) * _3074;
                        _2927 = (_3089 * _3037.x) + _2995;
                        _2928 = (_3089 * _3037.y) + _2996;
                        _2929 = (_3089 * _3037.z) + _2997;
                        _2924 = (_3170 * _3054.x) + _2992;
                        _2925 = (_3170 * _3054.y) + _2993;
                        _2926 = (_3170 * _3054.z) + _2994;
                        if (_2999 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2999;
                        }
                    }
                    frontier_phi_63_pred = _2929;
                    frontier_phi_63_pred_1 = _2928;
                    frontier_phi_63_pred_2 = _2927;
                    frontier_phi_63_pred_3 = _2926;
                    frontier_phi_63_pred_4 = _2925;
                    frontier_phi_63_pred_5 = _2924;
                }
                _2735 = frontier_phi_63_pred;
                _2733 = frontier_phi_63_pred_1;
                _2731 = frontier_phi_63_pred_2;
                _2729 = frontier_phi_63_pred_3;
                _2727 = frontier_phi_63_pred_4;
                _2725 = frontier_phi_63_pred_5;
                uint _2875 = _2874 + 1u;
                if (_2875 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2868 = _2725;
                    _2869 = _2727;
                    _2870 = _2729;
                    _2871 = _2731;
                    _2872 = _2733;
                    _2873 = _2735;
                    _2874 = _2875;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
        }
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.z;
        uint _2741 = (_2739 >> 8u) & 15u;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        if (((4294967295u << _2741) & _2622) == 0u)
        {
            _2836 = _2724;
            _2838 = _2726;
            _2840 = _2728;
            _2842 = _2730;
            _2844 = _2732;
            _2846 = _2734;
        }
        else
        {
            float _2861 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
            float _2862 = _2861 * _2576;
            float _2863 = _2861 * _2577;
            float _2864 = _2861 * _2578;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2741 < ((_2739 >> 12u) & 15u))
            {
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2845;
                float _2847;
                float _2975 = _2724;
                float _2976 = _2726;
                float _2977 = _2728;
                float _2978 = _2730;
                float _2979 = _2732;
                float _2980 = _2734;
                uint _2981 = _2741;
                uint _2990;
                bool _2991;
                for (;;)
                {
                    _2990 = texelFetch(g_lightClassification, int((((_2616 << 5u) + (_2602 << 9u)) + (_2981 << 2u)) >> 2u)).x;
                    _2991 = _2990 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2991)
                    {
                        frontier_phi_69_pred = _2980;
                        frontier_phi_69_pred_1 = _2979;
                        frontier_phi_69_pred_2 = _2978;
                        frontier_phi_69_pred_3 = _2977;
                        frontier_phi_69_pred_4 = _2976;
                        frontier_phi_69_pred_5 = _2975;
                    }
                    else
                    {
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3188 = _2975;
                        float _3189 = _2976;
                        float _3190 = _2977;
                        float _3191 = _2978;
                        float _3192 = _2979;
                        float _3193 = _2980;
                        uint _3194 = _2990;
                        uint _3195;
                        vec4 _3220;
                        float _3221;
                        vec4 _3236;
                        vec3 _3248;
                        vec4 _3263;
                        vec4 _3279;
                        float _3326;
                        bool _3327;
                        for (;;)
                        {
                            uint _3205 = ((_2981 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3194));
                            _3195 = (_3194 + 4294967295u) & _3194;
                            uint _3207 = _3205 * 40u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            _3221 = _3220.w;
                            uint _3223 = (_3205 * 40u) + 4u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3238 = (_3205 * 40u) + 8u;
                            _3248 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x));
                            uint _3250 = (_3205 * 40u) + 16u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3266 = (_3205 * 40u) + 20u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3282 = (_3205 * 40u) + 24u;
                            vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3301 = (_3205 * 40u) + 28u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3326 = fma(_2578, _3314.z, fma(_2577, _3314.y, _3314.x * _2576)) + _3314.w;
                            _3327 = !((fma(_2578, _3295.z, fma(_2577, _3295.y, _3295.x * _2576)) + _3295.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3327)
                            {
                                float _3354 = _3220.x - _2576;
                                float _3355 = _3220.y - _2577;
                                float _3356 = _3220.z - _2578;
                                float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                                float _3360 = inversesqrt(_3357);
                                float _3361 = _3360 * _3354;
                                float _3362 = _3360 * _3355;
                                float _3363 = _3360 * _3356;
                                float _3367 = 1.0 - (_3357 / (_3221 * _3221));
                                float _4545 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3372 = sqrt(_3357) * _3236.w;
                                float _3374 = 1.39999997615814208984375 / (_3372 + 1.39999997615814208984375);
                                float _3375 = _3374 * _3374;
                                float _3378 = ((1.0 - _3375) * dot(vec3(_3361, _3362, _3363), vec3(_815, _818, _821))) + _3375;
                                float _3381 = _3372 * _3372;
                                float _3385 = (fma(_2578, _3263.z, fma(_2577, _3263.y, _3263.x * _2576)) + _3263.w) / _3326;
                                float _3386 = (fma(_2578, _3279.z, fma(_2577, _3279.y, _3279.x * _2576)) + _3279.w) / _3326;
                                float _3390 = 1.0 - dot(vec2(_3385, _3386), vec2(_3385, _3386));
                                float _4561 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3392 = _3391 * (((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3368) / ((_3381 * 0.699999988079071044921875) + 1.0));
                                float _3404 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                                float _3405 = 1.0 - _890;
                                float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                                float _3413 = _3412 * _3412;
                                float _3414 = _3413 * _3413;
                                float _3415 = _3361 - _2862;
                                float _3416 = _3362 - _2863;
                                float _3417 = _3363 - _2864;
                                float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                                float _3425 = dot(vec3(_815, _818, _821), vec3((-0.0) - _2862, (-0.0) - _2863, (-0.0) - _2864));
                                float _4572 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3428 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3429 = dot(vec3(_815, _818, _821), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                                float _4583 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3432 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                                float _3437 = _3374 * _3413;
                                float _3438 = _3437 * _3437;
                                float _3444 = ((1.0 - _3438) * dot(vec3(_815, _818, _821), vec3(_3361, _3362, _3363))) + _3438;
                                float _4594 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3446 = 1.0 - _3413;
                                float _3456 = (0.5 / (((_3445 * ((_3428 * _3446) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3445 * _3446) + _3413) * _3428))) * _3445;
                                float _4605 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3466 = (_3391 * _3368) * (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) / ((_3436 * _3436) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3392 * _3236.z;
                                frontier_phi_75_pred_1 = _3392 * _3236.y;
                                frontier_phi_75_pred_2 = _3392 * _3236.x;
                                frontier_phi_75_pred_3 = _3466 * _3248.z;
                                frontier_phi_75_pred_4 = _3466 * _3248.y;
                                frontier_phi_75_pred_5 = _3466 * _3248.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3475 = frontier_phi_75_pred;
                            _3474 = frontier_phi_75_pred_1;
                            _3473 = frontier_phi_75_pred_2;
                            _3472 = frontier_phi_75_pred_3;
                            _3471 = frontier_phi_75_pred_4;
                            _3470 = frontier_phi_75_pred_5;
                            _3178 = _3473 + _3191;
                            _3179 = _3474 + _3192;
                            _3180 = _3475 + _3193;
                            _3175 = _3470 + _3188;
                            _3176 = _3471 + _3189;
                            _3177 = _3472 + _3190;
                            if (_3195 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3195;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3180;
                        frontier_phi_69_pred_1 = _3179;
                        frontier_phi_69_pred_2 = _3178;
                        frontier_phi_69_pred_3 = _3177;
                        frontier_phi_69_pred_4 = _3176;
                        frontier_phi_69_pred_5 = _3175;
                    }
                    _2847 = frontier_phi_69_pred;
                    _2845 = frontier_phi_69_pred_1;
                    _2843 = frontier_phi_69_pred_2;
                    _2841 = frontier_phi_69_pred_3;
                    _2839 = frontier_phi_69_pred_4;
                    _2837 = frontier_phi_69_pred_5;
                    uint _2982 = _2981 + 1u;
                    if (_2982 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2975 = _2837;
                        _2976 = _2839;
                        _2977 = _2841;
                        _2978 = _2843;
                        _2979 = _2845;
                        _2980 = _2847;
                        _2981 = _2982;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2847;
                frontier_phi_57_58_ladder_1 = _2845;
                frontier_phi_57_58_ladder_2 = _2843;
                frontier_phi_57_58_ladder_3 = _2841;
                frontier_phi_57_58_ladder_4 = _2839;
                frontier_phi_57_58_ladder_5 = _2837;
            }
            else
            {
                frontier_phi_57_58_ladder = _2734;
                frontier_phi_57_58_ladder_1 = _2732;
                frontier_phi_57_58_ladder_2 = _2730;
                frontier_phi_57_58_ladder_3 = _2728;
                frontier_phi_57_58_ladder_4 = _2726;
                frontier_phi_57_58_ladder_5 = _2724;
            }
            _2836 = frontier_phi_57_58_ladder_5;
            _2838 = frontier_phi_57_58_ladder_4;
            _2840 = frontier_phi_57_58_ladder_3;
            _2842 = frontier_phi_57_58_ladder_2;
            _2844 = frontier_phi_57_58_ladder_1;
            _2846 = frontier_phi_57_58_ladder;
        }
        float _2851 = isnan(1.0) ? _874 : (isnan(_874) ? 1.0 : min(_874, 1.0));
        _2634 = (_2851 * _2842) + _2068;
        _2636 = (_2851 * _2844) + _2070;
        _2638 = (_2851 * _2846) + _2072;
        _2640 = ((_2836 * _859) * _2851) + _2416;
        _2642 = ((_2838 * _861) * _2851) + _2418;
        _2644 = ((_2840 * _862) * _2851) + _2420;
    }
    else
    {
        _2634 = _2068;
        _2636 = _2070;
        _2638 = _2072;
        _2640 = _2416;
        _2642 = _2418;
        _2644 = _2420;
    }
    float _4621 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4632 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4643 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4654 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _2669 = cbInstanceData._m0[_834 + 6u].w * (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)));
    float _2674 = _795 / cbSceneParam._m0[86u].x;
    float _2675 = _796 / cbSceneParam._m0[86u].y;
    vec4 _2689 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2674, _2675, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2691 = _2689.x;
    float _2692 = _2689.y;
    float _2693 = _2689.z;
    float _2694 = _2689.w;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2749 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2750 = _2749 / _729;
        float _2761 = _2750 * _780;
        float _2762 = _781 * _2750;
        float _2763 = (-0.0) - _2762;
        float _2764 = _2750 * _782;
        float _2766 = (cbSceneParam._m0[77u].w * _2763) / _2749;
        float _2767 = _2766 + cbSceneParam._m0[79u].w;
        float _2768 = cbSceneParam._m0[79u].w - _2762;
        float _2774 = sqrt(((_2761 * _2761) + (_2762 * _2762)) + (_2764 * _2764));
        float _2777 = (1.0 - (cbSceneParam._m0[77u].w / _2749)) * _2774;
        float _2782 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2784 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2937;
        if (abs((_2763 - _2766) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2937 = ((((_2767 > 0.0) ? exp2(_2782 * _2767) : (2.0 - exp2(_2784 * _2767))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2777;
        }
        else
        {
            float _2897 = 1.0 / cbSceneParam._m0[80u].x;
            float _2898 = isnan(_2768) ? _2767 : (isnan(_2767) ? _2768 : max(_2767, _2768));
            float _2899 = isnan(_2768) ? _2767 : (isnan(_2767) ? _2768 : min(_2767, _2768));
            float _2908 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : min(_2898, 0.0));
            float _2909 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : min(_2899, 0.0));
            _2937 = ((abs(_2774 / _2763) * cbSceneParam._m0[80u].y) * ((((_2908 - _2909) * 2.0) - ((exp2(_2782 * (isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0)))) - exp2(_2782 * (isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0))))) * _2897)) - ((exp2(_2784 * _2908) - exp2(_2784 * _2909)) * _2897))) + (_2777 * cbSceneParam._m0[80u].z);
        }
        vec4 _2939 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2674, _2675, 1.0), 0.0);
        float _2948 = exp2((_2937 * (-1.44269502162933349609375)) * (1.0 - _2939.w));
        float _2949 = log2(_2948);
        float _2965 = log2(_2694);
        _2786 = (exp2(_2965 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].x)) * _2939.x) / cbSceneParam._m0[78u].x)) + _2691;
        _2788 = (exp2(_2965 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].y)) * _2939.y) / cbSceneParam._m0[78u].y)) + _2692;
        _2790 = (exp2(_2965 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].z)) * _2939.z) / cbSceneParam._m0[78u].z)) + _2693;
        _2792 = _2948 * _2694;
    }
    else
    {
        _2786 = _2691;
        _2788 = _2692;
        _2790 = _2693;
        _2792 = _2694;
    }
    float _2804 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2805 = _2804 == 3.0;
    float _2806 = log2(_2792);
    float _2813 = exp2(_2806 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2634 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _874))) + ((_2640 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1683)) * cbPerFrame._m0[3u].x));
    float _2814 = exp2(_2806 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2636 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _874))) + ((_2642 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1683)) * cbPerFrame._m0[3u].x));
    float _2815 = exp2(_2806 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2638 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _874))) + ((_2644 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1683)) * cbPerFrame._m0[3u].x));
    float _2824 = (_2804 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2824 * (_2805 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2786)));
    SV_Target.y = _2824 * (_2805 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2788)));
    SV_Target.z = _2824 * (_2805 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2790)));
    SV_Target.w = _2669;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2669;
}


