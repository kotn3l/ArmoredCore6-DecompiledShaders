#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 7) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1250;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _228 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _229 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _230 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _234 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _235 = _234 * _228;
    float _236 = _234 * _229;
    float _237 = _234 * _230;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    float _255 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _256 = _255 * TANGENT_2.x;
    float _257 = _255 * TANGENT_2.y;
    float _258 = _255 * TANGENT_2.z;
    float _263;
    float _264;
    float _265;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _263 = (-0.0) - _242;
        _264 = (-0.0) - _243;
        _265 = (-0.0) - _244;
    }
    else
    {
        _263 = _242;
        _264 = _243;
        _265 = _244;
    }
    float _282 = (((1.0 - TEXCOORD_5.y) * (-2.7999999523162841796875)) * cbMtdParam._m0[15u].z) + 1.0;
    float _3867 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    vec4 _298 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _301 = _298.x;
    float _311 = ((cbMtdParam._m0[15u].w * (-1.39999997615814208984375)) * ((_301 + (-1.0)) + ((1.0 - TEXCOORD_5.x) * 2.0))) + 1.0;
    float _3878 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    vec4 _327 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _331 = _327.z;
    float _334 = (_327.x * 2.0) + (-1.0);
    float _335 = (_327.y * 2.0) + (-1.0);
    float _336 = dot(vec2(_334, _335), vec2(_334, _335));
    float _3889 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))));
    float _344 = fma(_341, _263, fma(_335, _256, _334 * _235));
    float _347 = fma(_341, _264, fma(_335, _257, _334 * _236));
    float _350 = fma(_341, _265, fma(_335, _258, _334 * _237));
    float _354 = inversesqrt(dot(vec3(_344, _347, _350), vec3(_344, _347, _350)));
    float _355 = _354 * _344;
    float _356 = _354 * _347;
    float _357 = _354 * _350;
    float _361 = exp2(log2(_356) * cbMtdParam._m0[15u].y) * cbMtdParam._m0[15u].x;
    float _3900 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = ((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) + (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * (1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))));
    float _369 = cbMtdParam._m0[13u].y * _301;
    float _380 = ((cbMtdParam._m0[14u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5.w - _369) + (cbMtdParam._m0[13u].w * TEXCOORD_5.w))) + 1.0;
    float _3911 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _382 = 1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)));
    float _383 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _384 = isnan(1.0) ? _383 : (isnan(_383) ? 1.0 : min(_383, 1.0));
    float _392 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.z - _369) + (cbMtdParam._m0[13u].z * TEXCOORD_5.z))) + 1.0;
    float _3932 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _394 = 1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)));
    float _395 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _396 = isnan(1.0) ? _395 : (isnan(_395) ? 1.0 : min(_395, 1.0));
    vec4 _414 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    float _419 = cbMtdParam._m0[11u].x * _396;
    float _421 = cbMtdParam._m0[11u].y * _396;
    float _423 = cbMtdParam._m0[11u].z * _396;
    float _443 = _394 + _382;
    float _444 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _445 = isnan(1.0) ? _444 : (isnan(_444) ? 1.0 : min(_444, 1.0));
    vec4 _463 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _468 = _463.w;
    float _469 = _463.x * cbMtdParam._m0[10u].x;
    float _470 = _463.y * cbMtdParam._m0[10u].y;
    float _471 = _463.z * cbMtdParam._m0[10u].z;
    float _488 = (_469 - (_445 * _469)) + ((((((_416 * (cbMtdParam._m0[9u].x - _419)) * _384) + (_419 * _416)) * 4.55000019073486328125) * _445) * _469);
    float _489 = (_470 - (_445 * _470)) + ((((((_417 * (cbMtdParam._m0[9u].y - _421)) * _384) + (_421 * _417)) * 4.55000019073486328125) * _445) * _470);
    float _490 = (_471 - (_445 * _471)) + ((((((_418 * (cbMtdParam._m0[9u].z - _423)) * _384) + (_423 * _418)) * 4.55000019073486328125) * _445) * _471);
    float _3963 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _491 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _493 = 3.0 - (_491 * 2.0);
    float _495 = _491 * _491;
    float _505 = ((_495 * (cbMtdParam._m0[12u].x - _488)) * _493) + _488;
    float _506 = ((_495 * (cbMtdParam._m0[12u].y - _489)) * _493) + _489;
    float _507 = ((_495 * (cbMtdParam._m0[12u].z - _490)) * _493) + _490;
    vec4 _524 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _531 = (_524.x * 2.0) + (-1.0);
    float _532 = (_524.y * 2.0) + (-1.0);
    float _533 = dot(vec2(_531, _532), vec2(_531, _532));
    float _3974 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _541 = ((_524.z - _331) * _364) + _331;
    vec4 _553 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _559 = (_553.x * 2.0) + (-1.0);
    float _560 = (_553.y * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3985 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _566 = sqrt(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))));
    float _569 = fma(_566, _263, fma(_560, _256, _559 * _235));
    float _572 = fma(_566, _264, fma(_560, _257, _559 * _236));
    float _575 = fma(_566, _265, fma(_560, _258, _559 * _237));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    float _580 = _579 * _569;
    float _581 = _579 * _572;
    float _582 = _579 * _575;
    float _585 = fma(_582, _218, fma(_581, _217, _580 * _216));
    float _588 = fma(_582, _251, fma(_581, _250, _580 * _249));
    float _591 = fma(_582, _265, fma(_581, _264, _580 * _263));
    float _595 = inversesqrt(dot(vec3(_585, _588, _591), vec3(_585, _588, _591)));
    float _599 = fma(_357, _218, fma(_356, _217, _355 * _216));
    float _602 = fma(_357, _251, fma(_356, _250, _355 * _249));
    float _605 = fma(_357, _265, fma(_356, _264, _355 * _263));
    float _609 = inversesqrt(dot(vec3(_599, _602, _605), vec3(_599, _602, _605)));
    float _612 = _609 * _605;
    vec4 _625 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Snow_Tilling_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _631 = (_625.x * 2.0) + (-1.0);
    float _632 = (_625.y * 2.0) + (-1.0);
    float _633 = dot(vec2(_631, _632), vec2(_631, _632));
    float _3996 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))));
    float _641 = fma(_638, _263, fma(_632, _256, _631 * _235));
    float _644 = fma(_638, _264, fma(_632, _257, _631 * _236));
    float _647 = fma(_638, _265, fma(_632, _258, _631 * _237));
    float _651 = inversesqrt(dot(vec3(_641, _644, _647), vec3(_641, _644, _647)));
    float _652 = _651 * _641;
    float _653 = _651 * _644;
    float _654 = _651 * _647;
    float _657 = fma(_654, _218, fma(_653, _217, _652 * _216));
    float _660 = fma(_654, _251, fma(_653, _250, _652 * _249));
    float _663 = fma(_654, _265, fma(_653, _264, _652 * _263));
    float _667 = inversesqrt(dot(vec3(_657, _660, _663), vec3(_657, _660, _663)));
    float _682 = ((_609 * _599) + (((_585 * _384) * _595) * cbMtdParam._m0[14u].w)) + (((_657 * _396) * _667) * cbMtdParam._m0[14u].z);
    float _684 = ((_609 * _602) + (((_588 * _384) * _595) * cbMtdParam._m0[14u].w)) + (((_660 * _396) * _667) * cbMtdParam._m0[14u].z);
    float _691 = ((_531 - _682) * _364) + _682;
    float _692 = (_364 * (_532 - _684)) + _684;
    float _693 = (_364 * (sqrt(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) - _612)) + _612;
    float _696 = fma(_693, _263, fma(_692, _249, _691 * _216));
    float _699 = fma(_693, _264, fma(_692, _250, _691 * _217));
    float _702 = fma(_693, _265, fma(_692, _251, _691 * _218));
    float _706 = inversesqrt(dot(vec3(_696, _699, _702), vec3(_696, _699, _702)));
    float _707 = _706 * _696;
    float _708 = _706 * _699;
    float _709 = _706 * _702;
    float _4007 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _710 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _711 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _4040 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _4051 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4062 = isnan(0.0) ? cbMtdParam._m0[16u].x : (isnan(cbMtdParam._m0[16u].x) ? 0.0 : max(cbMtdParam._m0[16u].x, 0.0));
    float _715 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _782 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _772);
    float _783 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _772);
    float _784 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _772);
    float _788 = inversesqrt(dot(vec3(_782, _783, _784), vec3(_782, _783, _784)));
    float _789 = _782 * _788;
    float _790 = _783 * _788;
    float _791 = _784 * _788;
    float _797 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _798 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _817 = fma(_709, cbSceneParam._m0[5u].z, fma(_708, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _707));
    float _820 = fma(_709, cbSceneParam._m0[6u].z, fma(_708, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _707));
    float _823 = fma(_709, cbSceneParam._m0[7u].z, fma(_708, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _707));
    uint _836 = uint(roundEven(NORMAL.w)) * 13u;
    uint _838 = (_836 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _844 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * cbInstanceData._m0[_838].x;
    float _845 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * cbInstanceData._m0[_838].y;
    float _846 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_838].z;
    float _4073 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _850 = 1.0 - _715;
    float _851 = _847 * _850;
    float _852 = _848 * _850;
    float _853 = _849 * _850;
    float _858 = (_847 + (-0.039999999105930328369140625)) * _715;
    float _859 = (_848 + (-0.039999999105930328369140625)) * _715;
    float _860 = (_849 + (-0.039999999105930328369140625)) * _715;
    float _861 = _858 + 0.039999999105930328369140625;
    float _863 = _859 + 0.039999999105930328369140625;
    float _864 = _860 + 0.039999999105930328369140625;
    vec4 _873 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _797, cbSceneParam._m0[86u].y * _798));
    float _876 = _873.x * TEXCOORD_4;
    float _877 = dot(vec3(_707, _708, _709), vec3(_789, _790, _791));
    float _880 = _877 * 2.0;
    float _884 = (_880 * _707) - _789;
    float _885 = (_880 * _708) - _790;
    float _886 = (_880 * _709) - _791;
    float _890 = abs(dot(vec3(_789, _790, _791), vec3(_707, _708, _709)));
    float _4106 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _892 = sqrt(_711);
    float _904 = exp2((_892 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_892 * 3.0));
    float _910 = (1.0 - _904) * ((_892 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _911 = _904 * _892;
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1249;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _974 = fma(_947, cbModelParam._m0[26u].z, fma(_943, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939));
        float _978 = fma(_947, cbModelParam._m0[27u].z, fma(_943, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939));
        float _982 = fma(_947, cbModelParam._m0[28u].z, fma(_943, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939));
        float _1007 = _939 + _707;
        float _1008 = _943 + _708;
        float _1009 = _947 + _709;
        float _1019 = fma(_1009, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1007)) - _974;
        float _1020 = fma(_1009, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1007)) - _978;
        float _1021 = fma(_1009, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1007)) - _982;
        float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
        float _1038 = ((_1025 * _1019) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_974 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1025 * _1020) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_978 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1025 * _1021) / cbModelParam._m0[34u].z) + ((((((_982 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        float _1077 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1043.x + (-0.5));
        float _1079 = _1077 * (_1043.y + (-0.5));
        float _1080 = _1077 * (_1043.z + (-0.5));
        float _1087 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1050.x + (-0.5));
        float _1089 = _1087 * (_1050.y + (-0.5));
        float _1090 = _1087 * (_1050.z + (-0.5));
        float _1097 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1057.x + (-0.5));
        float _1099 = _1097 * (_1057.y + (-0.5));
        float _1100 = _1097 * (_1057.z + (-0.5));
        float _1107 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1064.x + (-0.5));
        float _1109 = _1107 * (_1064.y + (-0.5));
        float _1110 = _1107 * (_1064.z + (-0.5));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = _1078 * 0.5;
        float _1115 = _1088 * 0.5;
        float _1116 = _1098 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1131 = (dot(vec3(_707, _708, _709), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1141 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _4154 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1143 + 1.0))) + _1148) * _1111;
        float _1158 = _1079 * 0.5;
        float _1159 = _1089 * 0.5;
        float _1160 = _1099 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_707, _708, _709), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _4187 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1185 + 1.0))) + _1190) * _1112;
        float _1200 = _1080 * 0.5;
        float _1201 = _1090 * 0.5;
        float _1202 = _1100 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_707, _708, _709), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _4220 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1227 + 1.0))) + _1232) * _1113;
        _1249 = _1080;
        _1251 = _1079;
        _1252 = _1078;
        _1253 = _1090;
        _1254 = _1089;
        _1255 = _1088;
        _1256 = _1100;
        _1257 = _1099;
        _1258 = _1098;
        _1259 = _1113;
        _1260 = _1112;
        _1261 = _1111;
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
    }
    else
    {
        _1249 = _1250;
        _1251 = _1250;
        _1252 = _1250;
        _1253 = _1250;
        _1254 = _1250;
        _1255 = _1250;
        _1256 = _1250;
        _1257 = _1250;
        _1258 = _1250;
        _1259 = _1250;
        _1260 = _1250;
        _1261 = _1250;
        _1262 = 0.0;
        _1263 = 0.0;
        _1264 = 0.0;
    }
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1290 = fma(_947, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _939));
        float _1294 = fma(_947, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _939));
        float _1298 = fma(_947, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _939));
        float _1321 = _939 + _707;
        float _1322 = _943 + _708;
        float _1323 = _947 + _709;
        float _1333 = fma(_1323, cbModelParam._m0[30u].z, fma(_1322, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1321)) - _1290;
        float _1334 = fma(_1323, cbModelParam._m0[31u].z, fma(_1322, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1321)) - _1294;
        float _1335 = fma(_1323, cbModelParam._m0[32u].z, fma(_1322, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1321)) - _1298;
        float _1339 = inversesqrt(dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335)));
        float _1352 = ((_1339 * _1333) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1290 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1339 * _1334) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1294 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1339 * _1335) / cbModelParam._m0[35u].z) + ((((((_1298 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        float _1389 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1356.x + (-0.5));
        float _1391 = _1389 * (_1356.y + (-0.5));
        float _1392 = _1389 * (_1356.z + (-0.5));
        float _1399 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1363.x + (-0.5));
        float _1401 = _1399 * (_1363.y + (-0.5));
        float _1402 = _1399 * (_1363.z + (-0.5));
        float _1409 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1370.x + (-0.5));
        float _1411 = _1409 * (_1370.y + (-0.5));
        float _1412 = _1409 * (_1370.z + (-0.5));
        float _1419 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1377.x + (-0.5));
        float _1421 = _1419 * (_1377.y + (-0.5));
        float _1422 = _1419 * (_1377.z + (-0.5));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = _1390 * 0.5;
        float _1427 = _1400 * 0.5;
        float _1428 = _1410 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_707, _708, _709), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4283 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1453 + 1.0))) + _1458) * _1423;
        float _1468 = _1391 * 0.5;
        float _1469 = _1401 * 0.5;
        float _1470 = _1411 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_707, _708, _709), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4316 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1495 + 1.0))) + _1500) * _1424;
        float _1510 = _1392 * 0.5;
        float _1511 = _1402 * 0.5;
        float _1512 = _1412 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_707, _708, _709), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4349 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1537 + 1.0))) + _1542) * _1425;
        _1559 = _1392;
        _1560 = _1391;
        _1561 = _1390;
        _1562 = _1402;
        _1563 = _1401;
        _1564 = _1400;
        _1565 = _1412;
        _1566 = _1411;
        _1567 = _1410;
        _1568 = _1425;
        _1569 = _1424;
        _1570 = _1423;
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
    }
    else
    {
        _1559 = _1250;
        _1560 = _1250;
        _1561 = _1250;
        _1562 = _1250;
        _1563 = _1250;
        _1564 = _1250;
        _1565 = _1250;
        _1566 = _1250;
        _1567 = _1250;
        _1568 = _1250;
        _1569 = _1250;
        _1570 = _1250;
        _1571 = 0.0;
        _1572 = 0.0;
        _1573 = 0.0;
    }
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1262)) + _1262;
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1263)) + _1263;
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1264)) + _1264;
    float _1606 = fma(_1585, cbSceneParam._m0[89u].z, fma(_1584, cbSceneParam._m0[89u].y, _1583 * cbSceneParam._m0[89u].x));
    float _1609 = fma(_1585, cbSceneParam._m0[90u].z, fma(_1584, cbSceneParam._m0[90u].y, _1583 * cbSceneParam._m0[90u].x));
    float _1612 = fma(_1585, cbSceneParam._m0[91u].z, fma(_1584, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1583));
    float _1627 = _884 * 0.5;
    float _1628 = _885 * 0.5;
    float _1629 = _886 * 0.5;
    float _1630 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1633 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1636 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1670;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1643 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1249, _1253, _1256, _1259));
        float _1647 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1251, _1254, _1257, _1260));
        float _1651 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1252, _1255, _1258, _1261));
        float _1658 = dot(vec4(cbModelParam._m0[39u]), vec4(_1627, _1628, _1629, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1658) ? 0.0 : (isnan(0.0) ? _1658 : max(0.0, _1658))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1681;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1672 = dot(vec4(cbModelParam._m0[40u]), vec4(_1627, _1628, _1629, 1.0));
        _1681 = dot(vec3(isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1672) ? 0.0 : (isnan(0.0) ? _1672 : max(0.0, _1672))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1681 = 1.0;
    }
    float _1685 = (_1681 * cbModelParam._m0[1u].x) + (_1670 * (1.0 - cbModelParam._m0[1u].x));
    float _1695 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _711);
    float _1696 = isnan(_1695) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1695 : min(cbModelParam._m0[25u].z, _1695));
    float _1776;
    float _1778;
    float _1780;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1743 = fma(_947, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939)) + cbModelParam._m0[13u].w;
        float _1747 = fma(_947, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939)) + cbModelParam._m0[14u].w;
        float _1751 = fma(_947, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939)) + cbModelParam._m0[15u].w;
        float _1754 = fma(_886, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884));
        float _1757 = fma(_886, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884));
        float _1760 = fma(_886, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884));
        float _1788;
        if (_1754 > 0.0)
        {
            _1788 = abs((1.0 - _1743) / _1754);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1743 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1788 = frontier_phi_16_14_ladder;
        }
        float _1963;
        if (_1757 > 0.0)
        {
            _1963 = abs((1.0 - _1747) / _1757);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1747 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1963 = frontier_phi_25_21_ladder;
        }
        float _2258;
        if (_1760 > 0.0)
        {
            _2258 = abs((1.0 - _1751) / _1760);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1751 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2258 = frontier_phi_37_32_ladder;
        }
        float _2260 = isnan(_1963) ? _1788 : (isnan(_1788) ? _1963 : min(_1788, _1963));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1754) + _1743;
        float _2266 = (_2261 * _1757) + _1747;
        float _2267 = (_2261 * _1760) + _1751;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2268;
        float _2272 = _2268 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 > _2272) || ((_2266 < _2270) || ((_2265 < _2270) || (_2265 > _2272))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2267, cbModelParam._m0[9u].z, fma(_2266, cbModelParam._m0[9u].y, _2265 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2267, cbModelParam._m0[10u].z, fma(_2266, cbModelParam._m0[10u].y, _2265 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2267, cbModelParam._m0[11u].z, fma(_2266, cbModelParam._m0[11u].y, _2265 * cbModelParam._m0[11u].x))), _1696);
            frontier_phi_15_37_ladder = _2412.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2412.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2412.z * cbModelParam._m0[1u].y;
        }
        _1776 = frontier_phi_15_37_ladder_1;
        _1778 = frontier_phi_15_37_ladder;
        _1780 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1764 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_884, _885, _886), _1696);
        _1776 = _1764.x * cbModelParam._m0[1u].y;
        _1778 = _1764.y * cbModelParam._m0[1u].y;
        _1780 = _1764.z * cbModelParam._m0[1u].y;
    }
    float _1784 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _711);
    float _1785 = isnan(_1784) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1784 : min(cbModelParam._m0[25u].w, _1784));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1842 = fma(_947, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939)) + cbModelParam._m0[21u].w;
        float _1846 = fma(_947, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939)) + cbModelParam._m0[22u].w;
        float _1850 = fma(_947, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939)) + cbModelParam._m0[23u].w;
        float _1853 = fma(_886, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884));
        float _1856 = fma(_886, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884));
        float _1859 = fma(_886, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884));
        float _1968;
        if (_1853 > 0.0)
        {
            _1968 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1968 = frontier_phi_27_23_ladder;
        }
        float _2285;
        if (_1856 > 0.0)
        {
            _2285 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2285 = frontier_phi_39_34_ladder;
        }
        float _2623;
        if (_1859 > 0.0)
        {
            _2623 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2623 = frontier_phi_49_46_ladder;
        }
        float _2625 = isnan(_2285) ? _1968 : (isnan(_1968) ? _2285 : min(_1968, _2285));
        float _2626 = isnan(_2623) ? _2625 : (isnan(_2625) ? _2623 : min(_2625, _2623));
        float _2630 = (_2626 * _1853) + _1842;
        float _2631 = (_2626 * _1856) + _1846;
        float _2632 = (_2626 * _1859) + _1850;
        float _2633 = _2626 * 9.9999997473787516355514526367188e-05;
        float _2634 = (-1.0) - _2633;
        float _2636 = _2633 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2632 > _2636) || ((_2632 < _2634) || ((_2631 > _2636) || ((_2631 < _2634) || ((_2630 < _2634) || (_2630 > _2636))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2754 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2632, cbModelParam._m0[17u].z, fma(_2631, cbModelParam._m0[17u].y, _2630 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2632, cbModelParam._m0[18u].z, fma(_2631, cbModelParam._m0[18u].y, _2630 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2632, cbModelParam._m0[19u].z, fma(_2631, cbModelParam._m0[19u].y, _2630 * cbModelParam._m0[19u].x))), _1785);
            frontier_phi_24_49_ladder = _2754.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2754.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2754.x * cbModelParam._m0[1u].z;
        }
        _1878 = frontier_phi_24_49_ladder_2;
        _1880 = frontier_phi_24_49_ladder_1;
        _1882 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_884, _885, _886), _1785);
        _1878 = _1862.x * cbModelParam._m0[1u].z;
        _1880 = _1862.y * cbModelParam._m0[1u].z;
        _1882 = _1862.z * cbModelParam._m0[1u].z;
    }
    float _1895 = (((_910 * _861) + _911) * _876) * ((cbModelParam._m0[1u].w * (_1878 - _1776)) + _1776);
    float _1897 = (((_910 * _863) + _911) * _876) * ((cbModelParam._m0[1u].w * (_1880 - _1778)) + _1778);
    float _1899 = (((_910 * _864) + _911) * _876) * ((cbModelParam._m0[1u].w * (_1882 - _1780)) + _1780);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1897, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1897, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1897, cbSceneParam._m0[91u].y, _1895 * cbSceneParam._m0[91u].x));
    float _1942 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1946 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1950 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1955 = _1942 / _1954;
    float _1956 = _1946 / _1954;
    float _1957 = _1950 / _1954;
    float _2104;
    float _2105;
    float _2106;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1984 = ((uint(_1957 > cbSceneParam._m0[59u].y) + uint(_1957 > cbSceneParam._m0[59u].x)) + uint(_1957 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1985 = _1984 + 43u;
        uint _1993 = _1984 + 44u;
        uint _2001 = _1984 + 45u;
        uint _2009 = _1984 + 46u;
        float _2020 = fma(_1954, cbSceneParam._m0[_1985].w, fma(_1950, cbSceneParam._m0[_1985].z, fma(_1946, cbSceneParam._m0[_1985].y, _1942 * cbSceneParam._m0[_1985].x)));
        float _2024 = fma(_1954, cbSceneParam._m0[_1993].w, fma(_1950, cbSceneParam._m0[_1993].z, fma(_1946, cbSceneParam._m0[_1993].y, _1942 * cbSceneParam._m0[_1993].x)));
        float _2032 = fma(_1954, cbSceneParam._m0[_2009].w, fma(_1950, cbSceneParam._m0[_2009].z, fma(_1946, cbSceneParam._m0[_2009].y, _1942 * cbSceneParam._m0[_2009].x)));
        float _2037 = cbSceneParam._m0[33u].z * _2032;
        float _2039 = cbSceneParam._m0[33u].w * _2032;
        float _2042 = fma(_1954, cbSceneParam._m0[_2001].w, fma(_1950, cbSceneParam._m0[_2001].z, fma(_1946, cbSceneParam._m0[_2001].y, _1942 * cbSceneParam._m0[_2001].x))) / _2032;
        float _2090 = (cbSceneParam._m0[33u].x - sqrt(((_1956 * _1956) + (_1955 * _1955)) + (_1957 * _1957))) * cbSceneParam._m0[33u].y;
        float _4475 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2097 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2037 + _2020) / _2032, (_2039 + _2024) / _2032), _2042), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 + _2020) / _2032, (_2024 - _2037) / _2032), _2042), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 - _2037) / _2032, (_2024 - _2039) / _2032), _2042), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 - _2039) / _2032, (_2037 + _2024) / _2032), _2042), 0.0)).x), vec4(0.25)));
        _2104 = 1.0 - (_2097 * cbSceneParam._m0[34u].x);
        _2105 = 1.0 - (_2097 * cbSceneParam._m0[34u].y);
        _2106 = 1.0 - (_2097 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2104 = 1.0;
        _2105 = 1.0;
        _2106 = 1.0;
    }
    float _2170;
    float _2172;
    float _2174;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2158 = fma(_1954, cbSceneParam._m0[63u].w, fma(_1950, cbSceneParam._m0[63u].z, fma(_1946, cbSceneParam._m0[63u].y, _1942 * cbSceneParam._m0[63u].x)));
        float _2159 = fma(_1954, cbSceneParam._m0[60u].w, fma(_1950, cbSceneParam._m0[60u].z, fma(_1946, cbSceneParam._m0[60u].y, _1942 * cbSceneParam._m0[60u].x))) / _2158;
        float _2160 = fma(_1954, cbSceneParam._m0[61u].w, fma(_1950, cbSceneParam._m0[61u].z, fma(_1946, cbSceneParam._m0[61u].y, _1942 * cbSceneParam._m0[61u].x))) / _2158;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2159 >= cbSceneParam._m0[64u].x) && (_2160 >= cbSceneParam._m0[64u].y)) && (_2159 <= cbSceneParam._m0[64u].z)) && (_2160 <= cbSceneParam._m0[64u].w))
        {
            float _2298 = fma(_1954, cbSceneParam._m0[62u].w, fma(_1950, cbSceneParam._m0[62u].z, fma(_1946, cbSceneParam._m0[62u].y, _1942 * cbSceneParam._m0[62u].x))) / _2158;
            float _2302 = isnan(cbSceneParam._m0[41u].w) ? _2298 : (isnan(_2298) ? cbSceneParam._m0[41u].w : max(_2298, cbSceneParam._m0[41u].w));
            float _2345 = (cbSceneParam._m0[33u].x - sqrt(((_1956 * _1956) + (_1955 * _1955)) + (_1957 * _1957))) * cbSceneParam._m0[33u].y;
            float _4491 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
            float _2352 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2159, cbSceneParam._m0[33u].w + _2160), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2159, _2160 - cbSceneParam._m0[33u].z), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2159 - cbSceneParam._m0[33u].z, _2160 - cbSceneParam._m0[33u].w), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2159 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2160), _2302), 0.0)).x), vec4(0.25)));
            float _2356 = 1.0 - (_2352 * cbSceneParam._m0[34u].x);
            float _2357 = 1.0 - (_2352 * cbSceneParam._m0[34u].y);
            float _2358 = 1.0 - (_2352 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2357) ? _2105 : (isnan(_2105) ? _2357 : min(_2105, _2357));
            frontier_phi_36_35_ladder_1 = isnan(_2358) ? _2106 : (isnan(_2106) ? _2358 : min(_2106, _2358));
            frontier_phi_36_35_ladder_2 = isnan(_2356) ? _2104 : (isnan(_2104) ? _2356 : min(_2104, _2356));
        }
        else
        {
            frontier_phi_36_35_ladder = _2105;
            frontier_phi_36_35_ladder_1 = _2106;
            frontier_phi_36_35_ladder_2 = _2104;
        }
        _2170 = frontier_phi_36_35_ladder_2;
        _2172 = frontier_phi_36_35_ladder;
        _2174 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2170 = _2104;
        _2172 = _2105;
        _2174 = _2106;
    }
    uvec4 _2179 = floatBitsToUint(cbInstanceData._m0[_836 + 5u]);
    uint _2181 = _2179.x * 14u;
    uint _2182 = _2181 + 13u;
    float _2189 = _876 + (-1.0);
    float _2194 = (cbLight._m0[_2182].x * _2189) + 1.0;
    float _2195 = (cbLight._m0[_2182].y * _2189) + 1.0;
    float _2196 = (cbLight._m0[_2182].z * _2189) + 1.0;
    float _2197 = (cbLight._m0[_2182].w * _2189) + 1.0;
    uint _2198 = _2181 + 5u;
    float _2204 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
    uint _2208 = _2181 + 4u;
    float _2217 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
    uint _2221 = _2181 | 1u;
    float _2232 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_707, _708, _709));
    float _2235 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_707, _708, _709));
    float _4527 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _4538 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2240 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * 0.3183098733425140380859375;
    float _2242 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * 0.3183098733425140380859375;
    float _2249 = ((cbLight._m0[_2198].x * _2204) * _2242) + (((cbLight._m0[_2208].x * _2170) * _2217) * _2240);
    float _2250 = ((_2204 * cbLight._m0[_2198].y) * _2242) + (((cbLight._m0[_2208].y * _2172) * _2217) * _2240);
    float _2251 = ((_2204 * cbLight._m0[_2198].z) * _2242) + (((cbLight._m0[_2208].z * _2174) * _2217) * _2240);
    uvec4 _2255 = floatBitsToUint(cbLight._m0[_2181 + 12u]);
    bool _2257 = _2255.x == 0u;
    float _2359;
    float _2361;
    float _2363;
    if (_2257)
    {
        _2359 = _2249;
        _2361 = _2250;
        _2363 = _2251;
    }
    else
    {
        uint _2367 = _2181 + 6u;
        float _2383 = (dot(vec3(cbLight._m0[_2181 + 2u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2384 = _2383 * _2383;
        float _4549 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2385 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2386 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2359 = (((cbLight._m0[_2367].x * 0.3183098733425140380859375) * _2385) * _2386) + _2249;
        _2361 = (((cbLight._m0[_2367].y * 0.3183098733425140380859375) * _2385) * _2386) + _2250;
        _2363 = (((cbLight._m0[_2367].z * 0.3183098733425140380859375) * _2385) * _2386) + _2251;
    }
    bool _2366 = _2255.y == 0u;
    float _2421;
    float _2423;
    float _2425;
    if (_2366)
    {
        _2421 = _2359;
        _2423 = _2361;
        _2425 = _2363;
    }
    else
    {
        uint _2594 = _2181 + 7u;
        float _2610 = (dot(vec3(cbLight._m0[_2181 + 3u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2611 = _2610 * _2610;
        float _4565 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2612 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2613 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2421 = (((cbLight._m0[_2594].x * 0.3183098733425140380859375) * _2612) * _2613) + _2359;
        _2423 = (((cbLight._m0[_2594].y * 0.3183098733425140380859375) * _2612) * _2613) + _2361;
        _2425 = (((cbLight._m0[_2594].z * 0.3183098733425140380859375) * _2612) * _2613) + _2363;
    }
    uint _2428 = _2181 + 8u;
    float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _711) * 0.949999988079071044921875);
    float _2442 = _2441 * _2441;
    float _2443 = cbLight._m0[_2181].x + _789;
    float _2444 = cbLight._m0[_2181].y + _790;
    float _2445 = cbLight._m0[_2181].z + _791;
    float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
    float _2450 = _2449 * _2443;
    float _2451 = _2449 * _2444;
    float _2452 = _2449 * _2445;
    float _2453 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2181].xyz));
    float _4581 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2456 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _4592 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _2457 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2458 = dot(vec3(_707, _708, _709), vec3(_2450, _2451, _2452));
    float _4603 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2462 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2450, _2451, _2452));
    float _4614 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2466 = _2442 * _2442;
    float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
    float _2478 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
    float _2479 = 0.959999978542327880859375 - _858;
    float _2481 = 0.959999978542327880859375 - _859;
    float _2482 = 0.959999978542327880859375 - _860;
    float _2489 = 1.0 - _2442;
    float _2500 = (0.5 / (((_2457 * ((_2456 * _2489) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2489) + _2442) * _2456))) * _2456;
    float _4625 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2502 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
    uint _2516 = _2181 + 9u;
    float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _711) * 0.949999988079071044921875);
    float _2528 = _2527 * _2527;
    float _2529 = cbLight._m0[_2221].x + _789;
    float _2530 = cbLight._m0[_2221].y + _790;
    float _2531 = cbLight._m0[_2221].z + _791;
    float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
    float _2536 = _2535 * _2529;
    float _2537 = _2535 * _2530;
    float _2538 = _2535 * _2531;
    float _2539 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2221].xyz));
    float _4636 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2542 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2543 = dot(vec3(_707, _708, _709), vec3(_2536, _2537, _2538));
    float _4647 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2546 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2547 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2536, _2537, _2538));
    float _4658 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2551 = _2528 * _2528;
    float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
    float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0);
    float _2569 = 1.0 - _2528;
    float _2579 = (0.5 / (((_2457 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2569) + _2528) * _2542))) * _2542;
    float _4669 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2581 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
    float _2591 = (((((_2562 * _2479) + _861) * cbLight._m0[_2516].x) * _2581) * _2204) + ((((cbLight._m0[_2428].x * _2170) * ((_2478 * _2479) + _861)) * _2502) * _2217);
    float _2592 = (((((_2562 * _2481) + _863) * cbLight._m0[_2516].y) * _2581) * _2204) + ((((cbLight._m0[_2428].y * _2172) * ((_2478 * _2481) + _863)) * _2502) * _2217);
    float _2593 = (((((_2562 * _2482) + _864) * cbLight._m0[_2516].z) * _2581) * _2204) + ((((cbLight._m0[_2428].z * _2174) * ((_2478 * _2482) + _864)) * _2502) * _2217);
    float _2649;
    float _2651;
    float _2653;
    if (_2257)
    {
        _2649 = _2591;
        _2651 = _2592;
        _2653 = _2593;
    }
    else
    {
        uint _2655 = _2181 + 2u;
        uint _2659 = _2181 + 10u;
        float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2655].w)) * _711) * 0.949999988079071044921875);
        float _2674 = _2673 * _2673;
        float _2675 = cbLight._m0[_2655].x + _789;
        float _2676 = cbLight._m0[_2655].y + _790;
        float _2677 = cbLight._m0[_2655].z + _791;
        float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
        float _2682 = _2681 * _2675;
        float _2683 = _2681 * _2676;
        float _2684 = _2681 * _2677;
        float _2685 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2655].xyz));
        float _4680 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2689 = dot(vec3(_707, _708, _709), vec3(_2682, _2683, _2684));
        float _4691 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2693 = dot(vec3(cbLight._m0[_2655].xyz), vec3(_2682, _2683, _2684));
        float _4702 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2697 = _2674 * _2674;
        float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
        float _2708 = exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0);
        float _2715 = 1.0 - _2674;
        float _2725 = (0.5 / (((_2457 * ((_2688 * _2715) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2715) + _2674) * _2688))) * _2688;
        float _4713 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2727 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
        float _2728 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2649 = (((((_2708 * _2479) + _861) * cbLight._m0[_2659].x) * _2727) * _2728) + _2591;
        _2651 = (((((_2708 * _2481) + _863) * cbLight._m0[_2659].y) * _2727) * _2728) + _2592;
        _2653 = (((((_2708 * _2482) + _864) * cbLight._m0[_2659].z) * _2727) * _2728) + _2593;
    }
    float _2759;
    float _2761;
    float _2763;
    if (_2366)
    {
        _2759 = _2649;
        _2761 = _2651;
        _2763 = _2653;
    }
    else
    {
        uint _2770 = _2181 + 3u;
        uint _2774 = _2181 + 11u;
        float _2788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2770].w)) * _711) * 0.949999988079071044921875);
        float _2789 = _2788 * _2788;
        float _2790 = cbLight._m0[_2770].x + _789;
        float _2791 = cbLight._m0[_2770].y + _790;
        float _2792 = cbLight._m0[_2770].z + _791;
        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
        float _2797 = _2796 * _2790;
        float _2798 = _2796 * _2791;
        float _2799 = _2796 * _2792;
        float _2800 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2770].xyz));
        float _4729 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2804 = dot(vec3(_707, _708, _709), vec3(_2797, _2798, _2799));
        float _4740 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2808 = dot(vec3(cbLight._m0[_2770].xyz), vec3(_2797, _2798, _2799));
        float _4751 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2812 = _2789 * _2789;
        float _2816 = ((_2807 * _2807) * (_2812 + (-1.0))) + 1.0;
        float _2823 = exp2(log2(1.0 - (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) * 5.0);
        float _2830 = 1.0 - _2789;
        float _2840 = (0.5 / (((_2457 * ((_2803 * _2830) + _2789)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2830) + _2789) * _2803))) * _2803;
        float _4762 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2842 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2812 / ((_2816 * _2816) * 3.141590118408203125));
        float _2843 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2759 = (((((_2823 * _2479) + _861) * cbLight._m0[_2774].x) * _2842) * _2843) + _2649;
        _2761 = (((((_2823 * _2481) + _863) * cbLight._m0[_2774].y) * _2842) * _2843) + _2651;
        _2763 = (((((_2823 * _2482) + _864) * cbLight._m0[_2774].z) * _2842) * _2843) + _2653;
    }
    float _2908;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_2179.y == 0u)
    {
        uvec4 _2864 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2865 = _2864.x;
        uint _2876 = uint((float(_2864.y) * floor(float(uint(cbSceneParam._m0[85u].y * _798) / _2865))) + floor(float(uint(cbSceneParam._m0[85u].x * _797) / _2865)));
        float _2886 = (log2(_1957 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2887 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        uint _2890 = uint(isnan(14.0) ? _2887 : (isnan(_2887) ? 14.0 : min(_2887, 14.0)));
        uvec4 _2895 = texelFetch(g_lightClusterGridBuffer, int(((_2890 << 2u) + (_2876 << 6u)) >> 2u));
        uint _2896 = _2895.x;
        uint _2897 = _2864.z;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        if (((((1u << ((_2897 >> 4u) & 15u)) + 4294967295u) & _2896) == 0u) || ((_2897 & 240u) == 0u))
        {
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
        }
        else
        {
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            uint _3127 = 0u;
            uint _3136;
            bool _3137;
            for (;;)
            {
                _3136 = texelFetch(g_lightClassification, int((((_2890 << 5u) + (_2876 << 9u)) + (_3127 << 2u)) >> 2u)).x;
                _3137 = _3136 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3137)
                {
                    frontier_phi_68_pred = _3126;
                    frontier_phi_68_pred_1 = _3125;
                    frontier_phi_68_pred_2 = _3124;
                    frontier_phi_68_pred_3 = _3122;
                    frontier_phi_68_pred_4 = _3121;
                    frontier_phi_68_pred_5 = _3123;
                }
                else
                {
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    uint _3251;
                    _3245 = _3121;
                    _3246 = _3122;
                    _3247 = _3123;
                    _3248 = _3124;
                    _3249 = _3125;
                    _3250 = _3126;
                    _3251 = _3136;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    for (;;)
                    {
                        uint _3255 = uint(findLSB(_3251)) + (_3127 << 5u);
                        uint _3252 = (_3251 + 4294967295u) & _3251;
                        uint _3257 = _3255 * 48u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 3u)).x));
                        uint _3277 = (_3255 * 48u) + 4u;
                        vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 3u)).x));
                        uint _3296 = (_3255 * 48u) + 8u;
                        vec3 _3307 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x));
                        float _3311 = _3271.x - _1955;
                        float _3312 = _3271.y - _1956;
                        float _3313 = _3271.z - _1957;
                        float _3314 = dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313));
                        float _3317 = inversesqrt(_3314);
                        float _3318 = _3317 * _3311;
                        float _3319 = _3317 * _3312;
                        float _3320 = _3317 * _3313;
                        float _3321 = dot(vec3(_817, _820, _823), vec3(_3318, _3319, _3320));
                        float _3326 = 1.0 - (_3314 * _3271.w);
                        float _4788 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3327 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3328 = sqrt(_3314) * _3290.w;
                        float _3331 = 1.39999997615814208984375 / (_3328 + 1.39999997615814208984375);
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3321) + _3332;
                        float _3338 = _3328 * _3328;
                        float _3342 = ((isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0))) * _3327) / ((_3338 * 0.699999988079071044921875) + 1.0);
                        float _3346 = (-0.0) - _1955;
                        float _3347 = (-0.0) - _1956;
                        float _3348 = (-0.0) - _1957;
                        float _3352 = inversesqrt(dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348)));
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3362 = exp2(log2(1.0 / ((_3338 * 3.5) + 5.0)) * 0.25);
                        float _3363 = 1.0 - _892;
                        float _3370 = sqrt(1.0 - ((1.0 - (_3363 * _3363)) * (1.0 - (_3362 * _3362))));
                        float _3371 = _3370 * _3370;
                        float _3372 = _3371 * _3371;
                        float _3373 = _3353 + _3318;
                        float _3374 = _3354 + _3319;
                        float _3375 = _3355 + _3320;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3383 = dot(vec3(_817, _820, _823), vec3(_3353, _3354, _3355));
                        float _4804 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3386 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                        float _3387 = dot(vec3(_817, _820, _823), vec3(_3379 * _3373, _3379 * _3374, _3379 * _3375));
                        float _4815 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3390 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3394 = ((_3390 * _3390) * (_3372 + (-1.0))) + 1.0;
                        float _3395 = _3331 * _3371;
                        float _3396 = _3395 * _3395;
                        float _3399 = ((1.0 - _3396) * _3321) + _3396;
                        float _4826 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3400 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3401 = 1.0 - _3371;
                        float _3411 = (0.5 / (((_3400 * ((_3386 * _3401) + _3371)) + 9.9999999392252902907785028219223e-09) + (((_3400 * _3401) + _3371) * _3386))) * _3400;
                        float _4837 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3422 = (((_3372 * 3.1415927410125732421875) * (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) / ((_3394 * _3394) * ((_3338 * 2.1991131305694580078125) + 3.141590118408203125))) * _3327;
                        _3180 = (_3342 * _3290.x) + _3248;
                        _3181 = (_3342 * _3290.y) + _3249;
                        _3182 = (_3342 * _3290.z) + _3250;
                        _3177 = (_3422 * _3307.x) + _3245;
                        _3178 = (_3422 * _3307.y) + _3246;
                        _3179 = (_3422 * _3307.z) + _3247;
                        if (_3252 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3245 = _3177;
                            _3246 = _3178;
                            _3247 = _3179;
                            _3248 = _3180;
                            _3249 = _3181;
                            _3250 = _3182;
                            _3251 = _3252;
                        }
                    }
                    frontier_phi_68_pred = _3182;
                    frontier_phi_68_pred_1 = _3181;
                    frontier_phi_68_pred_2 = _3180;
                    frontier_phi_68_pred_3 = _3178;
                    frontier_phi_68_pred_4 = _3177;
                    frontier_phi_68_pred_5 = _3179;
                }
                _2988 = frontier_phi_68_pred;
                _2986 = frontier_phi_68_pred_1;
                _2984 = frontier_phi_68_pred_2;
                _2980 = frontier_phi_68_pred_3;
                _2978 = frontier_phi_68_pred_4;
                _2982 = frontier_phi_68_pred_5;
                uint _3128 = _3127 + 1u;
                if (_3128 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3121 = _2978;
                    _3122 = _2980;
                    _3123 = _2982;
                    _3124 = _2984;
                    _3125 = _2986;
                    _3126 = _2988;
                    _3127 = _3128;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
        }
        uvec4 _2991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2992 = _2991.z;
        uint _2994 = (_2992 >> 8u) & 15u;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        if (((4294967295u << _2994) & _2896) == 0u)
        {
            _3089 = _2977;
            _3091 = _2979;
            _3093 = _2981;
            _3095 = _2983;
            _3097 = _2985;
            _3099 = _2987;
        }
        else
        {
            float _3114 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
            float _3115 = _3114 * _1955;
            float _3116 = _3114 * _1956;
            float _3117 = _3114 * _1957;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2994 < ((_2992 >> 12u) & 15u))
            {
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3098;
                float _3100;
                float _3228 = _2977;
                float _3229 = _2979;
                float _3230 = _2981;
                float _3231 = _2983;
                float _3232 = _2985;
                float _3233 = _2987;
                uint _3234 = _2994;
                uint _3243;
                bool _3244;
                for (;;)
                {
                    _3243 = texelFetch(g_lightClassification, int((((_2890 << 5u) + (_2876 << 9u)) + (_3234 << 2u)) >> 2u)).x;
                    _3244 = _3243 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3244)
                    {
                        frontier_phi_74_pred = _3230;
                        frontier_phi_74_pred_1 = _3229;
                        frontier_phi_74_pred_2 = _3228;
                        frontier_phi_74_pred_3 = _3233;
                        frontier_phi_74_pred_4 = _3232;
                        frontier_phi_74_pred_5 = _3231;
                    }
                    else
                    {
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3440 = _3228;
                        float _3441 = _3229;
                        float _3442 = _3230;
                        float _3443 = _3231;
                        float _3444 = _3232;
                        float _3445 = _3233;
                        uint _3446 = _3243;
                        uint _3447;
                        vec4 _3472;
                        float _3473;
                        vec4 _3488;
                        vec3 _3500;
                        vec4 _3515;
                        vec4 _3531;
                        float _3578;
                        bool _3579;
                        for (;;)
                        {
                            uint _3457 = ((_3234 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3446));
                            _3447 = (_3446 + 4294967295u) & _3446;
                            uint _3459 = _3457 * 40u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            _3473 = _3472.w;
                            uint _3475 = (_3457 * 40u) + 4u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3457 * 40u) + 8u;
                            _3500 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x));
                            uint _3502 = (_3457 * 40u) + 16u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3518 = (_3457 * 40u) + 20u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3534 = (_3457 * 40u) + 24u;
                            vec4 _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3553 = (_3457 * 40u) + 28u;
                            vec4 _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            _3578 = fma(_1957, _3566.z, fma(_1956, _3566.y, _3566.x * _1955)) + _3566.w;
                            _3579 = !((fma(_1957, _3547.z, fma(_1956, _3547.y, _3547.x * _1955)) + _3547.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3579)
                            {
                                float _3606 = _3472.x - _1955;
                                float _3607 = _3472.y - _1956;
                                float _3608 = _3472.z - _1957;
                                float _3609 = dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608));
                                float _3612 = inversesqrt(_3609);
                                float _3613 = _3612 * _3606;
                                float _3614 = _3612 * _3607;
                                float _3615 = _3612 * _3608;
                                float _3619 = 1.0 - (_3609 / (_3473 * _3473));
                                float _4848 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3620 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3624 = sqrt(_3609) * _3488.w;
                                float _3626 = 1.39999997615814208984375 / (_3624 + 1.39999997615814208984375);
                                float _3627 = _3626 * _3626;
                                float _3630 = ((1.0 - _3627) * dot(vec3(_3613, _3614, _3615), vec3(_817, _820, _823))) + _3627;
                                float _3633 = _3624 * _3624;
                                float _3637 = (fma(_1957, _3515.z, fma(_1956, _3515.y, _3515.x * _1955)) + _3515.w) / _3578;
                                float _3638 = (fma(_1957, _3531.z, fma(_1956, _3531.y, _3531.x * _1955)) + _3531.w) / _3578;
                                float _3642 = 1.0 - dot(vec2(_3637, _3638), vec2(_3637, _3638));
                                float _4864 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3644 = _3643 * (((isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0))) * _3620) / ((_3633 * 0.699999988079071044921875) + 1.0));
                                float _3656 = exp2(log2(1.0 / ((_3633 * 3.5) + 5.0)) * 0.25);
                                float _3657 = 1.0 - _892;
                                float _3664 = sqrt(1.0 - ((1.0 - (_3657 * _3657)) * (1.0 - (_3656 * _3656))));
                                float _3665 = _3664 * _3664;
                                float _3666 = _3665 * _3665;
                                float _3667 = _3613 - _3115;
                                float _3668 = _3614 - _3116;
                                float _3669 = _3615 - _3117;
                                float _3673 = inversesqrt(dot(vec3(_3667, _3668, _3669), vec3(_3667, _3668, _3669)));
                                float _3677 = dot(vec3(_817, _820, _823), vec3((-0.0) - _3115, (-0.0) - _3116, (-0.0) - _3117));
                                float _4875 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3680 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3681 = dot(vec3(_817, _820, _823), vec3(_3673 * _3667, _3673 * _3668, _3673 * _3669));
                                float _4886 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3684 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3688 = ((_3684 * _3684) * (_3666 + (-1.0))) + 1.0;
                                float _3689 = _3626 * _3665;
                                float _3690 = _3689 * _3689;
                                float _3696 = ((1.0 - _3690) * dot(vec3(_817, _820, _823), vec3(_3613, _3614, _3615))) + _3690;
                                float _4897 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3698 = 1.0 - _3665;
                                float _3708 = (0.5 / (((_3697 * ((_3680 * _3698) + _3665)) + 9.9999999392252902907785028219223e-09) + (((_3697 * _3698) + _3665) * _3680))) * _3697;
                                float _4908 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3718 = (_3643 * _3620) * (((_3666 * 3.1415927410125732421875) * (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0)))) / ((_3688 * _3688) * ((_3633 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3718 * _3500.z;
                                frontier_phi_80_pred_1 = _3718 * _3500.y;
                                frontier_phi_80_pred_2 = _3718 * _3500.x;
                                frontier_phi_80_pred_3 = _3644 * _3488.z;
                                frontier_phi_80_pred_4 = _3644 * _3488.y;
                                frontier_phi_80_pred_5 = _3644 * _3488.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3724 = frontier_phi_80_pred;
                            _3723 = frontier_phi_80_pred_1;
                            _3722 = frontier_phi_80_pred_2;
                            _3727 = frontier_phi_80_pred_3;
                            _3726 = frontier_phi_80_pred_4;
                            _3725 = frontier_phi_80_pred_5;
                            _3430 = _3725 + _3443;
                            _3431 = _3726 + _3444;
                            _3432 = _3727 + _3445;
                            _3427 = _3722 + _3440;
                            _3428 = _3723 + _3441;
                            _3429 = _3724 + _3442;
                            if (_3447 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3447;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3429;
                        frontier_phi_74_pred_1 = _3428;
                        frontier_phi_74_pred_2 = _3427;
                        frontier_phi_74_pred_3 = _3432;
                        frontier_phi_74_pred_4 = _3431;
                        frontier_phi_74_pred_5 = _3430;
                    }
                    _3094 = frontier_phi_74_pred;
                    _3092 = frontier_phi_74_pred_1;
                    _3090 = frontier_phi_74_pred_2;
                    _3100 = frontier_phi_74_pred_3;
                    _3098 = frontier_phi_74_pred_4;
                    _3096 = frontier_phi_74_pred_5;
                    uint _3235 = _3234 + 1u;
                    if (_3235 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3228 = _3090;
                        _3229 = _3092;
                        _3230 = _3094;
                        _3231 = _3096;
                        _3232 = _3098;
                        _3233 = _3100;
                        _3234 = _3235;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3098;
                frontier_phi_62_63_ladder_1 = _3096;
                frontier_phi_62_63_ladder_2 = _3094;
                frontier_phi_62_63_ladder_3 = _3100;
                frontier_phi_62_63_ladder_4 = _3092;
                frontier_phi_62_63_ladder_5 = _3090;
            }
            else
            {
                frontier_phi_62_63_ladder = _2985;
                frontier_phi_62_63_ladder_1 = _2983;
                frontier_phi_62_63_ladder_2 = _2981;
                frontier_phi_62_63_ladder_3 = _2987;
                frontier_phi_62_63_ladder_4 = _2979;
                frontier_phi_62_63_ladder_5 = _2977;
            }
            _3089 = frontier_phi_62_63_ladder_5;
            _3091 = frontier_phi_62_63_ladder_4;
            _3093 = frontier_phi_62_63_ladder_2;
            _3095 = frontier_phi_62_63_ladder_1;
            _3097 = frontier_phi_62_63_ladder;
            _3099 = frontier_phi_62_63_ladder_3;
        }
        float _3104 = isnan(1.0) ? _876 : (isnan(_876) ? 1.0 : min(_876, 1.0));
        _2908 = (_3104 * _3095) + _2421;
        _2910 = (_3104 * _3097) + _2423;
        _2912 = (_3104 * _3099) + _2425;
        _2914 = ((_3089 * _861) * _3104) + _2759;
        _2916 = ((_3091 * _863) * _3104) + _2761;
        _2918 = ((_3093 * _864) * _3104) + _2763;
    }
    else
    {
        _2908 = _2421;
        _2910 = _2423;
        _2912 = _2425;
        _2914 = _2759;
        _2916 = _2761;
        _2918 = _2763;
    }
    float _4924 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4935 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4946 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4957 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _2943 = cbInstanceData._m0[_836 + 6u].w * (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)));
    float _2948 = _797 / cbSceneParam._m0[86u].x;
    float _2949 = _798 / cbSceneParam._m0[86u].y;
    vec4 _2963 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2948, _2949, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2965 = _2963.x;
    float _2966 = _2963.y;
    float _2967 = _2963.z;
    float _2968 = _2963.w;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _3002 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _3003 = _3002 / _731;
        float _3014 = _3003 * _782;
        float _3015 = _783 * _3003;
        float _3016 = (-0.0) - _3015;
        float _3017 = _3003 * _784;
        float _3019 = (cbSceneParam._m0[77u].w * _3016) / _3002;
        float _3020 = _3019 + cbSceneParam._m0[79u].w;
        float _3021 = cbSceneParam._m0[79u].w - _3015;
        float _3027 = sqrt(((_3014 * _3014) + (_3015 * _3015)) + (_3017 * _3017));
        float _3030 = (1.0 - (cbSceneParam._m0[77u].w / _3002)) * _3027;
        float _3035 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3037 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3190;
        if (abs((_3016 - _3019) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3190 = ((((_3020 > 0.0) ? exp2(_3035 * _3020) : (2.0 - exp2(_3037 * _3020))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3030;
        }
        else
        {
            float _3150 = 1.0 / cbSceneParam._m0[80u].x;
            float _3151 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : max(_3020, _3021));
            float _3152 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : min(_3020, _3021));
            float _3161 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : min(_3151, 0.0));
            float _3162 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : min(_3152, 0.0));
            _3190 = ((abs(_3027 / _3016) * cbSceneParam._m0[80u].y) * ((((_3161 - _3162) * 2.0) - ((exp2(_3035 * (isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0)))) - exp2(_3035 * (isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0))))) * _3150)) - ((exp2(_3037 * _3161) - exp2(_3037 * _3162)) * _3150))) + (_3030 * cbSceneParam._m0[80u].z);
        }
        vec4 _3192 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2948, _2949, 1.0), 0.0);
        float _3201 = exp2((_3190 * (-1.44269502162933349609375)) * (1.0 - _3192.w));
        float _3202 = log2(_3201);
        float _3218 = log2(_2968);
        _3039 = (exp2(_3218 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].x)) * _3192.x) / cbSceneParam._m0[78u].x)) + _2965;
        _3041 = (exp2(_3218 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].y)) * _3192.y) / cbSceneParam._m0[78u].y)) + _2966;
        _3043 = (exp2(_3218 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3202 * cbSceneParam._m0[78u].z)) * _3192.z) / cbSceneParam._m0[78u].z)) + _2967;
        _3045 = _3201 * _2968;
    }
    else
    {
        _3039 = _2965;
        _3041 = _2966;
        _3043 = _2967;
        _3045 = _2968;
    }
    float _3057 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3058 = _3057 == 3.0;
    float _3059 = log2(_3045);
    float _3066 = exp2(_3059 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2908 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _876))) + ((_2914 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1685)) * cbPerFrame._m0[3u].x));
    float _3067 = exp2(_3059 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2910 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _876))) + ((_2916 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1685)) * cbPerFrame._m0[3u].x));
    float _3068 = exp2(_3059 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2912 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _876))) + ((_2918 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1685)) * cbPerFrame._m0[3u].x));
    float _3077 = (_3057 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3077 * (_3058 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3039)));
    SV_Target.y = _3077 * (_3058 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3041)));
    SV_Target.z = _3077 * (_3058 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3043)));
    SV_Target.w = _2943;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2943;
}


