#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _456;
float _3747;
float _3748;
float _3749;
float _3750;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    vec4 _300 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _303 = _300.x;
    vec4 _321 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _338 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _303) + cbMtdParam._m0[12u].x) * _321.x;
    float _340 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _303) + cbMtdParam._m0[12u].y) * _321.y;
    float _342 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _303) + cbMtdParam._m0[12u].z) * _321.z;
    vec4 _369 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _384 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _391 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _403 = cbMtdParam._m0[28u].z + _284;
    float _404 = cbMtdParam._m0[28u].w + _285;
    float _405 = cbMtdParam._m0[29u].x + _286;
    float _419 = (-0.0) - dot(vec3(_403, _404, _405), vec3(_384 * _214, _384 * _215, _384 * _216));
    float _420 = (-0.0) - dot(vec3(_403, _404, _405), vec3(_391 * _228, _391 * _229, _391 * _230));
    float _421 = (-0.0) - dot(vec3(_403, _404, _405), vec3((-0.0) - _221, (-0.0) - _222, (-0.0) - _223));
    float _425 = inversesqrt(dot(vec3(_419, _420, _421), vec3(_419, _420, _421)));
    float _426 = _425 * _421;
    float _431 = ((cbMtdParam._m0[25u].y * _419) * _425) + (((_369.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _432 = ((cbMtdParam._m0[25u].z * _420) * _425) + (((_369.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _435 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _436 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _454;
    float _457;
    float _459;
    if (_431 > 0.0)
    {
        float _440 = (1.0 - _435) / _431;
        _454 = _440;
        _457 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_440 * _426)) * 0.16666667163372039794921875;
        _459 = (fract((_440 * _432) + _436) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_431 < 0.0)
        {
            float _455 = ((-0.0) - _435) / _431;
            frontier_phi_3_2_ladder = (fract(_455 * _426) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _455;
            frontier_phi_3_2_ladder_2 = (fract((_455 * _432) + _436) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _456;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _454 = frontier_phi_3_2_ladder_1;
        _457 = frontier_phi_3_2_ladder;
        _459 = frontier_phi_3_2_ladder_2;
    }
    float _485;
    float _487;
    float _489;
    if (_432 > 0.0)
    {
        float _472 = (1.0 - _436) / _432;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_472 < _454)
        {
            frontier_phi_8_5_ladder = (fract(_472 * _426) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_472 * _431) + _435) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _472;
        }
        else
        {
            frontier_phi_8_5_ladder = _459;
            frontier_phi_8_5_ladder_1 = _457;
            frontier_phi_8_5_ladder_2 = _454;
        }
        _485 = frontier_phi_8_5_ladder_2;
        _487 = frontier_phi_8_5_ladder_1;
        _489 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_432 < 0.0)
        {
            float _486 = ((-0.0) - _436) / _432;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_486 < _454)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_486 * _426) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_486 * _431) + _435) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _486;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _459;
                frontier_phi_8_6_ladder_9_ladder_1 = _457;
                frontier_phi_8_6_ladder_9_ladder_2 = _454;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _459;
            frontier_phi_8_6_ladder_1 = _457;
            frontier_phi_8_6_ladder_2 = _454;
        }
        _485 = frontier_phi_8_6_ladder_2;
        _487 = frontier_phi_8_6_ladder_1;
        _489 = frontier_phi_8_6_ladder;
    }
    float _493 = (_426 > 0.0) ? (cbMtdParam._m0[20u].z / _426) : 5000.0;
    float _506;
    float _507;
    if (_493 < _485)
    {
        _506 = ((_435 + cbMtdParam._m0[22u].x) + (_493 * _431)) * 0.16666667163372039794921875;
        _507 = (((_493 * _432) + _436) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _506 = _487;
        _507 = _489;
    }
    vec4 _509 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_506, _507));
    float _514 = _509.x * _303;
    float _515 = _509.y * _303;
    float _516 = _509.z * _303;
    vec4 _529 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _533 = _529.z;
    float _536 = (_529.x * 2.0) + (-1.0);
    float _537 = (_529.y * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3759 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))));
    float _555 = (cbMtdParam._m0[19u].y * _514) * cbMtdParam._m0[16u].x;
    float _557 = (cbMtdParam._m0[19u].y * _515) * cbMtdParam._m0[16u].y;
    float _559 = (cbMtdParam._m0[19u].y * _516) * cbMtdParam._m0[16u].z;
    vec4 _586 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _591 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _597 = ((_586.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _599 = (-0.0) - (cbMtdParam._m0[21u].x * ((_586.x * 0.5) + (-0.25)));
    float _600 = fract(_591);
    float _602 = fract(_591 + 0.5);
    vec4 _629 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_600 * _599) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_597 * _600) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _631 = _629.x;
    float _637 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_602 * _599) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_597 * _602) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _631) * abs((_600 * 2.0) + (-1.0))) + _631;
    float _648 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _652 = fract(abs(_648));
    float _659 = sin(cbMtdParam._m0[21u].z);
    float _660 = cos(cbMtdParam._m0[21u].z);
    float _661 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _662 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _687 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_662, (-0.0) - _659, _660 * _661) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_662, _660, _661 * _659) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_648 >= ((-0.0) - _648)) ? _652 : ((-0.0) - _652)) * cbMtdParam._m0[18u].z) - _637)) + cbMtdParam._m0[18u].w;
    float _688 = ceil(_687);
    float _3770 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _689 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _709 = ((((cbMtdParam._m0[21u].w * _514) * cbMtdParam._m0[15u].x) - _555) * _689) + _555;
    float _710 = ((((cbMtdParam._m0[21u].w * _515) * cbMtdParam._m0[15u].y) - _557) * _689) + _557;
    float _711 = ((((cbMtdParam._m0[21u].w * _516) * cbMtdParam._m0[15u].z) - _559) * _689) + _559;
    float _715 = abs(cbMtdParam._m0[20u].w * _687);
    float _719 = (((_715 * cbMtdParam._m0[18u].y) - _637) * _715) + _637;
    float _3781 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _720 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    vec4 _732 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _747 = (cbMtdParam._m0[14u].x * _732.x) * cbMtdParam._m0[19u].x;
    float _748 = (cbMtdParam._m0[14u].y * _732.y) * cbMtdParam._m0[19u].x;
    float _749 = (cbMtdParam._m0[14u].z * _732.z) * cbMtdParam._m0[19u].x;
    float _756 = exp2(log2(_720) * cbMtdParam._m0[20u].x);
    float _778 = fma(_543, _221, fma(_537, _228, _536 * _214));
    float _781 = fma(_543, _222, fma(_537, _229, _536 * _215));
    float _784 = fma(_543, _223, fma(_537, _230, _536 * _216));
    float _788 = inversesqrt(dot(vec3(_778, _781, _784), vec3(_778, _781, _784)));
    float _789 = _788 * _778;
    float _790 = _788 * _781;
    float _791 = _788 * _784;
    float _3792 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _792 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3814 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3825 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _811 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _815 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _816 = _284 * _815;
    float _817 = _285 * _815;
    float _818 = _286 * _815;
    vec4 _823 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _825 = _823.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _986 = sqrt(((_284 * _284) + (_285 * _285)) + (_286 * _286));
        float _992 = (cbMatDynParam._m0[5u].x * _986) + cbMatDynParam._m0[5u].y;
        float _3836 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _997 = (cbMatDynParam._m0[5u].z * _986) + cbMatDynParam._m0[5u].w;
        float _3847 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) - _993)) + _993) < ((_825 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _842 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _843 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _862 = fma(_791, cbSceneParam._m0[5u].z, fma(_790, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _789));
    float _865 = fma(_791, cbSceneParam._m0[6u].z, fma(_790, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _789));
    float _868 = fma(_791, cbSceneParam._m0[7u].z, fma(_790, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _789));
    uint _881 = uint(roundEven(NORMAL.w)) * 13u;
    uint _882 = _881 + 9u;
    uint _883 = _882 + uint(cbMatDynParam._m0[0u].w);
    float _889 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * cbInstanceData._m0[_883].x;
    float _890 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * cbInstanceData._m0[_883].y;
    float _891 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_883].z;
    float _3858 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    vec4 _903 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _842, cbSceneParam._m0[86u].y * _843));
    float _906 = _903.x * TEXCOORD_4;
    float _907 = dot(vec3(_789, _790, _791), vec3(_816, _817, _818));
    float _910 = _907 * 2.0;
    float _914 = (_910 * _789) - _816;
    float _915 = (_910 * _790) - _817;
    float _916 = (_910 * _791) - _818;
    float _920 = abs(dot(vec3(_816, _817, _818), vec3(_789, _790, _791)));
    float _3891 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _922 = sqrt(_792);
    float _935 = exp2((_922 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_922 * 3.0));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1031 = fma(_975, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967));
        float _1035 = fma(_975, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967));
        float _1039 = fma(_975, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967));
        float _1063 = _967 + _789;
        float _1064 = _971 + _790;
        float _1065 = _975 + _791;
        float _1075 = fma(_1065, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063)) - _1031;
        float _1076 = fma(_1065, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063)) - _1035;
        float _1077 = fma(_1065, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063)) - _1039;
        float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
        float _1094 = ((_1081 * _1075) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1031 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1081 * _1076) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1035 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1081 * _1077) / cbModelParam._m0[34u].z) + ((((((_1039 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        float _1133 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1099.x + (-0.5));
        float _1135 = _1133 * (_1099.y + (-0.5));
        float _1136 = _1133 * (_1099.z + (-0.5));
        float _1143 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1106.x + (-0.5));
        float _1145 = _1143 * (_1106.y + (-0.5));
        float _1146 = _1143 * (_1106.z + (-0.5));
        float _1153 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1113.x + (-0.5));
        float _1155 = _1153 * (_1113.y + (-0.5));
        float _1156 = _1153 * (_1113.z + (-0.5));
        float _1163 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1120.x + (-0.5));
        float _1165 = _1163 * (_1120.y + (-0.5));
        float _1166 = _1163 * (_1120.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1187 = (dot(vec3(_789, _790, _791), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1197 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3939 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1199 + 1.0))) + _1204) * _1167;
        float _1214 = _1135 * 0.5;
        float _1215 = _1145 * 0.5;
        float _1216 = _1155 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_789, _790, _791), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3972 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1241 + 1.0))) + _1246) * _1168;
        float _1256 = _1136 * 0.5;
        float _1257 = _1146 * 0.5;
        float _1258 = _1156 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_789, _790, _791), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _4005 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1283 + 1.0))) + _1288) * _1169;
        _1305 = _1136;
        _1306 = _1135;
        _1307 = _1134;
        _1308 = _1146;
        _1309 = _1145;
        _1310 = _1144;
        _1311 = _1156;
        _1312 = _1155;
        _1313 = _1154;
        _1314 = _1169;
        _1315 = _1168;
        _1316 = _1167;
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _456;
        _1306 = _456;
        _1307 = _456;
        _1308 = _456;
        _1309 = _456;
        _1310 = _456;
        _1311 = _456;
        _1312 = _456;
        _1313 = _456;
        _1314 = _456;
        _1315 = _456;
        _1316 = _456;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1347 = fma(_975, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967));
        float _1351 = fma(_975, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967));
        float _1355 = fma(_975, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967));
        float _1378 = _967 + _789;
        float _1379 = _971 + _790;
        float _1380 = _975 + _791;
        float _1390 = fma(_1380, cbModelParam._m0[30u].z, fma(_1379, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1378)) - _1347;
        float _1391 = fma(_1380, cbModelParam._m0[31u].z, fma(_1379, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1378)) - _1351;
        float _1392 = fma(_1380, cbModelParam._m0[32u].z, fma(_1379, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1378)) - _1355;
        float _1396 = inversesqrt(dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392)));
        float _1409 = ((_1396 * _1390) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1347 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1396 * _1391) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1351 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1396 * _1392) / cbModelParam._m0[35u].z) + ((((((_1355 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        float _1446 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1413.x + (-0.5));
        float _1448 = _1446 * (_1413.y + (-0.5));
        float _1449 = _1446 * (_1413.z + (-0.5));
        float _1456 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1420.x + (-0.5));
        float _1458 = _1456 * (_1420.y + (-0.5));
        float _1459 = _1456 * (_1420.z + (-0.5));
        float _1466 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1427.x + (-0.5));
        float _1468 = _1466 * (_1427.y + (-0.5));
        float _1469 = _1466 * (_1427.z + (-0.5));
        float _1476 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1434.x + (-0.5));
        float _1478 = _1476 * (_1434.y + (-0.5));
        float _1479 = _1476 * (_1434.z + (-0.5));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = _1447 * 0.5;
        float _1484 = _1457 * 0.5;
        float _1485 = _1467 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_789, _790, _791), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4068 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1510 + 1.0))) + _1515) * _1480;
        float _1525 = _1448 * 0.5;
        float _1526 = _1458 * 0.5;
        float _1527 = _1468 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_789, _790, _791), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4101 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1552 + 1.0))) + _1557) * _1481;
        float _1567 = _1449 * 0.5;
        float _1568 = _1459 * 0.5;
        float _1569 = _1469 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_789, _790, _791), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4134 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1594 + 1.0))) + _1599) * _1482;
        _1616 = _1449;
        _1617 = _1448;
        _1618 = _1447;
        _1619 = _1459;
        _1620 = _1458;
        _1621 = _1457;
        _1622 = _1469;
        _1623 = _1468;
        _1624 = _1467;
        _1625 = _1482;
        _1626 = _1481;
        _1627 = _1480;
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
    }
    else
    {
        _1616 = _456;
        _1617 = _456;
        _1618 = _456;
        _1619 = _456;
        _1620 = _456;
        _1621 = _456;
        _1622 = _456;
        _1623 = _456;
        _1624 = _456;
        _1625 = _456;
        _1626 = _456;
        _1627 = _456;
        _1628 = 0.0;
        _1629 = 0.0;
        _1630 = 0.0;
    }
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1317)) + _1317;
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1318)) + _1318;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1319)) + _1319;
    float _1663 = fma(_1642, cbSceneParam._m0[89u].z, fma(_1641, cbSceneParam._m0[89u].y, _1640 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1642, cbSceneParam._m0[90u].z, fma(_1641, cbSceneParam._m0[90u].y, _1640 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1642, cbSceneParam._m0[91u].z, fma(_1641, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1640));
    float _1684 = _914 * 0.5;
    float _1685 = _915 * 0.5;
    float _1686 = _916 * 0.5;
    float _1687 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1690 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1693 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1727;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1700 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1704 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1708 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1715 = dot(vec4(cbModelParam._m0[39u]), vec4(_1684, _1685, _1686, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1738;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1729 = dot(vec4(cbModelParam._m0[40u]), vec4(_1684, _1685, _1686, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1742 = (_1738 * cbModelParam._m0[1u].x) + (_1727 * (1.0 - cbModelParam._m0[1u].x));
    float _1752 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _792);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1752 : min(cbModelParam._m0[25u].z, _1752));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1800 = fma(_975, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967)) + cbModelParam._m0[13u].w;
        float _1804 = fma(_975, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967)) + cbModelParam._m0[14u].w;
        float _1808 = fma(_975, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967)) + cbModelParam._m0[15u].w;
        float _1811 = fma(_916, cbModelParam._m0[13u].z, fma(_915, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914));
        float _1814 = fma(_916, cbModelParam._m0[14u].z, fma(_915, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914));
        float _1817 = fma(_916, cbModelParam._m0[15u].z, fma(_915, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914));
        float _1845;
        if (_1811 > 0.0)
        {
            _1845 = abs((1.0 - _1800) / _1811);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1800 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1845 = frontier_phi_29_27_ladder;
        }
        float _2013;
        if (_1814 > 0.0)
        {
            _2013 = abs((1.0 - _1804) / _1814);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1804 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2013 = frontier_phi_38_34_ladder;
        }
        float _2457;
        if (_1817 > 0.0)
        {
            _2457 = abs((1.0 - _1808) / _1817);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1808 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2457 = frontier_phi_50_45_ladder;
        }
        float _2459 = isnan(_2013) ? _1845 : (isnan(_1845) ? _2013 : min(_1845, _2013));
        float _2460 = isnan(_2457) ? _2459 : (isnan(_2459) ? _2457 : min(_2459, _2457));
        float _2464 = (_2460 * _1811) + _1800;
        float _2465 = (_2460 * _1814) + _1804;
        float _2466 = (_2460 * _1817) + _1808;
        float _2467 = _2460 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2467;
        float _2471 = _2467 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 > _2471) || ((_2465 < _2469) || ((_2464 < _2469) || (_2464 > _2471))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2726 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2466, cbModelParam._m0[9u].z, fma(_2465, cbModelParam._m0[9u].y, _2464 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2466, cbModelParam._m0[10u].z, fma(_2465, cbModelParam._m0[10u].y, _2464 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2466, cbModelParam._m0[11u].z, fma(_2465, cbModelParam._m0[11u].y, _2464 * cbModelParam._m0[11u].x))), _1753);
            frontier_phi_28_50_ladder = _2726.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2726.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2726.x * cbModelParam._m0[1u].y;
        }
        _1833 = frontier_phi_28_50_ladder_2;
        _1835 = frontier_phi_28_50_ladder_1;
        _1837 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_914, _915, _916), _1753);
        _1833 = _1821.x * cbModelParam._m0[1u].y;
        _1835 = _1821.y * cbModelParam._m0[1u].y;
        _1837 = _1821.z * cbModelParam._m0[1u].y;
    }
    float _1841 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _792);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1841 : min(cbModelParam._m0[25u].w, _1841));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1894 = fma(_975, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967)) + cbModelParam._m0[21u].w;
        float _1898 = fma(_975, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967)) + cbModelParam._m0[22u].w;
        float _1902 = fma(_975, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967)) + cbModelParam._m0[23u].w;
        float _1905 = fma(_916, cbModelParam._m0[21u].z, fma(_915, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914));
        float _1908 = fma(_916, cbModelParam._m0[22u].z, fma(_915, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914));
        float _1911 = fma(_916, cbModelParam._m0[23u].z, fma(_915, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914));
        float _2018;
        if (_1905 > 0.0)
        {
            _2018 = abs((1.0 - _1894) / _1905);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1894 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2018 = frontier_phi_40_36_ladder;
        }
        float _2484;
        if (_1908 > 0.0)
        {
            _2484 = abs((1.0 - _1898) / _1908);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1898 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2484 = frontier_phi_52_47_ladder;
        }
        float _2863;
        if (_1911 > 0.0)
        {
            _2863 = abs((1.0 - _1902) / _1911);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1902 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2863 = frontier_phi_64_59_ladder;
        }
        float _2865 = isnan(_2484) ? _2018 : (isnan(_2018) ? _2484 : min(_2018, _2484));
        float _2866 = isnan(_2863) ? _2865 : (isnan(_2865) ? _2863 : min(_2865, _2863));
        float _2870 = (_2866 * _1905) + _1894;
        float _2871 = (_2866 * _1908) + _1898;
        float _2872 = (_2866 * _1911) + _1902;
        float _2873 = _2866 * 9.9999997473787516355514526367188e-05;
        float _2874 = (-1.0) - _2873;
        float _2876 = _2873 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2872 > _2876) || ((_2872 < _2874) || ((_2871 > _2876) || ((_2871 < _2874) || ((_2870 < _2874) || (_2870 > _2876))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3009 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2872, cbModelParam._m0[17u].z, fma(_2871, cbModelParam._m0[17u].y, _2870 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2872, cbModelParam._m0[18u].z, fma(_2871, cbModelParam._m0[18u].y, _2870 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2872, cbModelParam._m0[19u].z, fma(_2871, cbModelParam._m0[19u].y, _2870 * cbModelParam._m0[19u].x))), _1842);
            frontier_phi_37_64_ladder = _3009.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _3009.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _3009.x * cbModelParam._m0[1u].z;
        }
        _1930 = frontier_phi_37_64_ladder_2;
        _1932 = frontier_phi_37_64_ladder_1;
        _1934 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_914, _915, _916), _1842);
        _1930 = _1914.x * cbModelParam._m0[1u].z;
        _1932 = _1914.y * cbModelParam._m0[1u].z;
        _1934 = _1914.z * cbModelParam._m0[1u].z;
    }
    float _1946 = ((((1.0 - _935) * ((_922 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_935 * _922)) * _906;
    float _1947 = _1946 * ((cbModelParam._m0[1u].w * (_1930 - _1833)) + _1833);
    float _1948 = _1946 * ((cbModelParam._m0[1u].w * (_1932 - _1835)) + _1835);
    float _1949 = _1946 * ((cbModelParam._m0[1u].w * (_1934 - _1837)) + _1837);
    float _1952 = fma(_1949, cbSceneParam._m0[89u].z, fma(_1948, cbSceneParam._m0[89u].y, _1947 * cbSceneParam._m0[89u].x));
    float _1955 = fma(_1949, cbSceneParam._m0[90u].z, fma(_1948, cbSceneParam._m0[90u].y, _1947 * cbSceneParam._m0[90u].x));
    float _1958 = fma(_1949, cbSceneParam._m0[91u].z, fma(_1948, cbSceneParam._m0[91u].y, _1947 * cbSceneParam._m0[91u].x));
    float _1992 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2000 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2004 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2005 = _1992 / _2004;
    float _2006 = _1996 / _2004;
    float _2007 = _2000 / _2004;
    float _2154;
    float _2155;
    float _2156;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2034 = ((uint(_2007 > cbSceneParam._m0[59u].y) + uint(_2007 > cbSceneParam._m0[59u].x)) + uint(_2007 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2035 = _2034 + 43u;
        uint _2043 = _2034 + 44u;
        uint _2051 = _2034 + 45u;
        uint _2059 = _2034 + 46u;
        float _2070 = fma(_2004, cbSceneParam._m0[_2035].w, fma(_2000, cbSceneParam._m0[_2035].z, fma(_1996, cbSceneParam._m0[_2035].y, _1992 * cbSceneParam._m0[_2035].x)));
        float _2074 = fma(_2004, cbSceneParam._m0[_2043].w, fma(_2000, cbSceneParam._m0[_2043].z, fma(_1996, cbSceneParam._m0[_2043].y, _1992 * cbSceneParam._m0[_2043].x)));
        float _2082 = fma(_2004, cbSceneParam._m0[_2059].w, fma(_2000, cbSceneParam._m0[_2059].z, fma(_1996, cbSceneParam._m0[_2059].y, _1992 * cbSceneParam._m0[_2059].x)));
        float _2087 = cbSceneParam._m0[33u].z * _2082;
        float _2089 = cbSceneParam._m0[33u].w * _2082;
        float _2092 = fma(_2004, cbSceneParam._m0[_2051].w, fma(_2000, cbSceneParam._m0[_2051].z, fma(_1996, cbSceneParam._m0[_2051].y, _1992 * cbSceneParam._m0[_2051].x))) / _2082;
        float _2140 = (cbSceneParam._m0[33u].x - sqrt(((_2006 * _2006) + (_2005 * _2005)) + (_2007 * _2007))) * cbSceneParam._m0[33u].y;
        float _4260 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2147 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2087 + _2070) / _2082, (_2089 + _2074) / _2082), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2089 + _2070) / _2082, (_2074 - _2087) / _2082), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2070 - _2087) / _2082, (_2074 - _2089) / _2082), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2070 - _2089) / _2082, (_2087 + _2074) / _2082), _2092), 0.0)).x), vec4(0.25)));
        _2154 = 1.0 - (_2147 * cbSceneParam._m0[34u].x);
        _2155 = 1.0 - (_2147 * cbSceneParam._m0[34u].y);
        _2156 = 1.0 - (_2147 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2154 = 1.0;
        _2155 = 1.0;
        _2156 = 1.0;
    }
    float _2220;
    float _2222;
    float _2224;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2208 = fma(_2004, cbSceneParam._m0[63u].w, fma(_2000, cbSceneParam._m0[63u].z, fma(_1996, cbSceneParam._m0[63u].y, _1992 * cbSceneParam._m0[63u].x)));
        float _2209 = fma(_2004, cbSceneParam._m0[60u].w, fma(_2000, cbSceneParam._m0[60u].z, fma(_1996, cbSceneParam._m0[60u].y, _1992 * cbSceneParam._m0[60u].x))) / _2208;
        float _2210 = fma(_2004, cbSceneParam._m0[61u].w, fma(_2000, cbSceneParam._m0[61u].z, fma(_1996, cbSceneParam._m0[61u].y, _1992 * cbSceneParam._m0[61u].x))) / _2208;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_2209 >= cbSceneParam._m0[64u].x) && (_2210 >= cbSceneParam._m0[64u].y)) && (_2209 <= cbSceneParam._m0[64u].z)) && (_2210 <= cbSceneParam._m0[64u].w))
        {
            float _2497 = fma(_2004, cbSceneParam._m0[62u].w, fma(_2000, cbSceneParam._m0[62u].z, fma(_1996, cbSceneParam._m0[62u].y, _1992 * cbSceneParam._m0[62u].x))) / _2208;
            float _2501 = isnan(cbSceneParam._m0[41u].w) ? _2497 : (isnan(_2497) ? cbSceneParam._m0[41u].w : max(_2497, cbSceneParam._m0[41u].w));
            float _2544 = (cbSceneParam._m0[33u].x - sqrt(((_2006 * _2006) + (_2005 * _2005)) + (_2007 * _2007))) * cbSceneParam._m0[33u].y;
            float _4276 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
            float _2551 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2209, cbSceneParam._m0[33u].w + _2210), _2501), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2209, _2210 - cbSceneParam._m0[33u].z), _2501), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2209 - cbSceneParam._m0[33u].z, _2210 - cbSceneParam._m0[33u].w), _2501), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2209 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2210), _2501), 0.0)).x), vec4(0.25)));
            float _2555 = 1.0 - (_2551 * cbSceneParam._m0[34u].x);
            float _2556 = 1.0 - (_2551 * cbSceneParam._m0[34u].y);
            float _2557 = 1.0 - (_2551 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_2557) ? _2156 : (isnan(_2156) ? _2557 : min(_2156, _2557));
            frontier_phi_49_48_ladder_1 = isnan(_2556) ? _2155 : (isnan(_2155) ? _2556 : min(_2155, _2556));
            frontier_phi_49_48_ladder_2 = isnan(_2555) ? _2154 : (isnan(_2154) ? _2555 : min(_2154, _2555));
        }
        else
        {
            frontier_phi_49_48_ladder = _2156;
            frontier_phi_49_48_ladder_1 = _2155;
            frontier_phi_49_48_ladder_2 = _2154;
        }
        _2220 = frontier_phi_49_48_ladder_2;
        _2222 = frontier_phi_49_48_ladder_1;
        _2224 = frontier_phi_49_48_ladder;
    }
    else
    {
        _2220 = _2154;
        _2222 = _2155;
        _2224 = _2156;
    }
    uvec4 _2229 = floatBitsToUint(cbInstanceData._m0[_881 + 5u]);
    uint _2231 = _2229.x * 14u;
    uint _2232 = _2231 + 13u;
    float _2237 = _906 + (-1.0);
    float _2240 = (cbLight._m0[_2232].x * _2237) + 1.0;
    float _2241 = (cbLight._m0[_2232].y * _2237) + 1.0;
    uint _2242 = _2231 + 5u;
    float _2248 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
    uint _2252 = _2231 + 4u;
    float _2261 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
    uint _2265 = _2231 | 1u;
    float _2276 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_789, _790, _791));
    float _2279 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_789, _790, _791));
    float _4312 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _4323 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2284 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * 0.3183098733425140380859375;
    float _2286 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * 0.3183098733425140380859375;
    float _2293 = ((cbLight._m0[_2242].x * _2248) * _2286) + (((cbLight._m0[_2252].x * _2220) * _2261) * _2284);
    float _2294 = ((_2248 * cbLight._m0[_2242].y) * _2286) + (((cbLight._m0[_2252].y * _2222) * _2261) * _2284);
    float _2295 = ((_2248 * cbLight._m0[_2242].z) * _2286) + (((cbLight._m0[_2252].z * _2224) * _2261) * _2284);
    uint _2297 = _2231 + 8u;
    float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _792) * 0.949999988079071044921875);
    float _2311 = _2310 * _2310;
    float _2312 = cbLight._m0[_2231].x + _816;
    float _2313 = cbLight._m0[_2231].y + _817;
    float _2314 = cbLight._m0[_2231].z + _818;
    float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
    float _2319 = _2318 * _2312;
    float _2320 = _2318 * _2313;
    float _2321 = _2318 * _2314;
    float _2322 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2231].xyz));
    float _4334 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _4345 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _2326 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2327 = dot(vec3(_789, _790, _791), vec3(_2319, _2320, _2321));
    float _4356 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2331 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2319, _2320, _2321));
    float _4367 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2335 = _2311 * _2311;
    float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
    float _2350 = (exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2351 = 1.0 - _2311;
    float _2362 = (0.5 / (((_2326 * ((_2325 * _2351) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2351) + _2311) * _2325))) * _2325;
    float _4378 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
    uint _2378 = _2231 + 9u;
    float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _792) * 0.949999988079071044921875);
    float _2390 = _2389 * _2389;
    float _2391 = cbLight._m0[_2265].x + _816;
    float _2392 = cbLight._m0[_2265].y + _817;
    float _2393 = cbLight._m0[_2265].z + _818;
    float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
    float _2398 = _2397 * _2391;
    float _2399 = _2397 * _2392;
    float _2400 = _2397 * _2393;
    float _2401 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2265].xyz));
    float _4389 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2405 = dot(vec3(_789, _790, _791), vec3(_2398, _2399, _2400));
    float _4400 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2398, _2399, _2400));
    float _4411 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2390 * _2390;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2427 = 1.0 - _2390;
    float _2437 = (0.5 / (((_2326 * ((_2404 * _2427) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2427) + _2390) * _2404))) * _2404;
    float _4422 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2439 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    float _2449 = (((_2426 * cbLight._m0[_2378].x) * _2439) * _2248) + ((((cbLight._m0[_2297].x * _2220) * _2350) * _2364) * _2261);
    float _2450 = (((_2426 * cbLight._m0[_2378].y) * _2439) * _2248) + ((((cbLight._m0[_2297].y * _2222) * _2350) * _2364) * _2261);
    float _2451 = (((_2426 * cbLight._m0[_2378].z) * _2439) * _2248) + ((((cbLight._m0[_2297].z * _2224) * _2350) * _2364) * _2261);
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    if (_2229.y == 0u)
    {
        uvec4 _2569 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2570 = _2569.x;
        uint _2581 = uint((float(_2569.y) * floor(float(uint(cbSceneParam._m0[85u].y * _843) / _2570))) + floor(float(uint(cbSceneParam._m0[85u].x * _842) / _2570)));
        float _2591 = (log2(_2007 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2592 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        uint _2595 = uint(isnan(14.0) ? _2592 : (isnan(_2592) ? 14.0 : min(_2592, 14.0)));
        uvec4 _2600 = texelFetch(g_lightClusterGridBuffer, int(((_2595 << 2u) + (_2581 << 6u)) >> 2u));
        uint _2601 = _2600.x;
        uint _2602 = _2569.z;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        if (((((1u << ((_2602 >> 4u) & 15u)) + 4294967295u) & _2601) == 0u) || ((_2602 & 240u) == 0u))
        {
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
        }
        else
        {
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            uint _2927 = 0u;
            uint _2936;
            bool _2937;
            for (;;)
            {
                _2936 = texelFetch(g_lightClassification, int((((_2595 << 5u) + (_2581 << 9u)) + (_2927 << 2u)) >> 2u)).x;
                _2937 = _2936 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2937)
                {
                    frontier_phi_75_pred = _2924;
                    frontier_phi_75_pred_1 = _2926;
                    frontier_phi_75_pred_2 = _2925;
                    frontier_phi_75_pred_3 = _2923;
                    frontier_phi_75_pred_4 = _2922;
                    frontier_phi_75_pred_5 = _2921;
                }
                else
                {
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    uint _3093;
                    _3087 = _2921;
                    _3088 = _2922;
                    _3089 = _2923;
                    _3090 = _2924;
                    _3091 = _2925;
                    _3092 = _2926;
                    _3093 = _2936;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    for (;;)
                    {
                        uint _3097 = uint(findLSB(_3093)) + (_2927 << 5u);
                        uint _3094 = (_3093 + 4294967295u) & _3093;
                        uint _3099 = _3097 * 48u;
                        vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 3u)).x));
                        uint _3119 = (_3097 * 48u) + 4u;
                        vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 3u)).x));
                        uint _3138 = (_3097 * 48u) + 8u;
                        vec3 _3149 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x));
                        float _3153 = _3113.x - _2005;
                        float _3154 = _3113.y - _2006;
                        float _3155 = _3113.z - _2007;
                        float _3156 = dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155));
                        float _3159 = inversesqrt(_3156);
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3163 = dot(vec3(_862, _865, _868), vec3(_3160, _3161, _3162));
                        float _3168 = 1.0 - (_3156 * _3113.w);
                        float _4443 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3169 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3170 = sqrt(_3156) * _3132.w;
                        float _3173 = 1.39999997615814208984375 / (_3170 + 1.39999997615814208984375);
                        float _3174 = _3173 * _3173;
                        float _3177 = ((1.0 - _3174) * _3163) + _3174;
                        float _3180 = _3170 * _3170;
                        float _3184 = ((isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0))) * _3169) / ((_3180 * 0.699999988079071044921875) + 1.0);
                        float _3188 = (-0.0) - _2005;
                        float _3189 = (-0.0) - _2006;
                        float _3190 = (-0.0) - _2007;
                        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                        float _3195 = _3194 * _3188;
                        float _3196 = _3194 * _3189;
                        float _3197 = _3194 * _3190;
                        float _3204 = exp2(log2(1.0 / ((_3180 * 3.5) + 5.0)) * 0.25);
                        float _3205 = 1.0 - _922;
                        float _3212 = sqrt(1.0 - ((1.0 - (_3205 * _3205)) * (1.0 - (_3204 * _3204))));
                        float _3213 = _3212 * _3212;
                        float _3214 = _3213 * _3213;
                        float _3215 = _3195 + _3160;
                        float _3216 = _3196 + _3161;
                        float _3217 = _3197 + _3162;
                        float _3221 = inversesqrt(dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217)));
                        float _3225 = dot(vec3(_862, _865, _868), vec3(_3195, _3196, _3197));
                        float _4459 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3228 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3229 = dot(vec3(_862, _865, _868), vec3(_3221 * _3215, _3221 * _3216, _3221 * _3217));
                        float _4470 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3232 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3236 = ((_3232 * _3232) * (_3214 + (-1.0))) + 1.0;
                        float _3237 = _3173 * _3213;
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3163) + _3238;
                        float _4481 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3243 = 1.0 - _3213;
                        float _3253 = (0.5 / (((_3242 * ((_3228 * _3243) + _3213)) + 9.9999999392252902907785028219223e-09) + (((_3242 * _3243) + _3213) * _3228))) * _3242;
                        float _4492 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3264 = (((_3214 * 3.1415927410125732421875) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) / ((_3236 * _3236) * ((_3180 * 2.1991131305694580078125) + 3.141590118408203125))) * _3169;
                        _3017 = (_3184 * _3132.x) + _3090;
                        _3018 = (_3184 * _3132.y) + _3091;
                        _3019 = (_3184 * _3132.z) + _3092;
                        _3014 = (_3264 * _3149.x) + _3087;
                        _3015 = (_3264 * _3149.y) + _3088;
                        _3016 = (_3264 * _3149.z) + _3089;
                        if (_3094 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3094;
                        }
                    }
                    frontier_phi_75_pred = _3017;
                    frontier_phi_75_pred_1 = _3019;
                    frontier_phi_75_pred_2 = _3018;
                    frontier_phi_75_pred_3 = _3016;
                    frontier_phi_75_pred_4 = _3015;
                    frontier_phi_75_pred_5 = _3014;
                }
                _2742 = frontier_phi_75_pred;
                _2746 = frontier_phi_75_pred_1;
                _2744 = frontier_phi_75_pred_2;
                _2740 = frontier_phi_75_pred_3;
                _2738 = frontier_phi_75_pred_4;
                _2736 = frontier_phi_75_pred_5;
                uint _2928 = _2927 + 1u;
                if (_2928 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2921 = _2736;
                    _2922 = _2738;
                    _2923 = _2740;
                    _2924 = _2742;
                    _2925 = _2744;
                    _2926 = _2746;
                    _2927 = _2928;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
        }
        uvec4 _2749 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2750 = _2749.z;
        uint _2752 = (_2750 >> 8u) & 15u;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((4294967295u << _2752) & _2601) == 0u)
        {
            _2889 = _2735;
            _2891 = _2737;
            _2893 = _2739;
            _2895 = _2741;
            _2897 = _2743;
            _2899 = _2745;
        }
        else
        {
            float _2914 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
            float _2915 = _2914 * _2005;
            float _2916 = _2914 * _2006;
            float _2917 = _2914 * _2007;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2752 < ((_2750 >> 12u) & 15u))
            {
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _3070 = _2735;
                float _3071 = _2737;
                float _3072 = _2739;
                float _3073 = _2741;
                float _3074 = _2743;
                float _3075 = _2745;
                uint _3076 = _2752;
                uint _3085;
                bool _3086;
                for (;;)
                {
                    _3085 = texelFetch(g_lightClassification, int((((_2595 << 5u) + (_2581 << 9u)) + (_3076 << 2u)) >> 2u)).x;
                    _3086 = _3085 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_3086)
                    {
                        frontier_phi_86_pred = _3075;
                        frontier_phi_86_pred_1 = _3074;
                        frontier_phi_86_pred_2 = _3073;
                        frontier_phi_86_pred_3 = _3072;
                        frontier_phi_86_pred_4 = _3071;
                        frontier_phi_86_pred_5 = _3070;
                    }
                    else
                    {
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3291 = _3070;
                        float _3292 = _3071;
                        float _3293 = _3072;
                        float _3294 = _3073;
                        float _3295 = _3074;
                        float _3296 = _3075;
                        uint _3297 = _3085;
                        uint _3298;
                        vec4 _3323;
                        float _3324;
                        vec4 _3339;
                        vec3 _3351;
                        vec4 _3366;
                        vec4 _3381;
                        float _3427;
                        bool _3428;
                        for (;;)
                        {
                            uint _3308 = ((_3076 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3297));
                            _3298 = (_3297 + 4294967295u) & _3297;
                            uint _3310 = _3308 * 40u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            _3324 = _3323.w;
                            uint _3326 = (_3308 * 40u) + 4u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3341 = (_3308 * 40u) + 8u;
                            _3351 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x));
                            uint _3353 = (_3308 * 40u) + 16u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3308 * 40u) + 20u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3308 * 40u) + 24u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3402 = (_3308 * 40u) + 28u;
                            vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            _3427 = fma(_2007, _3415.z, fma(_2006, _3415.y, _3415.x * _2005)) + _3415.w;
                            _3428 = !((fma(_2007, _3396.z, fma(_2006, _3396.y, _3396.x * _2005)) + _3396.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3428)
                            {
                                float _3455 = _3323.x - _2005;
                                float _3456 = _3323.y - _2006;
                                float _3457 = _3323.z - _2007;
                                float _3458 = dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457));
                                float _3461 = inversesqrt(_3458);
                                float _3462 = _3461 * _3455;
                                float _3463 = _3461 * _3456;
                                float _3464 = _3461 * _3457;
                                float _3468 = 1.0 - (_3458 / (_3324 * _3324));
                                float _4503 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3473 = sqrt(_3458) * _3339.w;
                                float _3475 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                                float _3476 = _3475 * _3475;
                                float _3479 = ((1.0 - _3476) * dot(vec3(_3462, _3463, _3464), vec3(_862, _865, _868))) + _3476;
                                float _3482 = _3473 * _3473;
                                float _3486 = (fma(_2007, _3366.z, fma(_2006, _3366.y, _3366.x * _2005)) + _3366.w) / _3427;
                                float _3487 = (fma(_2007, _3381.z, fma(_2006, _3381.y, _3381.x * _2005)) + _3381.w) / _3427;
                                float _3491 = 1.0 - dot(vec2(_3486, _3487), vec2(_3486, _3487));
                                float _4519 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3493 = _3492 * (((isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0))) * _3469) / ((_3482 * 0.699999988079071044921875) + 1.0));
                                float _3505 = exp2(log2(1.0 / ((_3482 * 3.5) + 5.0)) * 0.25);
                                float _3506 = 1.0 - _922;
                                float _3513 = sqrt(1.0 - ((1.0 - (_3506 * _3506)) * (1.0 - (_3505 * _3505))));
                                float _3514 = _3513 * _3513;
                                float _3515 = _3514 * _3514;
                                float _3516 = _3462 - _2915;
                                float _3517 = _3463 - _2916;
                                float _3518 = _3464 - _2917;
                                float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                                float _3526 = dot(vec3(_862, _865, _868), vec3((-0.0) - _2915, (-0.0) - _2916, (-0.0) - _2917));
                                float _4530 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3529 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3530 = dot(vec3(_862, _865, _868), vec3(_3522 * _3516, _3522 * _3517, _3522 * _3518));
                                float _4541 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3533 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3537 = ((_3533 * _3533) * (_3515 + (-1.0))) + 1.0;
                                float _3538 = _3475 * _3514;
                                float _3539 = _3538 * _3538;
                                float _3545 = ((1.0 - _3539) * dot(vec3(_862, _865, _868), vec3(_3462, _3463, _3464))) + _3539;
                                float _4552 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3547 = 1.0 - _3514;
                                float _3557 = (0.5 / (((_3546 * ((_3529 * _3547) + _3514)) + 9.9999999392252902907785028219223e-09) + (((_3546 * _3547) + _3514) * _3529))) * _3546;
                                float _4563 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3567 = (_3492 * _3469) * (((_3515 * 3.1415927410125732421875) * (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) / ((_3537 * _3537) * ((_3482 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3493 * _3339.z;
                                frontier_phi_92_pred_1 = _3493 * _3339.y;
                                frontier_phi_92_pred_2 = _3493 * _3339.x;
                                frontier_phi_92_pred_3 = _3567 * _3351.z;
                                frontier_phi_92_pred_4 = _3567 * _3351.y;
                                frontier_phi_92_pred_5 = _3567 * _3351.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3576 = frontier_phi_92_pred;
                            _3575 = frontier_phi_92_pred_1;
                            _3574 = frontier_phi_92_pred_2;
                            _3573 = frontier_phi_92_pred_3;
                            _3572 = frontier_phi_92_pred_4;
                            _3571 = frontier_phi_92_pred_5;
                            _3281 = _3574 + _3294;
                            _3282 = _3575 + _3295;
                            _3283 = _3576 + _3296;
                            _3278 = _3571 + _3291;
                            _3279 = _3572 + _3292;
                            _3280 = _3573 + _3293;
                            if (_3298 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3298;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3283;
                        frontier_phi_86_pred_1 = _3282;
                        frontier_phi_86_pred_2 = _3281;
                        frontier_phi_86_pred_3 = _3280;
                        frontier_phi_86_pred_4 = _3279;
                        frontier_phi_86_pred_5 = _3278;
                    }
                    _2900 = frontier_phi_86_pred;
                    _2898 = frontier_phi_86_pred_1;
                    _2896 = frontier_phi_86_pred_2;
                    _2894 = frontier_phi_86_pred_3;
                    _2892 = frontier_phi_86_pred_4;
                    _2890 = frontier_phi_86_pred_5;
                    uint _3077 = _3076 + 1u;
                    if (_3077 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3070 = _2890;
                        _3071 = _2892;
                        _3072 = _2894;
                        _3073 = _2896;
                        _3074 = _2898;
                        _3075 = _2900;
                        _3076 = _3077;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2896;
                frontier_phi_66_67_ladder_1 = _2900;
                frontier_phi_66_67_ladder_2 = _2898;
                frontier_phi_66_67_ladder_3 = _2894;
                frontier_phi_66_67_ladder_4 = _2892;
                frontier_phi_66_67_ladder_5 = _2890;
            }
            else
            {
                frontier_phi_66_67_ladder = _2741;
                frontier_phi_66_67_ladder_1 = _2745;
                frontier_phi_66_67_ladder_2 = _2743;
                frontier_phi_66_67_ladder_3 = _2739;
                frontier_phi_66_67_ladder_4 = _2737;
                frontier_phi_66_67_ladder_5 = _2735;
            }
            _2889 = frontier_phi_66_67_ladder_5;
            _2891 = frontier_phi_66_67_ladder_4;
            _2893 = frontier_phi_66_67_ladder_3;
            _2895 = frontier_phi_66_67_ladder;
            _2897 = frontier_phi_66_67_ladder_2;
            _2899 = frontier_phi_66_67_ladder_1;
        }
        float _2904 = isnan(1.0) ? _906 : (isnan(_906) ? 1.0 : min(_906, 1.0));
        _2614 = (_2904 * _2895) + _2293;
        _2616 = (_2904 * _2897) + _2294;
        _2618 = (_2904 * _2899) + _2295;
        _2620 = ((_2889 * 0.039999999105930328369140625) * _2904) + _2449;
        _2622 = ((_2891 * 0.039999999105930328369140625) * _2904) + _2450;
        _2624 = ((_2893 * 0.039999999105930328369140625) * _2904) + _2451;
    }
    else
    {
        _2614 = _2293;
        _2616 = _2294;
        _2618 = _2295;
        _2620 = _2449;
        _2622 = _2450;
        _2624 = _2451;
    }
    uint _2630 = _882 + uint(cbMatDynParam._m0[0u].w);
    float _2636 = (cbSceneParam._m0[72u].y * ((_756 * ((_747 - _709) - (_747 * _720))) + _709)) * cbInstanceData._m0[_2630].x;
    float _2637 = (cbSceneParam._m0[72u].y * ((_756 * ((_748 - _710) - (_748 * _720))) + _710)) * cbInstanceData._m0[_2630].y;
    float _2638 = (((_756 * ((_749 - _711) - (_749 * _720))) + _711) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2630].z;
    float _4579 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4590 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4601 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _2655 = (((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2614 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _906))) + ((_2620 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1742)) * cbPerFrame._m0[3u].x)) + _2636;
    float _2657 = (_2637 + ((_2622 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1742)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2616 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _906)));
    float _2659 = (_2638 + ((_2624 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1742)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2618 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _906)));
    float _2660 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2661 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2662 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2668 = cbMtdParam._m0[2u].x * _2636;
    float _2669 = cbMtdParam._m0[2u].y * _2637;
    float _2670 = cbMtdParam._m0[2u].z * _2638;
    float _4627 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2672 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    uint _2673 = _881 + 6u;
    float _2681 = _842 / cbSceneParam._m0[86u].x;
    float _2682 = _843 / cbSceneParam._m0[86u].y;
    vec4 _2696 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2681, _2682, (log2((isnan(cbSceneParam._m0[77u].w) ? _811 : (isnan(_811) ? cbSceneParam._m0[77u].w : min(_811, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2698 = _2696.x;
    float _2699 = _2696.y;
    float _2700 = _2696.z;
    float _2701 = _2696.w;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    if (_811 > cbSceneParam._m0[78u].w)
    {
        float _2760 = isnan(_811) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _811 : min(cbSceneParam._m0[80u].w, _811));
        float _2761 = _2760 / _811;
        float _2772 = _2761 * _284;
        float _2773 = _285 * _2761;
        float _2774 = (-0.0) - _2773;
        float _2775 = _2761 * _286;
        float _2777 = (cbSceneParam._m0[77u].w * _2774) / _2760;
        float _2778 = _2777 + cbSceneParam._m0[79u].w;
        float _2779 = cbSceneParam._m0[79u].w - _2773;
        float _2785 = sqrt(((_2772 * _2772) + (_2773 * _2773)) + (_2775 * _2775));
        float _2788 = (1.0 - (cbSceneParam._m0[77u].w / _2760)) * _2785;
        float _2793 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2795 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3027;
        if (abs((_2774 - _2777) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3027 = ((((_2778 > 0.0) ? exp2(_2793 * _2778) : (2.0 - exp2(_2795 * _2778))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2788;
        }
        else
        {
            float _2950 = 1.0 / cbSceneParam._m0[80u].x;
            float _2951 = isnan(_2779) ? _2778 : (isnan(_2778) ? _2779 : max(_2778, _2779));
            float _2952 = isnan(_2779) ? _2778 : (isnan(_2778) ? _2779 : min(_2778, _2779));
            float _2961 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : min(_2951, 0.0));
            float _2962 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : min(_2952, 0.0));
            _3027 = ((abs(_2785 / _2774) * cbSceneParam._m0[80u].y) * ((((_2961 - _2962) * 2.0) - ((exp2(_2793 * (isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0)))) - exp2(_2793 * (isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))))) * _2950)) - ((exp2(_2795 * _2961) - exp2(_2795 * _2962)) * _2950))) + (_2788 * cbSceneParam._m0[80u].z);
        }
        vec4 _3029 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2681, _2682, 1.0), 0.0);
        float _3038 = exp2((_3027 * (-1.44269502162933349609375)) * (1.0 - _3029.w));
        float _3039 = log2(_3038);
        float _3055 = log2(_2701);
        _2797 = (exp2(_3055 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].x)) * _3029.x) / cbSceneParam._m0[78u].x)) + _2698;
        _2799 = (exp2(_3055 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].y)) * _3029.y) / cbSceneParam._m0[78u].y)) + _2699;
        _2801 = (exp2(_3055 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].z)) * _3029.z) / cbSceneParam._m0[78u].z)) + _2700;
        _2803 = _3038 * _2701;
    }
    else
    {
        _2797 = _2698;
        _2799 = _2699;
        _2801 = _2700;
        _2803 = _2701;
    }
    bool _3065;
    vec4 _2812;
    vec4 _2834;
    float _2836;
    float _2840;
    float _2841;
    float _2842;
    float _2845;
    float _2848;
    float _2851;
    float _2852;
    bool _2862;
    for (;;)
    {
        _2812 = cbMatDynParam._m0[0u];
        float _2814 = roundEven(_2812.y);
        bool _2815 = _2814 == 3.0;
        float _2816 = log2(_2803);
        float _2820 = exp2(_2816 * cbSceneParam._m0[78u].x);
        float _2821 = exp2(_2816 * cbSceneParam._m0[78u].y);
        float _2822 = exp2(_2816 * cbSceneParam._m0[78u].z);
        float _2823 = _2820 * _2660;
        float _2824 = _2821 * _2661;
        float _2825 = _2822 * _2662;
        float _2832 = _825 + (-0.5);
        _2834 = cbMtdParam._m0[1u];
        _2836 = _2834.y * _2832;
        float _2839 = (_2814 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2840 = _2839 * (_2815 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2797)));
        _2841 = _2839 * (_2815 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2799)));
        _2842 = _2839 * (_2815 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2801)));
        _2845 = ((_2668 * _2672) * _2820) * _2839;
        _2848 = ((_2669 * _2672) * _2821) * _2839;
        _2851 = ((_2670 * _2672) * _2822) * _2839;
        _2852 = _2832 * 0.999000012874603271484375;
        _2862 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2862)
        {
            if ((cbInstanceData._m0[_881 + 7u].x + _2852) < 0.5)
            {
                _3065 = true;
                break;
            }
        }
        uint _2985 = _882 + uint(_2812.w);
        if ((cbInstanceData._m0[_2985].w < 1.0) && ((cbInstanceData._m0[_2985].w + _2852) < 0.5))
        {
            _3065 = true;
            break;
        }
        if ((_2836 + 1.0) < _2834.x)
        {
            _3065 = true;
            break;
        }
        _3065 = false;
        break;
    }
    float _3269;
    if (_3065)
    {
        discard_state = true;
        _3269 = 0.0;
    }
    else
    {
        _3269 = cbInstanceData._m0[_2673].w;
    }
    SV_Target.x = _2840;
    SV_Target.y = _2841;
    SV_Target.z = _2842;
    SV_Target.w = _3269;
    SV_Target_1.x = _2845;
    SV_Target_1.y = _2848;
    SV_Target_1.z = _2851;
    SV_Target_1.w = cbInstanceData._m0[_2673].w;
    discard_exit();
}


