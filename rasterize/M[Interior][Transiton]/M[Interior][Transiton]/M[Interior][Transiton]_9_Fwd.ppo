#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _448;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    vec4 _292 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _295 = _292.x;
    vec4 _313 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _330 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _295) + cbMtdParam._m0[12u].x) * _313.x;
    float _332 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _295) + cbMtdParam._m0[12u].y) * _313.y;
    float _334 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _295) + cbMtdParam._m0[12u].z) * _313.z;
    vec4 _361 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _376 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _383 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _395 = cbMtdParam._m0[28u].z + _276;
    float _396 = cbMtdParam._m0[28u].w + _277;
    float _397 = cbMtdParam._m0[29u].x + _278;
    float _411 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_376 * _206, _376 * _207, _376 * _208));
    float _412 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_383 * _220, _383 * _221, _383 * _222));
    float _413 = (-0.0) - dot(vec3(_395, _396, _397), vec3((-0.0) - _213, (-0.0) - _214, (-0.0) - _215));
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _418 = _417 * _413;
    float _423 = ((cbMtdParam._m0[25u].y * _411) * _417) + (((_361.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _424 = ((cbMtdParam._m0[25u].z * _412) * _417) + (((_361.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _427 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _428 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _446;
    float _449;
    float _451;
    if (_423 > 0.0)
    {
        float _432 = (1.0 - _427) / _423;
        _446 = _432;
        _449 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_432 * _418)) * 0.16666667163372039794921875;
        _451 = (fract((_432 * _424) + _428) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_423 < 0.0)
        {
            float _447 = ((-0.0) - _427) / _423;
            frontier_phi_3_2_ladder = (fract((_447 * _424) + _428) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _447;
            frontier_phi_3_2_ladder_2 = (fract(_447 * _418) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _448;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _446 = frontier_phi_3_2_ladder_1;
        _449 = frontier_phi_3_2_ladder_2;
        _451 = frontier_phi_3_2_ladder;
    }
    float _477;
    float _479;
    float _481;
    if (_424 > 0.0)
    {
        float _464 = (1.0 - _428) / _424;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_464 < _446)
        {
            frontier_phi_8_5_ladder = (fract((_464 * _423) + _427) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _464;
            frontier_phi_8_5_ladder_2 = (fract(_464 * _418) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _449;
            frontier_phi_8_5_ladder_1 = _446;
            frontier_phi_8_5_ladder_2 = _451;
        }
        _477 = frontier_phi_8_5_ladder_1;
        _479 = frontier_phi_8_5_ladder;
        _481 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_424 < 0.0)
        {
            float _478 = ((-0.0) - _428) / _424;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_478 < _446)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_478 * _423) + _427) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _478;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_478 * _418) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _449;
                frontier_phi_8_6_ladder_9_ladder_1 = _446;
                frontier_phi_8_6_ladder_9_ladder_2 = _451;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _449;
            frontier_phi_8_6_ladder_1 = _446;
            frontier_phi_8_6_ladder_2 = _451;
        }
        _477 = frontier_phi_8_6_ladder_1;
        _479 = frontier_phi_8_6_ladder;
        _481 = frontier_phi_8_6_ladder_2;
    }
    float _485 = (_418 > 0.0) ? (cbMtdParam._m0[20u].z / _418) : 5000.0;
    float _498;
    float _499;
    if (_485 < _477)
    {
        _498 = ((_427 + cbMtdParam._m0[22u].x) + (_485 * _423)) * 0.16666667163372039794921875;
        _499 = (((_485 * _424) + _428) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _498 = _479;
        _499 = _481;
    }
    vec4 _501 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_498, _499));
    float _506 = _501.x * _295;
    float _507 = _501.y * _295;
    float _508 = _501.z * _295;
    vec4 _521 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _521.z;
    float _528 = (_521.x * 2.0) + (-1.0);
    float _529 = (_521.y * 2.0) + (-1.0);
    float _530 = dot(vec2(_528, _529), vec2(_528, _529));
    float _3361 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _535 = sqrt(1.0 - (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))));
    float _547 = (cbMtdParam._m0[19u].y * _506) * cbMtdParam._m0[16u].x;
    float _549 = (cbMtdParam._m0[19u].y * _507) * cbMtdParam._m0[16u].y;
    float _551 = (cbMtdParam._m0[19u].y * _508) * cbMtdParam._m0[16u].z;
    vec4 _578 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _583 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _589 = ((_578.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _591 = (-0.0) - (cbMtdParam._m0[21u].x * ((_578.x * 0.5) + (-0.25)));
    float _592 = fract(_583);
    float _594 = fract(_583 + 0.5);
    vec4 _621 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_592 * _591) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_589 * _592) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _623 = _621.x;
    float _629 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_594 * _591) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_589 * _594) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _623) * abs((_592 * 2.0) + (-1.0))) + _623;
    float _640 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _644 = fract(abs(_640));
    float _651 = sin(cbMtdParam._m0[21u].z);
    float _652 = cos(cbMtdParam._m0[21u].z);
    float _653 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _654 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _679 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_654, (-0.0) - _651, _652 * _653) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_654, _652, _653 * _651) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_640 >= ((-0.0) - _640)) ? _644 : ((-0.0) - _644)) * cbMtdParam._m0[18u].z) - _629)) + cbMtdParam._m0[18u].w;
    float _680 = ceil(_679);
    float _3372 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _701 = ((((cbMtdParam._m0[21u].w * _506) * cbMtdParam._m0[15u].x) - _547) * _681) + _547;
    float _702 = ((((cbMtdParam._m0[21u].w * _507) * cbMtdParam._m0[15u].y) - _549) * _681) + _549;
    float _703 = ((((cbMtdParam._m0[21u].w * _508) * cbMtdParam._m0[15u].z) - _551) * _681) + _551;
    float _707 = abs(cbMtdParam._m0[20u].w * _679);
    float _711 = (((_707 * cbMtdParam._m0[18u].y) - _629) * _707) + _629;
    float _3383 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _712 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    vec4 _724 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _739 = (cbMtdParam._m0[14u].x * _724.x) * cbMtdParam._m0[19u].x;
    float _740 = (cbMtdParam._m0[14u].y * _724.y) * cbMtdParam._m0[19u].x;
    float _741 = (cbMtdParam._m0[14u].z * _724.z) * cbMtdParam._m0[19u].x;
    float _748 = exp2(log2(_712) * cbMtdParam._m0[20u].x);
    float _770 = fma(_535, _213, fma(_529, _220, _528 * _206));
    float _773 = fma(_535, _214, fma(_529, _221, _528 * _207));
    float _776 = fma(_535, _215, fma(_529, _222, _528 * _208));
    float _780 = inversesqrt(dot(vec3(_770, _773, _776), vec3(_770, _773, _776)));
    float _781 = _780 * _770;
    float _782 = _780 * _773;
    float _783 = _780 * _776;
    float _3394 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _784 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _3405 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3416 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3427 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _803 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _807 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _808 = _276 * _807;
    float _809 = _277 * _807;
    float _810 = _278 * _807;
    float _816 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _817 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _836 = fma(_783, cbSceneParam._m0[5u].z, fma(_782, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _781));
    float _839 = fma(_783, cbSceneParam._m0[6u].z, fma(_782, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _781));
    float _842 = fma(_783, cbSceneParam._m0[7u].z, fma(_782, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _781));
    uint _855 = uint(roundEven(NORMAL.w)) * 13u;
    uint _856 = _855 + 9u;
    uint _857 = _856 + uint(cbMatDynParam._m0[0u].w);
    float _863 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * cbInstanceData._m0[_857].x;
    float _864 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)))) * cbInstanceData._m0[_857].y;
    float _865 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0)))) * cbInstanceData._m0[_857].z;
    float _3438 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    vec4 _877 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _816, cbSceneParam._m0[86u].y * _817));
    float _880 = _877.x * TEXCOORD_4;
    float _881 = dot(vec3(_781, _782, _783), vec3(_808, _809, _810));
    float _884 = _881 * 2.0;
    float _888 = (_884 * _781) - _808;
    float _889 = (_884 * _782) - _809;
    float _890 = (_884 * _783) - _810;
    float _894 = abs(dot(vec3(_808, _809, _810), vec3(_781, _782, _783)));
    float _3471 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _896 = sqrt(_784);
    float _909 = exp2((_896 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_896 * 3.0));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _982 = fma(_949, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941));
        float _986 = fma(_949, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941));
        float _990 = fma(_949, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941));
        float _1014 = _941 + _781;
        float _1015 = _945 + _782;
        float _1016 = _949 + _783;
        float _1026 = fma(_1016, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014)) - _982;
        float _1027 = fma(_1016, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014)) - _986;
        float _1028 = fma(_1016, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014)) - _990;
        float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
        float _1045 = ((_1032 * _1026) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_982 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1032 * _1027) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_986 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1032 * _1028) / cbModelParam._m0[34u].z) + ((((((_990 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        float _1084 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1050.x + (-0.5));
        float _1086 = _1084 * (_1050.y + (-0.5));
        float _1087 = _1084 * (_1050.z + (-0.5));
        float _1094 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1057.x + (-0.5));
        float _1096 = _1094 * (_1057.y + (-0.5));
        float _1097 = _1094 * (_1057.z + (-0.5));
        float _1104 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1064.x + (-0.5));
        float _1106 = _1104 * (_1064.y + (-0.5));
        float _1107 = _1104 * (_1064.z + (-0.5));
        float _1114 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1071.x + (-0.5));
        float _1116 = _1114 * (_1071.y + (-0.5));
        float _1117 = _1114 * (_1071.z + (-0.5));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = _1085 * 0.5;
        float _1122 = _1095 * 0.5;
        float _1123 = _1105 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1138 = (dot(vec3(_781, _782, _783), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1148 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3519 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1150 + 1.0))) + _1155) * _1118;
        float _1165 = _1086 * 0.5;
        float _1166 = _1096 * 0.5;
        float _1167 = _1106 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_781, _782, _783), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3552 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1192 + 1.0))) + _1197) * _1119;
        float _1207 = _1087 * 0.5;
        float _1208 = _1097 * 0.5;
        float _1209 = _1107 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_781, _782, _783), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3585 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1234 + 1.0))) + _1239) * _1120;
        _1256 = _1087;
        _1257 = _1086;
        _1258 = _1085;
        _1259 = _1097;
        _1260 = _1096;
        _1261 = _1095;
        _1262 = _1107;
        _1263 = _1106;
        _1264 = _1105;
        _1265 = _1120;
        _1266 = _1119;
        _1267 = _1118;
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _448;
        _1257 = _448;
        _1258 = _448;
        _1259 = _448;
        _1260 = _448;
        _1261 = _448;
        _1262 = _448;
        _1263 = _448;
        _1264 = _448;
        _1265 = _448;
        _1266 = _448;
        _1267 = _448;
        _1268 = 0.0;
        _1269 = 0.0;
        _1270 = 0.0;
    }
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1295 = fma(_949, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941));
        float _1299 = fma(_949, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941));
        float _1303 = fma(_949, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941));
        float _1326 = _941 + _781;
        float _1327 = _945 + _782;
        float _1328 = _949 + _783;
        float _1338 = fma(_1328, cbModelParam._m0[30u].z, fma(_1327, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1326)) - _1295;
        float _1339 = fma(_1328, cbModelParam._m0[31u].z, fma(_1327, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1326)) - _1299;
        float _1340 = fma(_1328, cbModelParam._m0[32u].z, fma(_1327, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1326)) - _1303;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1295 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1299 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[35u].z) + ((((((_1303 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1394 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1361.x + (-0.5));
        float _1396 = _1394 * (_1361.y + (-0.5));
        float _1397 = _1394 * (_1361.z + (-0.5));
        float _1404 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1368.x + (-0.5));
        float _1406 = _1404 * (_1368.y + (-0.5));
        float _1407 = _1404 * (_1368.z + (-0.5));
        float _1414 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1375.x + (-0.5));
        float _1416 = _1414 * (_1375.y + (-0.5));
        float _1417 = _1414 * (_1375.z + (-0.5));
        float _1424 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1382.x + (-0.5));
        float _1426 = _1424 * (_1382.y + (-0.5));
        float _1427 = _1424 * (_1382.z + (-0.5));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = _1395 * 0.5;
        float _1432 = _1405 * 0.5;
        float _1433 = _1415 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_781, _782, _783), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3648 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1458 + 1.0))) + _1463) * _1428;
        float _1473 = _1396 * 0.5;
        float _1474 = _1406 * 0.5;
        float _1475 = _1416 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_781, _782, _783), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _3681 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1500 + 1.0))) + _1505) * _1429;
        float _1515 = _1397 * 0.5;
        float _1516 = _1407 * 0.5;
        float _1517 = _1417 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_781, _782, _783), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _3714 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1542 + 1.0))) + _1547) * _1430;
        _1564 = _1397;
        _1565 = _1396;
        _1566 = _1395;
        _1567 = _1407;
        _1568 = _1406;
        _1569 = _1405;
        _1570 = _1417;
        _1571 = _1416;
        _1572 = _1415;
        _1573 = _1430;
        _1574 = _1429;
        _1575 = _1428;
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _448;
        _1565 = _448;
        _1566 = _448;
        _1567 = _448;
        _1568 = _448;
        _1569 = _448;
        _1570 = _448;
        _1571 = _448;
        _1572 = _448;
        _1573 = _448;
        _1574 = _448;
        _1575 = _448;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1268)) + _1268;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1269)) + _1269;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1270)) + _1270;
    float _1611 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1588));
    float _1632 = _888 * 0.5;
    float _1633 = _889 * 0.5;
    float _1634 = _890 * 0.5;
    float _1635 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1638 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1641 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1675;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1648 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1652 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1656 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1663 = dot(vec4(cbModelParam._m0[39u]), vec4(_1632, _1633, _1634, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1686;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1677 = dot(vec4(cbModelParam._m0[40u]), vec4(_1632, _1633, _1634, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1690 = (_1686 * cbModelParam._m0[1u].x) + (_1675 * (1.0 - cbModelParam._m0[1u].x));
    float _1700 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _784);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1700 : min(cbModelParam._m0[25u].z, _1700));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1748 = fma(_949, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941)) + cbModelParam._m0[13u].w;
        float _1752 = fma(_949, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941)) + cbModelParam._m0[14u].w;
        float _1756 = fma(_949, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941)) + cbModelParam._m0[15u].w;
        float _1759 = fma(_890, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888));
        float _1762 = fma(_890, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888));
        float _1765 = fma(_890, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888));
        float _1793;
        if (_1759 > 0.0)
        {
            _1793 = abs((1.0 - _1748) / _1759);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1748 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1793 = frontier_phi_26_24_ladder;
        }
        float _2138;
        if (_1762 > 0.0)
        {
            _2138 = abs((1.0 - _1752) / _1762);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1752 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _2138 = frontier_phi_35_31_ladder;
        }
        float _2472;
        if (_1765 > 0.0)
        {
            _2472 = abs((1.0 - _1756) / _1765);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1756 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2472 = frontier_phi_49_42_ladder;
        }
        float _2474 = isnan(_2138) ? _1793 : (isnan(_1793) ? _2138 : min(_1793, _2138));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1759) + _1748;
        float _2480 = (_2475 * _1762) + _1752;
        float _2481 = (_2475 * _1765) + _1756;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2482;
        float _2485 = _2482 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2481 > _2485) || ((_2481 < _2483) || ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 < _2483) || (_2479 > _2485))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2607 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2481, cbModelParam._m0[9u].z, fma(_2480, cbModelParam._m0[9u].y, _2479 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2481, cbModelParam._m0[10u].z, fma(_2480, cbModelParam._m0[10u].y, _2479 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2481, cbModelParam._m0[11u].z, fma(_2480, cbModelParam._m0[11u].y, _2479 * cbModelParam._m0[11u].x))), _1701);
            frontier_phi_25_49_ladder = _2607.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2607.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2607.x * cbModelParam._m0[1u].y;
        }
        _1781 = frontier_phi_25_49_ladder_2;
        _1783 = frontier_phi_25_49_ladder_1;
        _1785 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_888, _889, _890), _1701);
        _1781 = _1769.x * cbModelParam._m0[1u].y;
        _1783 = _1769.y * cbModelParam._m0[1u].y;
        _1785 = _1769.z * cbModelParam._m0[1u].y;
    }
    float _1789 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _784);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1789 : min(cbModelParam._m0[25u].w, _1789));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1842 = fma(_949, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941)) + cbModelParam._m0[21u].w;
        float _1846 = fma(_949, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941)) + cbModelParam._m0[22u].w;
        float _1850 = fma(_949, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941)) + cbModelParam._m0[23u].w;
        float _1853 = fma(_890, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888));
        float _1856 = fma(_890, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888));
        float _1859 = fma(_890, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888));
        float _2143;
        if (_1853 > 0.0)
        {
            _2143 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2143 = frontier_phi_37_33_ladder;
        }
        float _2498;
        if (_1856 > 0.0)
        {
            _2498 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2498 = frontier_phi_51_44_ladder;
        }
        float _2667;
        if (_1859 > 0.0)
        {
            _2667 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2667 = frontier_phi_65_60_ladder;
        }
        float _2669 = isnan(_2498) ? _2143 : (isnan(_2143) ? _2498 : min(_2143, _2498));
        float _2670 = isnan(_2667) ? _2669 : (isnan(_2669) ? _2667 : min(_2669, _2667));
        float _2674 = (_2670 * _1853) + _1842;
        float _2675 = (_2670 * _1856) + _1846;
        float _2676 = (_2670 * _1859) + _1850;
        float _2677 = _2670 * 9.9999997473787516355514526367188e-05;
        float _2678 = (-1.0) - _2677;
        float _2680 = _2677 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2676 > _2680) || ((_2676 < _2678) || ((_2675 > _2680) || ((_2675 < _2678) || ((_2674 < _2678) || (_2674 > _2680))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2909 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2676, cbModelParam._m0[17u].z, fma(_2675, cbModelParam._m0[17u].y, _2674 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2676, cbModelParam._m0[18u].z, fma(_2675, cbModelParam._m0[18u].y, _2674 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2676, cbModelParam._m0[19u].z, fma(_2675, cbModelParam._m0[19u].y, _2674 * cbModelParam._m0[19u].x))), _1790);
            frontier_phi_34_65_ladder = _2909.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2909.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2909.z * cbModelParam._m0[1u].z;
        }
        _1878 = frontier_phi_34_65_ladder_1;
        _1880 = frontier_phi_34_65_ladder;
        _1882 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_888, _889, _890), _1790);
        _1878 = _1862.x * cbModelParam._m0[1u].z;
        _1880 = _1862.y * cbModelParam._m0[1u].z;
        _1882 = _1862.z * cbModelParam._m0[1u].z;
    }
    float _1894 = ((((1.0 - _909) * ((_896 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_909 * _896)) * _880;
    float _1895 = _1894 * ((cbModelParam._m0[1u].w * (_1878 - _1781)) + _1781);
    float _1896 = _1894 * ((cbModelParam._m0[1u].w * (_1880 - _1783)) + _1783);
    float _1897 = _1894 * ((cbModelParam._m0[1u].w * (_1882 - _1785)) + _1785);
    float _1900 = fma(_1897, cbSceneParam._m0[89u].z, fma(_1896, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1903 = fma(_1897, cbSceneParam._m0[90u].z, fma(_1896, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1906 = fma(_1897, cbSceneParam._m0[91u].z, fma(_1896, cbSceneParam._m0[91u].y, _1895 * cbSceneParam._m0[91u].x));
    uvec4 _1916 = floatBitsToUint(cbInstanceData._m0[_855 + 5u]);
    uint _1918 = _1916.x * 14u;
    uint _1919 = _1918 + 13u;
    float _1924 = _880 + (-1.0);
    float _1927 = (cbLight._m0[_1919].x * _1924) + 1.0;
    float _1928 = (cbLight._m0[_1919].y * _1924) + 1.0;
    uint _1929 = _1918 + 5u;
    float _1935 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
    uint _1939 = _1918 + 4u;
    float _1945 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
    uint _1949 = _1918 | 1u;
    float _1960 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_781, _782, _783));
    float _1963 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_781, _782, _783));
    float _3850 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _3861 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1968 = (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * 0.3183098733425140380859375;
    float _1970 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.3183098733425140380859375;
    float _1977 = ((cbLight._m0[_1929].x * _1935) * _1970) + ((cbLight._m0[_1939].x * _1945) * _1968);
    float _1978 = ((_1935 * cbLight._m0[_1929].y) * _1970) + ((_1945 * cbLight._m0[_1939].y) * _1968);
    float _1979 = ((_1935 * cbLight._m0[_1929].z) * _1970) + ((_1945 * cbLight._m0[_1939].z) * _1968);
    uint _1981 = _1918 + 8u;
    float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _784) * 0.949999988079071044921875);
    float _1995 = _1994 * _1994;
    float _1996 = cbLight._m0[_1918].x + _808;
    float _1997 = cbLight._m0[_1918].y + _809;
    float _1998 = cbLight._m0[_1918].z + _810;
    float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
    float _2003 = _2002 * _1996;
    float _2004 = _2002 * _1997;
    float _2005 = _2002 * _1998;
    float _2006 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_1918].xyz));
    float _3872 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _2010 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _2011 = dot(vec3(_781, _782, _783), vec3(_2003, _2004, _2005));
    float _3894 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_2003, _2004, _2005));
    float _3905 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1995 * _1995;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2034 = (exp2(log2(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2035 = 1.0 - _1995;
    float _2046 = (0.5 / (((_2010 * ((_2009 * _2035) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2035) + _1995) * _2009))) * _2009;
    float _3916 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2048 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    uint _2059 = _1918 + 9u;
    float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _784) * 0.949999988079071044921875);
    float _2071 = _2070 * _2070;
    float _2072 = cbLight._m0[_1949].x + _808;
    float _2073 = cbLight._m0[_1949].y + _809;
    float _2074 = cbLight._m0[_1949].z + _810;
    float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
    float _2079 = _2078 * _2072;
    float _2080 = _2078 * _2073;
    float _2081 = _2078 * _2074;
    float _2082 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_1949].xyz));
    float _3927 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _2086 = dot(vec3(_781, _782, _783), vec3(_2079, _2080, _2081));
    float _3938 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _2090 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2079, _2080, _2081));
    float _3949 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2094 = _2071 * _2071;
    float _2098 = ((_2089 * _2089) * (_2094 + (-1.0))) + 1.0;
    float _2107 = (exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2108 = 1.0 - _2071;
    float _2118 = (0.5 / (((_2010 * ((_2085 * _2108) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2108) + _2071) * _2085))) * _2085;
    float _3960 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2120 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_2094 / ((_2098 * _2098) * 3.141590118408203125));
    float _2130 = (((_2107 * cbLight._m0[_2059].x) * _2120) * _1935) + (((_2034 * cbLight._m0[_1981].x) * _2048) * _1945);
    float _2131 = (((_2107 * cbLight._m0[_2059].y) * _2120) * _1935) + (((_2034 * cbLight._m0[_1981].y) * _2048) * _1945);
    float _2132 = (((_2107 * cbLight._m0[_2059].z) * _2120) * _1935) + (((_2034 * cbLight._m0[_1981].z) * _2048) * _1945);
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    if (_1916.y == 0u)
    {
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2187;
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2187;
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2187;
        uvec4 _2202 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2203 = _2202.x;
        uint _2214 = uint((float(_2202.y) * floor(float(uint(cbSceneParam._m0[85u].y * _817) / _2203))) + floor(float(uint(cbSceneParam._m0[85u].x * _816) / _2203)));
        float _2224 = (log2(_2190 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2225 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        uint _2228 = uint(isnan(14.0) ? _2225 : (isnan(_2225) ? 14.0 : min(_2225, 14.0)));
        uvec4 _2233 = texelFetch(g_lightClusterGridBuffer, int(((_2228 << 2u) + (_2214 << 6u)) >> 2u));
        uint _2234 = _2233.x;
        uint _2235 = _2202.z;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        if (((((1u << ((_2235 >> 4u) & 15u)) + 4294967295u) & _2234) == 0u) || ((_2235 & 240u) == 0u))
        {
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
        }
        else
        {
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2362;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            uint _2541 = 0u;
            uint _2550;
            bool _2551;
            for (;;)
            {
                _2550 = texelFetch(g_lightClassification, int((((_2228 << 5u) + (_2214 << 9u)) + (_2541 << 2u)) >> 2u)).x;
                _2551 = _2550 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2551)
                {
                    frontier_phi_62_pred = _2536;
                    frontier_phi_62_pred_1 = _2535;
                    frontier_phi_62_pred_2 = _2537;
                    frontier_phi_62_pred_3 = _2540;
                    frontier_phi_62_pred_4 = _2539;
                    frontier_phi_62_pred_5 = _2538;
                }
                else
                {
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    uint _2716;
                    _2710 = _2535;
                    _2711 = _2536;
                    _2712 = _2537;
                    _2713 = _2538;
                    _2714 = _2539;
                    _2715 = _2540;
                    _2716 = _2550;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    for (;;)
                    {
                        uint _2720 = uint(findLSB(_2716)) + (_2541 << 5u);
                        uint _2717 = (_2716 + 4294967295u) & _2716;
                        uint _2722 = _2720 * 48u;
                        vec4 _2736 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2722)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 3u)).x));
                        uint _2742 = (_2720 * 48u) + 4u;
                        vec4 _2755 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2742)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 3u)).x));
                        uint _2761 = (_2720 * 48u) + 8u;
                        vec3 _2772 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2761)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 2u)).x));
                        float _2776 = _2736.x - _2188;
                        float _2777 = _2736.y - _2189;
                        float _2778 = _2736.z - _2190;
                        float _2779 = dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778));
                        float _2782 = inversesqrt(_2779);
                        float _2783 = _2782 * _2776;
                        float _2784 = _2782 * _2777;
                        float _2785 = _2782 * _2778;
                        float _2786 = dot(vec3(_836, _839, _842), vec3(_2783, _2784, _2785));
                        float _2791 = 1.0 - (_2779 * _2736.w);
                        float _3981 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2792 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
                        float _2793 = sqrt(_2779) * _2755.w;
                        float _2796 = 1.39999997615814208984375 / (_2793 + 1.39999997615814208984375);
                        float _2797 = _2796 * _2796;
                        float _2800 = ((1.0 - _2797) * _2786) + _2797;
                        float _2803 = _2793 * _2793;
                        float _2807 = ((isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))) * _2792) / ((_2803 * 0.699999988079071044921875) + 1.0);
                        float _2811 = (-0.0) - _2188;
                        float _2812 = (-0.0) - _2189;
                        float _2813 = (-0.0) - _2190;
                        float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
                        float _2818 = _2817 * _2811;
                        float _2819 = _2817 * _2812;
                        float _2820 = _2817 * _2813;
                        float _2828 = exp2(log2(1.0 / ((_2803 * 3.5) + 5.0)) * 0.25);
                        float _2829 = 1.0 - _896;
                        float _2836 = sqrt(1.0 - ((1.0 - (_2829 * _2829)) * (1.0 - (_2828 * _2828))));
                        float _2837 = _2836 * _2836;
                        float _2838 = _2837 * _2837;
                        float _2839 = _2818 + _2783;
                        float _2840 = _2819 + _2784;
                        float _2841 = _2820 + _2785;
                        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
                        float _2849 = dot(vec3(_836, _839, _842), vec3(_2818, _2819, _2820));
                        float _3997 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2852 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2853 = dot(vec3(_836, _839, _842), vec3(_2845 * _2839, _2845 * _2840, _2845 * _2841));
                        float _4008 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2856 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2860 = ((_2856 * _2856) * (_2838 + (-1.0))) + 1.0;
                        float _2861 = _2796 * _2837;
                        float _2862 = _2861 * _2861;
                        float _2865 = ((1.0 - _2862) * _2786) + _2862;
                        float _4019 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2866 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                        float _2867 = 1.0 - _2837;
                        float _2877 = (0.5 / (((_2866 * ((_2852 * _2867) + _2837)) + 9.9999999392252902907785028219223e-09) + (((_2866 * _2867) + _2837) * _2852))) * _2866;
                        float _4030 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2888 = (((_2838 * 3.1415927410125732421875) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) / ((_2860 * _2860) * ((_2803 * 2.1991131305694580078125) + 3.141590118408203125))) * _2792;
                        _2619 = (_2807 * _2755.x) + _2713;
                        _2620 = (_2807 * _2755.y) + _2714;
                        _2621 = (_2807 * _2755.z) + _2715;
                        _2616 = (_2888 * _2772.x) + _2710;
                        _2617 = (_2888 * _2772.y) + _2711;
                        _2618 = (_2888 * _2772.z) + _2712;
                        if (_2717 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2710 = _2616;
                            _2711 = _2617;
                            _2712 = _2618;
                            _2713 = _2619;
                            _2714 = _2620;
                            _2715 = _2621;
                            _2716 = _2717;
                        }
                    }
                    frontier_phi_62_pred = _2617;
                    frontier_phi_62_pred_1 = _2616;
                    frontier_phi_62_pred_2 = _2618;
                    frontier_phi_62_pred_3 = _2621;
                    frontier_phi_62_pred_4 = _2620;
                    frontier_phi_62_pred_5 = _2619;
                }
                _2354 = frontier_phi_62_pred;
                _2352 = frontier_phi_62_pred_1;
                _2356 = frontier_phi_62_pred_2;
                _2362 = frontier_phi_62_pred_3;
                _2360 = frontier_phi_62_pred_4;
                _2358 = frontier_phi_62_pred_5;
                uint _2542 = _2541 + 1u;
                if (_2542 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2535 = _2352;
                    _2536 = _2354;
                    _2537 = _2356;
                    _2538 = _2358;
                    _2539 = _2360;
                    _2540 = _2362;
                    _2541 = _2542;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
        }
        uvec4 _2365 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2366 = _2365.z;
        uint _2368 = (_2366 >> 8u) & 15u;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        if (((4294967295u << _2368) & _2234) == 0u)
        {
            _2503 = _2351;
            _2505 = _2353;
            _2507 = _2355;
            _2509 = _2357;
            _2511 = _2359;
            _2513 = _2361;
        }
        else
        {
            float _2528 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
            float _2529 = _2528 * _2188;
            float _2530 = _2528 * _2189;
            float _2531 = _2528 * _2190;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2368 < ((_2366 >> 12u) & 15u))
            {
                float _2504;
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2693 = _2351;
                float _2694 = _2353;
                float _2695 = _2355;
                float _2696 = _2357;
                float _2697 = _2359;
                float _2698 = _2361;
                uint _2699 = _2368;
                uint _2708;
                bool _2709;
                for (;;)
                {
                    _2708 = texelFetch(g_lightClassification, int((((_2228 << 5u) + (_2214 << 9u)) + (_2699 << 2u)) >> 2u)).x;
                    _2709 = _2708 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2709)
                    {
                        frontier_phi_71_pred = _2694;
                        frontier_phi_71_pred_1 = _2693;
                        frontier_phi_71_pred_2 = _2698;
                        frontier_phi_71_pred_3 = _2697;
                        frontier_phi_71_pred_4 = _2696;
                        frontier_phi_71_pred_5 = _2695;
                    }
                    else
                    {
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _2927 = _2693;
                        float _2928 = _2694;
                        float _2929 = _2695;
                        float _2930 = _2696;
                        float _2931 = _2697;
                        float _2932 = _2698;
                        uint _2933 = _2708;
                        uint _2934;
                        vec4 _2959;
                        float _2960;
                        vec4 _2975;
                        vec3 _2987;
                        vec4 _3002;
                        vec4 _3017;
                        float _3063;
                        bool _3064;
                        for (;;)
                        {
                            uint _2944 = ((_2699 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2933));
                            _2934 = (_2933 + 4294967295u) & _2933;
                            uint _2946 = _2944 * 40u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            _2960 = _2959.w;
                            uint _2962 = (_2944 * 40u) + 4u;
                            _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2977 = (_2944 * 40u) + 8u;
                            _2987 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x));
                            uint _2989 = (_2944 * 40u) + 16u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3004 = (_2944 * 40u) + 20u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            uint _3019 = (_2944 * 40u) + 24u;
                            vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3038 = (_2944 * 40u) + 28u;
                            vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            _3063 = fma(_2190, _3051.z, fma(_2189, _3051.y, _3051.x * _2188)) + _3051.w;
                            _3064 = !((fma(_2190, _3032.z, fma(_2189, _3032.y, _3032.x * _2188)) + _3032.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3064)
                            {
                                float _3091 = _2959.x - _2188;
                                float _3092 = _2959.y - _2189;
                                float _3093 = _2959.z - _2190;
                                float _3094 = dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093));
                                float _3097 = inversesqrt(_3094);
                                float _3098 = _3097 * _3091;
                                float _3099 = _3097 * _3092;
                                float _3100 = _3097 * _3093;
                                float _3104 = 1.0 - (_3094 / (_2960 * _2960));
                                float _4041 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                                float _3109 = sqrt(_3094) * _2975.w;
                                float _3111 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                                float _3112 = _3111 * _3111;
                                float _3115 = ((1.0 - _3112) * dot(vec3(_3098, _3099, _3100), vec3(_836, _839, _842))) + _3112;
                                float _3118 = _3109 * _3109;
                                float _3122 = (fma(_2190, _3002.z, fma(_2189, _3002.y, _3002.x * _2188)) + _3002.w) / _3063;
                                float _3123 = (fma(_2190, _3017.z, fma(_2189, _3017.y, _3017.x * _2188)) + _3017.w) / _3063;
                                float _3127 = 1.0 - dot(vec2(_3122, _3123), vec2(_3122, _3123));
                                float _4057 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3129 = _3128 * (((isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * _3105) / ((_3118 * 0.699999988079071044921875) + 1.0));
                                float _3141 = exp2(log2(1.0 / ((_3118 * 3.5) + 5.0)) * 0.25);
                                float _3142 = 1.0 - _896;
                                float _3149 = sqrt(1.0 - ((1.0 - (_3142 * _3142)) * (1.0 - (_3141 * _3141))));
                                float _3150 = _3149 * _3149;
                                float _3151 = _3150 * _3150;
                                float _3152 = _3098 - _2529;
                                float _3153 = _3099 - _2530;
                                float _3154 = _3100 - _2531;
                                float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                                float _3162 = dot(vec3(_836, _839, _842), vec3((-0.0) - _2529, (-0.0) - _2530, (-0.0) - _2531));
                                float _4068 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3165 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3166 = dot(vec3(_836, _839, _842), vec3(_3158 * _3152, _3158 * _3153, _3158 * _3154));
                                float _4079 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3169 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                                float _3173 = ((_3169 * _3169) * (_3151 + (-1.0))) + 1.0;
                                float _3174 = _3111 * _3150;
                                float _3175 = _3174 * _3174;
                                float _3181 = ((1.0 - _3175) * dot(vec3(_836, _839, _842), vec3(_3098, _3099, _3100))) + _3175;
                                float _4090 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                                float _3183 = 1.0 - _3150;
                                float _3193 = (0.5 / (((_3182 * ((_3165 * _3183) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3150) * _3165))) * _3182;
                                float _4101 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3203 = (_3128 * _3105) * (((_3151 * 3.1415927410125732421875) * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) / ((_3173 * _3173) * ((_3118 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3203 * _2987.y;
                                frontier_phi_77_pred_1 = _3203 * _2987.x;
                                frontier_phi_77_pred_2 = _3129 * _2975.z;
                                frontier_phi_77_pred_3 = _3129 * _2975.y;
                                frontier_phi_77_pred_4 = _3129 * _2975.x;
                                frontier_phi_77_pred_5 = _3203 * _2987.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3208 = frontier_phi_77_pred;
                            _3207 = frontier_phi_77_pred_1;
                            _3212 = frontier_phi_77_pred_2;
                            _3211 = frontier_phi_77_pred_3;
                            _3210 = frontier_phi_77_pred_4;
                            _3209 = frontier_phi_77_pred_5;
                            _2917 = _3210 + _2930;
                            _2918 = _3211 + _2931;
                            _2919 = _3212 + _2932;
                            _2914 = _3207 + _2927;
                            _2915 = _3208 + _2928;
                            _2916 = _3209 + _2929;
                            if (_2934 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2934;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2915;
                        frontier_phi_71_pred_1 = _2914;
                        frontier_phi_71_pred_2 = _2919;
                        frontier_phi_71_pred_3 = _2918;
                        frontier_phi_71_pred_4 = _2917;
                        frontier_phi_71_pred_5 = _2916;
                    }
                    _2506 = frontier_phi_71_pred;
                    _2504 = frontier_phi_71_pred_1;
                    _2514 = frontier_phi_71_pred_2;
                    _2512 = frontier_phi_71_pred_3;
                    _2510 = frontier_phi_71_pred_4;
                    _2508 = frontier_phi_71_pred_5;
                    uint _2700 = _2699 + 1u;
                    if (_2700 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2693 = _2504;
                        _2694 = _2506;
                        _2695 = _2508;
                        _2696 = _2510;
                        _2697 = _2512;
                        _2698 = _2514;
                        _2699 = _2700;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2514;
                frontier_phi_53_54_ladder_1 = _2510;
                frontier_phi_53_54_ladder_2 = _2508;
                frontier_phi_53_54_ladder_3 = _2506;
                frontier_phi_53_54_ladder_4 = _2504;
                frontier_phi_53_54_ladder_5 = _2512;
            }
            else
            {
                frontier_phi_53_54_ladder = _2361;
                frontier_phi_53_54_ladder_1 = _2357;
                frontier_phi_53_54_ladder_2 = _2355;
                frontier_phi_53_54_ladder_3 = _2353;
                frontier_phi_53_54_ladder_4 = _2351;
                frontier_phi_53_54_ladder_5 = _2359;
            }
            _2503 = frontier_phi_53_54_ladder_4;
            _2505 = frontier_phi_53_54_ladder_3;
            _2507 = frontier_phi_53_54_ladder_2;
            _2509 = frontier_phi_53_54_ladder_1;
            _2511 = frontier_phi_53_54_ladder_5;
            _2513 = frontier_phi_53_54_ladder;
        }
        float _2518 = isnan(1.0) ? _880 : (isnan(_880) ? 1.0 : min(_880, 1.0));
        _2247 = (_2518 * _2509) + _1977;
        _2249 = (_2518 * _2511) + _1978;
        _2251 = (_2518 * _2513) + _1979;
        _2253 = ((_2503 * 0.039999999105930328369140625) * _2518) + _2130;
        _2255 = ((_2505 * 0.039999999105930328369140625) * _2518) + _2131;
        _2257 = ((_2507 * 0.039999999105930328369140625) * _2518) + _2132;
    }
    else
    {
        _2247 = _1977;
        _2249 = _1978;
        _2251 = _1979;
        _2253 = _2130;
        _2255 = _2131;
        _2257 = _2132;
    }
    uint _2263 = _856 + uint(cbMatDynParam._m0[0u].w);
    float _2269 = (cbSceneParam._m0[72u].y * ((_748 * ((_739 - _701) - (_739 * _712))) + _701)) * cbInstanceData._m0[_2263].x;
    float _2270 = (cbSceneParam._m0[72u].y * ((_748 * ((_740 - _702) - (_740 * _712))) + _702)) * cbInstanceData._m0[_2263].y;
    float _2271 = (((_748 * ((_741 - _703) - (_741 * _712))) + _703) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2263].z;
    float _4117 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4128 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4139 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _2288 = (((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2247 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _880))) + ((_2253 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1690)) * cbPerFrame._m0[3u].x)) + _2269;
    float _2290 = (_2270 + ((_2255 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1690)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2249 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _880)));
    float _2292 = (_2271 + ((_2257 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1690)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2251 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _880)));
    float _4165 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2305 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    uint _2306 = _855 + 6u;
    float _2314 = _816 / cbSceneParam._m0[86u].x;
    float _2315 = _817 / cbSceneParam._m0[86u].y;
    vec4 _2329 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2314, _2315, (log2((isnan(cbSceneParam._m0[77u].w) ? _803 : (isnan(_803) ? cbSceneParam._m0[77u].w : min(_803, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2331 = _2329.x;
    float _2332 = _2329.y;
    float _2333 = _2329.z;
    float _2334 = _2329.w;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    if (_803 > cbSceneParam._m0[78u].w)
    {
        float _2376 = isnan(_803) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _803 : min(cbSceneParam._m0[80u].w, _803));
        float _2377 = _2376 / _803;
        float _2388 = _2377 * _276;
        float _2389 = _277 * _2377;
        float _2390 = (-0.0) - _2389;
        float _2391 = _2377 * _278;
        float _2393 = (cbSceneParam._m0[77u].w * _2390) / _2376;
        float _2394 = _2393 + cbSceneParam._m0[79u].w;
        float _2395 = cbSceneParam._m0[79u].w - _2389;
        float _2401 = sqrt(((_2388 * _2388) + (_2389 * _2389)) + (_2391 * _2391));
        float _2404 = (1.0 - (cbSceneParam._m0[77u].w / _2376)) * _2401;
        float _2410 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2412 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2629;
        if (abs((_2390 - _2393) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2629 = ((((_2394 > 0.0) ? exp2(_2410 * _2394) : (2.0 - exp2(_2412 * _2394))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2404;
        }
        else
        {
            float _2564 = 1.0 / cbSceneParam._m0[80u].x;
            float _2565 = isnan(_2395) ? _2394 : (isnan(_2394) ? _2395 : max(_2394, _2395));
            float _2566 = isnan(_2395) ? _2394 : (isnan(_2394) ? _2395 : min(_2394, _2395));
            float _2575 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : min(_2565, 0.0));
            float _2576 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : min(_2566, 0.0));
            _2629 = ((abs(_2401 / _2390) * cbSceneParam._m0[80u].y) * ((((_2575 - _2576) * 2.0) - ((exp2(_2410 * (isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0)))) - exp2(_2410 * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0))))) * _2564)) - ((exp2(_2412 * _2575) - exp2(_2412 * _2576)) * _2564))) + (_2404 * cbSceneParam._m0[80u].z);
        }
        vec4 _2631 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2314, _2315, 1.0), 0.0);
        float _2640 = exp2((_2629 * (-1.44269502162933349609375)) * (1.0 - _2631.w));
        float _2641 = log2(_2640);
        float _2657 = log2(_2334);
        _2414 = (exp2(_2657 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2641 * cbSceneParam._m0[78u].x)) * _2631.x) / cbSceneParam._m0[78u].x)) + _2331;
        _2416 = (exp2(_2657 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2641 * cbSceneParam._m0[78u].y)) * _2631.y) / cbSceneParam._m0[78u].y)) + _2332;
        _2418 = (exp2(_2657 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2641 * cbSceneParam._m0[78u].z)) * _2631.z) / cbSceneParam._m0[78u].z)) + _2333;
        _2420 = _2640 * _2334;
    }
    else
    {
        _2414 = _2331;
        _2416 = _2332;
        _2418 = _2333;
        _2420 = _2334;
    }
    float _2431 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2432 = _2431 == 3.0;
    float _2433 = log2(_2420);
    float _2437 = exp2(_2433 * cbSceneParam._m0[78u].x);
    float _2438 = exp2(_2433 * cbSceneParam._m0[78u].y);
    float _2439 = exp2(_2433 * cbSceneParam._m0[78u].z);
    float _2440 = _2437 * (isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0)));
    float _2441 = _2438 * (isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0)));
    float _2442 = _2439 * (isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0)));
    float _2451 = (_2431 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2451 * (_2432 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2414)));
    SV_Target.y = _2451 * (_2432 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2416)));
    SV_Target.z = _2451 * (_2432 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2418)));
    SV_Target.w = cbInstanceData._m0[_2306].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2269) * _2305) * _2437) * _2451;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2270) * _2305) * _2438) * _2451;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2271) * _2305) * _2439) * _2451;
    SV_Target_1.w = cbInstanceData._m0[_2306].w;
}


