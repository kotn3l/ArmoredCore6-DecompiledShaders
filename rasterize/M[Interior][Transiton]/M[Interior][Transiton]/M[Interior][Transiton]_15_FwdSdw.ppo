#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1335;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    vec4 _300 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _303 = _300.x;
    vec4 _321 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _338 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _303) + cbMtdParam._m0[12u].x) * _321.x;
    float _340 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _303) + cbMtdParam._m0[12u].y) * _321.y;
    float _342 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _303) + cbMtdParam._m0[12u].z) * _321.z;
    vec4 _360 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _399 = cbMtdParam._m0[27u].w + _284;
    float _400 = cbMtdParam._m0[28u].x + _285;
    float _401 = cbMtdParam._m0[28u].y + _286;
    float _415 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_214, _215, _216));
    float _416 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_228, _229, _230));
    float _417 = (-0.0) - dot(vec3(_399, _400, _401), vec3((-0.0) - _221, (-0.0) - _222, (-0.0) - _223));
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _424 = _421 * _417;
    float _425 = (_421 * _415) + ((cbMtdParam._m0[25u].w * _303) * ((_360.x * 2.0) + (-1.0)));
    float _426 = (_421 * _416) + ((cbMtdParam._m0[26u].x * _303) * ((_360.y * 2.0) + (-1.0)));
    float _427 = _425 * cbMtdParam._m0[24u].x;
    float _428 = _426 * cbMtdParam._m0[23u].w;
    float _429 = fract(TEXCOORD.x);
    float _430 = fract(TEXCOORD.y);
    float _436;
    if (_427 > 0.0)
    {
        _436 = (1.0 - _429) / _427;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_427 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _429) / _427;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _436 = frontier_phi_3_2_ladder;
    }
    float _444;
    if (_428 > 0.0)
    {
        _444 = (1.0 - _430) / _428;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_428 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _430) / _428;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _444 = frontier_phi_7_6_ladder;
    }
    bool _446 = _424 > 0.0;
    float _448 = _446 ? (cbMtdParam._m0[17u].x / _424) : 5000.0;
    float _449 = isnan(_444) ? _436 : (isnan(_436) ? _444 : min(_436, _444));
    float _450 = isnan(_448) ? _449 : (isnan(_449) ? _448 : min(_449, _448));
    float _454 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _455 = _429 + (-0.5);
    float _458 = _430 + (-0.5);
    float _461 = ((_450 * _424) + _454) / _454;
    vec4 _486 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_455 + (_450 * _427)) / _461) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_458 + (_450 * _428)) / _461) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _499 = (_486.x * _303) * cbMtdParam._m0[9u].x;
    float _500 = (_486.y * _303) * cbMtdParam._m0[9u].y;
    float _501 = (_486.z * _303) * cbMtdParam._m0[9u].z;
    float _519 = _425 * cbMtdParam._m0[26u].z;
    float _520 = _426 * cbMtdParam._m0[26u].y;
    bool _521 = _519 > 0.0;
    float _526;
    if (_521)
    {
        _526 = (1.0 - _429) / _519;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_519 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _429) / _519;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _526 = frontier_phi_11_10_ladder;
    }
    bool _528 = _520 > 0.0;
    float _533;
    if (_528)
    {
        _533 = (1.0 - _430) / _520;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_520 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _430) / _520;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _533 = frontier_phi_15_14_ladder;
    }
    float _536 = _446 ? (cbMtdParam._m0[19u].z / _424) : 5000.0;
    float _537 = isnan(_533) ? _526 : (isnan(_526) ? _533 : min(_526, _533));
    float _538 = isnan(_536) ? _537 : (isnan(_537) ? _536 : min(_537, _536));
    float _542 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _546 = ((_538 * _424) + _542) / _542;
    float _551 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _553 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _569 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_455 + (_538 * _519)) / _546) + 0.5) + _551) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_458 + (_538 * _520)) / _546) + 0.5) + _553) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _584;
    if (_521)
    {
        _584 = (1.0 - _429) / _519;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_519 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _429) / _519;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _584 = frontier_phi_19_18_ladder;
    }
    float _590;
    if (_528)
    {
        _590 = (1.0 - _430) / _520;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_520 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _430) / _520;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _590 = frontier_phi_23_22_ladder;
    }
    float _592 = isnan(_590) ? _584 : (isnan(_584) ? _590 : min(_584, _590));
    float _593 = isnan(_536) ? _592 : (isnan(_592) ? _536 : min(_592, _536));
    float _600 = ((_593 * _424) + _542) / _542;
    vec4 _620 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_455 + (_593 * _519)) / _600) + 0.5) + _551) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_458 + (_593 * _520)) / _600) + 0.5) + _553) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _622 = _620.x;
    float _632 = _303 * 0.1500000059604644775390625;
    float _643 = (_632 * ((_499 - _338) + (((((cbMtdParam._m0[10u].x * _303) * _569.x) - _499) * _303) * _622))) + _338;
    float _644 = (_632 * ((_500 - _340) + (((((cbMtdParam._m0[10u].y * _303) * _569.y) - _500) * _303) * _622))) + _340;
    float _645 = (_632 * ((_501 - _342) + (((((cbMtdParam._m0[10u].z * _303) * _569.z) - _501) * _303) * _622))) + _342;
    vec4 _658 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _662 = _658.z;
    float _665 = (_658.x * 2.0) + (-1.0);
    float _666 = (_658.y * 2.0) + (-1.0);
    float _667 = dot(vec2(_665, _666), vec2(_665, _666));
    float _3763 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _672 = sqrt(1.0 - (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))));
    vec4 _696 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _701 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _707 = ((_696.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _709 = (-0.0) - (cbMtdParam._m0[21u].x * ((_696.x * 0.5) + (-0.25)));
    float _710 = fract(_701);
    float _712 = fract(_701 + 0.5);
    vec4 _739 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_710 * _709) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_707 * _710) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _741 = _739.x;
    float _747 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_712 * _709) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_707 * _712) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _741) * abs((_710 * 2.0) + (-1.0))) + _741;
    float _753 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _757 = fract(abs(_753));
    float _766 = sin(cbMtdParam._m0[21u].z);
    float _767 = cos(cbMtdParam._m0[21u].z);
    float _768 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _769 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _799 = abs(cbMtdParam._m0[20u].w * (((_747 - (((_753 >= ((-0.0) - _753)) ? _757 : ((-0.0) - _757)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_769, (-0.0) - _766, _767 * _768) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_769, _767, _768 * _766) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _803 = (((_799 * cbMtdParam._m0[18u].y) - _747) * _799) + _747;
    float _3774 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _804 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    vec4 _816 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _831 = (cbMtdParam._m0[14u].x * _816.x) * cbMtdParam._m0[19u].x;
    float _832 = (cbMtdParam._m0[14u].y * _816.y) * cbMtdParam._m0[19u].x;
    float _833 = (cbMtdParam._m0[14u].z * _816.z) * cbMtdParam._m0[19u].x;
    float _843 = exp2(log2(_804) * cbMtdParam._m0[20u].x);
    float _856 = fma(_672, _221, fma(_666, _228, _665 * _214));
    float _859 = fma(_672, _222, fma(_666, _229, _665 * _215));
    float _862 = fma(_672, _223, fma(_666, _230, _665 * _216));
    float _866 = inversesqrt(dot(vec3(_856, _859, _862), vec3(_856, _859, _862)));
    float _867 = _866 * _856;
    float _868 = _866 * _859;
    float _869 = _866 * _862;
    float _3785 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _870 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _3807 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _3818 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _889 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _893 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _894 = _284 * _893;
    float _895 = _285 * _893;
    float _896 = _286 * _893;
    float _902 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _903 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _921 = fma(_869, cbSceneParam._m0[5u].z, fma(_868, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _867));
    float _924 = fma(_869, cbSceneParam._m0[6u].z, fma(_868, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _867));
    float _927 = fma(_869, cbSceneParam._m0[7u].z, fma(_868, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _867));
    uint _940 = uint(roundEven(NORMAL.w)) * 13u;
    uint _941 = _940 + 9u;
    uint _942 = _941 + uint(cbMatDynParam._m0[0u].w);
    float _948 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_942].x;
    float _949 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_942].y;
    float _950 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * cbInstanceData._m0[_942].z;
    float _3829 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    vec4 _962 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _902, cbSceneParam._m0[86u].y * _903));
    float _965 = _962.x * TEXCOORD_4;
    float _966 = dot(vec3(_867, _868, _869), vec3(_894, _895, _896));
    float _969 = _966 * 2.0;
    float _973 = (_969 * _867) - _894;
    float _974 = (_969 * _868) - _895;
    float _975 = (_969 * _869) - _896;
    float _979 = abs(dot(vec3(_894, _895, _896), vec3(_867, _868, _869)));
    float _3862 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _981 = sqrt(_870);
    float _994 = exp2((_981 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_981 * 3.0));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1334;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1061 = fma(_1034, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026));
        float _1065 = fma(_1034, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026));
        float _1069 = fma(_1034, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026));
        float _1092 = _1026 + _867;
        float _1093 = _1030 + _868;
        float _1094 = _1034 + _869;
        float _1104 = fma(_1094, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1092)) - _1061;
        float _1105 = fma(_1094, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1092)) - _1065;
        float _1106 = fma(_1094, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1092)) - _1069;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1061 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1065 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[34u].z) + ((((((_1069 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1162 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1128.x + (-0.5));
        float _1164 = _1162 * (_1128.y + (-0.5));
        float _1165 = _1162 * (_1128.z + (-0.5));
        float _1172 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1135.x + (-0.5));
        float _1174 = _1172 * (_1135.y + (-0.5));
        float _1175 = _1172 * (_1135.z + (-0.5));
        float _1182 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1142.x + (-0.5));
        float _1184 = _1182 * (_1142.y + (-0.5));
        float _1185 = _1182 * (_1142.z + (-0.5));
        float _1192 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1149.x + (-0.5));
        float _1194 = _1192 * (_1149.y + (-0.5));
        float _1195 = _1192 * (_1149.z + (-0.5));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = _1163 * 0.5;
        float _1200 = _1173 * 0.5;
        float _1201 = _1183 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1216 = (dot(vec3(_867, _868, _869), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1226 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3910 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1228 + 1.0))) + _1233) * _1196;
        float _1243 = _1164 * 0.5;
        float _1244 = _1174 * 0.5;
        float _1245 = _1184 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_867, _868, _869), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3943 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1270 + 1.0))) + _1275) * _1197;
        float _1285 = _1165 * 0.5;
        float _1286 = _1175 * 0.5;
        float _1287 = _1185 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_867, _868, _869), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3976 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1312 + 1.0))) + _1317) * _1198;
        _1334 = _1165;
        _1336 = _1164;
        _1337 = _1163;
        _1338 = _1175;
        _1339 = _1174;
        _1340 = _1173;
        _1341 = _1185;
        _1342 = _1184;
        _1343 = _1183;
        _1344 = _1198;
        _1345 = _1197;
        _1346 = _1196;
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
    }
    else
    {
        _1334 = _1335;
        _1336 = _1335;
        _1337 = _1335;
        _1338 = _1335;
        _1339 = _1335;
        _1340 = _1335;
        _1341 = _1335;
        _1342 = _1335;
        _1343 = _1335;
        _1344 = _1335;
        _1345 = _1335;
        _1346 = _1335;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1374 = fma(_1034, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026));
        float _1378 = fma(_1034, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026));
        float _1382 = fma(_1034, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026));
        float _1405 = _1026 + _867;
        float _1406 = _1030 + _868;
        float _1407 = _1034 + _869;
        float _1417 = fma(_1407, cbModelParam._m0[30u].z, fma(_1406, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1405)) - _1374;
        float _1418 = fma(_1407, cbModelParam._m0[31u].z, fma(_1406, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1405)) - _1378;
        float _1419 = fma(_1407, cbModelParam._m0[32u].z, fma(_1406, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1405)) - _1382;
        float _1423 = inversesqrt(dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419)));
        float _1436 = ((_1423 * _1417) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1374 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1423 * _1418) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1378 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1423 * _1419) / cbModelParam._m0[35u].z) + ((((((_1382 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        float _1473 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1440.x + (-0.5));
        float _1475 = _1473 * (_1440.y + (-0.5));
        float _1476 = _1473 * (_1440.z + (-0.5));
        float _1483 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1447.x + (-0.5));
        float _1485 = _1483 * (_1447.y + (-0.5));
        float _1486 = _1483 * (_1447.z + (-0.5));
        float _1493 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1454.x + (-0.5));
        float _1495 = _1493 * (_1454.y + (-0.5));
        float _1496 = _1493 * (_1454.z + (-0.5));
        float _1503 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1461.x + (-0.5));
        float _1505 = _1503 * (_1461.y + (-0.5));
        float _1506 = _1503 * (_1461.z + (-0.5));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = _1474 * 0.5;
        float _1511 = _1484 * 0.5;
        float _1512 = _1494 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_867, _868, _869), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4039 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1537 + 1.0))) + _1542) * _1507;
        float _1552 = _1475 * 0.5;
        float _1553 = _1485 * 0.5;
        float _1554 = _1495 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_867, _868, _869), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4072 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1579 + 1.0))) + _1584) * _1508;
        float _1594 = _1476 * 0.5;
        float _1595 = _1486 * 0.5;
        float _1596 = _1496 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_867, _868, _869), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4105 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1621 + 1.0))) + _1626) * _1509;
        _1643 = _1476;
        _1644 = _1475;
        _1645 = _1474;
        _1646 = _1486;
        _1647 = _1485;
        _1648 = _1484;
        _1649 = _1496;
        _1650 = _1495;
        _1651 = _1494;
        _1652 = _1509;
        _1653 = _1508;
        _1654 = _1507;
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
    }
    else
    {
        _1643 = _1335;
        _1644 = _1335;
        _1645 = _1335;
        _1646 = _1335;
        _1647 = _1335;
        _1648 = _1335;
        _1649 = _1335;
        _1650 = _1335;
        _1651 = _1335;
        _1652 = _1335;
        _1653 = _1335;
        _1654 = _1335;
        _1655 = 0.0;
        _1656 = 0.0;
        _1657 = 0.0;
    }
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1347)) + _1347;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1348)) + _1348;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1349)) + _1349;
    float _1690 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1667));
    float _1711 = _973 * 0.5;
    float _1712 = _974 * 0.5;
    float _1713 = _975 * 0.5;
    float _1714 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1717 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1720 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1754;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1727 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1334, _1338, _1341, _1344));
        float _1731 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1735 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1742 = dot(vec4(cbModelParam._m0[39u]), vec4(_1711, _1712, _1713, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1765;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1756 = dot(vec4(cbModelParam._m0[40u]), vec4(_1711, _1712, _1713, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1769 = (_1765 * cbModelParam._m0[1u].x) + (_1754 * (1.0 - cbModelParam._m0[1u].x));
    float _1779 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _870);
    float _1780 = isnan(_1779) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1779 : min(cbModelParam._m0[25u].z, _1779));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1828 = fma(_1034, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026)) + cbModelParam._m0[13u].w;
        float _1832 = fma(_1034, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026)) + cbModelParam._m0[14u].w;
        float _1836 = fma(_1034, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026)) + cbModelParam._m0[15u].w;
        float _1839 = fma(_975, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _973));
        float _1842 = fma(_975, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _973));
        float _1845 = fma(_975, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _973));
        float _1873;
        if (_1839 > 0.0)
        {
            _1873 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1873 = frontier_phi_38_36_ladder;
        }
        float _2041;
        if (_1842 > 0.0)
        {
            _2041 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2041 = frontier_phi_47_43_ladder;
        }
        float _2485;
        if (_1845 > 0.0)
        {
            _2485 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _2485 = frontier_phi_59_54_ladder;
        }
        float _2487 = isnan(_2041) ? _1873 : (isnan(_1873) ? _2041 : min(_1873, _2041));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1839) + _1828;
        float _2493 = (_2488 * _1842) + _1832;
        float _2494 = (_2488 * _1845) + _1836;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2495;
        float _2499 = _2495 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 > _2499) || ((_2493 < _2497) || ((_2492 < _2497) || (_2492 > _2499))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2754 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2494, cbModelParam._m0[9u].z, fma(_2493, cbModelParam._m0[9u].y, _2492 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2494, cbModelParam._m0[10u].z, fma(_2493, cbModelParam._m0[10u].y, _2492 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2494, cbModelParam._m0[11u].z, fma(_2493, cbModelParam._m0[11u].y, _2492 * cbModelParam._m0[11u].x))), _1780);
            frontier_phi_37_59_ladder = _2754.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2754.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2754.x * cbModelParam._m0[1u].y;
        }
        _1861 = frontier_phi_37_59_ladder_2;
        _1863 = frontier_phi_37_59_ladder_1;
        _1865 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_973, _974, _975), _1780);
        _1861 = _1849.x * cbModelParam._m0[1u].y;
        _1863 = _1849.y * cbModelParam._m0[1u].y;
        _1865 = _1849.z * cbModelParam._m0[1u].y;
    }
    float _1869 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _870);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1869 : min(cbModelParam._m0[25u].w, _1869));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1922 = fma(_1034, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026)) + cbModelParam._m0[21u].w;
        float _1926 = fma(_1034, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026)) + cbModelParam._m0[22u].w;
        float _1930 = fma(_1034, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026)) + cbModelParam._m0[23u].w;
        float _1933 = fma(_975, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _973));
        float _1936 = fma(_975, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _973));
        float _1939 = fma(_975, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _973));
        float _2046;
        if (_1933 > 0.0)
        {
            _2046 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2046 = frontier_phi_49_45_ladder;
        }
        float _2512;
        if (_1936 > 0.0)
        {
            _2512 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2512 = frontier_phi_61_56_ladder;
        }
        float _2883;
        if (_1939 > 0.0)
        {
            _2883 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2883 = frontier_phi_73_68_ladder;
        }
        float _2885 = isnan(_2512) ? _2046 : (isnan(_2046) ? _2512 : min(_2046, _2512));
        float _2886 = isnan(_2883) ? _2885 : (isnan(_2885) ? _2883 : min(_2885, _2883));
        float _2890 = (_2886 * _1933) + _1922;
        float _2891 = (_2886 * _1936) + _1926;
        float _2892 = (_2886 * _1939) + _1930;
        float _2893 = _2886 * 9.9999997473787516355514526367188e-05;
        float _2894 = (-1.0) - _2893;
        float _2896 = _2893 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2892 > _2896) || ((_2892 < _2894) || ((_2891 > _2896) || ((_2891 < _2894) || ((_2890 < _2894) || (_2890 > _2896))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2892, cbModelParam._m0[17u].z, fma(_2891, cbModelParam._m0[17u].y, _2890 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2892, cbModelParam._m0[18u].z, fma(_2891, cbModelParam._m0[18u].y, _2890 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2892, cbModelParam._m0[19u].z, fma(_2891, cbModelParam._m0[19u].y, _2890 * cbModelParam._m0[19u].x))), _1870);
            frontier_phi_46_73_ladder = _3013.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _3013.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _3013.x * cbModelParam._m0[1u].z;
        }
        _1958 = frontier_phi_46_73_ladder_2;
        _1960 = frontier_phi_46_73_ladder_1;
        _1962 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_973, _974, _975), _1870);
        _1958 = _1942.x * cbModelParam._m0[1u].z;
        _1960 = _1942.y * cbModelParam._m0[1u].z;
        _1962 = _1942.z * cbModelParam._m0[1u].z;
    }
    float _1974 = ((((1.0 - _994) * ((_981 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_994 * _981)) * _965;
    float _1975 = _1974 * ((cbModelParam._m0[1u].w * (_1958 - _1861)) + _1861);
    float _1976 = _1974 * ((cbModelParam._m0[1u].w * (_1960 - _1863)) + _1863);
    float _1977 = _1974 * ((cbModelParam._m0[1u].w * (_1962 - _1865)) + _1865);
    float _1980 = fma(_1977, cbSceneParam._m0[89u].z, fma(_1976, cbSceneParam._m0[89u].y, _1975 * cbSceneParam._m0[89u].x));
    float _1983 = fma(_1977, cbSceneParam._m0[90u].z, fma(_1976, cbSceneParam._m0[90u].y, _1975 * cbSceneParam._m0[90u].x));
    float _1986 = fma(_1977, cbSceneParam._m0[91u].z, fma(_1976, cbSceneParam._m0[91u].y, _1975 * cbSceneParam._m0[91u].x));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2028 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2033 = _2020 / _2032;
    float _2034 = _2024 / _2032;
    float _2035 = _2028 / _2032;
    float _2182;
    float _2183;
    float _2184;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2062 = ((uint(_2035 > cbSceneParam._m0[59u].y) + uint(_2035 > cbSceneParam._m0[59u].x)) + uint(_2035 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2063 = _2062 + 43u;
        uint _2071 = _2062 + 44u;
        uint _2079 = _2062 + 45u;
        uint _2087 = _2062 + 46u;
        float _2098 = fma(_2032, cbSceneParam._m0[_2063].w, fma(_2028, cbSceneParam._m0[_2063].z, fma(_2024, cbSceneParam._m0[_2063].y, _2020 * cbSceneParam._m0[_2063].x)));
        float _2102 = fma(_2032, cbSceneParam._m0[_2071].w, fma(_2028, cbSceneParam._m0[_2071].z, fma(_2024, cbSceneParam._m0[_2071].y, _2020 * cbSceneParam._m0[_2071].x)));
        float _2110 = fma(_2032, cbSceneParam._m0[_2087].w, fma(_2028, cbSceneParam._m0[_2087].z, fma(_2024, cbSceneParam._m0[_2087].y, _2020 * cbSceneParam._m0[_2087].x)));
        float _2115 = cbSceneParam._m0[33u].z * _2110;
        float _2117 = cbSceneParam._m0[33u].w * _2110;
        float _2120 = fma(_2032, cbSceneParam._m0[_2079].w, fma(_2028, cbSceneParam._m0[_2079].z, fma(_2024, cbSceneParam._m0[_2079].y, _2020 * cbSceneParam._m0[_2079].x))) / _2110;
        float _2168 = (cbSceneParam._m0[33u].x - sqrt(((_2034 * _2034) + (_2033 * _2033)) + (_2035 * _2035))) * cbSceneParam._m0[33u].y;
        float _4231 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2175 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 + _2098) / _2110, (_2117 + _2102) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 + _2098) / _2110, (_2102 - _2115) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2098 - _2115) / _2110, (_2102 - _2117) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2098 - _2117) / _2110, (_2115 + _2102) / _2110), _2120), 0.0)).x), vec4(0.25)));
        _2182 = 1.0 - (_2175 * cbSceneParam._m0[34u].x);
        _2183 = 1.0 - (_2175 * cbSceneParam._m0[34u].y);
        _2184 = 1.0 - (_2175 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2182 = 1.0;
        _2183 = 1.0;
        _2184 = 1.0;
    }
    float _2248;
    float _2250;
    float _2252;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2236 = fma(_2032, cbSceneParam._m0[63u].w, fma(_2028, cbSceneParam._m0[63u].z, fma(_2024, cbSceneParam._m0[63u].y, _2020 * cbSceneParam._m0[63u].x)));
        float _2237 = fma(_2032, cbSceneParam._m0[60u].w, fma(_2028, cbSceneParam._m0[60u].z, fma(_2024, cbSceneParam._m0[60u].y, _2020 * cbSceneParam._m0[60u].x))) / _2236;
        float _2238 = fma(_2032, cbSceneParam._m0[61u].w, fma(_2028, cbSceneParam._m0[61u].z, fma(_2024, cbSceneParam._m0[61u].y, _2020 * cbSceneParam._m0[61u].x))) / _2236;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_2237 >= cbSceneParam._m0[64u].x) && (_2238 >= cbSceneParam._m0[64u].y)) && (_2237 <= cbSceneParam._m0[64u].z)) && (_2238 <= cbSceneParam._m0[64u].w))
        {
            float _2525 = fma(_2032, cbSceneParam._m0[62u].w, fma(_2028, cbSceneParam._m0[62u].z, fma(_2024, cbSceneParam._m0[62u].y, _2020 * cbSceneParam._m0[62u].x))) / _2236;
            float _2529 = isnan(cbSceneParam._m0[41u].w) ? _2525 : (isnan(_2525) ? cbSceneParam._m0[41u].w : max(_2525, cbSceneParam._m0[41u].w));
            float _2572 = (cbSceneParam._m0[33u].x - sqrt(((_2034 * _2034) + (_2033 * _2033)) + (_2035 * _2035))) * cbSceneParam._m0[33u].y;
            float _4247 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
            float _2579 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2237, cbSceneParam._m0[33u].w + _2238), _2529), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2237, _2238 - cbSceneParam._m0[33u].z), _2529), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2237 - cbSceneParam._m0[33u].z, _2238 - cbSceneParam._m0[33u].w), _2529), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2237 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2238), _2529), 0.0)).x), vec4(0.25)));
            float _2583 = 1.0 - (_2579 * cbSceneParam._m0[34u].x);
            float _2584 = 1.0 - (_2579 * cbSceneParam._m0[34u].y);
            float _2585 = 1.0 - (_2579 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_2585) ? _2184 : (isnan(_2184) ? _2585 : min(_2184, _2585));
            frontier_phi_58_57_ladder_1 = isnan(_2584) ? _2183 : (isnan(_2183) ? _2584 : min(_2183, _2584));
            frontier_phi_58_57_ladder_2 = isnan(_2583) ? _2182 : (isnan(_2182) ? _2583 : min(_2182, _2583));
        }
        else
        {
            frontier_phi_58_57_ladder = _2184;
            frontier_phi_58_57_ladder_1 = _2183;
            frontier_phi_58_57_ladder_2 = _2182;
        }
        _2248 = frontier_phi_58_57_ladder_2;
        _2250 = frontier_phi_58_57_ladder_1;
        _2252 = frontier_phi_58_57_ladder;
    }
    else
    {
        _2248 = _2182;
        _2250 = _2183;
        _2252 = _2184;
    }
    uvec4 _2257 = floatBitsToUint(cbInstanceData._m0[_940 + 5u]);
    uint _2259 = _2257.x * 14u;
    uint _2260 = _2259 + 13u;
    float _2265 = _965 + (-1.0);
    float _2268 = (cbLight._m0[_2260].x * _2265) + 1.0;
    float _2269 = (cbLight._m0[_2260].y * _2265) + 1.0;
    uint _2270 = _2259 + 5u;
    float _2276 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
    uint _2280 = _2259 + 4u;
    float _2289 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
    uint _2293 = _2259 | 1u;
    float _2304 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_867, _868, _869));
    float _2307 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_867, _868, _869));
    float _4283 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _4294 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2312 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.3183098733425140380859375;
    float _2314 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * 0.3183098733425140380859375;
    float _2321 = ((cbLight._m0[_2270].x * _2276) * _2314) + (((cbLight._m0[_2280].x * _2248) * _2289) * _2312);
    float _2322 = ((_2276 * cbLight._m0[_2270].y) * _2314) + (((cbLight._m0[_2280].y * _2250) * _2289) * _2312);
    float _2323 = ((_2276 * cbLight._m0[_2270].z) * _2314) + (((cbLight._m0[_2280].z * _2252) * _2289) * _2312);
    uint _2325 = _2259 + 8u;
    float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _870) * 0.949999988079071044921875);
    float _2339 = _2338 * _2338;
    float _2340 = cbLight._m0[_2259].x + _894;
    float _2341 = cbLight._m0[_2259].y + _895;
    float _2342 = cbLight._m0[_2259].z + _896;
    float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
    float _2347 = _2346 * _2340;
    float _2348 = _2346 * _2341;
    float _2349 = _2346 * _2342;
    float _2350 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2259].xyz));
    float _4305 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _4316 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _2354 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2355 = dot(vec3(_867, _868, _869), vec3(_2347, _2348, _2349));
    float _4327 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2359 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2347, _2348, _2349));
    float _4338 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2363 = _2339 * _2339;
    float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
    float _2378 = (exp2(log2(1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2379 = 1.0 - _2339;
    float _2390 = (0.5 / (((_2354 * ((_2353 * _2379) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2379) + _2339) * _2353))) * _2353;
    float _4349 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2392 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
    uint _2406 = _2259 + 9u;
    float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _870) * 0.949999988079071044921875);
    float _2418 = _2417 * _2417;
    float _2419 = cbLight._m0[_2293].x + _894;
    float _2420 = cbLight._m0[_2293].y + _895;
    float _2421 = cbLight._m0[_2293].z + _896;
    float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
    float _2426 = _2425 * _2419;
    float _2427 = _2425 * _2420;
    float _2428 = _2425 * _2421;
    float _2429 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2293].xyz));
    float _4360 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2433 = dot(vec3(_867, _868, _869), vec3(_2426, _2427, _2428));
    float _4371 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2436 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2437 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2426, _2427, _2428));
    float _4382 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2441 = _2418 * _2418;
    float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
    float _2454 = (exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2455 = 1.0 - _2418;
    float _2465 = (0.5 / (((_2354 * ((_2432 * _2455) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2455) + _2418) * _2432))) * _2432;
    float _4393 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2467 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
    float _2477 = (((_2454 * cbLight._m0[_2406].x) * _2467) * _2276) + ((((cbLight._m0[_2325].x * _2248) * _2378) * _2392) * _2289);
    float _2478 = (((_2454 * cbLight._m0[_2406].y) * _2467) * _2276) + ((((cbLight._m0[_2325].y * _2250) * _2378) * _2392) * _2289);
    float _2479 = (((_2454 * cbLight._m0[_2406].z) * _2467) * _2276) + ((((cbLight._m0[_2325].z * _2252) * _2378) * _2392) * _2289);
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    if (_2257.y == 0u)
    {
        uvec4 _2597 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2598 = _2597.x;
        uint _2609 = uint((float(_2597.y) * floor(float(uint(cbSceneParam._m0[85u].y * _903) / _2598))) + floor(float(uint(cbSceneParam._m0[85u].x * _902) / _2598)));
        float _2619 = (log2(_2035 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2620 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        uint _2623 = uint(isnan(14.0) ? _2620 : (isnan(_2620) ? 14.0 : min(_2620, 14.0)));
        uvec4 _2628 = texelFetch(g_lightClusterGridBuffer, int(((_2623 << 2u) + (_2609 << 6u)) >> 2u));
        uint _2629 = _2628.x;
        uint _2630 = _2597.z;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        if (((((1u << ((_2630 >> 4u) & 15u)) + 4294967295u) & _2629) == 0u) || ((_2630 & 240u) == 0u))
        {
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
        }
        else
        {
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            uint _2947 = 0u;
            uint _2956;
            bool _2957;
            for (;;)
            {
                _2956 = texelFetch(g_lightClassification, int((((_2623 << 5u) + (_2609 << 9u)) + (_2947 << 2u)) >> 2u)).x;
                _2957 = _2956 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2957)
                {
                    frontier_phi_82_pred = _2941;
                    frontier_phi_82_pred_1 = _2946;
                    frontier_phi_82_pred_2 = _2945;
                    frontier_phi_82_pred_3 = _2944;
                    frontier_phi_82_pred_4 = _2943;
                    frontier_phi_82_pred_5 = _2942;
                }
                else
                {
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    uint _3092;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2956;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    for (;;)
                    {
                        uint _3096 = uint(findLSB(_3092)) + (_2947 << 5u);
                        uint _3093 = (_3092 + 4294967295u) & _3092;
                        uint _3098 = _3096 * 48u;
                        vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3118 = (_3096 * 48u) + 4u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3137 = (_3096 * 48u) + 8u;
                        vec3 _3148 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x));
                        float _3152 = _3112.x - _2033;
                        float _3153 = _3112.y - _2034;
                        float _3154 = _3112.z - _2035;
                        float _3155 = dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154));
                        float _3158 = inversesqrt(_3155);
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3162 = dot(vec3(_921, _924, _927), vec3(_3159, _3160, _3161));
                        float _3167 = 1.0 - (_3155 * _3112.w);
                        float _4414 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3169 = sqrt(_3155) * _3131.w;
                        float _3172 = 1.39999997615814208984375 / (_3169 + 1.39999997615814208984375);
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3162) + _3173;
                        float _3179 = _3169 * _3169;
                        float _3183 = ((isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))) * _3168) / ((_3179 * 0.699999988079071044921875) + 1.0);
                        float _3187 = (-0.0) - _2033;
                        float _3188 = (-0.0) - _2034;
                        float _3189 = (-0.0) - _2035;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3194 = _3193 * _3187;
                        float _3195 = _3193 * _3188;
                        float _3196 = _3193 * _3189;
                        float _3203 = exp2(log2(1.0 / ((_3179 * 3.5) + 5.0)) * 0.25);
                        float _3204 = 1.0 - _981;
                        float _3211 = sqrt(1.0 - ((1.0 - (_3204 * _3204)) * (1.0 - (_3203 * _3203))));
                        float _3212 = _3211 * _3211;
                        float _3213 = _3212 * _3212;
                        float _3214 = _3194 + _3159;
                        float _3215 = _3195 + _3160;
                        float _3216 = _3196 + _3161;
                        float _3220 = inversesqrt(dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216)));
                        float _3224 = dot(vec3(_921, _924, _927), vec3(_3194, _3195, _3196));
                        float _4430 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3227 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3228 = dot(vec3(_921, _924, _927), vec3(_3220 * _3214, _3220 * _3215, _3220 * _3216));
                        float _4441 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3231 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3235 = ((_3231 * _3231) * (_3213 + (-1.0))) + 1.0;
                        float _3236 = _3172 * _3212;
                        float _3237 = _3236 * _3236;
                        float _3240 = ((1.0 - _3237) * _3162) + _3237;
                        float _4452 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3241 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3242 = 1.0 - _3212;
                        float _3252 = (0.5 / (((_3241 * ((_3227 * _3242) + _3212)) + 9.9999999392252902907785028219223e-09) + (((_3241 * _3242) + _3212) * _3227))) * _3241;
                        float _4463 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3263 = (((_3213 * 3.1415927410125732421875) * (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) / ((_3235 * _3235) * ((_3179 * 2.1991131305694580078125) + 3.141590118408203125))) * _3168;
                        _3021 = (_3183 * _3131.x) + _3089;
                        _3022 = (_3183 * _3131.y) + _3090;
                        _3023 = (_3183 * _3131.z) + _3091;
                        _3018 = (_3263 * _3148.x) + _3086;
                        _3019 = (_3263 * _3148.y) + _3087;
                        _3020 = (_3263 * _3148.z) + _3088;
                        if (_3093 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3093;
                        }
                    }
                    frontier_phi_82_pred = _3018;
                    frontier_phi_82_pred_1 = _3023;
                    frontier_phi_82_pred_2 = _3022;
                    frontier_phi_82_pred_3 = _3021;
                    frontier_phi_82_pred_4 = _3020;
                    frontier_phi_82_pred_5 = _3019;
                }
                _2764 = frontier_phi_82_pred;
                _2774 = frontier_phi_82_pred_1;
                _2772 = frontier_phi_82_pred_2;
                _2770 = frontier_phi_82_pred_3;
                _2768 = frontier_phi_82_pred_4;
                _2766 = frontier_phi_82_pred_5;
                uint _2948 = _2947 + 1u;
                if (_2948 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2941 = _2764;
                    _2942 = _2766;
                    _2943 = _2768;
                    _2944 = _2770;
                    _2945 = _2772;
                    _2946 = _2774;
                    _2947 = _2948;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
        }
        uvec4 _2777 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2778 = _2777.z;
        uint _2780 = (_2778 >> 8u) & 15u;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        if (((4294967295u << _2780) & _2629) == 0u)
        {
            _2909 = _2763;
            _2911 = _2765;
            _2913 = _2767;
            _2915 = _2769;
            _2917 = _2771;
            _2919 = _2773;
        }
        else
        {
            float _2934 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
            float _2935 = _2934 * _2033;
            float _2936 = _2934 * _2034;
            float _2937 = _2934 * _2035;
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            float frontier_phi_75_76_ladder_3;
            float frontier_phi_75_76_ladder_4;
            float frontier_phi_75_76_ladder_5;
            if (_2780 < ((_2778 >> 12u) & 15u))
            {
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _3069 = _2763;
                float _3070 = _2765;
                float _3071 = _2767;
                float _3072 = _2769;
                float _3073 = _2771;
                float _3074 = _2773;
                uint _3075 = _2780;
                uint _3084;
                bool _3085;
                for (;;)
                {
                    _3084 = texelFetch(g_lightClassification, int((((_2623 << 5u) + (_2609 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                    _3085 = _3084 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_3085)
                    {
                        frontier_phi_88_pred = _3072;
                        frontier_phi_88_pred_1 = _3073;
                        frontier_phi_88_pred_2 = _3074;
                        frontier_phi_88_pred_3 = _3071;
                        frontier_phi_88_pred_4 = _3070;
                        frontier_phi_88_pred_5 = _3069;
                    }
                    else
                    {
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3281 = _3069;
                        float _3282 = _3070;
                        float _3283 = _3071;
                        float _3284 = _3072;
                        float _3285 = _3073;
                        float _3286 = _3074;
                        uint _3287 = _3084;
                        uint _3288;
                        vec4 _3313;
                        float _3314;
                        vec4 _3329;
                        vec3 _3341;
                        vec4 _3357;
                        vec4 _3372;
                        float _3418;
                        bool _3419;
                        for (;;)
                        {
                            uint _3298 = ((_3075 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3287));
                            _3288 = (_3287 + 4294967295u) & _3287;
                            uint _3300 = _3298 * 40u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3314 = _3313.w;
                            uint _3316 = (_3298 * 40u) + 4u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3331 = (_3298 * 40u) + 8u;
                            _3341 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x));
                            uint _3344 = (_3298 * 40u) + 16u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3359 = (_3298 * 40u) + 20u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3298 * 40u) + 24u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3393 = (_3298 * 40u) + 28u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3418 = fma(_2035, _3406.z, fma(_2034, _3406.y, _3406.x * _2033)) + _3406.w;
                            _3419 = !((fma(_2035, _3387.z, fma(_2034, _3387.y, _3387.x * _2033)) + _3387.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3419)
                            {
                                float _3446 = _3313.x - _2033;
                                float _3447 = _3313.y - _2034;
                                float _3448 = _3313.z - _2035;
                                float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                                float _3452 = inversesqrt(_3449);
                                float _3453 = _3452 * _3446;
                                float _3454 = _3452 * _3447;
                                float _3455 = _3452 * _3448;
                                float _3459 = 1.0 - (_3449 / (_3314 * _3314));
                                float _4474 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3464 = sqrt(_3449) * _3329.w;
                                float _3466 = 1.39999997615814208984375 / (_3464 + 1.39999997615814208984375);
                                float _3467 = _3466 * _3466;
                                float _3470 = ((1.0 - _3467) * dot(vec3(_3453, _3454, _3455), vec3(_921, _924, _927))) + _3467;
                                float _3473 = _3464 * _3464;
                                float _3477 = (fma(_2035, _3357.z, fma(_2034, _3357.y, _3357.x * _2033)) + _3357.w) / _3418;
                                float _3478 = (fma(_2035, _3372.z, fma(_2034, _3372.y, _3372.x * _2033)) + _3372.w) / _3418;
                                float _3482 = 1.0 - dot(vec2(_3477, _3478), vec2(_3477, _3478));
                                float _4490 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3484 = _3483 * (((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3460) / ((_3473 * 0.699999988079071044921875) + 1.0));
                                float _3496 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                                float _3497 = 1.0 - _981;
                                float _3504 = sqrt(1.0 - ((1.0 - (_3497 * _3497)) * (1.0 - (_3496 * _3496))));
                                float _3505 = _3504 * _3504;
                                float _3506 = _3505 * _3505;
                                float _3507 = _3453 - _2935;
                                float _3508 = _3454 - _2936;
                                float _3509 = _3455 - _2937;
                                float _3513 = inversesqrt(dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509)));
                                float _3517 = dot(vec3(_921, _924, _927), vec3((-0.0) - _2935, (-0.0) - _2936, (-0.0) - _2937));
                                float _4501 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3521 = dot(vec3(_921, _924, _927), vec3(_3513 * _3507, _3513 * _3508, _3513 * _3509));
                                float _4512 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3528 = ((_3524 * _3524) * (_3506 + (-1.0))) + 1.0;
                                float _3529 = _3466 * _3505;
                                float _3530 = _3529 * _3529;
                                float _3536 = ((1.0 - _3530) * dot(vec3(_921, _924, _927), vec3(_3453, _3454, _3455))) + _3530;
                                float _4523 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3538 = 1.0 - _3505;
                                float _3548 = (0.5 / (((_3537 * ((_3520 * _3538) + _3505)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3505) * _3520))) * _3537;
                                float _4534 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3558 = (_3483 * _3460) * (((_3506 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3528 * _3528) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3558 * _3341.x;
                                frontier_phi_94_pred_1 = _3558 * _3341.y;
                                frontier_phi_94_pred_2 = _3484 * _3329.z;
                                frontier_phi_94_pred_3 = _3484 * _3329.y;
                                frontier_phi_94_pred_4 = _3484 * _3329.x;
                                frontier_phi_94_pred_5 = _3558 * _3341.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3562 = frontier_phi_94_pred;
                            _3563 = frontier_phi_94_pred_1;
                            _3567 = frontier_phi_94_pred_2;
                            _3566 = frontier_phi_94_pred_3;
                            _3565 = frontier_phi_94_pred_4;
                            _3564 = frontier_phi_94_pred_5;
                            _3271 = _3565 + _3284;
                            _3272 = _3566 + _3285;
                            _3273 = _3567 + _3286;
                            _3268 = _3562 + _3281;
                            _3269 = _3563 + _3282;
                            _3270 = _3564 + _3283;
                            if (_3288 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3288;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3271;
                        frontier_phi_88_pred_1 = _3272;
                        frontier_phi_88_pred_2 = _3273;
                        frontier_phi_88_pred_3 = _3270;
                        frontier_phi_88_pred_4 = _3269;
                        frontier_phi_88_pred_5 = _3268;
                    }
                    _2916 = frontier_phi_88_pred;
                    _2918 = frontier_phi_88_pred_1;
                    _2920 = frontier_phi_88_pred_2;
                    _2914 = frontier_phi_88_pred_3;
                    _2912 = frontier_phi_88_pred_4;
                    _2910 = frontier_phi_88_pred_5;
                    uint _3076 = _3075 + 1u;
                    if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3069 = _2910;
                        _3070 = _2912;
                        _3071 = _2914;
                        _3072 = _2916;
                        _3073 = _2918;
                        _3074 = _2920;
                        _3075 = _3076;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2918;
                frontier_phi_75_76_ladder_1 = _2920;
                frontier_phi_75_76_ladder_2 = _2916;
                frontier_phi_75_76_ladder_3 = _2914;
                frontier_phi_75_76_ladder_4 = _2912;
                frontier_phi_75_76_ladder_5 = _2910;
            }
            else
            {
                frontier_phi_75_76_ladder = _2771;
                frontier_phi_75_76_ladder_1 = _2773;
                frontier_phi_75_76_ladder_2 = _2769;
                frontier_phi_75_76_ladder_3 = _2767;
                frontier_phi_75_76_ladder_4 = _2765;
                frontier_phi_75_76_ladder_5 = _2763;
            }
            _2909 = frontier_phi_75_76_ladder_5;
            _2911 = frontier_phi_75_76_ladder_4;
            _2913 = frontier_phi_75_76_ladder_3;
            _2915 = frontier_phi_75_76_ladder_2;
            _2917 = frontier_phi_75_76_ladder;
            _2919 = frontier_phi_75_76_ladder_1;
        }
        float _2924 = isnan(1.0) ? _965 : (isnan(_965) ? 1.0 : min(_965, 1.0));
        _2642 = (_2924 * _2915) + _2321;
        _2644 = (_2924 * _2917) + _2322;
        _2646 = (_2924 * _2919) + _2323;
        _2648 = ((_2909 * 0.039999999105930328369140625) * _2924) + _2477;
        _2650 = ((_2911 * 0.039999999105930328369140625) * _2924) + _2478;
        _2652 = ((_2913 * 0.039999999105930328369140625) * _2924) + _2479;
    }
    else
    {
        _2642 = _2321;
        _2644 = _2322;
        _2646 = _2323;
        _2648 = _2477;
        _2650 = _2478;
        _2652 = _2479;
    }
    uint _2658 = _941 + uint(cbMatDynParam._m0[0u].w);
    float _2664 = ((_843 * (_831 - (_831 * _804))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2658].x;
    float _2665 = ((_843 * (_832 - (_832 * _804))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2658].y;
    float _2666 = ((_843 * (_833 - (_833 * _804))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2658].z;
    float _4550 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _4561 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4572 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _2683 = (((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2642 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _965))) + ((_2648 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1769)) * cbPerFrame._m0[3u].x)) + _2664;
    float _2685 = (_2665 + ((_2650 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1769)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2644 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _965)));
    float _2687 = (_2666 + ((_2652 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1769)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2646 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _965)));
    float _4598 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2700 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    uint _2701 = _940 + 6u;
    float _2709 = _902 / cbSceneParam._m0[86u].x;
    float _2710 = _903 / cbSceneParam._m0[86u].y;
    vec4 _2724 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2709, _2710, (log2((isnan(cbSceneParam._m0[77u].w) ? _889 : (isnan(_889) ? cbSceneParam._m0[77u].w : min(_889, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2726 = _2724.x;
    float _2727 = _2724.y;
    float _2728 = _2724.z;
    float _2729 = _2724.w;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    if (_889 > cbSceneParam._m0[78u].w)
    {
        float _2788 = isnan(_889) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _889 : min(cbSceneParam._m0[80u].w, _889));
        float _2789 = _2788 / _889;
        float _2800 = _2789 * _284;
        float _2801 = _285 * _2789;
        float _2802 = (-0.0) - _2801;
        float _2803 = _2789 * _286;
        float _2805 = (cbSceneParam._m0[77u].w * _2802) / _2788;
        float _2806 = _2805 + cbSceneParam._m0[79u].w;
        float _2807 = cbSceneParam._m0[79u].w - _2801;
        float _2813 = sqrt(((_2800 * _2800) + (_2801 * _2801)) + (_2803 * _2803));
        float _2816 = (1.0 - (cbSceneParam._m0[77u].w / _2788)) * _2813;
        float _2821 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2823 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3031;
        if (abs((_2802 - _2805) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3031 = ((((_2806 > 0.0) ? exp2(_2821 * _2806) : (2.0 - exp2(_2823 * _2806))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2816;
        }
        else
        {
            float _2970 = 1.0 / cbSceneParam._m0[80u].x;
            float _2971 = isnan(_2807) ? _2806 : (isnan(_2806) ? _2807 : max(_2806, _2807));
            float _2972 = isnan(_2807) ? _2806 : (isnan(_2806) ? _2807 : min(_2806, _2807));
            float _2981 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : min(_2971, 0.0));
            float _2982 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : min(_2972, 0.0));
            _3031 = ((abs(_2813 / _2802) * cbSceneParam._m0[80u].y) * ((((_2981 - _2982) * 2.0) - ((exp2(_2821 * (isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0)))) - exp2(_2821 * (isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0))))) * _2970)) - ((exp2(_2823 * _2981) - exp2(_2823 * _2982)) * _2970))) + (_2816 * cbSceneParam._m0[80u].z);
        }
        vec4 _3033 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2709, _2710, 1.0), 0.0);
        float _3042 = exp2((_3031 * (-1.44269502162933349609375)) * (1.0 - _3033.w));
        float _3043 = log2(_3042);
        float _3059 = log2(_2729);
        _2825 = (exp2(_3059 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].x)) * _3033.x) / cbSceneParam._m0[78u].x)) + _2726;
        _2827 = (exp2(_3059 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].y)) * _3033.y) / cbSceneParam._m0[78u].y)) + _2727;
        _2829 = (exp2(_3059 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].z)) * _3033.z) / cbSceneParam._m0[78u].z)) + _2728;
        _2831 = _3042 * _2729;
    }
    else
    {
        _2825 = _2726;
        _2827 = _2727;
        _2829 = _2728;
        _2831 = _2729;
    }
    float _2842 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2843 = _2842 == 3.0;
    float _2844 = log2(_2831);
    float _2848 = exp2(_2844 * cbSceneParam._m0[78u].x);
    float _2849 = exp2(_2844 * cbSceneParam._m0[78u].y);
    float _2850 = exp2(_2844 * cbSceneParam._m0[78u].z);
    float _2851 = _2848 * (isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0)));
    float _2852 = _2849 * (isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0)));
    float _2853 = _2850 * (isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0)));
    float _2862 = (_2842 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2862 * (_2843 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2825)));
    SV_Target.y = _2862 * (_2843 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2827)));
    SV_Target.z = _2862 * (_2843 ? _2853 : (_2853 + (cbSceneParam._m0[72u].w * _2829)));
    SV_Target.w = cbInstanceData._m0[_2701].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2664) * _2700) * _2848) * _2862;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2665) * _2700) * _2849) * _2862;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2666) * _2700) * _2850) * _2862;
    SV_Target_1.w = cbInstanceData._m0[_2701].w;
}


