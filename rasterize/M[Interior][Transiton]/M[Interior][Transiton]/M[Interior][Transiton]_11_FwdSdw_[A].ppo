#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1035;
float _3283;
float _3284;
float _3285;
float _3286;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _296 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _334 = cbMtdParam._m0[27u].w + _275;
    float _335 = cbMtdParam._m0[28u].x + _276;
    float _336 = cbMtdParam._m0[28u].y + _277;
    float _353 = (-0.0) - dot(vec3(_334, _335, _336), vec3(_207 * _199, _207 * _200, _207 * _201));
    float _354 = (-0.0) - dot(vec3(_334, _335, _336), vec3(_218 * TANGENT.x, _218 * TANGENT.y, _218 * TANGENT.z));
    float _355 = (-0.0) - dot(vec3(_334, _335, _336), vec3((-0.0) - (NORMAL.x * _214), (-0.0) - (NORMAL.y * _214), (-0.0) - (NORMAL.z * _214)));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _362 = _359 * _355;
    float _365 = ((_359 * _353) + (((_296.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w)) * cbMtdParam._m0[24u].x;
    float _366 = ((_359 * _354) + (((_296.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x)) * cbMtdParam._m0[23u].w;
    float _367 = fract(TEXCOORD.x);
    float _368 = fract(TEXCOORD.y);
    float _374;
    if (_365 > 0.0)
    {
        _374 = (1.0 - _367) / _365;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_365 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _367) / _365;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _374 = frontier_phi_3_2_ladder;
    }
    float _382;
    if (_366 > 0.0)
    {
        _382 = (1.0 - _368) / _366;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_366 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _368) / _366;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _382 = frontier_phi_7_6_ladder;
    }
    float _386 = (_362 > 0.0) ? (cbMtdParam._m0[17u].x / _362) : 5000.0;
    float _387 = isnan(_382) ? _374 : (isnan(_374) ? _382 : min(_374, _382));
    float _388 = isnan(_386) ? _387 : (isnan(_387) ? _386 : min(_387, _386));
    float _392 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _399 = ((_388 * _362) + _392) / _392;
    vec4 _424 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_367 + (-0.5)) + (_388 * _365)) / _399) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_368 + (-0.5)) + (_388 * _366)) / _399) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _434 = cbMtdParam._m0[9u].x * _424.x;
    float _435 = cbMtdParam._m0[9u].y * _424.y;
    float _436 = cbMtdParam._m0[9u].z * _424.z;
    vec4 _460 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _465 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _471 = ((_460.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _473 = (-0.0) - (cbMtdParam._m0[21u].x * ((_460.x * 0.5) + (-0.25)));
    float _474 = fract(_465);
    float _476 = fract(_465 + 0.5);
    vec4 _503 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_474 * _473) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_471 * _474) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _505 = _503.x;
    float _511 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_476 * _473) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_471 * _476) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _505) * abs((_474 * 2.0) + (-1.0))) + _505;
    float _520 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _524 = fract(abs(_520));
    float _533 = sin(cbMtdParam._m0[21u].z);
    float _534 = cos(cbMtdParam._m0[21u].z);
    float _535 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _536 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _566 = abs(cbMtdParam._m0[20u].w * (((_511 - (((_520 >= ((-0.0) - _520)) ? _524 : ((-0.0) - _524)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_536, (-0.0) - _533, _534 * _535) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_536, _534, _535 * _533) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _570 = (((_566 * cbMtdParam._m0[18u].y) - _511) * _566) + _511;
    float _3305 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    vec4 _583 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _598 = (cbMtdParam._m0[14u].x * _583.x) * cbMtdParam._m0[19u].x;
    float _599 = (cbMtdParam._m0[14u].y * _583.y) * cbMtdParam._m0[19u].x;
    float _600 = (cbMtdParam._m0[14u].z * _583.z) * cbMtdParam._m0[19u].x;
    float _610 = exp2(log2(_571) * cbMtdParam._m0[20u].x);
    float _3316 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3327 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3338 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _639 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _643 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _644 = _275 * _643;
    float _645 = _276 * _643;
    float _646 = _277 * _643;
    vec4 _651 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _653 = _651.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _750 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
        float _756 = (cbMatDynParam._m0[5u].x * _750) + cbMatDynParam._m0[5u].y;
        float _3349 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _761 = (cbMatDynParam._m0[5u].z * _750) + cbMatDynParam._m0[5u].w;
        float _3360 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) - _757)) + _757) < ((_653 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _666 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _667 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _680 = uint(roundEven(NORMAL.w)) * 13u;
    uint _682 = _680 + 9u;
    uint _683 = _682 + uint(cbMatDynParam._m0[0u].w);
    float _689 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * cbInstanceData._m0[_683].x;
    float _690 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_683].y;
    float _691 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_683].z;
    float _3371 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _3382 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    vec4 _703 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _666, cbSceneParam._m0[86u].y * _667));
    float _706 = _703.x * TEXCOORD_4;
    float _707 = (-0.0) - _644;
    float _708 = (-0.0) - _645;
    float _709 = (-0.0) - _646;
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1034;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _822 = (cbModelParam._m0[37u].x * ((((fma(_739, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _824 = (cbModelParam._m0[37u].y * ((((fma(_739, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _825 = (((((fma(_739, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_822, _824, _825), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_822, _824, _825), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_822, _824, _825), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_822, _824, _825), 0.0);
        float _862 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_828.x + (-0.5));
        float _864 = _862 * (_828.y + (-0.5));
        float _865 = _862 * (_828.z + (-0.5));
        float _872 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_835.x + (-0.5));
        float _874 = _872 * (_835.y + (-0.5));
        float _875 = _872 * (_835.z + (-0.5));
        float _882 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_842.x + (-0.5));
        float _884 = _882 * (_842.y + (-0.5));
        float _885 = _882 * (_842.z + (-0.5));
        float _892 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_849.x + (-0.5));
        float _894 = _892 * (_849.y + (-0.5));
        float _895 = _892 * (_849.z + (-0.5));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = _863 * 0.5;
        float _900 = _873 * 0.5;
        float _901 = _883 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _916 = (dot(vec3(0.0), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _926 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3441 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_928 + 1.0))) + _933) * _896;
        float _943 = _864 * 0.5;
        float _944 = _874 * 0.5;
        float _945 = _884 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(0.0), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3474 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_970 + 1.0))) + _975) * _897;
        float _985 = _865 * 0.5;
        float _986 = _875 * 0.5;
        float _987 = _885 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(0.0), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3507 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_1012 + 1.0))) + _1017) * _898;
        _1034 = _865;
        _1036 = _864;
        _1037 = _863;
        _1038 = _875;
        _1039 = _874;
        _1040 = _873;
        _1041 = _885;
        _1042 = _884;
        _1043 = _883;
        _1044 = _898;
        _1045 = _897;
        _1046 = _896;
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
    }
    else
    {
        _1034 = _1035;
        _1036 = _1035;
        _1037 = _1035;
        _1038 = _1035;
        _1039 = _1035;
        _1040 = _1035;
        _1041 = _1035;
        _1042 = _1035;
        _1043 = _1035;
        _1044 = _1035;
        _1045 = _1035;
        _1046 = _1035;
        _1047 = 0.0;
        _1048 = 0.0;
        _1049 = 0.0;
    }
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1105 = (cbModelParam._m0[38u].x * ((((fma(_739, cbModelParam._m0[30u].z, fma(_735, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _731)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1106 = (cbModelParam._m0[38u].y * ((((fma(_739, cbModelParam._m0[31u].z, fma(_735, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _731)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1107 = (((((fma(_739, cbModelParam._m0[32u].z, fma(_735, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _731)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1142 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1109.x + (-0.5));
        float _1144 = _1142 * (_1109.y + (-0.5));
        float _1145 = _1142 * (_1109.z + (-0.5));
        float _1152 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1116.x + (-0.5));
        float _1154 = _1152 * (_1116.y + (-0.5));
        float _1155 = _1152 * (_1116.z + (-0.5));
        float _1162 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1123.x + (-0.5));
        float _1164 = _1162 * (_1123.y + (-0.5));
        float _1165 = _1162 * (_1123.z + (-0.5));
        float _1172 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1130.x + (-0.5));
        float _1174 = _1172 * (_1130.y + (-0.5));
        float _1175 = _1172 * (_1130.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(0.0), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3570 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_1206 + 1.0))) + _1211) * _1176;
        float _1221 = _1144 * 0.5;
        float _1222 = _1154 * 0.5;
        float _1223 = _1164 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(0.0), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3603 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1248 + 1.0))) + _1253) * _1177;
        float _1263 = _1145 * 0.5;
        float _1264 = _1155 * 0.5;
        float _1265 = _1165 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(0.0), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3636 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1290 + 1.0))) + _1295) * _1178;
        _1312 = _1145;
        _1313 = _1144;
        _1314 = _1143;
        _1315 = _1155;
        _1316 = _1154;
        _1317 = _1153;
        _1318 = _1165;
        _1319 = _1164;
        _1320 = _1163;
        _1321 = _1178;
        _1322 = _1177;
        _1323 = _1176;
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
    }
    else
    {
        _1312 = _1035;
        _1313 = _1035;
        _1314 = _1035;
        _1315 = _1035;
        _1316 = _1035;
        _1317 = _1035;
        _1318 = _1035;
        _1319 = _1035;
        _1320 = _1035;
        _1321 = _1035;
        _1322 = _1035;
        _1323 = _1035;
        _1324 = 0.0;
        _1325 = 0.0;
        _1326 = 0.0;
    }
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1047)) + _1047;
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1048)) + _1048;
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1049)) + _1049;
    float _1359 = fma(_1338, cbSceneParam._m0[89u].z, fma(_1337, cbSceneParam._m0[89u].y, _1336 * cbSceneParam._m0[89u].x));
    float _1362 = fma(_1338, cbSceneParam._m0[90u].z, fma(_1337, cbSceneParam._m0[90u].y, _1336 * cbSceneParam._m0[90u].x));
    float _1365 = fma(_1338, cbSceneParam._m0[91u].z, fma(_1337, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1336));
    float _1380 = _644 * (-0.5);
    float _1381 = _645 * (-0.5);
    float _1382 = _646 * (-0.5);
    float _1383 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1386 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1389 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1423;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1396 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1034, _1038, _1041, _1044));
        float _1400 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1404 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1411 = dot(vec4(cbModelParam._m0[39u]), vec4(_1380, _1381, _1382, 1.0));
        _1423 = dot(vec3(isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1411) ? 0.0 : (isnan(0.0) ? _1411 : max(0.0, _1411))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1423 = 1.0;
    }
    float _1434;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1425 = dot(vec4(cbModelParam._m0[40u]), vec4(_1380, _1381, _1382, 1.0));
        _1434 = dot(vec3(isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1434 = 1.0;
    }
    float _1438 = (_1434 * cbModelParam._m0[1u].x) + (_1423 * (1.0 - cbModelParam._m0[1u].x));
    float _1447 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1495 = fma(_739, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731)) + cbModelParam._m0[13u].w;
        float _1499 = fma(_739, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731)) + cbModelParam._m0[14u].w;
        float _1503 = fma(_739, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731)) + cbModelParam._m0[15u].w;
        float _1506 = fma(_709, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707));
        float _1509 = fma(_709, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707));
        float _1512 = fma(_709, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707));
        float _1538;
        if (_1506 > 0.0)
        {
            _1538 = abs((1.0 - _1495) / _1506);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1495 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1538 = frontier_phi_25_23_ladder;
        }
        float _1708;
        if (_1509 > 0.0)
        {
            _1708 = abs((1.0 - _1499) / _1509);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1499 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1708 = frontier_phi_34_30_ladder;
        }
        float _2102;
        if (_1512 > 0.0)
        {
            _2102 = abs((1.0 - _1503) / _1512);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1503 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2102 = frontier_phi_46_41_ladder;
        }
        float _2104 = isnan(_1708) ? _1538 : (isnan(_1538) ? _1708 : min(_1538, _1708));
        float _2105 = isnan(_2102) ? _2104 : (isnan(_2104) ? _2102 : min(_2104, _2102));
        float _2109 = (_2105 * _1506) + _1495;
        float _2110 = (_2105 * _1509) + _1499;
        float _2111 = (_2105 * _1512) + _1503;
        float _2112 = _2105 * 9.9999997473787516355514526367188e-05;
        float _2114 = (-1.0) - _2112;
        float _2116 = _2112 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2111 > _2116) || ((_2111 < _2114) || ((_2110 > _2116) || ((_2110 < _2114) || ((_2109 < _2114) || (_2109 > _2116))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2111, cbModelParam._m0[9u].z, fma(_2110, cbModelParam._m0[9u].y, _2109 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2111, cbModelParam._m0[10u].z, fma(_2110, cbModelParam._m0[10u].y, _2109 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2111, cbModelParam._m0[11u].z, fma(_2110, cbModelParam._m0[11u].y, _2109 * cbModelParam._m0[11u].x))), _1447);
            frontier_phi_24_46_ladder = _2371.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2371.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2371.x * cbModelParam._m0[1u].y;
        }
        _1528 = frontier_phi_24_46_ladder_2;
        _1530 = frontier_phi_24_46_ladder_1;
        _1532 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1516 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_707, _708, _709), _1447);
        _1528 = _1516.x * cbModelParam._m0[1u].y;
        _1530 = _1516.y * cbModelParam._m0[1u].y;
        _1532 = _1516.z * cbModelParam._m0[1u].y;
    }
    float _1535 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1623;
    float _1625;
    float _1627;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1587 = fma(_739, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731)) + cbModelParam._m0[21u].w;
        float _1591 = fma(_739, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731)) + cbModelParam._m0[22u].w;
        float _1595 = fma(_739, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731)) + cbModelParam._m0[23u].w;
        float _1598 = fma(_709, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707));
        float _1601 = fma(_709, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707));
        float _1604 = fma(_709, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707));
        float _1713;
        if (_1598 > 0.0)
        {
            _1713 = abs((1.0 - _1587) / _1598);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1587 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1713 = frontier_phi_36_32_ladder;
        }
        float _2129;
        if (_1601 > 0.0)
        {
            _2129 = abs((1.0 - _1591) / _1601);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1591 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2129 = frontier_phi_48_43_ladder;
        }
        float _2510;
        if (_1604 > 0.0)
        {
            _2510 = abs((1.0 - _1595) / _1604);
        }
        else
        {
            float frontier_phi_60_55_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_60_55_ladder = abs((_1595 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_60_55_ladder = 5000.0;
            }
            _2510 = frontier_phi_60_55_ladder;
        }
        float _2512 = isnan(_2129) ? _1713 : (isnan(_1713) ? _2129 : min(_1713, _2129));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _1598) + _1587;
        float _2518 = (_2513 * _1601) + _1591;
        float _2519 = (_2513 * _1604) + _1595;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2520;
        float _2523 = _2520 + 1.0;
        float frontier_phi_33_60_ladder;
        float frontier_phi_33_60_ladder_1;
        float frontier_phi_33_60_ladder_2;
        if ((_2519 > _2523) || ((_2519 < _2521) || ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 < _2521) || (_2517 > _2523))))))
        {
            frontier_phi_33_60_ladder = 0.0;
            frontier_phi_33_60_ladder_1 = 0.0;
            frontier_phi_33_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2653 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2519, cbModelParam._m0[17u].z, fma(_2518, cbModelParam._m0[17u].y, _2517 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2519, cbModelParam._m0[18u].z, fma(_2518, cbModelParam._m0[18u].y, _2517 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2519, cbModelParam._m0[19u].z, fma(_2518, cbModelParam._m0[19u].y, _2517 * cbModelParam._m0[19u].x))), _1535);
            frontier_phi_33_60_ladder = _2653.z * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_1 = _2653.y * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_2 = _2653.x * cbModelParam._m0[1u].z;
        }
        _1623 = frontier_phi_33_60_ladder_2;
        _1625 = frontier_phi_33_60_ladder_1;
        _1627 = frontier_phi_33_60_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_707, _708, _709), _1535);
        _1623 = _1607.x * cbModelParam._m0[1u].z;
        _1625 = _1607.y * cbModelParam._m0[1u].z;
        _1627 = _1607.z * cbModelParam._m0[1u].z;
    }
    float _1639 = _706 * 0.01200000010430812835693359375;
    float _1641 = _1639 * ((cbModelParam._m0[1u].w * (_1623 - _1528)) + _1528);
    float _1642 = _1639 * ((cbModelParam._m0[1u].w * (_1625 - _1530)) + _1530);
    float _1643 = _1639 * ((cbModelParam._m0[1u].w * (_1627 - _1532)) + _1532);
    float _1646 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, _1641 * cbSceneParam._m0[91u].x));
    float _1687 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1691 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1695 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1699 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1700 = _1687 / _1699;
    float _1701 = _1691 / _1699;
    float _1702 = _1695 / _1699;
    float _1850;
    float _1851;
    float _1852;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1729 = ((uint(_1702 > cbSceneParam._m0[59u].y) + uint(_1702 > cbSceneParam._m0[59u].x)) + uint(_1702 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1730 = _1729 + 43u;
        uint _1738 = _1729 + 44u;
        uint _1746 = _1729 + 45u;
        uint _1754 = _1729 + 46u;
        float _1765 = fma(_1699, cbSceneParam._m0[_1730].w, fma(_1695, cbSceneParam._m0[_1730].z, fma(_1691, cbSceneParam._m0[_1730].y, _1687 * cbSceneParam._m0[_1730].x)));
        float _1769 = fma(_1699, cbSceneParam._m0[_1738].w, fma(_1695, cbSceneParam._m0[_1738].z, fma(_1691, cbSceneParam._m0[_1738].y, _1687 * cbSceneParam._m0[_1738].x)));
        float _1777 = fma(_1699, cbSceneParam._m0[_1754].w, fma(_1695, cbSceneParam._m0[_1754].z, fma(_1691, cbSceneParam._m0[_1754].y, _1687 * cbSceneParam._m0[_1754].x)));
        float _1782 = cbSceneParam._m0[33u].z * _1777;
        float _1784 = cbSceneParam._m0[33u].w * _1777;
        float _1787 = fma(_1699, cbSceneParam._m0[_1746].w, fma(_1695, cbSceneParam._m0[_1746].z, fma(_1691, cbSceneParam._m0[_1746].y, _1687 * cbSceneParam._m0[_1746].x))) / _1777;
        float _1835 = (cbSceneParam._m0[33u].x - sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702))) * cbSceneParam._m0[33u].y;
        float _3762 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1843 = (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1782 + _1765) / _1777, (_1784 + _1769) / _1777), _1787), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1784 + _1765) / _1777, (_1769 - _1782) / _1777), _1787), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1765 - _1782) / _1777, (_1769 - _1784) / _1777), _1787), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1765 - _1784) / _1777, (_1782 + _1769) / _1777), _1787), 0.0)).x), vec4(0.25)));
        _1850 = 1.0 - (_1843 * cbSceneParam._m0[34u].x);
        _1851 = 1.0 - (_1843 * cbSceneParam._m0[34u].y);
        _1852 = 1.0 - (_1843 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1850 = 1.0;
        _1851 = 1.0;
        _1852 = 1.0;
    }
    float _1916;
    float _1918;
    float _1920;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1904 = fma(_1699, cbSceneParam._m0[63u].w, fma(_1695, cbSceneParam._m0[63u].z, fma(_1691, cbSceneParam._m0[63u].y, _1687 * cbSceneParam._m0[63u].x)));
        float _1905 = fma(_1699, cbSceneParam._m0[60u].w, fma(_1695, cbSceneParam._m0[60u].z, fma(_1691, cbSceneParam._m0[60u].y, _1687 * cbSceneParam._m0[60u].x))) / _1904;
        float _1906 = fma(_1699, cbSceneParam._m0[61u].w, fma(_1695, cbSceneParam._m0[61u].z, fma(_1691, cbSceneParam._m0[61u].y, _1687 * cbSceneParam._m0[61u].x))) / _1904;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1905 >= cbSceneParam._m0[64u].x) && (_1906 >= cbSceneParam._m0[64u].y)) && (_1905 <= cbSceneParam._m0[64u].z)) && (_1906 <= cbSceneParam._m0[64u].w))
        {
            float _2142 = fma(_1699, cbSceneParam._m0[62u].w, fma(_1695, cbSceneParam._m0[62u].z, fma(_1691, cbSceneParam._m0[62u].y, _1687 * cbSceneParam._m0[62u].x))) / _1904;
            float _2146 = isnan(cbSceneParam._m0[41u].w) ? _2142 : (isnan(_2142) ? cbSceneParam._m0[41u].w : max(_2142, cbSceneParam._m0[41u].w));
            float _2189 = (cbSceneParam._m0[33u].x - sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702))) * cbSceneParam._m0[33u].y;
            float _3778 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
            float _2196 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1905, cbSceneParam._m0[33u].w + _1906), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1905, _1906 - cbSceneParam._m0[33u].z), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1905 - cbSceneParam._m0[33u].z, _1906 - cbSceneParam._m0[33u].w), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1905 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1906), _2146), 0.0)).x), vec4(0.25)));
            float _2200 = 1.0 - (_2196 * cbSceneParam._m0[34u].x);
            float _2201 = 1.0 - (_2196 * cbSceneParam._m0[34u].y);
            float _2202 = 1.0 - (_2196 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2202) ? _1852 : (isnan(_1852) ? _2202 : min(_1852, _2202));
            frontier_phi_45_44_ladder_1 = isnan(_2201) ? _1851 : (isnan(_1851) ? _2201 : min(_1851, _2201));
            frontier_phi_45_44_ladder_2 = isnan(_2200) ? _1850 : (isnan(_1850) ? _2200 : min(_1850, _2200));
        }
        else
        {
            frontier_phi_45_44_ladder = _1852;
            frontier_phi_45_44_ladder_1 = _1851;
            frontier_phi_45_44_ladder_2 = _1850;
        }
        _1916 = frontier_phi_45_44_ladder_2;
        _1918 = frontier_phi_45_44_ladder_1;
        _1920 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1916 = _1850;
        _1918 = _1851;
        _1920 = _1852;
    }
    uvec4 _1925 = floatBitsToUint(cbInstanceData._m0[_680 + 5u]);
    uint _1927 = _1925.x * 14u;
    uint _1928 = _1927 + 13u;
    float _1933 = _706 + (-1.0);
    float _1936 = (cbLight._m0[_1928].x * _1933) + 1.0;
    float _1937 = (cbLight._m0[_1928].y * _1933) + 1.0;
    uint _1938 = _1927 + 5u;
    float _1944 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1948 = _1927 + 4u;
    float _1957 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1961 = _1927 | 1u;
    float _1972 = dot(vec3(cbLight._m0[_1927].xyz), vec3(0.0));
    float _1975 = dot(vec3(cbLight._m0[_1961].xyz), vec3(0.0));
    float _3814 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _3825 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1980 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * 0.3183098733425140380859375;
    float _1982 = (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * 0.3183098733425140380859375;
    float _1989 = ((cbLight._m0[_1938].x * _1944) * _1982) + (((cbLight._m0[_1948].x * _1916) * _1957) * _1980);
    float _1990 = ((_1944 * cbLight._m0[_1938].y) * _1982) + (((cbLight._m0[_1948].y * _1918) * _1957) * _1980);
    float _1991 = ((_1944 * cbLight._m0[_1938].z) * _1982) + (((cbLight._m0[_1948].z * _1920) * _1957) * _1980);
    uint _1992 = _1927 + 8u;
    float _1998 = cbLight._m0[_1927].x + _644;
    float _1999 = cbLight._m0[_1927].y + _645;
    float _2000 = cbLight._m0[_1927].z + _646;
    float _2004 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
    float _2008 = dot(vec3(0.0), vec3(cbLight._m0[_1927].xyz));
    float _3836 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _2012 = dot(vec3(0.0), vec3(_644, _645, _646));
    float _3847 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _2016 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_1998 * _2004, _1999 * _2004, _2000 * _2004));
    float _3858 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2027 = (exp2(log2(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2033 = (0.5 / ((_2011 + 9.9999999392252902907785028219223e-09) + _2015)) * _2011;
    float _3869 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * 0.31831014156341552734375;
    uint _2049 = _1927 + 9u;
    float _2055 = cbLight._m0[_1961].x + _644;
    float _2056 = cbLight._m0[_1961].y + _645;
    float _2057 = cbLight._m0[_1961].z + _646;
    float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
    float _2065 = dot(vec3(0.0), vec3(cbLight._m0[_1961].xyz));
    float _3880 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _2069 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2055 * _2061, _2056 * _2061, _2057 * _2061));
    float _3891 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2078 = (exp2(log2(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2082 = (0.5 / ((_2068 + 9.9999999392252902907785028219223e-09) + _2015)) * _2068;
    float _3902 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2084 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 0.31831014156341552734375;
    float _2094 = (((_2078 * cbLight._m0[_2049].x) * _2084) * _1944) + ((((cbLight._m0[_1992].x * _1916) * _2027) * _2035) * _1957);
    float _2095 = (((_2078 * cbLight._m0[_2049].y) * _2084) * _1944) + ((((cbLight._m0[_1992].y * _1918) * _2027) * _2035) * _1957);
    float _2096 = (((_2078 * cbLight._m0[_2049].z) * _2084) * _1944) + ((((cbLight._m0[_1992].z * _1920) * _2027) * _2035) * _1957);
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    if (_1925.y == 0u)
    {
        uvec4 _2214 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2215 = _2214.x;
        uint _2226 = uint((float(_2214.y) * floor(float(uint(cbSceneParam._m0[85u].y * _667) / _2215))) + floor(float(uint(cbSceneParam._m0[85u].x * _666) / _2215)));
        float _2236 = (log2(_1702 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2237 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        uint _2240 = uint(isnan(14.0) ? _2237 : (isnan(_2237) ? 14.0 : min(_2237, 14.0)));
        uvec4 _2245 = texelFetch(g_lightClusterGridBuffer, int(((_2240 << 2u) + (_2226 << 6u)) >> 2u));
        uint _2246 = _2245.x;
        uint _2247 = _2214.z;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        if (((((1u << ((_2247 >> 4u) & 15u)) + 4294967295u) & _2246) == 0u) || ((_2247 & 240u) == 0u))
        {
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
        }
        else
        {
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2391;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            uint _2571 = 0u;
            uint _2580;
            bool _2581;
            for (;;)
            {
                _2580 = texelFetch(g_lightClassification, int((((_2240 << 5u) + (_2226 << 9u)) + (_2571 << 2u)) >> 2u)).x;
                _2581 = _2580 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2581)
                {
                    frontier_phi_71_pred = _2568;
                    frontier_phi_71_pred_1 = _2567;
                    frontier_phi_71_pred_2 = _2566;
                    frontier_phi_71_pred_3 = _2565;
                    frontier_phi_71_pred_4 = _2569;
                    frontier_phi_71_pred_5 = _2570;
                }
                else
                {
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    uint _2737;
                    _2731 = _2565;
                    _2732 = _2566;
                    _2733 = _2567;
                    _2734 = _2568;
                    _2735 = _2569;
                    _2736 = _2570;
                    _2737 = _2580;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    for (;;)
                    {
                        uint _2741 = uint(findLSB(_2737)) + (_2571 << 5u);
                        uint _2738 = (_2737 + 4294967295u) & _2737;
                        uint _2743 = _2741 * 48u;
                        vec4 _2757 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 3u)).x));
                        uint _2763 = (_2741 * 48u) + 4u;
                        vec4 _2776 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 3u)).x));
                        uint _2782 = (_2741 * 48u) + 8u;
                        vec3 _2793 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2782)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 2u)).x));
                        float _2797 = _2757.x - _1700;
                        float _2798 = _2757.y - _1701;
                        float _2799 = _2757.z - _1702;
                        float _2800 = dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799));
                        float _2803 = inversesqrt(_2800);
                        float _2812 = 1.0 - (_2800 * _2757.w);
                        float _3923 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2813 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                        float _2814 = sqrt(_2800) * _2776.w;
                        float _2817 = 1.39999997615814208984375 / (_2814 + 1.39999997615814208984375);
                        float _2818 = _2817 * _2817;
                        float _2821 = ((1.0 - _2818) * dot(vec3(0.0), vec3(_2803 * _2797, _2803 * _2798, _2803 * _2799))) + _2818;
                        float _2824 = _2814 * _2814;
                        float _2828 = ((isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0))) * _2813) / ((_2824 * 0.699999988079071044921875) + 1.0);
                        float _2832 = (-0.0) - _1700;
                        float _2833 = (-0.0) - _1701;
                        float _2834 = (-0.0) - _1702;
                        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
                        float _2842 = dot(vec3(0.0), vec3(_2838 * _2832, _2838 * _2833, _2838 * _2834));
                        float _3939 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _3950 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2846 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
                        float _2850 = (0.5 / (((isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) + 9.9999999392252902907785028219223e-09) + _2846)) * _2846;
                        float _3961 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2859 = (((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 3.1415927410125732421875) / ((_2824 * 2.1991131305694580078125) + 3.141590118408203125)) * _2813;
                        _2661 = (_2828 * _2776.x) + _2734;
                        _2662 = (_2828 * _2776.y) + _2735;
                        _2663 = (_2828 * _2776.z) + _2736;
                        _2658 = (_2859 * _2793.x) + _2731;
                        _2659 = (_2859 * _2793.y) + _2732;
                        _2660 = (_2859 * _2793.z) + _2733;
                        if (_2738 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2663;
                            _2737 = _2738;
                        }
                    }
                    frontier_phi_71_pred = _2661;
                    frontier_phi_71_pred_1 = _2660;
                    frontier_phi_71_pred_2 = _2659;
                    frontier_phi_71_pred_3 = _2658;
                    frontier_phi_71_pred_4 = _2662;
                    frontier_phi_71_pred_5 = _2663;
                }
                _2387 = frontier_phi_71_pred;
                _2385 = frontier_phi_71_pred_1;
                _2383 = frontier_phi_71_pred_2;
                _2381 = frontier_phi_71_pred_3;
                _2389 = frontier_phi_71_pred_4;
                _2391 = frontier_phi_71_pred_5;
                uint _2572 = _2571 + 1u;
                if (_2572 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2565 = _2381;
                    _2566 = _2383;
                    _2567 = _2385;
                    _2568 = _2387;
                    _2569 = _2389;
                    _2570 = _2391;
                    _2571 = _2572;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
        }
        uvec4 _2394 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2395 = _2394.z;
        uint _2397 = (_2395 >> 8u) & 15u;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        if (((4294967295u << _2397) & _2246) == 0u)
        {
            _2536 = _2380;
            _2538 = _2382;
            _2540 = _2384;
            _2542 = _2386;
            _2544 = _2388;
            _2546 = _2390;
        }
        else
        {
            float _2561 = inversesqrt(dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2397 < ((_2395 >> 12u) & 15u))
            {
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2714 = _2380;
                float _2715 = _2382;
                float _2716 = _2384;
                float _2717 = _2386;
                float _2718 = _2388;
                float _2719 = _2390;
                uint _2720 = _2397;
                uint _2729;
                bool _2730;
                for (;;)
                {
                    _2729 = texelFetch(g_lightClassification, int((((_2240 << 5u) + (_2226 << 9u)) + (_2720 << 2u)) >> 2u)).x;
                    _2730 = _2729 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2730)
                    {
                        frontier_phi_82_pred = _2717;
                        frontier_phi_82_pred_1 = _2716;
                        frontier_phi_82_pred_2 = _2715;
                        frontier_phi_82_pred_3 = _2714;
                        frontier_phi_82_pred_4 = _2719;
                        frontier_phi_82_pred_5 = _2718;
                    }
                    else
                    {
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _2886 = _2714;
                        float _2887 = _2715;
                        float _2888 = _2716;
                        float _2889 = _2717;
                        float _2890 = _2718;
                        float _2891 = _2719;
                        uint _2892 = _2729;
                        uint _2893;
                        vec4 _2918;
                        float _2919;
                        vec4 _2934;
                        vec3 _2946;
                        vec4 _2962;
                        vec4 _2977;
                        float _3023;
                        bool _3024;
                        for (;;)
                        {
                            uint _2903 = ((_2720 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2892));
                            _2893 = (_2892 + 4294967295u) & _2892;
                            uint _2905 = _2903 * 40u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            _2919 = _2918.w;
                            uint _2921 = (_2903 * 40u) + 4u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2936 = (_2903 * 40u) + 8u;
                            _2946 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x));
                            uint _2949 = (_2903 * 40u) + 16u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2964 = (_2903 * 40u) + 20u;
                            _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2979 = (_2903 * 40u) + 24u;
                            vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2998 = (_2903 * 40u) + 28u;
                            vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            _3023 = fma(_1702, _3011.z, fma(_1701, _3011.y, _3011.x * _1700)) + _3011.w;
                            _3024 = !((fma(_1702, _2992.z, fma(_1701, _2992.y, _2992.x * _1700)) + _2992.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3024)
                            {
                                float _3051 = _2918.x - _1700;
                                float _3052 = _2918.y - _1701;
                                float _3053 = _2918.z - _1702;
                                float _3054 = dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053));
                                float _3057 = inversesqrt(_3054);
                                float _3058 = _3057 * _3051;
                                float _3059 = _3057 * _3052;
                                float _3060 = _3057 * _3053;
                                float _3064 = 1.0 - (_3054 / (_2919 * _2919));
                                float _3972 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                                float _3069 = sqrt(_3054) * _2934.w;
                                float _3071 = 1.39999997615814208984375 / (_3069 + 1.39999997615814208984375);
                                float _3072 = _3071 * _3071;
                                float _3073 = 1.0 - _3072;
                                float _3075 = (_3073 * dot(vec3(_3058, _3059, _3060), vec3(0.0))) + _3072;
                                float _3078 = _3069 * _3069;
                                float _3082 = (fma(_1702, _2962.z, fma(_1701, _2962.y, _2962.x * _1700)) + _2962.w) / _3023;
                                float _3083 = (fma(_1702, _2977.z, fma(_1701, _2977.y, _2977.x * _1700)) + _2977.w) / _3023;
                                float _3087 = 1.0 - dot(vec2(_3082, _3083), vec2(_3082, _3083));
                                float _3988 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                                float _3089 = _3088 * (((isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))) * _3065) / ((_3078 * 0.699999988079071044921875) + 1.0));
                                float _3099 = dot(vec3(0.0), vec3((-0.0) - (_1700 * _2561), (-0.0) - (_1701 * _2561), (-0.0) - (_1702 * _2561)));
                                float _3999 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3107 = (_3073 * dot(vec3(0.0), vec3(_3058, _3059, _3060))) + _3072;
                                float _4010 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3108 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                                float _3112 = (0.5 / (((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) + 9.9999999392252902907785028219223e-09) + _3108)) * _3108;
                                float _4021 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3119 = (_3088 * _3065) * (((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 3.1415927410125732421875) / ((_3078 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3089 * _2934.x;
                                frontier_phi_88_pred_1 = _3119 * _2946.z;
                                frontier_phi_88_pred_2 = _3119 * _2946.y;
                                frontier_phi_88_pred_3 = _3119 * _2946.x;
                                frontier_phi_88_pred_4 = _3089 * _2934.z;
                                frontier_phi_88_pred_5 = _3089 * _2934.y;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3126 = frontier_phi_88_pred;
                            _3125 = frontier_phi_88_pred_1;
                            _3124 = frontier_phi_88_pred_2;
                            _3123 = frontier_phi_88_pred_3;
                            _3128 = frontier_phi_88_pred_4;
                            _3127 = frontier_phi_88_pred_5;
                            _2876 = _3126 + _2889;
                            _2877 = _3127 + _2890;
                            _2878 = _3128 + _2891;
                            _2873 = _3123 + _2886;
                            _2874 = _3124 + _2887;
                            _2875 = _3125 + _2888;
                            if (_2893 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2893;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2876;
                        frontier_phi_82_pred_1 = _2875;
                        frontier_phi_82_pred_2 = _2874;
                        frontier_phi_82_pred_3 = _2873;
                        frontier_phi_82_pred_4 = _2878;
                        frontier_phi_82_pred_5 = _2877;
                    }
                    _2543 = frontier_phi_82_pred;
                    _2541 = frontier_phi_82_pred_1;
                    _2539 = frontier_phi_82_pred_2;
                    _2537 = frontier_phi_82_pred_3;
                    _2547 = frontier_phi_82_pred_4;
                    _2545 = frontier_phi_82_pred_5;
                    uint _2721 = _2720 + 1u;
                    if (_2721 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2714 = _2537;
                        _2715 = _2539;
                        _2716 = _2541;
                        _2717 = _2543;
                        _2718 = _2545;
                        _2719 = _2547;
                        _2720 = _2721;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2547;
                frontier_phi_62_63_ladder_1 = _2545;
                frontier_phi_62_63_ladder_2 = _2543;
                frontier_phi_62_63_ladder_3 = _2539;
                frontier_phi_62_63_ladder_4 = _2537;
                frontier_phi_62_63_ladder_5 = _2541;
            }
            else
            {
                frontier_phi_62_63_ladder = _2390;
                frontier_phi_62_63_ladder_1 = _2388;
                frontier_phi_62_63_ladder_2 = _2386;
                frontier_phi_62_63_ladder_3 = _2382;
                frontier_phi_62_63_ladder_4 = _2380;
                frontier_phi_62_63_ladder_5 = _2384;
            }
            _2536 = frontier_phi_62_63_ladder_4;
            _2538 = frontier_phi_62_63_ladder_3;
            _2540 = frontier_phi_62_63_ladder_5;
            _2542 = frontier_phi_62_63_ladder_2;
            _2544 = frontier_phi_62_63_ladder_1;
            _2546 = frontier_phi_62_63_ladder;
        }
        float _2551 = isnan(1.0) ? _706 : (isnan(_706) ? 1.0 : min(_706, 1.0));
        _2259 = (_2551 * _2542) + _1989;
        _2261 = (_2551 * _2544) + _1990;
        _2263 = (_2551 * _2546) + _1991;
        _2265 = ((_2536 * 0.039999999105930328369140625) * _2551) + _2094;
        _2267 = ((_2538 * 0.039999999105930328369140625) * _2551) + _2095;
        _2269 = ((_2540 * 0.039999999105930328369140625) * _2551) + _2096;
    }
    else
    {
        _2259 = _1989;
        _2261 = _1990;
        _2263 = _1991;
        _2265 = _2094;
        _2267 = _2095;
        _2269 = _2096;
    }
    uint _2275 = _682 + uint(cbMatDynParam._m0[0u].w);
    float _2281 = ((_610 * (_598 - (_598 * _571))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2275].x;
    float _2282 = ((_610 * (_599 - (_599 * _571))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2275].y;
    float _2283 = ((_610 * (_600 - (_600 * _571))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2275].z;
    float _4037 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4048 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4059 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _2300 = (((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_2259 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _706))) + ((_2265 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1438)) * cbPerFrame._m0[3u].x)) + _2281;
    float _2302 = (_2282 + ((_2267 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1438)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2261 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _706)));
    float _2304 = (_2283 + ((_2269 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1438)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2263 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _706)));
    float _2305 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2306 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2307 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2313 = cbMtdParam._m0[2u].x * _2281;
    float _2314 = cbMtdParam._m0[2u].y * _2282;
    float _2315 = cbMtdParam._m0[2u].z * _2283;
    float _4085 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2317 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    uint _2318 = _680 + 6u;
    float _2326 = _666 / cbSceneParam._m0[86u].x;
    float _2327 = _667 / cbSceneParam._m0[86u].y;
    vec4 _2341 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2326, _2327, (log2((isnan(cbSceneParam._m0[77u].w) ? _639 : (isnan(_639) ? cbSceneParam._m0[77u].w : min(_639, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2343 = _2341.x;
    float _2344 = _2341.y;
    float _2345 = _2341.z;
    float _2346 = _2341.w;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    if (_639 > cbSceneParam._m0[78u].w)
    {
        float _2405 = isnan(_639) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _639 : min(cbSceneParam._m0[80u].w, _639));
        float _2406 = _2405 / _639;
        float _2417 = _2406 * _275;
        float _2418 = _276 * _2406;
        float _2419 = (-0.0) - _2418;
        float _2420 = _2406 * _277;
        float _2422 = (cbSceneParam._m0[77u].w * _2419) / _2405;
        float _2423 = _2422 + cbSceneParam._m0[79u].w;
        float _2424 = cbSceneParam._m0[79u].w - _2418;
        float _2430 = sqrt(((_2417 * _2417) + (_2418 * _2418)) + (_2420 * _2420));
        float _2433 = (1.0 - (cbSceneParam._m0[77u].w / _2405)) * _2430;
        float _2438 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2440 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2671;
        if (abs((_2419 - _2422) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2671 = ((((_2423 > 0.0) ? exp2(_2438 * _2423) : (2.0 - exp2(_2440 * _2423))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2433;
        }
        else
        {
            float _2594 = 1.0 / cbSceneParam._m0[80u].x;
            float _2595 = isnan(_2424) ? _2423 : (isnan(_2423) ? _2424 : max(_2423, _2424));
            float _2596 = isnan(_2424) ? _2423 : (isnan(_2423) ? _2424 : min(_2423, _2424));
            float _2605 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : min(_2595, 0.0));
            float _2606 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : min(_2596, 0.0));
            _2671 = ((abs(_2430 / _2419) * cbSceneParam._m0[80u].y) * ((((_2605 - _2606) * 2.0) - ((exp2(_2438 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0)))) - exp2(_2438 * (isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0))))) * _2594)) - ((exp2(_2440 * _2605) - exp2(_2440 * _2606)) * _2594))) + (_2433 * cbSceneParam._m0[80u].z);
        }
        vec4 _2673 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2326, _2327, 1.0), 0.0);
        float _2682 = exp2((_2671 * (-1.44269502162933349609375)) * (1.0 - _2673.w));
        float _2683 = log2(_2682);
        float _2699 = log2(_2346);
        _2442 = (exp2(_2699 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2683 * cbSceneParam._m0[78u].x)) * _2673.x) / cbSceneParam._m0[78u].x)) + _2343;
        _2444 = (exp2(_2699 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2683 * cbSceneParam._m0[78u].y)) * _2673.y) / cbSceneParam._m0[78u].y)) + _2344;
        _2446 = (exp2(_2699 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2683 * cbSceneParam._m0[78u].z)) * _2673.z) / cbSceneParam._m0[78u].z)) + _2345;
        _2448 = _2682 * _2346;
    }
    else
    {
        _2442 = _2343;
        _2444 = _2344;
        _2446 = _2345;
        _2448 = _2346;
    }
    bool _2709;
    vec4 _2457;
    vec4 _2480;
    float _2482;
    float _2486;
    float _2487;
    float _2488;
    float _2491;
    float _2494;
    float _2497;
    float _2498;
    bool _2509;
    for (;;)
    {
        _2457 = cbMatDynParam._m0[0u];
        float _2459 = roundEven(_2457.y);
        bool _2460 = _2459 == 3.0;
        float _2462 = log2(_2448);
        float _2466 = exp2(_2462 * cbSceneParam._m0[78u].x);
        float _2467 = exp2(_2462 * cbSceneParam._m0[78u].y);
        float _2468 = exp2(_2462 * cbSceneParam._m0[78u].z);
        float _2469 = _2466 * _2305;
        float _2470 = _2467 * _2306;
        float _2471 = _2468 * _2307;
        float _2478 = _653 + (-0.5);
        _2480 = cbMtdParam._m0[1u];
        _2482 = _2480.y * _2478;
        float _2485 = (_2459 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2486 = _2485 * (_2460 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2442)));
        _2487 = _2485 * (_2460 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2444)));
        _2488 = _2485 * (_2460 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2446)));
        _2491 = ((_2313 * _2317) * _2466) * _2485;
        _2494 = ((_2314 * _2317) * _2467) * _2485;
        _2497 = ((_2315 * _2317) * _2468) * _2485;
        _2498 = _2478 * 0.999000012874603271484375;
        _2509 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2509)
        {
            if ((cbInstanceData._m0[_680 + 7u].x + _2498) < 0.5)
            {
                _2709 = true;
                break;
            }
        }
        uint _2629 = _682 + uint(_2457.w);
        if ((cbInstanceData._m0[_2629].w < 1.0) && ((cbInstanceData._m0[_2629].w + _2498) < 0.5))
        {
            _2709 = true;
            break;
        }
        if ((_2482 + 1.0) < _2480.x)
        {
            _2709 = true;
            break;
        }
        _2709 = false;
        break;
    }
    float _2864;
    if (_2709)
    {
        discard_state = true;
        _2864 = 0.0;
    }
    else
    {
        _2864 = cbInstanceData._m0[_2318].w;
    }
    SV_Target.x = _2486;
    SV_Target.y = _2487;
    SV_Target.z = _2488;
    SV_Target.w = _2864;
    SV_Target_1.x = _2491;
    SV_Target_1.y = _2494;
    SV_Target_1.z = _2497;
    SV_Target_1.w = cbInstanceData._m0[_2318].w;
    discard_exit();
}


