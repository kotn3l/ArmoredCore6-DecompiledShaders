#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1378;
float _3571;
float _3572;
float _3573;
float _3574;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _276);
    float _287 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _276);
    float _288 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _276);
    vec4 _302 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _305 = _302.x;
    vec4 _323 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _340 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _305) + cbMtdParam._m0[12u].x) * _323.x;
    float _342 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _305) + cbMtdParam._m0[12u].y) * _323.y;
    float _344 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _305) + cbMtdParam._m0[12u].z) * _323.z;
    vec4 _362 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _401 = cbMtdParam._m0[27u].w + _286;
    float _402 = cbMtdParam._m0[28u].x + _287;
    float _403 = cbMtdParam._m0[28u].y + _288;
    float _417 = (-0.0) - dot(vec3(_401, _402, _403), vec3(_216, _217, _218));
    float _418 = (-0.0) - dot(vec3(_401, _402, _403), vec3(_230, _231, _232));
    float _419 = (-0.0) - dot(vec3(_401, _402, _403), vec3((-0.0) - _223, (-0.0) - _224, (-0.0) - _225));
    float _423 = inversesqrt(dot(vec3(_417, _418, _419), vec3(_417, _418, _419)));
    float _426 = _423 * _419;
    float _427 = (_423 * _417) + ((cbMtdParam._m0[25u].w * _305) * ((_362.x * 2.0) + (-1.0)));
    float _428 = (_423 * _418) + ((cbMtdParam._m0[26u].x * _305) * ((_362.y * 2.0) + (-1.0)));
    float _429 = _427 * cbMtdParam._m0[24u].x;
    float _430 = _428 * cbMtdParam._m0[23u].w;
    float _431 = fract(TEXCOORD.x);
    float _432 = fract(TEXCOORD.y);
    float _438;
    if (_429 > 0.0)
    {
        _438 = (1.0 - _431) / _429;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_429 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _431) / _429;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _438 = frontier_phi_3_2_ladder;
    }
    float _446;
    if (_430 > 0.0)
    {
        _446 = (1.0 - _432) / _430;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_430 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _432) / _430;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _446 = frontier_phi_7_6_ladder;
    }
    bool _448 = _426 > 0.0;
    float _450 = _448 ? (cbMtdParam._m0[17u].x / _426) : 5000.0;
    float _451 = isnan(_446) ? _438 : (isnan(_438) ? _446 : min(_438, _446));
    float _452 = isnan(_450) ? _451 : (isnan(_451) ? _450 : min(_451, _450));
    float _456 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _457 = _431 + (-0.5);
    float _460 = _432 + (-0.5);
    float _463 = ((_452 * _426) + _456) / _456;
    vec4 _488 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_457 + (_452 * _429)) / _463) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_460 + (_452 * _430)) / _463) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _501 = (_488.x * _305) * cbMtdParam._m0[9u].x;
    float _502 = (_488.y * _305) * cbMtdParam._m0[9u].y;
    float _503 = (_488.z * _305) * cbMtdParam._m0[9u].z;
    float _521 = _427 * cbMtdParam._m0[26u].z;
    float _522 = _428 * cbMtdParam._m0[26u].y;
    bool _523 = _521 > 0.0;
    float _528;
    if (_523)
    {
        _528 = (1.0 - _431) / _521;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_521 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _431) / _521;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _528 = frontier_phi_11_10_ladder;
    }
    bool _530 = _522 > 0.0;
    float _535;
    if (_530)
    {
        _535 = (1.0 - _432) / _522;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_522 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _432) / _522;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _535 = frontier_phi_15_14_ladder;
    }
    float _538 = _448 ? (cbMtdParam._m0[19u].z / _426) : 5000.0;
    float _539 = isnan(_535) ? _528 : (isnan(_528) ? _535 : min(_528, _535));
    float _540 = isnan(_538) ? _539 : (isnan(_539) ? _538 : min(_539, _538));
    float _544 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _548 = ((_540 * _426) + _544) / _544;
    float _553 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _555 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _571 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_457 + (_540 * _521)) / _548) + 0.5) + _553) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_460 + (_540 * _522)) / _548) + 0.5) + _555) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _586;
    if (_523)
    {
        _586 = (1.0 - _431) / _521;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_521 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _431) / _521;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _586 = frontier_phi_19_18_ladder;
    }
    float _592;
    if (_530)
    {
        _592 = (1.0 - _432) / _522;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_522 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _432) / _522;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _592 = frontier_phi_23_22_ladder;
    }
    float _594 = isnan(_592) ? _586 : (isnan(_586) ? _592 : min(_586, _592));
    float _595 = isnan(_538) ? _594 : (isnan(_594) ? _538 : min(_594, _538));
    float _602 = ((_595 * _426) + _544) / _544;
    vec4 _622 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_457 + (_595 * _521)) / _602) + 0.5) + _553) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_460 + (_595 * _522)) / _602) + 0.5) + _555) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _624 = _622.x;
    float _634 = _305 * 0.1500000059604644775390625;
    float _645 = (_634 * ((_501 - _340) + (((((cbMtdParam._m0[10u].x * _305) * _571.x) - _501) * _305) * _624))) + _340;
    float _646 = (_634 * ((_502 - _342) + (((((cbMtdParam._m0[10u].y * _305) * _571.y) - _502) * _305) * _624))) + _342;
    float _647 = (_634 * ((_503 - _344) + (((((cbMtdParam._m0[10u].z * _305) * _571.z) - _503) * _305) * _624))) + _344;
    vec4 _660 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _664 = _660.z;
    float _667 = (_660.x * 2.0) + (-1.0);
    float _668 = (_660.y * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _3613 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _674 = sqrt(1.0 - (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))));
    vec4 _698 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _703 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _709 = ((_698.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _711 = (-0.0) - (cbMtdParam._m0[21u].x * ((_698.x * 0.5) + (-0.25)));
    float _712 = fract(_703);
    float _714 = fract(_703 + 0.5);
    vec4 _741 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_712 * _711) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_709 * _712) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _743 = _741.x;
    float _749 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_714 * _711) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_709 * _714) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _743) * abs((_712 * 2.0) + (-1.0))) + _743;
    float _755 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _759 = fract(abs(_755));
    float _768 = sin(cbMtdParam._m0[21u].z);
    float _769 = cos(cbMtdParam._m0[21u].z);
    float _770 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _771 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _801 = abs(cbMtdParam._m0[20u].w * (((_749 - (((_755 >= ((-0.0) - _755)) ? _759 : ((-0.0) - _759)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_771, (-0.0) - _768, _769 * _770) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_771, _769, _770 * _768) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _805 = (((_801 * cbMtdParam._m0[18u].y) - _749) * _801) + _749;
    float _3624 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _806 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    vec4 _818 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _833 = (cbMtdParam._m0[14u].x * _818.x) * cbMtdParam._m0[19u].x;
    float _834 = (cbMtdParam._m0[14u].y * _818.y) * cbMtdParam._m0[19u].x;
    float _835 = (cbMtdParam._m0[14u].z * _818.z) * cbMtdParam._m0[19u].x;
    float _845 = exp2(log2(_806) * cbMtdParam._m0[20u].x);
    float _858 = fma(_674, _223, fma(_668, _230, _667 * _216));
    float _861 = fma(_674, _224, fma(_668, _231, _667 * _217));
    float _864 = fma(_674, _225, fma(_668, _232, _667 * _218));
    float _868 = inversesqrt(dot(vec3(_858, _861, _864), vec3(_858, _861, _864)));
    float _869 = _868 * _858;
    float _870 = _868 * _861;
    float _871 = _868 * _864;
    float _3635 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _872 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3657 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3668 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _891 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _895 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _896 = _286 * _895;
    float _897 = _287 * _895;
    float _898 = _288 * _895;
    vec4 _903 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _905 = _903.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1060 = sqrt(((_286 * _286) + (_287 * _287)) + (_288 * _288));
        float _1066 = (cbMatDynParam._m0[5u].x * _1060) + cbMatDynParam._m0[5u].y;
        float _3679 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1071 = (cbMatDynParam._m0[5u].z * _1060) + cbMatDynParam._m0[5u].w;
        float _3690 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) - _1067)) + _1067) < ((_905 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _917 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _918 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _936 = fma(_871, cbSceneParam._m0[5u].z, fma(_870, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _869));
    float _939 = fma(_871, cbSceneParam._m0[6u].z, fma(_870, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _869));
    float _942 = fma(_871, cbSceneParam._m0[7u].z, fma(_870, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _869));
    uint _955 = uint(roundEven(NORMAL.w)) * 13u;
    uint _956 = _955 + 9u;
    uint _957 = _956 + uint(cbMatDynParam._m0[0u].w);
    float _963 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_957].x;
    float _964 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_957].y;
    float _965 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_957].z;
    float _3701 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    vec4 _977 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _917, cbSceneParam._m0[86u].y * _918));
    float _980 = _977.x * TEXCOORD_4;
    float _981 = dot(vec3(_869, _870, _871), vec3(_896, _897, _898));
    float _984 = _981 * 2.0;
    float _988 = (_984 * _869) - _896;
    float _989 = (_984 * _870) - _897;
    float _990 = (_984 * _871) - _898;
    float _994 = abs(dot(vec3(_896, _897, _898), vec3(_869, _870, _871)));
    float _3734 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _996 = sqrt(_872);
    float _1009 = exp2((_996 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_996 * 3.0));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1377;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1104 = fma(_1049, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041));
        float _1108 = fma(_1049, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041));
        float _1112 = fma(_1049, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041));
        float _1135 = _1041 + _869;
        float _1136 = _1045 + _870;
        float _1137 = _1049 + _871;
        float _1147 = fma(_1137, cbModelParam._m0[26u].z, fma(_1136, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135)) - _1104;
        float _1148 = fma(_1137, cbModelParam._m0[27u].z, fma(_1136, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135)) - _1108;
        float _1149 = fma(_1137, cbModelParam._m0[28u].z, fma(_1136, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135)) - _1112;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1104 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1108 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[34u].z) + ((((((_1112 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1205 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1171.x + (-0.5));
        float _1207 = _1205 * (_1171.y + (-0.5));
        float _1208 = _1205 * (_1171.z + (-0.5));
        float _1215 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1178.x + (-0.5));
        float _1217 = _1215 * (_1178.y + (-0.5));
        float _1218 = _1215 * (_1178.z + (-0.5));
        float _1225 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1185.x + (-0.5));
        float _1227 = _1225 * (_1185.y + (-0.5));
        float _1228 = _1225 * (_1185.z + (-0.5));
        float _1235 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1192.x + (-0.5));
        float _1237 = _1235 * (_1192.y + (-0.5));
        float _1238 = _1235 * (_1192.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1259 = (dot(vec3(_869, _870, _871), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1269 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3782 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1271 + 1.0))) + _1276) * _1239;
        float _1286 = _1207 * 0.5;
        float _1287 = _1217 * 0.5;
        float _1288 = _1227 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_869, _870, _871), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3815 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1313 + 1.0))) + _1318) * _1240;
        float _1328 = _1208 * 0.5;
        float _1329 = _1218 * 0.5;
        float _1330 = _1228 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_869, _870, _871), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _3848 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1355 + 1.0))) + _1360) * _1241;
        _1377 = _1208;
        _1379 = _1207;
        _1380 = _1206;
        _1381 = _1218;
        _1382 = _1217;
        _1383 = _1216;
        _1384 = _1228;
        _1385 = _1227;
        _1386 = _1226;
        _1387 = _1241;
        _1388 = _1240;
        _1389 = _1239;
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1378;
        _1379 = _1378;
        _1380 = _1378;
        _1381 = _1378;
        _1382 = _1378;
        _1383 = _1378;
        _1384 = _1378;
        _1385 = _1378;
        _1386 = _1378;
        _1387 = _1378;
        _1388 = _1378;
        _1389 = _1378;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1420 = fma(_1049, cbModelParam._m0[30u].z, fma(_1045, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041));
        float _1424 = fma(_1049, cbModelParam._m0[31u].z, fma(_1045, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041));
        float _1428 = fma(_1049, cbModelParam._m0[32u].z, fma(_1045, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041));
        float _1451 = _1041 + _869;
        float _1452 = _1045 + _870;
        float _1453 = _1049 + _871;
        float _1463 = fma(_1453, cbModelParam._m0[30u].z, fma(_1452, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1451)) - _1420;
        float _1464 = fma(_1453, cbModelParam._m0[31u].z, fma(_1452, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1451)) - _1424;
        float _1465 = fma(_1453, cbModelParam._m0[32u].z, fma(_1452, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1451)) - _1428;
        float _1469 = inversesqrt(dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465)));
        float _1482 = ((_1469 * _1463) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1420 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1469 * _1464) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1424 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1469 * _1465) / cbModelParam._m0[35u].z) + ((((((_1428 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        float _1519 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1486.x + (-0.5));
        float _1521 = _1519 * (_1486.y + (-0.5));
        float _1522 = _1519 * (_1486.z + (-0.5));
        float _1529 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1493.x + (-0.5));
        float _1531 = _1529 * (_1493.y + (-0.5));
        float _1532 = _1529 * (_1493.z + (-0.5));
        float _1539 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1500.x + (-0.5));
        float _1541 = _1539 * (_1500.y + (-0.5));
        float _1542 = _1539 * (_1500.z + (-0.5));
        float _1549 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1507.x + (-0.5));
        float _1551 = _1549 * (_1507.y + (-0.5));
        float _1552 = _1549 * (_1507.z + (-0.5));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = _1520 * 0.5;
        float _1557 = _1530 * 0.5;
        float _1558 = _1540 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_869, _870, _871), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _3911 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1583 + 1.0))) + _1588) * _1553;
        float _1598 = _1521 * 0.5;
        float _1599 = _1531 * 0.5;
        float _1600 = _1541 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_869, _870, _871), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _3944 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1625 + 1.0))) + _1630) * _1554;
        float _1640 = _1522 * 0.5;
        float _1641 = _1532 * 0.5;
        float _1642 = _1542 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_869, _870, _871), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _3977 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1667 + 1.0))) + _1672) * _1555;
        _1689 = _1522;
        _1690 = _1521;
        _1691 = _1520;
        _1692 = _1532;
        _1693 = _1531;
        _1694 = _1530;
        _1695 = _1542;
        _1696 = _1541;
        _1697 = _1540;
        _1698 = _1555;
        _1699 = _1554;
        _1700 = _1553;
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
    }
    else
    {
        _1689 = _1378;
        _1690 = _1378;
        _1691 = _1378;
        _1692 = _1378;
        _1693 = _1378;
        _1694 = _1378;
        _1695 = _1378;
        _1696 = _1378;
        _1697 = _1378;
        _1698 = _1378;
        _1699 = _1378;
        _1700 = _1378;
        _1701 = 0.0;
        _1702 = 0.0;
        _1703 = 0.0;
    }
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1390)) + _1390;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1391)) + _1391;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1392)) + _1392;
    float _1736 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1713));
    float _1757 = _988 * 0.5;
    float _1758 = _989 * 0.5;
    float _1759 = _990 * 0.5;
    float _1760 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1763 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1766 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1800;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1773 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1377, _1381, _1384, _1387));
        float _1777 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1781 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1788 = dot(vec4(cbModelParam._m0[39u]), vec4(_1757, _1758, _1759, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1811;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1802 = dot(vec4(cbModelParam._m0[40u]), vec4(_1757, _1758, _1759, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1815 = (_1811 * cbModelParam._m0[1u].x) + (_1800 * (1.0 - cbModelParam._m0[1u].x));
    float _1825 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _872);
    float _1826 = isnan(_1825) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1825 : min(cbModelParam._m0[25u].z, _1825));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1874 = fma(_1049, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041)) + cbModelParam._m0[13u].w;
        float _1878 = fma(_1049, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041)) + cbModelParam._m0[14u].w;
        float _1882 = fma(_1049, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041)) + cbModelParam._m0[15u].w;
        float _1885 = fma(_990, cbModelParam._m0[13u].z, fma(_989, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988));
        float _1888 = fma(_990, cbModelParam._m0[14u].z, fma(_989, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988));
        float _1891 = fma(_990, cbModelParam._m0[15u].z, fma(_989, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988));
        float _1919;
        if (_1885 > 0.0)
        {
            _1919 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1919 = frontier_phi_41_39_ladder;
        }
        float _2288;
        if (_1888 > 0.0)
        {
            _2288 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2288 = frontier_phi_50_46_ladder;
        }
        float _2630;
        if (_1891 > 0.0)
        {
            _2630 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2630 = frontier_phi_64_57_ladder;
        }
        float _2632 = isnan(_2288) ? _1919 : (isnan(_1919) ? _2288 : min(_1919, _2288));
        float _2633 = isnan(_2630) ? _2632 : (isnan(_2632) ? _2630 : min(_2632, _2630));
        float _2637 = (_2633 * _1885) + _1874;
        float _2638 = (_2633 * _1888) + _1878;
        float _2639 = (_2633 * _1891) + _1882;
        float _2640 = _2633 * 9.9999997473787516355514526367188e-05;
        float _2641 = (-1.0) - _2640;
        float _2643 = _2640 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2639 > _2643) || ((_2639 < _2641) || ((_2638 > _2643) || ((_2638 < _2641) || ((_2637 < _2641) || (_2637 > _2643))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2781 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2639, cbModelParam._m0[9u].z, fma(_2638, cbModelParam._m0[9u].y, _2637 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2639, cbModelParam._m0[10u].z, fma(_2638, cbModelParam._m0[10u].y, _2637 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2639, cbModelParam._m0[11u].z, fma(_2638, cbModelParam._m0[11u].y, _2637 * cbModelParam._m0[11u].x))), _1826);
            frontier_phi_40_64_ladder = _2781.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2781.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2781.x * cbModelParam._m0[1u].y;
        }
        _1907 = frontier_phi_40_64_ladder_2;
        _1909 = frontier_phi_40_64_ladder_1;
        _1911 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1895 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_988, _989, _990), _1826);
        _1907 = _1895.x * cbModelParam._m0[1u].y;
        _1909 = _1895.y * cbModelParam._m0[1u].y;
        _1911 = _1895.z * cbModelParam._m0[1u].y;
    }
    float _1915 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _872);
    float _1916 = isnan(_1915) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1915 : min(cbModelParam._m0[25u].w, _1915));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1968 = fma(_1049, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041)) + cbModelParam._m0[21u].w;
        float _1972 = fma(_1049, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041)) + cbModelParam._m0[22u].w;
        float _1976 = fma(_1049, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041)) + cbModelParam._m0[23u].w;
        float _1979 = fma(_990, cbModelParam._m0[21u].z, fma(_989, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988));
        float _1982 = fma(_990, cbModelParam._m0[22u].z, fma(_989, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988));
        float _1985 = fma(_990, cbModelParam._m0[23u].z, fma(_989, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988));
        float _2293;
        if (_1979 > 0.0)
        {
            _2293 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2293 = frontier_phi_52_48_ladder;
        }
        float _2656;
        if (_1982 > 0.0)
        {
            _2656 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2656 = frontier_phi_66_59_ladder;
        }
        float _2846;
        if (_1985 > 0.0)
        {
            _2846 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2846 = frontier_phi_84_77_ladder;
        }
        float _2848 = isnan(_2656) ? _2293 : (isnan(_2293) ? _2656 : min(_2293, _2656));
        float _2849 = isnan(_2846) ? _2848 : (isnan(_2848) ? _2846 : min(_2848, _2846));
        float _2853 = (_2849 * _1979) + _1968;
        float _2854 = (_2849 * _1982) + _1972;
        float _2855 = (_2849 * _1985) + _1976;
        float _2856 = _2849 * 9.9999997473787516355514526367188e-05;
        float _2857 = (-1.0) - _2856;
        float _2859 = _2856 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2855 > _2859) || ((_2855 < _2857) || ((_2854 > _2859) || ((_2854 < _2857) || ((_2853 < _2857) || (_2853 > _2859))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3097 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2855, cbModelParam._m0[17u].z, fma(_2854, cbModelParam._m0[17u].y, _2853 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2855, cbModelParam._m0[18u].z, fma(_2854, cbModelParam._m0[18u].y, _2853 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2855, cbModelParam._m0[19u].z, fma(_2854, cbModelParam._m0[19u].y, _2853 * cbModelParam._m0[19u].x))), _1916);
            frontier_phi_49_84_ladder = _3097.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _3097.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _3097.x * cbModelParam._m0[1u].z;
        }
        _2004 = frontier_phi_49_84_ladder_2;
        _2006 = frontier_phi_49_84_ladder_1;
        _2008 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_988, _989, _990), _1916);
        _2004 = _1988.x * cbModelParam._m0[1u].z;
        _2006 = _1988.y * cbModelParam._m0[1u].z;
        _2008 = _1988.z * cbModelParam._m0[1u].z;
    }
    float _2020 = ((((1.0 - _1009) * ((_996 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1009 * _996)) * _980;
    float _2021 = _2020 * ((cbModelParam._m0[1u].w * (_2004 - _1907)) + _1907);
    float _2022 = _2020 * ((cbModelParam._m0[1u].w * (_2006 - _1909)) + _1909);
    float _2023 = _2020 * ((cbModelParam._m0[1u].w * (_2008 - _1911)) + _1911);
    float _2026 = fma(_2023, cbSceneParam._m0[89u].z, fma(_2022, cbSceneParam._m0[89u].y, _2021 * cbSceneParam._m0[89u].x));
    float _2029 = fma(_2023, cbSceneParam._m0[90u].z, fma(_2022, cbSceneParam._m0[90u].y, _2021 * cbSceneParam._m0[90u].x));
    float _2032 = fma(_2023, cbSceneParam._m0[91u].z, fma(_2022, cbSceneParam._m0[91u].y, _2021 * cbSceneParam._m0[91u].x));
    vec4 _2040 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_917, _918));
    float _2042 = _2040.w;
    float _2054 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2042);
    float _2055 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2042);
    float _2056 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2042);
    uvec4 _2060 = floatBitsToUint(cbInstanceData._m0[_955 + 5u]);
    uint _2062 = _2060.x * 14u;
    uint _2063 = _2062 + 13u;
    float _2068 = _980 + (-1.0);
    float _2071 = (cbLight._m0[_2063].x * _2068) + 1.0;
    float _2072 = (cbLight._m0[_2063].y * _2068) + 1.0;
    uint _2073 = _2062 + 5u;
    float _2079 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2083 = _2062 + 4u;
    float _2092 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2096 = _2062 | 1u;
    float _2107 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_869, _870, _871));
    float _2110 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_869, _870, _871));
    float _4113 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _4124 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2115 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * 0.3183098733425140380859375;
    float _2117 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.3183098733425140380859375;
    float _2124 = ((cbLight._m0[_2073].x * _2079) * _2117) + (((cbLight._m0[_2083].x * _2054) * _2092) * _2115);
    float _2125 = ((_2079 * cbLight._m0[_2073].y) * _2117) + (((cbLight._m0[_2083].y * _2055) * _2092) * _2115);
    float _2126 = ((_2079 * cbLight._m0[_2073].z) * _2117) + (((cbLight._m0[_2083].z * _2056) * _2092) * _2115);
    uint _2128 = _2062 + 8u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _872) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_2062].x + _896;
    float _2144 = cbLight._m0[_2062].y + _897;
    float _2145 = cbLight._m0[_2062].z + _898;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2062].xyz));
    float _4135 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2157 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2158 = dot(vec3(_869, _870, _871), vec3(_2150, _2151, _2152));
    float _4157 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2150, _2151, _2152));
    float _4168 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2142 * _2142;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2181 = (exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2182 = 1.0 - _2142;
    float _2193 = (0.5 / (((_2157 * ((_2156 * _2182) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2182) + _2142) * _2156))) * _2156;
    float _4179 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    uint _2209 = _2062 + 9u;
    float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _872) * 0.949999988079071044921875);
    float _2221 = _2220 * _2220;
    float _2222 = cbLight._m0[_2096].x + _896;
    float _2223 = cbLight._m0[_2096].y + _897;
    float _2224 = cbLight._m0[_2096].z + _898;
    float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
    float _2229 = _2228 * _2222;
    float _2230 = _2228 * _2223;
    float _2231 = _2228 * _2224;
    float _2232 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2096].xyz));
    float _4190 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2236 = dot(vec3(_869, _870, _871), vec3(_2229, _2230, _2231));
    float _4201 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2229, _2230, _2231));
    float _4212 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2221 * _2221;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2258 = 1.0 - _2221;
    float _2268 = (0.5 / (((_2157 * ((_2235 * _2258) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2258) + _2221) * _2235))) * _2235;
    float _4223 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    float _2280 = (((_2257 * cbLight._m0[_2209].x) * _2270) * _2079) + ((((cbLight._m0[_2128].x * _2054) * _2181) * _2195) * _2092);
    float _2281 = (((_2257 * cbLight._m0[_2209].y) * _2270) * _2079) + ((((cbLight._m0[_2128].y * _2055) * _2181) * _2195) * _2092);
    float _2282 = (((_2257 * cbLight._m0[_2209].z) * _2270) * _2079) + ((((cbLight._m0[_2128].z * _2056) * _2181) * _2195) * _2092);
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    if (_2060.y == 0u)
    {
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2337;
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2337;
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2337;
        uvec4 _2352 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2353 = _2352.x;
        uint _2364 = uint((float(_2352.y) * floor(float(uint(cbSceneParam._m0[85u].y * _918) / _2353))) + floor(float(uint(cbSceneParam._m0[85u].x * _917) / _2353)));
        float _2374 = (log2(_2340 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2375 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        uint _2378 = uint(isnan(14.0) ? _2375 : (isnan(_2375) ? 14.0 : min(_2375, 14.0)));
        uvec4 _2383 = texelFetch(g_lightClusterGridBuffer, int(((_2378 << 2u) + (_2364 << 6u)) >> 2u));
        uint _2384 = _2383.x;
        uint _2385 = _2352.z;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        if (((((1u << ((_2385 >> 4u) & 15u)) + 4294967295u) & _2384) == 0u) || ((_2385 & 240u) == 0u))
        {
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
        }
        else
        {
            float _2502;
            float _2504;
            float _2506;
            float _2508;
            float _2510;
            float _2512;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            uint _2699 = 0u;
            uint _2708;
            bool _2709;
            for (;;)
            {
                _2708 = texelFetch(g_lightClassification, int((((_2378 << 5u) + (_2364 << 9u)) + (_2699 << 2u)) >> 2u)).x;
                _2709 = _2708 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2709)
                {
                    frontier_phi_79_pred = _2698;
                    frontier_phi_79_pred_1 = _2697;
                    frontier_phi_79_pred_2 = _2696;
                    frontier_phi_79_pred_3 = _2695;
                    frontier_phi_79_pred_4 = _2694;
                    frontier_phi_79_pred_5 = _2693;
                }
                else
                {
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    uint _2895;
                    _2889 = _2693;
                    _2890 = _2694;
                    _2891 = _2695;
                    _2892 = _2696;
                    _2893 = _2697;
                    _2894 = _2698;
                    _2895 = _2708;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    for (;;)
                    {
                        uint _2899 = uint(findLSB(_2895)) + (_2699 << 5u);
                        uint _2896 = (_2895 + 4294967295u) & _2895;
                        uint _2901 = _2899 * 48u;
                        vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 3u)).x));
                        uint _2921 = (_2899 * 48u) + 4u;
                        vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 3u)).x));
                        uint _2940 = (_2899 * 48u) + 8u;
                        vec3 _2951 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x));
                        float _2955 = _2915.x - _2338;
                        float _2956 = _2915.y - _2339;
                        float _2957 = _2915.z - _2340;
                        float _2958 = dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957));
                        float _2961 = inversesqrt(_2958);
                        float _2962 = _2961 * _2955;
                        float _2963 = _2961 * _2956;
                        float _2964 = _2961 * _2957;
                        float _2965 = dot(vec3(_936, _939, _942), vec3(_2962, _2963, _2964));
                        float _2970 = 1.0 - (_2958 * _2915.w);
                        float _4244 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2971 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2972 = sqrt(_2958) * _2934.w;
                        float _2975 = 1.39999997615814208984375 / (_2972 + 1.39999997615814208984375);
                        float _2976 = _2975 * _2975;
                        float _2979 = ((1.0 - _2976) * _2965) + _2976;
                        float _2982 = _2972 * _2972;
                        float _2986 = ((isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0))) * _2971) / ((_2982 * 0.699999988079071044921875) + 1.0);
                        float _2990 = (-0.0) - _2338;
                        float _2991 = (-0.0) - _2339;
                        float _2992 = (-0.0) - _2340;
                        float _2996 = inversesqrt(dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992)));
                        float _2997 = _2996 * _2990;
                        float _2998 = _2996 * _2991;
                        float _2999 = _2996 * _2992;
                        float _3007 = exp2(log2(1.0 / ((_2982 * 3.5) + 5.0)) * 0.25);
                        float _3008 = 1.0 - _996;
                        float _3015 = sqrt(1.0 - ((1.0 - (_3008 * _3008)) * (1.0 - (_3007 * _3007))));
                        float _3016 = _3015 * _3015;
                        float _3017 = _3016 * _3016;
                        float _3018 = _2997 + _2962;
                        float _3019 = _2998 + _2963;
                        float _3020 = _2999 + _2964;
                        float _3024 = inversesqrt(dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020)));
                        float _3028 = dot(vec3(_936, _939, _942), vec3(_2997, _2998, _2999));
                        float _4260 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3031 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                        float _3032 = dot(vec3(_936, _939, _942), vec3(_3024 * _3018, _3024 * _3019, _3024 * _3020));
                        float _4271 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3035 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                        float _3039 = ((_3035 * _3035) * (_3017 + (-1.0))) + 1.0;
                        float _3040 = _2975 * _3016;
                        float _3041 = _3040 * _3040;
                        float _3044 = ((1.0 - _3041) * _2965) + _3041;
                        float _4282 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3045 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                        float _3046 = 1.0 - _3016;
                        float _3056 = (0.5 / (((_3045 * ((_3031 * _3046) + _3016)) + 9.9999999392252902907785028219223e-09) + (((_3045 * _3046) + _3016) * _3031))) * _3045;
                        float _4293 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3067 = (((_3017 * 3.1415927410125732421875) * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) / ((_3039 * _3039) * ((_2982 * 2.1991131305694580078125) + 3.141590118408203125))) * _2971;
                        _2793 = (_2986 * _2934.x) + _2892;
                        _2794 = (_2986 * _2934.y) + _2893;
                        _2795 = (_2986 * _2934.z) + _2894;
                        _2790 = (_3067 * _2951.x) + _2889;
                        _2791 = (_3067 * _2951.y) + _2890;
                        _2792 = (_3067 * _2951.z) + _2891;
                        if (_2896 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2889 = _2790;
                            _2890 = _2791;
                            _2891 = _2792;
                            _2892 = _2793;
                            _2893 = _2794;
                            _2894 = _2795;
                            _2895 = _2896;
                        }
                    }
                    frontier_phi_79_pred = _2795;
                    frontier_phi_79_pred_1 = _2794;
                    frontier_phi_79_pred_2 = _2793;
                    frontier_phi_79_pred_3 = _2792;
                    frontier_phi_79_pred_4 = _2791;
                    frontier_phi_79_pred_5 = _2790;
                }
                _2512 = frontier_phi_79_pred;
                _2510 = frontier_phi_79_pred_1;
                _2508 = frontier_phi_79_pred_2;
                _2506 = frontier_phi_79_pred_3;
                _2504 = frontier_phi_79_pred_4;
                _2502 = frontier_phi_79_pred_5;
                uint _2700 = _2699 + 1u;
                if (_2700 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2693 = _2502;
                    _2694 = _2504;
                    _2695 = _2506;
                    _2696 = _2508;
                    _2697 = _2510;
                    _2698 = _2512;
                    _2699 = _2700;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
        }
        uvec4 _2515 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2516 = _2515.z;
        uint _2518 = (_2516 >> 8u) & 15u;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        if (((4294967295u << _2518) & _2384) == 0u)
        {
            _2661 = _2501;
            _2663 = _2503;
            _2665 = _2505;
            _2667 = _2507;
            _2669 = _2509;
            _2671 = _2511;
        }
        else
        {
            float _2686 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
            float _2687 = _2686 * _2338;
            float _2688 = _2686 * _2339;
            float _2689 = _2686 * _2340;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2518 < ((_2516 >> 12u) & 15u))
            {
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2672;
                float _2872 = _2501;
                float _2873 = _2503;
                float _2874 = _2505;
                float _2875 = _2507;
                float _2876 = _2509;
                float _2877 = _2511;
                uint _2878 = _2518;
                uint _2887;
                bool _2888;
                for (;;)
                {
                    _2887 = texelFetch(g_lightClassification, int((((_2378 << 5u) + (_2364 << 9u)) + (_2878 << 2u)) >> 2u)).x;
                    _2888 = _2887 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2888)
                    {
                        frontier_phi_93_pred = _2876;
                        frontier_phi_93_pred_1 = _2875;
                        frontier_phi_93_pred_2 = _2874;
                        frontier_phi_93_pred_3 = _2873;
                        frontier_phi_93_pred_4 = _2872;
                        frontier_phi_93_pred_5 = _2877;
                    }
                    else
                    {
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3115 = _2872;
                        float _3116 = _2873;
                        float _3117 = _2874;
                        float _3118 = _2875;
                        float _3119 = _2876;
                        float _3120 = _2877;
                        uint _3121 = _2887;
                        uint _3122;
                        vec4 _3147;
                        float _3148;
                        vec4 _3163;
                        vec3 _3175;
                        vec4 _3191;
                        vec4 _3206;
                        float _3252;
                        bool _3253;
                        for (;;)
                        {
                            uint _3132 = ((_2878 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3121));
                            _3122 = (_3121 + 4294967295u) & _3121;
                            uint _3134 = _3132 * 40u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3148 = _3147.w;
                            uint _3150 = (_3132 * 40u) + 4u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3165 = (_3132 * 40u) + 8u;
                            _3175 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x));
                            uint _3178 = (_3132 * 40u) + 16u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3193 = (_3132 * 40u) + 20u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3208 = (_3132 * 40u) + 24u;
                            vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3227 = (_3132 * 40u) + 28u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            _3252 = fma(_2340, _3240.z, fma(_2339, _3240.y, _3240.x * _2338)) + _3240.w;
                            _3253 = !((fma(_2340, _3221.z, fma(_2339, _3221.y, _3221.x * _2338)) + _3221.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3253)
                            {
                                float _3280 = _3147.x - _2338;
                                float _3281 = _3147.y - _2339;
                                float _3282 = _3147.z - _2340;
                                float _3283 = dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282));
                                float _3286 = inversesqrt(_3283);
                                float _3287 = _3286 * _3280;
                                float _3288 = _3286 * _3281;
                                float _3289 = _3286 * _3282;
                                float _3293 = 1.0 - (_3283 / (_3148 * _3148));
                                float _4304 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3298 = sqrt(_3283) * _3163.w;
                                float _3300 = 1.39999997615814208984375 / (_3298 + 1.39999997615814208984375);
                                float _3301 = _3300 * _3300;
                                float _3304 = ((1.0 - _3301) * dot(vec3(_3287, _3288, _3289), vec3(_936, _939, _942))) + _3301;
                                float _3307 = _3298 * _3298;
                                float _3311 = (fma(_2340, _3191.z, fma(_2339, _3191.y, _3191.x * _2338)) + _3191.w) / _3252;
                                float _3312 = (fma(_2340, _3206.z, fma(_2339, _3206.y, _3206.x * _2338)) + _3206.w) / _3252;
                                float _3316 = 1.0 - dot(vec2(_3311, _3312), vec2(_3311, _3312));
                                float _4320 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                                float _3318 = _3317 * (((isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))) * _3294) / ((_3307 * 0.699999988079071044921875) + 1.0));
                                float _3330 = exp2(log2(1.0 / ((_3307 * 3.5) + 5.0)) * 0.25);
                                float _3331 = 1.0 - _996;
                                float _3338 = sqrt(1.0 - ((1.0 - (_3331 * _3331)) * (1.0 - (_3330 * _3330))));
                                float _3339 = _3338 * _3338;
                                float _3340 = _3339 * _3339;
                                float _3341 = _3287 - _2687;
                                float _3342 = _3288 - _2688;
                                float _3343 = _3289 - _2689;
                                float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                                float _3351 = dot(vec3(_936, _939, _942), vec3((-0.0) - _2687, (-0.0) - _2688, (-0.0) - _2689));
                                float _4331 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3354 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3355 = dot(vec3(_936, _939, _942), vec3(_3347 * _3341, _3347 * _3342, _3347 * _3343));
                                float _4342 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3362 = ((_3358 * _3358) * (_3340 + (-1.0))) + 1.0;
                                float _3363 = _3300 * _3339;
                                float _3364 = _3363 * _3363;
                                float _3370 = ((1.0 - _3364) * dot(vec3(_936, _939, _942), vec3(_3287, _3288, _3289))) + _3364;
                                float _4353 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3372 = 1.0 - _3339;
                                float _3382 = (0.5 / (((_3371 * ((_3354 * _3372) + _3339)) + 9.9999999392252902907785028219223e-09) + (((_3371 * _3372) + _3339) * _3354))) * _3371;
                                float _4364 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3392 = (_3317 * _3294) * (((_3340 * 3.1415927410125732421875) * (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) / ((_3362 * _3362) * ((_3307 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3318 * _3163.z;
                                frontier_phi_99_pred_1 = _3318 * _3163.y;
                                frontier_phi_99_pred_2 = _3318 * _3163.x;
                                frontier_phi_99_pred_3 = _3392 * _3175.z;
                                frontier_phi_99_pred_4 = _3392 * _3175.y;
                                frontier_phi_99_pred_5 = _3392 * _3175.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3401 = frontier_phi_99_pred;
                            _3400 = frontier_phi_99_pred_1;
                            _3399 = frontier_phi_99_pred_2;
                            _3398 = frontier_phi_99_pred_3;
                            _3397 = frontier_phi_99_pred_4;
                            _3396 = frontier_phi_99_pred_5;
                            _3105 = _3399 + _3118;
                            _3106 = _3400 + _3119;
                            _3107 = _3401 + _3120;
                            _3102 = _3396 + _3115;
                            _3103 = _3397 + _3116;
                            _3104 = _3398 + _3117;
                            if (_3122 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3122;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _3106;
                        frontier_phi_93_pred_1 = _3105;
                        frontier_phi_93_pred_2 = _3104;
                        frontier_phi_93_pred_3 = _3103;
                        frontier_phi_93_pred_4 = _3102;
                        frontier_phi_93_pred_5 = _3107;
                    }
                    _2670 = frontier_phi_93_pred;
                    _2668 = frontier_phi_93_pred_1;
                    _2666 = frontier_phi_93_pred_2;
                    _2664 = frontier_phi_93_pred_3;
                    _2662 = frontier_phi_93_pred_4;
                    _2672 = frontier_phi_93_pred_5;
                    uint _2879 = _2878 + 1u;
                    if (_2879 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2872 = _2662;
                        _2873 = _2664;
                        _2874 = _2666;
                        _2875 = _2668;
                        _2876 = _2670;
                        _2877 = _2672;
                        _2878 = _2879;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2672;
                frontier_phi_68_69_ladder_1 = _2670;
                frontier_phi_68_69_ladder_2 = _2668;
                frontier_phi_68_69_ladder_3 = _2666;
                frontier_phi_68_69_ladder_4 = _2662;
                frontier_phi_68_69_ladder_5 = _2664;
            }
            else
            {
                frontier_phi_68_69_ladder = _2511;
                frontier_phi_68_69_ladder_1 = _2509;
                frontier_phi_68_69_ladder_2 = _2507;
                frontier_phi_68_69_ladder_3 = _2505;
                frontier_phi_68_69_ladder_4 = _2501;
                frontier_phi_68_69_ladder_5 = _2503;
            }
            _2661 = frontier_phi_68_69_ladder_4;
            _2663 = frontier_phi_68_69_ladder_5;
            _2665 = frontier_phi_68_69_ladder_3;
            _2667 = frontier_phi_68_69_ladder_2;
            _2669 = frontier_phi_68_69_ladder_1;
            _2671 = frontier_phi_68_69_ladder;
        }
        float _2676 = isnan(1.0) ? _980 : (isnan(_980) ? 1.0 : min(_980, 1.0));
        _2397 = (_2676 * _2667) + _2124;
        _2399 = (_2676 * _2669) + _2125;
        _2401 = (_2676 * _2671) + _2126;
        _2403 = ((_2661 * 0.039999999105930328369140625) * _2676) + _2280;
        _2405 = ((_2663 * 0.039999999105930328369140625) * _2676) + _2281;
        _2407 = ((_2665 * 0.039999999105930328369140625) * _2676) + _2282;
    }
    else
    {
        _2397 = _2124;
        _2399 = _2125;
        _2401 = _2126;
        _2403 = _2280;
        _2405 = _2281;
        _2407 = _2282;
    }
    uint _2413 = _956 + uint(cbMatDynParam._m0[0u].w);
    float _2419 = ((_845 * (_833 - (_833 * _806))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2413].x;
    float _2420 = ((_845 * (_834 - (_834 * _806))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2413].y;
    float _2421 = ((_845 * (_835 - (_835 * _806))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2413].z;
    float _4380 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4391 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4402 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _2438 = (((isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2397 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _980))) + ((_2403 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1815)) * cbPerFrame._m0[3u].x)) + _2419;
    float _2440 = (_2420 + ((_2405 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1815)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2399 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _980)));
    float _2442 = (_2421 + ((_2407 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1815)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2401 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _980)));
    float _2443 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2444 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2445 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2451 = cbMtdParam._m0[2u].x * _2419;
    float _2452 = cbMtdParam._m0[2u].y * _2420;
    float _2453 = cbMtdParam._m0[2u].z * _2421;
    float _4428 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2455 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    uint _2456 = _955 + 6u;
    float _2464 = _917 / cbSceneParam._m0[86u].x;
    float _2465 = _918 / cbSceneParam._m0[86u].y;
    vec4 _2479 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2464, _2465, (log2((isnan(cbSceneParam._m0[77u].w) ? _891 : (isnan(_891) ? cbSceneParam._m0[77u].w : min(_891, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2481 = _2479.x;
    float _2482 = _2479.y;
    float _2483 = _2479.z;
    float _2484 = _2479.w;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    if (_891 > cbSceneParam._m0[78u].w)
    {
        float _2526 = isnan(_891) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _891 : min(cbSceneParam._m0[80u].w, _891));
        float _2527 = _2526 / _891;
        float _2538 = _2527 * _286;
        float _2539 = _287 * _2527;
        float _2540 = (-0.0) - _2539;
        float _2541 = _2527 * _288;
        float _2543 = (cbSceneParam._m0[77u].w * _2540) / _2526;
        float _2544 = _2543 + cbSceneParam._m0[79u].w;
        float _2545 = cbSceneParam._m0[79u].w - _2539;
        float _2551 = sqrt(((_2538 * _2538) + (_2539 * _2539)) + (_2541 * _2541));
        float _2554 = (1.0 - (cbSceneParam._m0[77u].w / _2526)) * _2551;
        float _2560 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2562 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2803;
        if (abs((_2540 - _2543) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2803 = ((((_2544 > 0.0) ? exp2(_2560 * _2544) : (2.0 - exp2(_2562 * _2544))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2554;
        }
        else
        {
            float _2722 = 1.0 / cbSceneParam._m0[80u].x;
            float _2723 = isnan(_2545) ? _2544 : (isnan(_2544) ? _2545 : max(_2544, _2545));
            float _2724 = isnan(_2545) ? _2544 : (isnan(_2544) ? _2545 : min(_2544, _2545));
            float _2733 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : min(_2723, 0.0));
            float _2734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : min(_2724, 0.0));
            _2803 = ((abs(_2551 / _2540) * cbSceneParam._m0[80u].y) * ((((_2733 - _2734) * 2.0) - ((exp2(_2560 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0)))) - exp2(_2560 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))))) * _2722)) - ((exp2(_2562 * _2733) - exp2(_2562 * _2734)) * _2722))) + (_2554 * cbSceneParam._m0[80u].z);
        }
        vec4 _2805 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2464, _2465, 1.0), 0.0);
        float _2814 = exp2((_2803 * (-1.44269502162933349609375)) * (1.0 - _2805.w));
        float _2815 = log2(_2814);
        float _2831 = log2(_2484);
        _2564 = (exp2(_2831 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].x)) * _2805.x) / cbSceneParam._m0[78u].x)) + _2481;
        _2566 = (exp2(_2831 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].y)) * _2805.y) / cbSceneParam._m0[78u].y)) + _2482;
        _2568 = (exp2(_2831 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].z)) * _2805.z) / cbSceneParam._m0[78u].z)) + _2483;
        _2570 = _2814 * _2484;
    }
    else
    {
        _2564 = _2481;
        _2566 = _2482;
        _2568 = _2483;
        _2570 = _2484;
    }
    bool _2841;
    vec4 _2579;
    vec4 _2601;
    float _2603;
    float _2607;
    float _2608;
    float _2609;
    float _2612;
    float _2615;
    float _2618;
    float _2619;
    bool _2629;
    for (;;)
    {
        _2579 = cbMatDynParam._m0[0u];
        float _2581 = roundEven(_2579.y);
        bool _2582 = _2581 == 3.0;
        float _2583 = log2(_2570);
        float _2587 = exp2(_2583 * cbSceneParam._m0[78u].x);
        float _2588 = exp2(_2583 * cbSceneParam._m0[78u].y);
        float _2589 = exp2(_2583 * cbSceneParam._m0[78u].z);
        float _2590 = _2587 * _2443;
        float _2591 = _2588 * _2444;
        float _2592 = _2589 * _2445;
        float _2599 = _905 + (-0.5);
        _2601 = cbMtdParam._m0[1u];
        _2603 = _2601.y * _2599;
        float _2606 = (_2581 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2607 = _2606 * (_2582 ? _2590 : (_2590 + (cbSceneParam._m0[72u].w * _2564)));
        _2608 = _2606 * (_2582 ? _2591 : (_2591 + (cbSceneParam._m0[72u].w * _2566)));
        _2609 = _2606 * (_2582 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2568)));
        _2612 = ((_2451 * _2455) * _2587) * _2606;
        _2615 = ((_2452 * _2455) * _2588) * _2606;
        _2618 = ((_2453 * _2455) * _2589) * _2606;
        _2619 = _2599 * 0.999000012874603271484375;
        _2629 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2629)
        {
            if ((cbInstanceData._m0[_955 + 7u].x + _2619) < 0.5)
            {
                _2841 = true;
                break;
            }
        }
        uint _2757 = _956 + uint(_2579.w);
        if ((cbInstanceData._m0[_2757].w < 1.0) && ((cbInstanceData._m0[_2757].w + _2619) < 0.5))
        {
            _2841 = true;
            break;
        }
        if ((_2603 + 1.0) < _2601.x)
        {
            _2841 = true;
            break;
        }
        _2841 = false;
        break;
    }
    float _3072;
    if (_2841)
    {
        discard_state = true;
        _3072 = 0.0;
    }
    else
    {
        _3072 = cbInstanceData._m0[_2456].w;
    }
    SV_Target.x = _2607;
    SV_Target.y = _2608;
    SV_Target.z = _2609;
    SV_Target.w = _3072;
    SV_Target_1.x = _2612;
    SV_Target_1.y = _2615;
    SV_Target_1.z = _2618;
    SV_Target_1.w = cbInstanceData._m0[_2456].w;
    discard_exit();
}


