#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1201;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _296 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _299 = _296.x;
    vec4 _317 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _299) + cbMtdParam._m0[12u].x) * _317.x;
    float _336 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _299) + cbMtdParam._m0[12u].y) * _317.y;
    float _338 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _299) + cbMtdParam._m0[12u].z) * _317.z;
    vec4 _356 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _395 = cbMtdParam._m0[27u].w + _280;
    float _396 = cbMtdParam._m0[28u].x + _281;
    float _397 = cbMtdParam._m0[28u].y + _282;
    float _411 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_210, _211, _212));
    float _412 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_224, _225, _226));
    float _413 = (-0.0) - dot(vec3(_395, _396, _397), vec3((-0.0) - _217, (-0.0) - _218, (-0.0) - _219));
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _420 = _417 * _413;
    float _423 = ((_417 * _411) + ((cbMtdParam._m0[25u].w * _299) * ((_356.x * 2.0) + (-1.0)))) * cbMtdParam._m0[24u].x;
    float _424 = ((_417 * _412) + ((cbMtdParam._m0[26u].x * _299) * ((_356.y * 2.0) + (-1.0)))) * cbMtdParam._m0[23u].w;
    float _425 = fract(TEXCOORD.x);
    float _426 = fract(TEXCOORD.y);
    float _432;
    if (_423 > 0.0)
    {
        _432 = (1.0 - _425) / _423;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_423 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _425) / _423;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _432 = frontier_phi_3_2_ladder;
    }
    float _440;
    if (_424 > 0.0)
    {
        _440 = (1.0 - _426) / _424;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_424 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _426) / _424;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _440 = frontier_phi_7_6_ladder;
    }
    float _444 = (_420 > 0.0) ? (cbMtdParam._m0[17u].x / _420) : 5000.0;
    float _445 = isnan(_440) ? _432 : (isnan(_432) ? _440 : min(_432, _440));
    float _446 = isnan(_444) ? _445 : (isnan(_445) ? _444 : min(_445, _444));
    float _450 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _457 = ((_446 * _420) + _450) / _450;
    vec4 _482 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_425 + (-0.5)) + (_446 * _423)) / _457) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_426 + (-0.5)) + (_446 * _424)) / _457) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _498 = _299 * 0.1500000059604644775390625;
    float _506 = (_498 * (((_482.x * _299) * cbMtdParam._m0[9u].x) - _334)) + _334;
    float _507 = (_498 * (((_482.y * _299) * cbMtdParam._m0[9u].y) - _336)) + _336;
    float _508 = (_498 * (((_482.z * _299) * cbMtdParam._m0[9u].z) - _338)) + _338;
    vec4 _521 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _521.z;
    float _528 = (_521.x * 2.0) + (-1.0);
    float _529 = (_521.y * 2.0) + (-1.0);
    float _530 = dot(vec2(_528, _529), vec2(_528, _529));
    float _3585 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _535 = sqrt(1.0 - (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))));
    vec4 _559 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _564 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _570 = ((_559.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _572 = (-0.0) - (cbMtdParam._m0[21u].x * ((_559.x * 0.5) + (-0.25)));
    float _573 = fract(_564);
    float _575 = fract(_564 + 0.5);
    vec4 _602 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_573 * _572) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_570 * _573) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _604 = _602.x;
    float _610 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_575 * _572) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_570 * _575) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _604) * abs((_573 * 2.0) + (-1.0))) + _604;
    float _619 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _623 = fract(abs(_619));
    float _632 = sin(cbMtdParam._m0[21u].z);
    float _633 = cos(cbMtdParam._m0[21u].z);
    float _634 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _635 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _665 = abs(cbMtdParam._m0[20u].w * (((_610 - (((_619 >= ((-0.0) - _619)) ? _623 : ((-0.0) - _623)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_635, (-0.0) - _632, _633 * _634) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_635, _633, _634 * _632) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _669 = (((_665 * cbMtdParam._m0[18u].y) - _610) * _665) + _610;
    float _3596 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _670 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    vec4 _682 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _697 = (cbMtdParam._m0[14u].x * _682.x) * cbMtdParam._m0[19u].x;
    float _698 = (cbMtdParam._m0[14u].y * _682.y) * cbMtdParam._m0[19u].x;
    float _699 = (cbMtdParam._m0[14u].z * _682.z) * cbMtdParam._m0[19u].x;
    float _709 = exp2(log2(_670) * cbMtdParam._m0[20u].x);
    float _722 = fma(_535, _217, fma(_529, _224, _528 * _210));
    float _725 = fma(_535, _218, fma(_529, _225, _528 * _211));
    float _728 = fma(_535, _219, fma(_529, _226, _528 * _212));
    float _732 = inversesqrt(dot(vec3(_722, _725, _728), vec3(_722, _725, _728)));
    float _733 = _732 * _722;
    float _734 = _732 * _725;
    float _735 = _732 * _728;
    float _3607 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _736 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3629 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3640 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _755 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _759 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _760 = _280 * _759;
    float _761 = _281 * _759;
    float _762 = _282 * _759;
    float _768 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _769 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _787 = fma(_735, cbSceneParam._m0[5u].z, fma(_734, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _733));
    float _790 = fma(_735, cbSceneParam._m0[6u].z, fma(_734, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _733));
    float _793 = fma(_735, cbSceneParam._m0[7u].z, fma(_734, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _733));
    uint _806 = uint(roundEven(NORMAL.w)) * 13u;
    uint _807 = _806 + 9u;
    uint _808 = _807 + uint(cbMatDynParam._m0[0u].w);
    float _814 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_808].x;
    float _815 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_808].y;
    float _816 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_808].z;
    float _3651 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    vec4 _828 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _768, cbSceneParam._m0[86u].y * _769));
    float _831 = _828.x * TEXCOORD_4;
    float _832 = dot(vec3(_733, _734, _735), vec3(_760, _761, _762));
    float _835 = _832 * 2.0;
    float _839 = (_835 * _733) - _760;
    float _840 = (_835 * _734) - _761;
    float _841 = (_835 * _735) - _762;
    float _845 = abs(dot(vec3(_760, _761, _762), vec3(_733, _734, _735)));
    float _3684 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _847 = sqrt(_736);
    float _860 = exp2((_847 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_847 * 3.0));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1200;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _927 = fma(_900, cbModelParam._m0[26u].z, fma(_896, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _892));
        float _931 = fma(_900, cbModelParam._m0[27u].z, fma(_896, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _892));
        float _935 = fma(_900, cbModelParam._m0[28u].z, fma(_896, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _892));
        float _958 = _892 + _733;
        float _959 = _896 + _734;
        float _960 = _900 + _735;
        float _970 = fma(_960, cbModelParam._m0[26u].z, fma(_959, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _958)) - _927;
        float _971 = fma(_960, cbModelParam._m0[27u].z, fma(_959, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _958)) - _931;
        float _972 = fma(_960, cbModelParam._m0[28u].z, fma(_959, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _958)) - _935;
        float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
        float _989 = ((_976 * _970) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_927 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_976 * _971) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_931 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_976 * _972) / cbModelParam._m0[34u].z) + ((((((_935 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        float _1028 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_994.x + (-0.5));
        float _1030 = _1028 * (_994.y + (-0.5));
        float _1031 = _1028 * (_994.z + (-0.5));
        float _1038 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1001.x + (-0.5));
        float _1040 = _1038 * (_1001.y + (-0.5));
        float _1041 = _1038 * (_1001.z + (-0.5));
        float _1048 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1008.x + (-0.5));
        float _1050 = _1048 * (_1008.y + (-0.5));
        float _1051 = _1048 * (_1008.z + (-0.5));
        float _1058 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1015.x + (-0.5));
        float _1060 = _1058 * (_1015.y + (-0.5));
        float _1061 = _1058 * (_1015.z + (-0.5));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = _1029 * 0.5;
        float _1066 = _1039 * 0.5;
        float _1067 = _1049 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1082 = (dot(vec3(_733, _734, _735), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1092 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3732 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1094 + 1.0))) + _1099) * _1062;
        float _1109 = _1030 * 0.5;
        float _1110 = _1040 * 0.5;
        float _1111 = _1050 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_733, _734, _735), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3765 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1136 + 1.0))) + _1141) * _1063;
        float _1151 = _1031 * 0.5;
        float _1152 = _1041 * 0.5;
        float _1153 = _1051 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_733, _734, _735), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3798 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1178 + 1.0))) + _1183) * _1064;
        _1200 = _1031;
        _1202 = _1030;
        _1203 = _1029;
        _1204 = _1041;
        _1205 = _1040;
        _1206 = _1039;
        _1207 = _1051;
        _1208 = _1050;
        _1209 = _1049;
        _1210 = _1064;
        _1211 = _1063;
        _1212 = _1062;
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
    }
    else
    {
        _1200 = _1201;
        _1202 = _1201;
        _1203 = _1201;
        _1204 = _1201;
        _1205 = _1201;
        _1206 = _1201;
        _1207 = _1201;
        _1208 = _1201;
        _1209 = _1201;
        _1210 = _1201;
        _1211 = _1201;
        _1212 = _1201;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1240 = fma(_900, cbModelParam._m0[30u].z, fma(_896, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _892));
        float _1244 = fma(_900, cbModelParam._m0[31u].z, fma(_896, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _892));
        float _1248 = fma(_900, cbModelParam._m0[32u].z, fma(_896, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _892));
        float _1271 = _892 + _733;
        float _1272 = _896 + _734;
        float _1273 = _900 + _735;
        float _1283 = fma(_1273, cbModelParam._m0[30u].z, fma(_1272, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1271)) - _1240;
        float _1284 = fma(_1273, cbModelParam._m0[31u].z, fma(_1272, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1271)) - _1244;
        float _1285 = fma(_1273, cbModelParam._m0[32u].z, fma(_1272, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1271)) - _1248;
        float _1289 = inversesqrt(dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285)));
        float _1302 = ((_1289 * _1283) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1240 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1289 * _1284) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1244 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1289 * _1285) / cbModelParam._m0[35u].z) + ((((((_1248 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        float _1339 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1306.x + (-0.5));
        float _1341 = _1339 * (_1306.y + (-0.5));
        float _1342 = _1339 * (_1306.z + (-0.5));
        float _1349 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1313.x + (-0.5));
        float _1351 = _1349 * (_1313.y + (-0.5));
        float _1352 = _1349 * (_1313.z + (-0.5));
        float _1359 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1320.x + (-0.5));
        float _1361 = _1359 * (_1320.y + (-0.5));
        float _1362 = _1359 * (_1320.z + (-0.5));
        float _1369 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1327.x + (-0.5));
        float _1371 = _1369 * (_1327.y + (-0.5));
        float _1372 = _1369 * (_1327.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_733, _734, _735), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _3861 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1403 + 1.0))) + _1408) * _1373;
        float _1418 = _1341 * 0.5;
        float _1419 = _1351 * 0.5;
        float _1420 = _1361 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_733, _734, _735), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3894 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1445 + 1.0))) + _1450) * _1374;
        float _1460 = _1342 * 0.5;
        float _1461 = _1352 * 0.5;
        float _1462 = _1362 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_733, _734, _735), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _3927 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1487 + 1.0))) + _1492) * _1375;
        _1509 = _1342;
        _1510 = _1341;
        _1511 = _1340;
        _1512 = _1352;
        _1513 = _1351;
        _1514 = _1350;
        _1515 = _1362;
        _1516 = _1361;
        _1517 = _1360;
        _1518 = _1375;
        _1519 = _1374;
        _1520 = _1373;
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1201;
        _1510 = _1201;
        _1511 = _1201;
        _1512 = _1201;
        _1513 = _1201;
        _1514 = _1201;
        _1515 = _1201;
        _1516 = _1201;
        _1517 = _1201;
        _1518 = _1201;
        _1519 = _1201;
        _1520 = _1201;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1213)) + _1213;
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1214)) + _1214;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1215)) + _1215;
    float _1556 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1534, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1534, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1534, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1533));
    float _1577 = _839 * 0.5;
    float _1578 = _840 * 0.5;
    float _1579 = _841 * 0.5;
    float _1580 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1583 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1586 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1620;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1593 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1200, _1204, _1207, _1210));
        float _1597 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1202, _1205, _1208, _1211));
        float _1601 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1203, _1206, _1209, _1212));
        float _1608 = dot(vec4(cbModelParam._m0[39u]), vec4(_1577, _1578, _1579, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1608) ? 0.0 : (isnan(0.0) ? _1608 : max(0.0, _1608))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1631;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1622 = dot(vec4(cbModelParam._m0[40u]), vec4(_1577, _1578, _1579, 1.0));
        _1631 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1631 = 1.0;
    }
    float _1635 = (_1631 * cbModelParam._m0[1u].x) + (_1620 * (1.0 - cbModelParam._m0[1u].x));
    float _1645 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _736);
    float _1646 = isnan(_1645) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1645 : min(cbModelParam._m0[25u].z, _1645));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1694 = fma(_900, cbModelParam._m0[13u].z, fma(_896, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892)) + cbModelParam._m0[13u].w;
        float _1698 = fma(_900, cbModelParam._m0[14u].z, fma(_896, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892)) + cbModelParam._m0[14u].w;
        float _1702 = fma(_900, cbModelParam._m0[15u].z, fma(_896, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892)) + cbModelParam._m0[15u].w;
        float _1705 = fma(_841, cbModelParam._m0[13u].z, fma(_840, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _839));
        float _1708 = fma(_841, cbModelParam._m0[14u].z, fma(_840, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _839));
        float _1711 = fma(_841, cbModelParam._m0[15u].z, fma(_840, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _839));
        float _1739;
        if (_1705 > 0.0)
        {
            _1739 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1739 = frontier_phi_22_20_ladder;
        }
        float _1907;
        if (_1708 > 0.0)
        {
            _1907 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1907 = frontier_phi_31_27_ladder;
        }
        float _2351;
        if (_1711 > 0.0)
        {
            _2351 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2351 = frontier_phi_43_38_ladder;
        }
        float _2353 = isnan(_1907) ? _1739 : (isnan(_1739) ? _1907 : min(_1739, _1907));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1705) + _1694;
        float _2359 = (_2354 * _1708) + _1698;
        float _2360 = (_2354 * _1711) + _1702;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2363 = (-1.0) - _2361;
        float _2365 = _2361 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2360 > _2365) || ((_2360 < _2363) || ((_2359 > _2365) || ((_2359 < _2363) || ((_2358 < _2363) || (_2358 > _2365))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2360, cbModelParam._m0[9u].z, fma(_2359, cbModelParam._m0[9u].y, _2358 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2360, cbModelParam._m0[10u].z, fma(_2359, cbModelParam._m0[10u].y, _2358 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2360, cbModelParam._m0[11u].z, fma(_2359, cbModelParam._m0[11u].y, _2358 * cbModelParam._m0[11u].x))), _1646);
            frontier_phi_21_43_ladder = _2620.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2620.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2620.z * cbModelParam._m0[1u].y;
        }
        _1727 = frontier_phi_21_43_ladder_1;
        _1729 = frontier_phi_21_43_ladder;
        _1731 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_839, _840, _841), _1646);
        _1727 = _1715.x * cbModelParam._m0[1u].y;
        _1729 = _1715.y * cbModelParam._m0[1u].y;
        _1731 = _1715.z * cbModelParam._m0[1u].y;
    }
    float _1735 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _736);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1735 : min(cbModelParam._m0[25u].w, _1735));
    float _1824;
    float _1826;
    float _1828;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1788 = fma(_900, cbModelParam._m0[21u].z, fma(_896, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892)) + cbModelParam._m0[21u].w;
        float _1792 = fma(_900, cbModelParam._m0[22u].z, fma(_896, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892)) + cbModelParam._m0[22u].w;
        float _1796 = fma(_900, cbModelParam._m0[23u].z, fma(_896, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892)) + cbModelParam._m0[23u].w;
        float _1799 = fma(_841, cbModelParam._m0[21u].z, fma(_840, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _839));
        float _1802 = fma(_841, cbModelParam._m0[22u].z, fma(_840, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _839));
        float _1805 = fma(_841, cbModelParam._m0[23u].z, fma(_840, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _839));
        float _1912;
        if (_1799 > 0.0)
        {
            _1912 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1912 = frontier_phi_33_29_ladder;
        }
        float _2378;
        if (_1802 > 0.0)
        {
            _2378 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2378 = frontier_phi_45_40_ladder;
        }
        float _2749;
        if (_1805 > 0.0)
        {
            _2749 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2749 = frontier_phi_57_52_ladder;
        }
        float _2751 = isnan(_2378) ? _1912 : (isnan(_1912) ? _2378 : min(_1912, _2378));
        float _2752 = isnan(_2749) ? _2751 : (isnan(_2751) ? _2749 : min(_2751, _2749));
        float _2756 = (_2752 * _1799) + _1788;
        float _2757 = (_2752 * _1802) + _1792;
        float _2758 = (_2752 * _1805) + _1796;
        float _2759 = _2752 * 9.9999997473787516355514526367188e-05;
        float _2760 = (-1.0) - _2759;
        float _2762 = _2759 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2758 > _2762) || ((_2758 < _2760) || ((_2757 > _2762) || ((_2757 < _2760) || ((_2756 < _2760) || (_2756 > _2762))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2758, cbModelParam._m0[17u].z, fma(_2757, cbModelParam._m0[17u].y, _2756 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2758, cbModelParam._m0[18u].z, fma(_2757, cbModelParam._m0[18u].y, _2756 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2758, cbModelParam._m0[19u].z, fma(_2757, cbModelParam._m0[19u].y, _2756 * cbModelParam._m0[19u].x))), _1736);
            frontier_phi_30_57_ladder = _2879.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2879.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2879.x * cbModelParam._m0[1u].z;
        }
        _1824 = frontier_phi_30_57_ladder_2;
        _1826 = frontier_phi_30_57_ladder_1;
        _1828 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_839, _840, _841), _1736);
        _1824 = _1808.x * cbModelParam._m0[1u].z;
        _1826 = _1808.y * cbModelParam._m0[1u].z;
        _1828 = _1808.z * cbModelParam._m0[1u].z;
    }
    float _1840 = ((((1.0 - _860) * ((_847 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_860 * _847)) * _831;
    float _1841 = _1840 * ((cbModelParam._m0[1u].w * (_1824 - _1727)) + _1727);
    float _1842 = _1840 * ((cbModelParam._m0[1u].w * (_1826 - _1729)) + _1729);
    float _1843 = _1840 * ((cbModelParam._m0[1u].w * (_1828 - _1731)) + _1731);
    float _1846 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1842, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1842, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1842, cbSceneParam._m0[91u].y, _1841 * cbSceneParam._m0[91u].x));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1890 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1894 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1898 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1899 = _1886 / _1898;
    float _1900 = _1890 / _1898;
    float _1901 = _1894 / _1898;
    float _2048;
    float _2049;
    float _2050;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1928 = ((uint(_1901 > cbSceneParam._m0[59u].y) + uint(_1901 > cbSceneParam._m0[59u].x)) + uint(_1901 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1929 = _1928 + 43u;
        uint _1937 = _1928 + 44u;
        uint _1945 = _1928 + 45u;
        uint _1953 = _1928 + 46u;
        float _1964 = fma(_1898, cbSceneParam._m0[_1929].w, fma(_1894, cbSceneParam._m0[_1929].z, fma(_1890, cbSceneParam._m0[_1929].y, _1886 * cbSceneParam._m0[_1929].x)));
        float _1968 = fma(_1898, cbSceneParam._m0[_1937].w, fma(_1894, cbSceneParam._m0[_1937].z, fma(_1890, cbSceneParam._m0[_1937].y, _1886 * cbSceneParam._m0[_1937].x)));
        float _1976 = fma(_1898, cbSceneParam._m0[_1953].w, fma(_1894, cbSceneParam._m0[_1953].z, fma(_1890, cbSceneParam._m0[_1953].y, _1886 * cbSceneParam._m0[_1953].x)));
        float _1981 = cbSceneParam._m0[33u].z * _1976;
        float _1983 = cbSceneParam._m0[33u].w * _1976;
        float _1986 = fma(_1898, cbSceneParam._m0[_1945].w, fma(_1894, cbSceneParam._m0[_1945].z, fma(_1890, cbSceneParam._m0[_1945].y, _1886 * cbSceneParam._m0[_1945].x))) / _1976;
        float _2034 = (cbSceneParam._m0[33u].x - sqrt(((_1900 * _1900) + (_1899 * _1899)) + (_1901 * _1901))) * cbSceneParam._m0[33u].y;
        float _4053 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2041 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1981 + _1964) / _1976, (_1983 + _1968) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 + _1964) / _1976, (_1968 - _1981) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 - _1981) / _1976, (_1968 - _1983) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 - _1983) / _1976, (_1981 + _1968) / _1976), _1986), 0.0)).x), vec4(0.25)));
        _2048 = 1.0 - (_2041 * cbSceneParam._m0[34u].x);
        _2049 = 1.0 - (_2041 * cbSceneParam._m0[34u].y);
        _2050 = 1.0 - (_2041 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2048 = 1.0;
        _2049 = 1.0;
        _2050 = 1.0;
    }
    float _2114;
    float _2116;
    float _2118;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2102 = fma(_1898, cbSceneParam._m0[63u].w, fma(_1894, cbSceneParam._m0[63u].z, fma(_1890, cbSceneParam._m0[63u].y, _1886 * cbSceneParam._m0[63u].x)));
        float _2103 = fma(_1898, cbSceneParam._m0[60u].w, fma(_1894, cbSceneParam._m0[60u].z, fma(_1890, cbSceneParam._m0[60u].y, _1886 * cbSceneParam._m0[60u].x))) / _2102;
        float _2104 = fma(_1898, cbSceneParam._m0[61u].w, fma(_1894, cbSceneParam._m0[61u].z, fma(_1890, cbSceneParam._m0[61u].y, _1886 * cbSceneParam._m0[61u].x))) / _2102;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_2103 >= cbSceneParam._m0[64u].x) && (_2104 >= cbSceneParam._m0[64u].y)) && (_2103 <= cbSceneParam._m0[64u].z)) && (_2104 <= cbSceneParam._m0[64u].w))
        {
            float _2391 = fma(_1898, cbSceneParam._m0[62u].w, fma(_1894, cbSceneParam._m0[62u].z, fma(_1890, cbSceneParam._m0[62u].y, _1886 * cbSceneParam._m0[62u].x))) / _2102;
            float _2395 = isnan(cbSceneParam._m0[41u].w) ? _2391 : (isnan(_2391) ? cbSceneParam._m0[41u].w : max(_2391, cbSceneParam._m0[41u].w));
            float _2438 = (cbSceneParam._m0[33u].x - sqrt(((_1900 * _1900) + (_1899 * _1899)) + (_1901 * _1901))) * cbSceneParam._m0[33u].y;
            float _4069 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
            float _2445 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2103, cbSceneParam._m0[33u].w + _2104), _2395), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2103, _2104 - cbSceneParam._m0[33u].z), _2395), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2103 - cbSceneParam._m0[33u].z, _2104 - cbSceneParam._m0[33u].w), _2395), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2103 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2104), _2395), 0.0)).x), vec4(0.25)));
            float _2449 = 1.0 - (_2445 * cbSceneParam._m0[34u].x);
            float _2450 = 1.0 - (_2445 * cbSceneParam._m0[34u].y);
            float _2451 = 1.0 - (_2445 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2450) ? _2049 : (isnan(_2049) ? _2450 : min(_2049, _2450));
            frontier_phi_42_41_ladder_1 = isnan(_2449) ? _2048 : (isnan(_2048) ? _2449 : min(_2048, _2449));
            frontier_phi_42_41_ladder_2 = isnan(_2451) ? _2050 : (isnan(_2050) ? _2451 : min(_2050, _2451));
        }
        else
        {
            frontier_phi_42_41_ladder = _2049;
            frontier_phi_42_41_ladder_1 = _2048;
            frontier_phi_42_41_ladder_2 = _2050;
        }
        _2114 = frontier_phi_42_41_ladder_1;
        _2116 = frontier_phi_42_41_ladder;
        _2118 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _2114 = _2048;
        _2116 = _2049;
        _2118 = _2050;
    }
    uvec4 _2123 = floatBitsToUint(cbInstanceData._m0[_806 + 5u]);
    uint _2125 = _2123.x * 14u;
    uint _2126 = _2125 + 13u;
    float _2131 = _831 + (-1.0);
    float _2134 = (cbLight._m0[_2126].x * _2131) + 1.0;
    float _2135 = (cbLight._m0[_2126].y * _2131) + 1.0;
    uint _2136 = _2125 + 5u;
    float _2142 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2146 = _2125 + 4u;
    float _2155 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
    uint _2159 = _2125 | 1u;
    float _2170 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_733, _734, _735));
    float _2173 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_733, _734, _735));
    float _4105 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _4116 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2178 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.3183098733425140380859375;
    float _2180 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.3183098733425140380859375;
    float _2187 = ((cbLight._m0[_2136].x * _2142) * _2180) + (((cbLight._m0[_2146].x * _2114) * _2155) * _2178);
    float _2188 = ((_2142 * cbLight._m0[_2136].y) * _2180) + (((cbLight._m0[_2146].y * _2116) * _2155) * _2178);
    float _2189 = ((_2142 * cbLight._m0[_2136].z) * _2180) + (((cbLight._m0[_2146].z * _2118) * _2155) * _2178);
    uint _2191 = _2125 + 8u;
    float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _736) * 0.949999988079071044921875);
    float _2205 = _2204 * _2204;
    float _2206 = cbLight._m0[_2125].x + _760;
    float _2207 = cbLight._m0[_2125].y + _761;
    float _2208 = cbLight._m0[_2125].z + _762;
    float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
    float _2213 = _2212 * _2206;
    float _2214 = _2212 * _2207;
    float _2215 = _2212 * _2208;
    float _2216 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2125].xyz));
    float _4127 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _2220 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2221 = dot(vec3(_733, _734, _735), vec3(_2213, _2214, _2215));
    float _4149 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2225 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2213, _2214, _2215));
    float _4160 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2229 = _2205 * _2205;
    float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
    float _2244 = (exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2245 = 1.0 - _2205;
    float _2256 = (0.5 / (((_2220 * ((_2219 * _2245) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2245) + _2205) * _2219))) * _2219;
    float _4171 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
    uint _2272 = _2125 + 9u;
    float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _736) * 0.949999988079071044921875);
    float _2284 = _2283 * _2283;
    float _2285 = cbLight._m0[_2159].x + _760;
    float _2286 = cbLight._m0[_2159].y + _761;
    float _2287 = cbLight._m0[_2159].z + _762;
    float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
    float _2292 = _2291 * _2285;
    float _2293 = _2291 * _2286;
    float _2294 = _2291 * _2287;
    float _2295 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2159].xyz));
    float _4182 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2299 = dot(vec3(_733, _734, _735), vec3(_2292, _2293, _2294));
    float _4193 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2303 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2292, _2293, _2294));
    float _4204 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2307 = _2284 * _2284;
    float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
    float _2320 = (exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2321 = 1.0 - _2284;
    float _2331 = (0.5 / (((_2220 * ((_2298 * _2321) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2321) + _2284) * _2298))) * _2298;
    float _4215 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2333 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
    float _2343 = (((_2320 * cbLight._m0[_2272].x) * _2333) * _2142) + ((((cbLight._m0[_2191].x * _2114) * _2244) * _2258) * _2155);
    float _2344 = (((_2320 * cbLight._m0[_2272].y) * _2333) * _2142) + ((((cbLight._m0[_2191].y * _2116) * _2244) * _2258) * _2155);
    float _2345 = (((_2320 * cbLight._m0[_2272].z) * _2333) * _2142) + ((((cbLight._m0[_2191].z * _2118) * _2244) * _2258) * _2155);
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    if (_2123.y == 0u)
    {
        uvec4 _2463 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2464 = _2463.x;
        uint _2475 = uint((float(_2463.y) * floor(float(uint(cbSceneParam._m0[85u].y * _769) / _2464))) + floor(float(uint(cbSceneParam._m0[85u].x * _768) / _2464)));
        float _2485 = (log2(_1901 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2486 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        uint _2489 = uint(isnan(14.0) ? _2486 : (isnan(_2486) ? 14.0 : min(_2486, 14.0)));
        uvec4 _2494 = texelFetch(g_lightClusterGridBuffer, int(((_2489 << 2u) + (_2475 << 6u)) >> 2u));
        uint _2495 = _2494.x;
        uint _2496 = _2463.z;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        if (((((1u << ((_2496 >> 4u) & 15u)) + 4294967295u) & _2495) == 0u) || ((_2496 & 240u) == 0u))
        {
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
        }
        else
        {
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            uint _2813 = 0u;
            uint _2822;
            bool _2823;
            for (;;)
            {
                _2822 = texelFetch(g_lightClassification, int((((_2489 << 5u) + (_2475 << 9u)) + (_2813 << 2u)) >> 2u)).x;
                _2823 = _2822 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2823)
                {
                    frontier_phi_66_pred = _2808;
                    frontier_phi_66_pred_1 = _2807;
                    frontier_phi_66_pred_2 = _2809;
                    frontier_phi_66_pred_3 = _2812;
                    frontier_phi_66_pred_4 = _2811;
                    frontier_phi_66_pred_5 = _2810;
                }
                else
                {
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    uint _2958;
                    _2952 = _2807;
                    _2953 = _2808;
                    _2954 = _2809;
                    _2955 = _2810;
                    _2956 = _2811;
                    _2957 = _2812;
                    _2958 = _2822;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    for (;;)
                    {
                        uint _2962 = uint(findLSB(_2958)) + (_2813 << 5u);
                        uint _2959 = (_2958 + 4294967295u) & _2958;
                        uint _2964 = _2962 * 48u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2984 = (_2962 * 48u) + 4u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3003 = (_2962 * 48u) + 8u;
                        vec3 _3014 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x));
                        float _3018 = _2978.x - _1899;
                        float _3019 = _2978.y - _1900;
                        float _3020 = _2978.z - _1901;
                        float _3021 = dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020));
                        float _3024 = inversesqrt(_3021);
                        float _3025 = _3024 * _3018;
                        float _3026 = _3024 * _3019;
                        float _3027 = _3024 * _3020;
                        float _3028 = dot(vec3(_787, _790, _793), vec3(_3025, _3026, _3027));
                        float _3033 = 1.0 - (_3021 * _2978.w);
                        float _4236 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3034 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                        float _3035 = sqrt(_3021) * _2997.w;
                        float _3038 = 1.39999997615814208984375 / (_3035 + 1.39999997615814208984375);
                        float _3039 = _3038 * _3038;
                        float _3042 = ((1.0 - _3039) * _3028) + _3039;
                        float _3045 = _3035 * _3035;
                        float _3049 = ((isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))) * _3034) / ((_3045 * 0.699999988079071044921875) + 1.0);
                        float _3053 = (-0.0) - _1899;
                        float _3054 = (-0.0) - _1900;
                        float _3055 = (-0.0) - _1901;
                        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                        float _3060 = _3059 * _3053;
                        float _3061 = _3059 * _3054;
                        float _3062 = _3059 * _3055;
                        float _3069 = exp2(log2(1.0 / ((_3045 * 3.5) + 5.0)) * 0.25);
                        float _3070 = 1.0 - _847;
                        float _3077 = sqrt(1.0 - ((1.0 - (_3070 * _3070)) * (1.0 - (_3069 * _3069))));
                        float _3078 = _3077 * _3077;
                        float _3079 = _3078 * _3078;
                        float _3080 = _3060 + _3025;
                        float _3081 = _3061 + _3026;
                        float _3082 = _3062 + _3027;
                        float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                        float _3090 = dot(vec3(_787, _790, _793), vec3(_3060, _3061, _3062));
                        float _4252 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3093 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _3094 = dot(vec3(_787, _790, _793), vec3(_3086 * _3080, _3086 * _3081, _3086 * _3082));
                        float _4263 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3097 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                        float _3101 = ((_3097 * _3097) * (_3079 + (-1.0))) + 1.0;
                        float _3102 = _3038 * _3078;
                        float _3103 = _3102 * _3102;
                        float _3106 = ((1.0 - _3103) * _3028) + _3103;
                        float _4274 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3107 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _3108 = 1.0 - _3078;
                        float _3118 = (0.5 / (((_3107 * ((_3093 * _3108) + _3078)) + 9.9999999392252902907785028219223e-09) + (((_3107 * _3108) + _3078) * _3093))) * _3107;
                        float _4285 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3129 = (((_3079 * 3.1415927410125732421875) * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) / ((_3101 * _3101) * ((_3045 * 2.1991131305694580078125) + 3.141590118408203125))) * _3034;
                        _2887 = (_3049 * _2997.x) + _2955;
                        _2888 = (_3049 * _2997.y) + _2956;
                        _2889 = (_3049 * _2997.z) + _2957;
                        _2884 = (_3129 * _3014.x) + _2952;
                        _2885 = (_3129 * _3014.y) + _2953;
                        _2886 = (_3129 * _3014.z) + _2954;
                        if (_2959 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2959;
                        }
                    }
                    frontier_phi_66_pred = _2885;
                    frontier_phi_66_pred_1 = _2884;
                    frontier_phi_66_pred_2 = _2886;
                    frontier_phi_66_pred_3 = _2889;
                    frontier_phi_66_pred_4 = _2888;
                    frontier_phi_66_pred_5 = _2887;
                }
                _2632 = frontier_phi_66_pred;
                _2630 = frontier_phi_66_pred_1;
                _2634 = frontier_phi_66_pred_2;
                _2640 = frontier_phi_66_pred_3;
                _2638 = frontier_phi_66_pred_4;
                _2636 = frontier_phi_66_pred_5;
                uint _2814 = _2813 + 1u;
                if (_2814 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2807 = _2630;
                    _2808 = _2632;
                    _2809 = _2634;
                    _2810 = _2636;
                    _2811 = _2638;
                    _2812 = _2640;
                    _2813 = _2814;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
        }
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.z;
        uint _2646 = (_2644 >> 8u) & 15u;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        if (((4294967295u << _2646) & _2495) == 0u)
        {
            _2775 = _2629;
            _2777 = _2631;
            _2779 = _2633;
            _2781 = _2635;
            _2783 = _2637;
            _2785 = _2639;
        }
        else
        {
            float _2800 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
            float _2801 = _2800 * _1899;
            float _2802 = _2800 * _1900;
            float _2803 = _2800 * _1901;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2646 < ((_2644 >> 12u) & 15u))
            {
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2935 = _2629;
                float _2936 = _2631;
                float _2937 = _2633;
                float _2938 = _2635;
                float _2939 = _2637;
                float _2940 = _2639;
                uint _2941 = _2646;
                uint _2950;
                bool _2951;
                for (;;)
                {
                    _2950 = texelFetch(g_lightClassification, int((((_2489 << 5u) + (_2475 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                    _2951 = _2950 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2951)
                    {
                        frontier_phi_72_pred = _2936;
                        frontier_phi_72_pred_1 = _2935;
                        frontier_phi_72_pred_2 = _2940;
                        frontier_phi_72_pred_3 = _2939;
                        frontier_phi_72_pred_4 = _2938;
                        frontier_phi_72_pred_5 = _2937;
                    }
                    else
                    {
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3147 = _2935;
                        float _3148 = _2936;
                        float _3149 = _2937;
                        float _3150 = _2938;
                        float _3151 = _2939;
                        float _3152 = _2940;
                        uint _3153 = _2950;
                        uint _3154;
                        vec4 _3179;
                        float _3180;
                        vec4 _3195;
                        vec3 _3207;
                        vec4 _3223;
                        vec4 _3238;
                        float _3284;
                        bool _3285;
                        for (;;)
                        {
                            uint _3164 = ((_2941 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3153));
                            _3154 = (_3153 + 4294967295u) & _3153;
                            uint _3166 = _3164 * 40u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            _3180 = _3179.w;
                            uint _3182 = (_3164 * 40u) + 4u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3164 * 40u) + 8u;
                            _3207 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x));
                            uint _3210 = (_3164 * 40u) + 16u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3225 = (_3164 * 40u) + 20u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3240 = (_3164 * 40u) + 24u;
                            vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3259 = (_3164 * 40u) + 28u;
                            vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            _3284 = fma(_1901, _3272.z, fma(_1900, _3272.y, _3272.x * _1899)) + _3272.w;
                            _3285 = !((fma(_1901, _3253.z, fma(_1900, _3253.y, _3253.x * _1899)) + _3253.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3285)
                            {
                                float _3312 = _3179.x - _1899;
                                float _3313 = _3179.y - _1900;
                                float _3314 = _3179.z - _1901;
                                float _3315 = dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314));
                                float _3318 = inversesqrt(_3315);
                                float _3319 = _3318 * _3312;
                                float _3320 = _3318 * _3313;
                                float _3321 = _3318 * _3314;
                                float _3325 = 1.0 - (_3315 / (_3180 * _3180));
                                float _4296 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3330 = sqrt(_3315) * _3195.w;
                                float _3332 = 1.39999997615814208984375 / (_3330 + 1.39999997615814208984375);
                                float _3333 = _3332 * _3332;
                                float _3336 = ((1.0 - _3333) * dot(vec3(_3319, _3320, _3321), vec3(_787, _790, _793))) + _3333;
                                float _3339 = _3330 * _3330;
                                float _3343 = (fma(_1901, _3223.z, fma(_1900, _3223.y, _3223.x * _1899)) + _3223.w) / _3284;
                                float _3344 = (fma(_1901, _3238.z, fma(_1900, _3238.y, _3238.x * _1899)) + _3238.w) / _3284;
                                float _3348 = 1.0 - dot(vec2(_3343, _3344), vec2(_3343, _3344));
                                float _4312 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3350 = _3349 * (((isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0))) * _3326) / ((_3339 * 0.699999988079071044921875) + 1.0));
                                float _3362 = exp2(log2(1.0 / ((_3339 * 3.5) + 5.0)) * 0.25);
                                float _3363 = 1.0 - _847;
                                float _3370 = sqrt(1.0 - ((1.0 - (_3363 * _3363)) * (1.0 - (_3362 * _3362))));
                                float _3371 = _3370 * _3370;
                                float _3372 = _3371 * _3371;
                                float _3373 = _3319 - _2801;
                                float _3374 = _3320 - _2802;
                                float _3375 = _3321 - _2803;
                                float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                                float _3383 = dot(vec3(_787, _790, _793), vec3((-0.0) - _2801, (-0.0) - _2802, (-0.0) - _2803));
                                float _4323 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3386 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3387 = dot(vec3(_787, _790, _793), vec3(_3379 * _3373, _3379 * _3374, _3379 * _3375));
                                float _4334 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3390 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3394 = ((_3390 * _3390) * (_3372 + (-1.0))) + 1.0;
                                float _3395 = _3332 * _3371;
                                float _3396 = _3395 * _3395;
                                float _3402 = ((1.0 - _3396) * dot(vec3(_787, _790, _793), vec3(_3319, _3320, _3321))) + _3396;
                                float _4345 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3404 = 1.0 - _3371;
                                float _3414 = (0.5 / (((_3403 * ((_3386 * _3404) + _3371)) + 9.9999999392252902907785028219223e-09) + (((_3403 * _3404) + _3371) * _3386))) * _3403;
                                float _4356 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3424 = (_3349 * _3326) * (((_3372 * 3.1415927410125732421875) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) / ((_3394 * _3394) * ((_3339 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3424 * _3207.y;
                                frontier_phi_78_pred_1 = _3424 * _3207.x;
                                frontier_phi_78_pred_2 = _3350 * _3195.z;
                                frontier_phi_78_pred_3 = _3350 * _3195.y;
                                frontier_phi_78_pred_4 = _3350 * _3195.x;
                                frontier_phi_78_pred_5 = _3424 * _3207.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3429 = frontier_phi_78_pred;
                            _3428 = frontier_phi_78_pred_1;
                            _3433 = frontier_phi_78_pred_2;
                            _3432 = frontier_phi_78_pred_3;
                            _3431 = frontier_phi_78_pred_4;
                            _3430 = frontier_phi_78_pred_5;
                            _3137 = _3431 + _3150;
                            _3138 = _3432 + _3151;
                            _3139 = _3433 + _3152;
                            _3134 = _3428 + _3147;
                            _3135 = _3429 + _3148;
                            _3136 = _3430 + _3149;
                            if (_3154 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3154;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3135;
                        frontier_phi_72_pred_1 = _3134;
                        frontier_phi_72_pred_2 = _3139;
                        frontier_phi_72_pred_3 = _3138;
                        frontier_phi_72_pred_4 = _3137;
                        frontier_phi_72_pred_5 = _3136;
                    }
                    _2778 = frontier_phi_72_pred;
                    _2776 = frontier_phi_72_pred_1;
                    _2786 = frontier_phi_72_pred_2;
                    _2784 = frontier_phi_72_pred_3;
                    _2782 = frontier_phi_72_pred_4;
                    _2780 = frontier_phi_72_pred_5;
                    uint _2942 = _2941 + 1u;
                    if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2935 = _2776;
                        _2936 = _2778;
                        _2937 = _2780;
                        _2938 = _2782;
                        _2939 = _2784;
                        _2940 = _2786;
                        _2941 = _2942;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2786;
                frontier_phi_59_60_ladder_1 = _2782;
                frontier_phi_59_60_ladder_2 = _2780;
                frontier_phi_59_60_ladder_3 = _2778;
                frontier_phi_59_60_ladder_4 = _2776;
                frontier_phi_59_60_ladder_5 = _2784;
            }
            else
            {
                frontier_phi_59_60_ladder = _2639;
                frontier_phi_59_60_ladder_1 = _2635;
                frontier_phi_59_60_ladder_2 = _2633;
                frontier_phi_59_60_ladder_3 = _2631;
                frontier_phi_59_60_ladder_4 = _2629;
                frontier_phi_59_60_ladder_5 = _2637;
            }
            _2775 = frontier_phi_59_60_ladder_4;
            _2777 = frontier_phi_59_60_ladder_3;
            _2779 = frontier_phi_59_60_ladder_2;
            _2781 = frontier_phi_59_60_ladder_1;
            _2783 = frontier_phi_59_60_ladder_5;
            _2785 = frontier_phi_59_60_ladder;
        }
        float _2790 = isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0));
        _2508 = (_2790 * _2781) + _2187;
        _2510 = (_2790 * _2783) + _2188;
        _2512 = (_2790 * _2785) + _2189;
        _2514 = ((_2775 * 0.039999999105930328369140625) * _2790) + _2343;
        _2516 = ((_2777 * 0.039999999105930328369140625) * _2790) + _2344;
        _2518 = ((_2779 * 0.039999999105930328369140625) * _2790) + _2345;
    }
    else
    {
        _2508 = _2187;
        _2510 = _2188;
        _2512 = _2189;
        _2514 = _2343;
        _2516 = _2344;
        _2518 = _2345;
    }
    uint _2524 = _807 + uint(cbMatDynParam._m0[0u].w);
    float _2530 = ((_709 * (_697 - (_697 * _670))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2524].x;
    float _2531 = ((_709 * (_698 - (_698 * _670))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2524].y;
    float _2532 = ((_709 * (_699 - (_699 * _670))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2524].z;
    float _4372 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4383 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4394 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _2549 = (((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2508 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _831))) + ((_2514 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1635)) * cbPerFrame._m0[3u].x)) + _2530;
    float _2551 = (_2531 + ((_2516 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1635)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2510 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _831)));
    float _2553 = (_2532 + ((_2518 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1635)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2512 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _831)));
    float _4420 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2566 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    uint _2567 = _806 + 6u;
    float _2575 = _768 / cbSceneParam._m0[86u].x;
    float _2576 = _769 / cbSceneParam._m0[86u].y;
    vec4 _2590 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, (log2((isnan(cbSceneParam._m0[77u].w) ? _755 : (isnan(_755) ? cbSceneParam._m0[77u].w : min(_755, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2592 = _2590.x;
    float _2593 = _2590.y;
    float _2594 = _2590.z;
    float _2595 = _2590.w;
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    if (_755 > cbSceneParam._m0[78u].w)
    {
        float _2654 = isnan(_755) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _755 : min(cbSceneParam._m0[80u].w, _755));
        float _2655 = _2654 / _755;
        float _2666 = _2655 * _280;
        float _2667 = _281 * _2655;
        float _2668 = (-0.0) - _2667;
        float _2669 = _2655 * _282;
        float _2671 = (cbSceneParam._m0[77u].w * _2668) / _2654;
        float _2672 = _2671 + cbSceneParam._m0[79u].w;
        float _2673 = cbSceneParam._m0[79u].w - _2667;
        float _2679 = sqrt(((_2666 * _2666) + (_2667 * _2667)) + (_2669 * _2669));
        float _2682 = (1.0 - (cbSceneParam._m0[77u].w / _2654)) * _2679;
        float _2687 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2689 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2897;
        if (abs((_2668 - _2671) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2897 = ((((_2672 > 0.0) ? exp2(_2687 * _2672) : (2.0 - exp2(_2689 * _2672))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2682;
        }
        else
        {
            float _2836 = 1.0 / cbSceneParam._m0[80u].x;
            float _2837 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : max(_2672, _2673));
            float _2838 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : min(_2672, _2673));
            float _2847 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : min(_2837, 0.0));
            float _2848 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : min(_2838, 0.0));
            _2897 = ((abs(_2679 / _2668) * cbSceneParam._m0[80u].y) * ((((_2847 - _2848) * 2.0) - ((exp2(_2687 * (isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0)))) - exp2(_2687 * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0))))) * _2836)) - ((exp2(_2689 * _2847) - exp2(_2689 * _2848)) * _2836))) + (_2682 * cbSceneParam._m0[80u].z);
        }
        vec4 _2899 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, 1.0), 0.0);
        float _2908 = exp2((_2897 * (-1.44269502162933349609375)) * (1.0 - _2899.w));
        float _2909 = log2(_2908);
        float _2925 = log2(_2595);
        _2691 = (exp2(_2925 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].x)) * _2899.x) / cbSceneParam._m0[78u].x)) + _2592;
        _2693 = (exp2(_2925 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].y)) * _2899.y) / cbSceneParam._m0[78u].y)) + _2593;
        _2695 = (exp2(_2925 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].z)) * _2899.z) / cbSceneParam._m0[78u].z)) + _2594;
        _2697 = _2908 * _2595;
    }
    else
    {
        _2691 = _2592;
        _2693 = _2593;
        _2695 = _2594;
        _2697 = _2595;
    }
    float _2708 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2709 = _2708 == 3.0;
    float _2710 = log2(_2697);
    float _2714 = exp2(_2710 * cbSceneParam._m0[78u].x);
    float _2715 = exp2(_2710 * cbSceneParam._m0[78u].y);
    float _2716 = exp2(_2710 * cbSceneParam._m0[78u].z);
    float _2717 = _2714 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0)));
    float _2718 = _2715 * (isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0)));
    float _2719 = _2716 * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0)));
    float _2728 = (_2708 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2728 * (_2709 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2691)));
    SV_Target.y = _2728 * (_2709 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2693)));
    SV_Target.z = _2728 * (_2709 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2695)));
    SV_Target.w = cbInstanceData._m0[_2567].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2530) * _2566) * _2714) * _2728;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2531) * _2566) * _2715) * _2728;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2532) * _2566) * _2716) * _2728;
    SV_Target_1.w = cbInstanceData._m0[_2567].w;
}


