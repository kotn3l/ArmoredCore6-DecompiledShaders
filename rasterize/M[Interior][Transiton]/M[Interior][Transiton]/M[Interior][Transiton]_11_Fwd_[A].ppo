#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1031;
float _2994;
float _2995;
float _2996;
float _2997;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _292 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _330 = cbMtdParam._m0[27u].w + _271;
    float _331 = cbMtdParam._m0[28u].x + _272;
    float _332 = cbMtdParam._m0[28u].y + _273;
    float _349 = (-0.0) - dot(vec3(_330, _331, _332), vec3(_203 * _195, _203 * _196, _203 * _197));
    float _350 = (-0.0) - dot(vec3(_330, _331, _332), vec3(_214 * TANGENT.x, _214 * TANGENT.y, _214 * TANGENT.z));
    float _351 = (-0.0) - dot(vec3(_330, _331, _332), vec3((-0.0) - (NORMAL.x * _210), (-0.0) - (NORMAL.y * _210), (-0.0) - (NORMAL.z * _210)));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _358 = _355 * _351;
    float _361 = ((_355 * _349) + (((_292.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w)) * cbMtdParam._m0[24u].x;
    float _362 = ((_355 * _350) + (((_292.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x)) * cbMtdParam._m0[23u].w;
    float _363 = fract(TEXCOORD.x);
    float _364 = fract(TEXCOORD.y);
    float _370;
    if (_361 > 0.0)
    {
        _370 = (1.0 - _363) / _361;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_361 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _363) / _361;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _370 = frontier_phi_3_2_ladder;
    }
    float _378;
    if (_362 > 0.0)
    {
        _378 = (1.0 - _364) / _362;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _364) / _362;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _378 = frontier_phi_7_6_ladder;
    }
    float _382 = (_358 > 0.0) ? (cbMtdParam._m0[17u].x / _358) : 5000.0;
    float _383 = isnan(_378) ? _370 : (isnan(_370) ? _378 : min(_370, _378));
    float _384 = isnan(_382) ? _383 : (isnan(_383) ? _382 : min(_383, _382));
    float _388 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _395 = ((_384 * _358) + _388) / _388;
    vec4 _420 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_363 + (-0.5)) + (_384 * _361)) / _395) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_364 + (-0.5)) + (_384 * _362)) / _395) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _430 = cbMtdParam._m0[9u].x * _420.x;
    float _431 = cbMtdParam._m0[9u].y * _420.y;
    float _432 = cbMtdParam._m0[9u].z * _420.z;
    vec4 _456 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _461 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _467 = ((_456.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _469 = (-0.0) - (cbMtdParam._m0[21u].x * ((_456.x * 0.5) + (-0.25)));
    float _470 = fract(_461);
    float _472 = fract(_461 + 0.5);
    vec4 _499 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_470 * _469) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_467 * _470) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _501 = _499.x;
    float _507 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_472 * _469) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_467 * _472) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _501) * abs((_470 * 2.0) + (-1.0))) + _501;
    float _516 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _520 = fract(abs(_516));
    float _529 = sin(cbMtdParam._m0[21u].z);
    float _530 = cos(cbMtdParam._m0[21u].z);
    float _531 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _532 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _562 = abs(cbMtdParam._m0[20u].w * (((_507 - (((_516 >= ((-0.0) - _516)) ? _520 : ((-0.0) - _520)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_532, (-0.0) - _529, _530 * _531) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_532, _530, _531 * _529) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _566 = (((_562 * cbMtdParam._m0[18u].y) - _507) * _562) + _507;
    float _3016 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
    vec4 _579 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _594 = (cbMtdParam._m0[14u].x * _579.x) * cbMtdParam._m0[19u].x;
    float _595 = (cbMtdParam._m0[14u].y * _579.y) * cbMtdParam._m0[19u].x;
    float _596 = (cbMtdParam._m0[14u].z * _579.z) * cbMtdParam._m0[19u].x;
    float _606 = exp2(log2(_567) * cbMtdParam._m0[20u].x);
    float _3027 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3038 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3049 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _635 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _639 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _640 = _271 * _639;
    float _641 = _272 * _639;
    float _642 = _273 * _639;
    vec4 _647 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _649 = _647.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _746 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _752 = (cbMatDynParam._m0[5u].x * _746) + cbMatDynParam._m0[5u].y;
        float _3060 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
        float _757 = (cbMatDynParam._m0[5u].z * _746) + cbMatDynParam._m0[5u].w;
        float _3071 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0))) - _753)) + _753) < ((_649 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _662 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _663 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _676 = uint(roundEven(NORMAL.w)) * 13u;
    uint _678 = _676 + 9u;
    uint _679 = _678 + uint(cbMatDynParam._m0[0u].w);
    float _685 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0)))) * cbInstanceData._m0[_679].x;
    float _686 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0)))) * cbInstanceData._m0[_679].y;
    float _687 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0)))) * cbInstanceData._m0[_679].z;
    float _3082 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
    float _3093 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
    float _3104 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
    vec4 _699 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _662, cbSceneParam._m0[86u].y * _663));
    float _702 = _699.x * TEXCOORD_4;
    float _703 = (-0.0) - _640;
    float _704 = (-0.0) - _641;
    float _705 = (-0.0) - _642;
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1030;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _818 = (cbModelParam._m0[37u].x * ((((fma(_735, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _727)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _820 = (cbModelParam._m0[37u].y * ((((fma(_735, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _727)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _821 = (((((fma(_735, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _727)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_818, _820, _821), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_818, _820, _821), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_818, _820, _821), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_818, _820, _821), 0.0);
        float _858 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_824.x + (-0.5));
        float _860 = _858 * (_824.y + (-0.5));
        float _861 = _858 * (_824.z + (-0.5));
        float _868 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_831.x + (-0.5));
        float _870 = _868 * (_831.y + (-0.5));
        float _871 = _868 * (_831.z + (-0.5));
        float _878 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_838.x + (-0.5));
        float _880 = _878 * (_838.y + (-0.5));
        float _881 = _878 * (_838.z + (-0.5));
        float _888 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_845.x + (-0.5));
        float _890 = _888 * (_845.y + (-0.5));
        float _891 = _888 * (_845.z + (-0.5));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = _859 * 0.5;
        float _896 = _869 * 0.5;
        float _897 = _879 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _912 = (dot(vec3(0.0), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3130 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _922 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3141 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3152 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))) * (_924 + 1.0))) + _929) * _892;
        float _939 = _860 * 0.5;
        float _940 = _870 * 0.5;
        float _941 = _880 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(0.0), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3163 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3174 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3185 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0))) * (_966 + 1.0))) + _971) * _893;
        float _981 = _861 * 0.5;
        float _982 = _871 * 0.5;
        float _983 = _881 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(0.0), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3196 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3207 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3218 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0))) * (_1008 + 1.0))) + _1013) * _894;
        _1030 = _861;
        _1032 = _860;
        _1033 = _859;
        _1034 = _871;
        _1035 = _870;
        _1036 = _869;
        _1037 = _881;
        _1038 = _880;
        _1039 = _879;
        _1040 = _894;
        _1041 = _893;
        _1042 = _892;
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
    }
    else
    {
        _1030 = _1031;
        _1032 = _1031;
        _1033 = _1031;
        _1034 = _1031;
        _1035 = _1031;
        _1036 = _1031;
        _1037 = _1031;
        _1038 = _1031;
        _1039 = _1031;
        _1040 = _1031;
        _1041 = _1031;
        _1042 = _1031;
        _1043 = 0.0;
        _1044 = 0.0;
        _1045 = 0.0;
    }
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1101 = (cbModelParam._m0[38u].x * ((((fma(_735, cbModelParam._m0[30u].z, fma(_731, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _727)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1102 = (cbModelParam._m0[38u].y * ((((fma(_735, cbModelParam._m0[31u].z, fma(_731, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _727)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1103 = (((((fma(_735, cbModelParam._m0[32u].z, fma(_731, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _727)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1138 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1105.x + (-0.5));
        float _1140 = _1138 * (_1105.y + (-0.5));
        float _1141 = _1138 * (_1105.z + (-0.5));
        float _1148 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1112.x + (-0.5));
        float _1150 = _1148 * (_1112.y + (-0.5));
        float _1151 = _1148 * (_1112.z + (-0.5));
        float _1158 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1119.x + (-0.5));
        float _1160 = _1158 * (_1119.y + (-0.5));
        float _1161 = _1158 * (_1119.z + (-0.5));
        float _1168 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1126.x + (-0.5));
        float _1170 = _1168 * (_1126.y + (-0.5));
        float _1171 = _1168 * (_1126.z + (-0.5));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = _1139 * 0.5;
        float _1176 = _1149 * 0.5;
        float _1177 = _1159 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(0.0), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3281 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_1202 + 1.0))) + _1207) * _1172;
        float _1217 = _1140 * 0.5;
        float _1218 = _1150 * 0.5;
        float _1219 = _1160 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(0.0), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3292 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3303 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3314 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * (_1244 + 1.0))) + _1249) * _1173;
        float _1259 = _1141 * 0.5;
        float _1260 = _1151 * 0.5;
        float _1261 = _1161 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(0.0), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3325 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3336 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3347 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))) * (_1286 + 1.0))) + _1291) * _1174;
        _1308 = _1141;
        _1309 = _1140;
        _1310 = _1139;
        _1311 = _1151;
        _1312 = _1150;
        _1313 = _1149;
        _1314 = _1161;
        _1315 = _1160;
        _1316 = _1159;
        _1317 = _1174;
        _1318 = _1173;
        _1319 = _1172;
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
    }
    else
    {
        _1308 = _1031;
        _1309 = _1031;
        _1310 = _1031;
        _1311 = _1031;
        _1312 = _1031;
        _1313 = _1031;
        _1314 = _1031;
        _1315 = _1031;
        _1316 = _1031;
        _1317 = _1031;
        _1318 = _1031;
        _1319 = _1031;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1043)) + _1043;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1044)) + _1044;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1045)) + _1045;
    float _1355 = fma(_1334, cbSceneParam._m0[89u].z, fma(_1333, cbSceneParam._m0[89u].y, _1332 * cbSceneParam._m0[89u].x));
    float _1358 = fma(_1334, cbSceneParam._m0[90u].z, fma(_1333, cbSceneParam._m0[90u].y, _1332 * cbSceneParam._m0[90u].x));
    float _1361 = fma(_1334, cbSceneParam._m0[91u].z, fma(_1333, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1332));
    float _1376 = _640 * (-0.5);
    float _1377 = _641 * (-0.5);
    float _1378 = _642 * (-0.5);
    float _1379 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1382 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1385 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1419;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1392 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1030, _1034, _1037, _1040));
        float _1396 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1032, _1035, _1038, _1041));
        float _1400 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1033, _1036, _1039, _1042));
        float _1407 = dot(vec4(cbModelParam._m0[39u]), vec4(_1376, _1377, _1378, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1407) ? 0.0 : (isnan(0.0) ? _1407 : max(0.0, _1407))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1430;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1421 = dot(vec4(cbModelParam._m0[40u]), vec4(_1376, _1377, _1378, 1.0));
        _1430 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1430 = 1.0;
    }
    float _1434 = (_1430 * cbModelParam._m0[1u].x) + (_1419 * (1.0 - cbModelParam._m0[1u].x));
    float _1443 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1491 = fma(_735, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727)) + cbModelParam._m0[13u].w;
        float _1495 = fma(_735, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727)) + cbModelParam._m0[14u].w;
        float _1499 = fma(_735, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727)) + cbModelParam._m0[15u].w;
        float _1502 = fma(_705, cbModelParam._m0[13u].z, fma(_704, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _703));
        float _1505 = fma(_705, cbModelParam._m0[14u].z, fma(_704, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _703));
        float _1508 = fma(_705, cbModelParam._m0[15u].z, fma(_704, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _703));
        float _1534;
        if (_1502 > 0.0)
        {
            _1534 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1534 = frontier_phi_25_23_ladder;
        }
        float _1829;
        if (_1505 > 0.0)
        {
            _1829 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1829 = frontier_phi_34_30_ladder;
        }
        float _2174;
        if (_1508 > 0.0)
        {
            _2174 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2174 = frontier_phi_48_41_ladder;
        }
        float _2176 = isnan(_1829) ? _1534 : (isnan(_1534) ? _1829 : min(_1534, _1829));
        float _2177 = isnan(_2174) ? _2176 : (isnan(_2176) ? _2174 : min(_2176, _2174));
        float _2181 = (_2177 * _1502) + _1491;
        float _2182 = (_2177 * _1505) + _1495;
        float _2183 = (_2177 * _1508) + _1499;
        float _2184 = _2177 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2184;
        float _2187 = _2184 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2183 > _2187) || ((_2183 < _2185) || ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 < _2185) || (_2181 > _2187))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2183, cbModelParam._m0[9u].z, fma(_2182, cbModelParam._m0[9u].y, _2181 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2183, cbModelParam._m0[10u].z, fma(_2182, cbModelParam._m0[10u].y, _2181 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2183, cbModelParam._m0[11u].z, fma(_2182, cbModelParam._m0[11u].y, _2181 * cbModelParam._m0[11u].x))), _1443);
            frontier_phi_24_48_ladder = _2322.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2322.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2322.x * cbModelParam._m0[1u].y;
        }
        _1524 = frontier_phi_24_48_ladder_2;
        _1526 = frontier_phi_24_48_ladder_1;
        _1528 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_703, _704, _705), _1443);
        _1524 = _1512.x * cbModelParam._m0[1u].y;
        _1526 = _1512.y * cbModelParam._m0[1u].y;
        _1528 = _1512.z * cbModelParam._m0[1u].y;
    }
    float _1531 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1619;
    float _1621;
    float _1623;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1583 = fma(_735, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727)) + cbModelParam._m0[21u].w;
        float _1587 = fma(_735, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727)) + cbModelParam._m0[22u].w;
        float _1591 = fma(_735, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727)) + cbModelParam._m0[23u].w;
        float _1594 = fma(_705, cbModelParam._m0[21u].z, fma(_704, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _703));
        float _1597 = fma(_705, cbModelParam._m0[22u].z, fma(_704, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _703));
        float _1600 = fma(_705, cbModelParam._m0[23u].z, fma(_704, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _703));
        float _1834;
        if (_1594 > 0.0)
        {
            _1834 = abs((1.0 - _1583) / _1594);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1583 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1834 = frontier_phi_36_32_ladder;
        }
        float _2200;
        if (_1597 > 0.0)
        {
            _2200 = abs((1.0 - _1587) / _1597);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1587 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2200 = frontier_phi_50_43_ladder;
        }
        float _2387;
        if (_1600 > 0.0)
        {
            _2387 = abs((1.0 - _1591) / _1600);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1591 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2387 = frontier_phi_68_61_ladder;
        }
        float _2389 = isnan(_2200) ? _1834 : (isnan(_1834) ? _2200 : min(_1834, _2200));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1594) + _1583;
        float _2395 = (_2390 * _1597) + _1587;
        float _2396 = (_2390 * _1600) + _1591;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2397;
        float _2400 = _2397 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2396 > _2400) || ((_2396 < _2398) || ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 < _2398) || (_2394 > _2400))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2396, cbModelParam._m0[17u].z, fma(_2395, cbModelParam._m0[17u].y, _2394 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2396, cbModelParam._m0[18u].z, fma(_2395, cbModelParam._m0[18u].y, _2394 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2396, cbModelParam._m0[19u].z, fma(_2395, cbModelParam._m0[19u].y, _2394 * cbModelParam._m0[19u].x))), _1531);
            frontier_phi_33_68_ladder = _2588.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2588.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2588.x * cbModelParam._m0[1u].z;
        }
        _1619 = frontier_phi_33_68_ladder_2;
        _1621 = frontier_phi_33_68_ladder;
        _1623 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1603 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_703, _704, _705), _1531);
        _1619 = _1603.x * cbModelParam._m0[1u].z;
        _1621 = _1603.y * cbModelParam._m0[1u].z;
        _1623 = _1603.z * cbModelParam._m0[1u].z;
    }
    float _1635 = _702 * 0.01200000010430812835693359375;
    float _1637 = _1635 * ((cbModelParam._m0[1u].w * (_1619 - _1524)) + _1524);
    float _1638 = _1635 * ((cbModelParam._m0[1u].w * (_1621 - _1526)) + _1526);
    float _1639 = _1635 * ((cbModelParam._m0[1u].w * (_1623 - _1528)) + _1528);
    float _1642 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, _1637 * cbSceneParam._m0[91u].x));
    uvec4 _1658 = floatBitsToUint(cbInstanceData._m0[_676 + 5u]);
    uint _1660 = _1658.x * 14u;
    uint _1661 = _1660 + 13u;
    float _1666 = _702 + (-1.0);
    float _1669 = (cbLight._m0[_1661].x * _1666) + 1.0;
    float _1670 = (cbLight._m0[_1661].y * _1666) + 1.0;
    uint _1671 = _1660 + 5u;
    float _1677 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
    uint _1681 = _1660 + 4u;
    float _1687 = isnan(1.0) ? _1669 : (isnan(_1669) ? 1.0 : min(_1669, 1.0));
    uint _1691 = _1660 | 1u;
    float _1702 = dot(vec3(cbLight._m0[_1660].xyz), vec3(0.0));
    float _1705 = dot(vec3(cbLight._m0[_1691].xyz), vec3(0.0));
    float _3483 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _3494 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1710 = (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * 0.3183098733425140380859375;
    float _1712 = (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * 0.3183098733425140380859375;
    float _1719 = ((cbLight._m0[_1671].x * _1677) * _1712) + ((cbLight._m0[_1681].x * _1687) * _1710);
    float _1720 = ((_1677 * cbLight._m0[_1671].y) * _1712) + ((_1687 * cbLight._m0[_1681].y) * _1710);
    float _1721 = ((_1677 * cbLight._m0[_1671].z) * _1712) + ((_1687 * cbLight._m0[_1681].z) * _1710);
    uint _1722 = _1660 + 8u;
    float _1728 = cbLight._m0[_1660].x + _640;
    float _1729 = cbLight._m0[_1660].y + _641;
    float _1730 = cbLight._m0[_1660].z + _642;
    float _1734 = inversesqrt(dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730)));
    float _1738 = dot(vec3(0.0), vec3(cbLight._m0[_1660].xyz));
    float _3505 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1741 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _1742 = dot(vec3(0.0), vec3(_640, _641, _642));
    float _3516 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _1746 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_1728 * _1734, _1729 * _1734, _1730 * _1734));
    float _3527 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1757 = (exp2(log2(1.0 - (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1763 = (0.5 / ((_1741 + 9.9999999392252902907785028219223e-09) + _1745)) * _1741;
    float _3538 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1765 = (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * 0.31831014156341552734375;
    uint _1776 = _1660 + 9u;
    float _1782 = cbLight._m0[_1691].x + _640;
    float _1783 = cbLight._m0[_1691].y + _641;
    float _1784 = cbLight._m0[_1691].z + _642;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1792 = dot(vec3(0.0), vec3(cbLight._m0[_1691].xyz));
    float _3549 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _1796 = dot(vec3(cbLight._m0[_1691].xyz), vec3(_1782 * _1788, _1783 * _1788, _1784 * _1788));
    float _3560 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1805 = (exp2(log2(1.0 - (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1809 = (0.5 / ((_1795 + 9.9999999392252902907785028219223e-09) + _1745)) * _1795;
    float _3571 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1811 = (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * 0.31831014156341552734375;
    float _1821 = (((_1805 * cbLight._m0[_1776].x) * _1811) * _1677) + (((_1757 * cbLight._m0[_1722].x) * _1765) * _1687);
    float _1822 = (((_1805 * cbLight._m0[_1776].y) * _1811) * _1677) + (((_1757 * cbLight._m0[_1722].y) * _1765) * _1687);
    float _1823 = (((_1805 * cbLight._m0[_1776].z) * _1811) * _1677) + (((_1757 * cbLight._m0[_1722].z) * _1765) * _1687);
    float _1939;
    float _1941;
    float _1943;
    float _1945;
    float _1947;
    float _1949;
    if (_1658.y == 0u)
    {
        float _1879 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1880 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1879;
        float _1881 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1879;
        float _1882 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1879;
        uvec4 _1894 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1895 = _1894.x;
        uint _1906 = uint((float(_1894.y) * floor(float(uint(cbSceneParam._m0[85u].y * _663) / _1895))) + floor(float(uint(cbSceneParam._m0[85u].x * _662) / _1895)));
        float _1916 = (log2(_1882 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1917 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        uint _1920 = uint(isnan(14.0) ? _1917 : (isnan(_1917) ? 14.0 : min(_1917, 14.0)));
        uvec4 _1925 = texelFetch(g_lightClusterGridBuffer, int(((_1920 << 2u) + (_1906 << 6u)) >> 2u));
        uint _1926 = _1925.x;
        uint _1927 = _1894.z;
        float _2043;
        float _2045;
        float _2047;
        float _2049;
        float _2051;
        float _2053;
        if (((((1u << ((_1927 >> 4u) & 15u)) + 4294967295u) & _1926) == 0u) || ((_1927 & 240u) == 0u))
        {
            _2043 = 0.0;
            _2045 = 0.0;
            _2047 = 0.0;
            _2049 = 0.0;
            _2051 = 0.0;
            _2053 = 0.0;
        }
        else
        {
            float _2044;
            float _2046;
            float _2048;
            float _2050;
            float _2052;
            float _2054;
            float _2234 = 0.0;
            float _2235 = 0.0;
            float _2236 = 0.0;
            float _2237 = 0.0;
            float _2238 = 0.0;
            float _2239 = 0.0;
            uint _2240 = 0u;
            uint _2249;
            bool _2250;
            for (;;)
            {
                _2249 = texelFetch(g_lightClassification, int((((_1920 << 5u) + (_1906 << 9u)) + (_2240 << 2u)) >> 2u)).x;
                _2250 = _2249 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2250)
                {
                    frontier_phi_63_pred = _2236;
                    frontier_phi_63_pred_1 = _2239;
                    frontier_phi_63_pred_2 = _2238;
                    frontier_phi_63_pred_3 = _2237;
                    frontier_phi_63_pred_4 = _2235;
                    frontier_phi_63_pred_5 = _2234;
                }
                else
                {
                    float _2430;
                    float _2431;
                    float _2432;
                    float _2433;
                    float _2434;
                    float _2435;
                    uint _2436;
                    _2430 = _2234;
                    _2431 = _2235;
                    _2432 = _2236;
                    _2433 = _2237;
                    _2434 = _2238;
                    _2435 = _2239;
                    _2436 = _2249;
                    float _2331;
                    float _2332;
                    float _2333;
                    float _2334;
                    float _2335;
                    float _2336;
                    for (;;)
                    {
                        uint _2440 = uint(findLSB(_2436)) + (_2240 << 5u);
                        uint _2437 = (_2436 + 4294967295u) & _2436;
                        uint _2442 = _2440 * 48u;
                        vec4 _2456 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2442)).x, texelFetch(g_PointLightRenderingBuffer, int(_2442 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2442 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2442 + 3u)).x));
                        uint _2462 = (_2440 * 48u) + 4u;
                        vec4 _2475 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2462)).x, texelFetch(g_PointLightRenderingBuffer, int(_2462 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2462 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2462 + 3u)).x));
                        uint _2481 = (_2440 * 48u) + 8u;
                        vec3 _2492 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2481)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 2u)).x));
                        float _2496 = _2456.x - _1880;
                        float _2497 = _2456.y - _1881;
                        float _2498 = _2456.z - _1882;
                        float _2499 = dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498));
                        float _2502 = inversesqrt(_2499);
                        float _2511 = 1.0 - (_2499 * _2456.w);
                        float _3592 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
                        float _2512 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
                        float _2513 = sqrt(_2499) * _2475.w;
                        float _2516 = 1.39999997615814208984375 / (_2513 + 1.39999997615814208984375);
                        float _2517 = _2516 * _2516;
                        float _2520 = ((1.0 - _2517) * dot(vec3(0.0), vec3(_2502 * _2496, _2502 * _2497, _2502 * _2498))) + _2517;
                        float _2523 = _2513 * _2513;
                        float _2527 = ((isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0))) * _2512) / ((_2523 * 0.699999988079071044921875) + 1.0);
                        float _2531 = (-0.0) - _1880;
                        float _2532 = (-0.0) - _1881;
                        float _2533 = (-0.0) - _1882;
                        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
                        float _2541 = dot(vec3(0.0), vec3(_2537 * _2531, _2537 * _2532, _2537 * _2533));
                        float _3608 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
                        float _3619 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
                        float _2545 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
                        float _2549 = (0.5 / (((isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) + 9.9999999392252902907785028219223e-09) + _2545)) * _2545;
                        float _3630 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
                        float _2558 = (((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * 3.1415927410125732421875) / ((_2523 * 2.1991131305694580078125) + 3.141590118408203125)) * _2512;
                        _2334 = (_2527 * _2475.x) + _2433;
                        _2335 = (_2527 * _2475.y) + _2434;
                        _2336 = (_2527 * _2475.z) + _2435;
                        _2331 = (_2558 * _2492.x) + _2430;
                        _2332 = (_2558 * _2492.y) + _2431;
                        _2333 = (_2558 * _2492.z) + _2432;
                        if (_2437 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2430 = _2331;
                            _2431 = _2332;
                            _2432 = _2333;
                            _2433 = _2334;
                            _2434 = _2335;
                            _2435 = _2336;
                            _2436 = _2437;
                        }
                    }
                    frontier_phi_63_pred = _2333;
                    frontier_phi_63_pred_1 = _2336;
                    frontier_phi_63_pred_2 = _2335;
                    frontier_phi_63_pred_3 = _2334;
                    frontier_phi_63_pred_4 = _2332;
                    frontier_phi_63_pred_5 = _2331;
                }
                _2048 = frontier_phi_63_pred;
                _2054 = frontier_phi_63_pred_1;
                _2052 = frontier_phi_63_pred_2;
                _2050 = frontier_phi_63_pred_3;
                _2046 = frontier_phi_63_pred_4;
                _2044 = frontier_phi_63_pred_5;
                uint _2241 = _2240 + 1u;
                if (_2241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2234 = _2044;
                    _2235 = _2046;
                    _2236 = _2048;
                    _2237 = _2050;
                    _2238 = _2052;
                    _2239 = _2054;
                    _2240 = _2241;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2043 = _2044;
            _2045 = _2046;
            _2047 = _2048;
            _2049 = _2050;
            _2051 = _2052;
            _2053 = _2054;
        }
        uvec4 _2057 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2058 = _2057.z;
        uint _2060 = (_2058 >> 8u) & 15u;
        float _2205;
        float _2207;
        float _2209;
        float _2211;
        float _2213;
        float _2215;
        if (((4294967295u << _2060) & _1926) == 0u)
        {
            _2205 = _2043;
            _2207 = _2045;
            _2209 = _2047;
            _2211 = _2049;
            _2213 = _2051;
            _2215 = _2053;
        }
        else
        {
            float _2230 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2060 < ((_2058 >> 12u) & 15u))
            {
                float _2206;
                float _2208;
                float _2210;
                float _2212;
                float _2214;
                float _2216;
                float _2413 = _2043;
                float _2414 = _2045;
                float _2415 = _2047;
                float _2416 = _2049;
                float _2417 = _2051;
                float _2418 = _2053;
                uint _2419 = _2060;
                uint _2428;
                bool _2429;
                for (;;)
                {
                    _2428 = texelFetch(g_lightClassification, int((((_1920 << 5u) + (_1906 << 9u)) + (_2419 << 2u)) >> 2u)).x;
                    _2429 = _2428 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2429)
                    {
                        frontier_phi_77_pred = _2418;
                        frontier_phi_77_pred_1 = _2417;
                        frontier_phi_77_pred_2 = _2416;
                        frontier_phi_77_pred_3 = _2415;
                        frontier_phi_77_pred_4 = _2414;
                        frontier_phi_77_pred_5 = _2413;
                    }
                    else
                    {
                        float _2593;
                        float _2594;
                        float _2595;
                        float _2596;
                        float _2597;
                        float _2598;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2606 = _2413;
                        float _2607 = _2414;
                        float _2608 = _2415;
                        float _2609 = _2416;
                        float _2610 = _2417;
                        float _2611 = _2418;
                        uint _2612 = _2428;
                        uint _2613;
                        vec4 _2638;
                        float _2639;
                        vec4 _2654;
                        vec3 _2666;
                        vec4 _2682;
                        vec4 _2697;
                        float _2743;
                        bool _2744;
                        for (;;)
                        {
                            uint _2623 = ((_2419 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2612));
                            _2613 = (_2612 + 4294967295u) & _2612;
                            uint _2625 = _2623 * 40u;
                            _2638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 3u)).x));
                            _2639 = _2638.w;
                            uint _2641 = (_2623 * 40u) + 4u;
                            _2654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 3u)).x));
                            uint _2656 = (_2623 * 40u) + 8u;
                            _2666 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 2u)).x));
                            uint _2669 = (_2623 * 40u) + 16u;
                            _2682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 3u)).x));
                            uint _2684 = (_2623 * 40u) + 20u;
                            _2697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 3u)).x));
                            uint _2699 = (_2623 * 40u) + 24u;
                            vec4 _2712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 3u)).x));
                            uint _2718 = (_2623 * 40u) + 28u;
                            vec4 _2731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            _2743 = fma(_1882, _2731.z, fma(_1881, _2731.y, _2731.x * _1880)) + _2731.w;
                            _2744 = !((fma(_1882, _2712.z, fma(_1881, _2712.y, _2712.x * _1880)) + _2712.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2744)
                            {
                                float _2771 = _2638.x - _1880;
                                float _2772 = _2638.y - _1881;
                                float _2773 = _2638.z - _1882;
                                float _2774 = dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773));
                                float _2777 = inversesqrt(_2774);
                                float _2778 = _2777 * _2771;
                                float _2779 = _2777 * _2772;
                                float _2780 = _2777 * _2773;
                                float _2784 = 1.0 - (_2774 / (_2639 * _2639));
                                float _3641 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                                float _2785 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
                                float _2789 = sqrt(_2774) * _2654.w;
                                float _2791 = 1.39999997615814208984375 / (_2789 + 1.39999997615814208984375);
                                float _2792 = _2791 * _2791;
                                float _2793 = 1.0 - _2792;
                                float _2795 = (_2793 * dot(vec3(_2778, _2779, _2780), vec3(0.0))) + _2792;
                                float _2798 = _2789 * _2789;
                                float _2802 = (fma(_1882, _2682.z, fma(_1881, _2682.y, _2682.x * _1880)) + _2682.w) / _2743;
                                float _2803 = (fma(_1882, _2697.z, fma(_1881, _2697.y, _2697.x * _1880)) + _2697.w) / _2743;
                                float _2807 = 1.0 - dot(vec2(_2802, _2803), vec2(_2802, _2803));
                                float _3657 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                                float _2808 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
                                float _2809 = _2808 * (((isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0))) * _2785) / ((_2798 * 0.699999988079071044921875) + 1.0));
                                float _2819 = dot(vec3(0.0), vec3((-0.0) - (_1880 * _2230), (-0.0) - (_1881 * _2230), (-0.0) - (_1882 * _2230)));
                                float _3668 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                                float _2827 = (_2793 * dot(vec3(0.0), vec3(_2778, _2779, _2780))) + _2792;
                                float _3679 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                                float _2828 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
                                float _2832 = (0.5 / (((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) + 9.9999999392252902907785028219223e-09) + _2828)) * _2828;
                                float _3690 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                                float _2839 = (_2808 * _2785) * (((isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * 3.1415927410125732421875) / ((_2798 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2809 * _2654.x;
                                frontier_phi_83_pred_1 = _2809 * _2654.z;
                                frontier_phi_83_pred_2 = _2809 * _2654.y;
                                frontier_phi_83_pred_3 = _2839 * _2666.z;
                                frontier_phi_83_pred_4 = _2839 * _2666.y;
                                frontier_phi_83_pred_5 = _2839 * _2666.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2846 = frontier_phi_83_pred;
                            _2848 = frontier_phi_83_pred_1;
                            _2847 = frontier_phi_83_pred_2;
                            _2845 = frontier_phi_83_pred_3;
                            _2844 = frontier_phi_83_pred_4;
                            _2843 = frontier_phi_83_pred_5;
                            _2596 = _2846 + _2609;
                            _2597 = _2847 + _2610;
                            _2598 = _2848 + _2611;
                            _2593 = _2843 + _2606;
                            _2594 = _2844 + _2607;
                            _2595 = _2845 + _2608;
                            if (_2613 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2606 = _2593;
                                _2607 = _2594;
                                _2608 = _2595;
                                _2609 = _2596;
                                _2610 = _2597;
                                _2611 = _2598;
                                _2612 = _2613;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2598;
                        frontier_phi_77_pred_1 = _2597;
                        frontier_phi_77_pred_2 = _2596;
                        frontier_phi_77_pred_3 = _2595;
                        frontier_phi_77_pred_4 = _2594;
                        frontier_phi_77_pred_5 = _2593;
                    }
                    _2216 = frontier_phi_77_pred;
                    _2214 = frontier_phi_77_pred_1;
                    _2212 = frontier_phi_77_pred_2;
                    _2210 = frontier_phi_77_pred_3;
                    _2208 = frontier_phi_77_pred_4;
                    _2206 = frontier_phi_77_pred_5;
                    uint _2420 = _2419 + 1u;
                    if (_2420 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2413 = _2206;
                        _2414 = _2208;
                        _2415 = _2210;
                        _2416 = _2212;
                        _2417 = _2214;
                        _2418 = _2216;
                        _2419 = _2420;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2208;
                frontier_phi_52_53_ladder_1 = _2216;
                frontier_phi_52_53_ladder_2 = _2214;
                frontier_phi_52_53_ladder_3 = _2212;
                frontier_phi_52_53_ladder_4 = _2210;
                frontier_phi_52_53_ladder_5 = _2206;
            }
            else
            {
                frontier_phi_52_53_ladder = _2045;
                frontier_phi_52_53_ladder_1 = _2053;
                frontier_phi_52_53_ladder_2 = _2051;
                frontier_phi_52_53_ladder_3 = _2049;
                frontier_phi_52_53_ladder_4 = _2047;
                frontier_phi_52_53_ladder_5 = _2043;
            }
            _2205 = frontier_phi_52_53_ladder_5;
            _2207 = frontier_phi_52_53_ladder;
            _2209 = frontier_phi_52_53_ladder_4;
            _2211 = frontier_phi_52_53_ladder_3;
            _2213 = frontier_phi_52_53_ladder_2;
            _2215 = frontier_phi_52_53_ladder_1;
        }
        float _2220 = isnan(1.0) ? _702 : (isnan(_702) ? 1.0 : min(_702, 1.0));
        _1939 = (_2220 * _2211) + _1719;
        _1941 = (_2220 * _2213) + _1720;
        _1943 = (_2220 * _2215) + _1721;
        _1945 = ((_2205 * 0.039999999105930328369140625) * _2220) + _1821;
        _1947 = ((_2207 * 0.039999999105930328369140625) * _2220) + _1822;
        _1949 = ((_2209 * 0.039999999105930328369140625) * _2220) + _1823;
    }
    else
    {
        _1939 = _1719;
        _1941 = _1720;
        _1943 = _1721;
        _1945 = _1821;
        _1947 = _1822;
        _1949 = _1823;
    }
    uint _1955 = _678 + uint(cbMatDynParam._m0[0u].w);
    float _1961 = ((_606 * (_594 - (_594 * _567))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1955].x;
    float _1962 = ((_606 * (_595 - (_595 * _567))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1955].y;
    float _1963 = ((_606 * (_596 - (_596 * _567))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1955].z;
    float _3706 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _3717 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3728 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _1980 = (((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1939 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _702))) + ((_1945 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1434)) * cbPerFrame._m0[3u].x)) + _1961;
    float _1982 = (_1962 + ((_1947 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1434)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1941 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _702)));
    float _1984 = (_1963 + ((_1949 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1434)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1943 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _702)));
    float _1985 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1986 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1987 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1993 = cbMtdParam._m0[2u].x * _1961;
    float _1994 = cbMtdParam._m0[2u].y * _1962;
    float _1995 = cbMtdParam._m0[2u].z * _1963;
    float _3754 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1997 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    uint _1998 = _676 + 6u;
    float _2006 = _662 / cbSceneParam._m0[86u].x;
    float _2007 = _663 / cbSceneParam._m0[86u].y;
    vec4 _2021 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2006, _2007, (log2((isnan(cbSceneParam._m0[77u].w) ? _635 : (isnan(_635) ? cbSceneParam._m0[77u].w : min(_635, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2023 = _2021.x;
    float _2024 = _2021.y;
    float _2025 = _2021.z;
    float _2026 = _2021.w;
    float _2106;
    float _2108;
    float _2110;
    float _2112;
    if (_635 > cbSceneParam._m0[78u].w)
    {
        float _2068 = isnan(_635) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _635 : min(cbSceneParam._m0[80u].w, _635));
        float _2069 = _2068 / _635;
        float _2080 = _2069 * _271;
        float _2081 = _272 * _2069;
        float _2082 = (-0.0) - _2081;
        float _2083 = _2069 * _273;
        float _2085 = (cbSceneParam._m0[77u].w * _2082) / _2068;
        float _2086 = _2085 + cbSceneParam._m0[79u].w;
        float _2087 = cbSceneParam._m0[79u].w - _2081;
        float _2093 = sqrt(((_2080 * _2080) + (_2081 * _2081)) + (_2083 * _2083));
        float _2096 = (1.0 - (cbSceneParam._m0[77u].w / _2068)) * _2093;
        float _2102 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2104 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2344;
        if (abs((_2082 - _2085) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2344 = ((((_2086 > 0.0) ? exp2(_2102 * _2086) : (2.0 - exp2(_2104 * _2086))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2096;
        }
        else
        {
            float _2263 = 1.0 / cbSceneParam._m0[80u].x;
            float _2264 = isnan(_2087) ? _2086 : (isnan(_2086) ? _2087 : max(_2086, _2087));
            float _2265 = isnan(_2087) ? _2086 : (isnan(_2086) ? _2087 : min(_2086, _2087));
            float _2274 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : min(_2264, 0.0));
            float _2275 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : min(_2265, 0.0));
            _2344 = ((abs(_2093 / _2082) * cbSceneParam._m0[80u].y) * ((((_2274 - _2275) * 2.0) - ((exp2(_2102 * (isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0)))) - exp2(_2102 * (isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0))))) * _2263)) - ((exp2(_2104 * _2274) - exp2(_2104 * _2275)) * _2263))) + (_2096 * cbSceneParam._m0[80u].z);
        }
        vec4 _2346 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2006, _2007, 1.0), 0.0);
        float _2355 = exp2((_2344 * (-1.44269502162933349609375)) * (1.0 - _2346.w));
        float _2356 = log2(_2355);
        float _2372 = log2(_2026);
        _2106 = (exp2(_2372 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2356 * cbSceneParam._m0[78u].x)) * _2346.x) / cbSceneParam._m0[78u].x)) + _2023;
        _2108 = (exp2(_2372 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2356 * cbSceneParam._m0[78u].y)) * _2346.y) / cbSceneParam._m0[78u].y)) + _2024;
        _2110 = (exp2(_2372 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2356 * cbSceneParam._m0[78u].z)) * _2346.z) / cbSceneParam._m0[78u].z)) + _2025;
        _2112 = _2355 * _2026;
    }
    else
    {
        _2106 = _2023;
        _2108 = _2024;
        _2110 = _2025;
        _2112 = _2026;
    }
    bool _2382;
    vec4 _2121;
    vec4 _2144;
    float _2146;
    float _2150;
    float _2151;
    float _2152;
    float _2155;
    float _2158;
    float _2161;
    float _2162;
    bool _2173;
    for (;;)
    {
        _2121 = cbMatDynParam._m0[0u];
        float _2123 = roundEven(_2121.y);
        bool _2124 = _2123 == 3.0;
        float _2126 = log2(_2112);
        float _2130 = exp2(_2126 * cbSceneParam._m0[78u].x);
        float _2131 = exp2(_2126 * cbSceneParam._m0[78u].y);
        float _2132 = exp2(_2126 * cbSceneParam._m0[78u].z);
        float _2133 = _2130 * _1985;
        float _2134 = _2131 * _1986;
        float _2135 = _2132 * _1987;
        float _2142 = _649 + (-0.5);
        _2144 = cbMtdParam._m0[1u];
        _2146 = _2144.y * _2142;
        float _2149 = (_2123 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2150 = _2149 * (_2124 ? _2133 : (_2133 + (cbSceneParam._m0[72u].w * _2106)));
        _2151 = _2149 * (_2124 ? _2134 : (_2134 + (cbSceneParam._m0[72u].w * _2108)));
        _2152 = _2149 * (_2124 ? _2135 : (_2135 + (cbSceneParam._m0[72u].w * _2110)));
        _2155 = ((_1993 * _1997) * _2130) * _2149;
        _2158 = ((_1994 * _1997) * _2131) * _2149;
        _2161 = ((_1995 * _1997) * _2132) * _2149;
        _2162 = _2142 * 0.999000012874603271484375;
        _2173 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2173)
        {
            if ((cbInstanceData._m0[_676 + 7u].x + _2162) < 0.5)
            {
                _2382 = true;
                break;
            }
        }
        uint _2298 = _678 + uint(_2121.w);
        if ((cbInstanceData._m0[_2298].w < 1.0) && ((cbInstanceData._m0[_2298].w + _2162) < 0.5))
        {
            _2382 = true;
            break;
        }
        if ((_2146 + 1.0) < _2144.x)
        {
            _2382 = true;
            break;
        }
        _2382 = false;
        break;
    }
    float _2563;
    if (_2382)
    {
        discard_state = true;
        _2563 = 0.0;
    }
    else
    {
        _2563 = cbInstanceData._m0[_1998].w;
    }
    SV_Target.x = _2150;
    SV_Target.y = _2151;
    SV_Target.z = _2152;
    SV_Target.w = _2563;
    SV_Target_1.x = _2155;
    SV_Target_1.y = _2158;
    SV_Target_1.z = _2161;
    SV_Target_1.w = cbInstanceData._m0[_1998].w;
    discard_exit();
}


