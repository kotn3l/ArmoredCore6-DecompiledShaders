#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1242;
float _3387;
float _3388;
float _3389;
float _3390;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _296 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _299 = _296.x;
    vec4 _317 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _299) + cbMtdParam._m0[12u].x) * _317.x;
    float _336 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _299) + cbMtdParam._m0[12u].y) * _317.y;
    float _338 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _299) + cbMtdParam._m0[12u].z) * _317.z;
    vec4 _356 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _395 = cbMtdParam._m0[27u].w + _280;
    float _396 = cbMtdParam._m0[28u].x + _281;
    float _397 = cbMtdParam._m0[28u].y + _282;
    float _411 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_210, _211, _212));
    float _412 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_224, _225, _226));
    float _413 = (-0.0) - dot(vec3(_395, _396, _397), vec3((-0.0) - _217, (-0.0) - _218, (-0.0) - _219));
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _420 = _417 * _413;
    float _423 = ((_417 * _411) + ((cbMtdParam._m0[25u].w * _299) * ((_356.x * 2.0) + (-1.0)))) * cbMtdParam._m0[24u].x;
    float _424 = ((_417 * _412) + ((cbMtdParam._m0[26u].x * _299) * ((_356.y * 2.0) + (-1.0)))) * cbMtdParam._m0[23u].w;
    float _425 = fract(TEXCOORD.x);
    float _426 = fract(TEXCOORD.y);
    float _432;
    if (_423 > 0.0)
    {
        _432 = (1.0 - _425) / _423;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_423 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _425) / _423;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _432 = frontier_phi_3_2_ladder;
    }
    float _440;
    if (_424 > 0.0)
    {
        _440 = (1.0 - _426) / _424;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_424 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _426) / _424;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _440 = frontier_phi_7_6_ladder;
    }
    float _444 = (_420 > 0.0) ? (cbMtdParam._m0[17u].x / _420) : 5000.0;
    float _445 = isnan(_440) ? _432 : (isnan(_432) ? _440 : min(_432, _440));
    float _446 = isnan(_444) ? _445 : (isnan(_445) ? _444 : min(_445, _444));
    float _450 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _457 = ((_446 * _420) + _450) / _450;
    vec4 _482 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_425 + (-0.5)) + (_446 * _423)) / _457) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_426 + (-0.5)) + (_446 * _424)) / _457) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _498 = _299 * 0.1500000059604644775390625;
    float _506 = (_498 * (((_482.x * _299) * cbMtdParam._m0[9u].x) - _334)) + _334;
    float _507 = (_498 * (((_482.y * _299) * cbMtdParam._m0[9u].y) - _336)) + _336;
    float _508 = (_498 * (((_482.z * _299) * cbMtdParam._m0[9u].z) - _338)) + _338;
    vec4 _521 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _521.z;
    float _528 = (_521.x * 2.0) + (-1.0);
    float _529 = (_521.y * 2.0) + (-1.0);
    float _530 = dot(vec2(_528, _529), vec2(_528, _529));
    float _3409 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _535 = sqrt(1.0 - (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))));
    vec4 _559 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _564 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _570 = ((_559.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _572 = (-0.0) - (cbMtdParam._m0[21u].x * ((_559.x * 0.5) + (-0.25)));
    float _573 = fract(_564);
    float _575 = fract(_564 + 0.5);
    vec4 _602 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_573 * _572) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_570 * _573) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _604 = _602.x;
    float _610 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_575 * _572) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_570 * _575) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _604) * abs((_573 * 2.0) + (-1.0))) + _604;
    float _619 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _623 = fract(abs(_619));
    float _632 = sin(cbMtdParam._m0[21u].z);
    float _633 = cos(cbMtdParam._m0[21u].z);
    float _634 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _635 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _665 = abs(cbMtdParam._m0[20u].w * (((_610 - (((_619 >= ((-0.0) - _619)) ? _623 : ((-0.0) - _623)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_635, (-0.0) - _632, _633 * _634) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_635, _633, _634 * _632) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _669 = (((_665 * cbMtdParam._m0[18u].y) - _610) * _665) + _610;
    float _3420 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _670 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    vec4 _682 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _697 = (cbMtdParam._m0[14u].x * _682.x) * cbMtdParam._m0[19u].x;
    float _698 = (cbMtdParam._m0[14u].y * _682.y) * cbMtdParam._m0[19u].x;
    float _699 = (cbMtdParam._m0[14u].z * _682.z) * cbMtdParam._m0[19u].x;
    float _709 = exp2(log2(_670) * cbMtdParam._m0[20u].x);
    float _722 = fma(_535, _217, fma(_529, _224, _528 * _210));
    float _725 = fma(_535, _218, fma(_529, _225, _528 * _211));
    float _728 = fma(_535, _219, fma(_529, _226, _528 * _212));
    float _732 = inversesqrt(dot(vec3(_722, _725, _728), vec3(_722, _725, _728)));
    float _733 = _732 * _722;
    float _734 = _732 * _725;
    float _735 = _732 * _728;
    float _3431 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _736 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _3442 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3453 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3464 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _755 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _759 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _760 = _280 * _759;
    float _761 = _281 * _759;
    float _762 = _282 * _759;
    vec4 _767 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _769 = _767.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _924 = sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282));
        float _930 = (cbMatDynParam._m0[5u].x * _924) + cbMatDynParam._m0[5u].y;
        float _3475 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _935 = (cbMatDynParam._m0[5u].z * _924) + cbMatDynParam._m0[5u].w;
        float _3486 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) - _931)) + _931) < ((_769 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _781 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _782 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _800 = fma(_735, cbSceneParam._m0[5u].z, fma(_734, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _733));
    float _803 = fma(_735, cbSceneParam._m0[6u].z, fma(_734, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _733));
    float _806 = fma(_735, cbSceneParam._m0[7u].z, fma(_734, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _733));
    uint _819 = uint(roundEven(NORMAL.w)) * 13u;
    uint _820 = _819 + 9u;
    uint _821 = _820 + uint(cbMatDynParam._m0[0u].w);
    float _827 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) * cbInstanceData._m0[_821].x;
    float _828 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * cbInstanceData._m0[_821].y;
    float _829 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_821].z;
    float _3497 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _3508 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    vec4 _841 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _781, cbSceneParam._m0[86u].y * _782));
    float _844 = _841.x * TEXCOORD_4;
    float _845 = dot(vec3(_733, _734, _735), vec3(_760, _761, _762));
    float _848 = _845 * 2.0;
    float _852 = (_848 * _733) - _760;
    float _853 = (_848 * _734) - _761;
    float _854 = (_848 * _735) - _762;
    float _858 = abs(dot(vec3(_760, _761, _762), vec3(_733, _734, _735)));
    float _3530 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _860 = sqrt(_736);
    float _873 = exp2((_860 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_860 * 3.0));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1241;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _968 = fma(_913, cbModelParam._m0[26u].z, fma(_909, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _905));
        float _972 = fma(_913, cbModelParam._m0[27u].z, fma(_909, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _905));
        float _976 = fma(_913, cbModelParam._m0[28u].z, fma(_909, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _905));
        float _999 = _905 + _733;
        float _1000 = _909 + _734;
        float _1001 = _913 + _735;
        float _1011 = fma(_1001, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _999)) - _968;
        float _1012 = fma(_1001, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _999)) - _972;
        float _1013 = fma(_1001, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _999)) - _976;
        float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
        float _1030 = ((_1017 * _1011) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_968 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1017 * _1012) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_972 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1017 * _1013) / cbModelParam._m0[34u].z) + ((((((_976 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        float _1069 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1035.x + (-0.5));
        float _1071 = _1069 * (_1035.y + (-0.5));
        float _1072 = _1069 * (_1035.z + (-0.5));
        float _1079 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1042.x + (-0.5));
        float _1081 = _1079 * (_1042.y + (-0.5));
        float _1082 = _1079 * (_1042.z + (-0.5));
        float _1089 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1049.x + (-0.5));
        float _1091 = _1089 * (_1049.y + (-0.5));
        float _1092 = _1089 * (_1049.z + (-0.5));
        float _1099 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1056.x + (-0.5));
        float _1101 = _1099 * (_1056.y + (-0.5));
        float _1102 = _1099 * (_1056.z + (-0.5));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = _1070 * 0.5;
        float _1107 = _1080 * 0.5;
        float _1108 = _1090 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1123 = (dot(vec3(_733, _734, _735), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1133 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3578 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1135 + 1.0))) + _1140) * _1103;
        float _1150 = _1071 * 0.5;
        float _1151 = _1081 * 0.5;
        float _1152 = _1091 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_733, _734, _735), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3611 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1177 + 1.0))) + _1182) * _1104;
        float _1192 = _1072 * 0.5;
        float _1193 = _1082 * 0.5;
        float _1194 = _1092 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_733, _734, _735), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3644 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1219 + 1.0))) + _1224) * _1105;
        _1241 = _1072;
        _1243 = _1071;
        _1244 = _1070;
        _1245 = _1082;
        _1246 = _1081;
        _1247 = _1080;
        _1248 = _1092;
        _1249 = _1091;
        _1250 = _1090;
        _1251 = _1105;
        _1252 = _1104;
        _1253 = _1103;
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _1242;
        _1243 = _1242;
        _1244 = _1242;
        _1245 = _1242;
        _1246 = _1242;
        _1247 = _1242;
        _1248 = _1242;
        _1249 = _1242;
        _1250 = _1242;
        _1251 = _1242;
        _1252 = _1242;
        _1253 = _1242;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1284 = fma(_913, cbModelParam._m0[30u].z, fma(_909, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _905));
        float _1288 = fma(_913, cbModelParam._m0[31u].z, fma(_909, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _905));
        float _1292 = fma(_913, cbModelParam._m0[32u].z, fma(_909, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _905));
        float _1315 = _905 + _733;
        float _1316 = _909 + _734;
        float _1317 = _913 + _735;
        float _1327 = fma(_1317, cbModelParam._m0[30u].z, fma(_1316, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1315)) - _1284;
        float _1328 = fma(_1317, cbModelParam._m0[31u].z, fma(_1316, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1315)) - _1288;
        float _1329 = fma(_1317, cbModelParam._m0[32u].z, fma(_1316, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1315)) - _1292;
        float _1333 = inversesqrt(dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329)));
        float _1346 = ((_1333 * _1327) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1284 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1333 * _1328) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1288 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1333 * _1329) / cbModelParam._m0[35u].z) + ((((((_1292 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        float _1383 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1350.x + (-0.5));
        float _1385 = _1383 * (_1350.y + (-0.5));
        float _1386 = _1383 * (_1350.z + (-0.5));
        float _1393 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1357.x + (-0.5));
        float _1395 = _1393 * (_1357.y + (-0.5));
        float _1396 = _1393 * (_1357.z + (-0.5));
        float _1403 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1364.x + (-0.5));
        float _1405 = _1403 * (_1364.y + (-0.5));
        float _1406 = _1403 * (_1364.z + (-0.5));
        float _1413 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1371.x + (-0.5));
        float _1415 = _1413 * (_1371.y + (-0.5));
        float _1416 = _1413 * (_1371.z + (-0.5));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = _1384 * 0.5;
        float _1421 = _1394 * 0.5;
        float _1422 = _1404 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_733, _734, _735), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _3707 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1447 + 1.0))) + _1452) * _1417;
        float _1462 = _1385 * 0.5;
        float _1463 = _1395 * 0.5;
        float _1464 = _1405 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_733, _734, _735), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _3740 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1489 + 1.0))) + _1494) * _1418;
        float _1504 = _1386 * 0.5;
        float _1505 = _1396 * 0.5;
        float _1506 = _1406 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_733, _734, _735), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _3773 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1531 + 1.0))) + _1536) * _1419;
        _1553 = _1386;
        _1554 = _1385;
        _1555 = _1384;
        _1556 = _1396;
        _1557 = _1395;
        _1558 = _1394;
        _1559 = _1406;
        _1560 = _1405;
        _1561 = _1404;
        _1562 = _1419;
        _1563 = _1418;
        _1564 = _1417;
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1242;
        _1554 = _1242;
        _1555 = _1242;
        _1556 = _1242;
        _1557 = _1242;
        _1558 = _1242;
        _1559 = _1242;
        _1560 = _1242;
        _1561 = _1242;
        _1562 = _1242;
        _1563 = _1242;
        _1564 = _1242;
        _1565 = 0.0;
        _1566 = 0.0;
        _1567 = 0.0;
    }
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1254)) + _1254;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1255)) + _1255;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1256)) + _1256;
    float _1600 = fma(_1579, cbSceneParam._m0[89u].z, fma(_1578, cbSceneParam._m0[89u].y, _1577 * cbSceneParam._m0[89u].x));
    float _1603 = fma(_1579, cbSceneParam._m0[90u].z, fma(_1578, cbSceneParam._m0[90u].y, _1577 * cbSceneParam._m0[90u].x));
    float _1606 = fma(_1579, cbSceneParam._m0[91u].z, fma(_1578, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1577));
    float _1621 = _852 * 0.5;
    float _1622 = _853 * 0.5;
    float _1623 = _854 * 0.5;
    float _1624 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1627 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1630 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1664;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1637 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1241, _1245, _1248, _1251));
        float _1641 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1645 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1652 = dot(vec4(cbModelParam._m0[39u]), vec4(_1621, _1622, _1623, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1675;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1666 = dot(vec4(cbModelParam._m0[40u]), vec4(_1621, _1622, _1623, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1679 = (_1675 * cbModelParam._m0[1u].x) + (_1664 * (1.0 - cbModelParam._m0[1u].x));
    float _1689 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _736);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1689 : min(cbModelParam._m0[25u].z, _1689));
    float _1771;
    float _1773;
    float _1775;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1738 = fma(_913, cbModelParam._m0[13u].z, fma(_909, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905)) + cbModelParam._m0[13u].w;
        float _1742 = fma(_913, cbModelParam._m0[14u].z, fma(_909, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905)) + cbModelParam._m0[14u].w;
        float _1746 = fma(_913, cbModelParam._m0[15u].z, fma(_909, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905)) + cbModelParam._m0[15u].w;
        float _1749 = fma(_854, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _852));
        float _1752 = fma(_854, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _852));
        float _1755 = fma(_854, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _852));
        float _1783;
        if (_1749 > 0.0)
        {
            _1783 = abs((1.0 - _1738) / _1749);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1738 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1783 = frontier_phi_25_23_ladder;
        }
        float _2128;
        if (_1752 > 0.0)
        {
            _2128 = abs((1.0 - _1742) / _1752);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1742 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2128 = frontier_phi_34_30_ladder;
        }
        float _2470;
        if (_1755 > 0.0)
        {
            _2470 = abs((1.0 - _1746) / _1755);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1746 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2470 = frontier_phi_48_41_ladder;
        }
        float _2472 = isnan(_2128) ? _1783 : (isnan(_1783) ? _2128 : min(_1783, _2128));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1749) + _1738;
        float _2478 = (_2473 * _1752) + _1742;
        float _2479 = (_2473 * _1755) + _1746;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2480;
        float _2483 = _2480 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2479 > _2483) || ((_2479 < _2481) || ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 < _2481) || (_2477 > _2483))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2479, cbModelParam._m0[9u].z, fma(_2478, cbModelParam._m0[9u].y, _2477 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2479, cbModelParam._m0[10u].z, fma(_2478, cbModelParam._m0[10u].y, _2477 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2479, cbModelParam._m0[11u].z, fma(_2478, cbModelParam._m0[11u].y, _2477 * cbModelParam._m0[11u].x))), _1690);
            frontier_phi_24_48_ladder = _2621.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2621.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2621.x * cbModelParam._m0[1u].y;
        }
        _1771 = frontier_phi_24_48_ladder_2;
        _1773 = frontier_phi_24_48_ladder_1;
        _1775 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1759 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_852, _853, _854), _1690);
        _1771 = _1759.x * cbModelParam._m0[1u].y;
        _1773 = _1759.y * cbModelParam._m0[1u].y;
        _1775 = _1759.z * cbModelParam._m0[1u].y;
    }
    float _1779 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _736);
    float _1780 = isnan(_1779) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1779 : min(cbModelParam._m0[25u].w, _1779));
    float _1868;
    float _1870;
    float _1872;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1832 = fma(_913, cbModelParam._m0[21u].z, fma(_909, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905)) + cbModelParam._m0[21u].w;
        float _1836 = fma(_913, cbModelParam._m0[22u].z, fma(_909, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905)) + cbModelParam._m0[22u].w;
        float _1840 = fma(_913, cbModelParam._m0[23u].z, fma(_909, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905)) + cbModelParam._m0[23u].w;
        float _1843 = fma(_854, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _852));
        float _1846 = fma(_854, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _852));
        float _1849 = fma(_854, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _852));
        float _2133;
        if (_1843 > 0.0)
        {
            _2133 = abs((1.0 - _1832) / _1843);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1832 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2133 = frontier_phi_36_32_ladder;
        }
        float _2496;
        if (_1846 > 0.0)
        {
            _2496 = abs((1.0 - _1836) / _1846);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1836 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2496 = frontier_phi_50_43_ladder;
        }
        float _2686;
        if (_1849 > 0.0)
        {
            _2686 = abs((1.0 - _1840) / _1849);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1840 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2686 = frontier_phi_68_61_ladder;
        }
        float _2688 = isnan(_2496) ? _2133 : (isnan(_2133) ? _2496 : min(_2133, _2496));
        float _2689 = isnan(_2686) ? _2688 : (isnan(_2688) ? _2686 : min(_2688, _2686));
        float _2693 = (_2689 * _1843) + _1832;
        float _2694 = (_2689 * _1846) + _1836;
        float _2695 = (_2689 * _1849) + _1840;
        float _2696 = _2689 * 9.9999997473787516355514526367188e-05;
        float _2697 = (-1.0) - _2696;
        float _2699 = _2696 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2695 > _2699) || ((_2695 < _2697) || ((_2694 > _2699) || ((_2694 < _2697) || ((_2693 < _2697) || (_2693 > _2699))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2695, cbModelParam._m0[17u].z, fma(_2694, cbModelParam._m0[17u].y, _2693 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2695, cbModelParam._m0[18u].z, fma(_2694, cbModelParam._m0[18u].y, _2693 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2695, cbModelParam._m0[19u].z, fma(_2694, cbModelParam._m0[19u].y, _2693 * cbModelParam._m0[19u].x))), _1780);
            frontier_phi_33_68_ladder = _2937.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2937.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2937.x * cbModelParam._m0[1u].z;
        }
        _1868 = frontier_phi_33_68_ladder_2;
        _1870 = frontier_phi_33_68_ladder;
        _1872 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_852, _853, _854), _1780);
        _1868 = _1852.x * cbModelParam._m0[1u].z;
        _1870 = _1852.y * cbModelParam._m0[1u].z;
        _1872 = _1852.z * cbModelParam._m0[1u].z;
    }
    float _1884 = ((((1.0 - _873) * ((_860 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_873 * _860)) * _844;
    float _1885 = _1884 * ((cbModelParam._m0[1u].w * (_1868 - _1771)) + _1771);
    float _1886 = _1884 * ((cbModelParam._m0[1u].w * (_1870 - _1773)) + _1773);
    float _1887 = _1884 * ((cbModelParam._m0[1u].w * (_1872 - _1775)) + _1775);
    float _1890 = fma(_1887, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1885 * cbSceneParam._m0[89u].x));
    float _1893 = fma(_1887, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1885 * cbSceneParam._m0[90u].x));
    float _1896 = fma(_1887, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, _1885 * cbSceneParam._m0[91u].x));
    uvec4 _1906 = floatBitsToUint(cbInstanceData._m0[_819 + 5u]);
    uint _1908 = _1906.x * 14u;
    uint _1909 = _1908 + 13u;
    float _1914 = _844 + (-1.0);
    float _1917 = (cbLight._m0[_1909].x * _1914) + 1.0;
    float _1918 = (cbLight._m0[_1909].y * _1914) + 1.0;
    uint _1919 = _1908 + 5u;
    float _1925 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1929 = _1908 + 4u;
    float _1935 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1939 = _1908 | 1u;
    float _1950 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_733, _734, _735));
    float _1953 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_733, _734, _735));
    float _3909 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _3920 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1958 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.3183098733425140380859375;
    float _1960 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1967 = ((cbLight._m0[_1919].x * _1925) * _1960) + ((cbLight._m0[_1929].x * _1935) * _1958);
    float _1968 = ((_1925 * cbLight._m0[_1919].y) * _1960) + ((_1935 * cbLight._m0[_1929].y) * _1958);
    float _1969 = ((_1925 * cbLight._m0[_1919].z) * _1960) + ((_1935 * cbLight._m0[_1929].z) * _1958);
    uint _1971 = _1908 + 8u;
    float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _736) * 0.949999988079071044921875);
    float _1985 = _1984 * _1984;
    float _1986 = cbLight._m0[_1908].x + _760;
    float _1987 = cbLight._m0[_1908].y + _761;
    float _1988 = cbLight._m0[_1908].z + _762;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1993 = _1992 * _1986;
    float _1994 = _1992 * _1987;
    float _1995 = _1992 * _1988;
    float _1996 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_1908].xyz));
    float _3931 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _2000 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _2001 = dot(vec3(_733, _734, _735), vec3(_1993, _1994, _1995));
    float _3953 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _2005 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_1993, _1994, _1995));
    float _3964 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2009 = _1985 * _1985;
    float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
    float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2025 = 1.0 - _1985;
    float _2036 = (0.5 / (((_2000 * ((_1999 * _2025) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2025) + _1985) * _1999))) * _1999;
    float _3975 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
    uint _2049 = _1908 + 9u;
    float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _736) * 0.949999988079071044921875);
    float _2061 = _2060 * _2060;
    float _2062 = cbLight._m0[_1939].x + _760;
    float _2063 = cbLight._m0[_1939].y + _761;
    float _2064 = cbLight._m0[_1939].z + _762;
    float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
    float _2069 = _2068 * _2062;
    float _2070 = _2068 * _2063;
    float _2071 = _2068 * _2064;
    float _2072 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_1939].xyz));
    float _3986 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _2076 = dot(vec3(_733, _734, _735), vec3(_2069, _2070, _2071));
    float _3997 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2069, _2070, _2071));
    float _4008 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2061 * _2061;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2097 = (exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2098 = 1.0 - _2061;
    float _2108 = (0.5 / (((_2000 * ((_2075 * _2098) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2098) + _2061) * _2075))) * _2075;
    float _4019 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2110 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    float _2120 = (((_2097 * cbLight._m0[_2049].x) * _2110) * _1925) + (((_2024 * cbLight._m0[_1971].x) * _2038) * _1935);
    float _2121 = (((_2097 * cbLight._m0[_2049].y) * _2110) * _1925) + (((_2024 * cbLight._m0[_1971].y) * _2038) * _1935);
    float _2122 = (((_2097 * cbLight._m0[_2049].z) * _2110) * _1925) + (((_2024 * cbLight._m0[_1971].z) * _2038) * _1935);
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    if (_1906.y == 0u)
    {
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2177;
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2177;
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2177;
        uvec4 _2192 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2193 = _2192.x;
        uint _2204 = uint((float(_2192.y) * floor(float(uint(cbSceneParam._m0[85u].y * _782) / _2193))) + floor(float(uint(cbSceneParam._m0[85u].x * _781) / _2193)));
        float _2214 = (log2(_2180 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2215 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        uint _2218 = uint(isnan(14.0) ? _2215 : (isnan(_2215) ? 14.0 : min(_2215, 14.0)));
        uvec4 _2223 = texelFetch(g_lightClusterGridBuffer, int(((_2218 << 2u) + (_2204 << 6u)) >> 2u));
        uint _2224 = _2223.x;
        uint _2225 = _2192.z;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        if (((((1u << ((_2225 >> 4u) & 15u)) + 4294967295u) & _2224) == 0u) || ((_2225 & 240u) == 0u))
        {
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
        }
        else
        {
            float _2342;
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2352;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            uint _2539 = 0u;
            uint _2548;
            bool _2549;
            for (;;)
            {
                _2548 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2539 << 2u)) >> 2u)).x;
                _2549 = _2548 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2549)
                {
                    frontier_phi_63_pred = _2535;
                    frontier_phi_63_pred_1 = _2538;
                    frontier_phi_63_pred_2 = _2537;
                    frontier_phi_63_pred_3 = _2536;
                    frontier_phi_63_pred_4 = _2534;
                    frontier_phi_63_pred_5 = _2533;
                }
                else
                {
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    uint _2735;
                    _2729 = _2533;
                    _2730 = _2534;
                    _2731 = _2535;
                    _2732 = _2536;
                    _2733 = _2537;
                    _2734 = _2538;
                    _2735 = _2548;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    for (;;)
                    {
                        uint _2739 = uint(findLSB(_2735)) + (_2539 << 5u);
                        uint _2736 = (_2735 + 4294967295u) & _2735;
                        uint _2741 = _2739 * 48u;
                        vec4 _2755 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 3u)).x));
                        uint _2761 = (_2739 * 48u) + 4u;
                        vec4 _2774 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2761)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 3u)).x));
                        uint _2780 = (_2739 * 48u) + 8u;
                        vec3 _2791 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2780)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 2u)).x));
                        float _2795 = _2755.x - _2178;
                        float _2796 = _2755.y - _2179;
                        float _2797 = _2755.z - _2180;
                        float _2798 = dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797));
                        float _2801 = inversesqrt(_2798);
                        float _2802 = _2801 * _2795;
                        float _2803 = _2801 * _2796;
                        float _2804 = _2801 * _2797;
                        float _2805 = dot(vec3(_800, _803, _806), vec3(_2802, _2803, _2804));
                        float _2810 = 1.0 - (_2798 * _2755.w);
                        float _4040 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2811 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                        float _2812 = sqrt(_2798) * _2774.w;
                        float _2815 = 1.39999997615814208984375 / (_2812 + 1.39999997615814208984375);
                        float _2816 = _2815 * _2815;
                        float _2819 = ((1.0 - _2816) * _2805) + _2816;
                        float _2822 = _2812 * _2812;
                        float _2826 = ((isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0))) * _2811) / ((_2822 * 0.699999988079071044921875) + 1.0);
                        float _2830 = (-0.0) - _2178;
                        float _2831 = (-0.0) - _2179;
                        float _2832 = (-0.0) - _2180;
                        float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
                        float _2837 = _2836 * _2830;
                        float _2838 = _2836 * _2831;
                        float _2839 = _2836 * _2832;
                        float _2847 = exp2(log2(1.0 / ((_2822 * 3.5) + 5.0)) * 0.25);
                        float _2848 = 1.0 - _860;
                        float _2855 = sqrt(1.0 - ((1.0 - (_2848 * _2848)) * (1.0 - (_2847 * _2847))));
                        float _2856 = _2855 * _2855;
                        float _2857 = _2856 * _2856;
                        float _2858 = _2837 + _2802;
                        float _2859 = _2838 + _2803;
                        float _2860 = _2839 + _2804;
                        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
                        float _2868 = dot(vec3(_800, _803, _806), vec3(_2837, _2838, _2839));
                        float _4056 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2871 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2872 = dot(vec3(_800, _803, _806), vec3(_2864 * _2858, _2864 * _2859, _2864 * _2860));
                        float _4067 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2875 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2879 = ((_2875 * _2875) * (_2857 + (-1.0))) + 1.0;
                        float _2880 = _2815 * _2856;
                        float _2881 = _2880 * _2880;
                        float _2884 = ((1.0 - _2881) * _2805) + _2881;
                        float _4078 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2885 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2886 = 1.0 - _2856;
                        float _2896 = (0.5 / (((_2885 * ((_2871 * _2886) + _2856)) + 9.9999999392252902907785028219223e-09) + (((_2885 * _2886) + _2856) * _2871))) * _2885;
                        float _4089 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2907 = (((_2857 * 3.1415927410125732421875) * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) / ((_2879 * _2879) * ((_2822 * 2.1991131305694580078125) + 3.141590118408203125))) * _2811;
                        _2633 = (_2826 * _2774.x) + _2732;
                        _2634 = (_2826 * _2774.y) + _2733;
                        _2635 = (_2826 * _2774.z) + _2734;
                        _2630 = (_2907 * _2791.x) + _2729;
                        _2631 = (_2907 * _2791.y) + _2730;
                        _2632 = (_2907 * _2791.z) + _2731;
                        if (_2736 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2729 = _2630;
                            _2730 = _2631;
                            _2731 = _2632;
                            _2732 = _2633;
                            _2733 = _2634;
                            _2734 = _2635;
                            _2735 = _2736;
                        }
                    }
                    frontier_phi_63_pred = _2632;
                    frontier_phi_63_pred_1 = _2635;
                    frontier_phi_63_pred_2 = _2634;
                    frontier_phi_63_pred_3 = _2633;
                    frontier_phi_63_pred_4 = _2631;
                    frontier_phi_63_pred_5 = _2630;
                }
                _2346 = frontier_phi_63_pred;
                _2352 = frontier_phi_63_pred_1;
                _2350 = frontier_phi_63_pred_2;
                _2348 = frontier_phi_63_pred_3;
                _2344 = frontier_phi_63_pred_4;
                _2342 = frontier_phi_63_pred_5;
                uint _2540 = _2539 + 1u;
                if (_2540 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2533 = _2342;
                    _2534 = _2344;
                    _2535 = _2346;
                    _2536 = _2348;
                    _2537 = _2350;
                    _2538 = _2352;
                    _2539 = _2540;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
        }
        uvec4 _2355 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2356 = _2355.z;
        uint _2358 = (_2356 >> 8u) & 15u;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        if (((4294967295u << _2358) & _2224) == 0u)
        {
            _2501 = _2341;
            _2503 = _2343;
            _2505 = _2345;
            _2507 = _2347;
            _2509 = _2349;
            _2511 = _2351;
        }
        else
        {
            float _2526 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
            float _2527 = _2526 * _2178;
            float _2528 = _2526 * _2179;
            float _2529 = _2526 * _2180;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2358 < ((_2356 >> 12u) & 15u))
            {
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2712 = _2341;
                float _2713 = _2343;
                float _2714 = _2345;
                float _2715 = _2347;
                float _2716 = _2349;
                float _2717 = _2351;
                uint _2718 = _2358;
                uint _2727;
                bool _2728;
                for (;;)
                {
                    _2727 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2718 << 2u)) >> 2u)).x;
                    _2728 = _2727 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2728)
                    {
                        frontier_phi_77_pred = _2717;
                        frontier_phi_77_pred_1 = _2716;
                        frontier_phi_77_pred_2 = _2715;
                        frontier_phi_77_pred_3 = _2714;
                        frontier_phi_77_pred_4 = _2713;
                        frontier_phi_77_pred_5 = _2712;
                    }
                    else
                    {
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _2955 = _2712;
                        float _2956 = _2713;
                        float _2957 = _2714;
                        float _2958 = _2715;
                        float _2959 = _2716;
                        float _2960 = _2717;
                        uint _2961 = _2727;
                        uint _2962;
                        vec4 _2987;
                        float _2988;
                        vec4 _3003;
                        vec3 _3015;
                        vec4 _3031;
                        vec4 _3046;
                        float _3092;
                        bool _3093;
                        for (;;)
                        {
                            uint _2972 = ((_2718 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2961));
                            _2962 = (_2961 + 4294967295u) & _2961;
                            uint _2974 = _2972 * 40u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            _2988 = _2987.w;
                            uint _2990 = (_2972 * 40u) + 4u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3005 = (_2972 * 40u) + 8u;
                            _3015 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x));
                            uint _3018 = (_2972 * 40u) + 16u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3033 = (_2972 * 40u) + 20u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3048 = (_2972 * 40u) + 24u;
                            vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3067 = (_2972 * 40u) + 28u;
                            vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            _3092 = fma(_2180, _3080.z, fma(_2179, _3080.y, _3080.x * _2178)) + _3080.w;
                            _3093 = !((fma(_2180, _3061.z, fma(_2179, _3061.y, _3061.x * _2178)) + _3061.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3093)
                            {
                                float _3120 = _2987.x - _2178;
                                float _3121 = _2987.y - _2179;
                                float _3122 = _2987.z - _2180;
                                float _3123 = dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122));
                                float _3126 = inversesqrt(_3123);
                                float _3127 = _3126 * _3120;
                                float _3128 = _3126 * _3121;
                                float _3129 = _3126 * _3122;
                                float _3133 = 1.0 - (_3123 / (_2988 * _2988));
                                float _4100 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3134 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3138 = sqrt(_3123) * _3003.w;
                                float _3140 = 1.39999997615814208984375 / (_3138 + 1.39999997615814208984375);
                                float _3141 = _3140 * _3140;
                                float _3144 = ((1.0 - _3141) * dot(vec3(_3127, _3128, _3129), vec3(_800, _803, _806))) + _3141;
                                float _3147 = _3138 * _3138;
                                float _3151 = (fma(_2180, _3031.z, fma(_2179, _3031.y, _3031.x * _2178)) + _3031.w) / _3092;
                                float _3152 = (fma(_2180, _3046.z, fma(_2179, _3046.y, _3046.x * _2178)) + _3046.w) / _3092;
                                float _3156 = 1.0 - dot(vec2(_3151, _3152), vec2(_3151, _3152));
                                float _4116 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3157 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3158 = _3157 * (((isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))) * _3134) / ((_3147 * 0.699999988079071044921875) + 1.0));
                                float _3170 = exp2(log2(1.0 / ((_3147 * 3.5) + 5.0)) * 0.25);
                                float _3171 = 1.0 - _860;
                                float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                                float _3179 = _3178 * _3178;
                                float _3180 = _3179 * _3179;
                                float _3181 = _3127 - _2527;
                                float _3182 = _3128 - _2528;
                                float _3183 = _3129 - _2529;
                                float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                                float _3191 = dot(vec3(_800, _803, _806), vec3((-0.0) - _2527, (-0.0) - _2528, (-0.0) - _2529));
                                float _4127 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3194 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3195 = dot(vec3(_800, _803, _806), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                                float _4138 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3198 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                                float _3203 = _3140 * _3179;
                                float _3204 = _3203 * _3203;
                                float _3210 = ((1.0 - _3204) * dot(vec3(_800, _803, _806), vec3(_3127, _3128, _3129))) + _3204;
                                float _4149 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3212 = 1.0 - _3179;
                                float _3222 = (0.5 / (((_3211 * ((_3194 * _3212) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3179) * _3194))) * _3211;
                                float _4160 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3232 = (_3157 * _3134) * (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) / ((_3202 * _3202) * ((_3147 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3158 * _3003.x;
                                frontier_phi_83_pred_1 = _3158 * _3003.z;
                                frontier_phi_83_pred_2 = _3158 * _3003.y;
                                frontier_phi_83_pred_3 = _3232 * _3015.z;
                                frontier_phi_83_pred_4 = _3232 * _3015.y;
                                frontier_phi_83_pred_5 = _3232 * _3015.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3239 = frontier_phi_83_pred;
                            _3241 = frontier_phi_83_pred_1;
                            _3240 = frontier_phi_83_pred_2;
                            _3238 = frontier_phi_83_pred_3;
                            _3237 = frontier_phi_83_pred_4;
                            _3236 = frontier_phi_83_pred_5;
                            _2945 = _3239 + _2958;
                            _2946 = _3240 + _2959;
                            _2947 = _3241 + _2960;
                            _2942 = _3236 + _2955;
                            _2943 = _3237 + _2956;
                            _2944 = _3238 + _2957;
                            if (_2962 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2962;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2947;
                        frontier_phi_77_pred_1 = _2946;
                        frontier_phi_77_pred_2 = _2945;
                        frontier_phi_77_pred_3 = _2944;
                        frontier_phi_77_pred_4 = _2943;
                        frontier_phi_77_pred_5 = _2942;
                    }
                    _2512 = frontier_phi_77_pred;
                    _2510 = frontier_phi_77_pred_1;
                    _2508 = frontier_phi_77_pred_2;
                    _2506 = frontier_phi_77_pred_3;
                    _2504 = frontier_phi_77_pred_4;
                    _2502 = frontier_phi_77_pred_5;
                    uint _2719 = _2718 + 1u;
                    if (_2719 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2712 = _2502;
                        _2713 = _2504;
                        _2714 = _2506;
                        _2715 = _2508;
                        _2716 = _2510;
                        _2717 = _2512;
                        _2718 = _2719;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2504;
                frontier_phi_52_53_ladder_1 = _2512;
                frontier_phi_52_53_ladder_2 = _2510;
                frontier_phi_52_53_ladder_3 = _2508;
                frontier_phi_52_53_ladder_4 = _2506;
                frontier_phi_52_53_ladder_5 = _2502;
            }
            else
            {
                frontier_phi_52_53_ladder = _2343;
                frontier_phi_52_53_ladder_1 = _2351;
                frontier_phi_52_53_ladder_2 = _2349;
                frontier_phi_52_53_ladder_3 = _2347;
                frontier_phi_52_53_ladder_4 = _2345;
                frontier_phi_52_53_ladder_5 = _2341;
            }
            _2501 = frontier_phi_52_53_ladder_5;
            _2503 = frontier_phi_52_53_ladder;
            _2505 = frontier_phi_52_53_ladder_4;
            _2507 = frontier_phi_52_53_ladder_3;
            _2509 = frontier_phi_52_53_ladder_2;
            _2511 = frontier_phi_52_53_ladder_1;
        }
        float _2516 = isnan(1.0) ? _844 : (isnan(_844) ? 1.0 : min(_844, 1.0));
        _2237 = (_2516 * _2507) + _1967;
        _2239 = (_2516 * _2509) + _1968;
        _2241 = (_2516 * _2511) + _1969;
        _2243 = ((_2501 * 0.039999999105930328369140625) * _2516) + _2120;
        _2245 = ((_2503 * 0.039999999105930328369140625) * _2516) + _2121;
        _2247 = ((_2505 * 0.039999999105930328369140625) * _2516) + _2122;
    }
    else
    {
        _2237 = _1967;
        _2239 = _1968;
        _2241 = _1969;
        _2243 = _2120;
        _2245 = _2121;
        _2247 = _2122;
    }
    uint _2253 = _820 + uint(cbMatDynParam._m0[0u].w);
    float _2259 = ((_709 * (_697 - (_697 * _670))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2253].x;
    float _2260 = ((_709 * (_698 - (_698 * _670))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2253].y;
    float _2261 = ((_709 * (_699 - (_699 * _670))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2253].z;
    float _4176 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4187 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4198 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _2278 = (((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2237 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _844))) + ((_2243 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1679)) * cbPerFrame._m0[3u].x)) + _2259;
    float _2280 = (_2260 + ((_2245 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1679)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2239 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _844)));
    float _2282 = (_2261 + ((_2247 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1679)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2241 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _844)));
    float _2283 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2284 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2285 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2291 = cbMtdParam._m0[2u].x * _2259;
    float _2292 = cbMtdParam._m0[2u].y * _2260;
    float _2293 = cbMtdParam._m0[2u].z * _2261;
    float _4224 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2295 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    uint _2296 = _819 + 6u;
    float _2304 = _781 / cbSceneParam._m0[86u].x;
    float _2305 = _782 / cbSceneParam._m0[86u].y;
    vec4 _2319 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2304, _2305, (log2((isnan(cbSceneParam._m0[77u].w) ? _755 : (isnan(_755) ? cbSceneParam._m0[77u].w : min(_755, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2321 = _2319.x;
    float _2322 = _2319.y;
    float _2323 = _2319.z;
    float _2324 = _2319.w;
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    if (_755 > cbSceneParam._m0[78u].w)
    {
        float _2366 = isnan(_755) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _755 : min(cbSceneParam._m0[80u].w, _755));
        float _2367 = _2366 / _755;
        float _2378 = _2367 * _280;
        float _2379 = _281 * _2367;
        float _2380 = (-0.0) - _2379;
        float _2381 = _2367 * _282;
        float _2383 = (cbSceneParam._m0[77u].w * _2380) / _2366;
        float _2384 = _2383 + cbSceneParam._m0[79u].w;
        float _2385 = cbSceneParam._m0[79u].w - _2379;
        float _2391 = sqrt(((_2378 * _2378) + (_2379 * _2379)) + (_2381 * _2381));
        float _2394 = (1.0 - (cbSceneParam._m0[77u].w / _2366)) * _2391;
        float _2400 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2402 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2643;
        if (abs((_2380 - _2383) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2643 = ((((_2384 > 0.0) ? exp2(_2400 * _2384) : (2.0 - exp2(_2402 * _2384))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2394;
        }
        else
        {
            float _2562 = 1.0 / cbSceneParam._m0[80u].x;
            float _2563 = isnan(_2385) ? _2384 : (isnan(_2384) ? _2385 : max(_2384, _2385));
            float _2564 = isnan(_2385) ? _2384 : (isnan(_2384) ? _2385 : min(_2384, _2385));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            float _2574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : min(_2564, 0.0));
            _2643 = ((abs(_2391 / _2380) * cbSceneParam._m0[80u].y) * ((((_2573 - _2574) * 2.0) - ((exp2(_2400 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0)))) - exp2(_2400 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))))) * _2562)) - ((exp2(_2402 * _2573) - exp2(_2402 * _2574)) * _2562))) + (_2394 * cbSceneParam._m0[80u].z);
        }
        vec4 _2645 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2304, _2305, 1.0), 0.0);
        float _2654 = exp2((_2643 * (-1.44269502162933349609375)) * (1.0 - _2645.w));
        float _2655 = log2(_2654);
        float _2671 = log2(_2324);
        _2404 = (exp2(_2671 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2655 * cbSceneParam._m0[78u].x)) * _2645.x) / cbSceneParam._m0[78u].x)) + _2321;
        _2406 = (exp2(_2671 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2655 * cbSceneParam._m0[78u].y)) * _2645.y) / cbSceneParam._m0[78u].y)) + _2322;
        _2408 = (exp2(_2671 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2655 * cbSceneParam._m0[78u].z)) * _2645.z) / cbSceneParam._m0[78u].z)) + _2323;
        _2410 = _2654 * _2324;
    }
    else
    {
        _2404 = _2321;
        _2406 = _2322;
        _2408 = _2323;
        _2410 = _2324;
    }
    bool _2681;
    vec4 _2419;
    vec4 _2441;
    float _2443;
    float _2447;
    float _2448;
    float _2449;
    float _2452;
    float _2455;
    float _2458;
    float _2459;
    bool _2469;
    for (;;)
    {
        _2419 = cbMatDynParam._m0[0u];
        float _2421 = roundEven(_2419.y);
        bool _2422 = _2421 == 3.0;
        float _2423 = log2(_2410);
        float _2427 = exp2(_2423 * cbSceneParam._m0[78u].x);
        float _2428 = exp2(_2423 * cbSceneParam._m0[78u].y);
        float _2429 = exp2(_2423 * cbSceneParam._m0[78u].z);
        float _2430 = _2427 * _2283;
        float _2431 = _2428 * _2284;
        float _2432 = _2429 * _2285;
        float _2439 = _769 + (-0.5);
        _2441 = cbMtdParam._m0[1u];
        _2443 = _2441.y * _2439;
        float _2446 = (_2421 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2447 = _2446 * (_2422 ? _2430 : (_2430 + (cbSceneParam._m0[72u].w * _2404)));
        _2448 = _2446 * (_2422 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2406)));
        _2449 = _2446 * (_2422 ? _2432 : (_2432 + (cbSceneParam._m0[72u].w * _2408)));
        _2452 = ((_2291 * _2295) * _2427) * _2446;
        _2455 = ((_2292 * _2295) * _2428) * _2446;
        _2458 = ((_2293 * _2295) * _2429) * _2446;
        _2459 = _2439 * 0.999000012874603271484375;
        _2469 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2469)
        {
            if ((cbInstanceData._m0[_819 + 7u].x + _2459) < 0.5)
            {
                _2681 = true;
                break;
            }
        }
        uint _2597 = _820 + uint(_2419.w);
        if ((cbInstanceData._m0[_2597].w < 1.0) && ((cbInstanceData._m0[_2597].w + _2459) < 0.5))
        {
            _2681 = true;
            break;
        }
        if ((_2443 + 1.0) < _2441.x)
        {
            _2681 = true;
            break;
        }
        _2681 = false;
        break;
    }
    float _2912;
    if (_2681)
    {
        discard_state = true;
        _2912 = 0.0;
    }
    else
    {
        _2912 = cbInstanceData._m0[_2296].w;
    }
    SV_Target.x = _2447;
    SV_Target.y = _2448;
    SV_Target.z = _2449;
    SV_Target.w = _2912;
    SV_Target_1.x = _2452;
    SV_Target_1.y = _2455;
    SV_Target_1.z = _2458;
    SV_Target_1.w = cbInstanceData._m0[_2296].w;
    discard_exit();
}


