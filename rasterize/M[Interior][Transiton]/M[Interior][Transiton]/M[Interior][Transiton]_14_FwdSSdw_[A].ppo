#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1244;
float _3413;
float _3414;
float _3415;
float _3416;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _298 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _301 = _298.x;
    vec4 _319 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _336 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _301) + cbMtdParam._m0[12u].x) * _319.x;
    float _338 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _301) + cbMtdParam._m0[12u].y) * _319.y;
    float _340 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _301) + cbMtdParam._m0[12u].z) * _319.z;
    vec4 _358 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _397 = cbMtdParam._m0[27u].w + _282;
    float _398 = cbMtdParam._m0[28u].x + _283;
    float _399 = cbMtdParam._m0[28u].y + _284;
    float _413 = (-0.0) - dot(vec3(_397, _398, _399), vec3(_212, _213, _214));
    float _414 = (-0.0) - dot(vec3(_397, _398, _399), vec3(_226, _227, _228));
    float _415 = (-0.0) - dot(vec3(_397, _398, _399), vec3((-0.0) - _219, (-0.0) - _220, (-0.0) - _221));
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _422 = _419 * _415;
    float _425 = ((_419 * _413) + ((cbMtdParam._m0[25u].w * _301) * ((_358.x * 2.0) + (-1.0)))) * cbMtdParam._m0[24u].x;
    float _426 = ((_419 * _414) + ((cbMtdParam._m0[26u].x * _301) * ((_358.y * 2.0) + (-1.0)))) * cbMtdParam._m0[23u].w;
    float _427 = fract(TEXCOORD.x);
    float _428 = fract(TEXCOORD.y);
    float _434;
    if (_425 > 0.0)
    {
        _434 = (1.0 - _427) / _425;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_425 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _427) / _425;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _434 = frontier_phi_3_2_ladder;
    }
    float _442;
    if (_426 > 0.0)
    {
        _442 = (1.0 - _428) / _426;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_426 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _428) / _426;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _442 = frontier_phi_7_6_ladder;
    }
    float _446 = (_422 > 0.0) ? (cbMtdParam._m0[17u].x / _422) : 5000.0;
    float _447 = isnan(_442) ? _434 : (isnan(_434) ? _442 : min(_434, _442));
    float _448 = isnan(_446) ? _447 : (isnan(_447) ? _446 : min(_447, _446));
    float _452 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _459 = ((_448 * _422) + _452) / _452;
    vec4 _484 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_427 + (-0.5)) + (_448 * _425)) / _459) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_428 + (-0.5)) + (_448 * _426)) / _459) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _500 = _301 * 0.1500000059604644775390625;
    float _508 = (_500 * (((_484.x * _301) * cbMtdParam._m0[9u].x) - _336)) + _336;
    float _509 = (_500 * (((_484.y * _301) * cbMtdParam._m0[9u].y) - _338)) + _338;
    float _510 = (_500 * (((_484.z * _301) * cbMtdParam._m0[9u].z) - _340)) + _340;
    vec4 _523 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _523.z;
    float _530 = (_523.x * 2.0) + (-1.0);
    float _531 = (_523.y * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3435 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))));
    vec4 _561 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _566 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _572 = ((_561.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _574 = (-0.0) - (cbMtdParam._m0[21u].x * ((_561.x * 0.5) + (-0.25)));
    float _575 = fract(_566);
    float _577 = fract(_566 + 0.5);
    vec4 _604 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_575 * _574) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_572 * _575) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _606 = _604.x;
    float _612 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_577 * _574) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_572 * _577) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _606) * abs((_575 * 2.0) + (-1.0))) + _606;
    float _621 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _625 = fract(abs(_621));
    float _634 = sin(cbMtdParam._m0[21u].z);
    float _635 = cos(cbMtdParam._m0[21u].z);
    float _636 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _637 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _667 = abs(cbMtdParam._m0[20u].w * (((_612 - (((_621 >= ((-0.0) - _621)) ? _625 : ((-0.0) - _625)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_637, (-0.0) - _634, _635 * _636) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_637, _635, _636 * _634) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _671 = (((_667 * cbMtdParam._m0[18u].y) - _612) * _667) + _612;
    float _3446 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _672 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    vec4 _684 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _699 = (cbMtdParam._m0[14u].x * _684.x) * cbMtdParam._m0[19u].x;
    float _700 = (cbMtdParam._m0[14u].y * _684.y) * cbMtdParam._m0[19u].x;
    float _701 = (cbMtdParam._m0[14u].z * _684.z) * cbMtdParam._m0[19u].x;
    float _711 = exp2(log2(_672) * cbMtdParam._m0[20u].x);
    float _724 = fma(_537, _219, fma(_531, _226, _530 * _212));
    float _727 = fma(_537, _220, fma(_531, _227, _530 * _213));
    float _730 = fma(_537, _221, fma(_531, _228, _530 * _214));
    float _734 = inversesqrt(dot(vec3(_724, _727, _730), vec3(_724, _727, _730)));
    float _735 = _734 * _724;
    float _736 = _734 * _727;
    float _737 = _734 * _730;
    float _3457 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _738 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _3468 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3479 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3490 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _757 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _761 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _762 = _282 * _761;
    float _763 = _283 * _761;
    float _764 = _284 * _761;
    vec4 _769 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _771 = _769.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _926 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _932 = (cbMatDynParam._m0[5u].x * _926) + cbMatDynParam._m0[5u].y;
        float _3501 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _937 = (cbMatDynParam._m0[5u].z * _926) + cbMatDynParam._m0[5u].w;
        float _3512 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) - _933)) + _933) < ((_771 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _783 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _784 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _802 = fma(_737, cbSceneParam._m0[5u].z, fma(_736, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _735));
    float _805 = fma(_737, cbSceneParam._m0[6u].z, fma(_736, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _735));
    float _808 = fma(_737, cbSceneParam._m0[7u].z, fma(_736, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _735));
    uint _821 = uint(roundEven(NORMAL.w)) * 13u;
    uint _822 = _821 + 9u;
    uint _823 = _822 + uint(cbMatDynParam._m0[0u].w);
    float _829 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) * cbInstanceData._m0[_823].x;
    float _830 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) * cbInstanceData._m0[_823].y;
    float _831 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_823].z;
    float _3523 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    vec4 _843 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _783, cbSceneParam._m0[86u].y * _784));
    float _846 = _843.x * TEXCOORD_4;
    float _847 = dot(vec3(_735, _736, _737), vec3(_762, _763, _764));
    float _850 = _847 * 2.0;
    float _854 = (_850 * _735) - _762;
    float _855 = (_850 * _736) - _763;
    float _856 = (_850 * _737) - _764;
    float _860 = abs(dot(vec3(_762, _763, _764), vec3(_735, _736, _737)));
    float _3556 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _862 = sqrt(_738);
    float _875 = exp2((_862 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_862 * 3.0));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1243;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _970 = fma(_915, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907));
        float _974 = fma(_915, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907));
        float _978 = fma(_915, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907));
        float _1001 = _907 + _735;
        float _1002 = _911 + _736;
        float _1003 = _915 + _737;
        float _1013 = fma(_1003, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1001)) - _970;
        float _1014 = fma(_1003, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1001)) - _974;
        float _1015 = fma(_1003, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1001)) - _978;
        float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
        float _1032 = ((_1019 * _1013) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_970 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1019 * _1014) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_974 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1019 * _1015) / cbModelParam._m0[34u].z) + ((((((_978 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        float _1071 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1037.x + (-0.5));
        float _1073 = _1071 * (_1037.y + (-0.5));
        float _1074 = _1071 * (_1037.z + (-0.5));
        float _1081 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1044.x + (-0.5));
        float _1083 = _1081 * (_1044.y + (-0.5));
        float _1084 = _1081 * (_1044.z + (-0.5));
        float _1091 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1051.x + (-0.5));
        float _1093 = _1091 * (_1051.y + (-0.5));
        float _1094 = _1091 * (_1051.z + (-0.5));
        float _1101 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1058.x + (-0.5));
        float _1103 = _1101 * (_1058.y + (-0.5));
        float _1104 = _1101 * (_1058.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1125 = (dot(vec3(_735, _736, _737), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1135 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3604 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_1137 + 1.0))) + _1142) * _1105;
        float _1152 = _1073 * 0.5;
        float _1153 = _1083 * 0.5;
        float _1154 = _1093 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_735, _736, _737), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3615 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3626 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3637 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * (_1179 + 1.0))) + _1184) * _1106;
        float _1194 = _1074 * 0.5;
        float _1195 = _1084 * 0.5;
        float _1196 = _1094 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_735, _736, _737), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3670 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1221 + 1.0))) + _1226) * _1107;
        _1243 = _1074;
        _1245 = _1073;
        _1246 = _1072;
        _1247 = _1084;
        _1248 = _1083;
        _1249 = _1082;
        _1250 = _1094;
        _1251 = _1093;
        _1252 = _1092;
        _1253 = _1107;
        _1254 = _1106;
        _1255 = _1105;
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _1244;
        _1245 = _1244;
        _1246 = _1244;
        _1247 = _1244;
        _1248 = _1244;
        _1249 = _1244;
        _1250 = _1244;
        _1251 = _1244;
        _1252 = _1244;
        _1253 = _1244;
        _1254 = _1244;
        _1255 = _1244;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1286 = fma(_915, cbModelParam._m0[30u].z, fma(_911, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _907));
        float _1290 = fma(_915, cbModelParam._m0[31u].z, fma(_911, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _907));
        float _1294 = fma(_915, cbModelParam._m0[32u].z, fma(_911, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _907));
        float _1317 = _907 + _735;
        float _1318 = _911 + _736;
        float _1319 = _915 + _737;
        float _1329 = fma(_1319, cbModelParam._m0[30u].z, fma(_1318, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1317)) - _1286;
        float _1330 = fma(_1319, cbModelParam._m0[31u].z, fma(_1318, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1317)) - _1290;
        float _1331 = fma(_1319, cbModelParam._m0[32u].z, fma(_1318, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1317)) - _1294;
        float _1335 = inversesqrt(dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331)));
        float _1348 = ((_1335 * _1329) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1286 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1335 * _1330) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1290 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1335 * _1331) / cbModelParam._m0[35u].z) + ((((((_1294 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        float _1385 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1352.x + (-0.5));
        float _1387 = _1385 * (_1352.y + (-0.5));
        float _1388 = _1385 * (_1352.z + (-0.5));
        float _1395 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1359.x + (-0.5));
        float _1397 = _1395 * (_1359.y + (-0.5));
        float _1398 = _1395 * (_1359.z + (-0.5));
        float _1405 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1366.x + (-0.5));
        float _1407 = _1405 * (_1366.y + (-0.5));
        float _1408 = _1405 * (_1366.z + (-0.5));
        float _1415 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1373.x + (-0.5));
        float _1417 = _1415 * (_1373.y + (-0.5));
        float _1418 = _1415 * (_1373.z + (-0.5));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = _1386 * 0.5;
        float _1423 = _1396 * 0.5;
        float _1424 = _1406 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_735, _736, _737), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _3733 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1449 + 1.0))) + _1454) * _1419;
        float _1464 = _1387 * 0.5;
        float _1465 = _1397 * 0.5;
        float _1466 = _1407 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_735, _736, _737), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _3766 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1491 + 1.0))) + _1496) * _1420;
        float _1506 = _1388 * 0.5;
        float _1507 = _1398 * 0.5;
        float _1508 = _1408 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_735, _736, _737), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _3799 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1533 + 1.0))) + _1538) * _1421;
        _1555 = _1388;
        _1556 = _1387;
        _1557 = _1386;
        _1558 = _1398;
        _1559 = _1397;
        _1560 = _1396;
        _1561 = _1408;
        _1562 = _1407;
        _1563 = _1406;
        _1564 = _1421;
        _1565 = _1420;
        _1566 = _1419;
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1244;
        _1556 = _1244;
        _1557 = _1244;
        _1558 = _1244;
        _1559 = _1244;
        _1560 = _1244;
        _1561 = _1244;
        _1562 = _1244;
        _1563 = _1244;
        _1564 = _1244;
        _1565 = _1244;
        _1566 = _1244;
        _1567 = 0.0;
        _1568 = 0.0;
        _1569 = 0.0;
    }
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1256)) + _1256;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1257)) + _1257;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1258)) + _1258;
    float _1602 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1579));
    float _1623 = _854 * 0.5;
    float _1624 = _855 * 0.5;
    float _1625 = _856 * 0.5;
    float _1626 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1629 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1632 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1666;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1639 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1243, _1247, _1250, _1253));
        float _1643 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1647 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1246, _1249, _1252, _1255));
        float _1654 = dot(vec4(cbModelParam._m0[39u]), vec4(_1623, _1624, _1625, 1.0));
        _1666 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1666 = 1.0;
    }
    float _1677;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1668 = dot(vec4(cbModelParam._m0[40u]), vec4(_1623, _1624, _1625, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1681 = (_1677 * cbModelParam._m0[1u].x) + (_1666 * (1.0 - cbModelParam._m0[1u].x));
    float _1691 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _738);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1691 : min(cbModelParam._m0[25u].z, _1691));
    float _1773;
    float _1775;
    float _1777;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1740 = fma(_915, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907)) + cbModelParam._m0[13u].w;
        float _1744 = fma(_915, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907)) + cbModelParam._m0[14u].w;
        float _1748 = fma(_915, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907)) + cbModelParam._m0[15u].w;
        float _1751 = fma(_856, cbModelParam._m0[13u].z, fma(_855, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _854));
        float _1754 = fma(_856, cbModelParam._m0[14u].z, fma(_855, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _854));
        float _1757 = fma(_856, cbModelParam._m0[15u].z, fma(_855, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _854));
        float _1785;
        if (_1751 > 0.0)
        {
            _1785 = abs((1.0 - _1740) / _1751);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1740 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1785 = frontier_phi_25_23_ladder;
        }
        float _2154;
        if (_1754 > 0.0)
        {
            _2154 = abs((1.0 - _1744) / _1754);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1744 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2154 = frontier_phi_34_30_ladder;
        }
        float _2496;
        if (_1757 > 0.0)
        {
            _2496 = abs((1.0 - _1748) / _1757);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1748 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2496 = frontier_phi_48_41_ladder;
        }
        float _2498 = isnan(_2154) ? _1785 : (isnan(_1785) ? _2154 : min(_1785, _2154));
        float _2499 = isnan(_2496) ? _2498 : (isnan(_2498) ? _2496 : min(_2498, _2496));
        float _2503 = (_2499 * _1751) + _1740;
        float _2504 = (_2499 * _1754) + _1744;
        float _2505 = (_2499 * _1757) + _1748;
        float _2506 = _2499 * 9.9999997473787516355514526367188e-05;
        float _2507 = (-1.0) - _2506;
        float _2509 = _2506 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2505 > _2509) || ((_2505 < _2507) || ((_2504 > _2509) || ((_2504 < _2507) || ((_2503 < _2507) || (_2503 > _2509))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2505, cbModelParam._m0[9u].z, fma(_2504, cbModelParam._m0[9u].y, _2503 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2505, cbModelParam._m0[10u].z, fma(_2504, cbModelParam._m0[10u].y, _2503 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2505, cbModelParam._m0[11u].z, fma(_2504, cbModelParam._m0[11u].y, _2503 * cbModelParam._m0[11u].x))), _1692);
            frontier_phi_24_48_ladder = _2647.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2647.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2647.x * cbModelParam._m0[1u].y;
        }
        _1773 = frontier_phi_24_48_ladder_2;
        _1775 = frontier_phi_24_48_ladder_1;
        _1777 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_854, _855, _856), _1692);
        _1773 = _1761.x * cbModelParam._m0[1u].y;
        _1775 = _1761.y * cbModelParam._m0[1u].y;
        _1777 = _1761.z * cbModelParam._m0[1u].y;
    }
    float _1781 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _738);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1781 : min(cbModelParam._m0[25u].w, _1781));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_915, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_915, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_915, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_856, cbModelParam._m0[21u].z, fma(_855, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _854));
        float _1848 = fma(_856, cbModelParam._m0[22u].z, fma(_855, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _854));
        float _1851 = fma(_856, cbModelParam._m0[23u].z, fma(_855, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _854));
        float _2159;
        if (_1845 > 0.0)
        {
            _2159 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2159 = frontier_phi_36_32_ladder;
        }
        float _2522;
        if (_1848 > 0.0)
        {
            _2522 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2522 = frontier_phi_50_43_ladder;
        }
        float _2712;
        if (_1851 > 0.0)
        {
            _2712 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2712 = frontier_phi_68_61_ladder;
        }
        float _2714 = isnan(_2522) ? _2159 : (isnan(_2159) ? _2522 : min(_2159, _2522));
        float _2715 = isnan(_2712) ? _2714 : (isnan(_2714) ? _2712 : min(_2714, _2712));
        float _2719 = (_2715 * _1845) + _1834;
        float _2720 = (_2715 * _1848) + _1838;
        float _2721 = (_2715 * _1851) + _1842;
        float _2722 = _2715 * 9.9999997473787516355514526367188e-05;
        float _2723 = (-1.0) - _2722;
        float _2725 = _2722 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2721 > _2725) || ((_2721 < _2723) || ((_2720 > _2725) || ((_2720 < _2723) || ((_2719 < _2723) || (_2719 > _2725))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2963 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2721, cbModelParam._m0[17u].z, fma(_2720, cbModelParam._m0[17u].y, _2719 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2721, cbModelParam._m0[18u].z, fma(_2720, cbModelParam._m0[18u].y, _2719 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2721, cbModelParam._m0[19u].z, fma(_2720, cbModelParam._m0[19u].y, _2719 * cbModelParam._m0[19u].x))), _1782);
            frontier_phi_33_68_ladder = _2963.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2963.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2963.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_33_68_ladder_2;
        _1872 = frontier_phi_33_68_ladder;
        _1874 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_854, _855, _856), _1782);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1886 = ((((1.0 - _875) * ((_862 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_875 * _862)) * _846;
    float _1887 = _1886 * ((cbModelParam._m0[1u].w * (_1870 - _1773)) + _1773);
    float _1888 = _1886 * ((cbModelParam._m0[1u].w * (_1872 - _1775)) + _1775);
    float _1889 = _1886 * ((cbModelParam._m0[1u].w * (_1874 - _1777)) + _1777);
    float _1892 = fma(_1889, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1895 = fma(_1889, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1898 = fma(_1889, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    vec4 _1906 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_783, _784));
    float _1908 = _1906.w;
    float _1920 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1908);
    float _1921 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1908);
    float _1922 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1908);
    uvec4 _1926 = floatBitsToUint(cbInstanceData._m0[_821 + 5u]);
    uint _1928 = _1926.x * 14u;
    uint _1929 = _1928 + 13u;
    float _1934 = _846 + (-1.0);
    float _1937 = (cbLight._m0[_1929].x * _1934) + 1.0;
    float _1938 = (cbLight._m0[_1929].y * _1934) + 1.0;
    uint _1939 = _1928 + 5u;
    float _1945 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
    uint _1949 = _1928 + 4u;
    float _1958 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1962 = _1928 | 1u;
    float _1973 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_735, _736, _737));
    float _1976 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_735, _736, _737));
    float _3935 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _3946 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1981 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * 0.3183098733425140380859375;
    float _1983 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.3183098733425140380859375;
    float _1990 = ((cbLight._m0[_1939].x * _1945) * _1983) + (((cbLight._m0[_1949].x * _1920) * _1958) * _1981);
    float _1991 = ((_1945 * cbLight._m0[_1939].y) * _1983) + (((cbLight._m0[_1949].y * _1921) * _1958) * _1981);
    float _1992 = ((_1945 * cbLight._m0[_1939].z) * _1983) + (((cbLight._m0[_1949].z * _1922) * _1958) * _1981);
    uint _1994 = _1928 + 8u;
    float _2007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _738) * 0.949999988079071044921875);
    float _2008 = _2007 * _2007;
    float _2009 = cbLight._m0[_1928].x + _762;
    float _2010 = cbLight._m0[_1928].y + _763;
    float _2011 = cbLight._m0[_1928].z + _764;
    float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
    float _2016 = _2015 * _2009;
    float _2017 = _2015 * _2010;
    float _2018 = _2015 * _2011;
    float _2019 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_1928].xyz));
    float _3957 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _2023 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _2024 = dot(vec3(_735, _736, _737), vec3(_2016, _2017, _2018));
    float _3979 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _2028 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_2016, _2017, _2018));
    float _3990 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2032 = _2008 * _2008;
    float _2036 = ((_2027 * _2027) * (_2032 + (-1.0))) + 1.0;
    float _2047 = (exp2(log2(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2048 = 1.0 - _2008;
    float _2059 = (0.5 / (((_2023 * ((_2022 * _2048) + _2008)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2048) + _2008) * _2022))) * _2022;
    float _4001 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2032 / ((_2036 * _2036) * 3.141590118408203125));
    uint _2075 = _1928 + 9u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _738) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1962].x + _762;
    float _2089 = cbLight._m0[_1962].y + _763;
    float _2090 = cbLight._m0[_1962].z + _764;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_1962].xyz));
    float _4012 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _2102 = dot(vec3(_735, _736, _737), vec3(_2095, _2096, _2097));
    float _4023 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2095, _2096, _2097));
    float _4034 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2087 * _2087;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2124 = 1.0 - _2087;
    float _2134 = (0.5 / (((_2023 * ((_2101 * _2124) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2124) + _2087) * _2101))) * _2101;
    float _4045 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2136 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    float _2146 = (((_2123 * cbLight._m0[_2075].x) * _2136) * _1945) + ((((cbLight._m0[_1994].x * _1920) * _2047) * _2061) * _1958);
    float _2147 = (((_2123 * cbLight._m0[_2075].y) * _2136) * _1945) + ((((cbLight._m0[_1994].y * _1921) * _2047) * _2061) * _1958);
    float _2148 = (((_2123 * cbLight._m0[_2075].z) * _2136) * _1945) + ((((cbLight._m0[_1994].z * _1922) * _2047) * _2061) * _1958);
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    if (_1926.y == 0u)
    {
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2203;
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2203;
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2203;
        uvec4 _2218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2219 = _2218.x;
        uint _2230 = uint((float(_2218.y) * floor(float(uint(cbSceneParam._m0[85u].y * _784) / _2219))) + floor(float(uint(cbSceneParam._m0[85u].x * _783) / _2219)));
        float _2240 = (log2(_2206 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2241 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        uint _2244 = uint(isnan(14.0) ? _2241 : (isnan(_2241) ? 14.0 : min(_2241, 14.0)));
        uvec4 _2249 = texelFetch(g_lightClusterGridBuffer, int(((_2244 << 2u) + (_2230 << 6u)) >> 2u));
        uint _2250 = _2249.x;
        uint _2251 = _2218.z;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        if (((((1u << ((_2251 >> 4u) & 15u)) + 4294967295u) & _2250) == 0u) || ((_2251 & 240u) == 0u))
        {
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
        }
        else
        {
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            uint _2565 = 0u;
            uint _2574;
            bool _2575;
            for (;;)
            {
                _2574 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2565 << 2u)) >> 2u)).x;
                _2575 = _2574 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2575)
                {
                    frontier_phi_63_pred = _2561;
                    frontier_phi_63_pred_1 = _2564;
                    frontier_phi_63_pred_2 = _2563;
                    frontier_phi_63_pred_3 = _2562;
                    frontier_phi_63_pred_4 = _2560;
                    frontier_phi_63_pred_5 = _2559;
                }
                else
                {
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    uint _2761;
                    _2755 = _2559;
                    _2756 = _2560;
                    _2757 = _2561;
                    _2758 = _2562;
                    _2759 = _2563;
                    _2760 = _2564;
                    _2761 = _2574;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    for (;;)
                    {
                        uint _2765 = uint(findLSB(_2761)) + (_2565 << 5u);
                        uint _2762 = (_2761 + 4294967295u) & _2761;
                        uint _2767 = _2765 * 48u;
                        vec4 _2781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 3u)).x));
                        uint _2787 = (_2765 * 48u) + 4u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        uint _2806 = (_2765 * 48u) + 8u;
                        vec3 _2817 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x));
                        float _2821 = _2781.x - _2204;
                        float _2822 = _2781.y - _2205;
                        float _2823 = _2781.z - _2206;
                        float _2824 = dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823));
                        float _2827 = inversesqrt(_2824);
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2831 = dot(vec3(_802, _805, _808), vec3(_2828, _2829, _2830));
                        float _2836 = 1.0 - (_2824 * _2781.w);
                        float _4066 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2837 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2838 = sqrt(_2824) * _2800.w;
                        float _2841 = 1.39999997615814208984375 / (_2838 + 1.39999997615814208984375);
                        float _2842 = _2841 * _2841;
                        float _2845 = ((1.0 - _2842) * _2831) + _2842;
                        float _2848 = _2838 * _2838;
                        float _2852 = ((isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0))) * _2837) / ((_2848 * 0.699999988079071044921875) + 1.0);
                        float _2856 = (-0.0) - _2204;
                        float _2857 = (-0.0) - _2205;
                        float _2858 = (-0.0) - _2206;
                        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
                        float _2863 = _2862 * _2856;
                        float _2864 = _2862 * _2857;
                        float _2865 = _2862 * _2858;
                        float _2873 = exp2(log2(1.0 / ((_2848 * 3.5) + 5.0)) * 0.25);
                        float _2874 = 1.0 - _862;
                        float _2881 = sqrt(1.0 - ((1.0 - (_2874 * _2874)) * (1.0 - (_2873 * _2873))));
                        float _2882 = _2881 * _2881;
                        float _2883 = _2882 * _2882;
                        float _2884 = _2863 + _2828;
                        float _2885 = _2864 + _2829;
                        float _2886 = _2865 + _2830;
                        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
                        float _2894 = dot(vec3(_802, _805, _808), vec3(_2863, _2864, _2865));
                        float _4082 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2897 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2898 = dot(vec3(_802, _805, _808), vec3(_2890 * _2884, _2890 * _2885, _2890 * _2886));
                        float _4093 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2901 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2905 = ((_2901 * _2901) * (_2883 + (-1.0))) + 1.0;
                        float _2906 = _2841 * _2882;
                        float _2907 = _2906 * _2906;
                        float _2910 = ((1.0 - _2907) * _2831) + _2907;
                        float _4104 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2911 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2912 = 1.0 - _2882;
                        float _2922 = (0.5 / (((_2911 * ((_2897 * _2912) + _2882)) + 9.9999999392252902907785028219223e-09) + (((_2911 * _2912) + _2882) * _2897))) * _2911;
                        float _4115 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2933 = (((_2883 * 3.1415927410125732421875) * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) / ((_2905 * _2905) * ((_2848 * 2.1991131305694580078125) + 3.141590118408203125))) * _2837;
                        _2659 = (_2852 * _2800.x) + _2758;
                        _2660 = (_2852 * _2800.y) + _2759;
                        _2661 = (_2852 * _2800.z) + _2760;
                        _2656 = (_2933 * _2817.x) + _2755;
                        _2657 = (_2933 * _2817.y) + _2756;
                        _2658 = (_2933 * _2817.z) + _2757;
                        if (_2762 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2755 = _2656;
                            _2756 = _2657;
                            _2757 = _2658;
                            _2758 = _2659;
                            _2759 = _2660;
                            _2760 = _2661;
                            _2761 = _2762;
                        }
                    }
                    frontier_phi_63_pred = _2658;
                    frontier_phi_63_pred_1 = _2661;
                    frontier_phi_63_pred_2 = _2660;
                    frontier_phi_63_pred_3 = _2659;
                    frontier_phi_63_pred_4 = _2657;
                    frontier_phi_63_pred_5 = _2656;
                }
                _2372 = frontier_phi_63_pred;
                _2378 = frontier_phi_63_pred_1;
                _2376 = frontier_phi_63_pred_2;
                _2374 = frontier_phi_63_pred_3;
                _2370 = frontier_phi_63_pred_4;
                _2368 = frontier_phi_63_pred_5;
                uint _2566 = _2565 + 1u;
                if (_2566 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2559 = _2368;
                    _2560 = _2370;
                    _2561 = _2372;
                    _2562 = _2374;
                    _2563 = _2376;
                    _2564 = _2378;
                    _2565 = _2566;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
        }
        uvec4 _2381 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2382 = _2381.z;
        uint _2384 = (_2382 >> 8u) & 15u;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        if (((4294967295u << _2384) & _2250) == 0u)
        {
            _2527 = _2367;
            _2529 = _2369;
            _2531 = _2371;
            _2533 = _2373;
            _2535 = _2375;
            _2537 = _2377;
        }
        else
        {
            float _2552 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
            float _2553 = _2552 * _2204;
            float _2554 = _2552 * _2205;
            float _2555 = _2552 * _2206;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2384 < ((_2382 >> 12u) & 15u))
            {
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2738 = _2367;
                float _2739 = _2369;
                float _2740 = _2371;
                float _2741 = _2373;
                float _2742 = _2375;
                float _2743 = _2377;
                uint _2744 = _2384;
                uint _2753;
                bool _2754;
                for (;;)
                {
                    _2753 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2744 << 2u)) >> 2u)).x;
                    _2754 = _2753 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2754)
                    {
                        frontier_phi_77_pred = _2743;
                        frontier_phi_77_pred_1 = _2742;
                        frontier_phi_77_pred_2 = _2741;
                        frontier_phi_77_pred_3 = _2740;
                        frontier_phi_77_pred_4 = _2739;
                        frontier_phi_77_pred_5 = _2738;
                    }
                    else
                    {
                        float _2968;
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _2981 = _2738;
                        float _2982 = _2739;
                        float _2983 = _2740;
                        float _2984 = _2741;
                        float _2985 = _2742;
                        float _2986 = _2743;
                        uint _2987 = _2753;
                        uint _2988;
                        vec4 _3013;
                        float _3014;
                        vec4 _3029;
                        vec3 _3041;
                        vec4 _3057;
                        vec4 _3072;
                        float _3118;
                        bool _3119;
                        for (;;)
                        {
                            uint _2998 = ((_2744 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2987));
                            _2988 = (_2987 + 4294967295u) & _2987;
                            uint _3000 = _2998 * 40u;
                            _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            _3014 = _3013.w;
                            uint _3016 = (_2998 * 40u) + 4u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3031 = (_2998 * 40u) + 8u;
                            _3041 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x));
                            uint _3044 = (_2998 * 40u) + 16u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3059 = (_2998 * 40u) + 20u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3074 = (_2998 * 40u) + 24u;
                            vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3093 = (_2998 * 40u) + 28u;
                            vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            _3118 = fma(_2206, _3106.z, fma(_2205, _3106.y, _3106.x * _2204)) + _3106.w;
                            _3119 = !((fma(_2206, _3087.z, fma(_2205, _3087.y, _3087.x * _2204)) + _3087.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3119)
                            {
                                float _3146 = _3013.x - _2204;
                                float _3147 = _3013.y - _2205;
                                float _3148 = _3013.z - _2206;
                                float _3149 = dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148));
                                float _3152 = inversesqrt(_3149);
                                float _3153 = _3152 * _3146;
                                float _3154 = _3152 * _3147;
                                float _3155 = _3152 * _3148;
                                float _3159 = 1.0 - (_3149 / (_3014 * _3014));
                                float _4126 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3160 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3164 = sqrt(_3149) * _3029.w;
                                float _3166 = 1.39999997615814208984375 / (_3164 + 1.39999997615814208984375);
                                float _3167 = _3166 * _3166;
                                float _3170 = ((1.0 - _3167) * dot(vec3(_3153, _3154, _3155), vec3(_802, _805, _808))) + _3167;
                                float _3173 = _3164 * _3164;
                                float _3177 = (fma(_2206, _3057.z, fma(_2205, _3057.y, _3057.x * _2204)) + _3057.w) / _3118;
                                float _3178 = (fma(_2206, _3072.z, fma(_2205, _3072.y, _3072.x * _2204)) + _3072.w) / _3118;
                                float _3182 = 1.0 - dot(vec2(_3177, _3178), vec2(_3177, _3178));
                                float _4142 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3183 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3184 = _3183 * (((isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))) * _3160) / ((_3173 * 0.699999988079071044921875) + 1.0));
                                float _3196 = exp2(log2(1.0 / ((_3173 * 3.5) + 5.0)) * 0.25);
                                float _3197 = 1.0 - _862;
                                float _3204 = sqrt(1.0 - ((1.0 - (_3197 * _3197)) * (1.0 - (_3196 * _3196))));
                                float _3205 = _3204 * _3204;
                                float _3206 = _3205 * _3205;
                                float _3207 = _3153 - _2553;
                                float _3208 = _3154 - _2554;
                                float _3209 = _3155 - _2555;
                                float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                                float _3217 = dot(vec3(_802, _805, _808), vec3((-0.0) - _2553, (-0.0) - _2554, (-0.0) - _2555));
                                float _4153 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3220 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3221 = dot(vec3(_802, _805, _808), vec3(_3213 * _3207, _3213 * _3208, _3213 * _3209));
                                float _4164 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3224 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3228 = ((_3224 * _3224) * (_3206 + (-1.0))) + 1.0;
                                float _3229 = _3166 * _3205;
                                float _3230 = _3229 * _3229;
                                float _3236 = ((1.0 - _3230) * dot(vec3(_802, _805, _808), vec3(_3153, _3154, _3155))) + _3230;
                                float _4175 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3237 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3238 = 1.0 - _3205;
                                float _3248 = (0.5 / (((_3237 * ((_3220 * _3238) + _3205)) + 9.9999999392252902907785028219223e-09) + (((_3237 * _3238) + _3205) * _3220))) * _3237;
                                float _4186 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3258 = (_3183 * _3160) * (((_3206 * 3.1415927410125732421875) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) / ((_3228 * _3228) * ((_3173 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3184 * _3029.x;
                                frontier_phi_83_pred_1 = _3184 * _3029.z;
                                frontier_phi_83_pred_2 = _3184 * _3029.y;
                                frontier_phi_83_pred_3 = _3258 * _3041.z;
                                frontier_phi_83_pred_4 = _3258 * _3041.y;
                                frontier_phi_83_pred_5 = _3258 * _3041.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3265 = frontier_phi_83_pred;
                            _3267 = frontier_phi_83_pred_1;
                            _3266 = frontier_phi_83_pred_2;
                            _3264 = frontier_phi_83_pred_3;
                            _3263 = frontier_phi_83_pred_4;
                            _3262 = frontier_phi_83_pred_5;
                            _2971 = _3265 + _2984;
                            _2972 = _3266 + _2985;
                            _2973 = _3267 + _2986;
                            _2968 = _3262 + _2981;
                            _2969 = _3263 + _2982;
                            _2970 = _3264 + _2983;
                            if (_2988 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2988;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2973;
                        frontier_phi_77_pred_1 = _2972;
                        frontier_phi_77_pred_2 = _2971;
                        frontier_phi_77_pred_3 = _2970;
                        frontier_phi_77_pred_4 = _2969;
                        frontier_phi_77_pred_5 = _2968;
                    }
                    _2538 = frontier_phi_77_pred;
                    _2536 = frontier_phi_77_pred_1;
                    _2534 = frontier_phi_77_pred_2;
                    _2532 = frontier_phi_77_pred_3;
                    _2530 = frontier_phi_77_pred_4;
                    _2528 = frontier_phi_77_pred_5;
                    uint _2745 = _2744 + 1u;
                    if (_2745 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2738 = _2528;
                        _2739 = _2530;
                        _2740 = _2532;
                        _2741 = _2534;
                        _2742 = _2536;
                        _2743 = _2538;
                        _2744 = _2745;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2530;
                frontier_phi_52_53_ladder_1 = _2538;
                frontier_phi_52_53_ladder_2 = _2536;
                frontier_phi_52_53_ladder_3 = _2534;
                frontier_phi_52_53_ladder_4 = _2532;
                frontier_phi_52_53_ladder_5 = _2528;
            }
            else
            {
                frontier_phi_52_53_ladder = _2369;
                frontier_phi_52_53_ladder_1 = _2377;
                frontier_phi_52_53_ladder_2 = _2375;
                frontier_phi_52_53_ladder_3 = _2373;
                frontier_phi_52_53_ladder_4 = _2371;
                frontier_phi_52_53_ladder_5 = _2367;
            }
            _2527 = frontier_phi_52_53_ladder_5;
            _2529 = frontier_phi_52_53_ladder;
            _2531 = frontier_phi_52_53_ladder_4;
            _2533 = frontier_phi_52_53_ladder_3;
            _2535 = frontier_phi_52_53_ladder_2;
            _2537 = frontier_phi_52_53_ladder_1;
        }
        float _2542 = isnan(1.0) ? _846 : (isnan(_846) ? 1.0 : min(_846, 1.0));
        _2263 = (_2542 * _2533) + _1990;
        _2265 = (_2542 * _2535) + _1991;
        _2267 = (_2542 * _2537) + _1992;
        _2269 = ((_2527 * 0.039999999105930328369140625) * _2542) + _2146;
        _2271 = ((_2529 * 0.039999999105930328369140625) * _2542) + _2147;
        _2273 = ((_2531 * 0.039999999105930328369140625) * _2542) + _2148;
    }
    else
    {
        _2263 = _1990;
        _2265 = _1991;
        _2267 = _1992;
        _2269 = _2146;
        _2271 = _2147;
        _2273 = _2148;
    }
    uint _2279 = _822 + uint(cbMatDynParam._m0[0u].w);
    float _2285 = ((_711 * (_699 - (_699 * _672))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2279].x;
    float _2286 = ((_711 * (_700 - (_700 * _672))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2279].y;
    float _2287 = ((_711 * (_701 - (_701 * _672))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2279].z;
    float _4202 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4213 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4224 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _2304 = (((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2263 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _846))) + ((_2269 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1681)) * cbPerFrame._m0[3u].x)) + _2285;
    float _2306 = (_2286 + ((_2271 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1681)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2265 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _846)));
    float _2308 = (_2287 + ((_2273 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1681)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2267 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _846)));
    float _2309 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2310 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2311 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2317 = cbMtdParam._m0[2u].x * _2285;
    float _2318 = cbMtdParam._m0[2u].y * _2286;
    float _2319 = cbMtdParam._m0[2u].z * _2287;
    float _4250 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2321 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    uint _2322 = _821 + 6u;
    float _2330 = _783 / cbSceneParam._m0[86u].x;
    float _2331 = _784 / cbSceneParam._m0[86u].y;
    vec4 _2345 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2330, _2331, (log2((isnan(cbSceneParam._m0[77u].w) ? _757 : (isnan(_757) ? cbSceneParam._m0[77u].w : min(_757, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2347 = _2345.x;
    float _2348 = _2345.y;
    float _2349 = _2345.z;
    float _2350 = _2345.w;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_757 > cbSceneParam._m0[78u].w)
    {
        float _2392 = isnan(_757) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _757 : min(cbSceneParam._m0[80u].w, _757));
        float _2393 = _2392 / _757;
        float _2404 = _2393 * _282;
        float _2405 = _283 * _2393;
        float _2406 = (-0.0) - _2405;
        float _2407 = _2393 * _284;
        float _2409 = (cbSceneParam._m0[77u].w * _2406) / _2392;
        float _2410 = _2409 + cbSceneParam._m0[79u].w;
        float _2411 = cbSceneParam._m0[79u].w - _2405;
        float _2417 = sqrt(((_2404 * _2404) + (_2405 * _2405)) + (_2407 * _2407));
        float _2420 = (1.0 - (cbSceneParam._m0[77u].w / _2392)) * _2417;
        float _2426 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2428 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2669;
        if (abs((_2406 - _2409) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2669 = ((((_2410 > 0.0) ? exp2(_2426 * _2410) : (2.0 - exp2(_2428 * _2410))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2420;
        }
        else
        {
            float _2588 = 1.0 / cbSceneParam._m0[80u].x;
            float _2589 = isnan(_2411) ? _2410 : (isnan(_2410) ? _2411 : max(_2410, _2411));
            float _2590 = isnan(_2411) ? _2410 : (isnan(_2410) ? _2411 : min(_2410, _2411));
            float _2599 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : min(_2589, 0.0));
            float _2600 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : min(_2590, 0.0));
            _2669 = ((abs(_2417 / _2406) * cbSceneParam._m0[80u].y) * ((((_2599 - _2600) * 2.0) - ((exp2(_2426 * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0)))) - exp2(_2426 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0))))) * _2588)) - ((exp2(_2428 * _2599) - exp2(_2428 * _2600)) * _2588))) + (_2420 * cbSceneParam._m0[80u].z);
        }
        vec4 _2671 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2330, _2331, 1.0), 0.0);
        float _2680 = exp2((_2669 * (-1.44269502162933349609375)) * (1.0 - _2671.w));
        float _2681 = log2(_2680);
        float _2697 = log2(_2350);
        _2430 = (exp2(_2697 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2681 * cbSceneParam._m0[78u].x)) * _2671.x) / cbSceneParam._m0[78u].x)) + _2347;
        _2432 = (exp2(_2697 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2681 * cbSceneParam._m0[78u].y)) * _2671.y) / cbSceneParam._m0[78u].y)) + _2348;
        _2434 = (exp2(_2697 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2681 * cbSceneParam._m0[78u].z)) * _2671.z) / cbSceneParam._m0[78u].z)) + _2349;
        _2436 = _2680 * _2350;
    }
    else
    {
        _2430 = _2347;
        _2432 = _2348;
        _2434 = _2349;
        _2436 = _2350;
    }
    bool _2707;
    vec4 _2445;
    vec4 _2467;
    float _2469;
    float _2473;
    float _2474;
    float _2475;
    float _2478;
    float _2481;
    float _2484;
    float _2485;
    bool _2495;
    for (;;)
    {
        _2445 = cbMatDynParam._m0[0u];
        float _2447 = roundEven(_2445.y);
        bool _2448 = _2447 == 3.0;
        float _2449 = log2(_2436);
        float _2453 = exp2(_2449 * cbSceneParam._m0[78u].x);
        float _2454 = exp2(_2449 * cbSceneParam._m0[78u].y);
        float _2455 = exp2(_2449 * cbSceneParam._m0[78u].z);
        float _2456 = _2453 * _2309;
        float _2457 = _2454 * _2310;
        float _2458 = _2455 * _2311;
        float _2465 = _771 + (-0.5);
        _2467 = cbMtdParam._m0[1u];
        _2469 = _2467.y * _2465;
        float _2472 = (_2447 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2473 = _2472 * (_2448 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2430)));
        _2474 = _2472 * (_2448 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2432)));
        _2475 = _2472 * (_2448 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2434)));
        _2478 = ((_2317 * _2321) * _2453) * _2472;
        _2481 = ((_2318 * _2321) * _2454) * _2472;
        _2484 = ((_2319 * _2321) * _2455) * _2472;
        _2485 = _2465 * 0.999000012874603271484375;
        _2495 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2495)
        {
            if ((cbInstanceData._m0[_821 + 7u].x + _2485) < 0.5)
            {
                _2707 = true;
                break;
            }
        }
        uint _2623 = _822 + uint(_2445.w);
        if ((cbInstanceData._m0[_2623].w < 1.0) && ((cbInstanceData._m0[_2623].w + _2485) < 0.5))
        {
            _2707 = true;
            break;
        }
        if ((_2469 + 1.0) < _2467.x)
        {
            _2707 = true;
            break;
        }
        _2707 = false;
        break;
    }
    float _2938;
    if (_2707)
    {
        discard_state = true;
        _2938 = 0.0;
    }
    else
    {
        _2938 = cbInstanceData._m0[_2322].w;
    }
    SV_Target.x = _2473;
    SV_Target.y = _2474;
    SV_Target.z = _2475;
    SV_Target.w = _2938;
    SV_Target_1.x = _2478;
    SV_Target_1.y = _2481;
    SV_Target_1.z = _2484;
    SV_Target_1.w = cbInstanceData._m0[_2322].w;
    discard_exit();
}


