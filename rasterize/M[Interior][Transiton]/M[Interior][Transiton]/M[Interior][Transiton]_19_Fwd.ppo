#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _448;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    vec4 _292 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _295 = _292.x;
    vec4 _313 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _330 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _295) + cbMtdParam._m0[12u].x) * _313.x;
    float _332 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _295) + cbMtdParam._m0[12u].y) * _313.y;
    float _334 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _295) + cbMtdParam._m0[12u].z) * _313.z;
    vec4 _361 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _376 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _383 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _395 = cbMtdParam._m0[28u].z + _276;
    float _396 = cbMtdParam._m0[28u].w + _277;
    float _397 = cbMtdParam._m0[29u].x + _278;
    float _411 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_376 * _206, _376 * _207, _376 * _208));
    float _412 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_383 * _220, _383 * _221, _383 * _222));
    float _413 = (-0.0) - dot(vec3(_395, _396, _397), vec3((-0.0) - _213, (-0.0) - _214, (-0.0) - _215));
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _418 = _417 * _413;
    float _423 = ((cbMtdParam._m0[25u].y * _411) * _417) + (((_361.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _424 = ((cbMtdParam._m0[25u].z * _412) * _417) + (((_361.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _427 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _428 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _446;
    float _449;
    float _451;
    if (_423 > 0.0)
    {
        float _432 = (1.0 - _427) / _423;
        _446 = _432;
        _449 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_432 * _418)) * 0.16666667163372039794921875;
        _451 = (fract((_432 * _424) + _428) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_423 < 0.0)
        {
            float _447 = ((-0.0) - _427) / _423;
            frontier_phi_3_2_ladder = (fract((_447 * _424) + _428) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _447;
            frontier_phi_3_2_ladder_2 = (fract(_447 * _418) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _448;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _446 = frontier_phi_3_2_ladder_1;
        _449 = frontier_phi_3_2_ladder_2;
        _451 = frontier_phi_3_2_ladder;
    }
    float _477;
    float _479;
    float _481;
    if (_424 > 0.0)
    {
        float _464 = (1.0 - _428) / _424;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_464 < _446)
        {
            frontier_phi_8_5_ladder = (fract((_464 * _423) + _427) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _464;
            frontier_phi_8_5_ladder_2 = (fract(_464 * _418) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _449;
            frontier_phi_8_5_ladder_1 = _446;
            frontier_phi_8_5_ladder_2 = _451;
        }
        _477 = frontier_phi_8_5_ladder_1;
        _479 = frontier_phi_8_5_ladder;
        _481 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_424 < 0.0)
        {
            float _478 = ((-0.0) - _428) / _424;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_478 < _446)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_478 * _423) + _427) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _478;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_478 * _418) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _449;
                frontier_phi_8_6_ladder_9_ladder_1 = _446;
                frontier_phi_8_6_ladder_9_ladder_2 = _451;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _449;
            frontier_phi_8_6_ladder_1 = _446;
            frontier_phi_8_6_ladder_2 = _451;
        }
        _477 = frontier_phi_8_6_ladder_1;
        _479 = frontier_phi_8_6_ladder;
        _481 = frontier_phi_8_6_ladder_2;
    }
    float _485 = (_418 > 0.0) ? (cbMtdParam._m0[20u].z / _418) : 5000.0;
    float _498;
    float _499;
    if (_485 < _477)
    {
        _498 = ((_427 + cbMtdParam._m0[22u].x) + (_485 * _423)) * 0.16666667163372039794921875;
        _499 = (((_485 * _424) + _428) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _498 = _479;
        _499 = _481;
    }
    vec4 _501 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_498, _499));
    float _509 = _295 * 0.1500000059604644775390625;
    float _517 = (_509 * ((_501.x * _295) - _330)) + _330;
    float _518 = (_509 * ((_501.y * _295) - _332)) + _332;
    float _519 = (_509 * ((_501.z * _295) - _334)) + _334;
    vec4 _532 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _532.z;
    float _539 = (_532.x * 2.0) + (-1.0);
    float _540 = (_532.y * 2.0) + (-1.0);
    float _541 = dot(vec2(_539, _540), vec2(_539, _540));
    float _3331 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _546 = sqrt(1.0 - (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))));
    vec4 _573 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _578 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _584 = ((_573.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _586 = (-0.0) - (cbMtdParam._m0[21u].x * ((_573.x * 0.5) + (-0.25)));
    float _587 = fract(_578);
    float _589 = fract(_578 + 0.5);
    vec4 _616 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_587 * _586) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_584 * _587) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _618 = _616.x;
    float _624 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_589 * _586) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_584 * _589) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _618) * abs((_587 * 2.0) + (-1.0))) + _618;
    float _638 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _642 = fract(abs(_638));
    float _648 = sin(cbMtdParam._m0[21u].z);
    float _649 = cos(cbMtdParam._m0[21u].z);
    float _650 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _651 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _681 = abs(cbMtdParam._m0[20u].w * (((_624 - (((_638 >= ((-0.0) - _638)) ? _642 : ((-0.0) - _642)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_651, (-0.0) - _648, _649 * _650) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_651, _649, _650 * _648) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _685 = (((_681 * cbMtdParam._m0[18u].y) - _624) * _681) + _624;
    float _3342 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _686 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    vec4 _698 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _713 = (cbMtdParam._m0[14u].x * _698.x) * cbMtdParam._m0[19u].x;
    float _714 = (cbMtdParam._m0[14u].y * _698.y) * cbMtdParam._m0[19u].x;
    float _715 = (cbMtdParam._m0[14u].z * _698.z) * cbMtdParam._m0[19u].x;
    float _725 = exp2(log2(_686) * cbMtdParam._m0[20u].x);
    float _738 = fma(_546, _213, fma(_540, _220, _539 * _206));
    float _741 = fma(_546, _214, fma(_540, _221, _539 * _207));
    float _744 = fma(_546, _215, fma(_540, _222, _539 * _208));
    float _748 = inversesqrt(dot(vec3(_738, _741, _744), vec3(_738, _741, _744)));
    float _749 = _748 * _738;
    float _750 = _748 * _741;
    float _751 = _748 * _744;
    float _3353 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _752 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3375 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3386 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _771 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _775 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _776 = _276 * _775;
    float _777 = _277 * _775;
    float _778 = _278 * _775;
    float _784 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _785 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _804 = fma(_751, cbSceneParam._m0[5u].z, fma(_750, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _749));
    float _807 = fma(_751, cbSceneParam._m0[6u].z, fma(_750, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _749));
    float _810 = fma(_751, cbSceneParam._m0[7u].z, fma(_750, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _749));
    uint _823 = uint(roundEven(NORMAL.w)) * 13u;
    uint _824 = _823 + 9u;
    uint _825 = _824 + uint(cbMatDynParam._m0[0u].w);
    float _831 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_825].x;
    float _832 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_825].y;
    float _833 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_825].z;
    float _3397 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    vec4 _845 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _784, cbSceneParam._m0[86u].y * _785));
    float _848 = _845.x * TEXCOORD_4;
    float _849 = dot(vec3(_749, _750, _751), vec3(_776, _777, _778));
    float _852 = _849 * 2.0;
    float _856 = (_852 * _749) - _776;
    float _857 = (_852 * _750) - _777;
    float _858 = (_852 * _751) - _778;
    float _862 = abs(dot(vec3(_776, _777, _778), vec3(_749, _750, _751)));
    float _3430 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _864 = sqrt(_752);
    float _877 = exp2((_864 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_864 * 3.0));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _950 = fma(_917, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _909));
        float _954 = fma(_917, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _909));
        float _958 = fma(_917, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _909));
        float _982 = _909 + _749;
        float _983 = _913 + _750;
        float _984 = _917 + _751;
        float _994 = fma(_984, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _982)) - _950;
        float _995 = fma(_984, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _982)) - _954;
        float _996 = fma(_984, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _982)) - _958;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_950 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_954 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[34u].z) + ((((((_958 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1052 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1018.x + (-0.5));
        float _1054 = _1052 * (_1018.y + (-0.5));
        float _1055 = _1052 * (_1018.z + (-0.5));
        float _1062 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1025.x + (-0.5));
        float _1064 = _1062 * (_1025.y + (-0.5));
        float _1065 = _1062 * (_1025.z + (-0.5));
        float _1072 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1032.x + (-0.5));
        float _1074 = _1072 * (_1032.y + (-0.5));
        float _1075 = _1072 * (_1032.z + (-0.5));
        float _1082 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1039.x + (-0.5));
        float _1084 = _1082 * (_1039.y + (-0.5));
        float _1085 = _1082 * (_1039.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1106 = (dot(vec3(_749, _750, _751), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1116 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3478 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_1118 + 1.0))) + _1123) * _1086;
        float _1133 = _1054 * 0.5;
        float _1134 = _1064 * 0.5;
        float _1135 = _1074 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_749, _750, _751), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3511 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1160 + 1.0))) + _1165) * _1087;
        float _1175 = _1055 * 0.5;
        float _1176 = _1065 * 0.5;
        float _1177 = _1075 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_749, _750, _751), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3544 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1202 + 1.0))) + _1207) * _1088;
        _1224 = _1055;
        _1225 = _1054;
        _1226 = _1053;
        _1227 = _1065;
        _1228 = _1064;
        _1229 = _1063;
        _1230 = _1075;
        _1231 = _1074;
        _1232 = _1073;
        _1233 = _1088;
        _1234 = _1087;
        _1235 = _1086;
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _448;
        _1225 = _448;
        _1226 = _448;
        _1227 = _448;
        _1228 = _448;
        _1229 = _448;
        _1230 = _448;
        _1231 = _448;
        _1232 = _448;
        _1233 = _448;
        _1234 = _448;
        _1235 = _448;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1263 = fma(_917, cbModelParam._m0[30u].z, fma(_913, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _909));
        float _1267 = fma(_917, cbModelParam._m0[31u].z, fma(_913, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _909));
        float _1271 = fma(_917, cbModelParam._m0[32u].z, fma(_913, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _909));
        float _1294 = _909 + _749;
        float _1295 = _913 + _750;
        float _1296 = _917 + _751;
        float _1306 = fma(_1296, cbModelParam._m0[30u].z, fma(_1295, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1294)) - _1263;
        float _1307 = fma(_1296, cbModelParam._m0[31u].z, fma(_1295, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1294)) - _1267;
        float _1308 = fma(_1296, cbModelParam._m0[32u].z, fma(_1295, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1294)) - _1271;
        float _1312 = inversesqrt(dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308)));
        float _1325 = ((_1312 * _1306) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1263 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1312 * _1307) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1267 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1312 * _1308) / cbModelParam._m0[35u].z) + ((((((_1271 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        float _1362 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1329.x + (-0.5));
        float _1364 = _1362 * (_1329.y + (-0.5));
        float _1365 = _1362 * (_1329.z + (-0.5));
        float _1372 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1336.x + (-0.5));
        float _1374 = _1372 * (_1336.y + (-0.5));
        float _1375 = _1372 * (_1336.z + (-0.5));
        float _1382 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1343.x + (-0.5));
        float _1384 = _1382 * (_1343.y + (-0.5));
        float _1385 = _1382 * (_1343.z + (-0.5));
        float _1392 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1350.x + (-0.5));
        float _1394 = _1392 * (_1350.y + (-0.5));
        float _1395 = _1392 * (_1350.z + (-0.5));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = _1363 * 0.5;
        float _1400 = _1373 * 0.5;
        float _1401 = _1383 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_749, _750, _751), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _3607 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1426 + 1.0))) + _1431) * _1396;
        float _1441 = _1364 * 0.5;
        float _1442 = _1374 * 0.5;
        float _1443 = _1384 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_749, _750, _751), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _3640 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1468 + 1.0))) + _1473) * _1397;
        float _1483 = _1365 * 0.5;
        float _1484 = _1375 * 0.5;
        float _1485 = _1385 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_749, _750, _751), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _3673 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1510 + 1.0))) + _1515) * _1398;
        _1532 = _1365;
        _1533 = _1364;
        _1534 = _1363;
        _1535 = _1375;
        _1536 = _1374;
        _1537 = _1373;
        _1538 = _1385;
        _1539 = _1384;
        _1540 = _1383;
        _1541 = _1398;
        _1542 = _1397;
        _1543 = _1396;
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
    }
    else
    {
        _1532 = _448;
        _1533 = _448;
        _1534 = _448;
        _1535 = _448;
        _1536 = _448;
        _1537 = _448;
        _1538 = _448;
        _1539 = _448;
        _1540 = _448;
        _1541 = _448;
        _1542 = _448;
        _1543 = _448;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1236)) + _1236;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1237)) + _1237;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1238)) + _1238;
    float _1579 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1582 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1585 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1556));
    float _1600 = _856 * 0.5;
    float _1601 = _857 * 0.5;
    float _1602 = _858 * 0.5;
    float _1603 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1606 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1609 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1643;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1616 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1224, _1227, _1230, _1233));
        float _1620 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1225, _1228, _1231, _1234));
        float _1624 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1226, _1229, _1232, _1235));
        float _1631 = dot(vec4(cbModelParam._m0[39u]), vec4(_1600, _1601, _1602, 1.0));
        _1643 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1643 = 1.0;
    }
    float _1654;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1645 = dot(vec4(cbModelParam._m0[40u]), vec4(_1600, _1601, _1602, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1658 = (_1654 * cbModelParam._m0[1u].x) + (_1643 * (1.0 - cbModelParam._m0[1u].x));
    float _1668 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _752);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1668 : min(cbModelParam._m0[25u].z, _1668));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1717 = fma(_917, cbModelParam._m0[13u].z, fma(_913, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909)) + cbModelParam._m0[13u].w;
        float _1721 = fma(_917, cbModelParam._m0[14u].z, fma(_913, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909)) + cbModelParam._m0[14u].w;
        float _1725 = fma(_917, cbModelParam._m0[15u].z, fma(_913, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909)) + cbModelParam._m0[15u].w;
        float _1728 = fma(_858, cbModelParam._m0[13u].z, fma(_857, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _856));
        float _1731 = fma(_858, cbModelParam._m0[14u].z, fma(_857, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _856));
        float _1734 = fma(_858, cbModelParam._m0[15u].z, fma(_857, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _856));
        float _1762;
        if (_1728 > 0.0)
        {
            _1762 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1762 = frontier_phi_26_24_ladder;
        }
        float _2107;
        if (_1731 > 0.0)
        {
            _2107 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _2107 = frontier_phi_35_31_ladder;
        }
        float _2441;
        if (_1734 > 0.0)
        {
            _2441 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2441 = frontier_phi_49_42_ladder;
        }
        float _2443 = isnan(_2107) ? _1762 : (isnan(_1762) ? _2107 : min(_1762, _2107));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1728) + _1717;
        float _2449 = (_2444 * _1731) + _1721;
        float _2450 = (_2444 * _1734) + _1725;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2451;
        float _2454 = _2451 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2450 > _2454) || ((_2450 < _2452) || ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 < _2452) || (_2448 > _2454))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2450, cbModelParam._m0[9u].z, fma(_2449, cbModelParam._m0[9u].y, _2448 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2450, cbModelParam._m0[10u].z, fma(_2449, cbModelParam._m0[10u].y, _2448 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2450, cbModelParam._m0[11u].z, fma(_2449, cbModelParam._m0[11u].y, _2448 * cbModelParam._m0[11u].x))), _1669);
            frontier_phi_25_49_ladder = _2576.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2576.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2576.x * cbModelParam._m0[1u].y;
        }
        _1750 = frontier_phi_25_49_ladder_2;
        _1752 = frontier_phi_25_49_ladder_1;
        _1754 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_856, _857, _858), _1669);
        _1750 = _1738.x * cbModelParam._m0[1u].y;
        _1752 = _1738.y * cbModelParam._m0[1u].y;
        _1754 = _1738.z * cbModelParam._m0[1u].y;
    }
    float _1758 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _752);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1758 : min(cbModelParam._m0[25u].w, _1758));
    float _1847;
    float _1849;
    float _1851;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1811 = fma(_917, cbModelParam._m0[21u].z, fma(_913, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909)) + cbModelParam._m0[21u].w;
        float _1815 = fma(_917, cbModelParam._m0[22u].z, fma(_913, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909)) + cbModelParam._m0[22u].w;
        float _1819 = fma(_917, cbModelParam._m0[23u].z, fma(_913, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909)) + cbModelParam._m0[23u].w;
        float _1822 = fma(_858, cbModelParam._m0[21u].z, fma(_857, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _856));
        float _1825 = fma(_858, cbModelParam._m0[22u].z, fma(_857, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _856));
        float _1828 = fma(_858, cbModelParam._m0[23u].z, fma(_857, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _856));
        float _2112;
        if (_1822 > 0.0)
        {
            _2112 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2112 = frontier_phi_37_33_ladder;
        }
        float _2467;
        if (_1825 > 0.0)
        {
            _2467 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2467 = frontier_phi_51_44_ladder;
        }
        float _2636;
        if (_1828 > 0.0)
        {
            _2636 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2636 = frontier_phi_65_60_ladder;
        }
        float _2638 = isnan(_2467) ? _2112 : (isnan(_2112) ? _2467 : min(_2112, _2467));
        float _2639 = isnan(_2636) ? _2638 : (isnan(_2638) ? _2636 : min(_2638, _2636));
        float _2643 = (_2639 * _1822) + _1811;
        float _2644 = (_2639 * _1825) + _1815;
        float _2645 = (_2639 * _1828) + _1819;
        float _2646 = _2639 * 9.9999997473787516355514526367188e-05;
        float _2647 = (-1.0) - _2646;
        float _2649 = _2646 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2645 > _2649) || ((_2645 < _2647) || ((_2644 > _2649) || ((_2644 < _2647) || ((_2643 < _2647) || (_2643 > _2649))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2645, cbModelParam._m0[17u].z, fma(_2644, cbModelParam._m0[17u].y, _2643 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2645, cbModelParam._m0[18u].z, fma(_2644, cbModelParam._m0[18u].y, _2643 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2645, cbModelParam._m0[19u].z, fma(_2644, cbModelParam._m0[19u].y, _2643 * cbModelParam._m0[19u].x))), _1759);
            frontier_phi_34_65_ladder = _2878.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2878.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2878.z * cbModelParam._m0[1u].z;
        }
        _1847 = frontier_phi_34_65_ladder_1;
        _1849 = frontier_phi_34_65_ladder;
        _1851 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_856, _857, _858), _1759);
        _1847 = _1831.x * cbModelParam._m0[1u].z;
        _1849 = _1831.y * cbModelParam._m0[1u].z;
        _1851 = _1831.z * cbModelParam._m0[1u].z;
    }
    float _1863 = ((((1.0 - _877) * ((_864 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_877 * _864)) * _848;
    float _1864 = _1863 * ((cbModelParam._m0[1u].w * (_1847 - _1750)) + _1750);
    float _1865 = _1863 * ((cbModelParam._m0[1u].w * (_1849 - _1752)) + _1752);
    float _1866 = _1863 * ((cbModelParam._m0[1u].w * (_1851 - _1754)) + _1754);
    float _1869 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1865, cbSceneParam._m0[89u].y, _1864 * cbSceneParam._m0[89u].x));
    float _1872 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1865, cbSceneParam._m0[90u].y, _1864 * cbSceneParam._m0[90u].x));
    float _1875 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1865, cbSceneParam._m0[91u].y, _1864 * cbSceneParam._m0[91u].x));
    uvec4 _1885 = floatBitsToUint(cbInstanceData._m0[_823 + 5u]);
    uint _1887 = _1885.x * 14u;
    uint _1888 = _1887 + 13u;
    float _1893 = _848 + (-1.0);
    float _1896 = (cbLight._m0[_1888].x * _1893) + 1.0;
    float _1897 = (cbLight._m0[_1888].y * _1893) + 1.0;
    uint _1898 = _1887 + 5u;
    float _1904 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
    uint _1908 = _1887 + 4u;
    float _1914 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1918 = _1887 | 1u;
    float _1929 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_749, _750, _751));
    float _1932 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_749, _750, _751));
    float _3809 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _3820 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1937 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.3183098733425140380859375;
    float _1939 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1946 = ((cbLight._m0[_1898].x * _1904) * _1939) + ((cbLight._m0[_1908].x * _1914) * _1937);
    float _1947 = ((_1904 * cbLight._m0[_1898].y) * _1939) + ((_1914 * cbLight._m0[_1908].y) * _1937);
    float _1948 = ((_1904 * cbLight._m0[_1898].z) * _1939) + ((_1914 * cbLight._m0[_1908].z) * _1937);
    uint _1950 = _1887 + 8u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _752) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1887].x + _776;
    float _1966 = cbLight._m0[_1887].y + _777;
    float _1967 = cbLight._m0[_1887].z + _778;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_1887].xyz));
    float _3831 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _1979 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _1980 = dot(vec3(_749, _750, _751), vec3(_1972, _1973, _1974));
    float _3853 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1984 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_1972, _1973, _1974));
    float _3864 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1988 = _1964 * _1964;
    float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
    float _2003 = (exp2(log2(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2004 = 1.0 - _1964;
    float _2015 = (0.5 / (((_1979 * ((_1978 * _2004) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2004) + _1964) * _1978))) * _1978;
    float _3875 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
    uint _2028 = _1887 + 9u;
    float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _752) * 0.949999988079071044921875);
    float _2040 = _2039 * _2039;
    float _2041 = cbLight._m0[_1918].x + _776;
    float _2042 = cbLight._m0[_1918].y + _777;
    float _2043 = cbLight._m0[_1918].z + _778;
    float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
    float _2048 = _2047 * _2041;
    float _2049 = _2047 * _2042;
    float _2050 = _2047 * _2043;
    float _2051 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_1918].xyz));
    float _3886 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _2055 = dot(vec3(_749, _750, _751), vec3(_2048, _2049, _2050));
    float _3897 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_2048, _2049, _2050));
    float _3908 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2040 * _2040;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2076 = (exp2(log2(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2077 = 1.0 - _2040;
    float _2087 = (0.5 / (((_1979 * ((_2054 * _2077) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2077) + _2040) * _2054))) * _2054;
    float _3919 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2089 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    float _2099 = (((_2076 * cbLight._m0[_2028].x) * _2089) * _1904) + (((_2003 * cbLight._m0[_1950].x) * _2017) * _1914);
    float _2100 = (((_2076 * cbLight._m0[_2028].y) * _2089) * _1904) + (((_2003 * cbLight._m0[_1950].y) * _2017) * _1914);
    float _2101 = (((_2076 * cbLight._m0[_2028].z) * _2089) * _1904) + (((_2003 * cbLight._m0[_1950].z) * _2017) * _1914);
    float _2216;
    float _2218;
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    if (_1885.y == 0u)
    {
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2156;
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2156;
        float _2159 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2156;
        uvec4 _2171 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2172 = _2171.x;
        uint _2183 = uint((float(_2171.y) * floor(float(uint(cbSceneParam._m0[85u].y * _785) / _2172))) + floor(float(uint(cbSceneParam._m0[85u].x * _784) / _2172)));
        float _2193 = (log2(_2159 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2194 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        uint _2197 = uint(isnan(14.0) ? _2194 : (isnan(_2194) ? 14.0 : min(_2194, 14.0)));
        uvec4 _2202 = texelFetch(g_lightClusterGridBuffer, int(((_2197 << 2u) + (_2183 << 6u)) >> 2u));
        uint _2203 = _2202.x;
        uint _2204 = _2171.z;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        if (((((1u << ((_2204 >> 4u) & 15u)) + 4294967295u) & _2203) == 0u) || ((_2204 & 240u) == 0u))
        {
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
        }
        else
        {
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2329;
            float _2331;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            uint _2510 = 0u;
            uint _2519;
            bool _2520;
            for (;;)
            {
                _2519 = texelFetch(g_lightClassification, int((((_2197 << 5u) + (_2183 << 9u)) + (_2510 << 2u)) >> 2u)).x;
                _2520 = _2519 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2520)
                {
                    frontier_phi_62_pred = _2505;
                    frontier_phi_62_pred_1 = _2504;
                    frontier_phi_62_pred_2 = _2506;
                    frontier_phi_62_pred_3 = _2509;
                    frontier_phi_62_pred_4 = _2508;
                    frontier_phi_62_pred_5 = _2507;
                }
                else
                {
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    uint _2685;
                    _2679 = _2504;
                    _2680 = _2505;
                    _2681 = _2506;
                    _2682 = _2507;
                    _2683 = _2508;
                    _2684 = _2509;
                    _2685 = _2519;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    for (;;)
                    {
                        uint _2689 = uint(findLSB(_2685)) + (_2510 << 5u);
                        uint _2686 = (_2685 + 4294967295u) & _2685;
                        uint _2691 = _2689 * 48u;
                        vec4 _2705 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2691)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 3u)).x));
                        uint _2711 = (_2689 * 48u) + 4u;
                        vec4 _2724 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 3u)).x));
                        uint _2730 = (_2689 * 48u) + 8u;
                        vec3 _2741 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2730)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 2u)).x));
                        float _2745 = _2705.x - _2157;
                        float _2746 = _2705.y - _2158;
                        float _2747 = _2705.z - _2159;
                        float _2748 = dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747));
                        float _2751 = inversesqrt(_2748);
                        float _2752 = _2751 * _2745;
                        float _2753 = _2751 * _2746;
                        float _2754 = _2751 * _2747;
                        float _2755 = dot(vec3(_804, _807, _810), vec3(_2752, _2753, _2754));
                        float _2760 = 1.0 - (_2748 * _2705.w);
                        float _3940 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2761 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                        float _2762 = sqrt(_2748) * _2724.w;
                        float _2765 = 1.39999997615814208984375 / (_2762 + 1.39999997615814208984375);
                        float _2766 = _2765 * _2765;
                        float _2769 = ((1.0 - _2766) * _2755) + _2766;
                        float _2772 = _2762 * _2762;
                        float _2776 = ((isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0))) * _2761) / ((_2772 * 0.699999988079071044921875) + 1.0);
                        float _2780 = (-0.0) - _2157;
                        float _2781 = (-0.0) - _2158;
                        float _2782 = (-0.0) - _2159;
                        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
                        float _2787 = _2786 * _2780;
                        float _2788 = _2786 * _2781;
                        float _2789 = _2786 * _2782;
                        float _2797 = exp2(log2(1.0 / ((_2772 * 3.5) + 5.0)) * 0.25);
                        float _2798 = 1.0 - _864;
                        float _2805 = sqrt(1.0 - ((1.0 - (_2798 * _2798)) * (1.0 - (_2797 * _2797))));
                        float _2806 = _2805 * _2805;
                        float _2807 = _2806 * _2806;
                        float _2808 = _2787 + _2752;
                        float _2809 = _2788 + _2753;
                        float _2810 = _2789 + _2754;
                        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
                        float _2818 = dot(vec3(_804, _807, _810), vec3(_2787, _2788, _2789));
                        float _3956 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                        float _2822 = dot(vec3(_804, _807, _810), vec3(_2814 * _2808, _2814 * _2809, _2814 * _2810));
                        float _3967 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2825 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                        float _2829 = ((_2825 * _2825) * (_2807 + (-1.0))) + 1.0;
                        float _2830 = _2765 * _2806;
                        float _2831 = _2830 * _2830;
                        float _2834 = ((1.0 - _2831) * _2755) + _2831;
                        float _3978 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2835 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _2836 = 1.0 - _2806;
                        float _2846 = (0.5 / (((_2835 * ((_2821 * _2836) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2835 * _2836) + _2806) * _2821))) * _2835;
                        float _3989 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2857 = (((_2807 * 3.1415927410125732421875) * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) / ((_2829 * _2829) * ((_2772 * 2.1991131305694580078125) + 3.141590118408203125))) * _2761;
                        _2588 = (_2776 * _2724.x) + _2682;
                        _2589 = (_2776 * _2724.y) + _2683;
                        _2590 = (_2776 * _2724.z) + _2684;
                        _2585 = (_2857 * _2741.x) + _2679;
                        _2586 = (_2857 * _2741.y) + _2680;
                        _2587 = (_2857 * _2741.z) + _2681;
                        if (_2686 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2679 = _2585;
                            _2680 = _2586;
                            _2681 = _2587;
                            _2682 = _2588;
                            _2683 = _2589;
                            _2684 = _2590;
                            _2685 = _2686;
                        }
                    }
                    frontier_phi_62_pred = _2586;
                    frontier_phi_62_pred_1 = _2585;
                    frontier_phi_62_pred_2 = _2587;
                    frontier_phi_62_pred_3 = _2590;
                    frontier_phi_62_pred_4 = _2589;
                    frontier_phi_62_pred_5 = _2588;
                }
                _2323 = frontier_phi_62_pred;
                _2321 = frontier_phi_62_pred_1;
                _2325 = frontier_phi_62_pred_2;
                _2331 = frontier_phi_62_pred_3;
                _2329 = frontier_phi_62_pred_4;
                _2327 = frontier_phi_62_pred_5;
                uint _2511 = _2510 + 1u;
                if (_2511 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2504 = _2321;
                    _2505 = _2323;
                    _2506 = _2325;
                    _2507 = _2327;
                    _2508 = _2329;
                    _2509 = _2331;
                    _2510 = _2511;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
        }
        uvec4 _2334 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2335 = _2334.z;
        uint _2337 = (_2335 >> 8u) & 15u;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        if (((4294967295u << _2337) & _2203) == 0u)
        {
            _2472 = _2320;
            _2474 = _2322;
            _2476 = _2324;
            _2478 = _2326;
            _2480 = _2328;
            _2482 = _2330;
        }
        else
        {
            float _2497 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
            float _2498 = _2497 * _2157;
            float _2499 = _2497 * _2158;
            float _2500 = _2497 * _2159;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2337 < ((_2335 >> 12u) & 15u))
            {
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2662 = _2320;
                float _2663 = _2322;
                float _2664 = _2324;
                float _2665 = _2326;
                float _2666 = _2328;
                float _2667 = _2330;
                uint _2668 = _2337;
                uint _2677;
                bool _2678;
                for (;;)
                {
                    _2677 = texelFetch(g_lightClassification, int((((_2197 << 5u) + (_2183 << 9u)) + (_2668 << 2u)) >> 2u)).x;
                    _2678 = _2677 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2678)
                    {
                        frontier_phi_71_pred = _2663;
                        frontier_phi_71_pred_1 = _2662;
                        frontier_phi_71_pred_2 = _2667;
                        frontier_phi_71_pred_3 = _2666;
                        frontier_phi_71_pred_4 = _2665;
                        frontier_phi_71_pred_5 = _2664;
                    }
                    else
                    {
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _2896 = _2662;
                        float _2897 = _2663;
                        float _2898 = _2664;
                        float _2899 = _2665;
                        float _2900 = _2666;
                        float _2901 = _2667;
                        uint _2902 = _2677;
                        uint _2903;
                        vec4 _2928;
                        float _2929;
                        vec4 _2944;
                        vec3 _2956;
                        vec4 _2972;
                        vec4 _2987;
                        float _3033;
                        bool _3034;
                        for (;;)
                        {
                            uint _2913 = ((_2668 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2902));
                            _2903 = (_2902 + 4294967295u) & _2902;
                            uint _2915 = _2913 * 40u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            _2929 = _2928.w;
                            uint _2931 = (_2913 * 40u) + 4u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2946 = (_2913 * 40u) + 8u;
                            _2956 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x));
                            uint _2959 = (_2913 * 40u) + 16u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2974 = (_2913 * 40u) + 20u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2989 = (_2913 * 40u) + 24u;
                            vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3008 = (_2913 * 40u) + 28u;
                            vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            _3033 = fma(_2159, _3021.z, fma(_2158, _3021.y, _3021.x * _2157)) + _3021.w;
                            _3034 = !((fma(_2159, _3002.z, fma(_2158, _3002.y, _3002.x * _2157)) + _3002.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3034)
                            {
                                float _3061 = _2928.x - _2157;
                                float _3062 = _2928.y - _2158;
                                float _3063 = _2928.z - _2159;
                                float _3064 = dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063));
                                float _3067 = inversesqrt(_3064);
                                float _3068 = _3067 * _3061;
                                float _3069 = _3067 * _3062;
                                float _3070 = _3067 * _3063;
                                float _3074 = 1.0 - (_3064 / (_2929 * _2929));
                                float _4000 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                                float _3079 = sqrt(_3064) * _2944.w;
                                float _3081 = 1.39999997615814208984375 / (_3079 + 1.39999997615814208984375);
                                float _3082 = _3081 * _3081;
                                float _3085 = ((1.0 - _3082) * dot(vec3(_3068, _3069, _3070), vec3(_804, _807, _810))) + _3082;
                                float _3088 = _3079 * _3079;
                                float _3092 = (fma(_2159, _2972.z, fma(_2158, _2972.y, _2972.x * _2157)) + _2972.w) / _3033;
                                float _3093 = (fma(_2159, _2987.z, fma(_2158, _2987.y, _2987.x * _2157)) + _2987.w) / _3033;
                                float _3097 = 1.0 - dot(vec2(_3092, _3093), vec2(_3092, _3093));
                                float _4016 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3098 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _3099 = _3098 * (((isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))) * _3075) / ((_3088 * 0.699999988079071044921875) + 1.0));
                                float _3111 = exp2(log2(1.0 / ((_3088 * 3.5) + 5.0)) * 0.25);
                                float _3112 = 1.0 - _864;
                                float _3119 = sqrt(1.0 - ((1.0 - (_3112 * _3112)) * (1.0 - (_3111 * _3111))));
                                float _3120 = _3119 * _3119;
                                float _3121 = _3120 * _3120;
                                float _3122 = _3068 - _2498;
                                float _3123 = _3069 - _2499;
                                float _3124 = _3070 - _2500;
                                float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                                float _3132 = dot(vec3(_804, _807, _810), vec3((-0.0) - _2498, (-0.0) - _2499, (-0.0) - _2500));
                                float _4027 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3135 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                                float _3136 = dot(vec3(_804, _807, _810), vec3(_3128 * _3122, _3128 * _3123, _3128 * _3124));
                                float _4038 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3139 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _3143 = ((_3139 * _3139) * (_3121 + (-1.0))) + 1.0;
                                float _3144 = _3081 * _3120;
                                float _3145 = _3144 * _3144;
                                float _3151 = ((1.0 - _3145) * dot(vec3(_804, _807, _810), vec3(_3068, _3069, _3070))) + _3145;
                                float _4049 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3152 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _3153 = 1.0 - _3120;
                                float _3163 = (0.5 / (((_3152 * ((_3135 * _3153) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_3152 * _3153) + _3120) * _3135))) * _3152;
                                float _4060 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3173 = (_3098 * _3075) * (((_3121 * 3.1415927410125732421875) * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) / ((_3143 * _3143) * ((_3088 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3173 * _2956.y;
                                frontier_phi_77_pred_1 = _3173 * _2956.x;
                                frontier_phi_77_pred_2 = _3099 * _2944.z;
                                frontier_phi_77_pred_3 = _3099 * _2944.y;
                                frontier_phi_77_pred_4 = _3099 * _2944.x;
                                frontier_phi_77_pred_5 = _3173 * _2956.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3178 = frontier_phi_77_pred;
                            _3177 = frontier_phi_77_pred_1;
                            _3182 = frontier_phi_77_pred_2;
                            _3181 = frontier_phi_77_pred_3;
                            _3180 = frontier_phi_77_pred_4;
                            _3179 = frontier_phi_77_pred_5;
                            _2886 = _3180 + _2899;
                            _2887 = _3181 + _2900;
                            _2888 = _3182 + _2901;
                            _2883 = _3177 + _2896;
                            _2884 = _3178 + _2897;
                            _2885 = _3179 + _2898;
                            if (_2903 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2903;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2884;
                        frontier_phi_71_pred_1 = _2883;
                        frontier_phi_71_pred_2 = _2888;
                        frontier_phi_71_pred_3 = _2887;
                        frontier_phi_71_pred_4 = _2886;
                        frontier_phi_71_pred_5 = _2885;
                    }
                    _2475 = frontier_phi_71_pred;
                    _2473 = frontier_phi_71_pred_1;
                    _2483 = frontier_phi_71_pred_2;
                    _2481 = frontier_phi_71_pred_3;
                    _2479 = frontier_phi_71_pred_4;
                    _2477 = frontier_phi_71_pred_5;
                    uint _2669 = _2668 + 1u;
                    if (_2669 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2662 = _2473;
                        _2663 = _2475;
                        _2664 = _2477;
                        _2665 = _2479;
                        _2666 = _2481;
                        _2667 = _2483;
                        _2668 = _2669;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2483;
                frontier_phi_53_54_ladder_1 = _2479;
                frontier_phi_53_54_ladder_2 = _2477;
                frontier_phi_53_54_ladder_3 = _2475;
                frontier_phi_53_54_ladder_4 = _2473;
                frontier_phi_53_54_ladder_5 = _2481;
            }
            else
            {
                frontier_phi_53_54_ladder = _2330;
                frontier_phi_53_54_ladder_1 = _2326;
                frontier_phi_53_54_ladder_2 = _2324;
                frontier_phi_53_54_ladder_3 = _2322;
                frontier_phi_53_54_ladder_4 = _2320;
                frontier_phi_53_54_ladder_5 = _2328;
            }
            _2472 = frontier_phi_53_54_ladder_4;
            _2474 = frontier_phi_53_54_ladder_3;
            _2476 = frontier_phi_53_54_ladder_2;
            _2478 = frontier_phi_53_54_ladder_1;
            _2480 = frontier_phi_53_54_ladder_5;
            _2482 = frontier_phi_53_54_ladder;
        }
        float _2487 = isnan(1.0) ? _848 : (isnan(_848) ? 1.0 : min(_848, 1.0));
        _2216 = (_2487 * _2478) + _1946;
        _2218 = (_2487 * _2480) + _1947;
        _2220 = (_2487 * _2482) + _1948;
        _2222 = ((_2472 * 0.039999999105930328369140625) * _2487) + _2099;
        _2224 = ((_2474 * 0.039999999105930328369140625) * _2487) + _2100;
        _2226 = ((_2476 * 0.039999999105930328369140625) * _2487) + _2101;
    }
    else
    {
        _2216 = _1946;
        _2218 = _1947;
        _2220 = _1948;
        _2222 = _2099;
        _2224 = _2100;
        _2226 = _2101;
    }
    uint _2232 = _824 + uint(cbMatDynParam._m0[0u].w);
    float _2238 = ((_725 * (_713 - (_713 * _686))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2232].x;
    float _2239 = ((_725 * (_714 - (_714 * _686))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2232].y;
    float _2240 = ((_725 * (_715 - (_715 * _686))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2232].z;
    float _4076 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4087 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4098 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2257 = (((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2216 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _848))) + ((_2222 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1658)) * cbPerFrame._m0[3u].x)) + _2238;
    float _2259 = (_2239 + ((_2224 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1658)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2218 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _848)));
    float _2261 = (_2240 + ((_2226 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1658)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2220 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _848)));
    float _4124 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2274 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    uint _2275 = _823 + 6u;
    float _2283 = _784 / cbSceneParam._m0[86u].x;
    float _2284 = _785 / cbSceneParam._m0[86u].y;
    vec4 _2298 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, (log2((isnan(cbSceneParam._m0[77u].w) ? _771 : (isnan(_771) ? cbSceneParam._m0[77u].w : min(_771, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2300 = _2298.x;
    float _2301 = _2298.y;
    float _2302 = _2298.z;
    float _2303 = _2298.w;
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    if (_771 > cbSceneParam._m0[78u].w)
    {
        float _2345 = isnan(_771) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _771 : min(cbSceneParam._m0[80u].w, _771));
        float _2346 = _2345 / _771;
        float _2357 = _2346 * _276;
        float _2358 = _277 * _2346;
        float _2359 = (-0.0) - _2358;
        float _2360 = _2346 * _278;
        float _2362 = (cbSceneParam._m0[77u].w * _2359) / _2345;
        float _2363 = _2362 + cbSceneParam._m0[79u].w;
        float _2364 = cbSceneParam._m0[79u].w - _2358;
        float _2370 = sqrt(((_2357 * _2357) + (_2358 * _2358)) + (_2360 * _2360));
        float _2373 = (1.0 - (cbSceneParam._m0[77u].w / _2345)) * _2370;
        float _2379 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2381 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2598;
        if (abs((_2359 - _2362) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2598 = ((((_2363 > 0.0) ? exp2(_2379 * _2363) : (2.0 - exp2(_2381 * _2363))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2373;
        }
        else
        {
            float _2533 = 1.0 / cbSceneParam._m0[80u].x;
            float _2534 = isnan(_2364) ? _2363 : (isnan(_2363) ? _2364 : max(_2363, _2364));
            float _2535 = isnan(_2364) ? _2363 : (isnan(_2363) ? _2364 : min(_2363, _2364));
            float _2544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : min(_2534, 0.0));
            float _2545 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : min(_2535, 0.0));
            _2598 = ((abs(_2370 / _2359) * cbSceneParam._m0[80u].y) * ((((_2544 - _2545) * 2.0) - ((exp2(_2379 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0)))) - exp2(_2379 * (isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0))))) * _2533)) - ((exp2(_2381 * _2544) - exp2(_2381 * _2545)) * _2533))) + (_2373 * cbSceneParam._m0[80u].z);
        }
        vec4 _2600 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, 1.0), 0.0);
        float _2609 = exp2((_2598 * (-1.44269502162933349609375)) * (1.0 - _2600.w));
        float _2610 = log2(_2609);
        float _2626 = log2(_2303);
        _2383 = (exp2(_2626 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].x)) * _2600.x) / cbSceneParam._m0[78u].x)) + _2300;
        _2385 = (exp2(_2626 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].y)) * _2600.y) / cbSceneParam._m0[78u].y)) + _2301;
        _2387 = (exp2(_2626 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].z)) * _2600.z) / cbSceneParam._m0[78u].z)) + _2302;
        _2389 = _2609 * _2303;
    }
    else
    {
        _2383 = _2300;
        _2385 = _2301;
        _2387 = _2302;
        _2389 = _2303;
    }
    float _2400 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2401 = _2400 == 3.0;
    float _2402 = log2(_2389);
    float _2406 = exp2(_2402 * cbSceneParam._m0[78u].x);
    float _2407 = exp2(_2402 * cbSceneParam._m0[78u].y);
    float _2408 = exp2(_2402 * cbSceneParam._m0[78u].z);
    float _2409 = _2406 * (isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0)));
    float _2410 = _2407 * (isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0)));
    float _2411 = _2408 * (isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0)));
    float _2420 = (_2400 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2420 * (_2401 ? _2409 : (_2409 + (cbSceneParam._m0[72u].w * _2383)));
    SV_Target.y = _2420 * (_2401 ? _2410 : (_2410 + (cbSceneParam._m0[72u].w * _2385)));
    SV_Target.z = _2420 * (_2401 ? _2411 : (_2411 + (cbSceneParam._m0[72u].w * _2387)));
    SV_Target.w = cbInstanceData._m0[_2275].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2238) * _2274) * _2406) * _2420;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2239) * _2274) * _2407) * _2420;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2240) * _2274) * _2408) * _2420;
    SV_Target_1.w = cbInstanceData._m0[_2275].w;
}


