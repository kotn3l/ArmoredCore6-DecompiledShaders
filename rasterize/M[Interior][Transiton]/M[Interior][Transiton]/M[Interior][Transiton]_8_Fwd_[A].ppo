#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _392;
uint _2127;
uint _2128;
uint _2129;
uint _2372;
uint _2373;
uint _2374;
float _2613;
float _2614;
float _2615;
float _2616;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _204 = _203 * _195;
    float _205 = _203 * _196;
    float _206 = _203 * _197;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _301 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _324 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _336 = cbMtdParam._m0[28u].z + _271;
    float _337 = cbMtdParam._m0[28u].w + _272;
    float _338 = cbMtdParam._m0[29u].x + _273;
    float _355 = (-0.0) - dot(vec3(_336, _337, _338), vec3(_317 * _204, _317 * _205, _317 * _206));
    float _356 = (-0.0) - dot(vec3(_336, _337, _338), vec3(_324 * _215, _324 * _216, _324 * _217));
    float _357 = (-0.0) - dot(vec3(_336, _337, _338), vec3((-0.0) - (NORMAL.x * _210), (-0.0) - (NORMAL.y * _210), (-0.0) - (NORMAL.z * _210)));
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _362 = _361 * _357;
    float _367 = ((cbMtdParam._m0[25u].y * _355) * _361) + (((_301.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _368 = ((cbMtdParam._m0[25u].z * _356) * _361) + (((_301.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _371 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _372 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _390;
    float _393;
    float _395;
    if (_367 > 0.0)
    {
        float _376 = (1.0 - _371) / _367;
        _390 = _376;
        _393 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_376 * _362)) * 0.16666667163372039794921875;
        _395 = (fract((_376 * _368) + _372) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_367 < 0.0)
        {
            float _391 = ((-0.0) - _371) / _367;
            frontier_phi_3_2_ladder = _391;
            frontier_phi_3_2_ladder_1 = (fract((_391 * _368) + _372) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_391 * _362) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _392;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _390 = frontier_phi_3_2_ladder;
        _393 = frontier_phi_3_2_ladder_2;
        _395 = frontier_phi_3_2_ladder_1;
    }
    float _421;
    float _423;
    float _425;
    if (_368 > 0.0)
    {
        float _408 = (1.0 - _372) / _368;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_408 < _390)
        {
            frontier_phi_8_5_ladder = (fract(_408 * _362) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_408 * _367) + _371) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _408;
        }
        else
        {
            frontier_phi_8_5_ladder = _395;
            frontier_phi_8_5_ladder_1 = _393;
            frontier_phi_8_5_ladder_2 = _390;
        }
        _421 = frontier_phi_8_5_ladder_2;
        _423 = frontier_phi_8_5_ladder_1;
        _425 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_368 < 0.0)
        {
            float _422 = ((-0.0) - _372) / _368;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_422 < _390)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_422 * _362) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_422 * _367) + _371) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _422;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _395;
                frontier_phi_8_6_ladder_9_ladder_1 = _393;
                frontier_phi_8_6_ladder_9_ladder_2 = _390;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _395;
            frontier_phi_8_6_ladder_1 = _393;
            frontier_phi_8_6_ladder_2 = _390;
        }
        _421 = frontier_phi_8_6_ladder_2;
        _423 = frontier_phi_8_6_ladder_1;
        _425 = frontier_phi_8_6_ladder;
    }
    float _429 = (_362 > 0.0) ? (cbMtdParam._m0[20u].z / _362) : 5000.0;
    float _442;
    float _443;
    if (_429 < _421)
    {
        _442 = ((_371 + cbMtdParam._m0[22u].x) + (_429 * _367)) * 0.16666667163372039794921875;
        _443 = (((_429 * _368) + _372) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _442 = _423;
        _443 = _425;
    }
    vec4 _445 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_442, _443));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    float _461 = (cbMtdParam._m0[19u].y * _447) * cbMtdParam._m0[16u].x;
    float _463 = (cbMtdParam._m0[19u].y * _448) * cbMtdParam._m0[16u].y;
    float _465 = (cbMtdParam._m0[19u].y * _449) * cbMtdParam._m0[16u].z;
    vec4 _492 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _497 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _503 = ((_492.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _505 = (-0.0) - (cbMtdParam._m0[21u].x * ((_492.x * 0.5) + (-0.25)));
    float _506 = fract(_497);
    float _508 = fract(_497 + 0.5);
    vec4 _535 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_506 * _505) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_503 * _506) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _537 = _535.x;
    float _543 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_508 * _505) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_503 * _508) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _537) * abs((_506 * 2.0) + (-1.0))) + _537;
    float _554 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _558 = fract(abs(_554));
    float _565 = sin(cbMtdParam._m0[21u].z);
    float _566 = cos(cbMtdParam._m0[21u].z);
    float _567 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _568 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _593 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_568, (-0.0) - _565, _566 * _567) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_568, _566, _567 * _565) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_554 >= ((-0.0) - _554)) ? _558 : ((-0.0) - _558)) * cbMtdParam._m0[18u].z) - _543)) + cbMtdParam._m0[18u].w;
    float _594 = ceil(_593);
    float _2625 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _2625 : (isnan(_2625) ? 1.0 : min(_2625, 1.0));
    float _615 = ((((cbMtdParam._m0[21u].w * _447) * cbMtdParam._m0[15u].x) - _461) * _595) + _461;
    float _616 = ((((cbMtdParam._m0[21u].w * _448) * cbMtdParam._m0[15u].y) - _463) * _595) + _463;
    float _617 = ((((cbMtdParam._m0[21u].w * _449) * cbMtdParam._m0[15u].z) - _465) * _595) + _465;
    float _621 = abs(cbMtdParam._m0[20u].w * _593);
    float _625 = (((_621 * cbMtdParam._m0[18u].y) - _543) * _621) + _543;
    float _2636 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _2636 : (isnan(_2636) ? 1.0 : min(_2636, 1.0));
    vec4 _638 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _653 = (cbMtdParam._m0[14u].x * _638.x) * cbMtdParam._m0[19u].x;
    float _654 = (cbMtdParam._m0[14u].y * _638.y) * cbMtdParam._m0[19u].x;
    float _655 = (cbMtdParam._m0[14u].z * _638.z) * cbMtdParam._m0[19u].x;
    float _662 = exp2(log2(_626) * cbMtdParam._m0[20u].x);
    float _697 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _701 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _702 = _271 * _701;
    float _703 = _272 * _701;
    float _704 = _273 * _701;
    vec4 _709 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _711 = _709.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _786 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _792 = (cbMatDynParam._m0[5u].x * _786) + cbMatDynParam._m0[5u].y;
        float _2647 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _2647 : (isnan(_2647) ? 1.0 : min(_2647, 1.0));
        float _797 = (cbMatDynParam._m0[5u].z * _786) + cbMatDynParam._m0[5u].w;
        float _2658 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2658 : (isnan(_2658) ? 1.0 : min(_2658, 1.0))) - _793)) + _793) < ((_711 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _729 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _730 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _739 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_729 * cbSceneParam._m0[86u].x, _730 * cbSceneParam._m0[86u].y));
    float _742 = _739.x * TEXCOORD_4;
    float _743 = (-0.0) - _702;
    float _744 = (-0.0) - _703;
    float _745 = (-0.0) - _704;
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _860 = (cbModelParam._m0[37u].x * ((((fma(_775, cbModelParam._m0[26u].z, fma(_771, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _767)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _862 = (cbModelParam._m0[37u].y * ((((fma(_775, cbModelParam._m0[27u].z, fma(_771, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _767)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _863 = (((((fma(_775, cbModelParam._m0[28u].z, fma(_771, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _767)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_860, _862, _863), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_860, _862, _863), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_860, _862, _863), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_860, _862, _863), 0.0);
        float _900 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _910 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _920 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _930 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_887.x + (-0.5));
        float _932 = _930 * (_887.y + (-0.5));
        float _933 = _930 * (_887.z + (-0.5));
        _937 = _900 * (_866.z + (-0.5));
        _938 = _900 * (_866.y + (-0.5));
        _939 = _900 * (_866.x + (-0.5));
        _940 = _910 * (_873.z + (-0.5));
        _941 = _910 * (_873.y + (-0.5));
        _942 = _910 * (_873.x + (-0.5));
        _943 = _920 * (_880.z + (-0.5));
        _944 = _920 * (_880.y + (-0.5));
        _945 = _920 * (_880.x + (-0.5));
        _946 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        _947 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        _948 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    }
    else
    {
        _937 = _392;
        _938 = _392;
        _939 = _392;
        _940 = _392;
        _941 = _392;
        _942 = _392;
        _943 = _392;
        _944 = _392;
        _945 = _392;
        _946 = _392;
        _947 = _392;
        _948 = _392;
    }
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1004 = (cbModelParam._m0[38u].x * ((((fma(_775, cbModelParam._m0[30u].z, fma(_771, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _767)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1005 = (cbModelParam._m0[38u].y * ((((fma(_775, cbModelParam._m0[31u].z, fma(_771, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _767)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1006 = (((((fma(_775, cbModelParam._m0[32u].z, fma(_771, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _767)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        float _1041 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1029.x + (-0.5));
        float _1073 = _1071 * (_1029.y + (-0.5));
        float _1074 = _1071 * (_1029.z + (-0.5));
        _1078 = _1041 * (_1008.z + (-0.5));
        _1079 = _1041 * (_1008.y + (-0.5));
        _1080 = _1041 * (_1008.x + (-0.5));
        _1081 = _1051 * (_1015.z + (-0.5));
        _1082 = _1051 * (_1015.y + (-0.5));
        _1083 = _1051 * (_1015.x + (-0.5));
        _1084 = _1061 * (_1022.z + (-0.5));
        _1085 = _1061 * (_1022.y + (-0.5));
        _1086 = _1061 * (_1022.x + (-0.5));
        _1087 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        _1088 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        _1089 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    }
    else
    {
        _1078 = _392;
        _1079 = _392;
        _1080 = _392;
        _1081 = _392;
        _1082 = _392;
        _1083 = _392;
        _1084 = _392;
        _1085 = _392;
        _1086 = _392;
        _1087 = _392;
        _1088 = _392;
        _1089 = _392;
    }
    float _1104 = _702 * (-0.5);
    float _1105 = _703 * (-0.5);
    float _1106 = _704 * (-0.5);
    float _1107 = dot(vec4(_1104, _1105, _1106, 1.0), vec4(_1080, _1083, _1086, _1089));
    float _1110 = dot(vec4(_1104, _1105, _1106, 1.0), vec4(_1079, _1082, _1085, _1088));
    float _1113 = dot(vec4(_1104, _1105, _1106, 1.0), vec4(_1078, _1081, _1084, _1087));
    float _1148;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1120 = dot(vec4(_1104, _1105, _1106, 1.0), vec4(_937, _940, _943, _946));
        float _1124 = dot(vec4(_1104, _1105, _1106, 1.0), vec4(_938, _941, _944, _947));
        float _1128 = dot(vec4(_1104, _1105, _1106, 1.0), vec4(_939, _942, _945, _948));
        float _1135 = dot(vec4(cbModelParam._m0[39u]), vec4(_1104, _1105, _1106, 1.0));
        _1148 = dot(vec3(isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)), isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)), isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1135) ? 0.0 : (isnan(0.0) ? _1135 : max(0.0, _1135))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1148 = 1.0;
    }
    float _1159;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1150 = dot(vec4(cbModelParam._m0[40u]), vec4(_1104, _1105, _1106, 1.0));
        _1159 = dot(vec3(isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)), isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)), isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1150) ? 0.0 : (isnan(0.0) ? _1150 : max(0.0, _1150))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1159 = 1.0;
    }
    float _1163 = (_1159 * cbModelParam._m0[1u].x) + (_1148 * (1.0 - cbModelParam._m0[1u].x));
    float _1169 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1251;
    float _1253;
    float _1255;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1218 = fma(_775, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _767)) + cbModelParam._m0[13u].w;
        float _1222 = fma(_775, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _767)) + cbModelParam._m0[14u].w;
        float _1226 = fma(_775, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _767)) + cbModelParam._m0[15u].w;
        float _1229 = fma(_745, cbModelParam._m0[13u].z, fma(_744, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743));
        float _1232 = fma(_745, cbModelParam._m0[14u].z, fma(_744, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743));
        float _1235 = fma(_745, cbModelParam._m0[15u].z, fma(_744, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743));
        float _1261;
        if (_1229 > 0.0)
        {
            _1261 = abs((1.0 - _1218) / _1229);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1229 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1218 + 1.0) / _1229);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1261 = frontier_phi_29_27_ladder;
        }
        float _1537;
        if (_1232 > 0.0)
        {
            _1537 = abs((1.0 - _1222) / _1232);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1232 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1222 + 1.0) / _1232);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1537 = frontier_phi_38_34_ladder;
        }
        float _1859;
        if (_1235 > 0.0)
        {
            _1859 = abs((1.0 - _1226) / _1235);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1235 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1226 + 1.0) / _1235);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _1859 = frontier_phi_52_45_ladder;
        }
        float _1861 = isnan(_1537) ? _1261 : (isnan(_1261) ? _1537 : min(_1261, _1537));
        float _1862 = isnan(_1859) ? _1861 : (isnan(_1861) ? _1859 : min(_1861, _1859));
        float _1866 = (_1862 * _1229) + _1218;
        float _1867 = (_1862 * _1232) + _1222;
        float _1868 = (_1862 * _1235) + _1226;
        float _1869 = _1862 * 9.9999997473787516355514526367188e-05;
        float _1870 = (-1.0) - _1869;
        float _1872 = _1869 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_1868 > _1872) || ((_1868 < _1870) || ((_1867 > _1872) || ((_1867 < _1870) || ((_1866 < _1870) || (_1866 > _1872))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1995 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1868, cbModelParam._m0[9u].z, fma(_1867, cbModelParam._m0[9u].y, _1866 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1868, cbModelParam._m0[10u].z, fma(_1867, cbModelParam._m0[10u].y, _1866 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1868, cbModelParam._m0[11u].z, fma(_1867, cbModelParam._m0[11u].y, _1866 * cbModelParam._m0[11u].x))), _1169);
            frontier_phi_28_52_ladder = _1995.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _1995.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _1995.x * cbModelParam._m0[1u].y;
        }
        _1251 = frontier_phi_28_52_ladder_2;
        _1253 = frontier_phi_28_52_ladder_1;
        _1255 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1239 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_743, _744, _745), _1169);
        _1251 = _1239.x * cbModelParam._m0[1u].y;
        _1253 = _1239.y * cbModelParam._m0[1u].y;
        _1255 = _1239.z * cbModelParam._m0[1u].y;
    }
    float _1258 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1346;
    float _1348;
    float _1350;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1310 = fma(_775, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _767)) + cbModelParam._m0[21u].w;
        float _1314 = fma(_775, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _767)) + cbModelParam._m0[22u].w;
        float _1318 = fma(_775, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _767)) + cbModelParam._m0[23u].w;
        float _1321 = fma(_745, cbModelParam._m0[21u].z, fma(_744, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743));
        float _1324 = fma(_745, cbModelParam._m0[22u].z, fma(_744, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743));
        float _1327 = fma(_745, cbModelParam._m0[23u].z, fma(_744, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743));
        float _1542;
        if (_1321 > 0.0)
        {
            _1542 = abs((1.0 - _1310) / _1321);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1310 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1542 = frontier_phi_40_36_ladder;
        }
        float _1885;
        if (_1324 > 0.0)
        {
            _1885 = abs((1.0 - _1314) / _1324);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1314 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _1885 = frontier_phi_54_47_ladder;
        }
        float _2057;
        if (_1327 > 0.0)
        {
            _2057 = abs((1.0 - _1318) / _1327);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1318 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2057 = frontier_phi_72_65_ladder;
        }
        float _2059 = isnan(_1885) ? _1542 : (isnan(_1542) ? _1885 : min(_1542, _1885));
        float _2060 = isnan(_2057) ? _2059 : (isnan(_2059) ? _2057 : min(_2059, _2057));
        float _2064 = (_2060 * _1321) + _1310;
        float _2065 = (_2060 * _1324) + _1314;
        float _2066 = (_2060 * _1327) + _1318;
        float _2067 = _2060 * 9.9999997473787516355514526367188e-05;
        float _2068 = (-1.0) - _2067;
        float _2070 = _2067 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2066 > _2070) || ((_2066 < _2068) || ((_2065 > _2070) || ((_2065 < _2068) || ((_2064 < _2068) || (_2064 > _2070))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2235 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2066, cbModelParam._m0[17u].z, fma(_2065, cbModelParam._m0[17u].y, _2064 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2066, cbModelParam._m0[18u].z, fma(_2065, cbModelParam._m0[18u].y, _2064 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2066, cbModelParam._m0[19u].z, fma(_2065, cbModelParam._m0[19u].y, _2064 * cbModelParam._m0[19u].x))), _1258);
            frontier_phi_37_72_ladder = _2235.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2235.x * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2235.y * cbModelParam._m0[1u].z;
        }
        _1346 = frontier_phi_37_72_ladder_1;
        _1348 = frontier_phi_37_72_ladder_2;
        _1350 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1330 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_743, _744, _745), _1258);
        _1346 = _1330.x * cbModelParam._m0[1u].z;
        _1348 = _1330.y * cbModelParam._m0[1u].z;
        _1350 = _1330.z * cbModelParam._m0[1u].z;
    }
    float _1362 = _742 * 0.01200000010430812835693359375;
    float _1364 = _1362 * ((cbModelParam._m0[1u].w * (_1346 - _1251)) + _1251);
    float _1365 = _1362 * ((cbModelParam._m0[1u].w * (_1348 - _1253)) + _1253);
    float _1366 = _1362 * ((cbModelParam._m0[1u].w * (_1350 - _1255)) + _1255);
    float _1387 = fma(_1366, cbSceneParam._m0[89u].z, fma(_1365, cbSceneParam._m0[89u].y, _1364 * cbSceneParam._m0[89u].x));
    float _1390 = fma(_1366, cbSceneParam._m0[90u].z, fma(_1365, cbSceneParam._m0[90u].y, _1364 * cbSceneParam._m0[90u].x));
    float _1393 = fma(_1366, cbSceneParam._m0[91u].z, fma(_1365, cbSceneParam._m0[91u].y, _1364 * cbSceneParam._m0[91u].x));
    uint _1400 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1404 = floatBitsToUint(cbInstanceData._m0[_1400 + 5u]);
    uint _1406 = _1404.x * 14u;
    uint _1407 = _1406 + 13u;
    float _1412 = _742 + (-1.0);
    float _1415 = (cbLight._m0[_1407].x * _1412) + 1.0;
    float _1416 = (cbLight._m0[_1407].y * _1412) + 1.0;
    uint _1417 = _1406 + 8u;
    float _1428 = cbLight._m0[_1406].x + _702;
    float _1429 = cbLight._m0[_1406].y + _703;
    float _1430 = cbLight._m0[_1406].z + _704;
    float _1434 = inversesqrt(dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430)));
    float _1438 = dot(vec3(0.0), vec3(cbLight._m0[_1406].xyz));
    float _2784 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
    float _1441 = isnan(1.0) ? _2784 : (isnan(_2784) ? 1.0 : min(_2784, 1.0));
    float _1442 = dot(vec3(0.0), vec3(_702, _703, _704));
    float _2795 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
    float _1445 = isnan(1.0) ? _2795 : (isnan(_2795) ? 1.0 : min(_2795, 1.0));
    float _1446 = dot(vec3(cbLight._m0[_1406].xyz), vec3(_1428 * _1434, _1429 * _1434, _1430 * _1434));
    float _2806 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
    float _1457 = (exp2(log2(1.0 - (isnan(1.0) ? _2806 : (isnan(_2806) ? 1.0 : min(_2806, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1463 = (0.5 / ((_1441 + 9.9999999392252902907785028219223e-09) + _1445)) * _1441;
    float _2817 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
    float _1465 = (isnan(1.0) ? _2817 : (isnan(_2817) ? 1.0 : min(_2817, 1.0))) * 0.31831014156341552734375;
    float _1467 = isnan(1.0) ? _1415 : (isnan(_1415) ? 1.0 : min(_1415, 1.0));
    uint _1477 = _1406 + 9u;
    uint _1483 = _1406 | 1u;
    float _1489 = cbLight._m0[_1483].x + _702;
    float _1490 = cbLight._m0[_1483].y + _703;
    float _1491 = cbLight._m0[_1483].z + _704;
    float _1495 = inversesqrt(dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491)));
    float _1499 = dot(vec3(0.0), vec3(cbLight._m0[_1483].xyz));
    float _2833 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
    float _1502 = isnan(1.0) ? _2833 : (isnan(_2833) ? 1.0 : min(_2833, 1.0));
    float _1503 = dot(vec3(cbLight._m0[_1483].xyz), vec3(_1489 * _1495, _1490 * _1495, _1491 * _1495));
    float _2844 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
    float _1512 = (exp2(log2(1.0 - (isnan(1.0) ? _2844 : (isnan(_2844) ? 1.0 : min(_2844, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1516 = (0.5 / ((_1502 + 9.9999999392252902907785028219223e-09) + _1445)) * _1502;
    float _2855 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
    float _1518 = (isnan(1.0) ? _2855 : (isnan(_2855) ? 1.0 : min(_2855, 1.0))) * 0.31831014156341552734375;
    float _1519 = isnan(1.0) ? _1416 : (isnan(_1416) ? 1.0 : min(_1416, 1.0));
    float _1529 = (((_1512 * cbLight._m0[_1477].x) * _1518) * _1519) + (((_1457 * cbLight._m0[_1417].x) * _1465) * _1467);
    float _1530 = (((_1512 * cbLight._m0[_1477].y) * _1518) * _1519) + (((_1457 * cbLight._m0[_1417].y) * _1465) * _1467);
    float _1531 = (((_1512 * cbLight._m0[_1477].z) * _1518) * _1519) + (((_1457 * cbLight._m0[_1417].z) * _1465) * _1467);
    float _1647;
    float _1649;
    float _1651;
    if (_1404.y == 0u)
    {
        float _1587 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1588 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1587;
        float _1589 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1587;
        float _1590 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1587;
        uvec4 _1602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1603 = _1602.x;
        uint _1614 = uint((float(_1602.y) * floor(float(uint(cbSceneParam._m0[85u].y * _730) / _1603))) + floor(float(uint(cbSceneParam._m0[85u].x * _729) / _1603)));
        float _1624 = (log2(_1590 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1625 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        uint _1628 = uint(isnan(14.0) ? _1625 : (isnan(_1625) ? 14.0 : min(_1625, 14.0)));
        uvec4 _1633 = texelFetch(g_lightClusterGridBuffer, int(((_1628 << 2u) + (_1614 << 6u)) >> 2u));
        uint _1634 = _1633.x;
        uint _1635 = _1602.z;
        float _1734;
        float _1736;
        float _1738;
        if (((((1u << ((_1635 >> 4u) & 15u)) + 4294967295u) & _1634) == 0u) || ((_1635 & 240u) == 0u))
        {
            _1734 = 0.0;
            _1736 = 0.0;
            _1738 = 0.0;
        }
        else
        {
            float _1735;
            float _1737;
            float _1739;
            float _1910 = 0.0;
            float _1911 = 0.0;
            float _1912 = 0.0;
            uint _1913 = 0u;
            uint _1922;
            bool _1923;
            for (;;)
            {
                _1922 = texelFetch(g_lightClassification, int((((_1628 << 5u) + (_1614 << 9u)) + (_1913 << 2u)) >> 2u)).x;
                _1923 = _1922 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                if (_1923)
                {
                    frontier_phi_67_pred = _1912;
                    frontier_phi_67_pred_1 = _1911;
                    frontier_phi_67_pred_2 = _1910;
                }
                else
                {
                    float _2097;
                    float _2098;
                    float _2099;
                    uint _2100;
                    _2097 = _1910;
                    _2098 = _1911;
                    _2099 = _1912;
                    _2100 = _1922;
                    float _2004;
                    float _2005;
                    float _2006;
                    for (;;)
                    {
                        uint _2104 = uint(findLSB(_2100)) + (_1913 << 5u);
                        uint _2101 = (_2100 + 4294967295u) & _2100;
                        uint _2106 = _2104 * 48u;
                        vec4 _2120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2106)).x, texelFetch(g_PointLightRenderingBuffer, int(_2106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2106 + 3u)).x));
                        uint _2137 = (_2104 * 48u) + 8u;
                        vec3 _2148 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2137)).x, texelFetch(g_PointLightRenderingBuffer, int(_2137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2137 + 2u)).x));
                        float _2152 = _2120.x - _1588;
                        float _2153 = _2120.y - _1589;
                        float _2154 = _2120.z - _1590;
                        float _2155 = dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154));
                        float _2158 = inversesqrt(_2155);
                        float _2167 = 1.0 - (_2155 * _2120.w);
                        float _2881 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
                        float _2169 = sqrt(_2155) * uintBitsToFloat(uvec4(_2127, _2128, _2129, texelFetch(g_PointLightRenderingBuffer, int(((_2104 * 48u) + 4u) + 3u)).x)).w;
                        float _2172 = 1.39999997615814208984375 / (_2169 + 1.39999997615814208984375);
                        float _2173 = _2172 * _2172;
                        float _2176 = ((1.0 - _2173) * dot(vec3(0.0), vec3(_2158 * _2152, _2158 * _2153, _2158 * _2154))) + _2173;
                        float _2178 = (-0.0) - _1588;
                        float _2179 = (-0.0) - _1589;
                        float _2180 = (-0.0) - _1590;
                        float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
                        float _2188 = dot(vec3(0.0), vec3(_2184 * _2178, _2184 * _2179, _2184 * _2180));
                        float _2892 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
                        float _2903 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
                        float _2192 = isnan(1.0) ? _2903 : (isnan(_2903) ? 1.0 : min(_2903, 1.0));
                        float _2196 = (0.5 / (((isnan(1.0) ? _2892 : (isnan(_2892) ? 1.0 : min(_2892, 1.0))) + 9.9999999392252902907785028219223e-09) + _2192)) * _2192;
                        float _2914 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
                        float _2205 = (((isnan(1.0) ? _2914 : (isnan(_2914) ? 1.0 : min(_2914, 1.0))) * 3.1415927410125732421875) / (((_2169 * _2169) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2881 : (isnan(_2881) ? 1.0 : min(_2881, 1.0)));
                        _2004 = (_2205 * _2148.x) + _2097;
                        _2005 = (_2205 * _2148.y) + _2098;
                        _2006 = (_2205 * _2148.z) + _2099;
                        if (_2101 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2097 = _2004;
                            _2098 = _2005;
                            _2099 = _2006;
                            _2100 = _2101;
                        }
                    }
                    frontier_phi_67_pred = _2006;
                    frontier_phi_67_pred_1 = _2005;
                    frontier_phi_67_pred_2 = _2004;
                }
                _1739 = frontier_phi_67_pred;
                _1737 = frontier_phi_67_pred_1;
                _1735 = frontier_phi_67_pred_2;
                uint _1914 = _1913 + 1u;
                if (_1914 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1910 = _1735;
                    _1911 = _1737;
                    _1912 = _1739;
                    _1913 = _1914;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1734 = _1735;
            _1736 = _1737;
            _1738 = _1739;
        }
        uvec4 _1742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1743 = _1742.z;
        uint _1745 = (_1743 >> 8u) & 15u;
        float _1890;
        float _1892;
        float _1894;
        if (((4294967295u << _1745) & _1634) == 0u)
        {
            _1890 = _1734;
            _1892 = _1736;
            _1894 = _1738;
        }
        else
        {
            float _1906 = inversesqrt(dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            if (_1745 < ((_1743 >> 12u) & 15u))
            {
                float _1891;
                float _1893;
                float _1895;
                float _2083 = _1734;
                float _2084 = _1736;
                float _2085 = _1738;
                uint _2086 = _1745;
                uint _2095;
                bool _2096;
                for (;;)
                {
                    _2095 = texelFetch(g_lightClassification, int((((_1628 << 5u) + (_1614 << 9u)) + (_2086 << 2u)) >> 2u)).x;
                    _2096 = _2095 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    if (_2096)
                    {
                        frontier_phi_81_pred = _2083;
                        frontier_phi_81_pred_1 = _2085;
                        frontier_phi_81_pred_2 = _2084;
                    }
                    else
                    {
                        float _2240;
                        float _2241;
                        float _2242;
                        float _2461;
                        float _2462;
                        float _2463;
                        float _2250 = _2083;
                        float _2251 = _2084;
                        float _2252 = _2085;
                        uint _2253 = _2095;
                        uint _2254;
                        uint _2264;
                        vec4 _2279;
                        float _2280;
                        vec3 _2292;
                        vec4 _2307;
                        vec4 _2322;
                        float _2368;
                        bool _2369;
                        for (;;)
                        {
                            _2264 = ((_2086 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2253));
                            _2254 = (_2253 + 4294967295u) & _2253;
                            uint _2266 = _2264 * 40u;
                            _2279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2266 + 3u)).x));
                            _2280 = _2279.w;
                            uint _2282 = (_2264 * 40u) + 8u;
                            _2292 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2282 + 2u)).x));
                            uint _2294 = (_2264 * 40u) + 16u;
                            _2307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2294 + 3u)).x));
                            uint _2309 = (_2264 * 40u) + 20u;
                            _2322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2309 + 3u)).x));
                            uint _2324 = (_2264 * 40u) + 24u;
                            vec4 _2337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2324 + 3u)).x));
                            uint _2343 = (_2264 * 40u) + 28u;
                            vec4 _2356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2343 + 3u)).x));
                            _2368 = fma(_1590, _2356.z, fma(_1589, _2356.y, _2356.x * _1588)) + _2356.w;
                            _2369 = !((fma(_1590, _2337.z, fma(_1589, _2337.y, _2337.x * _1588)) + _2337.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            if (_2369)
                            {
                                float _2403 = _2279.x - _1588;
                                float _2404 = _2279.y - _1589;
                                float _2405 = _2279.z - _1590;
                                float _2406 = dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405));
                                float _2409 = inversesqrt(_2406);
                                float _2416 = 1.0 - (_2406 / (_2280 * _2280));
                                float _2925 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
                                float _2418 = sqrt(_2406) * uintBitsToFloat(uvec4(_2372, _2373, _2374, texelFetch(g_SpotLightRenderingBuffer, int(((_2264 * 40u) + 4u) + 3u)).x)).w;
                                float _2420 = 1.39999997615814208984375 / (_2418 + 1.39999997615814208984375);
                                float _2421 = _2420 * _2420;
                                float _2424 = (fma(_1590, _2307.z, fma(_1589, _2307.y, _2307.x * _1588)) + _2307.w) / _2368;
                                float _2425 = (fma(_1590, _2322.z, fma(_1589, _2322.y, _2322.x * _1588)) + _2322.w) / _2368;
                                float _2429 = 1.0 - dot(vec2(_2424, _2425), vec2(_2424, _2425));
                                float _2936 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
                                float _2437 = dot(vec3(0.0), vec3((-0.0) - (_1588 * _1906), (-0.0) - (_1589 * _1906), (-0.0) - (_1590 * _1906)));
                                float _2947 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
                                float _2445 = ((1.0 - _2421) * dot(vec3(0.0), vec3(_2409 * _2403, _2409 * _2404, _2409 * _2405))) + _2421;
                                float _2958 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
                                float _2446 = isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0));
                                float _2450 = (0.5 / (((isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0))) + 9.9999999392252902907785028219223e-09) + _2446)) * _2446;
                                float _2969 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
                                float _2457 = ((isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0))) * (isnan(1.0) ? _2925 : (isnan(_2925) ? 1.0 : min(_2925, 1.0)))) * (((isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0))) * 3.1415927410125732421875) / (((_2418 * _2418) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2457 * _2292.x;
                                frontier_phi_87_pred_1 = _2457 * _2292.y;
                                frontier_phi_87_pred_2 = _2457 * _2292.z;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                            }
                            _2461 = frontier_phi_87_pred;
                            _2462 = frontier_phi_87_pred_1;
                            _2463 = frontier_phi_87_pred_2;
                            _2240 = _2461 + _2250;
                            _2241 = _2462 + _2251;
                            _2242 = _2463 + _2252;
                            if (_2254 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2250 = _2240;
                                _2251 = _2241;
                                _2252 = _2242;
                                _2253 = _2254;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2240;
                        frontier_phi_81_pred_1 = _2242;
                        frontier_phi_81_pred_2 = _2241;
                    }
                    _1891 = frontier_phi_81_pred;
                    _1895 = frontier_phi_81_pred_1;
                    _1893 = frontier_phi_81_pred_2;
                    uint _2087 = _2086 + 1u;
                    if (_2087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2083 = _1891;
                        _2084 = _1893;
                        _2085 = _1895;
                        _2086 = _2087;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _1895;
                frontier_phi_56_57_ladder_1 = _1893;
                frontier_phi_56_57_ladder_2 = _1891;
            }
            else
            {
                frontier_phi_56_57_ladder = _1738;
                frontier_phi_56_57_ladder_1 = _1736;
                frontier_phi_56_57_ladder_2 = _1734;
            }
            _1890 = frontier_phi_56_57_ladder_2;
            _1892 = frontier_phi_56_57_ladder_1;
            _1894 = frontier_phi_56_57_ladder;
        }
        float _1899 = isnan(1.0) ? _742 : (isnan(_742) ? 1.0 : min(_742, 1.0));
        _1647 = ((_1890 * 0.039999999105930328369140625) * _1899) + _1529;
        _1649 = ((_1892 * 0.039999999105930328369140625) * _1899) + _1530;
        _1651 = ((_1894 * 0.039999999105930328369140625) * _1899) + _1531;
    }
    else
    {
        _1647 = _1529;
        _1649 = _1530;
        _1651 = _1531;
    }
    uint _1657 = _1400 + 9u;
    uint _1658 = _1657 + uint(cbMatDynParam._m0[0u].w);
    float _1664 = (cbSceneParam._m0[72u].y * ((_662 * ((_653 - _615) - (_653 * _626))) + _615)) * cbInstanceData._m0[_1658].x;
    float _1665 = (cbSceneParam._m0[72u].y * ((_662 * ((_654 - _616) - (_654 * _626))) + _616)) * cbInstanceData._m0[_1658].y;
    float _1666 = (((_662 * ((_655 - _617) - (_655 * _626))) + _617) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1658].z;
    float _1673 = _1664 + ((_1647 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _1163)) * cbPerFrame._m0[3u].x);
    float _1674 = _1665 + ((_1649 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _1163)) * cbPerFrame._m0[3u].x);
    float _1675 = _1666 + ((_1651 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _1163)) * cbPerFrame._m0[3u].x);
    float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _1684 = cbMtdParam._m0[2u].x * _1664;
    float _1685 = cbMtdParam._m0[2u].y * _1665;
    float _1686 = cbMtdParam._m0[2u].z * _1666;
    float _3000 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1688 = isnan(1.0) ? _3000 : (isnan(_3000) ? 1.0 : min(_3000, 1.0));
    uint _1689 = _1400 + 6u;
    float _1697 = _729 / cbSceneParam._m0[86u].x;
    float _1698 = _730 / cbSceneParam._m0[86u].y;
    vec4 _1712 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1697, _1698, (log2((isnan(cbSceneParam._m0[77u].w) ? _697 : (isnan(_697) ? cbSceneParam._m0[77u].w : min(_697, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1714 = _1712.x;
    float _1715 = _1712.y;
    float _1716 = _1712.z;
    float _1717 = _1712.w;
    float _1791;
    float _1793;
    float _1795;
    float _1797;
    if (_697 > cbSceneParam._m0[78u].w)
    {
        float _1753 = isnan(_697) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _697 : min(cbSceneParam._m0[80u].w, _697));
        float _1754 = _1753 / _697;
        float _1765 = _1754 * _271;
        float _1766 = _272 * _1754;
        float _1767 = (-0.0) - _1766;
        float _1768 = _1754 * _273;
        float _1770 = (cbSceneParam._m0[77u].w * _1767) / _1753;
        float _1771 = _1770 + cbSceneParam._m0[79u].w;
        float _1772 = cbSceneParam._m0[79u].w - _1766;
        float _1778 = sqrt(((_1765 * _1765) + (_1766 * _1766)) + (_1768 * _1768));
        float _1781 = (1.0 - (cbSceneParam._m0[77u].w / _1753)) * _1778;
        float _1787 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1789 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2014;
        if (abs((_1767 - _1770) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2014 = ((((_1771 > 0.0) ? exp2(_1787 * _1771) : (2.0 - exp2(_1789 * _1771))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1781;
        }
        else
        {
            float _1936 = 1.0 / cbSceneParam._m0[80u].x;
            float _1937 = isnan(_1772) ? _1771 : (isnan(_1771) ? _1772 : max(_1771, _1772));
            float _1938 = isnan(_1772) ? _1771 : (isnan(_1771) ? _1772 : min(_1771, _1772));
            float _1947 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : min(_1937, 0.0));
            float _1948 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : min(_1938, 0.0));
            _2014 = ((abs(_1778 / _1767) * cbSceneParam._m0[80u].y) * ((((_1947 - _1948) * 2.0) - ((exp2(_1787 * (isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)))) - exp2(_1787 * (isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))))) * _1936)) - ((exp2(_1789 * _1947) - exp2(_1789 * _1948)) * _1936))) + (_1781 * cbSceneParam._m0[80u].z);
        }
        vec4 _2016 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1697, _1698, 1.0), 0.0);
        float _2025 = exp2((_2014 * (-1.44269502162933349609375)) * (1.0 - _2016.w));
        float _2026 = log2(_2025);
        float _2042 = log2(_1717);
        _1791 = (exp2(_2042 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2026 * cbSceneParam._m0[78u].x)) * _2016.x) / cbSceneParam._m0[78u].x)) + _1714;
        _1793 = (exp2(_2042 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2026 * cbSceneParam._m0[78u].y)) * _2016.y) / cbSceneParam._m0[78u].y)) + _1715;
        _1795 = (exp2(_2042 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2026 * cbSceneParam._m0[78u].z)) * _2016.z) / cbSceneParam._m0[78u].z)) + _1716;
        _1797 = _2025 * _1717;
    }
    else
    {
        _1791 = _1714;
        _1793 = _1715;
        _1795 = _1716;
        _1797 = _1717;
    }
    bool _2052;
    vec4 _1806;
    vec4 _1829;
    float _1831;
    float _1835;
    float _1836;
    float _1837;
    float _1840;
    float _1843;
    float _1846;
    float _1847;
    bool _1858;
    for (;;)
    {
        _1806 = cbMatDynParam._m0[0u];
        float _1808 = roundEven(_1806.y);
        bool _1809 = _1808 == 3.0;
        float _1811 = log2(_1797);
        float _1815 = exp2(_1811 * cbSceneParam._m0[78u].x);
        float _1816 = exp2(_1811 * cbSceneParam._m0[78u].y);
        float _1817 = exp2(_1811 * cbSceneParam._m0[78u].z);
        float _1818 = _1815 * _1676;
        float _1819 = _1816 * _1677;
        float _1820 = _1817 * _1678;
        float _1827 = _711 + (-0.5);
        _1829 = cbMtdParam._m0[1u];
        _1831 = _1829.y * _1827;
        float _1834 = (_1808 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1835 = _1834 * (_1809 ? _1818 : (_1818 + (cbSceneParam._m0[72u].w * _1791)));
        _1836 = _1834 * (_1809 ? _1819 : (_1819 + (cbSceneParam._m0[72u].w * _1793)));
        _1837 = _1834 * (_1809 ? _1820 : (_1820 + (cbSceneParam._m0[72u].w * _1795)));
        _1840 = ((_1684 * _1688) * _1815) * _1834;
        _1843 = ((_1685 * _1688) * _1816) * _1834;
        _1846 = ((_1686 * _1688) * _1817) * _1834;
        _1847 = _1827 * 0.999000012874603271484375;
        _1858 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1858)
        {
            if ((cbInstanceData._m0[_1400 + 7u].x + _1847) < 0.5)
            {
                _2052 = true;
                break;
            }
        }
        uint _1971 = _1657 + uint(_1806.w);
        if ((cbInstanceData._m0[_1971].w < 1.0) && ((cbInstanceData._m0[_1971].w + _1847) < 0.5))
        {
            _2052 = true;
            break;
        }
        if ((_1831 + 1.0) < _1829.x)
        {
            _2052 = true;
            break;
        }
        _2052 = false;
        break;
    }
    float _2210;
    if (_2052)
    {
        discard_state = true;
        _2210 = 0.0;
    }
    else
    {
        _2210 = cbInstanceData._m0[_1689].w;
    }
    SV_Target.x = _1835;
    SV_Target.y = _1836;
    SV_Target.z = _1837;
    SV_Target.w = _2210;
    SV_Target_1.x = _1840;
    SV_Target_1.y = _1843;
    SV_Target_1.z = _1846;
    SV_Target_1.w = cbInstanceData._m0[_1689].w;
    discard_exit();
}


