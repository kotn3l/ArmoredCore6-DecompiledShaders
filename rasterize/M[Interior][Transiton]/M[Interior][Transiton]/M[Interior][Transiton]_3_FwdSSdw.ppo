#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1121;
uint _2298;
uint _2299;
uint _2300;
uint _2534;
uint _2535;
uint _2536;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _301 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _339 = cbMtdParam._m0[27u].w + _280;
    float _340 = cbMtdParam._m0[28u].x + _281;
    float _341 = cbMtdParam._m0[28u].y + _282;
    float _355 = (-0.0) - dot(vec3(_339, _340, _341), vec3(_209 * _201, _209 * _202, _209 * _203));
    float _356 = (-0.0) - dot(vec3(_339, _340, _341), vec3(_223 * TANGENT.x, _223 * TANGENT.y, _223 * TANGENT.z));
    float _357 = (-0.0) - dot(vec3(_339, _340, _341), vec3((-0.0) - (_216 * NORMAL.x), (-0.0) - (_216 * NORMAL.y), (-0.0) - (_216 * NORMAL.z)));
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _364 = _361 * _357;
    float _365 = (_361 * _355) + (((_301.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _366 = (_361 * _356) + (((_301.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _367 = _365 * cbMtdParam._m0[24u].x;
    float _368 = _366 * cbMtdParam._m0[23u].w;
    float _369 = fract(TEXCOORD.x);
    float _370 = fract(TEXCOORD.y);
    float _376;
    if (_367 > 0.0)
    {
        _376 = (1.0 - _369) / _367;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_367 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _369) / _367;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _376 = frontier_phi_3_2_ladder;
    }
    float _384;
    if (_368 > 0.0)
    {
        _384 = (1.0 - _370) / _368;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_368 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _370) / _368;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _384 = frontier_phi_7_6_ladder;
    }
    bool _386 = _364 > 0.0;
    float _388 = _386 ? (cbMtdParam._m0[17u].x / _364) : 5000.0;
    float _389 = isnan(_384) ? _376 : (isnan(_376) ? _384 : min(_376, _384));
    float _390 = isnan(_388) ? _389 : (isnan(_389) ? _388 : min(_389, _388));
    float _394 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _395 = _369 + (-0.5);
    float _398 = _370 + (-0.5);
    float _401 = ((_390 * _364) + _394) / _394;
    vec4 _426 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_395 + (_390 * _367)) / _401) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_398 + (_390 * _368)) / _401) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _436 = cbMtdParam._m0[9u].x * _426.x;
    float _437 = cbMtdParam._m0[9u].y * _426.y;
    float _438 = cbMtdParam._m0[9u].z * _426.z;
    float _456 = _365 * cbMtdParam._m0[26u].z;
    float _457 = _366 * cbMtdParam._m0[26u].y;
    bool _458 = _456 > 0.0;
    float _463;
    if (_458)
    {
        _463 = (1.0 - _369) / _456;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _369) / _456;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _463 = frontier_phi_11_10_ladder;
    }
    bool _465 = _457 > 0.0;
    float _470;
    if (_465)
    {
        _470 = (1.0 - _370) / _457;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_457 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _370) / _457;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _470 = frontier_phi_15_14_ladder;
    }
    float _473 = _386 ? (cbMtdParam._m0[19u].z / _364) : 5000.0;
    float _474 = isnan(_470) ? _463 : (isnan(_463) ? _470 : min(_463, _470));
    float _475 = isnan(_473) ? _474 : (isnan(_474) ? _473 : min(_474, _473));
    float _479 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _483 = ((_475 * _364) + _479) / _479;
    float _488 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _490 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _506 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_395 + (_475 * _456)) / _483) + 0.5) + _488) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_398 + (_475 * _457)) / _483) + 0.5) + _490) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _518;
    if (_458)
    {
        _518 = (1.0 - _369) / _456;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _369) / _456;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _518 = frontier_phi_19_18_ladder;
    }
    float _524;
    if (_465)
    {
        _524 = (1.0 - _370) / _457;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_457 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _370) / _457;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _524 = frontier_phi_23_22_ladder;
    }
    float _526 = isnan(_524) ? _518 : (isnan(_518) ? _524 : min(_518, _524));
    float _527 = isnan(_473) ? _526 : (isnan(_526) ? _473 : min(_526, _473));
    float _534 = ((_527 * _364) + _479) / _479;
    vec4 _554 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_395 + (_527 * _456)) / _534) + 0.5) + _488) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_398 + (_527 * _457)) / _534) + 0.5) + _490) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _556 = _554.x;
    float _563 = (_556 * ((_506.x * cbMtdParam._m0[10u].x) - _436)) + _436;
    float _564 = (_556 * ((_506.y * cbMtdParam._m0[10u].y) - _437)) + _437;
    float _565 = (_556 * ((_506.z * cbMtdParam._m0[10u].z) - _438)) + _438;
    float _579 = _365 * cbMtdParam._m0[27u].x;
    float _580 = _366 * cbMtdParam._m0[26u].w;
    bool _581 = _579 > 0.0;
    float _586;
    if (_581)
    {
        _586 = (1.0 - _369) / _579;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_579 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _369) / _579;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _586 = frontier_phi_27_26_ladder;
    }
    bool _588 = _580 > 0.0;
    float _593;
    if (_588)
    {
        _593 = (1.0 - _370) / _580;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_580 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _370) / _580;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _593 = frontier_phi_31_30_ladder;
    }
    float _596 = _386 ? (cbMtdParam._m0[23u].x / _364) : 5000.0;
    float _597 = isnan(_593) ? _586 : (isnan(_586) ? _593 : min(_586, _593));
    float _598 = isnan(_596) ? _597 : (isnan(_597) ? _596 : min(_597, _596));
    float _602 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _606 = ((_598 * _364) + _602) / _602;
    float _611 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _613 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _629 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_395 + (_598 * _579)) / _606) + 0.5) + _611) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_398 + (_598 * _580)) / _606) + 0.5) + _613) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _641;
    if (_581)
    {
        _641 = (1.0 - _369) / _579;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_579 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _369) / _579;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _641 = frontier_phi_35_34_ladder;
    }
    float _647;
    if (_588)
    {
        _647 = (1.0 - _370) / _580;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_580 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _370) / _580;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _647 = frontier_phi_39_38_ladder;
    }
    float _649 = isnan(_647) ? _641 : (isnan(_641) ? _647 : min(_641, _647));
    float _650 = isnan(_596) ? _649 : (isnan(_649) ? _596 : min(_649, _596));
    float _657 = ((_650 * _364) + _602) / _602;
    vec4 _678 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_395 + (_650 * _579)) / _657) + 0.5) + _611) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_398 + (_650 * _580)) / _657) + 0.5) + _613) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _680 = _678.x;
    float _687 = (_680 * ((_629.x * cbMtdParam._m0[13u].x) - _563)) + _563;
    float _688 = (_680 * ((_629.y * cbMtdParam._m0[13u].y) - _564)) + _564;
    float _689 = (_680 * ((_629.z * cbMtdParam._m0[13u].z) - _565)) + _565;
    float _698 = (cbMtdParam._m0[16u].x * cbMtdParam._m0[19u].y) * _687;
    float _700 = (_688 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].y;
    float _702 = (_689 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].z;
    vec4 _726 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _731 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _737 = ((_726.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _739 = (-0.0) - (cbMtdParam._m0[21u].x * ((_726.x * 0.5) + (-0.25)));
    float _740 = fract(_731);
    float _742 = fract(_731 + 0.5);
    vec4 _769 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_740 * _739) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_737 * _740) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _771 = _769.x;
    float _777 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_742 * _739) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_737 * _742) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _771) * abs((_740 * 2.0) + (-1.0))) + _771;
    float _783 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _787 = fract(abs(_783));
    float _797 = sin(cbMtdParam._m0[21u].z);
    float _798 = cos(cbMtdParam._m0[21u].z);
    float _799 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _800 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _825 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_800, (-0.0) - _797, _798 * _799) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_800, _798, _799 * _797) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_783 >= ((-0.0) - _783)) ? _787 : ((-0.0) - _787)) * cbMtdParam._m0[18u].z) - _777)) + cbMtdParam._m0[18u].w;
    float _826 = ceil(_825);
    float _2844 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _827 = isnan(1.0) ? _2844 : (isnan(_2844) ? 1.0 : min(_2844, 1.0));
    float _847 = ((((cbMtdParam._m0[21u].w * _687) * cbMtdParam._m0[15u].x) - _698) * _827) + _698;
    float _848 = ((((cbMtdParam._m0[21u].w * _688) * cbMtdParam._m0[15u].y) - _700) * _827) + _700;
    float _849 = ((((cbMtdParam._m0[21u].w * _689) * cbMtdParam._m0[15u].z) - _702) * _827) + _702;
    float _853 = abs(cbMtdParam._m0[20u].w * _825);
    float _857 = (((_853 * cbMtdParam._m0[18u].y) - _777) * _853) + _777;
    float _2855 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _858 = isnan(1.0) ? _2855 : (isnan(_2855) ? 1.0 : min(_2855, 1.0));
    vec4 _870 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _885 = (cbMtdParam._m0[14u].x * _870.x) * cbMtdParam._m0[19u].x;
    float _886 = (cbMtdParam._m0[14u].y * _870.y) * cbMtdParam._m0[19u].x;
    float _887 = (cbMtdParam._m0[14u].z * _870.z) * cbMtdParam._m0[19u].x;
    float _894 = exp2(log2(_858) * cbMtdParam._m0[20u].x);
    float _929 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _933 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _934 = _280 * _933;
    float _935 = _281 * _933;
    float _936 = _282 * _933;
    float _942 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _943 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _952 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_942 * cbSceneParam._m0[86u].x, _943 * cbSceneParam._m0[86u].y));
    float _955 = _952.x * TEXCOORD_4;
    float _956 = (-0.0) - _934;
    float _957 = (-0.0) - _935;
    float _958 = (-0.0) - _936;
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1120;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = (cbModelParam._m0[37u].x * ((((fma(_988, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _980)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1045 = (cbModelParam._m0[37u].y * ((((fma(_988, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _980)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1046 = (((((fma(_988, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _980)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1043, _1045, _1046), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1043, _1045, _1046), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1043, _1045, _1046), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1043, _1045, _1046), 0.0);
        float _1083 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1070.x + (-0.5));
        float _1115 = _1113 * (_1070.y + (-0.5));
        float _1116 = _1113 * (_1070.z + (-0.5));
        _1120 = _1083 * (_1049.z + (-0.5));
        _1122 = _1083 * (_1049.y + (-0.5));
        _1123 = _1083 * (_1049.x + (-0.5));
        _1124 = _1093 * (_1056.z + (-0.5));
        _1125 = _1093 * (_1056.y + (-0.5));
        _1126 = _1093 * (_1056.x + (-0.5));
        _1127 = _1103 * (_1063.z + (-0.5));
        _1128 = _1103 * (_1063.y + (-0.5));
        _1129 = _1103 * (_1063.x + (-0.5));
        _1130 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        _1131 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        _1132 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    }
    else
    {
        _1120 = _1121;
        _1122 = _1121;
        _1123 = _1121;
        _1124 = _1121;
        _1125 = _1121;
        _1126 = _1121;
        _1127 = _1121;
        _1128 = _1121;
        _1129 = _1121;
        _1130 = _1121;
        _1131 = _1121;
        _1132 = _1121;
    }
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1185 = (cbModelParam._m0[38u].x * ((((fma(_988, cbModelParam._m0[30u].z, fma(_984, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1186 = (cbModelParam._m0[38u].y * ((((fma(_988, cbModelParam._m0[31u].z, fma(_984, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1187 = (((((fma(_988, cbModelParam._m0[32u].z, fma(_984, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1222 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1210.x + (-0.5));
        float _1254 = _1252 * (_1210.y + (-0.5));
        float _1255 = _1252 * (_1210.z + (-0.5));
        _1259 = _1222 * (_1189.z + (-0.5));
        _1260 = _1222 * (_1189.y + (-0.5));
        _1261 = _1222 * (_1189.x + (-0.5));
        _1262 = _1232 * (_1196.z + (-0.5));
        _1263 = _1232 * (_1196.y + (-0.5));
        _1264 = _1232 * (_1196.x + (-0.5));
        _1265 = _1242 * (_1203.z + (-0.5));
        _1266 = _1242 * (_1203.y + (-0.5));
        _1267 = _1242 * (_1203.x + (-0.5));
        _1268 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        _1269 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        _1270 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
    }
    else
    {
        _1259 = _1121;
        _1260 = _1121;
        _1261 = _1121;
        _1262 = _1121;
        _1263 = _1121;
        _1264 = _1121;
        _1265 = _1121;
        _1266 = _1121;
        _1267 = _1121;
        _1268 = _1121;
        _1269 = _1121;
        _1270 = _1121;
    }
    float _1285 = _934 * (-0.5);
    float _1286 = _935 * (-0.5);
    float _1287 = _936 * (-0.5);
    float _1288 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1291 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1294 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1329;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1301 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1120, _1124, _1127, _1130));
        float _1305 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1122, _1125, _1128, _1131));
        float _1309 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1123, _1126, _1129, _1132));
        float _1316 = dot(vec4(cbModelParam._m0[39u]), vec4(_1285, _1286, _1287, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1340;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1331 = dot(vec4(cbModelParam._m0[40u]), vec4(_1285, _1286, _1287, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1344 = (_1340 * cbModelParam._m0[1u].x) + (_1329 * (1.0 - cbModelParam._m0[1u].x));
    float _1350 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1430;
    float _1432;
    float _1434;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1397 = fma(_988, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980)) + cbModelParam._m0[13u].w;
        float _1401 = fma(_988, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980)) + cbModelParam._m0[14u].w;
        float _1405 = fma(_988, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980)) + cbModelParam._m0[15u].w;
        float _1408 = fma(_958, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956));
        float _1411 = fma(_958, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956));
        float _1414 = fma(_958, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956));
        float _1440;
        if (_1408 > 0.0)
        {
            _1440 = abs((1.0 - _1397) / _1408);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1397 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1440 = frontier_phi_54_52_ladder;
        }
        float _1738;
        if (_1411 > 0.0)
        {
            _1738 = abs((1.0 - _1401) / _1411);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1401 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1738 = frontier_phi_63_59_ladder;
        }
        float _2051;
        if (_1414 > 0.0)
        {
            _2051 = abs((1.0 - _1405) / _1414);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1405 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2051 = frontier_phi_77_70_ladder;
        }
        float _2053 = isnan(_1738) ? _1440 : (isnan(_1440) ? _1738 : min(_1440, _1738));
        float _2054 = isnan(_2051) ? _2053 : (isnan(_2053) ? _2051 : min(_2053, _2051));
        float _2058 = (_2054 * _1408) + _1397;
        float _2059 = (_2054 * _1411) + _1401;
        float _2060 = (_2054 * _1414) + _1405;
        float _2061 = _2054 * 9.9999997473787516355514526367188e-05;
        float _2062 = (-1.0) - _2061;
        float _2064 = _2061 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2060 > _2064) || ((_2060 < _2062) || ((_2059 > _2064) || ((_2059 < _2062) || ((_2058 < _2062) || (_2058 > _2064))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2171 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2060, cbModelParam._m0[9u].z, fma(_2059, cbModelParam._m0[9u].y, _2058 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2060, cbModelParam._m0[10u].z, fma(_2059, cbModelParam._m0[10u].y, _2058 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2060, cbModelParam._m0[11u].z, fma(_2059, cbModelParam._m0[11u].y, _2058 * cbModelParam._m0[11u].x))), _1350);
            frontier_phi_53_77_ladder = _2171.z * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2171.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2171.x * cbModelParam._m0[1u].y;
        }
        _1430 = frontier_phi_53_77_ladder_2;
        _1432 = frontier_phi_53_77_ladder_1;
        _1434 = frontier_phi_53_77_ladder;
    }
    else
    {
        vec4 _1418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_956, _957, _958), _1350);
        _1430 = _1418.x * cbModelParam._m0[1u].y;
        _1432 = _1418.y * cbModelParam._m0[1u].y;
        _1434 = _1418.z * cbModelParam._m0[1u].y;
    }
    float _1437 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1489 = fma(_988, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980)) + cbModelParam._m0[21u].w;
        float _1493 = fma(_988, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980)) + cbModelParam._m0[22u].w;
        float _1497 = fma(_988, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980)) + cbModelParam._m0[23u].w;
        float _1500 = fma(_958, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956));
        float _1503 = fma(_958, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956));
        float _1506 = fma(_958, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956));
        float _1743;
        if (_1500 > 0.0)
        {
            _1743 = abs((1.0 - _1489) / _1500);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1489 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1743 = frontier_phi_65_61_ladder;
        }
        float _2077;
        if (_1503 > 0.0)
        {
            _2077 = abs((1.0 - _1493) / _1503);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1493 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2077 = frontier_phi_79_72_ladder;
        }
        float _2228;
        if (_1506 > 0.0)
        {
            _2228 = abs((1.0 - _1497) / _1506);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1497 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2228 = frontier_phi_93_88_ladder;
        }
        float _2230 = isnan(_2077) ? _1743 : (isnan(_1743) ? _2077 : min(_1743, _2077));
        float _2231 = isnan(_2228) ? _2230 : (isnan(_2230) ? _2228 : min(_2230, _2228));
        float _2235 = (_2231 * _1500) + _1489;
        float _2236 = (_2231 * _1503) + _1493;
        float _2237 = (_2231 * _1506) + _1497;
        float _2238 = _2231 * 9.9999997473787516355514526367188e-05;
        float _2239 = (-1.0) - _2238;
        float _2241 = _2238 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2237 > _2241) || ((_2237 < _2239) || ((_2236 > _2241) || ((_2236 < _2239) || ((_2235 < _2239) || (_2235 > _2241))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2397 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2237, cbModelParam._m0[17u].z, fma(_2236, cbModelParam._m0[17u].y, _2235 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2237, cbModelParam._m0[18u].z, fma(_2236, cbModelParam._m0[18u].y, _2235 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2237, cbModelParam._m0[19u].z, fma(_2236, cbModelParam._m0[19u].y, _2235 * cbModelParam._m0[19u].x))), _1437);
            frontier_phi_62_93_ladder = _2397.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2397.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2397.x * cbModelParam._m0[1u].z;
        }
        _1525 = frontier_phi_62_93_ladder_2;
        _1527 = frontier_phi_62_93_ladder_1;
        _1529 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1509 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_956, _957, _958), _1437);
        _1525 = _1509.x * cbModelParam._m0[1u].z;
        _1527 = _1509.y * cbModelParam._m0[1u].z;
        _1529 = _1509.z * cbModelParam._m0[1u].z;
    }
    float _1541 = _955 * 0.01200000010430812835693359375;
    float _1543 = _1541 * ((cbModelParam._m0[1u].w * (_1525 - _1430)) + _1430);
    float _1544 = _1541 * ((cbModelParam._m0[1u].w * (_1527 - _1432)) + _1432);
    float _1545 = _1541 * ((cbModelParam._m0[1u].w * (_1529 - _1434)) + _1434);
    float _1566 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1544, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1569 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1544, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1572 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1544, cbSceneParam._m0[91u].y, _1543 * cbSceneParam._m0[91u].x));
    vec4 _1580 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_942, _943));
    float _1582 = _1580.w;
    uint _1598 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1602 = floatBitsToUint(cbInstanceData._m0[_1598 + 5u]);
    uint _1604 = _1602.x * 14u;
    uint _1605 = _1604 + 13u;
    float _1610 = _955 + (-1.0);
    float _1613 = (cbLight._m0[_1605].x * _1610) + 1.0;
    float _1614 = (cbLight._m0[_1605].y * _1610) + 1.0;
    uint _1615 = _1604 + 8u;
    float _1626 = cbLight._m0[_1604].x + _934;
    float _1627 = cbLight._m0[_1604].y + _935;
    float _1628 = cbLight._m0[_1604].z + _936;
    float _1632 = inversesqrt(dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628)));
    float _1636 = dot(vec3(0.0), vec3(cbLight._m0[_1604].xyz));
    float _2981 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1639 = isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0));
    float _1640 = dot(vec3(0.0), vec3(_934, _935, _936));
    float _2992 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1643 = isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0));
    float _1644 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_1626 * _1632, _1627 * _1632, _1628 * _1632));
    float _3003 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1655 = (exp2(log2(1.0 - (isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1661 = (0.5 / ((_1639 + 9.9999999392252902907785028219223e-09) + _1643)) * _1639;
    float _3014 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1663 = (isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0))) * 0.31831014156341552734375;
    float _1665 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1678 = _1604 + 9u;
    uint _1684 = _1604 | 1u;
    float _1690 = cbLight._m0[_1684].x + _934;
    float _1691 = cbLight._m0[_1684].y + _935;
    float _1692 = cbLight._m0[_1684].z + _936;
    float _1696 = inversesqrt(dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692)));
    float _1700 = dot(vec3(0.0), vec3(cbLight._m0[_1684].xyz));
    float _3030 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1703 = isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0));
    float _1704 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_1690 * _1696, _1691 * _1696, _1692 * _1696));
    float _3041 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1713 = (exp2(log2(1.0 - (isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1717 = (0.5 / ((_1703 + 9.9999999392252902907785028219223e-09) + _1643)) * _1703;
    float _3052 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1719 = (isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0))) * 0.31831014156341552734375;
    float _1720 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
    float _1730 = (((_1713 * cbLight._m0[_1678].x) * _1719) * _1720) + ((((cbLight._m0[_1615].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1582))) * _1655) * _1663) * _1665);
    float _1731 = (((_1713 * cbLight._m0[_1678].y) * _1719) * _1720) + ((((cbLight._m0[_1615].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1582))) * _1655) * _1663) * _1665);
    float _1732 = (((_1713 * cbLight._m0[_1678].z) * _1719) * _1720) + ((((cbLight._m0[_1615].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1582))) * _1655) * _1663) * _1665);
    float _1848;
    float _1850;
    float _1852;
    if (_1602.y == 0u)
    {
        float _1787 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1788 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1787;
        float _1789 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1787;
        float _1790 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1787;
        uvec4 _1802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1803 = _1802.x;
        uint _1814 = uint((float(_1802.y) * floor(float(uint(cbSceneParam._m0[85u].y * _943) / _1803))) + floor(float(uint(cbSceneParam._m0[85u].x * _942) / _1803)));
        float _1824 = (log2(_1790 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1825 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        uint _1828 = uint(isnan(14.0) ? _1825 : (isnan(_1825) ? 14.0 : min(_1825, 14.0)));
        uvec4 _1834 = texelFetch(g_lightClusterGridBuffer, int(((_1828 << 2u) + (_1814 << 6u)) >> 2u));
        uint _1835 = _1834.x;
        uint _1836 = _1802.z;
        float _1935;
        float _1937;
        float _1939;
        if (((((1u << ((_1836 >> 4u) & 15u)) + 4294967295u) & _1835) == 0u) || ((_1836 & 240u) == 0u))
        {
            _1935 = 0.0;
            _1937 = 0.0;
            _1939 = 0.0;
        }
        else
        {
            float _1936;
            float _1938;
            float _1940;
            float _2102 = 0.0;
            float _2103 = 0.0;
            float _2104 = 0.0;
            uint _2105 = 0u;
            uint _2114;
            bool _2115;
            for (;;)
            {
                _2114 = texelFetch(g_lightClassification, int((((_1828 << 5u) + (_1814 << 9u)) + (_2105 << 2u)) >> 2u)).x;
                _2115 = _2114 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                if (_2115)
                {
                    frontier_phi_90_pred = _2104;
                    frontier_phi_90_pred_1 = _2103;
                    frontier_phi_90_pred_2 = _2102;
                }
                else
                {
                    float _2268;
                    float _2269;
                    float _2270;
                    uint _2271;
                    _2268 = _2102;
                    _2269 = _2103;
                    _2270 = _2104;
                    _2271 = _2114;
                    float _2180;
                    float _2181;
                    float _2182;
                    for (;;)
                    {
                        uint _2275 = uint(findLSB(_2271)) + (_2105 << 5u);
                        uint _2272 = (_2271 + 4294967295u) & _2271;
                        uint _2277 = _2275 * 48u;
                        vec4 _2291 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2277)).x, texelFetch(g_PointLightRenderingBuffer, int(_2277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2277 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2277 + 3u)).x));
                        uint _2308 = (_2275 * 48u) + 8u;
                        vec3 _2319 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2308)).x, texelFetch(g_PointLightRenderingBuffer, int(_2308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2308 + 2u)).x));
                        float _2323 = _2291.x - _1788;
                        float _2324 = _2291.y - _1789;
                        float _2325 = _2291.z - _1790;
                        float _2326 = dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325));
                        float _2329 = inversesqrt(_2326);
                        float _2338 = 1.0 - (_2326 * _2291.w);
                        float _3078 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
                        float _2340 = sqrt(_2326) * uintBitsToFloat(uvec4(_2298, _2299, _2300, texelFetch(g_PointLightRenderingBuffer, int(((_2275 * 48u) + 4u) + 3u)).x)).w;
                        float _2343 = 1.39999997615814208984375 / (_2340 + 1.39999997615814208984375);
                        float _2344 = _2343 * _2343;
                        float _2347 = ((1.0 - _2344) * dot(vec3(0.0), vec3(_2329 * _2323, _2329 * _2324, _2329 * _2325))) + _2344;
                        float _2349 = (-0.0) - _1788;
                        float _2350 = (-0.0) - _1789;
                        float _2351 = (-0.0) - _1790;
                        float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
                        float _2359 = dot(vec3(0.0), vec3(_2355 * _2349, _2355 * _2350, _2355 * _2351));
                        float _3089 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
                        float _3100 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
                        float _2363 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
                        float _2367 = (0.5 / (((isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) + 9.9999999392252902907785028219223e-09) + _2363)) * _2363;
                        float _3111 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
                        float _2376 = (((isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0))) * 3.1415927410125732421875) / (((_2340 * _2340) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0)));
                        _2180 = (_2376 * _2319.x) + _2268;
                        _2181 = (_2376 * _2319.y) + _2269;
                        _2182 = (_2376 * _2319.z) + _2270;
                        if (_2272 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2268 = _2180;
                            _2269 = _2181;
                            _2270 = _2182;
                            _2271 = _2272;
                        }
                    }
                    frontier_phi_90_pred = _2182;
                    frontier_phi_90_pred_1 = _2181;
                    frontier_phi_90_pred_2 = _2180;
                }
                _1940 = frontier_phi_90_pred;
                _1938 = frontier_phi_90_pred_1;
                _1936 = frontier_phi_90_pred_2;
                uint _2106 = _2105 + 1u;
                if (_2106 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2102 = _1936;
                    _2103 = _1938;
                    _2104 = _1940;
                    _2105 = _2106;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1935 = _1936;
            _1937 = _1938;
            _1939 = _1940;
        }
        uvec4 _1943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1944 = _1943.z;
        uint _1946 = (_1944 >> 8u) & 15u;
        float _2082;
        float _2084;
        float _2086;
        if (((4294967295u << _1946) & _1835) == 0u)
        {
            _2082 = _1935;
            _2084 = _1937;
            _2086 = _1939;
        }
        else
        {
            float _2098 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            if (_1946 < ((_1944 >> 12u) & 15u))
            {
                float _2083;
                float _2085;
                float _2087;
                float _2254 = _1935;
                float _2255 = _1937;
                float _2256 = _1939;
                uint _2257 = _1946;
                uint _2266;
                bool _2267;
                for (;;)
                {
                    _2266 = texelFetch(g_lightClassification, int((((_1828 << 5u) + (_1814 << 9u)) + (_2257 << 2u)) >> 2u)).x;
                    _2267 = _2266 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    if (_2267)
                    {
                        frontier_phi_99_pred = _2256;
                        frontier_phi_99_pred_1 = _2255;
                        frontier_phi_99_pred_2 = _2254;
                    }
                    else
                    {
                        float _2402;
                        float _2403;
                        float _2404;
                        float _2623;
                        float _2624;
                        float _2625;
                        float _2412 = _2254;
                        float _2413 = _2255;
                        float _2414 = _2256;
                        uint _2415 = _2266;
                        uint _2416;
                        uint _2426;
                        vec4 _2441;
                        float _2442;
                        vec3 _2454;
                        vec4 _2469;
                        vec4 _2484;
                        float _2530;
                        bool _2531;
                        for (;;)
                        {
                            _2426 = ((_2257 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2415));
                            _2416 = (_2415 + 4294967295u) & _2415;
                            uint _2428 = _2426 * 40u;
                            _2441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2428 + 3u)).x));
                            _2442 = _2441.w;
                            uint _2444 = (_2426 * 40u) + 8u;
                            _2454 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2444 + 2u)).x));
                            uint _2456 = (_2426 * 40u) + 16u;
                            _2469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 3u)).x));
                            uint _2471 = (_2426 * 40u) + 20u;
                            _2484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2471 + 3u)).x));
                            uint _2486 = (_2426 * 40u) + 24u;
                            vec4 _2499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 3u)).x));
                            uint _2505 = (_2426 * 40u) + 28u;
                            vec4 _2518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2505 + 3u)).x));
                            _2530 = fma(_1790, _2518.z, fma(_1789, _2518.y, _2518.x * _1788)) + _2518.w;
                            _2531 = !((fma(_1790, _2499.z, fma(_1789, _2499.y, _2499.x * _1788)) + _2499.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            if (_2531)
                            {
                                float _2565 = _2441.x - _1788;
                                float _2566 = _2441.y - _1789;
                                float _2567 = _2441.z - _1790;
                                float _2568 = dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567));
                                float _2571 = inversesqrt(_2568);
                                float _2578 = 1.0 - (_2568 / (_2442 * _2442));
                                float _3122 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
                                float _2580 = sqrt(_2568) * uintBitsToFloat(uvec4(_2534, _2535, _2536, texelFetch(g_SpotLightRenderingBuffer, int(((_2426 * 40u) + 4u) + 3u)).x)).w;
                                float _2582 = 1.39999997615814208984375 / (_2580 + 1.39999997615814208984375);
                                float _2583 = _2582 * _2582;
                                float _2586 = (fma(_1790, _2469.z, fma(_1789, _2469.y, _2469.x * _1788)) + _2469.w) / _2530;
                                float _2587 = (fma(_1790, _2484.z, fma(_1789, _2484.y, _2484.x * _1788)) + _2484.w) / _2530;
                                float _2591 = 1.0 - dot(vec2(_2586, _2587), vec2(_2586, _2587));
                                float _3133 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                                float _2599 = dot(vec3(0.0), vec3((-0.0) - (_1788 * _2098), (-0.0) - (_1789 * _2098), (-0.0) - (_1790 * _2098)));
                                float _3144 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
                                float _2607 = ((1.0 - _2583) * dot(vec3(0.0), vec3(_2571 * _2565, _2571 * _2566, _2571 * _2567))) + _2583;
                                float _3155 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
                                float _2608 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
                                float _2612 = (0.5 / (((isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0))) + 9.9999999392252902907785028219223e-09) + _2608)) * _2608;
                                float _3166 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
                                float _2619 = ((isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0))) * (isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0)))) * (((isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0))) * 3.1415927410125732421875) / (((_2580 * _2580) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2619 * _2454.z;
                                frontier_phi_105_pred_1 = _2619 * _2454.y;
                                frontier_phi_105_pred_2 = _2619 * _2454.x;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                            }
                            _2625 = frontier_phi_105_pred;
                            _2624 = frontier_phi_105_pred_1;
                            _2623 = frontier_phi_105_pred_2;
                            _2402 = _2623 + _2412;
                            _2403 = _2624 + _2413;
                            _2404 = _2625 + _2414;
                            if (_2416 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2412 = _2402;
                                _2413 = _2403;
                                _2414 = _2404;
                                _2415 = _2416;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2404;
                        frontier_phi_99_pred_1 = _2403;
                        frontier_phi_99_pred_2 = _2402;
                    }
                    _2087 = frontier_phi_99_pred;
                    _2085 = frontier_phi_99_pred_1;
                    _2083 = frontier_phi_99_pred_2;
                    uint _2258 = _2257 + 1u;
                    if (_2258 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2254 = _2083;
                        _2255 = _2085;
                        _2256 = _2087;
                        _2257 = _2258;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2085;
                frontier_phi_81_82_ladder_1 = _2083;
                frontier_phi_81_82_ladder_2 = _2087;
            }
            else
            {
                frontier_phi_81_82_ladder = _1937;
                frontier_phi_81_82_ladder_1 = _1935;
                frontier_phi_81_82_ladder_2 = _1939;
            }
            _2082 = frontier_phi_81_82_ladder_1;
            _2084 = frontier_phi_81_82_ladder;
            _2086 = frontier_phi_81_82_ladder_2;
        }
        float _2091 = isnan(1.0) ? _955 : (isnan(_955) ? 1.0 : min(_955, 1.0));
        _1848 = ((_2082 * 0.039999999105930328369140625) * _2091) + _1730;
        _1850 = ((_2084 * 0.039999999105930328369140625) * _2091) + _1731;
        _1852 = ((_2086 * 0.039999999105930328369140625) * _2091) + _1732;
    }
    else
    {
        _1848 = _1730;
        _1850 = _1731;
        _1852 = _1732;
    }
    uint _1859 = (_1598 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1865 = (cbSceneParam._m0[72u].y * ((_894 * ((_885 - _847) - (_885 * _858))) + _847)) * cbInstanceData._m0[_1859].x;
    float _1866 = (cbSceneParam._m0[72u].y * ((_894 * ((_886 - _848) - (_886 * _858))) + _848)) * cbInstanceData._m0[_1859].y;
    float _1867 = (((_894 * ((_887 - _849) - (_887 * _858))) + _849) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1859].z;
    float _1874 = _1865 + ((_1848 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1344)) * cbPerFrame._m0[3u].x);
    float _1875 = _1866 + ((_1850 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1344)) * cbPerFrame._m0[3u].x);
    float _1876 = _1867 + ((_1852 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1344)) * cbPerFrame._m0[3u].x);
    float _3197 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1889 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
    uint _1890 = _1598 + 6u;
    float _1898 = _942 / cbSceneParam._m0[86u].x;
    float _1899 = _943 / cbSceneParam._m0[86u].y;
    vec4 _1913 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1898, _1899, (log2((isnan(cbSceneParam._m0[77u].w) ? _929 : (isnan(_929) ? cbSceneParam._m0[77u].w : min(_929, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1915 = _1913.x;
    float _1916 = _1913.y;
    float _1917 = _1913.z;
    float _1918 = _1913.w;
    float _1992;
    float _1994;
    float _1996;
    float _1998;
    if (_929 > cbSceneParam._m0[78u].w)
    {
        float _1954 = isnan(_929) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _929 : min(cbSceneParam._m0[80u].w, _929));
        float _1955 = _1954 / _929;
        float _1966 = _1955 * _280;
        float _1967 = _281 * _1955;
        float _1968 = (-0.0) - _1967;
        float _1969 = _1955 * _282;
        float _1971 = (cbSceneParam._m0[77u].w * _1968) / _1954;
        float _1972 = _1971 + cbSceneParam._m0[79u].w;
        float _1973 = cbSceneParam._m0[79u].w - _1967;
        float _1979 = sqrt(((_1966 * _1966) + (_1967 * _1967)) + (_1969 * _1969));
        float _1982 = (1.0 - (cbSceneParam._m0[77u].w / _1954)) * _1979;
        float _1988 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1990 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2190;
        if (abs((_1968 - _1971) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2190 = ((((_1972 > 0.0) ? exp2(_1988 * _1972) : (2.0 - exp2(_1990 * _1972))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1982;
        }
        else
        {
            float _2128 = 1.0 / cbSceneParam._m0[80u].x;
            float _2129 = isnan(_1973) ? _1972 : (isnan(_1972) ? _1973 : max(_1972, _1973));
            float _2130 = isnan(_1973) ? _1972 : (isnan(_1972) ? _1973 : min(_1972, _1973));
            float _2139 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : min(_2129, 0.0));
            float _2140 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : min(_2130, 0.0));
            _2190 = ((abs(_1979 / _1968) * cbSceneParam._m0[80u].y) * ((((_2139 - _2140) * 2.0) - ((exp2(_1988 * (isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0)))) - exp2(_1988 * (isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))))) * _2128)) - ((exp2(_1990 * _2139) - exp2(_1990 * _2140)) * _2128))) + (_1982 * cbSceneParam._m0[80u].z);
        }
        vec4 _2192 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1898, _1899, 1.0), 0.0);
        float _2201 = exp2((_2190 * (-1.44269502162933349609375)) * (1.0 - _2192.w));
        float _2202 = log2(_2201);
        float _2218 = log2(_1918);
        _1992 = (exp2(_2218 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2202 * cbSceneParam._m0[78u].x)) * _2192.x) / cbSceneParam._m0[78u].x)) + _1915;
        _1994 = (exp2(_2218 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2202 * cbSceneParam._m0[78u].y)) * _2192.y) / cbSceneParam._m0[78u].y)) + _1916;
        _1996 = (exp2(_2218 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2202 * cbSceneParam._m0[78u].z)) * _2192.z) / cbSceneParam._m0[78u].z)) + _1917;
        _1998 = _2201 * _1918;
    }
    else
    {
        _1992 = _1915;
        _1994 = _1916;
        _1996 = _1917;
        _1998 = _1918;
    }
    float _2009 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2010 = _2009 == 3.0;
    float _2012 = log2(_1998);
    float _2016 = exp2(_2012 * cbSceneParam._m0[78u].x);
    float _2017 = exp2(_2012 * cbSceneParam._m0[78u].y);
    float _2018 = exp2(_2012 * cbSceneParam._m0[78u].z);
    float _2019 = _2016 * (isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)));
    float _2020 = _2017 * (isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)));
    float _2021 = _2018 * (isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)));
    float _2030 = (_2009 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2030 * (_2010 ? _2019 : (_2019 + (cbSceneParam._m0[72u].w * _1992)));
    SV_Target.y = _2030 * (_2010 ? _2020 : (_2020 + (cbSceneParam._m0[72u].w * _1994)));
    SV_Target.z = _2030 * (_2010 ? _2021 : (_2021 + (cbSceneParam._m0[72u].w * _1996)));
    SV_Target.w = cbInstanceData._m0[_1890].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1865) * _1889) * _2016) * _2030;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1866) * _1889) * _2017) * _2030;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1867) * _1889) * _2018) * _2030;
    SV_Target_1.w = cbInstanceData._m0[_1890].w;
}


