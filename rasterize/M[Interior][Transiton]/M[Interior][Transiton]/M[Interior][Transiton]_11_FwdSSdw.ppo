#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _987;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _290 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _328 = cbMtdParam._m0[27u].w + _269;
    float _329 = cbMtdParam._m0[28u].x + _270;
    float _330 = cbMtdParam._m0[28u].y + _271;
    float _347 = (-0.0) - dot(vec3(_328, _329, _330), vec3(_201 * _193, _201 * _194, _201 * _195));
    float _348 = (-0.0) - dot(vec3(_328, _329, _330), vec3(_212 * TANGENT.x, _212 * TANGENT.y, _212 * TANGENT.z));
    float _349 = (-0.0) - dot(vec3(_328, _329, _330), vec3((-0.0) - (NORMAL.x * _208), (-0.0) - (NORMAL.y * _208), (-0.0) - (NORMAL.z * _208)));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _356 = _353 * _349;
    float _359 = ((_353 * _347) + (((_290.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w)) * cbMtdParam._m0[24u].x;
    float _360 = ((_353 * _348) + (((_290.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x)) * cbMtdParam._m0[23u].w;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_359 > 0.0)
    {
        _368 = (1.0 - _361) / _359;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_359 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _359;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    float _380 = (_356 > 0.0) ? (cbMtdParam._m0[17u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_361 + (-0.5)) + (_382 * _359)) / _393) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_362 + (-0.5)) + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _428 = cbMtdParam._m0[9u].x * _418.x;
    float _429 = cbMtdParam._m0[9u].y * _418.y;
    float _430 = cbMtdParam._m0[9u].z * _418.z;
    vec4 _454 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _459 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _465 = ((_454.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _467 = (-0.0) - (cbMtdParam._m0[21u].x * ((_454.x * 0.5) + (-0.25)));
    float _468 = fract(_459);
    float _470 = fract(_459 + 0.5);
    vec4 _497 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_468 * _467) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_465 * _468) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _499 = _497.x;
    float _505 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_470 * _467) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_465 * _470) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _499) * abs((_468 * 2.0) + (-1.0))) + _499;
    float _514 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _518 = fract(abs(_514));
    float _527 = sin(cbMtdParam._m0[21u].z);
    float _528 = cos(cbMtdParam._m0[21u].z);
    float _529 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _530 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _560 = abs(cbMtdParam._m0[20u].w * (((_505 - (((_514 >= ((-0.0) - _514)) ? _518 : ((-0.0) - _518)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_530, (-0.0) - _527, _528 * _529) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_530, _528, _529 * _527) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _564 = (((_560 * cbMtdParam._m0[18u].y) - _505) * _560) + _505;
    float _2931 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _2931 : (isnan(_2931) ? 1.0 : min(_2931, 1.0));
    vec4 _577 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _592 = (cbMtdParam._m0[14u].x * _577.x) * cbMtdParam._m0[19u].x;
    float _593 = (cbMtdParam._m0[14u].y * _577.y) * cbMtdParam._m0[19u].x;
    float _594 = (cbMtdParam._m0[14u].z * _577.z) * cbMtdParam._m0[19u].x;
    float _604 = exp2(log2(_565) * cbMtdParam._m0[20u].x);
    float _2942 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _2953 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _2964 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _633 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _637 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _638 = _269 * _637;
    float _639 = _270 * _637;
    float _640 = _271 * _637;
    float _646 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _647 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _660 = uint(roundEven(NORMAL.w)) * 13u;
    uint _662 = _660 + 9u;
    uint _663 = _662 + uint(cbMatDynParam._m0[0u].w);
    float _669 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2942 : (isnan(_2942) ? 1.0 : min(_2942, 1.0)))) * cbInstanceData._m0[_663].x;
    float _670 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2953 : (isnan(_2953) ? 1.0 : min(_2953, 1.0)))) * cbInstanceData._m0[_663].y;
    float _671 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0)))) * cbInstanceData._m0[_663].z;
    float _2975 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0));
    float _2986 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0));
    float _2997 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0));
    vec4 _683 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _646, cbSceneParam._m0[86u].y * _647));
    float _686 = _683.x * TEXCOORD_4;
    float _687 = (-0.0) - _638;
    float _688 = (-0.0) - _639;
    float _689 = (-0.0) - _640;
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _986;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _774 = (cbModelParam._m0[37u].x * ((((fma(_719, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _776 = (cbModelParam._m0[37u].y * ((((fma(_719, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _777 = (((((fma(_719, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_774, _776, _777), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_774, _776, _777), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_774, _776, _777), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_774, _776, _777), 0.0);
        float _814 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_780.x + (-0.5));
        float _816 = _814 * (_780.y + (-0.5));
        float _817 = _814 * (_780.z + (-0.5));
        float _824 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_787.x + (-0.5));
        float _826 = _824 * (_787.y + (-0.5));
        float _827 = _824 * (_787.z + (-0.5));
        float _834 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_794.x + (-0.5));
        float _836 = _834 * (_794.y + (-0.5));
        float _837 = _834 * (_794.z + (-0.5));
        float _844 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_801.x + (-0.5));
        float _846 = _844 * (_801.y + (-0.5));
        float _847 = _844 * (_801.z + (-0.5));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = _815 * 0.5;
        float _852 = _825 * 0.5;
        float _853 = _835 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _868 = (dot(vec3(0.0), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3023 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _878 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3034 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
        float _880 = _879 * 2.0;
        float _884 = (1.0 - _879) / (_879 + 1.0);
        float _3045 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0));
        float _894 = ((((1.0 - _885) * (_880 + 2.0)) * exp2(log2(isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0))) * (_880 + 1.0))) + _885) * _848;
        float _895 = _816 * 0.5;
        float _896 = _826 * 0.5;
        float _897 = _836 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _911 = (dot(vec3(0.0), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3056 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _920 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3067 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _3078 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0))) * (_922 + 1.0))) + _927) * _849;
        float _937 = _817 * 0.5;
        float _938 = _827 * 0.5;
        float _939 = _837 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(0.0), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3089 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3100 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3111 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) * (_964 + 1.0))) + _969) * _850;
        _986 = _817;
        _988 = _816;
        _989 = _815;
        _990 = _827;
        _991 = _826;
        _992 = _825;
        _993 = _837;
        _994 = _836;
        _995 = _835;
        _996 = _850;
        _997 = _849;
        _998 = _848;
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0)));
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
    }
    else
    {
        _986 = _987;
        _988 = _987;
        _989 = _987;
        _990 = _987;
        _991 = _987;
        _992 = _987;
        _993 = _987;
        _994 = _987;
        _995 = _987;
        _996 = _987;
        _997 = _987;
        _998 = _987;
        _999 = 0.0;
        _1000 = 0.0;
        _1001 = 0.0;
    }
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1054 = (cbModelParam._m0[38u].x * ((((fma(_719, cbModelParam._m0[30u].z, fma(_715, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _711)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1055 = (cbModelParam._m0[38u].y * ((((fma(_719, cbModelParam._m0[31u].z, fma(_715, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _711)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1056 = (((((fma(_719, cbModelParam._m0[32u].z, fma(_715, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _711)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        float _1091 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1058.x + (-0.5));
        float _1093 = _1091 * (_1058.y + (-0.5));
        float _1094 = _1091 * (_1058.z + (-0.5));
        float _1101 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1065.x + (-0.5));
        float _1103 = _1101 * (_1065.y + (-0.5));
        float _1104 = _1101 * (_1065.z + (-0.5));
        float _1111 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1072.x + (-0.5));
        float _1113 = _1111 * (_1072.y + (-0.5));
        float _1114 = _1111 * (_1072.z + (-0.5));
        float _1121 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1079.x + (-0.5));
        float _1123 = _1121 * (_1079.y + (-0.5));
        float _1124 = _1121 * (_1079.z + (-0.5));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = _1092 * 0.5;
        float _1129 = _1102 * 0.5;
        float _1130 = _1112 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(0.0), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3152 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3163 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3174 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0))) * (_1155 + 1.0))) + _1160) * _1125;
        float _1170 = _1093 * 0.5;
        float _1171 = _1103 * 0.5;
        float _1172 = _1113 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(0.0), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3185 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3196 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3207 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))) * (_1197 + 1.0))) + _1202) * _1126;
        float _1212 = _1094 * 0.5;
        float _1213 = _1104 * 0.5;
        float _1214 = _1114 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(0.0), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3218 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3229 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3240 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0))) * (_1239 + 1.0))) + _1244) * _1127;
        _1261 = _1094;
        _1262 = _1093;
        _1263 = _1092;
        _1264 = _1104;
        _1265 = _1103;
        _1266 = _1102;
        _1267 = _1114;
        _1268 = _1113;
        _1269 = _1112;
        _1270 = _1127;
        _1271 = _1126;
        _1272 = _1125;
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
    }
    else
    {
        _1261 = _987;
        _1262 = _987;
        _1263 = _987;
        _1264 = _987;
        _1265 = _987;
        _1266 = _987;
        _1267 = _987;
        _1268 = _987;
        _1269 = _987;
        _1270 = _987;
        _1271 = _987;
        _1272 = _987;
        _1273 = 0.0;
        _1274 = 0.0;
        _1275 = 0.0;
    }
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _999)) + _999;
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _1000)) + _1000;
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _1001)) + _1001;
    float _1308 = fma(_1287, cbSceneParam._m0[89u].z, fma(_1286, cbSceneParam._m0[89u].y, _1285 * cbSceneParam._m0[89u].x));
    float _1311 = fma(_1287, cbSceneParam._m0[90u].z, fma(_1286, cbSceneParam._m0[90u].y, _1285 * cbSceneParam._m0[90u].x));
    float _1314 = fma(_1287, cbSceneParam._m0[91u].z, fma(_1286, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1285));
    float _1329 = _638 * (-0.5);
    float _1330 = _639 * (-0.5);
    float _1331 = _640 * (-0.5);
    float _1332 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1335 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1338 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1372;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1345 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_986, _990, _993, _996));
        float _1349 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_988, _991, _994, _997));
        float _1353 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_989, _992, _995, _998));
        float _1360 = dot(vec4(cbModelParam._m0[39u]), vec4(_1329, _1330, _1331, 1.0));
        _1372 = dot(vec3(isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1360) ? 0.0 : (isnan(0.0) ? _1360 : max(0.0, _1360))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1372 = 1.0;
    }
    float _1383;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1374 = dot(vec4(cbModelParam._m0[40u]), vec4(_1329, _1330, _1331, 1.0));
        _1383 = dot(vec3(isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1374) ? 0.0 : (isnan(0.0) ? _1374 : max(0.0, _1374))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1383 = 1.0;
    }
    float _1387 = (_1383 * cbModelParam._m0[1u].x) + (_1372 * (1.0 - cbModelParam._m0[1u].x));
    float _1396 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1477;
    float _1479;
    float _1481;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1444 = fma(_719, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711)) + cbModelParam._m0[13u].w;
        float _1448 = fma(_719, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711)) + cbModelParam._m0[14u].w;
        float _1452 = fma(_719, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711)) + cbModelParam._m0[15u].w;
        float _1455 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1458 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1461 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1487;
        if (_1455 > 0.0)
        {
            _1487 = abs((1.0 - _1444) / _1455);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1444 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1487 = frontier_phi_22_20_ladder;
        }
        float _1807;
        if (_1458 > 0.0)
        {
            _1807 = abs((1.0 - _1448) / _1458);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1448 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1807 = frontier_phi_31_27_ladder;
        }
        float _2144;
        if (_1461 > 0.0)
        {
            _2144 = abs((1.0 - _1452) / _1461);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1452 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2144 = frontier_phi_45_38_ladder;
        }
        float _2146 = isnan(_1807) ? _1487 : (isnan(_1487) ? _1807 : min(_1487, _1807));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1455) + _1444;
        float _2152 = (_2147 * _1458) + _1448;
        float _2153 = (_2147 * _1461) + _1452;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2155 = (-1.0) - _2154;
        float _2157 = _2154 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2153 > _2157) || ((_2153 < _2155) || ((_2152 > _2157) || ((_2152 < _2155) || ((_2151 < _2155) || (_2151 > _2157))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2276 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2153, cbModelParam._m0[9u].z, fma(_2152, cbModelParam._m0[9u].y, _2151 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2153, cbModelParam._m0[10u].z, fma(_2152, cbModelParam._m0[10u].y, _2151 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2153, cbModelParam._m0[11u].z, fma(_2152, cbModelParam._m0[11u].y, _2151 * cbModelParam._m0[11u].x))), _1396);
            frontier_phi_21_45_ladder = _2276.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2276.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2276.x * cbModelParam._m0[1u].y;
        }
        _1477 = frontier_phi_21_45_ladder_2;
        _1479 = frontier_phi_21_45_ladder_1;
        _1481 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1465 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1396);
        _1477 = _1465.x * cbModelParam._m0[1u].y;
        _1479 = _1465.y * cbModelParam._m0[1u].y;
        _1481 = _1465.z * cbModelParam._m0[1u].y;
    }
    float _1484 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1572;
    float _1574;
    float _1576;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1536 = fma(_719, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711)) + cbModelParam._m0[21u].w;
        float _1540 = fma(_719, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711)) + cbModelParam._m0[22u].w;
        float _1544 = fma(_719, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711)) + cbModelParam._m0[23u].w;
        float _1547 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1550 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1553 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1812;
        if (_1547 > 0.0)
        {
            _1812 = abs((1.0 - _1536) / _1547);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1536 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1812 = frontier_phi_33_29_ladder;
        }
        float _2170;
        if (_1550 > 0.0)
        {
            _2170 = abs((1.0 - _1540) / _1550);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1540 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2170 = frontier_phi_47_40_ladder;
        }
        float _2336;
        if (_1553 > 0.0)
        {
            _2336 = abs((1.0 - _1544) / _1553);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1544 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2336 = frontier_phi_61_56_ladder;
        }
        float _2338 = isnan(_2170) ? _1812 : (isnan(_1812) ? _2170 : min(_1812, _2170));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1547) + _1536;
        float _2344 = (_2339 * _1550) + _1540;
        float _2345 = (_2339 * _1553) + _1544;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2346;
        float _2349 = _2346 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2345 > _2349) || ((_2345 < _2347) || ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 < _2347) || (_2343 > _2349))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2345, cbModelParam._m0[17u].z, fma(_2344, cbModelParam._m0[17u].y, _2343 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2345, cbModelParam._m0[18u].z, fma(_2344, cbModelParam._m0[18u].y, _2343 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2345, cbModelParam._m0[19u].z, fma(_2344, cbModelParam._m0[19u].y, _2343 * cbModelParam._m0[19u].x))), _1484);
            frontier_phi_30_61_ladder = _2528.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2528.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2528.x * cbModelParam._m0[1u].z;
        }
        _1572 = frontier_phi_30_61_ladder_2;
        _1574 = frontier_phi_30_61_ladder_1;
        _1576 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1484);
        _1572 = _1556.x * cbModelParam._m0[1u].z;
        _1574 = _1556.y * cbModelParam._m0[1u].z;
        _1576 = _1556.z * cbModelParam._m0[1u].z;
    }
    float _1588 = _686 * 0.01200000010430812835693359375;
    float _1590 = _1588 * ((cbModelParam._m0[1u].w * (_1572 - _1477)) + _1477);
    float _1591 = _1588 * ((cbModelParam._m0[1u].w * (_1574 - _1479)) + _1479);
    float _1592 = _1588 * ((cbModelParam._m0[1u].w * (_1576 - _1481)) + _1481);
    float _1595 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, _1590 * cbSceneParam._m0[91u].x));
    vec4 _1609 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_646, _647));
    float _1611 = _1609.w;
    float _1624 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1611);
    float _1625 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1611);
    float _1626 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1611);
    uvec4 _1630 = floatBitsToUint(cbInstanceData._m0[_660 + 5u]);
    uint _1632 = _1630.x * 14u;
    uint _1633 = _1632 + 13u;
    float _1638 = _686 + (-1.0);
    float _1641 = (cbLight._m0[_1633].x * _1638) + 1.0;
    float _1642 = (cbLight._m0[_1633].y * _1638) + 1.0;
    uint _1643 = _1632 + 5u;
    float _1649 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
    uint _1653 = _1632 + 4u;
    float _1662 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
    uint _1666 = _1632 | 1u;
    float _1677 = dot(vec3(cbLight._m0[_1632].xyz), vec3(0.0));
    float _1680 = dot(vec3(cbLight._m0[_1666].xyz), vec3(0.0));
    float _3376 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _3387 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1685 = (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * 0.3183098733425140380859375;
    float _1687 = (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * 0.3183098733425140380859375;
    float _1694 = ((cbLight._m0[_1643].x * _1649) * _1687) + (((cbLight._m0[_1653].x * _1624) * _1662) * _1685);
    float _1695 = ((_1649 * cbLight._m0[_1643].y) * _1687) + (((cbLight._m0[_1653].y * _1625) * _1662) * _1685);
    float _1696 = ((_1649 * cbLight._m0[_1643].z) * _1687) + (((cbLight._m0[_1653].z * _1626) * _1662) * _1685);
    uint _1697 = _1632 + 8u;
    float _1703 = cbLight._m0[_1632].x + _638;
    float _1704 = cbLight._m0[_1632].y + _639;
    float _1705 = cbLight._m0[_1632].z + _640;
    float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
    float _1713 = dot(vec3(0.0), vec3(cbLight._m0[_1632].xyz));
    float _3398 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _1717 = dot(vec3(0.0), vec3(_638, _639, _640));
    float _3409 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1720 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _1721 = dot(vec3(cbLight._m0[_1632].xyz), vec3(_1703 * _1709, _1704 * _1709, _1705 * _1709));
    float _3420 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1732 = (exp2(log2(1.0 - (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1738 = (0.5 / ((_1716 + 9.9999999392252902907785028219223e-09) + _1720)) * _1716;
    float _3431 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1740 = (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * 0.31831014156341552734375;
    uint _1754 = _1632 + 9u;
    float _1760 = cbLight._m0[_1666].x + _638;
    float _1761 = cbLight._m0[_1666].y + _639;
    float _1762 = cbLight._m0[_1666].z + _640;
    float _1766 = inversesqrt(dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762)));
    float _1770 = dot(vec3(0.0), vec3(cbLight._m0[_1666].xyz));
    float _3442 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _1774 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_1760 * _1766, _1761 * _1766, _1762 * _1766));
    float _3453 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1783 = (exp2(log2(1.0 - (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1787 = (0.5 / ((_1773 + 9.9999999392252902907785028219223e-09) + _1720)) * _1773;
    float _3464 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1789 = (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * 0.31831014156341552734375;
    float _1799 = (((_1783 * cbLight._m0[_1754].x) * _1789) * _1649) + ((((cbLight._m0[_1697].x * _1624) * _1732) * _1740) * _1662);
    float _1800 = (((_1783 * cbLight._m0[_1754].y) * _1789) * _1649) + ((((cbLight._m0[_1697].y * _1625) * _1732) * _1740) * _1662);
    float _1801 = (((_1783 * cbLight._m0[_1754].z) * _1789) * _1649) + ((((cbLight._m0[_1697].z * _1626) * _1732) * _1740) * _1662);
    float _1918;
    float _1920;
    float _1922;
    float _1924;
    float _1926;
    float _1928;
    if (_1630.y == 0u)
    {
        float _1857 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1858 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1857;
        float _1859 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1857;
        float _1860 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1857;
        uvec4 _1872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1873 = _1872.x;
        uint _1884 = uint((float(_1872.y) * floor(float(uint(cbSceneParam._m0[85u].y * _647) / _1873))) + floor(float(uint(cbSceneParam._m0[85u].x * _646) / _1873)));
        float _1894 = (log2(_1860 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1895 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        uint _1898 = uint(isnan(14.0) ? _1895 : (isnan(_1895) ? 14.0 : min(_1895, 14.0)));
        uvec4 _1904 = texelFetch(g_lightClusterGridBuffer, int(((_1898 << 2u) + (_1884 << 6u)) >> 2u));
        uint _1905 = _1904.x;
        uint _1906 = _1872.z;
        float _2022;
        float _2024;
        float _2026;
        float _2028;
        float _2030;
        float _2032;
        if (((((1u << ((_1906 >> 4u) & 15u)) + 4294967295u) & _1905) == 0u) || ((_1906 & 240u) == 0u))
        {
            _2022 = 0.0;
            _2024 = 0.0;
            _2026 = 0.0;
            _2028 = 0.0;
            _2030 = 0.0;
            _2032 = 0.0;
        }
        else
        {
            float _2023;
            float _2025;
            float _2027;
            float _2029;
            float _2031;
            float _2033;
            float _2204 = 0.0;
            float _2205 = 0.0;
            float _2206 = 0.0;
            float _2207 = 0.0;
            float _2208 = 0.0;
            float _2209 = 0.0;
            uint _2210 = 0u;
            uint _2219;
            bool _2220;
            for (;;)
            {
                _2219 = texelFetch(g_lightClassification, int((((_1898 << 5u) + (_1884 << 9u)) + (_2210 << 2u)) >> 2u)).x;
                _2220 = _2219 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2220)
                {
                    frontier_phi_58_pred = _2205;
                    frontier_phi_58_pred_1 = _2209;
                    frontier_phi_58_pred_2 = _2208;
                    frontier_phi_58_pred_3 = _2207;
                    frontier_phi_58_pred_4 = _2206;
                    frontier_phi_58_pred_5 = _2204;
                }
                else
                {
                    float _2379;
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    uint _2385;
                    _2379 = _2204;
                    _2380 = _2205;
                    _2381 = _2206;
                    _2382 = _2207;
                    _2383 = _2208;
                    _2384 = _2209;
                    _2385 = _2219;
                    float _2285;
                    float _2286;
                    float _2287;
                    float _2288;
                    float _2289;
                    float _2290;
                    for (;;)
                    {
                        uint _2389 = uint(findLSB(_2385)) + (_2210 << 5u);
                        uint _2386 = (_2385 + 4294967295u) & _2385;
                        uint _2391 = _2389 * 48u;
                        vec4 _2405 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2391)).x, texelFetch(g_PointLightRenderingBuffer, int(_2391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2391 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2391 + 3u)).x));
                        uint _2411 = (_2389 * 48u) + 4u;
                        vec4 _2424 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2411)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 3u)).x));
                        uint _2430 = (_2389 * 48u) + 8u;
                        vec3 _2441 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2430)).x, texelFetch(g_PointLightRenderingBuffer, int(_2430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2430 + 2u)).x));
                        float _2445 = _2405.x - _1858;
                        float _2446 = _2405.y - _1859;
                        float _2447 = _2405.z - _1860;
                        float _2448 = dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447));
                        float _2451 = inversesqrt(_2448);
                        float _2460 = 1.0 - (_2448 * _2405.w);
                        float _3485 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
                        float _2461 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
                        float _2462 = sqrt(_2448) * _2424.w;
                        float _2465 = 1.39999997615814208984375 / (_2462 + 1.39999997615814208984375);
                        float _2466 = _2465 * _2465;
                        float _2469 = ((1.0 - _2466) * dot(vec3(0.0), vec3(_2451 * _2445, _2451 * _2446, _2451 * _2447))) + _2466;
                        float _2472 = _2462 * _2462;
                        float _2476 = ((isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0))) * _2461) / ((_2472 * 0.699999988079071044921875) + 1.0);
                        float _2480 = (-0.0) - _1858;
                        float _2481 = (-0.0) - _1859;
                        float _2482 = (-0.0) - _1860;
                        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
                        float _2490 = dot(vec3(0.0), vec3(_2486 * _2480, _2486 * _2481, _2486 * _2482));
                        float _3501 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
                        float _3512 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
                        float _2494 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
                        float _2498 = (0.5 / (((isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) + 9.9999999392252902907785028219223e-09) + _2494)) * _2494;
                        float _3523 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
                        float _2507 = (((isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * 3.1415927410125732421875) / ((_2472 * 2.1991131305694580078125) + 3.141590118408203125)) * _2461;
                        _2288 = (_2476 * _2424.x) + _2382;
                        _2289 = (_2476 * _2424.y) + _2383;
                        _2290 = (_2476 * _2424.z) + _2384;
                        _2285 = (_2507 * _2441.x) + _2379;
                        _2286 = (_2507 * _2441.y) + _2380;
                        _2287 = (_2507 * _2441.z) + _2381;
                        if (_2386 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2379 = _2285;
                            _2380 = _2286;
                            _2381 = _2287;
                            _2382 = _2288;
                            _2383 = _2289;
                            _2384 = _2290;
                            _2385 = _2386;
                        }
                    }
                    frontier_phi_58_pred = _2286;
                    frontier_phi_58_pred_1 = _2290;
                    frontier_phi_58_pred_2 = _2289;
                    frontier_phi_58_pred_3 = _2288;
                    frontier_phi_58_pred_4 = _2287;
                    frontier_phi_58_pred_5 = _2285;
                }
                _2025 = frontier_phi_58_pred;
                _2033 = frontier_phi_58_pred_1;
                _2031 = frontier_phi_58_pred_2;
                _2029 = frontier_phi_58_pred_3;
                _2027 = frontier_phi_58_pred_4;
                _2023 = frontier_phi_58_pred_5;
                uint _2211 = _2210 + 1u;
                if (_2211 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2204 = _2023;
                    _2205 = _2025;
                    _2206 = _2027;
                    _2207 = _2029;
                    _2208 = _2031;
                    _2209 = _2033;
                    _2210 = _2211;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2022 = _2023;
            _2024 = _2025;
            _2026 = _2027;
            _2028 = _2029;
            _2030 = _2031;
            _2032 = _2033;
        }
        uvec4 _2036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2037 = _2036.z;
        uint _2039 = (_2037 >> 8u) & 15u;
        float _2175;
        float _2177;
        float _2179;
        float _2181;
        float _2183;
        float _2185;
        if (((4294967295u << _2039) & _1905) == 0u)
        {
            _2175 = _2022;
            _2177 = _2024;
            _2179 = _2026;
            _2181 = _2028;
            _2183 = _2030;
            _2185 = _2032;
        }
        else
        {
            float _2200 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2039 < ((_2037 >> 12u) & 15u))
            {
                float _2176;
                float _2178;
                float _2180;
                float _2182;
                float _2184;
                float _2186;
                float _2362 = _2022;
                float _2363 = _2024;
                float _2364 = _2026;
                float _2365 = _2028;
                float _2366 = _2030;
                float _2367 = _2032;
                uint _2368 = _2039;
                uint _2377;
                bool _2378;
                for (;;)
                {
                    _2377 = texelFetch(g_lightClassification, int((((_1898 << 5u) + (_1884 << 9u)) + (_2368 << 2u)) >> 2u)).x;
                    _2378 = _2377 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2378)
                    {
                        frontier_phi_67_pred = _2367;
                        frontier_phi_67_pred_1 = _2366;
                        frontier_phi_67_pred_2 = _2365;
                        frontier_phi_67_pred_3 = _2364;
                        frontier_phi_67_pred_4 = _2363;
                        frontier_phi_67_pred_5 = _2362;
                    }
                    else
                    {
                        float _2533;
                        float _2534;
                        float _2535;
                        float _2536;
                        float _2537;
                        float _2538;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2546 = _2362;
                        float _2547 = _2363;
                        float _2548 = _2364;
                        float _2549 = _2365;
                        float _2550 = _2366;
                        float _2551 = _2367;
                        uint _2552 = _2377;
                        uint _2553;
                        vec4 _2578;
                        float _2579;
                        vec4 _2594;
                        vec3 _2606;
                        vec4 _2622;
                        vec4 _2637;
                        float _2683;
                        bool _2684;
                        for (;;)
                        {
                            uint _2563 = ((_2368 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2552));
                            _2553 = (_2552 + 4294967295u) & _2552;
                            uint _2565 = _2563 * 40u;
                            _2578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2565 + 3u)).x));
                            _2579 = _2578.w;
                            uint _2581 = (_2563 * 40u) + 4u;
                            _2594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 3u)).x));
                            uint _2596 = (_2563 * 40u) + 8u;
                            _2606 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 2u)).x));
                            uint _2609 = (_2563 * 40u) + 16u;
                            _2622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 3u)).x));
                            uint _2624 = (_2563 * 40u) + 20u;
                            _2637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 3u)).x));
                            uint _2639 = (_2563 * 40u) + 24u;
                            vec4 _2652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 3u)).x));
                            uint _2658 = (_2563 * 40u) + 28u;
                            vec4 _2671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 3u)).x));
                            _2683 = fma(_1860, _2671.z, fma(_1859, _2671.y, _2671.x * _1858)) + _2671.w;
                            _2684 = !((fma(_1860, _2652.z, fma(_1859, _2652.y, _2652.x * _1858)) + _2652.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2684)
                            {
                                float _2711 = _2578.x - _1858;
                                float _2712 = _2578.y - _1859;
                                float _2713 = _2578.z - _1860;
                                float _2714 = dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713));
                                float _2717 = inversesqrt(_2714);
                                float _2718 = _2717 * _2711;
                                float _2719 = _2717 * _2712;
                                float _2720 = _2717 * _2713;
                                float _2724 = 1.0 - (_2714 / (_2579 * _2579));
                                float _3534 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                                float _2725 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
                                float _2729 = sqrt(_2714) * _2594.w;
                                float _2731 = 1.39999997615814208984375 / (_2729 + 1.39999997615814208984375);
                                float _2732 = _2731 * _2731;
                                float _2733 = 1.0 - _2732;
                                float _2735 = (_2733 * dot(vec3(_2718, _2719, _2720), vec3(0.0))) + _2732;
                                float _2738 = _2729 * _2729;
                                float _2742 = (fma(_1860, _2622.z, fma(_1859, _2622.y, _2622.x * _1858)) + _2622.w) / _2683;
                                float _2743 = (fma(_1860, _2637.z, fma(_1859, _2637.y, _2637.x * _1858)) + _2637.w) / _2683;
                                float _2747 = 1.0 - dot(vec2(_2742, _2743), vec2(_2742, _2743));
                                float _3550 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                                float _2748 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
                                float _2749 = _2748 * (((isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))) * _2725) / ((_2738 * 0.699999988079071044921875) + 1.0));
                                float _2759 = dot(vec3(0.0), vec3((-0.0) - (_1858 * _2200), (-0.0) - (_1859 * _2200), (-0.0) - (_1860 * _2200)));
                                float _3561 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                                float _2767 = (_2733 * dot(vec3(0.0), vec3(_2718, _2719, _2720))) + _2732;
                                float _3572 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                                float _2768 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
                                float _2772 = (0.5 / (((isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) + 9.9999999392252902907785028219223e-09) + _2768)) * _2768;
                                float _3583 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                                float _2779 = (_2748 * _2725) * (((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 3.1415927410125732421875) / ((_2738 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2749 * _2594.z;
                                frontier_phi_73_pred_1 = _2749 * _2594.y;
                                frontier_phi_73_pred_2 = _2749 * _2594.x;
                                frontier_phi_73_pred_3 = _2779 * _2606.z;
                                frontier_phi_73_pred_4 = _2779 * _2606.y;
                                frontier_phi_73_pred_5 = _2779 * _2606.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2788 = frontier_phi_73_pred;
                            _2787 = frontier_phi_73_pred_1;
                            _2786 = frontier_phi_73_pred_2;
                            _2785 = frontier_phi_73_pred_3;
                            _2784 = frontier_phi_73_pred_4;
                            _2783 = frontier_phi_73_pred_5;
                            _2536 = _2786 + _2549;
                            _2537 = _2787 + _2550;
                            _2538 = _2788 + _2551;
                            _2533 = _2783 + _2546;
                            _2534 = _2784 + _2547;
                            _2535 = _2785 + _2548;
                            if (_2553 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2546 = _2533;
                                _2547 = _2534;
                                _2548 = _2535;
                                _2549 = _2536;
                                _2550 = _2537;
                                _2551 = _2538;
                                _2552 = _2553;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2538;
                        frontier_phi_67_pred_1 = _2537;
                        frontier_phi_67_pred_2 = _2536;
                        frontier_phi_67_pred_3 = _2535;
                        frontier_phi_67_pred_4 = _2534;
                        frontier_phi_67_pred_5 = _2533;
                    }
                    _2186 = frontier_phi_67_pred;
                    _2184 = frontier_phi_67_pred_1;
                    _2182 = frontier_phi_67_pred_2;
                    _2180 = frontier_phi_67_pred_3;
                    _2178 = frontier_phi_67_pred_4;
                    _2176 = frontier_phi_67_pred_5;
                    uint _2369 = _2368 + 1u;
                    if (_2369 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2362 = _2176;
                        _2363 = _2178;
                        _2364 = _2180;
                        _2365 = _2182;
                        _2366 = _2184;
                        _2367 = _2186;
                        _2368 = _2369;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2182;
                frontier_phi_49_50_ladder_1 = _2186;
                frontier_phi_49_50_ladder_2 = _2184;
                frontier_phi_49_50_ladder_3 = _2180;
                frontier_phi_49_50_ladder_4 = _2178;
                frontier_phi_49_50_ladder_5 = _2176;
            }
            else
            {
                frontier_phi_49_50_ladder = _2028;
                frontier_phi_49_50_ladder_1 = _2032;
                frontier_phi_49_50_ladder_2 = _2030;
                frontier_phi_49_50_ladder_3 = _2026;
                frontier_phi_49_50_ladder_4 = _2024;
                frontier_phi_49_50_ladder_5 = _2022;
            }
            _2175 = frontier_phi_49_50_ladder_5;
            _2177 = frontier_phi_49_50_ladder_4;
            _2179 = frontier_phi_49_50_ladder_3;
            _2181 = frontier_phi_49_50_ladder;
            _2183 = frontier_phi_49_50_ladder_2;
            _2185 = frontier_phi_49_50_ladder_1;
        }
        float _2190 = isnan(1.0) ? _686 : (isnan(_686) ? 1.0 : min(_686, 1.0));
        _1918 = (_2190 * _2181) + _1694;
        _1920 = (_2190 * _2183) + _1695;
        _1922 = (_2190 * _2185) + _1696;
        _1924 = ((_2175 * 0.039999999105930328369140625) * _2190) + _1799;
        _1926 = ((_2177 * 0.039999999105930328369140625) * _2190) + _1800;
        _1928 = ((_2179 * 0.039999999105930328369140625) * _2190) + _1801;
    }
    else
    {
        _1918 = _1694;
        _1920 = _1695;
        _1922 = _1696;
        _1924 = _1799;
        _1926 = _1800;
        _1928 = _1801;
    }
    uint _1934 = _662 + uint(cbMatDynParam._m0[0u].w);
    float _1940 = ((_604 * (_592 - (_592 * _565))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1934].x;
    float _1941 = ((_604 * (_593 - (_593 * _565))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1934].y;
    float _1942 = ((_604 * (_594 - (_594 * _565))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1934].z;
    float _3599 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3610 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3621 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _1959 = (((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1918 + ((isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))) * _686))) + ((_1924 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _1387)) * cbPerFrame._m0[3u].x)) + _1940;
    float _1961 = (_1941 + ((_1926 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _1387)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1920 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _686)));
    float _1963 = (_1942 + ((_1928 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _1387)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1922 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _686)));
    float _3647 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1976 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    uint _1977 = _660 + 6u;
    float _1985 = _646 / cbSceneParam._m0[86u].x;
    float _1986 = _647 / cbSceneParam._m0[86u].y;
    vec4 _2000 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1985, _1986, (log2((isnan(cbSceneParam._m0[77u].w) ? _633 : (isnan(_633) ? cbSceneParam._m0[77u].w : min(_633, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2002 = _2000.x;
    float _2003 = _2000.y;
    float _2004 = _2000.z;
    float _2005 = _2000.w;
    float _2085;
    float _2087;
    float _2089;
    float _2091;
    if (_633 > cbSceneParam._m0[78u].w)
    {
        float _2047 = isnan(_633) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _633 : min(cbSceneParam._m0[80u].w, _633));
        float _2048 = _2047 / _633;
        float _2059 = _2048 * _269;
        float _2060 = _270 * _2048;
        float _2061 = (-0.0) - _2060;
        float _2062 = _2048 * _271;
        float _2064 = (cbSceneParam._m0[77u].w * _2061) / _2047;
        float _2065 = _2064 + cbSceneParam._m0[79u].w;
        float _2066 = cbSceneParam._m0[79u].w - _2060;
        float _2072 = sqrt(((_2059 * _2059) + (_2060 * _2060)) + (_2062 * _2062));
        float _2075 = (1.0 - (cbSceneParam._m0[77u].w / _2047)) * _2072;
        float _2081 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2083 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2298;
        if (abs((_2061 - _2064) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2298 = ((((_2065 > 0.0) ? exp2(_2081 * _2065) : (2.0 - exp2(_2083 * _2065))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2075;
        }
        else
        {
            float _2233 = 1.0 / cbSceneParam._m0[80u].x;
            float _2234 = isnan(_2066) ? _2065 : (isnan(_2065) ? _2066 : max(_2065, _2066));
            float _2235 = isnan(_2066) ? _2065 : (isnan(_2065) ? _2066 : min(_2065, _2066));
            float _2244 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : min(_2234, 0.0));
            float _2245 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : min(_2235, 0.0));
            _2298 = ((abs(_2072 / _2061) * cbSceneParam._m0[80u].y) * ((((_2244 - _2245) * 2.0) - ((exp2(_2081 * (isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0)))) - exp2(_2081 * (isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0))))) * _2233)) - ((exp2(_2083 * _2244) - exp2(_2083 * _2245)) * _2233))) + (_2075 * cbSceneParam._m0[80u].z);
        }
        vec4 _2300 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1985, _1986, 1.0), 0.0);
        float _2309 = exp2((_2298 * (-1.44269502162933349609375)) * (1.0 - _2300.w));
        float _2310 = log2(_2309);
        float _2326 = log2(_2005);
        _2085 = (exp2(_2326 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2310 * cbSceneParam._m0[78u].x)) * _2300.x) / cbSceneParam._m0[78u].x)) + _2002;
        _2087 = (exp2(_2326 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2310 * cbSceneParam._m0[78u].y)) * _2300.y) / cbSceneParam._m0[78u].y)) + _2003;
        _2089 = (exp2(_2326 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2310 * cbSceneParam._m0[78u].z)) * _2300.z) / cbSceneParam._m0[78u].z)) + _2004;
        _2091 = _2309 * _2005;
    }
    else
    {
        _2085 = _2002;
        _2087 = _2003;
        _2089 = _2004;
        _2091 = _2005;
    }
    float _2102 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2103 = _2102 == 3.0;
    float _2105 = log2(_2091);
    float _2109 = exp2(_2105 * cbSceneParam._m0[78u].x);
    float _2110 = exp2(_2105 * cbSceneParam._m0[78u].y);
    float _2111 = exp2(_2105 * cbSceneParam._m0[78u].z);
    float _2112 = _2109 * (isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)));
    float _2113 = _2110 * (isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)));
    float _2114 = _2111 * (isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)));
    float _2123 = (_2102 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2123 * (_2103 ? _2112 : (_2112 + (cbSceneParam._m0[72u].w * _2085)));
    SV_Target.y = _2123 * (_2103 ? _2113 : (_2113 + (cbSceneParam._m0[72u].w * _2087)));
    SV_Target.z = _2123 * (_2103 ? _2114 : (_2114 + (cbSceneParam._m0[72u].w * _2089)));
    SV_Target.w = cbInstanceData._m0[_1977].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1940) * _1976) * _2109) * _2123;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1941) * _1976) * _2110) * _2123;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1942) * _1976) * _2111) * _2123;
    SV_Target_1.w = cbInstanceData._m0[_1977].w;
}


