#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1376;
float _3545;
float _3546;
float _3547;
float _3548;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    vec4 _300 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _303 = _300.x;
    vec4 _321 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _338 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _303) + cbMtdParam._m0[12u].x) * _321.x;
    float _340 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _303) + cbMtdParam._m0[12u].y) * _321.y;
    float _342 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _303) + cbMtdParam._m0[12u].z) * _321.z;
    vec4 _360 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _399 = cbMtdParam._m0[27u].w + _284;
    float _400 = cbMtdParam._m0[28u].x + _285;
    float _401 = cbMtdParam._m0[28u].y + _286;
    float _415 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_214, _215, _216));
    float _416 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_228, _229, _230));
    float _417 = (-0.0) - dot(vec3(_399, _400, _401), vec3((-0.0) - _221, (-0.0) - _222, (-0.0) - _223));
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _424 = _421 * _417;
    float _425 = (_421 * _415) + ((cbMtdParam._m0[25u].w * _303) * ((_360.x * 2.0) + (-1.0)));
    float _426 = (_421 * _416) + ((cbMtdParam._m0[26u].x * _303) * ((_360.y * 2.0) + (-1.0)));
    float _427 = _425 * cbMtdParam._m0[24u].x;
    float _428 = _426 * cbMtdParam._m0[23u].w;
    float _429 = fract(TEXCOORD.x);
    float _430 = fract(TEXCOORD.y);
    float _436;
    if (_427 > 0.0)
    {
        _436 = (1.0 - _429) / _427;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_427 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _429) / _427;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _436 = frontier_phi_3_2_ladder;
    }
    float _444;
    if (_428 > 0.0)
    {
        _444 = (1.0 - _430) / _428;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_428 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _430) / _428;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _444 = frontier_phi_7_6_ladder;
    }
    bool _446 = _424 > 0.0;
    float _448 = _446 ? (cbMtdParam._m0[17u].x / _424) : 5000.0;
    float _449 = isnan(_444) ? _436 : (isnan(_436) ? _444 : min(_436, _444));
    float _450 = isnan(_448) ? _449 : (isnan(_449) ? _448 : min(_449, _448));
    float _454 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _455 = _429 + (-0.5);
    float _458 = _430 + (-0.5);
    float _461 = ((_450 * _424) + _454) / _454;
    vec4 _486 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_455 + (_450 * _427)) / _461) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_458 + (_450 * _428)) / _461) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _499 = (_486.x * _303) * cbMtdParam._m0[9u].x;
    float _500 = (_486.y * _303) * cbMtdParam._m0[9u].y;
    float _501 = (_486.z * _303) * cbMtdParam._m0[9u].z;
    float _519 = _425 * cbMtdParam._m0[26u].z;
    float _520 = _426 * cbMtdParam._m0[26u].y;
    bool _521 = _519 > 0.0;
    float _526;
    if (_521)
    {
        _526 = (1.0 - _429) / _519;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_519 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _429) / _519;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _526 = frontier_phi_11_10_ladder;
    }
    bool _528 = _520 > 0.0;
    float _533;
    if (_528)
    {
        _533 = (1.0 - _430) / _520;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_520 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _430) / _520;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _533 = frontier_phi_15_14_ladder;
    }
    float _536 = _446 ? (cbMtdParam._m0[19u].z / _424) : 5000.0;
    float _537 = isnan(_533) ? _526 : (isnan(_526) ? _533 : min(_526, _533));
    float _538 = isnan(_536) ? _537 : (isnan(_537) ? _536 : min(_537, _536));
    float _542 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _546 = ((_538 * _424) + _542) / _542;
    float _551 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _553 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _569 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_455 + (_538 * _519)) / _546) + 0.5) + _551) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_458 + (_538 * _520)) / _546) + 0.5) + _553) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _584;
    if (_521)
    {
        _584 = (1.0 - _429) / _519;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_519 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _429) / _519;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _584 = frontier_phi_19_18_ladder;
    }
    float _590;
    if (_528)
    {
        _590 = (1.0 - _430) / _520;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_520 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _430) / _520;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _590 = frontier_phi_23_22_ladder;
    }
    float _592 = isnan(_590) ? _584 : (isnan(_584) ? _590 : min(_584, _590));
    float _593 = isnan(_536) ? _592 : (isnan(_592) ? _536 : min(_592, _536));
    float _600 = ((_593 * _424) + _542) / _542;
    vec4 _620 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_455 + (_593 * _519)) / _600) + 0.5) + _551) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_458 + (_593 * _520)) / _600) + 0.5) + _553) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _622 = _620.x;
    float _632 = _303 * 0.1500000059604644775390625;
    float _643 = (_632 * ((_499 - _338) + (((((cbMtdParam._m0[10u].x * _303) * _569.x) - _499) * _303) * _622))) + _338;
    float _644 = (_632 * ((_500 - _340) + (((((cbMtdParam._m0[10u].y * _303) * _569.y) - _500) * _303) * _622))) + _340;
    float _645 = (_632 * ((_501 - _342) + (((((cbMtdParam._m0[10u].z * _303) * _569.z) - _501) * _303) * _622))) + _342;
    vec4 _658 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _662 = _658.z;
    float _665 = (_658.x * 2.0) + (-1.0);
    float _666 = (_658.y * 2.0) + (-1.0);
    float _667 = dot(vec2(_665, _666), vec2(_665, _666));
    float _3587 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _672 = sqrt(1.0 - (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))));
    vec4 _696 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _701 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _707 = ((_696.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _709 = (-0.0) - (cbMtdParam._m0[21u].x * ((_696.x * 0.5) + (-0.25)));
    float _710 = fract(_701);
    float _712 = fract(_701 + 0.5);
    vec4 _739 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_710 * _709) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_707 * _710) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _741 = _739.x;
    float _747 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_712 * _709) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_707 * _712) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _741) * abs((_710 * 2.0) + (-1.0))) + _741;
    float _753 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _757 = fract(abs(_753));
    float _766 = sin(cbMtdParam._m0[21u].z);
    float _767 = cos(cbMtdParam._m0[21u].z);
    float _768 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _769 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _799 = abs(cbMtdParam._m0[20u].w * (((_747 - (((_753 >= ((-0.0) - _753)) ? _757 : ((-0.0) - _757)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_769, (-0.0) - _766, _767 * _768) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_769, _767, _768 * _766) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _803 = (((_799 * cbMtdParam._m0[18u].y) - _747) * _799) + _747;
    float _3598 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _804 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    vec4 _816 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _831 = (cbMtdParam._m0[14u].x * _816.x) * cbMtdParam._m0[19u].x;
    float _832 = (cbMtdParam._m0[14u].y * _816.y) * cbMtdParam._m0[19u].x;
    float _833 = (cbMtdParam._m0[14u].z * _816.z) * cbMtdParam._m0[19u].x;
    float _843 = exp2(log2(_804) * cbMtdParam._m0[20u].x);
    float _856 = fma(_672, _221, fma(_666, _228, _665 * _214));
    float _859 = fma(_672, _222, fma(_666, _229, _665 * _215));
    float _862 = fma(_672, _223, fma(_666, _230, _665 * _216));
    float _866 = inversesqrt(dot(vec3(_856, _859, _862), vec3(_856, _859, _862)));
    float _867 = _866 * _856;
    float _868 = _866 * _859;
    float _869 = _866 * _862;
    float _3609 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _870 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _3631 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _3642 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _889 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _893 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _894 = _284 * _893;
    float _895 = _285 * _893;
    float _896 = _286 * _893;
    vec4 _901 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _903 = _901.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1058 = sqrt(((_284 * _284) + (_285 * _285)) + (_286 * _286));
        float _1064 = (cbMatDynParam._m0[5u].x * _1058) + cbMatDynParam._m0[5u].y;
        float _3653 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1069 = (cbMatDynParam._m0[5u].z * _1058) + cbMatDynParam._m0[5u].w;
        float _3664 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) - _1065)) + _1065) < ((_903 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _915 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _916 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _934 = fma(_869, cbSceneParam._m0[5u].z, fma(_868, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _867));
    float _937 = fma(_869, cbSceneParam._m0[6u].z, fma(_868, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _867));
    float _940 = fma(_869, cbSceneParam._m0[7u].z, fma(_868, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _867));
    uint _953 = uint(roundEven(NORMAL.w)) * 13u;
    uint _954 = _953 + 9u;
    uint _955 = _954 + uint(cbMatDynParam._m0[0u].w);
    float _961 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_955].x;
    float _962 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_955].y;
    float _963 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * cbInstanceData._m0[_955].z;
    float _3675 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    vec4 _975 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _915, cbSceneParam._m0[86u].y * _916));
    float _978 = _975.x * TEXCOORD_4;
    float _979 = dot(vec3(_867, _868, _869), vec3(_894, _895, _896));
    float _982 = _979 * 2.0;
    float _986 = (_982 * _867) - _894;
    float _987 = (_982 * _868) - _895;
    float _988 = (_982 * _869) - _896;
    float _992 = abs(dot(vec3(_894, _895, _896), vec3(_867, _868, _869)));
    float _3708 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _994 = sqrt(_870);
    float _1007 = exp2((_994 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_994 * 3.0));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1375;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1102 = fma(_1047, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039));
        float _1106 = fma(_1047, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039));
        float _1110 = fma(_1047, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039));
        float _1133 = _1039 + _867;
        float _1134 = _1043 + _868;
        float _1135 = _1047 + _869;
        float _1145 = fma(_1135, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133)) - _1102;
        float _1146 = fma(_1135, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133)) - _1106;
        float _1147 = fma(_1135, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133)) - _1110;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1102 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1106 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[34u].z) + ((((((_1110 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1203 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1169.x + (-0.5));
        float _1205 = _1203 * (_1169.y + (-0.5));
        float _1206 = _1203 * (_1169.z + (-0.5));
        float _1213 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1176.x + (-0.5));
        float _1215 = _1213 * (_1176.y + (-0.5));
        float _1216 = _1213 * (_1176.z + (-0.5));
        float _1223 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1183.x + (-0.5));
        float _1225 = _1223 * (_1183.y + (-0.5));
        float _1226 = _1223 * (_1183.z + (-0.5));
        float _1233 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1190.x + (-0.5));
        float _1235 = _1233 * (_1190.y + (-0.5));
        float _1236 = _1233 * (_1190.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1257 = (dot(vec3(_867, _868, _869), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1267 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3756 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1269 + 1.0))) + _1274) * _1237;
        float _1284 = _1205 * 0.5;
        float _1285 = _1215 * 0.5;
        float _1286 = _1225 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_867, _868, _869), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3789 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1311 + 1.0))) + _1316) * _1238;
        float _1326 = _1206 * 0.5;
        float _1327 = _1216 * 0.5;
        float _1328 = _1226 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_867, _868, _869), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3822 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1353 + 1.0))) + _1358) * _1239;
        _1375 = _1206;
        _1377 = _1205;
        _1378 = _1204;
        _1379 = _1216;
        _1380 = _1215;
        _1381 = _1214;
        _1382 = _1226;
        _1383 = _1225;
        _1384 = _1224;
        _1385 = _1239;
        _1386 = _1238;
        _1387 = _1237;
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1376;
        _1377 = _1376;
        _1378 = _1376;
        _1379 = _1376;
        _1380 = _1376;
        _1381 = _1376;
        _1382 = _1376;
        _1383 = _1376;
        _1384 = _1376;
        _1385 = _1376;
        _1386 = _1376;
        _1387 = _1376;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1418 = fma(_1047, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039));
        float _1422 = fma(_1047, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039));
        float _1426 = fma(_1047, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039));
        float _1449 = _1039 + _867;
        float _1450 = _1043 + _868;
        float _1451 = _1047 + _869;
        float _1461 = fma(_1451, cbModelParam._m0[30u].z, fma(_1450, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1449)) - _1418;
        float _1462 = fma(_1451, cbModelParam._m0[31u].z, fma(_1450, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1449)) - _1422;
        float _1463 = fma(_1451, cbModelParam._m0[32u].z, fma(_1450, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1449)) - _1426;
        float _1467 = inversesqrt(dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463)));
        float _1480 = ((_1467 * _1461) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1418 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1467 * _1462) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1422 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1467 * _1463) / cbModelParam._m0[35u].z) + ((((((_1426 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        float _1517 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1484.x + (-0.5));
        float _1519 = _1517 * (_1484.y + (-0.5));
        float _1520 = _1517 * (_1484.z + (-0.5));
        float _1527 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1491.x + (-0.5));
        float _1529 = _1527 * (_1491.y + (-0.5));
        float _1530 = _1527 * (_1491.z + (-0.5));
        float _1537 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1498.x + (-0.5));
        float _1539 = _1537 * (_1498.y + (-0.5));
        float _1540 = _1537 * (_1498.z + (-0.5));
        float _1547 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1505.x + (-0.5));
        float _1549 = _1547 * (_1505.y + (-0.5));
        float _1550 = _1547 * (_1505.z + (-0.5));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = _1518 * 0.5;
        float _1555 = _1528 * 0.5;
        float _1556 = _1538 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_867, _868, _869), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _3885 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1581 + 1.0))) + _1586) * _1551;
        float _1596 = _1519 * 0.5;
        float _1597 = _1529 * 0.5;
        float _1598 = _1539 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_867, _868, _869), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _3918 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1623 + 1.0))) + _1628) * _1552;
        float _1638 = _1520 * 0.5;
        float _1639 = _1530 * 0.5;
        float _1640 = _1540 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_867, _868, _869), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _3951 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1665 + 1.0))) + _1670) * _1553;
        _1687 = _1520;
        _1688 = _1519;
        _1689 = _1518;
        _1690 = _1530;
        _1691 = _1529;
        _1692 = _1528;
        _1693 = _1540;
        _1694 = _1539;
        _1695 = _1538;
        _1696 = _1553;
        _1697 = _1552;
        _1698 = _1551;
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
    }
    else
    {
        _1687 = _1376;
        _1688 = _1376;
        _1689 = _1376;
        _1690 = _1376;
        _1691 = _1376;
        _1692 = _1376;
        _1693 = _1376;
        _1694 = _1376;
        _1695 = _1376;
        _1696 = _1376;
        _1697 = _1376;
        _1698 = _1376;
        _1699 = 0.0;
        _1700 = 0.0;
        _1701 = 0.0;
    }
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1388)) + _1388;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1389)) + _1389;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1390)) + _1390;
    float _1734 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1711));
    float _1755 = _986 * 0.5;
    float _1756 = _987 * 0.5;
    float _1757 = _988 * 0.5;
    float _1758 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1761 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1764 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1798;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1771 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1375, _1379, _1382, _1385));
        float _1775 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1779 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1786 = dot(vec4(cbModelParam._m0[39u]), vec4(_1755, _1756, _1757, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1809;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1800 = dot(vec4(cbModelParam._m0[40u]), vec4(_1755, _1756, _1757, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1800) ? 0.0 : (isnan(0.0) ? _1800 : max(0.0, _1800))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1813 = (_1809 * cbModelParam._m0[1u].x) + (_1798 * (1.0 - cbModelParam._m0[1u].x));
    float _1823 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _870);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1823 : min(cbModelParam._m0[25u].z, _1823));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1872 = fma(_1047, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039)) + cbModelParam._m0[13u].w;
        float _1876 = fma(_1047, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039)) + cbModelParam._m0[14u].w;
        float _1880 = fma(_1047, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039)) + cbModelParam._m0[15u].w;
        float _1883 = fma(_988, cbModelParam._m0[13u].z, fma(_987, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _986));
        float _1886 = fma(_988, cbModelParam._m0[14u].z, fma(_987, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _986));
        float _1889 = fma(_988, cbModelParam._m0[15u].z, fma(_987, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _986));
        float _1917;
        if (_1883 > 0.0)
        {
            _1917 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1917 = frontier_phi_41_39_ladder;
        }
        float _2262;
        if (_1886 > 0.0)
        {
            _2262 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2262 = frontier_phi_50_46_ladder;
        }
        float _2604;
        if (_1889 > 0.0)
        {
            _2604 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2604 = frontier_phi_64_57_ladder;
        }
        float _2606 = isnan(_2262) ? _1917 : (isnan(_1917) ? _2262 : min(_1917, _2262));
        float _2607 = isnan(_2604) ? _2606 : (isnan(_2606) ? _2604 : min(_2606, _2604));
        float _2611 = (_2607 * _1883) + _1872;
        float _2612 = (_2607 * _1886) + _1876;
        float _2613 = (_2607 * _1889) + _1880;
        float _2614 = _2607 * 9.9999997473787516355514526367188e-05;
        float _2615 = (-1.0) - _2614;
        float _2617 = _2614 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2613 > _2617) || ((_2613 < _2615) || ((_2612 > _2617) || ((_2612 < _2615) || ((_2611 < _2615) || (_2611 > _2617))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2755 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2613, cbModelParam._m0[9u].z, fma(_2612, cbModelParam._m0[9u].y, _2611 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2613, cbModelParam._m0[10u].z, fma(_2612, cbModelParam._m0[10u].y, _2611 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2613, cbModelParam._m0[11u].z, fma(_2612, cbModelParam._m0[11u].y, _2611 * cbModelParam._m0[11u].x))), _1824);
            frontier_phi_40_64_ladder = _2755.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2755.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2755.x * cbModelParam._m0[1u].y;
        }
        _1905 = frontier_phi_40_64_ladder_2;
        _1907 = frontier_phi_40_64_ladder_1;
        _1909 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_986, _987, _988), _1824);
        _1905 = _1893.x * cbModelParam._m0[1u].y;
        _1907 = _1893.y * cbModelParam._m0[1u].y;
        _1909 = _1893.z * cbModelParam._m0[1u].y;
    }
    float _1913 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _870);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1913 : min(cbModelParam._m0[25u].w, _1913));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1966 = fma(_1047, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039)) + cbModelParam._m0[21u].w;
        float _1970 = fma(_1047, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039)) + cbModelParam._m0[22u].w;
        float _1974 = fma(_1047, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039)) + cbModelParam._m0[23u].w;
        float _1977 = fma(_988, cbModelParam._m0[21u].z, fma(_987, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _986));
        float _1980 = fma(_988, cbModelParam._m0[22u].z, fma(_987, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _986));
        float _1983 = fma(_988, cbModelParam._m0[23u].z, fma(_987, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _986));
        float _2267;
        if (_1977 > 0.0)
        {
            _2267 = abs((1.0 - _1966) / _1977);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1966 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2267 = frontier_phi_52_48_ladder;
        }
        float _2630;
        if (_1980 > 0.0)
        {
            _2630 = abs((1.0 - _1970) / _1980);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1970 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2630 = frontier_phi_66_59_ladder;
        }
        float _2820;
        if (_1983 > 0.0)
        {
            _2820 = abs((1.0 - _1974) / _1983);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1974 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2820 = frontier_phi_84_77_ladder;
        }
        float _2822 = isnan(_2630) ? _2267 : (isnan(_2267) ? _2630 : min(_2267, _2630));
        float _2823 = isnan(_2820) ? _2822 : (isnan(_2822) ? _2820 : min(_2822, _2820));
        float _2827 = (_2823 * _1977) + _1966;
        float _2828 = (_2823 * _1980) + _1970;
        float _2829 = (_2823 * _1983) + _1974;
        float _2830 = _2823 * 9.9999997473787516355514526367188e-05;
        float _2831 = (-1.0) - _2830;
        float _2833 = _2830 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2829 > _2833) || ((_2829 < _2831) || ((_2828 > _2833) || ((_2828 < _2831) || ((_2827 < _2831) || (_2827 > _2833))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3071 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2829, cbModelParam._m0[17u].z, fma(_2828, cbModelParam._m0[17u].y, _2827 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2829, cbModelParam._m0[18u].z, fma(_2828, cbModelParam._m0[18u].y, _2827 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2829, cbModelParam._m0[19u].z, fma(_2828, cbModelParam._m0[19u].y, _2827 * cbModelParam._m0[19u].x))), _1914);
            frontier_phi_49_84_ladder = _3071.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _3071.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _3071.x * cbModelParam._m0[1u].z;
        }
        _2002 = frontier_phi_49_84_ladder_2;
        _2004 = frontier_phi_49_84_ladder_1;
        _2006 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1986 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_986, _987, _988), _1914);
        _2002 = _1986.x * cbModelParam._m0[1u].z;
        _2004 = _1986.y * cbModelParam._m0[1u].z;
        _2006 = _1986.z * cbModelParam._m0[1u].z;
    }
    float _2018 = ((((1.0 - _1007) * ((_994 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1007 * _994)) * _978;
    float _2019 = _2018 * ((cbModelParam._m0[1u].w * (_2002 - _1905)) + _1905);
    float _2020 = _2018 * ((cbModelParam._m0[1u].w * (_2004 - _1907)) + _1907);
    float _2021 = _2018 * ((cbModelParam._m0[1u].w * (_2006 - _1909)) + _1909);
    float _2024 = fma(_2021, cbSceneParam._m0[89u].z, fma(_2020, cbSceneParam._m0[89u].y, _2019 * cbSceneParam._m0[89u].x));
    float _2027 = fma(_2021, cbSceneParam._m0[90u].z, fma(_2020, cbSceneParam._m0[90u].y, _2019 * cbSceneParam._m0[90u].x));
    float _2030 = fma(_2021, cbSceneParam._m0[91u].z, fma(_2020, cbSceneParam._m0[91u].y, _2019 * cbSceneParam._m0[91u].x));
    uvec4 _2040 = floatBitsToUint(cbInstanceData._m0[_953 + 5u]);
    uint _2042 = _2040.x * 14u;
    uint _2043 = _2042 + 13u;
    float _2048 = _978 + (-1.0);
    float _2051 = (cbLight._m0[_2043].x * _2048) + 1.0;
    float _2052 = (cbLight._m0[_2043].y * _2048) + 1.0;
    uint _2053 = _2042 + 5u;
    float _2059 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
    uint _2063 = _2042 + 4u;
    float _2069 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2073 = _2042 | 1u;
    float _2084 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_867, _868, _869));
    float _2087 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_867, _868, _869));
    float _4087 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _4098 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2092 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _2094 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.3183098733425140380859375;
    float _2101 = ((cbLight._m0[_2053].x * _2059) * _2094) + ((cbLight._m0[_2063].x * _2069) * _2092);
    float _2102 = ((_2059 * cbLight._m0[_2053].y) * _2094) + ((_2069 * cbLight._m0[_2063].y) * _2092);
    float _2103 = ((_2059 * cbLight._m0[_2053].z) * _2094) + ((_2069 * cbLight._m0[_2063].z) * _2092);
    uint _2105 = _2042 + 8u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _870) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_2042].x + _894;
    float _2121 = cbLight._m0[_2042].y + _895;
    float _2122 = cbLight._m0[_2042].z + _896;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2042].xyz));
    float _4109 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _2134 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2135 = dot(vec3(_867, _868, _869), vec3(_2127, _2128, _2129));
    float _4131 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2139 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2127, _2128, _2129));
    float _4142 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2143 = _2119 * _2119;
    float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
    float _2158 = (exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2159 = 1.0 - _2119;
    float _2170 = (0.5 / (((_2134 * ((_2133 * _2159) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2159) + _2119) * _2133))) * _2133;
    float _4153 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2172 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
    uint _2183 = _2042 + 9u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _870) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_2073].x + _894;
    float _2197 = cbLight._m0[_2073].y + _895;
    float _2198 = cbLight._m0[_2073].z + _896;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2073].xyz));
    float _4164 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2210 = dot(vec3(_867, _868, _869), vec3(_2203, _2204, _2205));
    float _4175 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2203, _2204, _2205));
    float _4186 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2195 * _2195;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2231 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2232 = 1.0 - _2195;
    float _2242 = (0.5 / (((_2134 * ((_2209 * _2232) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2232) + _2195) * _2209))) * _2209;
    float _4197 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    float _2254 = (((_2231 * cbLight._m0[_2183].x) * _2244) * _2059) + (((_2158 * cbLight._m0[_2105].x) * _2172) * _2069);
    float _2255 = (((_2231 * cbLight._m0[_2183].y) * _2244) * _2059) + (((_2158 * cbLight._m0[_2105].y) * _2172) * _2069);
    float _2256 = (((_2231 * cbLight._m0[_2183].z) * _2244) * _2059) + (((_2158 * cbLight._m0[_2105].z) * _2172) * _2069);
    float _2371;
    float _2373;
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    if (_2040.y == 0u)
    {
        float _2311 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2312 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2311;
        float _2313 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2311;
        float _2314 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2311;
        uvec4 _2326 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2327 = _2326.x;
        uint _2338 = uint((float(_2326.y) * floor(float(uint(cbSceneParam._m0[85u].y * _916) / _2327))) + floor(float(uint(cbSceneParam._m0[85u].x * _915) / _2327)));
        float _2348 = (log2(_2314 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2349 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        uint _2352 = uint(isnan(14.0) ? _2349 : (isnan(_2349) ? 14.0 : min(_2349, 14.0)));
        uvec4 _2357 = texelFetch(g_lightClusterGridBuffer, int(((_2352 << 2u) + (_2338 << 6u)) >> 2u));
        uint _2358 = _2357.x;
        uint _2359 = _2326.z;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        if (((((1u << ((_2359 >> 4u) & 15u)) + 4294967295u) & _2358) == 0u) || ((_2359 & 240u) == 0u))
        {
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
        }
        else
        {
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2484;
            float _2486;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            uint _2673 = 0u;
            uint _2682;
            bool _2683;
            for (;;)
            {
                _2682 = texelFetch(g_lightClassification, int((((_2352 << 5u) + (_2338 << 9u)) + (_2673 << 2u)) >> 2u)).x;
                _2683 = _2682 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2683)
                {
                    frontier_phi_79_pred = _2672;
                    frontier_phi_79_pred_1 = _2671;
                    frontier_phi_79_pred_2 = _2670;
                    frontier_phi_79_pred_3 = _2669;
                    frontier_phi_79_pred_4 = _2668;
                    frontier_phi_79_pred_5 = _2667;
                }
                else
                {
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    uint _2869;
                    _2863 = _2667;
                    _2864 = _2668;
                    _2865 = _2669;
                    _2866 = _2670;
                    _2867 = _2671;
                    _2868 = _2672;
                    _2869 = _2682;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    for (;;)
                    {
                        uint _2873 = uint(findLSB(_2869)) + (_2673 << 5u);
                        uint _2870 = (_2869 + 4294967295u) & _2869;
                        uint _2875 = _2873 * 48u;
                        vec4 _2889 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 3u)).x));
                        uint _2895 = (_2873 * 48u) + 4u;
                        vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 3u)).x));
                        uint _2914 = (_2873 * 48u) + 8u;
                        vec3 _2925 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x));
                        float _2929 = _2889.x - _2312;
                        float _2930 = _2889.y - _2313;
                        float _2931 = _2889.z - _2314;
                        float _2932 = dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931));
                        float _2935 = inversesqrt(_2932);
                        float _2936 = _2935 * _2929;
                        float _2937 = _2935 * _2930;
                        float _2938 = _2935 * _2931;
                        float _2939 = dot(vec3(_934, _937, _940), vec3(_2936, _2937, _2938));
                        float _2944 = 1.0 - (_2932 * _2889.w);
                        float _4218 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2945 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                        float _2946 = sqrt(_2932) * _2908.w;
                        float _2949 = 1.39999997615814208984375 / (_2946 + 1.39999997615814208984375);
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2939) + _2950;
                        float _2956 = _2946 * _2946;
                        float _2960 = ((isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0))) * _2945) / ((_2956 * 0.699999988079071044921875) + 1.0);
                        float _2964 = (-0.0) - _2312;
                        float _2965 = (-0.0) - _2313;
                        float _2966 = (-0.0) - _2314;
                        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
                        float _2971 = _2970 * _2964;
                        float _2972 = _2970 * _2965;
                        float _2973 = _2970 * _2966;
                        float _2981 = exp2(log2(1.0 / ((_2956 * 3.5) + 5.0)) * 0.25);
                        float _2982 = 1.0 - _994;
                        float _2989 = sqrt(1.0 - ((1.0 - (_2982 * _2982)) * (1.0 - (_2981 * _2981))));
                        float _2990 = _2989 * _2989;
                        float _2991 = _2990 * _2990;
                        float _2992 = _2971 + _2936;
                        float _2993 = _2972 + _2937;
                        float _2994 = _2973 + _2938;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _3002 = dot(vec3(_934, _937, _940), vec3(_2971, _2972, _2973));
                        float _4234 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _3006 = dot(vec3(_934, _937, _940), vec3(_2998 * _2992, _2998 * _2993, _2998 * _2994));
                        float _4245 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3009 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _3013 = ((_3009 * _3009) * (_2991 + (-1.0))) + 1.0;
                        float _3014 = _2949 * _2990;
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _2939) + _3015;
                        float _4256 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3019 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _3020 = 1.0 - _2990;
                        float _3030 = (0.5 / (((_3019 * ((_3005 * _3020) + _2990)) + 9.9999999392252902907785028219223e-09) + (((_3019 * _3020) + _2990) * _3005))) * _3019;
                        float _4267 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3041 = (((_2991 * 3.1415927410125732421875) * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) / ((_3013 * _3013) * ((_2956 * 2.1991131305694580078125) + 3.141590118408203125))) * _2945;
                        _2767 = (_2960 * _2908.x) + _2866;
                        _2768 = (_2960 * _2908.y) + _2867;
                        _2769 = (_2960 * _2908.z) + _2868;
                        _2764 = (_3041 * _2925.x) + _2863;
                        _2765 = (_3041 * _2925.y) + _2864;
                        _2766 = (_3041 * _2925.z) + _2865;
                        if (_2870 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2863 = _2764;
                            _2864 = _2765;
                            _2865 = _2766;
                            _2866 = _2767;
                            _2867 = _2768;
                            _2868 = _2769;
                            _2869 = _2870;
                        }
                    }
                    frontier_phi_79_pred = _2769;
                    frontier_phi_79_pred_1 = _2768;
                    frontier_phi_79_pred_2 = _2767;
                    frontier_phi_79_pred_3 = _2766;
                    frontier_phi_79_pred_4 = _2765;
                    frontier_phi_79_pred_5 = _2764;
                }
                _2486 = frontier_phi_79_pred;
                _2484 = frontier_phi_79_pred_1;
                _2482 = frontier_phi_79_pred_2;
                _2480 = frontier_phi_79_pred_3;
                _2478 = frontier_phi_79_pred_4;
                _2476 = frontier_phi_79_pred_5;
                uint _2674 = _2673 + 1u;
                if (_2674 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2667 = _2476;
                    _2668 = _2478;
                    _2669 = _2480;
                    _2670 = _2482;
                    _2671 = _2484;
                    _2672 = _2486;
                    _2673 = _2674;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
        }
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.z;
        uint _2492 = (_2490 >> 8u) & 15u;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        if (((4294967295u << _2492) & _2358) == 0u)
        {
            _2635 = _2475;
            _2637 = _2477;
            _2639 = _2479;
            _2641 = _2481;
            _2643 = _2483;
            _2645 = _2485;
        }
        else
        {
            float _2660 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
            float _2661 = _2660 * _2312;
            float _2662 = _2660 * _2313;
            float _2663 = _2660 * _2314;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2492 < ((_2490 >> 12u) & 15u))
            {
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2846 = _2475;
                float _2847 = _2477;
                float _2848 = _2479;
                float _2849 = _2481;
                float _2850 = _2483;
                float _2851 = _2485;
                uint _2852 = _2492;
                uint _2861;
                bool _2862;
                for (;;)
                {
                    _2861 = texelFetch(g_lightClassification, int((((_2352 << 5u) + (_2338 << 9u)) + (_2852 << 2u)) >> 2u)).x;
                    _2862 = _2861 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2862)
                    {
                        frontier_phi_93_pred = _2850;
                        frontier_phi_93_pred_1 = _2849;
                        frontier_phi_93_pred_2 = _2848;
                        frontier_phi_93_pred_3 = _2847;
                        frontier_phi_93_pred_4 = _2846;
                        frontier_phi_93_pred_5 = _2851;
                    }
                    else
                    {
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3089 = _2846;
                        float _3090 = _2847;
                        float _3091 = _2848;
                        float _3092 = _2849;
                        float _3093 = _2850;
                        float _3094 = _2851;
                        uint _3095 = _2861;
                        uint _3096;
                        vec4 _3121;
                        float _3122;
                        vec4 _3137;
                        vec3 _3149;
                        vec4 _3165;
                        vec4 _3180;
                        float _3226;
                        bool _3227;
                        for (;;)
                        {
                            uint _3106 = ((_2852 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3095));
                            _3096 = (_3095 + 4294967295u) & _3095;
                            uint _3108 = _3106 * 40u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3122 = _3121.w;
                            uint _3124 = (_3106 * 40u) + 4u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3106 * 40u) + 8u;
                            _3149 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x));
                            uint _3152 = (_3106 * 40u) + 16u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3167 = (_3106 * 40u) + 20u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3106 * 40u) + 24u;
                            vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3201 = (_3106 * 40u) + 28u;
                            vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            _3226 = fma(_2314, _3214.z, fma(_2313, _3214.y, _3214.x * _2312)) + _3214.w;
                            _3227 = !((fma(_2314, _3195.z, fma(_2313, _3195.y, _3195.x * _2312)) + _3195.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3227)
                            {
                                float _3254 = _3121.x - _2312;
                                float _3255 = _3121.y - _2313;
                                float _3256 = _3121.z - _2314;
                                float _3257 = dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256));
                                float _3260 = inversesqrt(_3257);
                                float _3261 = _3260 * _3254;
                                float _3262 = _3260 * _3255;
                                float _3263 = _3260 * _3256;
                                float _3267 = 1.0 - (_3257 / (_3122 * _3122));
                                float _4278 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3272 = sqrt(_3257) * _3137.w;
                                float _3274 = 1.39999997615814208984375 / (_3272 + 1.39999997615814208984375);
                                float _3275 = _3274 * _3274;
                                float _3278 = ((1.0 - _3275) * dot(vec3(_3261, _3262, _3263), vec3(_934, _937, _940))) + _3275;
                                float _3281 = _3272 * _3272;
                                float _3285 = (fma(_2314, _3165.z, fma(_2313, _3165.y, _3165.x * _2312)) + _3165.w) / _3226;
                                float _3286 = (fma(_2314, _3180.z, fma(_2313, _3180.y, _3180.x * _2312)) + _3180.w) / _3226;
                                float _3290 = 1.0 - dot(vec2(_3285, _3286), vec2(_3285, _3286));
                                float _4294 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3291 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3292 = _3291 * (((isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))) * _3268) / ((_3281 * 0.699999988079071044921875) + 1.0));
                                float _3304 = exp2(log2(1.0 / ((_3281 * 3.5) + 5.0)) * 0.25);
                                float _3305 = 1.0 - _994;
                                float _3312 = sqrt(1.0 - ((1.0 - (_3305 * _3305)) * (1.0 - (_3304 * _3304))));
                                float _3313 = _3312 * _3312;
                                float _3314 = _3313 * _3313;
                                float _3315 = _3261 - _2661;
                                float _3316 = _3262 - _2662;
                                float _3317 = _3263 - _2663;
                                float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                                float _3325 = dot(vec3(_934, _937, _940), vec3((-0.0) - _2661, (-0.0) - _2662, (-0.0) - _2663));
                                float _4305 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3328 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3329 = dot(vec3(_934, _937, _940), vec3(_3321 * _3315, _3321 * _3316, _3321 * _3317));
                                float _4316 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3332 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3336 = ((_3332 * _3332) * (_3314 + (-1.0))) + 1.0;
                                float _3337 = _3274 * _3313;
                                float _3338 = _3337 * _3337;
                                float _3344 = ((1.0 - _3338) * dot(vec3(_934, _937, _940), vec3(_3261, _3262, _3263))) + _3338;
                                float _4327 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3345 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3346 = 1.0 - _3313;
                                float _3356 = (0.5 / (((_3345 * ((_3328 * _3346) + _3313)) + 9.9999999392252902907785028219223e-09) + (((_3345 * _3346) + _3313) * _3328))) * _3345;
                                float _4338 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3366 = (_3291 * _3268) * (((_3314 * 3.1415927410125732421875) * (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) / ((_3336 * _3336) * ((_3281 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3292 * _3137.z;
                                frontier_phi_99_pred_1 = _3292 * _3137.y;
                                frontier_phi_99_pred_2 = _3292 * _3137.x;
                                frontier_phi_99_pred_3 = _3366 * _3149.z;
                                frontier_phi_99_pred_4 = _3366 * _3149.y;
                                frontier_phi_99_pred_5 = _3366 * _3149.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3375 = frontier_phi_99_pred;
                            _3374 = frontier_phi_99_pred_1;
                            _3373 = frontier_phi_99_pred_2;
                            _3372 = frontier_phi_99_pred_3;
                            _3371 = frontier_phi_99_pred_4;
                            _3370 = frontier_phi_99_pred_5;
                            _3079 = _3373 + _3092;
                            _3080 = _3374 + _3093;
                            _3081 = _3375 + _3094;
                            _3076 = _3370 + _3089;
                            _3077 = _3371 + _3090;
                            _3078 = _3372 + _3091;
                            if (_3096 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3096;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _3080;
                        frontier_phi_93_pred_1 = _3079;
                        frontier_phi_93_pred_2 = _3078;
                        frontier_phi_93_pred_3 = _3077;
                        frontier_phi_93_pred_4 = _3076;
                        frontier_phi_93_pred_5 = _3081;
                    }
                    _2644 = frontier_phi_93_pred;
                    _2642 = frontier_phi_93_pred_1;
                    _2640 = frontier_phi_93_pred_2;
                    _2638 = frontier_phi_93_pred_3;
                    _2636 = frontier_phi_93_pred_4;
                    _2646 = frontier_phi_93_pred_5;
                    uint _2853 = _2852 + 1u;
                    if (_2853 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2846 = _2636;
                        _2847 = _2638;
                        _2848 = _2640;
                        _2849 = _2642;
                        _2850 = _2644;
                        _2851 = _2646;
                        _2852 = _2853;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2646;
                frontier_phi_68_69_ladder_1 = _2644;
                frontier_phi_68_69_ladder_2 = _2642;
                frontier_phi_68_69_ladder_3 = _2640;
                frontier_phi_68_69_ladder_4 = _2636;
                frontier_phi_68_69_ladder_5 = _2638;
            }
            else
            {
                frontier_phi_68_69_ladder = _2485;
                frontier_phi_68_69_ladder_1 = _2483;
                frontier_phi_68_69_ladder_2 = _2481;
                frontier_phi_68_69_ladder_3 = _2479;
                frontier_phi_68_69_ladder_4 = _2475;
                frontier_phi_68_69_ladder_5 = _2477;
            }
            _2635 = frontier_phi_68_69_ladder_4;
            _2637 = frontier_phi_68_69_ladder_5;
            _2639 = frontier_phi_68_69_ladder_3;
            _2641 = frontier_phi_68_69_ladder_2;
            _2643 = frontier_phi_68_69_ladder_1;
            _2645 = frontier_phi_68_69_ladder;
        }
        float _2650 = isnan(1.0) ? _978 : (isnan(_978) ? 1.0 : min(_978, 1.0));
        _2371 = (_2650 * _2641) + _2101;
        _2373 = (_2650 * _2643) + _2102;
        _2375 = (_2650 * _2645) + _2103;
        _2377 = ((_2635 * 0.039999999105930328369140625) * _2650) + _2254;
        _2379 = ((_2637 * 0.039999999105930328369140625) * _2650) + _2255;
        _2381 = ((_2639 * 0.039999999105930328369140625) * _2650) + _2256;
    }
    else
    {
        _2371 = _2101;
        _2373 = _2102;
        _2375 = _2103;
        _2377 = _2254;
        _2379 = _2255;
        _2381 = _2256;
    }
    uint _2387 = _954 + uint(cbMatDynParam._m0[0u].w);
    float _2393 = ((_843 * (_831 - (_831 * _804))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2387].x;
    float _2394 = ((_843 * (_832 - (_832 * _804))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2387].y;
    float _2395 = ((_843 * (_833 - (_833 * _804))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2387].z;
    float _4354 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4365 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4376 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _2412 = (((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2371 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _978))) + ((_2377 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1813)) * cbPerFrame._m0[3u].x)) + _2393;
    float _2414 = (_2394 + ((_2379 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1813)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2373 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _978)));
    float _2416 = (_2395 + ((_2381 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1813)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2375 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _978)));
    float _2417 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2418 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2419 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2425 = cbMtdParam._m0[2u].x * _2393;
    float _2426 = cbMtdParam._m0[2u].y * _2394;
    float _2427 = cbMtdParam._m0[2u].z * _2395;
    float _4402 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2429 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    uint _2430 = _953 + 6u;
    float _2438 = _915 / cbSceneParam._m0[86u].x;
    float _2439 = _916 / cbSceneParam._m0[86u].y;
    vec4 _2453 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2438, _2439, (log2((isnan(cbSceneParam._m0[77u].w) ? _889 : (isnan(_889) ? cbSceneParam._m0[77u].w : min(_889, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2455 = _2453.x;
    float _2456 = _2453.y;
    float _2457 = _2453.z;
    float _2458 = _2453.w;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    if (_889 > cbSceneParam._m0[78u].w)
    {
        float _2500 = isnan(_889) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _889 : min(cbSceneParam._m0[80u].w, _889));
        float _2501 = _2500 / _889;
        float _2512 = _2501 * _284;
        float _2513 = _285 * _2501;
        float _2514 = (-0.0) - _2513;
        float _2515 = _2501 * _286;
        float _2517 = (cbSceneParam._m0[77u].w * _2514) / _2500;
        float _2518 = _2517 + cbSceneParam._m0[79u].w;
        float _2519 = cbSceneParam._m0[79u].w - _2513;
        float _2525 = sqrt(((_2512 * _2512) + (_2513 * _2513)) + (_2515 * _2515));
        float _2528 = (1.0 - (cbSceneParam._m0[77u].w / _2500)) * _2525;
        float _2534 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2536 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2777;
        if (abs((_2514 - _2517) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2777 = ((((_2518 > 0.0) ? exp2(_2534 * _2518) : (2.0 - exp2(_2536 * _2518))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2528;
        }
        else
        {
            float _2696 = 1.0 / cbSceneParam._m0[80u].x;
            float _2697 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : max(_2518, _2519));
            float _2698 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : min(_2518, _2519));
            float _2707 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : min(_2697, 0.0));
            float _2708 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : min(_2698, 0.0));
            _2777 = ((abs(_2525 / _2514) * cbSceneParam._m0[80u].y) * ((((_2707 - _2708) * 2.0) - ((exp2(_2534 * (isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0)))) - exp2(_2534 * (isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0))))) * _2696)) - ((exp2(_2536 * _2707) - exp2(_2536 * _2708)) * _2696))) + (_2528 * cbSceneParam._m0[80u].z);
        }
        vec4 _2779 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2438, _2439, 1.0), 0.0);
        float _2788 = exp2((_2777 * (-1.44269502162933349609375)) * (1.0 - _2779.w));
        float _2789 = log2(_2788);
        float _2805 = log2(_2458);
        _2538 = (exp2(_2805 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].x)) * _2779.x) / cbSceneParam._m0[78u].x)) + _2455;
        _2540 = (exp2(_2805 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].y)) * _2779.y) / cbSceneParam._m0[78u].y)) + _2456;
        _2542 = (exp2(_2805 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].z)) * _2779.z) / cbSceneParam._m0[78u].z)) + _2457;
        _2544 = _2788 * _2458;
    }
    else
    {
        _2538 = _2455;
        _2540 = _2456;
        _2542 = _2457;
        _2544 = _2458;
    }
    bool _2815;
    vec4 _2553;
    vec4 _2575;
    float _2577;
    float _2581;
    float _2582;
    float _2583;
    float _2586;
    float _2589;
    float _2592;
    float _2593;
    bool _2603;
    for (;;)
    {
        _2553 = cbMatDynParam._m0[0u];
        float _2555 = roundEven(_2553.y);
        bool _2556 = _2555 == 3.0;
        float _2557 = log2(_2544);
        float _2561 = exp2(_2557 * cbSceneParam._m0[78u].x);
        float _2562 = exp2(_2557 * cbSceneParam._m0[78u].y);
        float _2563 = exp2(_2557 * cbSceneParam._m0[78u].z);
        float _2564 = _2561 * _2417;
        float _2565 = _2562 * _2418;
        float _2566 = _2563 * _2419;
        float _2573 = _903 + (-0.5);
        _2575 = cbMtdParam._m0[1u];
        _2577 = _2575.y * _2573;
        float _2580 = (_2555 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2581 = _2580 * (_2556 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2538)));
        _2582 = _2580 * (_2556 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2540)));
        _2583 = _2580 * (_2556 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2542)));
        _2586 = ((_2425 * _2429) * _2561) * _2580;
        _2589 = ((_2426 * _2429) * _2562) * _2580;
        _2592 = ((_2427 * _2429) * _2563) * _2580;
        _2593 = _2573 * 0.999000012874603271484375;
        _2603 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2603)
        {
            if ((cbInstanceData._m0[_953 + 7u].x + _2593) < 0.5)
            {
                _2815 = true;
                break;
            }
        }
        uint _2731 = _954 + uint(_2553.w);
        if ((cbInstanceData._m0[_2731].w < 1.0) && ((cbInstanceData._m0[_2731].w + _2593) < 0.5))
        {
            _2815 = true;
            break;
        }
        if ((_2577 + 1.0) < _2575.x)
        {
            _2815 = true;
            break;
        }
        _2815 = false;
        break;
    }
    float _3046;
    if (_2815)
    {
        discard_state = true;
        _3046 = 0.0;
    }
    else
    {
        _3046 = cbInstanceData._m0[_2430].w;
    }
    SV_Target.x = _2581;
    SV_Target.y = _2582;
    SV_Target.z = _2583;
    SV_Target.w = _3046;
    SV_Target_1.x = _2586;
    SV_Target_1.y = _2589;
    SV_Target_1.z = _2592;
    SV_Target_1.w = cbInstanceData._m0[_2430].w;
    discard_exit();
}


