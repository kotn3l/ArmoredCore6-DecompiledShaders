#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _396;
float _3328;
float _3329;
float _3330;
float _3331;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _208 = _207 * _199;
    float _209 = _207 * _200;
    float _210 = _207 * _201;
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _305 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _321 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _328 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _340 = cbMtdParam._m0[28u].z + _275;
    float _341 = cbMtdParam._m0[28u].w + _276;
    float _342 = cbMtdParam._m0[29u].x + _277;
    float _359 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_321 * _208, _321 * _209, _321 * _210));
    float _360 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_328 * _219, _328 * _220, _328 * _221));
    float _361 = (-0.0) - dot(vec3(_340, _341, _342), vec3((-0.0) - (NORMAL.x * _214), (-0.0) - (NORMAL.y * _214), (-0.0) - (NORMAL.z * _214)));
    float _365 = inversesqrt(dot(vec3(_359, _360, _361), vec3(_359, _360, _361)));
    float _366 = _365 * _361;
    float _371 = ((cbMtdParam._m0[25u].y * _359) * _365) + (((_305.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _372 = ((cbMtdParam._m0[25u].z * _360) * _365) + (((_305.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _375 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _376 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _394;
    float _397;
    float _399;
    if (_371 > 0.0)
    {
        float _380 = (1.0 - _375) / _371;
        _394 = _380;
        _397 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_380 * _366)) * 0.16666667163372039794921875;
        _399 = (fract((_380 * _372) + _376) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_371 < 0.0)
        {
            float _395 = ((-0.0) - _375) / _371;
            frontier_phi_3_2_ladder = (fract(_395 * _366) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _395;
            frontier_phi_3_2_ladder_2 = (fract((_395 * _372) + _376) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _396;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _394 = frontier_phi_3_2_ladder_1;
        _397 = frontier_phi_3_2_ladder;
        _399 = frontier_phi_3_2_ladder_2;
    }
    float _425;
    float _427;
    float _429;
    if (_372 > 0.0)
    {
        float _412 = (1.0 - _376) / _372;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_412 < _394)
        {
            frontier_phi_8_5_ladder = (fract(_412 * _366) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_412 * _371) + _375) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _412;
        }
        else
        {
            frontier_phi_8_5_ladder = _399;
            frontier_phi_8_5_ladder_1 = _397;
            frontier_phi_8_5_ladder_2 = _394;
        }
        _425 = frontier_phi_8_5_ladder_2;
        _427 = frontier_phi_8_5_ladder_1;
        _429 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_372 < 0.0)
        {
            float _426 = ((-0.0) - _376) / _372;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_426 < _394)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_426 * _366) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_426 * _371) + _375) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _426;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _399;
                frontier_phi_8_6_ladder_9_ladder_1 = _397;
                frontier_phi_8_6_ladder_9_ladder_2 = _394;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _399;
            frontier_phi_8_6_ladder_1 = _397;
            frontier_phi_8_6_ladder_2 = _394;
        }
        _425 = frontier_phi_8_6_ladder_2;
        _427 = frontier_phi_8_6_ladder_1;
        _429 = frontier_phi_8_6_ladder;
    }
    float _433 = (_366 > 0.0) ? (cbMtdParam._m0[20u].z / _366) : 5000.0;
    float _446;
    float _447;
    if (_433 < _425)
    {
        _446 = ((_375 + cbMtdParam._m0[22u].x) + (_433 * _371)) * 0.16666667163372039794921875;
        _447 = (((_433 * _372) + _376) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _446 = _427;
        _447 = _429;
    }
    vec4 _449 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_446, _447));
    float _451 = _449.x;
    float _452 = _449.y;
    float _453 = _449.z;
    vec4 _480 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _485 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _491 = ((_480.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _493 = (-0.0) - (cbMtdParam._m0[21u].x * ((_480.x * 0.5) + (-0.25)));
    float _494 = fract(_485);
    float _496 = fract(_485 + 0.5);
    vec4 _523 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_494 * _493) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_491 * _494) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _525 = _523.x;
    float _531 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_496 * _493) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_491 * _496) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _525) * abs((_494 * 2.0) + (-1.0))) + _525;
    float _545 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _549 = fract(abs(_545));
    float _555 = sin(cbMtdParam._m0[21u].z);
    float _556 = cos(cbMtdParam._m0[21u].z);
    float _557 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _558 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _588 = abs(cbMtdParam._m0[20u].w * (((_531 - (((_545 >= ((-0.0) - _545)) ? _549 : ((-0.0) - _549)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_558, (-0.0) - _555, _556 * _557) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_558, _556, _557 * _555) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _592 = (((_588 * cbMtdParam._m0[18u].y) - _531) * _588) + _531;
    float _3340 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    vec4 _605 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _620 = (cbMtdParam._m0[14u].x * _605.x) * cbMtdParam._m0[19u].x;
    float _621 = (cbMtdParam._m0[14u].y * _605.y) * cbMtdParam._m0[19u].x;
    float _622 = (cbMtdParam._m0[14u].z * _605.z) * cbMtdParam._m0[19u].x;
    float _632 = exp2(log2(_593) * cbMtdParam._m0[20u].x);
    float _3351 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3362 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3373 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _661 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _665 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _666 = _275 * _665;
    float _667 = _276 * _665;
    float _668 = _277 * _665;
    vec4 _673 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _675 = _673.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _777 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
        float _783 = (cbMatDynParam._m0[5u].x * _777) + cbMatDynParam._m0[5u].y;
        float _3384 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _788 = (cbMatDynParam._m0[5u].z * _777) + cbMatDynParam._m0[5u].w;
        float _3395 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) - _784)) + _784) < ((_675 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _693 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _694 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _707 = uint(roundEven(NORMAL.w)) * 13u;
    uint _709 = _707 + 9u;
    uint _710 = _709 + uint(cbMatDynParam._m0[0u].w);
    float _716 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0)))) * cbInstanceData._m0[_710].x;
    float _717 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0)))) * cbInstanceData._m0[_710].y;
    float _718 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0)))) * cbInstanceData._m0[_710].z;
    float _3406 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _3417 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _3428 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    vec4 _730 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _693, cbSceneParam._m0[86u].y * _694));
    float _733 = _730.x * TEXCOORD_4;
    float _734 = (-0.0) - _666;
    float _735 = (-0.0) - _667;
    float _736 = (-0.0) - _668;
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _851 = (cbModelParam._m0[37u].x * ((((fma(_766, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _853 = (cbModelParam._m0[37u].y * ((((fma(_766, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _854 = (((((fma(_766, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_851, _853, _854), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_851, _853, _854), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_851, _853, _854), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_851, _853, _854), 0.0);
        float _891 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_857.x + (-0.5));
        float _893 = _891 * (_857.y + (-0.5));
        float _894 = _891 * (_857.z + (-0.5));
        float _901 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_864.x + (-0.5));
        float _903 = _901 * (_864.y + (-0.5));
        float _904 = _901 * (_864.z + (-0.5));
        float _911 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_871.x + (-0.5));
        float _913 = _911 * (_871.y + (-0.5));
        float _914 = _911 * (_871.z + (-0.5));
        float _921 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_878.x + (-0.5));
        float _923 = _921 * (_878.y + (-0.5));
        float _924 = _921 * (_878.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _945 = (dot(vec3(0.0), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3454 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _955 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3465 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3476 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * (_957 + 1.0))) + _962) * _925;
        float _972 = _893 * 0.5;
        float _973 = _903 * 0.5;
        float _974 = _913 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(0.0), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3487 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3498 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3509 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_999 + 1.0))) + _1004) * _926;
        float _1014 = _894 * 0.5;
        float _1015 = _904 * 0.5;
        float _1016 = _914 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(0.0), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3542 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_1041 + 1.0))) + _1046) * _927;
        _1063 = _894;
        _1064 = _893;
        _1065 = _892;
        _1066 = _904;
        _1067 = _903;
        _1068 = _902;
        _1069 = _914;
        _1070 = _913;
        _1071 = _912;
        _1072 = _927;
        _1073 = _926;
        _1074 = _925;
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _396;
        _1064 = _396;
        _1065 = _396;
        _1066 = _396;
        _1067 = _396;
        _1068 = _396;
        _1069 = _396;
        _1070 = _396;
        _1071 = _396;
        _1072 = _396;
        _1073 = _396;
        _1074 = _396;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1133 = (cbModelParam._m0[38u].x * ((((fma(_766, cbModelParam._m0[30u].z, fma(_762, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _758)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1134 = (cbModelParam._m0[38u].y * ((((fma(_766, cbModelParam._m0[31u].z, fma(_762, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _758)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1135 = (((((fma(_766, cbModelParam._m0[32u].z, fma(_762, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _758)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        float _1170 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1137.x + (-0.5));
        float _1172 = _1170 * (_1137.y + (-0.5));
        float _1173 = _1170 * (_1137.z + (-0.5));
        float _1180 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1144.x + (-0.5));
        float _1182 = _1180 * (_1144.y + (-0.5));
        float _1183 = _1180 * (_1144.z + (-0.5));
        float _1190 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1151.x + (-0.5));
        float _1192 = _1190 * (_1151.y + (-0.5));
        float _1193 = _1190 * (_1151.z + (-0.5));
        float _1200 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1158.x + (-0.5));
        float _1202 = _1200 * (_1158.y + (-0.5));
        float _1203 = _1200 * (_1158.z + (-0.5));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = _1171 * 0.5;
        float _1208 = _1181 * 0.5;
        float _1209 = _1191 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(0.0), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3605 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1234 + 1.0))) + _1239) * _1204;
        float _1249 = _1172 * 0.5;
        float _1250 = _1182 * 0.5;
        float _1251 = _1192 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(0.0), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3638 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1276 + 1.0))) + _1281) * _1205;
        float _1291 = _1173 * 0.5;
        float _1292 = _1183 * 0.5;
        float _1293 = _1193 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(0.0), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3671 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1318 + 1.0))) + _1323) * _1206;
        _1340 = _1173;
        _1341 = _1172;
        _1342 = _1171;
        _1343 = _1183;
        _1344 = _1182;
        _1345 = _1181;
        _1346 = _1193;
        _1347 = _1192;
        _1348 = _1191;
        _1349 = _1206;
        _1350 = _1205;
        _1351 = _1204;
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _396;
        _1341 = _396;
        _1342 = _396;
        _1343 = _396;
        _1344 = _396;
        _1345 = _396;
        _1346 = _396;
        _1347 = _396;
        _1348 = _396;
        _1349 = _396;
        _1350 = _396;
        _1351 = _396;
        _1352 = 0.0;
        _1353 = 0.0;
        _1354 = 0.0;
    }
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1075)) + _1075;
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1076)) + _1076;
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1077)) + _1077;
    float _1387 = fma(_1366, cbSceneParam._m0[89u].z, fma(_1365, cbSceneParam._m0[89u].y, _1364 * cbSceneParam._m0[89u].x));
    float _1390 = fma(_1366, cbSceneParam._m0[90u].z, fma(_1365, cbSceneParam._m0[90u].y, _1364 * cbSceneParam._m0[90u].x));
    float _1393 = fma(_1366, cbSceneParam._m0[91u].z, fma(_1365, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1364));
    float _1408 = _666 * (-0.5);
    float _1409 = _667 * (-0.5);
    float _1410 = _668 * (-0.5);
    float _1411 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1414 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1417 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1451;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1424 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1428 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1432 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1439 = dot(vec4(cbModelParam._m0[39u]), vec4(_1408, _1409, _1410, 1.0));
        _1451 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1451 = 1.0;
    }
    float _1462;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1453 = dot(vec4(cbModelParam._m0[40u]), vec4(_1408, _1409, _1410, 1.0));
        _1462 = dot(vec3(isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1462 = 1.0;
    }
    float _1466 = (_1462 * cbModelParam._m0[1u].x) + (_1451 * (1.0 - cbModelParam._m0[1u].x));
    float _1475 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1557;
    float _1559;
    float _1561;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1524 = fma(_766, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _758)) + cbModelParam._m0[13u].w;
        float _1528 = fma(_766, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _758)) + cbModelParam._m0[14u].w;
        float _1532 = fma(_766, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _758)) + cbModelParam._m0[15u].w;
        float _1535 = fma(_736, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734));
        float _1538 = fma(_736, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734));
        float _1541 = fma(_736, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734));
        float _1567;
        if (_1535 > 0.0)
        {
            _1567 = abs((1.0 - _1524) / _1535);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1524 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1567 = frontier_phi_29_27_ladder;
        }
        float _1737;
        if (_1538 > 0.0)
        {
            _1737 = abs((1.0 - _1528) / _1538);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1528 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1737 = frontier_phi_38_34_ladder;
        }
        float _2131;
        if (_1541 > 0.0)
        {
            _2131 = abs((1.0 - _1532) / _1541);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1532 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2131 = frontier_phi_50_45_ladder;
        }
        float _2133 = isnan(_1737) ? _1567 : (isnan(_1567) ? _1737 : min(_1567, _1737));
        float _2134 = isnan(_2131) ? _2133 : (isnan(_2133) ? _2131 : min(_2133, _2131));
        float _2138 = (_2134 * _1535) + _1524;
        float _2139 = (_2134 * _1538) + _1528;
        float _2140 = (_2134 * _1541) + _1532;
        float _2141 = _2134 * 9.9999997473787516355514526367188e-05;
        float _2143 = (-1.0) - _2141;
        float _2145 = _2141 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_2140 > _2145) || ((_2140 < _2143) || ((_2139 > _2145) || ((_2139 < _2143) || ((_2138 < _2143) || (_2138 > _2145))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2140, cbModelParam._m0[9u].z, fma(_2139, cbModelParam._m0[9u].y, _2138 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2140, cbModelParam._m0[10u].z, fma(_2139, cbModelParam._m0[10u].y, _2138 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2140, cbModelParam._m0[11u].z, fma(_2139, cbModelParam._m0[11u].y, _2138 * cbModelParam._m0[11u].x))), _1475);
            frontier_phi_28_50_ladder = _2400.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2400.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2400.x * cbModelParam._m0[1u].y;
        }
        _1557 = frontier_phi_28_50_ladder_2;
        _1559 = frontier_phi_28_50_ladder_1;
        _1561 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1545 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_734, _735, _736), _1475);
        _1557 = _1545.x * cbModelParam._m0[1u].y;
        _1559 = _1545.y * cbModelParam._m0[1u].y;
        _1561 = _1545.z * cbModelParam._m0[1u].y;
    }
    float _1564 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1616 = fma(_766, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _758)) + cbModelParam._m0[21u].w;
        float _1620 = fma(_766, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _758)) + cbModelParam._m0[22u].w;
        float _1624 = fma(_766, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _758)) + cbModelParam._m0[23u].w;
        float _1627 = fma(_736, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734));
        float _1630 = fma(_736, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734));
        float _1633 = fma(_736, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734));
        float _1742;
        if (_1627 > 0.0)
        {
            _1742 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1742 = frontier_phi_40_36_ladder;
        }
        float _2158;
        if (_1630 > 0.0)
        {
            _2158 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2158 = frontier_phi_52_47_ladder;
        }
        float _2539;
        if (_1633 > 0.0)
        {
            _2539 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2539 = frontier_phi_64_59_ladder;
        }
        float _2541 = isnan(_2158) ? _1742 : (isnan(_1742) ? _2158 : min(_1742, _2158));
        float _2542 = isnan(_2539) ? _2541 : (isnan(_2541) ? _2539 : min(_2541, _2539));
        float _2546 = (_2542 * _1627) + _1616;
        float _2547 = (_2542 * _1630) + _1620;
        float _2548 = (_2542 * _1633) + _1624;
        float _2549 = _2542 * 9.9999997473787516355514526367188e-05;
        float _2550 = (-1.0) - _2549;
        float _2552 = _2549 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2548 > _2552) || ((_2548 < _2550) || ((_2547 > _2552) || ((_2547 < _2550) || ((_2546 < _2550) || (_2546 > _2552))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2548, cbModelParam._m0[17u].z, fma(_2547, cbModelParam._m0[17u].y, _2546 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2548, cbModelParam._m0[18u].z, fma(_2547, cbModelParam._m0[18u].y, _2546 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2548, cbModelParam._m0[19u].z, fma(_2547, cbModelParam._m0[19u].y, _2546 * cbModelParam._m0[19u].x))), _1564);
            frontier_phi_37_64_ladder = _2682.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2682.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2682.x * cbModelParam._m0[1u].z;
        }
        _1652 = frontier_phi_37_64_ladder_2;
        _1654 = frontier_phi_37_64_ladder_1;
        _1656 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_734, _735, _736), _1564);
        _1652 = _1636.x * cbModelParam._m0[1u].z;
        _1654 = _1636.y * cbModelParam._m0[1u].z;
        _1656 = _1636.z * cbModelParam._m0[1u].z;
    }
    float _1668 = _733 * 0.01200000010430812835693359375;
    float _1670 = _1668 * ((cbModelParam._m0[1u].w * (_1652 - _1557)) + _1557);
    float _1671 = _1668 * ((cbModelParam._m0[1u].w * (_1654 - _1559)) + _1559);
    float _1672 = _1668 * ((cbModelParam._m0[1u].w * (_1656 - _1561)) + _1561);
    float _1675 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, _1670 * cbSceneParam._m0[91u].x));
    float _1716 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1720 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1724 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1728 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1729 = _1716 / _1728;
    float _1730 = _1720 / _1728;
    float _1731 = _1724 / _1728;
    float _1879;
    float _1880;
    float _1881;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1758 = ((uint(_1731 > cbSceneParam._m0[59u].y) + uint(_1731 > cbSceneParam._m0[59u].x)) + uint(_1731 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1759 = _1758 + 43u;
        uint _1767 = _1758 + 44u;
        uint _1775 = _1758 + 45u;
        uint _1783 = _1758 + 46u;
        float _1794 = fma(_1728, cbSceneParam._m0[_1759].w, fma(_1724, cbSceneParam._m0[_1759].z, fma(_1720, cbSceneParam._m0[_1759].y, _1716 * cbSceneParam._m0[_1759].x)));
        float _1798 = fma(_1728, cbSceneParam._m0[_1767].w, fma(_1724, cbSceneParam._m0[_1767].z, fma(_1720, cbSceneParam._m0[_1767].y, _1716 * cbSceneParam._m0[_1767].x)));
        float _1806 = fma(_1728, cbSceneParam._m0[_1783].w, fma(_1724, cbSceneParam._m0[_1783].z, fma(_1720, cbSceneParam._m0[_1783].y, _1716 * cbSceneParam._m0[_1783].x)));
        float _1811 = cbSceneParam._m0[33u].z * _1806;
        float _1813 = cbSceneParam._m0[33u].w * _1806;
        float _1816 = fma(_1728, cbSceneParam._m0[_1775].w, fma(_1724, cbSceneParam._m0[_1775].z, fma(_1720, cbSceneParam._m0[_1775].y, _1716 * cbSceneParam._m0[_1775].x))) / _1806;
        float _1864 = (cbSceneParam._m0[33u].x - sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731))) * cbSceneParam._m0[33u].y;
        float _3797 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1872 = (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1811 + _1794) / _1806, (_1813 + _1798) / _1806), _1816), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1813 + _1794) / _1806, (_1798 - _1811) / _1806), _1816), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1794 - _1811) / _1806, (_1798 - _1813) / _1806), _1816), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1794 - _1813) / _1806, (_1811 + _1798) / _1806), _1816), 0.0)).x), vec4(0.25)));
        _1879 = 1.0 - (_1872 * cbSceneParam._m0[34u].x);
        _1880 = 1.0 - (_1872 * cbSceneParam._m0[34u].y);
        _1881 = 1.0 - (_1872 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1879 = 1.0;
        _1880 = 1.0;
        _1881 = 1.0;
    }
    float _1945;
    float _1947;
    float _1949;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1933 = fma(_1728, cbSceneParam._m0[63u].w, fma(_1724, cbSceneParam._m0[63u].z, fma(_1720, cbSceneParam._m0[63u].y, _1716 * cbSceneParam._m0[63u].x)));
        float _1934 = fma(_1728, cbSceneParam._m0[60u].w, fma(_1724, cbSceneParam._m0[60u].z, fma(_1720, cbSceneParam._m0[60u].y, _1716 * cbSceneParam._m0[60u].x))) / _1933;
        float _1935 = fma(_1728, cbSceneParam._m0[61u].w, fma(_1724, cbSceneParam._m0[61u].z, fma(_1720, cbSceneParam._m0[61u].y, _1716 * cbSceneParam._m0[61u].x))) / _1933;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1934 >= cbSceneParam._m0[64u].x) && (_1935 >= cbSceneParam._m0[64u].y)) && (_1934 <= cbSceneParam._m0[64u].z)) && (_1935 <= cbSceneParam._m0[64u].w))
        {
            float _2171 = fma(_1728, cbSceneParam._m0[62u].w, fma(_1724, cbSceneParam._m0[62u].z, fma(_1720, cbSceneParam._m0[62u].y, _1716 * cbSceneParam._m0[62u].x))) / _1933;
            float _2175 = isnan(cbSceneParam._m0[41u].w) ? _2171 : (isnan(_2171) ? cbSceneParam._m0[41u].w : max(_2171, cbSceneParam._m0[41u].w));
            float _2218 = (cbSceneParam._m0[33u].x - sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731))) * cbSceneParam._m0[33u].y;
            float _3813 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
            float _2225 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1934, cbSceneParam._m0[33u].w + _1935), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1934, _1935 - cbSceneParam._m0[33u].z), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1934 - cbSceneParam._m0[33u].z, _1935 - cbSceneParam._m0[33u].w), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1934 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1935), _2175), 0.0)).x), vec4(0.25)));
            float _2229 = 1.0 - (_2225 * cbSceneParam._m0[34u].x);
            float _2230 = 1.0 - (_2225 * cbSceneParam._m0[34u].y);
            float _2231 = 1.0 - (_2225 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_2231) ? _1881 : (isnan(_1881) ? _2231 : min(_1881, _2231));
            frontier_phi_49_48_ladder_1 = isnan(_2230) ? _1880 : (isnan(_1880) ? _2230 : min(_1880, _2230));
            frontier_phi_49_48_ladder_2 = isnan(_2229) ? _1879 : (isnan(_1879) ? _2229 : min(_1879, _2229));
        }
        else
        {
            frontier_phi_49_48_ladder = _1881;
            frontier_phi_49_48_ladder_1 = _1880;
            frontier_phi_49_48_ladder_2 = _1879;
        }
        _1945 = frontier_phi_49_48_ladder_2;
        _1947 = frontier_phi_49_48_ladder_1;
        _1949 = frontier_phi_49_48_ladder;
    }
    else
    {
        _1945 = _1879;
        _1947 = _1880;
        _1949 = _1881;
    }
    uvec4 _1954 = floatBitsToUint(cbInstanceData._m0[_707 + 5u]);
    uint _1956 = _1954.x * 14u;
    uint _1957 = _1956 + 13u;
    float _1962 = _733 + (-1.0);
    float _1965 = (cbLight._m0[_1957].x * _1962) + 1.0;
    float _1966 = (cbLight._m0[_1957].y * _1962) + 1.0;
    uint _1967 = _1956 + 5u;
    float _1973 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
    uint _1977 = _1956 + 4u;
    float _1986 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
    uint _1990 = _1956 | 1u;
    float _2001 = dot(vec3(cbLight._m0[_1956].xyz), vec3(0.0));
    float _2004 = dot(vec3(cbLight._m0[_1990].xyz), vec3(0.0));
    float _3849 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _3860 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2009 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * 0.3183098733425140380859375;
    float _2011 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * 0.3183098733425140380859375;
    float _2018 = ((cbLight._m0[_1967].x * _1973) * _2011) + (((cbLight._m0[_1977].x * _1945) * _1986) * _2009);
    float _2019 = ((_1973 * cbLight._m0[_1967].y) * _2011) + (((cbLight._m0[_1977].y * _1947) * _1986) * _2009);
    float _2020 = ((_1973 * cbLight._m0[_1967].z) * _2011) + (((cbLight._m0[_1977].z * _1949) * _1986) * _2009);
    uint _2021 = _1956 + 8u;
    float _2027 = cbLight._m0[_1956].x + _666;
    float _2028 = cbLight._m0[_1956].y + _667;
    float _2029 = cbLight._m0[_1956].z + _668;
    float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
    float _2037 = dot(vec3(0.0), vec3(cbLight._m0[_1956].xyz));
    float _3871 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _2041 = dot(vec3(0.0), vec3(_666, _667, _668));
    float _3882 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _2045 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2027 * _2033, _2028 * _2033, _2029 * _2033));
    float _3893 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2056 = (exp2(log2(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2062 = (0.5 / ((_2040 + 9.9999999392252902907785028219223e-09) + _2044)) * _2040;
    float _3904 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.31831014156341552734375;
    uint _2078 = _1956 + 9u;
    float _2084 = cbLight._m0[_1990].x + _666;
    float _2085 = cbLight._m0[_1990].y + _667;
    float _2086 = cbLight._m0[_1990].z + _668;
    float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
    float _2094 = dot(vec3(0.0), vec3(cbLight._m0[_1990].xyz));
    float _3915 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _2098 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2084 * _2090, _2085 * _2090, _2086 * _2090));
    float _3926 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2107 = (exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2111 = (0.5 / ((_2097 + 9.9999999392252902907785028219223e-09) + _2044)) * _2097;
    float _3937 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2113 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.31831014156341552734375;
    float _2123 = (((_2107 * cbLight._m0[_2078].x) * _2113) * _1973) + ((((cbLight._m0[_2021].x * _1945) * _2056) * _2064) * _1986);
    float _2124 = (((_2107 * cbLight._m0[_2078].y) * _2113) * _1973) + ((((cbLight._m0[_2021].y * _1947) * _2056) * _2064) * _1986);
    float _2125 = (((_2107 * cbLight._m0[_2078].z) * _2113) * _1973) + ((((cbLight._m0[_2021].z * _1949) * _2056) * _2064) * _1986);
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    float _2298;
    if (_1954.y == 0u)
    {
        uvec4 _2243 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2244 = _2243.x;
        uint _2255 = uint((float(_2243.y) * floor(float(uint(cbSceneParam._m0[85u].y * _694) / _2244))) + floor(float(uint(cbSceneParam._m0[85u].x * _693) / _2244)));
        float _2265 = (log2(_1731 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2266 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        uint _2269 = uint(isnan(14.0) ? _2266 : (isnan(_2266) ? 14.0 : min(_2266, 14.0)));
        uvec4 _2274 = texelFetch(g_lightClusterGridBuffer, int(((_2269 << 2u) + (_2255 << 6u)) >> 2u));
        uint _2275 = _2274.x;
        uint _2276 = _2243.z;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        if (((((1u << ((_2276 >> 4u) & 15u)) + 4294967295u) & _2275) == 0u) || ((_2276 & 240u) == 0u))
        {
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
        }
        else
        {
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            uint _2600 = 0u;
            uint _2609;
            bool _2610;
            for (;;)
            {
                _2609 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2600 << 2u)) >> 2u)).x;
                _2610 = _2609 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2610)
                {
                    frontier_phi_75_pred = _2597;
                    frontier_phi_75_pred_1 = _2599;
                    frontier_phi_75_pred_2 = _2598;
                    frontier_phi_75_pred_3 = _2596;
                    frontier_phi_75_pred_4 = _2595;
                    frontier_phi_75_pred_5 = _2594;
                }
                else
                {
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    uint _2766;
                    _2760 = _2594;
                    _2761 = _2595;
                    _2762 = _2596;
                    _2763 = _2597;
                    _2764 = _2598;
                    _2765 = _2599;
                    _2766 = _2609;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    for (;;)
                    {
                        uint _2770 = uint(findLSB(_2766)) + (_2600 << 5u);
                        uint _2767 = (_2766 + 4294967295u) & _2766;
                        uint _2772 = _2770 * 48u;
                        vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 3u)).x));
                        uint _2792 = (_2770 * 48u) + 4u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2811 = (_2770 * 48u) + 8u;
                        vec3 _2822 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x));
                        float _2826 = _2786.x - _1729;
                        float _2827 = _2786.y - _1730;
                        float _2828 = _2786.z - _1731;
                        float _2829 = dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828));
                        float _2832 = inversesqrt(_2829);
                        float _2841 = 1.0 - (_2829 * _2786.w);
                        float _3958 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2842 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                        float _2843 = sqrt(_2829) * _2805.w;
                        float _2846 = 1.39999997615814208984375 / (_2843 + 1.39999997615814208984375);
                        float _2847 = _2846 * _2846;
                        float _2850 = ((1.0 - _2847) * dot(vec3(0.0), vec3(_2832 * _2826, _2832 * _2827, _2832 * _2828))) + _2847;
                        float _2853 = _2843 * _2843;
                        float _2857 = ((isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))) * _2842) / ((_2853 * 0.699999988079071044921875) + 1.0);
                        float _2861 = (-0.0) - _1729;
                        float _2862 = (-0.0) - _1730;
                        float _2863 = (-0.0) - _1731;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2871 = dot(vec3(0.0), vec3(_2867 * _2861, _2867 * _2862, _2867 * _2863));
                        float _3974 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _3985 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2875 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                        float _2879 = (0.5 / (((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) + 9.9999999392252902907785028219223e-09) + _2875)) * _2875;
                        float _3996 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2888 = (((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 3.1415927410125732421875) / ((_2853 * 2.1991131305694580078125) + 3.141590118408203125)) * _2842;
                        _2690 = (_2857 * _2805.x) + _2763;
                        _2691 = (_2857 * _2805.y) + _2764;
                        _2692 = (_2857 * _2805.z) + _2765;
                        _2687 = (_2888 * _2822.x) + _2760;
                        _2688 = (_2888 * _2822.y) + _2761;
                        _2689 = (_2888 * _2822.z) + _2762;
                        if (_2767 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2760 = _2687;
                            _2761 = _2688;
                            _2762 = _2689;
                            _2763 = _2690;
                            _2764 = _2691;
                            _2765 = _2692;
                            _2766 = _2767;
                        }
                    }
                    frontier_phi_75_pred = _2690;
                    frontier_phi_75_pred_1 = _2692;
                    frontier_phi_75_pred_2 = _2691;
                    frontier_phi_75_pred_3 = _2689;
                    frontier_phi_75_pred_4 = _2688;
                    frontier_phi_75_pred_5 = _2687;
                }
                _2416 = frontier_phi_75_pred;
                _2420 = frontier_phi_75_pred_1;
                _2418 = frontier_phi_75_pred_2;
                _2414 = frontier_phi_75_pred_3;
                _2412 = frontier_phi_75_pred_4;
                _2410 = frontier_phi_75_pred_5;
                uint _2601 = _2600 + 1u;
                if (_2601 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2594 = _2410;
                    _2595 = _2412;
                    _2596 = _2414;
                    _2597 = _2416;
                    _2598 = _2418;
                    _2599 = _2420;
                    _2600 = _2601;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
        }
        uvec4 _2423 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2424 = _2423.z;
        uint _2426 = (_2424 >> 8u) & 15u;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        if (((4294967295u << _2426) & _2275) == 0u)
        {
            _2565 = _2409;
            _2567 = _2411;
            _2569 = _2413;
            _2571 = _2415;
            _2573 = _2417;
            _2575 = _2419;
        }
        else
        {
            float _2590 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2426 < ((_2424 >> 12u) & 15u))
            {
                float _2566;
                float _2568;
                float _2570;
                float _2572;
                float _2574;
                float _2576;
                float _2743 = _2409;
                float _2744 = _2411;
                float _2745 = _2413;
                float _2746 = _2415;
                float _2747 = _2417;
                float _2748 = _2419;
                uint _2749 = _2426;
                uint _2758;
                bool _2759;
                for (;;)
                {
                    _2758 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                    _2759 = _2758 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2759)
                    {
                        frontier_phi_86_pred = _2748;
                        frontier_phi_86_pred_1 = _2747;
                        frontier_phi_86_pred_2 = _2746;
                        frontier_phi_86_pred_3 = _2745;
                        frontier_phi_86_pred_4 = _2744;
                        frontier_phi_86_pred_5 = _2743;
                    }
                    else
                    {
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _2915 = _2743;
                        float _2916 = _2744;
                        float _2917 = _2745;
                        float _2918 = _2746;
                        float _2919 = _2747;
                        float _2920 = _2748;
                        uint _2921 = _2758;
                        uint _2922;
                        vec4 _2947;
                        float _2948;
                        vec4 _2963;
                        vec3 _2975;
                        vec4 _2991;
                        vec4 _3006;
                        float _3052;
                        bool _3053;
                        for (;;)
                        {
                            uint _2932 = ((_2749 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2921));
                            _2922 = (_2921 + 4294967295u) & _2921;
                            uint _2934 = _2932 * 40u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            _2948 = _2947.w;
                            uint _2950 = (_2932 * 40u) + 4u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2965 = (_2932 * 40u) + 8u;
                            _2975 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x));
                            uint _2978 = (_2932 * 40u) + 16u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2993 = (_2932 * 40u) + 20u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3008 = (_2932 * 40u) + 24u;
                            vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3027 = (_2932 * 40u) + 28u;
                            vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            _3052 = fma(_1731, _3040.z, fma(_1730, _3040.y, _3040.x * _1729)) + _3040.w;
                            _3053 = !((fma(_1731, _3021.z, fma(_1730, _3021.y, _3021.x * _1729)) + _3021.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3053)
                            {
                                float _3080 = _2947.x - _1729;
                                float _3081 = _2947.y - _1730;
                                float _3082 = _2947.z - _1731;
                                float _3083 = dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082));
                                float _3086 = inversesqrt(_3083);
                                float _3087 = _3086 * _3080;
                                float _3088 = _3086 * _3081;
                                float _3089 = _3086 * _3082;
                                float _3093 = 1.0 - (_3083 / (_2948 * _2948));
                                float _4007 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3094 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                                float _3098 = sqrt(_3083) * _2963.w;
                                float _3100 = 1.39999997615814208984375 / (_3098 + 1.39999997615814208984375);
                                float _3101 = _3100 * _3100;
                                float _3102 = 1.0 - _3101;
                                float _3104 = (_3102 * dot(vec3(_3087, _3088, _3089), vec3(0.0))) + _3101;
                                float _3107 = _3098 * _3098;
                                float _3111 = (fma(_1731, _2991.z, fma(_1730, _2991.y, _2991.x * _1729)) + _2991.w) / _3052;
                                float _3112 = (fma(_1731, _3006.z, fma(_1730, _3006.y, _3006.x * _1729)) + _3006.w) / _3052;
                                float _3116 = 1.0 - dot(vec2(_3111, _3112), vec2(_3111, _3112));
                                float _4023 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                                float _3118 = _3117 * (((isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0))) * _3094) / ((_3107 * 0.699999988079071044921875) + 1.0));
                                float _3128 = dot(vec3(0.0), vec3((-0.0) - (_1729 * _2590), (-0.0) - (_1730 * _2590), (-0.0) - (_1731 * _2590)));
                                float _4034 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3136 = (_3102 * dot(vec3(0.0), vec3(_3087, _3088, _3089))) + _3101;
                                float _4045 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _3141 = (0.5 / (((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) + 9.9999999392252902907785028219223e-09) + _3137)) * _3137;
                                float _4056 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3148 = (_3117 * _3094) * (((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 3.1415927410125732421875) / ((_3107 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_92_pred = _3118 * _2963.z;
                                frontier_phi_92_pred_1 = _3118 * _2963.y;
                                frontier_phi_92_pred_2 = _3118 * _2963.x;
                                frontier_phi_92_pred_3 = _3148 * _2975.z;
                                frontier_phi_92_pred_4 = _3148 * _2975.y;
                                frontier_phi_92_pred_5 = _3148 * _2975.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3157 = frontier_phi_92_pred;
                            _3156 = frontier_phi_92_pred_1;
                            _3155 = frontier_phi_92_pred_2;
                            _3154 = frontier_phi_92_pred_3;
                            _3153 = frontier_phi_92_pred_4;
                            _3152 = frontier_phi_92_pred_5;
                            _2905 = _3155 + _2918;
                            _2906 = _3156 + _2919;
                            _2907 = _3157 + _2920;
                            _2902 = _3152 + _2915;
                            _2903 = _3153 + _2916;
                            _2904 = _3154 + _2917;
                            if (_2922 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2922;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _2907;
                        frontier_phi_86_pred_1 = _2906;
                        frontier_phi_86_pred_2 = _2905;
                        frontier_phi_86_pred_3 = _2904;
                        frontier_phi_86_pred_4 = _2903;
                        frontier_phi_86_pred_5 = _2902;
                    }
                    _2576 = frontier_phi_86_pred;
                    _2574 = frontier_phi_86_pred_1;
                    _2572 = frontier_phi_86_pred_2;
                    _2570 = frontier_phi_86_pred_3;
                    _2568 = frontier_phi_86_pred_4;
                    _2566 = frontier_phi_86_pred_5;
                    uint _2750 = _2749 + 1u;
                    if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2743 = _2566;
                        _2744 = _2568;
                        _2745 = _2570;
                        _2746 = _2572;
                        _2747 = _2574;
                        _2748 = _2576;
                        _2749 = _2750;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2572;
                frontier_phi_66_67_ladder_1 = _2576;
                frontier_phi_66_67_ladder_2 = _2574;
                frontier_phi_66_67_ladder_3 = _2570;
                frontier_phi_66_67_ladder_4 = _2568;
                frontier_phi_66_67_ladder_5 = _2566;
            }
            else
            {
                frontier_phi_66_67_ladder = _2415;
                frontier_phi_66_67_ladder_1 = _2419;
                frontier_phi_66_67_ladder_2 = _2417;
                frontier_phi_66_67_ladder_3 = _2413;
                frontier_phi_66_67_ladder_4 = _2411;
                frontier_phi_66_67_ladder_5 = _2409;
            }
            _2565 = frontier_phi_66_67_ladder_5;
            _2567 = frontier_phi_66_67_ladder_4;
            _2569 = frontier_phi_66_67_ladder_3;
            _2571 = frontier_phi_66_67_ladder;
            _2573 = frontier_phi_66_67_ladder_2;
            _2575 = frontier_phi_66_67_ladder_1;
        }
        float _2580 = isnan(1.0) ? _733 : (isnan(_733) ? 1.0 : min(_733, 1.0));
        _2288 = (_2580 * _2571) + _2018;
        _2290 = (_2580 * _2573) + _2019;
        _2292 = (_2580 * _2575) + _2020;
        _2294 = ((_2565 * 0.039999999105930328369140625) * _2580) + _2123;
        _2296 = ((_2567 * 0.039999999105930328369140625) * _2580) + _2124;
        _2298 = ((_2569 * 0.039999999105930328369140625) * _2580) + _2125;
    }
    else
    {
        _2288 = _2018;
        _2290 = _2019;
        _2292 = _2020;
        _2294 = _2123;
        _2296 = _2124;
        _2298 = _2125;
    }
    uint _2304 = _709 + uint(cbMatDynParam._m0[0u].w);
    float _2310 = ((_632 * (_620 - (_620 * _593))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2304].x;
    float _2311 = ((_632 * (_621 - (_621 * _593))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2304].y;
    float _2312 = ((_632 * (_622 - (_622 * _593))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2304].z;
    float _4072 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4083 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4094 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _2329 = (((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_2288 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _733))) + ((_2294 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1466)) * cbPerFrame._m0[3u].x)) + _2310;
    float _2331 = (_2311 + ((_2296 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1466)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2290 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _733)));
    float _2333 = (_2312 + ((_2298 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1466)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2292 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _733)));
    float _2334 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2335 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2336 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2342 = cbMtdParam._m0[2u].x * _2310;
    float _2343 = cbMtdParam._m0[2u].y * _2311;
    float _2344 = cbMtdParam._m0[2u].z * _2312;
    float _4120 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2346 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    uint _2347 = _707 + 6u;
    float _2355 = _693 / cbSceneParam._m0[86u].x;
    float _2356 = _694 / cbSceneParam._m0[86u].y;
    vec4 _2370 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2355, _2356, (log2((isnan(cbSceneParam._m0[77u].w) ? _661 : (isnan(_661) ? cbSceneParam._m0[77u].w : min(_661, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2372 = _2370.x;
    float _2373 = _2370.y;
    float _2374 = _2370.z;
    float _2375 = _2370.w;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    if (_661 > cbSceneParam._m0[78u].w)
    {
        float _2434 = isnan(_661) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _661 : min(cbSceneParam._m0[80u].w, _661));
        float _2435 = _2434 / _661;
        float _2446 = _2435 * _275;
        float _2447 = _276 * _2435;
        float _2448 = (-0.0) - _2447;
        float _2449 = _2435 * _277;
        float _2451 = (cbSceneParam._m0[77u].w * _2448) / _2434;
        float _2452 = _2451 + cbSceneParam._m0[79u].w;
        float _2453 = cbSceneParam._m0[79u].w - _2447;
        float _2459 = sqrt(((_2446 * _2446) + (_2447 * _2447)) + (_2449 * _2449));
        float _2462 = (1.0 - (cbSceneParam._m0[77u].w / _2434)) * _2459;
        float _2467 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2469 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2700;
        if (abs((_2448 - _2451) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2700 = ((((_2452 > 0.0) ? exp2(_2467 * _2452) : (2.0 - exp2(_2469 * _2452))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2462;
        }
        else
        {
            float _2623 = 1.0 / cbSceneParam._m0[80u].x;
            float _2624 = isnan(_2453) ? _2452 : (isnan(_2452) ? _2453 : max(_2452, _2453));
            float _2625 = isnan(_2453) ? _2452 : (isnan(_2452) ? _2453 : min(_2452, _2453));
            float _2634 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : min(_2624, 0.0));
            float _2635 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : min(_2625, 0.0));
            _2700 = ((abs(_2459 / _2448) * cbSceneParam._m0[80u].y) * ((((_2634 - _2635) * 2.0) - ((exp2(_2467 * (isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0)))) - exp2(_2467 * (isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0))))) * _2623)) - ((exp2(_2469 * _2634) - exp2(_2469 * _2635)) * _2623))) + (_2462 * cbSceneParam._m0[80u].z);
        }
        vec4 _2702 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2355, _2356, 1.0), 0.0);
        float _2711 = exp2((_2700 * (-1.44269502162933349609375)) * (1.0 - _2702.w));
        float _2712 = log2(_2711);
        float _2728 = log2(_2375);
        _2471 = (exp2(_2728 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].x)) * _2702.x) / cbSceneParam._m0[78u].x)) + _2372;
        _2473 = (exp2(_2728 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].y)) * _2702.y) / cbSceneParam._m0[78u].y)) + _2373;
        _2475 = (exp2(_2728 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].z)) * _2702.z) / cbSceneParam._m0[78u].z)) + _2374;
        _2477 = _2711 * _2375;
    }
    else
    {
        _2471 = _2372;
        _2473 = _2373;
        _2475 = _2374;
        _2477 = _2375;
    }
    bool _2738;
    vec4 _2486;
    vec4 _2509;
    float _2511;
    float _2515;
    float _2516;
    float _2517;
    float _2520;
    float _2523;
    float _2526;
    float _2527;
    bool _2538;
    for (;;)
    {
        _2486 = cbMatDynParam._m0[0u];
        float _2488 = roundEven(_2486.y);
        bool _2489 = _2488 == 3.0;
        float _2491 = log2(_2477);
        float _2495 = exp2(_2491 * cbSceneParam._m0[78u].x);
        float _2496 = exp2(_2491 * cbSceneParam._m0[78u].y);
        float _2497 = exp2(_2491 * cbSceneParam._m0[78u].z);
        float _2498 = _2495 * _2334;
        float _2499 = _2496 * _2335;
        float _2500 = _2497 * _2336;
        float _2507 = _675 + (-0.5);
        _2509 = cbMtdParam._m0[1u];
        _2511 = _2509.y * _2507;
        float _2514 = (_2488 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2515 = _2514 * (_2489 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2471)));
        _2516 = _2514 * (_2489 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2473)));
        _2517 = _2514 * (_2489 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2475)));
        _2520 = ((_2342 * _2346) * _2495) * _2514;
        _2523 = ((_2343 * _2346) * _2496) * _2514;
        _2526 = ((_2344 * _2346) * _2497) * _2514;
        _2527 = _2507 * 0.999000012874603271484375;
        _2538 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2538)
        {
            if ((cbInstanceData._m0[_707 + 7u].x + _2527) < 0.5)
            {
                _2738 = true;
                break;
            }
        }
        uint _2658 = _709 + uint(_2486.w);
        if ((cbInstanceData._m0[_2658].w < 1.0) && ((cbInstanceData._m0[_2658].w + _2527) < 0.5))
        {
            _2738 = true;
            break;
        }
        if ((_2511 + 1.0) < _2509.x)
        {
            _2738 = true;
            break;
        }
        _2738 = false;
        break;
    }
    float _2893;
    if (_2738)
    {
        discard_state = true;
        _2893 = 0.0;
    }
    else
    {
        _2893 = cbInstanceData._m0[_2347].w;
    }
    SV_Target.x = _2515;
    SV_Target.y = _2516;
    SV_Target.z = _2517;
    SV_Target.w = _2893;
    SV_Target_1.x = _2520;
    SV_Target_1.y = _2523;
    SV_Target_1.z = _2526;
    SV_Target_1.w = cbInstanceData._m0[_2347].w;
    discard_exit();
}


