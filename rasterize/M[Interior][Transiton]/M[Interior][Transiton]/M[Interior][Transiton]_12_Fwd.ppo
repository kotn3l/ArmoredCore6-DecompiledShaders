#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1113;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _264);
    float _275 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _264);
    float _276 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _264);
    vec4 _295 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _333 = cbMtdParam._m0[27u].w + _274;
    float _334 = cbMtdParam._m0[28u].x + _275;
    float _335 = cbMtdParam._m0[28u].y + _276;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_203 * _195, _203 * _196, _203 * _197));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_217 * TANGENT.x, _217 * TANGENT.y, _217 * TANGENT.z));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - (_210 * NORMAL.x), (-0.0) - (_210 * NORMAL.y), (-0.0) - (_210 * NORMAL.z)));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _358 = _355 * _351;
    float _359 = (_355 * _349) + (((_295.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _360 = (_355 * _350) + (((_295.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _361 = _359 * cbMtdParam._m0[24u].x;
    float _362 = _360 * cbMtdParam._m0[23u].w;
    float _363 = fract(TEXCOORD.x);
    float _364 = fract(TEXCOORD.y);
    float _370;
    if (_361 > 0.0)
    {
        _370 = (1.0 - _363) / _361;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_361 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _363) / _361;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _370 = frontier_phi_3_2_ladder;
    }
    float _378;
    if (_362 > 0.0)
    {
        _378 = (1.0 - _364) / _362;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _364) / _362;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _378 = frontier_phi_7_6_ladder;
    }
    bool _380 = _358 > 0.0;
    float _382 = _380 ? (cbMtdParam._m0[17u].x / _358) : 5000.0;
    float _383 = isnan(_378) ? _370 : (isnan(_370) ? _378 : min(_370, _378));
    float _384 = isnan(_382) ? _383 : (isnan(_383) ? _382 : min(_383, _382));
    float _388 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _389 = _363 + (-0.5);
    float _392 = _364 + (-0.5);
    float _395 = ((_384 * _358) + _388) / _388;
    vec4 _420 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_389 + (_384 * _361)) / _395) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_392 + (_384 * _362)) / _395) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _430 = cbMtdParam._m0[9u].x * _420.x;
    float _431 = cbMtdParam._m0[9u].y * _420.y;
    float _432 = cbMtdParam._m0[9u].z * _420.z;
    float _450 = _359 * cbMtdParam._m0[26u].z;
    float _451 = _360 * cbMtdParam._m0[26u].y;
    bool _452 = _450 > 0.0;
    float _457;
    if (_452)
    {
        _457 = (1.0 - _363) / _450;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_450 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _363) / _450;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _457 = frontier_phi_11_10_ladder;
    }
    bool _459 = _451 > 0.0;
    float _464;
    if (_459)
    {
        _464 = (1.0 - _364) / _451;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_451 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _364) / _451;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _464 = frontier_phi_15_14_ladder;
    }
    float _467 = _380 ? (cbMtdParam._m0[19u].z / _358) : 5000.0;
    float _468 = isnan(_464) ? _457 : (isnan(_457) ? _464 : min(_457, _464));
    float _469 = isnan(_467) ? _468 : (isnan(_468) ? _467 : min(_468, _467));
    float _473 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _477 = ((_469 * _358) + _473) / _473;
    float _482 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _484 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _500 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_469 * _450)) / _477) + 0.5) + _482) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_469 * _451)) / _477) + 0.5) + _484) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _512;
    if (_452)
    {
        _512 = (1.0 - _363) / _450;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_450 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _363) / _450;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _512 = frontier_phi_19_18_ladder;
    }
    float _518;
    if (_459)
    {
        _518 = (1.0 - _364) / _451;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_451 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _364) / _451;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _518 = frontier_phi_23_22_ladder;
    }
    float _520 = isnan(_518) ? _512 : (isnan(_512) ? _518 : min(_512, _518));
    float _521 = isnan(_467) ? _520 : (isnan(_520) ? _467 : min(_520, _467));
    float _528 = ((_521 * _358) + _473) / _473;
    vec4 _548 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_389 + (_521 * _450)) / _528) + 0.5) + _482) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_392 + (_521 * _451)) / _528) + 0.5) + _484) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _550 = _548.x;
    float _557 = (_550 * ((_500.x * cbMtdParam._m0[10u].x) - _430)) + _430;
    float _558 = (_550 * ((_500.y * cbMtdParam._m0[10u].y) - _431)) + _431;
    float _559 = (_550 * ((_500.z * cbMtdParam._m0[10u].z) - _432)) + _432;
    vec4 _583 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _588 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _594 = ((_583.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _596 = (-0.0) - (cbMtdParam._m0[21u].x * ((_583.x * 0.5) + (-0.25)));
    float _597 = fract(_588);
    float _599 = fract(_588 + 0.5);
    vec4 _626 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_597 * _596) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_594 * _597) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _628 = _626.x;
    float _634 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_599 * _596) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_594 * _599) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _628) * abs((_597 * 2.0) + (-1.0))) + _628;
    float _640 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _644 = fract(abs(_640));
    float _653 = sin(cbMtdParam._m0[21u].z);
    float _654 = cos(cbMtdParam._m0[21u].z);
    float _655 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _656 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _686 = abs(cbMtdParam._m0[20u].w * (((_634 - (((_640 >= ((-0.0) - _640)) ? _644 : ((-0.0) - _644)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_656, (-0.0) - _653, _654 * _655) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_656, _654, _655 * _653) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _690 = (((_686 * cbMtdParam._m0[18u].y) - _634) * _686) + _634;
    float _3076 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _691 = isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0));
    vec4 _703 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _718 = (cbMtdParam._m0[14u].x * _703.x) * cbMtdParam._m0[19u].x;
    float _719 = (cbMtdParam._m0[14u].y * _703.y) * cbMtdParam._m0[19u].x;
    float _720 = (cbMtdParam._m0[14u].z * _703.z) * cbMtdParam._m0[19u].x;
    float _730 = exp2(log2(_691) * cbMtdParam._m0[20u].x);
    float _3087 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _3098 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3109 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _759 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _763 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _764 = _274 * _763;
    float _765 = _275 * _763;
    float _766 = _276 * _763;
    float _772 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _773 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _786 = uint(roundEven(NORMAL.w)) * 13u;
    uint _788 = _786 + 9u;
    uint _789 = _788 + uint(cbMatDynParam._m0[0u].w);
    float _795 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0)))) * cbInstanceData._m0[_789].x;
    float _796 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0)))) * cbInstanceData._m0[_789].y;
    float _797 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0)))) * cbInstanceData._m0[_789].z;
    float _3120 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
    float _3131 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
    float _3142 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
    vec4 _809 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _772, cbSceneParam._m0[86u].y * _773));
    float _812 = _809.x * TEXCOORD_4;
    float _813 = (-0.0) - _764;
    float _814 = (-0.0) - _765;
    float _815 = (-0.0) - _766;
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1112;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _900 = (cbModelParam._m0[37u].x * ((((fma(_845, cbModelParam._m0[26u].z, fma(_841, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _902 = (cbModelParam._m0[37u].y * ((((fma(_845, cbModelParam._m0[27u].z, fma(_841, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _903 = (((((fma(_845, cbModelParam._m0[28u].z, fma(_841, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_900, _902, _903), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_900, _902, _903), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_900, _902, _903), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_900, _902, _903), 0.0);
        float _940 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_906.x + (-0.5));
        float _942 = _940 * (_906.y + (-0.5));
        float _943 = _940 * (_906.z + (-0.5));
        float _950 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_913.x + (-0.5));
        float _952 = _950 * (_913.y + (-0.5));
        float _953 = _950 * (_913.z + (-0.5));
        float _960 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_920.x + (-0.5));
        float _962 = _960 * (_920.y + (-0.5));
        float _963 = _960 * (_920.z + (-0.5));
        float _970 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_927.x + (-0.5));
        float _972 = _970 * (_927.y + (-0.5));
        float _973 = _970 * (_927.z + (-0.5));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = _941 * 0.5;
        float _978 = _951 * 0.5;
        float _979 = _961 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _994 = (dot(vec3(0.0), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3168 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1004 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3179 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3190 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0))) * (_1006 + 1.0))) + _1011) * _974;
        float _1021 = _942 * 0.5;
        float _1022 = _952 * 0.5;
        float _1023 = _962 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(0.0), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3201 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3212 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3223 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0))) * (_1048 + 1.0))) + _1053) * _975;
        float _1063 = _943 * 0.5;
        float _1064 = _953 * 0.5;
        float _1065 = _963 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(0.0), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3234 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3245 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3256 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))) * (_1090 + 1.0))) + _1095) * _976;
        _1112 = _943;
        _1114 = _942;
        _1115 = _941;
        _1116 = _953;
        _1117 = _952;
        _1118 = _951;
        _1119 = _963;
        _1120 = _962;
        _1121 = _961;
        _1122 = _976;
        _1123 = _975;
        _1124 = _974;
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
    }
    else
    {
        _1112 = _1113;
        _1114 = _1113;
        _1115 = _1113;
        _1116 = _1113;
        _1117 = _1113;
        _1118 = _1113;
        _1119 = _1113;
        _1120 = _1113;
        _1121 = _1113;
        _1122 = _1113;
        _1123 = _1113;
        _1124 = _1113;
        _1125 = 0.0;
        _1126 = 0.0;
        _1127 = 0.0;
    }
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1180 = (cbModelParam._m0[38u].x * ((((fma(_845, cbModelParam._m0[30u].z, fma(_841, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _837)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1181 = (cbModelParam._m0[38u].y * ((((fma(_845, cbModelParam._m0[31u].z, fma(_841, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _837)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1182 = (((((fma(_845, cbModelParam._m0[32u].z, fma(_841, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _837)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        float _1217 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1184.x + (-0.5));
        float _1219 = _1217 * (_1184.y + (-0.5));
        float _1220 = _1217 * (_1184.z + (-0.5));
        float _1227 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1191.x + (-0.5));
        float _1229 = _1227 * (_1191.y + (-0.5));
        float _1230 = _1227 * (_1191.z + (-0.5));
        float _1237 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1198.x + (-0.5));
        float _1239 = _1237 * (_1198.y + (-0.5));
        float _1240 = _1237 * (_1198.z + (-0.5));
        float _1247 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1205.x + (-0.5));
        float _1249 = _1247 * (_1205.y + (-0.5));
        float _1250 = _1247 * (_1205.z + (-0.5));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = _1218 * 0.5;
        float _1255 = _1228 * 0.5;
        float _1256 = _1238 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(0.0), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3319 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_1281 + 1.0))) + _1286) * _1251;
        float _1296 = _1219 * 0.5;
        float _1297 = _1229 * 0.5;
        float _1298 = _1239 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(0.0), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3330 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3341 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3352 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * (_1323 + 1.0))) + _1328) * _1252;
        float _1338 = _1220 * 0.5;
        float _1339 = _1230 * 0.5;
        float _1340 = _1240 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(0.0), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3363 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3374 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3385 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * (_1365 + 1.0))) + _1370) * _1253;
        _1387 = _1220;
        _1388 = _1219;
        _1389 = _1218;
        _1390 = _1230;
        _1391 = _1229;
        _1392 = _1228;
        _1393 = _1240;
        _1394 = _1239;
        _1395 = _1238;
        _1396 = _1253;
        _1397 = _1252;
        _1398 = _1251;
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
    }
    else
    {
        _1387 = _1113;
        _1388 = _1113;
        _1389 = _1113;
        _1390 = _1113;
        _1391 = _1113;
        _1392 = _1113;
        _1393 = _1113;
        _1394 = _1113;
        _1395 = _1113;
        _1396 = _1113;
        _1397 = _1113;
        _1398 = _1113;
        _1399 = 0.0;
        _1400 = 0.0;
        _1401 = 0.0;
    }
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1125)) + _1125;
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1126)) + _1126;
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1127)) + _1127;
    float _1434 = fma(_1413, cbSceneParam._m0[89u].z, fma(_1412, cbSceneParam._m0[89u].y, _1411 * cbSceneParam._m0[89u].x));
    float _1437 = fma(_1413, cbSceneParam._m0[90u].z, fma(_1412, cbSceneParam._m0[90u].y, _1411 * cbSceneParam._m0[90u].x));
    float _1440 = fma(_1413, cbSceneParam._m0[91u].z, fma(_1412, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1411));
    float _1455 = _764 * (-0.5);
    float _1456 = _765 * (-0.5);
    float _1457 = _766 * (-0.5);
    float _1458 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1461 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1464 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1498;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1471 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1112, _1116, _1119, _1122));
        float _1475 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1479 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1486 = dot(vec4(cbModelParam._m0[39u]), vec4(_1455, _1456, _1457, 1.0));
        _1498 = dot(vec3(isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1486) ? 0.0 : (isnan(0.0) ? _1486 : max(0.0, _1486))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1498 = 1.0;
    }
    float _1509;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1500 = dot(vec4(cbModelParam._m0[40u]), vec4(_1455, _1456, _1457, 1.0));
        _1509 = dot(vec3(isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1500) ? 0.0 : (isnan(0.0) ? _1500 : max(0.0, _1500))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1509 = 1.0;
    }
    float _1513 = (_1509 * cbModelParam._m0[1u].x) + (_1498 * (1.0 - cbModelParam._m0[1u].x));
    float _1522 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1570 = fma(_845, cbModelParam._m0[13u].z, fma(_841, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837)) + cbModelParam._m0[13u].w;
        float _1574 = fma(_845, cbModelParam._m0[14u].z, fma(_841, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837)) + cbModelParam._m0[14u].w;
        float _1578 = fma(_845, cbModelParam._m0[15u].z, fma(_841, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837)) + cbModelParam._m0[15u].w;
        float _1581 = fma(_815, cbModelParam._m0[13u].z, fma(_814, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _813));
        float _1584 = fma(_815, cbModelParam._m0[14u].z, fma(_814, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _813));
        float _1587 = fma(_815, cbModelParam._m0[15u].z, fma(_814, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _813));
        float _1613;
        if (_1581 > 0.0)
        {
            _1613 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1613 = frontier_phi_38_36_ladder;
        }
        float _1908;
        if (_1584 > 0.0)
        {
            _1908 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1908 = frontier_phi_47_43_ladder;
        }
        float _2245;
        if (_1587 > 0.0)
        {
            _2245 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2245 = frontier_phi_61_54_ladder;
        }
        float _2247 = isnan(_1908) ? _1613 : (isnan(_1613) ? _1908 : min(_1613, _1908));
        float _2248 = isnan(_2245) ? _2247 : (isnan(_2247) ? _2245 : min(_2247, _2245));
        float _2252 = (_2248 * _1581) + _1570;
        float _2253 = (_2248 * _1584) + _1574;
        float _2254 = (_2248 * _1587) + _1578;
        float _2255 = _2248 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2255;
        float _2258 = _2255 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2254 > _2258) || ((_2254 < _2256) || ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 < _2256) || (_2252 > _2258))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2254, cbModelParam._m0[9u].z, fma(_2253, cbModelParam._m0[9u].y, _2252 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2254, cbModelParam._m0[10u].z, fma(_2253, cbModelParam._m0[10u].y, _2252 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2254, cbModelParam._m0[11u].z, fma(_2253, cbModelParam._m0[11u].y, _2252 * cbModelParam._m0[11u].x))), _1522);
            frontier_phi_37_61_ladder = _2377.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2377.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2377.x * cbModelParam._m0[1u].y;
        }
        _1603 = frontier_phi_37_61_ladder_2;
        _1605 = frontier_phi_37_61_ladder_1;
        _1607 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_813, _814, _815), _1522);
        _1603 = _1591.x * cbModelParam._m0[1u].y;
        _1605 = _1591.y * cbModelParam._m0[1u].y;
        _1607 = _1591.z * cbModelParam._m0[1u].y;
    }
    float _1610 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1662 = fma(_845, cbModelParam._m0[21u].z, fma(_841, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837)) + cbModelParam._m0[21u].w;
        float _1666 = fma(_845, cbModelParam._m0[22u].z, fma(_841, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837)) + cbModelParam._m0[22u].w;
        float _1670 = fma(_845, cbModelParam._m0[23u].z, fma(_841, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837)) + cbModelParam._m0[23u].w;
        float _1673 = fma(_815, cbModelParam._m0[21u].z, fma(_814, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _813));
        float _1676 = fma(_815, cbModelParam._m0[22u].z, fma(_814, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _813));
        float _1679 = fma(_815, cbModelParam._m0[23u].z, fma(_814, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _813));
        float _1913;
        if (_1673 > 0.0)
        {
            _1913 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1913 = frontier_phi_49_45_ladder;
        }
        float _2271;
        if (_1676 > 0.0)
        {
            _2271 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2271 = frontier_phi_63_56_ladder;
        }
        float _2437;
        if (_1679 > 0.0)
        {
            _2437 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2437 = frontier_phi_77_72_ladder;
        }
        float _2439 = isnan(_2271) ? _1913 : (isnan(_1913) ? _2271 : min(_1913, _2271));
        float _2440 = isnan(_2437) ? _2439 : (isnan(_2439) ? _2437 : min(_2439, _2437));
        float _2444 = (_2440 * _1673) + _1662;
        float _2445 = (_2440 * _1676) + _1666;
        float _2446 = (_2440 * _1679) + _1670;
        float _2447 = _2440 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2447;
        float _2450 = _2447 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2446 > _2450) || ((_2446 < _2448) || ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 < _2448) || (_2444 > _2450))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2446, cbModelParam._m0[17u].z, fma(_2445, cbModelParam._m0[17u].y, _2444 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2446, cbModelParam._m0[18u].z, fma(_2445, cbModelParam._m0[18u].y, _2444 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2446, cbModelParam._m0[19u].z, fma(_2445, cbModelParam._m0[19u].y, _2444 * cbModelParam._m0[19u].x))), _1610);
            frontier_phi_46_77_ladder = _2629.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2629.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2629.x * cbModelParam._m0[1u].z;
        }
        _1698 = frontier_phi_46_77_ladder_2;
        _1700 = frontier_phi_46_77_ladder_1;
        _1702 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_813, _814, _815), _1610);
        _1698 = _1682.x * cbModelParam._m0[1u].z;
        _1700 = _1682.y * cbModelParam._m0[1u].z;
        _1702 = _1682.z * cbModelParam._m0[1u].z;
    }
    float _1714 = _812 * 0.01200000010430812835693359375;
    float _1716 = _1714 * ((cbModelParam._m0[1u].w * (_1698 - _1603)) + _1603);
    float _1717 = _1714 * ((cbModelParam._m0[1u].w * (_1700 - _1605)) + _1605);
    float _1718 = _1714 * ((cbModelParam._m0[1u].w * (_1702 - _1607)) + _1607);
    float _1721 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, _1716 * cbSceneParam._m0[91u].x));
    uvec4 _1737 = floatBitsToUint(cbInstanceData._m0[_786 + 5u]);
    uint _1739 = _1737.x * 14u;
    uint _1740 = _1739 + 13u;
    float _1745 = _812 + (-1.0);
    float _1748 = (cbLight._m0[_1740].x * _1745) + 1.0;
    float _1749 = (cbLight._m0[_1740].y * _1745) + 1.0;
    uint _1750 = _1739 + 5u;
    float _1756 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
    uint _1760 = _1739 + 4u;
    float _1766 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
    uint _1770 = _1739 | 1u;
    float _1781 = dot(vec3(cbLight._m0[_1739].xyz), vec3(0.0));
    float _1784 = dot(vec3(cbLight._m0[_1770].xyz), vec3(0.0));
    float _3521 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _3532 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1789 = (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * 0.3183098733425140380859375;
    float _1791 = (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.3183098733425140380859375;
    float _1798 = ((cbLight._m0[_1750].x * _1756) * _1791) + ((cbLight._m0[_1760].x * _1766) * _1789);
    float _1799 = ((_1756 * cbLight._m0[_1750].y) * _1791) + ((_1766 * cbLight._m0[_1760].y) * _1789);
    float _1800 = ((_1756 * cbLight._m0[_1750].z) * _1791) + ((_1766 * cbLight._m0[_1760].z) * _1789);
    uint _1801 = _1739 + 8u;
    float _1807 = cbLight._m0[_1739].x + _764;
    float _1808 = cbLight._m0[_1739].y + _765;
    float _1809 = cbLight._m0[_1739].z + _766;
    float _1813 = inversesqrt(dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809)));
    float _1817 = dot(vec3(0.0), vec3(cbLight._m0[_1739].xyz));
    float _3543 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _1821 = dot(vec3(0.0), vec3(_764, _765, _766));
    float _3554 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _1825 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_1807 * _1813, _1808 * _1813, _1809 * _1813));
    float _3565 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1836 = (exp2(log2(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1842 = (0.5 / ((_1820 + 9.9999999392252902907785028219223e-09) + _1824)) * _1820;
    float _3576 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1844 = (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * 0.31831014156341552734375;
    uint _1855 = _1739 + 9u;
    float _1861 = cbLight._m0[_1770].x + _764;
    float _1862 = cbLight._m0[_1770].y + _765;
    float _1863 = cbLight._m0[_1770].z + _766;
    float _1867 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
    float _1871 = dot(vec3(0.0), vec3(cbLight._m0[_1770].xyz));
    float _3587 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _1875 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_1861 * _1867, _1862 * _1867, _1863 * _1867));
    float _3598 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1884 = (exp2(log2(1.0 - (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1888 = (0.5 / ((_1874 + 9.9999999392252902907785028219223e-09) + _1824)) * _1874;
    float _3609 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1890 = (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * 0.31831014156341552734375;
    float _1900 = (((_1884 * cbLight._m0[_1855].x) * _1890) * _1756) + (((_1836 * cbLight._m0[_1801].x) * _1844) * _1766);
    float _1901 = (((_1884 * cbLight._m0[_1855].y) * _1890) * _1756) + (((_1836 * cbLight._m0[_1801].y) * _1844) * _1766);
    float _1902 = (((_1884 * cbLight._m0[_1855].z) * _1890) * _1756) + (((_1836 * cbLight._m0[_1801].z) * _1844) * _1766);
    float _2019;
    float _2021;
    float _2023;
    float _2025;
    float _2027;
    float _2029;
    if (_1737.y == 0u)
    {
        float _1958 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1959 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1958;
        float _1960 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1958;
        float _1961 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1958;
        uvec4 _1973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1974 = _1973.x;
        uint _1985 = uint((float(_1973.y) * floor(float(uint(cbSceneParam._m0[85u].y * _773) / _1974))) + floor(float(uint(cbSceneParam._m0[85u].x * _772) / _1974)));
        float _1995 = (log2(_1961 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1996 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        uint _1999 = uint(isnan(14.0) ? _1996 : (isnan(_1996) ? 14.0 : min(_1996, 14.0)));
        uvec4 _2005 = texelFetch(g_lightClusterGridBuffer, int(((_1999 << 2u) + (_1985 << 6u)) >> 2u));
        uint _2006 = _2005.x;
        uint _2007 = _1973.z;
        float _2123;
        float _2125;
        float _2127;
        float _2129;
        float _2131;
        float _2133;
        if (((((1u << ((_2007 >> 4u) & 15u)) + 4294967295u) & _2006) == 0u) || ((_2007 & 240u) == 0u))
        {
            _2123 = 0.0;
            _2125 = 0.0;
            _2127 = 0.0;
            _2129 = 0.0;
            _2131 = 0.0;
            _2133 = 0.0;
        }
        else
        {
            float _2124;
            float _2126;
            float _2128;
            float _2130;
            float _2132;
            float _2134;
            float _2305 = 0.0;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            float _2309 = 0.0;
            float _2310 = 0.0;
            uint _2311 = 0u;
            uint _2320;
            bool _2321;
            for (;;)
            {
                _2320 = texelFetch(g_lightClassification, int((((_1999 << 5u) + (_1985 << 9u)) + (_2311 << 2u)) >> 2u)).x;
                _2321 = _2320 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2321)
                {
                    frontier_phi_74_pred = _2308;
                    frontier_phi_74_pred_1 = _2307;
                    frontier_phi_74_pred_2 = _2306;
                    frontier_phi_74_pred_3 = _2305;
                    frontier_phi_74_pred_4 = _2309;
                    frontier_phi_74_pred_5 = _2310;
                }
                else
                {
                    float _2480;
                    float _2481;
                    float _2482;
                    float _2483;
                    float _2484;
                    float _2485;
                    uint _2486;
                    _2480 = _2305;
                    _2481 = _2306;
                    _2482 = _2307;
                    _2483 = _2308;
                    _2484 = _2309;
                    _2485 = _2310;
                    _2486 = _2320;
                    float _2386;
                    float _2387;
                    float _2388;
                    float _2389;
                    float _2390;
                    float _2391;
                    for (;;)
                    {
                        uint _2490 = uint(findLSB(_2486)) + (_2311 << 5u);
                        uint _2487 = (_2486 + 4294967295u) & _2486;
                        uint _2492 = _2490 * 48u;
                        vec4 _2506 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2492)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 3u)).x));
                        uint _2512 = (_2490 * 48u) + 4u;
                        vec4 _2525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2512)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 3u)).x));
                        uint _2531 = (_2490 * 48u) + 8u;
                        vec3 _2542 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2531)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 2u)).x));
                        float _2546 = _2506.x - _1959;
                        float _2547 = _2506.y - _1960;
                        float _2548 = _2506.z - _1961;
                        float _2549 = dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548));
                        float _2552 = inversesqrt(_2549);
                        float _2561 = 1.0 - (_2549 * _2506.w);
                        float _3630 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
                        float _2562 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
                        float _2563 = sqrt(_2549) * _2525.w;
                        float _2566 = 1.39999997615814208984375 / (_2563 + 1.39999997615814208984375);
                        float _2567 = _2566 * _2566;
                        float _2570 = ((1.0 - _2567) * dot(vec3(0.0), vec3(_2552 * _2546, _2552 * _2547, _2552 * _2548))) + _2567;
                        float _2573 = _2563 * _2563;
                        float _2577 = ((isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0))) * _2562) / ((_2573 * 0.699999988079071044921875) + 1.0);
                        float _2581 = (-0.0) - _1959;
                        float _2582 = (-0.0) - _1960;
                        float _2583 = (-0.0) - _1961;
                        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
                        float _2591 = dot(vec3(0.0), vec3(_2587 * _2581, _2587 * _2582, _2587 * _2583));
                        float _3646 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                        float _3657 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
                        float _2595 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
                        float _2599 = (0.5 / (((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) + 9.9999999392252902907785028219223e-09) + _2595)) * _2595;
                        float _3668 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
                        float _2608 = (((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * 3.1415927410125732421875) / ((_2573 * 2.1991131305694580078125) + 3.141590118408203125)) * _2562;
                        _2389 = (_2577 * _2525.x) + _2483;
                        _2390 = (_2577 * _2525.y) + _2484;
                        _2391 = (_2577 * _2525.z) + _2485;
                        _2386 = (_2608 * _2542.x) + _2480;
                        _2387 = (_2608 * _2542.y) + _2481;
                        _2388 = (_2608 * _2542.z) + _2482;
                        if (_2487 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2480 = _2386;
                            _2481 = _2387;
                            _2482 = _2388;
                            _2483 = _2389;
                            _2484 = _2390;
                            _2485 = _2391;
                            _2486 = _2487;
                        }
                    }
                    frontier_phi_74_pred = _2389;
                    frontier_phi_74_pred_1 = _2388;
                    frontier_phi_74_pred_2 = _2387;
                    frontier_phi_74_pred_3 = _2386;
                    frontier_phi_74_pred_4 = _2390;
                    frontier_phi_74_pred_5 = _2391;
                }
                _2130 = frontier_phi_74_pred;
                _2128 = frontier_phi_74_pred_1;
                _2126 = frontier_phi_74_pred_2;
                _2124 = frontier_phi_74_pred_3;
                _2132 = frontier_phi_74_pred_4;
                _2134 = frontier_phi_74_pred_5;
                uint _2312 = _2311 + 1u;
                if (_2312 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2305 = _2124;
                    _2306 = _2126;
                    _2307 = _2128;
                    _2308 = _2130;
                    _2309 = _2132;
                    _2310 = _2134;
                    _2311 = _2312;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2123 = _2124;
            _2125 = _2126;
            _2127 = _2128;
            _2129 = _2130;
            _2131 = _2132;
            _2133 = _2134;
        }
        uvec4 _2137 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2138 = _2137.z;
        uint _2140 = (_2138 >> 8u) & 15u;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        if (((4294967295u << _2140) & _2006) == 0u)
        {
            _2276 = _2123;
            _2278 = _2125;
            _2280 = _2127;
            _2282 = _2129;
            _2284 = _2131;
            _2286 = _2133;
        }
        else
        {
            float _2301 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2140 < ((_2138 >> 12u) & 15u))
            {
                float _2277;
                float _2279;
                float _2281;
                float _2283;
                float _2285;
                float _2287;
                float _2463 = _2123;
                float _2464 = _2125;
                float _2465 = _2127;
                float _2466 = _2129;
                float _2467 = _2131;
                float _2468 = _2133;
                uint _2469 = _2140;
                uint _2478;
                bool _2479;
                for (;;)
                {
                    _2478 = texelFetch(g_lightClassification, int((((_1999 << 5u) + (_1985 << 9u)) + (_2469 << 2u)) >> 2u)).x;
                    _2479 = _2478 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2479)
                    {
                        frontier_phi_83_pred = _2466;
                        frontier_phi_83_pred_1 = _2465;
                        frontier_phi_83_pred_2 = _2464;
                        frontier_phi_83_pred_3 = _2463;
                        frontier_phi_83_pred_4 = _2468;
                        frontier_phi_83_pred_5 = _2467;
                    }
                    else
                    {
                        float _2634;
                        float _2635;
                        float _2636;
                        float _2637;
                        float _2638;
                        float _2639;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _2647 = _2463;
                        float _2648 = _2464;
                        float _2649 = _2465;
                        float _2650 = _2466;
                        float _2651 = _2467;
                        float _2652 = _2468;
                        uint _2653 = _2478;
                        uint _2654;
                        vec4 _2679;
                        float _2680;
                        vec4 _2695;
                        vec3 _2707;
                        vec4 _2723;
                        vec4 _2738;
                        float _2784;
                        bool _2785;
                        for (;;)
                        {
                            uint _2664 = ((_2469 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2653));
                            _2654 = (_2653 + 4294967295u) & _2653;
                            uint _2666 = _2664 * 40u;
                            _2679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 3u)).x));
                            _2680 = _2679.w;
                            uint _2682 = (_2664 * 40u) + 4u;
                            _2695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 3u)).x));
                            uint _2697 = (_2664 * 40u) + 8u;
                            _2707 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 2u)).x));
                            uint _2710 = (_2664 * 40u) + 16u;
                            _2723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 3u)).x));
                            uint _2725 = (_2664 * 40u) + 20u;
                            _2738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 3u)).x));
                            uint _2740 = (_2664 * 40u) + 24u;
                            vec4 _2753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 3u)).x));
                            uint _2759 = (_2664 * 40u) + 28u;
                            vec4 _2772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 3u)).x));
                            _2784 = fma(_1961, _2772.z, fma(_1960, _2772.y, _2772.x * _1959)) + _2772.w;
                            _2785 = !((fma(_1961, _2753.z, fma(_1960, _2753.y, _2753.x * _1959)) + _2753.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2785)
                            {
                                float _2812 = _2679.x - _1959;
                                float _2813 = _2679.y - _1960;
                                float _2814 = _2679.z - _1961;
                                float _2815 = dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814));
                                float _2818 = inversesqrt(_2815);
                                float _2819 = _2818 * _2812;
                                float _2820 = _2818 * _2813;
                                float _2821 = _2818 * _2814;
                                float _2825 = 1.0 - (_2815 / (_2680 * _2680));
                                float _3679 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                                float _2826 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
                                float _2830 = sqrt(_2815) * _2695.w;
                                float _2832 = 1.39999997615814208984375 / (_2830 + 1.39999997615814208984375);
                                float _2833 = _2832 * _2832;
                                float _2834 = 1.0 - _2833;
                                float _2836 = (_2834 * dot(vec3(_2819, _2820, _2821), vec3(0.0))) + _2833;
                                float _2839 = _2830 * _2830;
                                float _2843 = (fma(_1961, _2723.z, fma(_1960, _2723.y, _2723.x * _1959)) + _2723.w) / _2784;
                                float _2844 = (fma(_1961, _2738.z, fma(_1960, _2738.y, _2738.x * _1959)) + _2738.w) / _2784;
                                float _2848 = 1.0 - dot(vec2(_2843, _2844), vec2(_2843, _2844));
                                float _3695 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                                float _2849 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
                                float _2850 = _2849 * (((isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0))) * _2826) / ((_2839 * 0.699999988079071044921875) + 1.0));
                                float _2860 = dot(vec3(0.0), vec3((-0.0) - (_1959 * _2301), (-0.0) - (_1960 * _2301), (-0.0) - (_1961 * _2301)));
                                float _3706 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                                float _2868 = (_2834 * dot(vec3(0.0), vec3(_2819, _2820, _2821))) + _2833;
                                float _3717 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                                float _2869 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
                                float _2873 = (0.5 / (((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) + 9.9999999392252902907785028219223e-09) + _2869)) * _2869;
                                float _3728 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                                float _2880 = (_2849 * _2826) * (((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 3.1415927410125732421875) / ((_2839 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_89_pred = _2850 * _2695.x;
                                frontier_phi_89_pred_1 = _2880 * _2707.z;
                                frontier_phi_89_pred_2 = _2880 * _2707.y;
                                frontier_phi_89_pred_3 = _2880 * _2707.x;
                                frontier_phi_89_pred_4 = _2850 * _2695.z;
                                frontier_phi_89_pred_5 = _2850 * _2695.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _2887 = frontier_phi_89_pred;
                            _2886 = frontier_phi_89_pred_1;
                            _2885 = frontier_phi_89_pred_2;
                            _2884 = frontier_phi_89_pred_3;
                            _2889 = frontier_phi_89_pred_4;
                            _2888 = frontier_phi_89_pred_5;
                            _2637 = _2887 + _2650;
                            _2638 = _2888 + _2651;
                            _2639 = _2889 + _2652;
                            _2634 = _2884 + _2647;
                            _2635 = _2885 + _2648;
                            _2636 = _2886 + _2649;
                            if (_2654 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2647 = _2634;
                                _2648 = _2635;
                                _2649 = _2636;
                                _2650 = _2637;
                                _2651 = _2638;
                                _2652 = _2639;
                                _2653 = _2654;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2637;
                        frontier_phi_83_pred_1 = _2636;
                        frontier_phi_83_pred_2 = _2635;
                        frontier_phi_83_pred_3 = _2634;
                        frontier_phi_83_pred_4 = _2639;
                        frontier_phi_83_pred_5 = _2638;
                    }
                    _2283 = frontier_phi_83_pred;
                    _2281 = frontier_phi_83_pred_1;
                    _2279 = frontier_phi_83_pred_2;
                    _2277 = frontier_phi_83_pred_3;
                    _2287 = frontier_phi_83_pred_4;
                    _2285 = frontier_phi_83_pred_5;
                    uint _2470 = _2469 + 1u;
                    if (_2470 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2463 = _2277;
                        _2464 = _2279;
                        _2465 = _2281;
                        _2466 = _2283;
                        _2467 = _2285;
                        _2468 = _2287;
                        _2469 = _2470;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2287;
                frontier_phi_65_66_ladder_1 = _2285;
                frontier_phi_65_66_ladder_2 = _2281;
                frontier_phi_65_66_ladder_3 = _2279;
                frontier_phi_65_66_ladder_4 = _2283;
                frontier_phi_65_66_ladder_5 = _2277;
            }
            else
            {
                frontier_phi_65_66_ladder = _2133;
                frontier_phi_65_66_ladder_1 = _2131;
                frontier_phi_65_66_ladder_2 = _2127;
                frontier_phi_65_66_ladder_3 = _2125;
                frontier_phi_65_66_ladder_4 = _2129;
                frontier_phi_65_66_ladder_5 = _2123;
            }
            _2276 = frontier_phi_65_66_ladder_5;
            _2278 = frontier_phi_65_66_ladder_3;
            _2280 = frontier_phi_65_66_ladder_2;
            _2282 = frontier_phi_65_66_ladder_4;
            _2284 = frontier_phi_65_66_ladder_1;
            _2286 = frontier_phi_65_66_ladder;
        }
        float _2291 = isnan(1.0) ? _812 : (isnan(_812) ? 1.0 : min(_812, 1.0));
        _2019 = (_2291 * _2282) + _1798;
        _2021 = (_2291 * _2284) + _1799;
        _2023 = (_2291 * _2286) + _1800;
        _2025 = ((_2276 * 0.039999999105930328369140625) * _2291) + _1900;
        _2027 = ((_2278 * 0.039999999105930328369140625) * _2291) + _1901;
        _2029 = ((_2280 * 0.039999999105930328369140625) * _2291) + _1902;
    }
    else
    {
        _2019 = _1798;
        _2021 = _1799;
        _2023 = _1800;
        _2025 = _1900;
        _2027 = _1901;
        _2029 = _1902;
    }
    uint _2035 = _788 + uint(cbMatDynParam._m0[0u].w);
    float _2041 = ((_730 * (_718 - (_718 * _691))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2035].x;
    float _2042 = ((_730 * (_719 - (_719 * _691))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2035].y;
    float _2043 = ((_730 * (_720 - (_720 * _691))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2035].z;
    float _3744 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _3755 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _3766 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _2060 = (((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_2019 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _812))) + ((_2025 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1513)) * cbPerFrame._m0[3u].x)) + _2041;
    float _2062 = (_2042 + ((_2027 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1513)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_2021 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _812)));
    float _2064 = (_2043 + ((_2029 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1513)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_2023 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _812)));
    float _3792 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2077 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    uint _2078 = _786 + 6u;
    float _2086 = _772 / cbSceneParam._m0[86u].x;
    float _2087 = _773 / cbSceneParam._m0[86u].y;
    vec4 _2101 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2086, _2087, (log2((isnan(cbSceneParam._m0[77u].w) ? _759 : (isnan(_759) ? cbSceneParam._m0[77u].w : min(_759, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2103 = _2101.x;
    float _2104 = _2101.y;
    float _2105 = _2101.z;
    float _2106 = _2101.w;
    float _2186;
    float _2188;
    float _2190;
    float _2192;
    if (_759 > cbSceneParam._m0[78u].w)
    {
        float _2148 = isnan(_759) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _759 : min(cbSceneParam._m0[80u].w, _759));
        float _2149 = _2148 / _759;
        float _2160 = _2149 * _274;
        float _2161 = _275 * _2149;
        float _2162 = (-0.0) - _2161;
        float _2163 = _2149 * _276;
        float _2165 = (cbSceneParam._m0[77u].w * _2162) / _2148;
        float _2166 = _2165 + cbSceneParam._m0[79u].w;
        float _2167 = cbSceneParam._m0[79u].w - _2161;
        float _2173 = sqrt(((_2160 * _2160) + (_2161 * _2161)) + (_2163 * _2163));
        float _2176 = (1.0 - (cbSceneParam._m0[77u].w / _2148)) * _2173;
        float _2182 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2184 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2399;
        if (abs((_2162 - _2165) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2399 = ((((_2166 > 0.0) ? exp2(_2182 * _2166) : (2.0 - exp2(_2184 * _2166))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2176;
        }
        else
        {
            float _2334 = 1.0 / cbSceneParam._m0[80u].x;
            float _2335 = isnan(_2167) ? _2166 : (isnan(_2166) ? _2167 : max(_2166, _2167));
            float _2336 = isnan(_2167) ? _2166 : (isnan(_2166) ? _2167 : min(_2166, _2167));
            float _2345 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : min(_2335, 0.0));
            float _2346 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : min(_2336, 0.0));
            _2399 = ((abs(_2173 / _2162) * cbSceneParam._m0[80u].y) * ((((_2345 - _2346) * 2.0) - ((exp2(_2182 * (isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0)))) - exp2(_2182 * (isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0))))) * _2334)) - ((exp2(_2184 * _2345) - exp2(_2184 * _2346)) * _2334))) + (_2176 * cbSceneParam._m0[80u].z);
        }
        vec4 _2401 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2086, _2087, 1.0), 0.0);
        float _2410 = exp2((_2399 * (-1.44269502162933349609375)) * (1.0 - _2401.w));
        float _2411 = log2(_2410);
        float _2427 = log2(_2106);
        _2186 = (exp2(_2427 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2411 * cbSceneParam._m0[78u].x)) * _2401.x) / cbSceneParam._m0[78u].x)) + _2103;
        _2188 = (exp2(_2427 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2411 * cbSceneParam._m0[78u].y)) * _2401.y) / cbSceneParam._m0[78u].y)) + _2104;
        _2190 = (exp2(_2427 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2411 * cbSceneParam._m0[78u].z)) * _2401.z) / cbSceneParam._m0[78u].z)) + _2105;
        _2192 = _2410 * _2106;
    }
    else
    {
        _2186 = _2103;
        _2188 = _2104;
        _2190 = _2105;
        _2192 = _2106;
    }
    float _2203 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2204 = _2203 == 3.0;
    float _2206 = log2(_2192);
    float _2210 = exp2(_2206 * cbSceneParam._m0[78u].x);
    float _2211 = exp2(_2206 * cbSceneParam._m0[78u].y);
    float _2212 = exp2(_2206 * cbSceneParam._m0[78u].z);
    float _2213 = _2210 * (isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0)));
    float _2214 = _2211 * (isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0)));
    float _2215 = _2212 * (isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0)));
    float _2224 = (_2203 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2224 * (_2204 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2186)));
    SV_Target.y = _2224 * (_2204 ? _2214 : (_2214 + (cbSceneParam._m0[72u].w * _2188)));
    SV_Target.z = _2224 * (_2204 ? _2215 : (_2215 + (cbSceneParam._m0[72u].w * _2190)));
    SV_Target.w = cbInstanceData._m0[_2078].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2041) * _2077) * _2210) * _2224;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2042) * _2077) * _2211) * _2224;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2043) * _2077) * _2212) * _2224;
    SV_Target_1.w = cbInstanceData._m0[_2078].w;
}


