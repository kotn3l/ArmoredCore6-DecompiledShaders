#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1380;
float _3832;
float _3833;
float _3834;
float _3835;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _278 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _288 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _278);
    float _289 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _278);
    float _290 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _278);
    vec4 _304 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _307 = _304.x;
    vec4 _325 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _342 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _307) + cbMtdParam._m0[12u].x) * _325.x;
    float _344 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _307) + cbMtdParam._m0[12u].y) * _325.y;
    float _346 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _307) + cbMtdParam._m0[12u].z) * _325.z;
    vec4 _364 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _403 = cbMtdParam._m0[27u].w + _288;
    float _404 = cbMtdParam._m0[28u].x + _289;
    float _405 = cbMtdParam._m0[28u].y + _290;
    float _419 = (-0.0) - dot(vec3(_403, _404, _405), vec3(_218, _219, _220));
    float _420 = (-0.0) - dot(vec3(_403, _404, _405), vec3(_232, _233, _234));
    float _421 = (-0.0) - dot(vec3(_403, _404, _405), vec3((-0.0) - _225, (-0.0) - _226, (-0.0) - _227));
    float _425 = inversesqrt(dot(vec3(_419, _420, _421), vec3(_419, _420, _421)));
    float _428 = _425 * _421;
    float _429 = (_425 * _419) + ((cbMtdParam._m0[25u].w * _307) * ((_364.x * 2.0) + (-1.0)));
    float _430 = (_425 * _420) + ((cbMtdParam._m0[26u].x * _307) * ((_364.y * 2.0) + (-1.0)));
    float _431 = _429 * cbMtdParam._m0[24u].x;
    float _432 = _430 * cbMtdParam._m0[23u].w;
    float _433 = fract(TEXCOORD.x);
    float _434 = fract(TEXCOORD.y);
    float _440;
    if (_431 > 0.0)
    {
        _440 = (1.0 - _433) / _431;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_431 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _433) / _431;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _440 = frontier_phi_3_2_ladder;
    }
    float _448;
    if (_432 > 0.0)
    {
        _448 = (1.0 - _434) / _432;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_432 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _434) / _432;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _448 = frontier_phi_7_6_ladder;
    }
    bool _450 = _428 > 0.0;
    float _452 = _450 ? (cbMtdParam._m0[17u].x / _428) : 5000.0;
    float _453 = isnan(_448) ? _440 : (isnan(_440) ? _448 : min(_440, _448));
    float _454 = isnan(_452) ? _453 : (isnan(_453) ? _452 : min(_453, _452));
    float _458 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _459 = _433 + (-0.5);
    float _462 = _434 + (-0.5);
    float _465 = ((_454 * _428) + _458) / _458;
    vec4 _490 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_459 + (_454 * _431)) / _465) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_462 + (_454 * _432)) / _465) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _503 = (_490.x * _307) * cbMtdParam._m0[9u].x;
    float _504 = (_490.y * _307) * cbMtdParam._m0[9u].y;
    float _505 = (_490.z * _307) * cbMtdParam._m0[9u].z;
    float _523 = _429 * cbMtdParam._m0[26u].z;
    float _524 = _430 * cbMtdParam._m0[26u].y;
    bool _525 = _523 > 0.0;
    float _530;
    if (_525)
    {
        _530 = (1.0 - _433) / _523;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _433) / _523;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _530 = frontier_phi_11_10_ladder;
    }
    bool _532 = _524 > 0.0;
    float _537;
    if (_532)
    {
        _537 = (1.0 - _434) / _524;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_524 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _434) / _524;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _537 = frontier_phi_15_14_ladder;
    }
    float _540 = _450 ? (cbMtdParam._m0[19u].z / _428) : 5000.0;
    float _541 = isnan(_537) ? _530 : (isnan(_530) ? _537 : min(_530, _537));
    float _542 = isnan(_540) ? _541 : (isnan(_541) ? _540 : min(_541, _540));
    float _546 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _550 = ((_542 * _428) + _546) / _546;
    float _555 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _557 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _573 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_459 + (_542 * _523)) / _550) + 0.5) + _555) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_462 + (_542 * _524)) / _550) + 0.5) + _557) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _588;
    if (_525)
    {
        _588 = (1.0 - _433) / _523;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _433) / _523;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _588 = frontier_phi_19_18_ladder;
    }
    float _594;
    if (_532)
    {
        _594 = (1.0 - _434) / _524;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_524 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _434) / _524;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _594 = frontier_phi_23_22_ladder;
    }
    float _596 = isnan(_594) ? _588 : (isnan(_588) ? _594 : min(_588, _594));
    float _597 = isnan(_540) ? _596 : (isnan(_596) ? _540 : min(_596, _540));
    float _604 = ((_597 * _428) + _546) / _546;
    vec4 _624 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_459 + (_597 * _523)) / _604) + 0.5) + _555) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_462 + (_597 * _524)) / _604) + 0.5) + _557) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _626 = _624.x;
    float _636 = _307 * 0.1500000059604644775390625;
    float _647 = (_636 * ((_503 - _342) + (((((cbMtdParam._m0[10u].x * _307) * _573.x) - _503) * _307) * _626))) + _342;
    float _648 = (_636 * ((_504 - _344) + (((((cbMtdParam._m0[10u].y * _307) * _573.y) - _504) * _307) * _626))) + _344;
    float _649 = (_636 * ((_505 - _346) + (((((cbMtdParam._m0[10u].z * _307) * _573.z) - _505) * _307) * _626))) + _346;
    vec4 _662 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _666 = _662.z;
    float _669 = (_662.x * 2.0) + (-1.0);
    float _670 = (_662.y * 2.0) + (-1.0);
    float _671 = dot(vec2(_669, _670), vec2(_669, _670));
    float _3874 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _676 = sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))));
    vec4 _700 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _705 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _711 = ((_700.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _713 = (-0.0) - (cbMtdParam._m0[21u].x * ((_700.x * 0.5) + (-0.25)));
    float _714 = fract(_705);
    float _716 = fract(_705 + 0.5);
    vec4 _743 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_714 * _713) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_711 * _714) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _745 = _743.x;
    float _751 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_716 * _713) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_711 * _716) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _745) * abs((_714 * 2.0) + (-1.0))) + _745;
    float _757 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _761 = fract(abs(_757));
    float _770 = sin(cbMtdParam._m0[21u].z);
    float _771 = cos(cbMtdParam._m0[21u].z);
    float _772 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _773 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _803 = abs(cbMtdParam._m0[20u].w * (((_751 - (((_757 >= ((-0.0) - _757)) ? _761 : ((-0.0) - _761)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_773, (-0.0) - _770, _771 * _772) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_773, _771, _772 * _770) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _807 = (((_803 * cbMtdParam._m0[18u].y) - _751) * _803) + _751;
    float _3885 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _808 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    vec4 _820 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _835 = (cbMtdParam._m0[14u].x * _820.x) * cbMtdParam._m0[19u].x;
    float _836 = (cbMtdParam._m0[14u].y * _820.y) * cbMtdParam._m0[19u].x;
    float _837 = (cbMtdParam._m0[14u].z * _820.z) * cbMtdParam._m0[19u].x;
    float _847 = exp2(log2(_808) * cbMtdParam._m0[20u].x);
    float _860 = fma(_676, _225, fma(_670, _232, _669 * _218));
    float _863 = fma(_676, _226, fma(_670, _233, _669 * _219));
    float _866 = fma(_676, _227, fma(_670, _234, _669 * _220));
    float _870 = inversesqrt(dot(vec3(_860, _863, _866), vec3(_860, _863, _866)));
    float _871 = _870 * _860;
    float _872 = _870 * _863;
    float _873 = _870 * _866;
    float _3896 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _874 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3918 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3929 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _893 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _897 = inversesqrt(dot(vec3(_288, _289, _290), vec3(_288, _289, _290)));
    float _898 = _288 * _897;
    float _899 = _289 * _897;
    float _900 = _290 * _897;
    vec4 _905 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _907 = _905.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1062 = sqrt(((_288 * _288) + (_289 * _289)) + (_290 * _290));
        float _1068 = (cbMatDynParam._m0[5u].x * _1062) + cbMatDynParam._m0[5u].y;
        float _3940 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1073 = (cbMatDynParam._m0[5u].z * _1062) + cbMatDynParam._m0[5u].w;
        float _3951 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) - _1069)) + _1069) < ((_907 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _919 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _920 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _938 = fma(_873, cbSceneParam._m0[5u].z, fma(_872, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _871));
    float _941 = fma(_873, cbSceneParam._m0[6u].z, fma(_872, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _871));
    float _944 = fma(_873, cbSceneParam._m0[7u].z, fma(_872, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _871));
    uint _957 = uint(roundEven(NORMAL.w)) * 13u;
    uint _958 = _957 + 9u;
    uint _959 = _958 + uint(cbMatDynParam._m0[0u].w);
    float _965 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_959].x;
    float _966 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_959].y;
    float _967 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_959].z;
    float _3962 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    vec4 _979 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _919, cbSceneParam._m0[86u].y * _920));
    float _982 = _979.x * TEXCOORD_4;
    float _983 = dot(vec3(_871, _872, _873), vec3(_898, _899, _900));
    float _986 = _983 * 2.0;
    float _990 = (_986 * _871) - _898;
    float _991 = (_986 * _872) - _899;
    float _992 = (_986 * _873) - _900;
    float _996 = abs(dot(vec3(_898, _899, _900), vec3(_871, _872, _873)));
    float _3995 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _998 = sqrt(_874);
    float _1011 = exp2((_998 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_998 * 3.0));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1379;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1106 = fma(_1051, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043));
        float _1110 = fma(_1051, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043));
        float _1114 = fma(_1051, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043));
        float _1137 = _1043 + _871;
        float _1138 = _1047 + _872;
        float _1139 = _1051 + _873;
        float _1149 = fma(_1139, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137)) - _1106;
        float _1150 = fma(_1139, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137)) - _1110;
        float _1151 = fma(_1139, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137)) - _1114;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1106 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1110 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[34u].z) + ((((((_1114 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1207 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1173.x + (-0.5));
        float _1209 = _1207 * (_1173.y + (-0.5));
        float _1210 = _1207 * (_1173.z + (-0.5));
        float _1217 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1180.x + (-0.5));
        float _1219 = _1217 * (_1180.y + (-0.5));
        float _1220 = _1217 * (_1180.z + (-0.5));
        float _1227 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1187.x + (-0.5));
        float _1229 = _1227 * (_1187.y + (-0.5));
        float _1230 = _1227 * (_1187.z + (-0.5));
        float _1237 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1194.x + (-0.5));
        float _1239 = _1237 * (_1194.y + (-0.5));
        float _1240 = _1237 * (_1194.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1261 = (dot(vec3(_871, _872, _873), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1271 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4043 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1273 + 1.0))) + _1278) * _1241;
        float _1288 = _1209 * 0.5;
        float _1289 = _1219 * 0.5;
        float _1290 = _1229 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_871, _872, _873), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4076 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1315 + 1.0))) + _1320) * _1242;
        float _1330 = _1210 * 0.5;
        float _1331 = _1220 * 0.5;
        float _1332 = _1230 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_871, _872, _873), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4109 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1357 + 1.0))) + _1362) * _1243;
        _1379 = _1210;
        _1381 = _1209;
        _1382 = _1208;
        _1383 = _1220;
        _1384 = _1219;
        _1385 = _1218;
        _1386 = _1230;
        _1387 = _1229;
        _1388 = _1228;
        _1389 = _1243;
        _1390 = _1242;
        _1391 = _1241;
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1380;
        _1381 = _1380;
        _1382 = _1380;
        _1383 = _1380;
        _1384 = _1380;
        _1385 = _1380;
        _1386 = _1380;
        _1387 = _1380;
        _1388 = _1380;
        _1389 = _1380;
        _1390 = _1380;
        _1391 = _1380;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1422 = fma(_1051, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043));
        float _1426 = fma(_1051, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043));
        float _1430 = fma(_1051, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043));
        float _1453 = _1043 + _871;
        float _1454 = _1047 + _872;
        float _1455 = _1051 + _873;
        float _1465 = fma(_1455, cbModelParam._m0[30u].z, fma(_1454, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1453)) - _1422;
        float _1466 = fma(_1455, cbModelParam._m0[31u].z, fma(_1454, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1453)) - _1426;
        float _1467 = fma(_1455, cbModelParam._m0[32u].z, fma(_1454, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1453)) - _1430;
        float _1471 = inversesqrt(dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467)));
        float _1484 = ((_1471 * _1465) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1422 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1471 * _1466) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1426 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1471 * _1467) / cbModelParam._m0[35u].z) + ((((((_1430 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        float _1521 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1488.x + (-0.5));
        float _1523 = _1521 * (_1488.y + (-0.5));
        float _1524 = _1521 * (_1488.z + (-0.5));
        float _1531 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1495.x + (-0.5));
        float _1533 = _1531 * (_1495.y + (-0.5));
        float _1534 = _1531 * (_1495.z + (-0.5));
        float _1541 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1502.x + (-0.5));
        float _1543 = _1541 * (_1502.y + (-0.5));
        float _1544 = _1541 * (_1502.z + (-0.5));
        float _1551 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1509.x + (-0.5));
        float _1553 = _1551 * (_1509.y + (-0.5));
        float _1554 = _1551 * (_1509.z + (-0.5));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = _1522 * 0.5;
        float _1559 = _1532 * 0.5;
        float _1560 = _1542 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_871, _872, _873), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4172 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1585 + 1.0))) + _1590) * _1555;
        float _1600 = _1523 * 0.5;
        float _1601 = _1533 * 0.5;
        float _1602 = _1543 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_871, _872, _873), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4205 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1627 + 1.0))) + _1632) * _1556;
        float _1642 = _1524 * 0.5;
        float _1643 = _1534 * 0.5;
        float _1644 = _1544 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_871, _872, _873), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4238 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1669 + 1.0))) + _1674) * _1557;
        _1691 = _1524;
        _1692 = _1523;
        _1693 = _1522;
        _1694 = _1534;
        _1695 = _1533;
        _1696 = _1532;
        _1697 = _1544;
        _1698 = _1543;
        _1699 = _1542;
        _1700 = _1557;
        _1701 = _1556;
        _1702 = _1555;
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
    }
    else
    {
        _1691 = _1380;
        _1692 = _1380;
        _1693 = _1380;
        _1694 = _1380;
        _1695 = _1380;
        _1696 = _1380;
        _1697 = _1380;
        _1698 = _1380;
        _1699 = _1380;
        _1700 = _1380;
        _1701 = _1380;
        _1702 = _1380;
        _1703 = 0.0;
        _1704 = 0.0;
        _1705 = 0.0;
    }
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1392)) + _1392;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1393)) + _1393;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1394)) + _1394;
    float _1738 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1715));
    float _1759 = _990 * 0.5;
    float _1760 = _991 * 0.5;
    float _1761 = _992 * 0.5;
    float _1762 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1765 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1768 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1802;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1775 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1379, _1383, _1386, _1389));
        float _1779 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1783 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1790 = dot(vec4(cbModelParam._m0[39u]), vec4(_1759, _1760, _1761, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1813;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1804 = dot(vec4(cbModelParam._m0[40u]), vec4(_1759, _1760, _1761, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1817 = (_1813 * cbModelParam._m0[1u].x) + (_1802 * (1.0 - cbModelParam._m0[1u].x));
    float _1827 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _874);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1827 : min(cbModelParam._m0[25u].z, _1827));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1876 = fma(_1051, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043)) + cbModelParam._m0[13u].w;
        float _1880 = fma(_1051, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043)) + cbModelParam._m0[14u].w;
        float _1884 = fma(_1051, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043)) + cbModelParam._m0[15u].w;
        float _1887 = fma(_992, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990));
        float _1890 = fma(_992, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990));
        float _1893 = fma(_992, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990));
        float _1921;
        if (_1887 > 0.0)
        {
            _1921 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1921 = frontier_phi_41_39_ladder;
        }
        float _2089;
        if (_1890 > 0.0)
        {
            _2089 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2089 = frontier_phi_50_46_ladder;
        }
        float _2533;
        if (_1893 > 0.0)
        {
            _2533 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _2533 = frontier_phi_62_57_ladder;
        }
        float _2535 = isnan(_2089) ? _1921 : (isnan(_1921) ? _2089 : min(_1921, _2089));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _1887) + _1876;
        float _2541 = (_2536 * _1890) + _1880;
        float _2542 = (_2536 * _1893) + _1884;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2545 = (-1.0) - _2543;
        float _2547 = _2543 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_2542 > _2547) || ((_2542 < _2545) || ((_2541 > _2547) || ((_2541 < _2545) || ((_2540 < _2545) || (_2540 > _2547))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2802 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2542, cbModelParam._m0[9u].z, fma(_2541, cbModelParam._m0[9u].y, _2540 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2542, cbModelParam._m0[10u].z, fma(_2541, cbModelParam._m0[10u].y, _2540 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2542, cbModelParam._m0[11u].z, fma(_2541, cbModelParam._m0[11u].y, _2540 * cbModelParam._m0[11u].x))), _1828);
            frontier_phi_40_62_ladder = _2802.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _2802.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _2802.x * cbModelParam._m0[1u].y;
        }
        _1909 = frontier_phi_40_62_ladder_2;
        _1911 = frontier_phi_40_62_ladder_1;
        _1913 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_990, _991, _992), _1828);
        _1909 = _1897.x * cbModelParam._m0[1u].y;
        _1911 = _1897.y * cbModelParam._m0[1u].y;
        _1913 = _1897.z * cbModelParam._m0[1u].y;
    }
    float _1917 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _874);
    float _1918 = isnan(_1917) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1917 : min(cbModelParam._m0[25u].w, _1917));
    float _2006;
    float _2008;
    float _2010;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1970 = fma(_1051, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043)) + cbModelParam._m0[21u].w;
        float _1974 = fma(_1051, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043)) + cbModelParam._m0[22u].w;
        float _1978 = fma(_1051, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043)) + cbModelParam._m0[23u].w;
        float _1981 = fma(_992, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990));
        float _1984 = fma(_992, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990));
        float _1987 = fma(_992, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990));
        float _2094;
        if (_1981 > 0.0)
        {
            _2094 = abs((1.0 - _1970) / _1981);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1970 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2094 = frontier_phi_52_48_ladder;
        }
        float _2560;
        if (_1984 > 0.0)
        {
            _2560 = abs((1.0 - _1974) / _1984);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1974 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2560 = frontier_phi_64_59_ladder;
        }
        float _2939;
        if (_1987 > 0.0)
        {
            _2939 = abs((1.0 - _1978) / _1987);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_1978 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2939 = frontier_phi_76_71_ladder;
        }
        float _2941 = isnan(_2560) ? _2094 : (isnan(_2094) ? _2560 : min(_2094, _2560));
        float _2942 = isnan(_2939) ? _2941 : (isnan(_2941) ? _2939 : min(_2941, _2939));
        float _2946 = (_2942 * _1981) + _1970;
        float _2947 = (_2942 * _1984) + _1974;
        float _2948 = (_2942 * _1987) + _1978;
        float _2949 = _2942 * 9.9999997473787516355514526367188e-05;
        float _2950 = (-1.0) - _2949;
        float _2952 = _2949 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2948 > _2952) || ((_2948 < _2950) || ((_2947 > _2952) || ((_2947 < _2950) || ((_2946 < _2950) || (_2946 > _2952))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3085 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2948, cbModelParam._m0[17u].z, fma(_2947, cbModelParam._m0[17u].y, _2946 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2948, cbModelParam._m0[18u].z, fma(_2947, cbModelParam._m0[18u].y, _2946 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2948, cbModelParam._m0[19u].z, fma(_2947, cbModelParam._m0[19u].y, _2946 * cbModelParam._m0[19u].x))), _1918);
            frontier_phi_49_76_ladder = _3085.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _3085.x * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _3085.y * cbModelParam._m0[1u].z;
        }
        _2006 = frontier_phi_49_76_ladder_1;
        _2008 = frontier_phi_49_76_ladder_2;
        _2010 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _1990 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_990, _991, _992), _1918);
        _2006 = _1990.x * cbModelParam._m0[1u].z;
        _2008 = _1990.y * cbModelParam._m0[1u].z;
        _2010 = _1990.z * cbModelParam._m0[1u].z;
    }
    float _2022 = ((((1.0 - _1011) * ((_998 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1011 * _998)) * _982;
    float _2023 = _2022 * ((cbModelParam._m0[1u].w * (_2006 - _1909)) + _1909);
    float _2024 = _2022 * ((cbModelParam._m0[1u].w * (_2008 - _1911)) + _1911);
    float _2025 = _2022 * ((cbModelParam._m0[1u].w * (_2010 - _1913)) + _1913);
    float _2028 = fma(_2025, cbSceneParam._m0[89u].z, fma(_2024, cbSceneParam._m0[89u].y, _2023 * cbSceneParam._m0[89u].x));
    float _2031 = fma(_2025, cbSceneParam._m0[90u].z, fma(_2024, cbSceneParam._m0[90u].y, _2023 * cbSceneParam._m0[90u].x));
    float _2034 = fma(_2025, cbSceneParam._m0[91u].z, fma(_2024, cbSceneParam._m0[91u].y, _2023 * cbSceneParam._m0[91u].x));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2081 = _2068 / _2080;
    float _2082 = _2072 / _2080;
    float _2083 = _2076 / _2080;
    float _2230;
    float _2231;
    float _2232;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2110 = ((uint(_2083 > cbSceneParam._m0[59u].y) + uint(_2083 > cbSceneParam._m0[59u].x)) + uint(_2083 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2111 = _2110 + 43u;
        uint _2119 = _2110 + 44u;
        uint _2127 = _2110 + 45u;
        uint _2135 = _2110 + 46u;
        float _2146 = fma(_2080, cbSceneParam._m0[_2111].w, fma(_2076, cbSceneParam._m0[_2111].z, fma(_2072, cbSceneParam._m0[_2111].y, _2068 * cbSceneParam._m0[_2111].x)));
        float _2150 = fma(_2080, cbSceneParam._m0[_2119].w, fma(_2076, cbSceneParam._m0[_2119].z, fma(_2072, cbSceneParam._m0[_2119].y, _2068 * cbSceneParam._m0[_2119].x)));
        float _2158 = fma(_2080, cbSceneParam._m0[_2135].w, fma(_2076, cbSceneParam._m0[_2135].z, fma(_2072, cbSceneParam._m0[_2135].y, _2068 * cbSceneParam._m0[_2135].x)));
        float _2163 = cbSceneParam._m0[33u].z * _2158;
        float _2165 = cbSceneParam._m0[33u].w * _2158;
        float _2168 = fma(_2080, cbSceneParam._m0[_2127].w, fma(_2076, cbSceneParam._m0[_2127].z, fma(_2072, cbSceneParam._m0[_2127].y, _2068 * cbSceneParam._m0[_2127].x))) / _2158;
        float _2216 = (cbSceneParam._m0[33u].x - sqrt(((_2082 * _2082) + (_2081 * _2081)) + (_2083 * _2083))) * cbSceneParam._m0[33u].y;
        float _4364 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2223 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 + _2146) / _2158, (_2165 + _2150) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 + _2146) / _2158, (_2150 - _2163) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 - _2163) / _2158, (_2150 - _2165) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 - _2165) / _2158, (_2163 + _2150) / _2158), _2168), 0.0)).x), vec4(0.25)));
        _2230 = 1.0 - (_2223 * cbSceneParam._m0[34u].x);
        _2231 = 1.0 - (_2223 * cbSceneParam._m0[34u].y);
        _2232 = 1.0 - (_2223 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2230 = 1.0;
        _2231 = 1.0;
        _2232 = 1.0;
    }
    float _2296;
    float _2298;
    float _2300;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2284 = fma(_2080, cbSceneParam._m0[63u].w, fma(_2076, cbSceneParam._m0[63u].z, fma(_2072, cbSceneParam._m0[63u].y, _2068 * cbSceneParam._m0[63u].x)));
        float _2285 = fma(_2080, cbSceneParam._m0[60u].w, fma(_2076, cbSceneParam._m0[60u].z, fma(_2072, cbSceneParam._m0[60u].y, _2068 * cbSceneParam._m0[60u].x))) / _2284;
        float _2286 = fma(_2080, cbSceneParam._m0[61u].w, fma(_2076, cbSceneParam._m0[61u].z, fma(_2072, cbSceneParam._m0[61u].y, _2068 * cbSceneParam._m0[61u].x))) / _2284;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_2285 >= cbSceneParam._m0[64u].x) && (_2286 >= cbSceneParam._m0[64u].y)) && (_2285 <= cbSceneParam._m0[64u].z)) && (_2286 <= cbSceneParam._m0[64u].w))
        {
            float _2573 = fma(_2080, cbSceneParam._m0[62u].w, fma(_2076, cbSceneParam._m0[62u].z, fma(_2072, cbSceneParam._m0[62u].y, _2068 * cbSceneParam._m0[62u].x))) / _2284;
            float _2577 = isnan(cbSceneParam._m0[41u].w) ? _2573 : (isnan(_2573) ? cbSceneParam._m0[41u].w : max(_2573, cbSceneParam._m0[41u].w));
            float _2620 = (cbSceneParam._m0[33u].x - sqrt(((_2082 * _2082) + (_2081 * _2081)) + (_2083 * _2083))) * cbSceneParam._m0[33u].y;
            float _4380 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
            float _2627 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2285, cbSceneParam._m0[33u].w + _2286), _2577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2285, _2286 - cbSceneParam._m0[33u].z), _2577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2285 - cbSceneParam._m0[33u].z, _2286 - cbSceneParam._m0[33u].w), _2577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2285 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2286), _2577), 0.0)).x), vec4(0.25)));
            float _2631 = 1.0 - (_2627 * cbSceneParam._m0[34u].x);
            float _2632 = 1.0 - (_2627 * cbSceneParam._m0[34u].y);
            float _2633 = 1.0 - (_2627 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_2633) ? _2232 : (isnan(_2232) ? _2633 : min(_2232, _2633));
            frontier_phi_61_60_ladder_1 = isnan(_2632) ? _2231 : (isnan(_2231) ? _2632 : min(_2231, _2632));
            frontier_phi_61_60_ladder_2 = isnan(_2631) ? _2230 : (isnan(_2230) ? _2631 : min(_2230, _2631));
        }
        else
        {
            frontier_phi_61_60_ladder = _2232;
            frontier_phi_61_60_ladder_1 = _2231;
            frontier_phi_61_60_ladder_2 = _2230;
        }
        _2296 = frontier_phi_61_60_ladder_2;
        _2298 = frontier_phi_61_60_ladder_1;
        _2300 = frontier_phi_61_60_ladder;
    }
    else
    {
        _2296 = _2230;
        _2298 = _2231;
        _2300 = _2232;
    }
    uvec4 _2305 = floatBitsToUint(cbInstanceData._m0[_957 + 5u]);
    uint _2307 = _2305.x * 14u;
    uint _2308 = _2307 + 13u;
    float _2313 = _982 + (-1.0);
    float _2316 = (cbLight._m0[_2308].x * _2313) + 1.0;
    float _2317 = (cbLight._m0[_2308].y * _2313) + 1.0;
    uint _2318 = _2307 + 5u;
    float _2324 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
    uint _2328 = _2307 + 4u;
    float _2337 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
    uint _2341 = _2307 | 1u;
    float _2352 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_871, _872, _873));
    float _2355 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_871, _872, _873));
    float _4416 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _4427 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2360 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * 0.3183098733425140380859375;
    float _2362 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * 0.3183098733425140380859375;
    float _2369 = ((cbLight._m0[_2318].x * _2324) * _2362) + (((cbLight._m0[_2328].x * _2296) * _2337) * _2360);
    float _2370 = ((_2324 * cbLight._m0[_2318].y) * _2362) + (((cbLight._m0[_2328].y * _2298) * _2337) * _2360);
    float _2371 = ((_2324 * cbLight._m0[_2318].z) * _2362) + (((cbLight._m0[_2328].z * _2300) * _2337) * _2360);
    uint _2373 = _2307 + 8u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _874) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2307].x + _898;
    float _2389 = cbLight._m0[_2307].y + _899;
    float _2390 = cbLight._m0[_2307].z + _900;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2307].xyz));
    float _4438 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _4449 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _2402 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2403 = dot(vec3(_871, _872, _873), vec3(_2395, _2396, _2397));
    float _4460 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2407 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2395, _2396, _2397));
    float _4471 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = _2387 * _2387;
    float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
    float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2427 = 1.0 - _2387;
    float _2438 = (0.5 / (((_2402 * ((_2401 * _2427) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2427) + _2387) * _2401))) * _2401;
    float _4482 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
    uint _2454 = _2307 + 9u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2341].w)) * _874) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2341].x + _898;
    float _2468 = cbLight._m0[_2341].y + _899;
    float _2469 = cbLight._m0[_2341].z + _900;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2341].xyz));
    float _4493 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _2481 = dot(vec3(_871, _872, _873), vec3(_2474, _2475, _2476));
    float _4504 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_2474, _2475, _2476));
    float _4515 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2466 * _2466;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2502 = (exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2503 = 1.0 - _2466;
    float _2513 = (0.5 / (((_2402 * ((_2480 * _2503) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2503) + _2466) * _2480))) * _2480;
    float _4526 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2515 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    float _2525 = (((_2502 * cbLight._m0[_2454].x) * _2515) * _2324) + ((((cbLight._m0[_2373].x * _2296) * _2426) * _2440) * _2337);
    float _2526 = (((_2502 * cbLight._m0[_2454].y) * _2515) * _2324) + ((((cbLight._m0[_2373].y * _2298) * _2426) * _2440) * _2337);
    float _2527 = (((_2502 * cbLight._m0[_2454].z) * _2515) * _2324) + ((((cbLight._m0[_2373].z * _2300) * _2426) * _2440) * _2337);
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    if (_2305.y == 0u)
    {
        uvec4 _2645 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2646 = _2645.x;
        uint _2657 = uint((float(_2645.y) * floor(float(uint(cbSceneParam._m0[85u].y * _920) / _2646))) + floor(float(uint(cbSceneParam._m0[85u].x * _919) / _2646)));
        float _2667 = (log2(_2083 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2668 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        uint _2671 = uint(isnan(14.0) ? _2668 : (isnan(_2668) ? 14.0 : min(_2668, 14.0)));
        uvec4 _2676 = texelFetch(g_lightClusterGridBuffer, int(((_2671 << 2u) + (_2657 << 6u)) >> 2u));
        uint _2677 = _2676.x;
        uint _2678 = _2645.z;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        if (((((1u << ((_2678 >> 4u) & 15u)) + 4294967295u) & _2677) == 0u) || ((_2678 & 240u) == 0u))
        {
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
        }
        else
        {
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            uint _3003 = 0u;
            uint _3012;
            bool _3013;
            for (;;)
            {
                _3012 = texelFetch(g_lightClassification, int((((_2671 << 5u) + (_2657 << 9u)) + (_3003 << 2u)) >> 2u)).x;
                _3013 = _3012 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                float frontier_phi_87_pred_3;
                float frontier_phi_87_pred_4;
                float frontier_phi_87_pred_5;
                if (_3013)
                {
                    frontier_phi_87_pred = _2997;
                    frontier_phi_87_pred_1 = _3002;
                    frontier_phi_87_pred_2 = _3001;
                    frontier_phi_87_pred_3 = _3000;
                    frontier_phi_87_pred_4 = _2999;
                    frontier_phi_87_pred_5 = _2998;
                }
                else
                {
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    uint _3169;
                    _3163 = _2997;
                    _3164 = _2998;
                    _3165 = _2999;
                    _3166 = _3000;
                    _3167 = _3001;
                    _3168 = _3002;
                    _3169 = _3012;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    for (;;)
                    {
                        uint _3173 = uint(findLSB(_3169)) + (_3003 << 5u);
                        uint _3170 = (_3169 + 4294967295u) & _3169;
                        uint _3175 = _3173 * 48u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3195 = (_3173 * 48u) + 4u;
                        vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3214 = (_3173 * 48u) + 8u;
                        vec3 _3225 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x));
                        float _3229 = _3189.x - _2081;
                        float _3230 = _3189.y - _2082;
                        float _3231 = _3189.z - _2083;
                        float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                        float _3235 = inversesqrt(_3232);
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3239 = dot(vec3(_938, _941, _944), vec3(_3236, _3237, _3238));
                        float _3244 = 1.0 - (_3232 * _3189.w);
                        float _4547 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3246 = sqrt(_3232) * _3208.w;
                        float _3249 = 1.39999997615814208984375 / (_3246 + 1.39999997615814208984375);
                        float _3250 = _3249 * _3249;
                        float _3253 = ((1.0 - _3250) * _3239) + _3250;
                        float _3256 = _3246 * _3246;
                        float _3260 = ((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3245) / ((_3256 * 0.699999988079071044921875) + 1.0);
                        float _3264 = (-0.0) - _2081;
                        float _3265 = (-0.0) - _2082;
                        float _3266 = (-0.0) - _2083;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3271 = _3270 * _3264;
                        float _3272 = _3270 * _3265;
                        float _3273 = _3270 * _3266;
                        float _3280 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                        float _3281 = 1.0 - _998;
                        float _3288 = sqrt(1.0 - ((1.0 - (_3281 * _3281)) * (1.0 - (_3280 * _3280))));
                        float _3289 = _3288 * _3288;
                        float _3290 = _3289 * _3289;
                        float _3291 = _3271 + _3236;
                        float _3292 = _3272 + _3237;
                        float _3293 = _3273 + _3238;
                        float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                        float _3301 = dot(vec3(_938, _941, _944), vec3(_3271, _3272, _3273));
                        float _4563 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3304 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3305 = dot(vec3(_938, _941, _944), vec3(_3297 * _3291, _3297 * _3292, _3297 * _3293));
                        float _4574 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3312 = ((_3308 * _3308) * (_3290 + (-1.0))) + 1.0;
                        float _3313 = _3249 * _3289;
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3239) + _3314;
                        float _4585 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3318 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3319 = 1.0 - _3289;
                        float _3329 = (0.5 / (((_3318 * ((_3304 * _3319) + _3289)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3289) * _3304))) * _3318;
                        float _4596 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3340 = (((_3290 * 3.1415927410125732421875) * (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) / ((_3312 * _3312) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125))) * _3245;
                        _3093 = (_3260 * _3208.x) + _3166;
                        _3094 = (_3260 * _3208.y) + _3167;
                        _3095 = (_3260 * _3208.z) + _3168;
                        _3090 = (_3340 * _3225.x) + _3163;
                        _3091 = (_3340 * _3225.y) + _3164;
                        _3092 = (_3340 * _3225.z) + _3165;
                        if (_3170 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3170;
                        }
                    }
                    frontier_phi_87_pred = _3090;
                    frontier_phi_87_pred_1 = _3095;
                    frontier_phi_87_pred_2 = _3094;
                    frontier_phi_87_pred_3 = _3093;
                    frontier_phi_87_pred_4 = _3092;
                    frontier_phi_87_pred_5 = _3091;
                }
                _2812 = frontier_phi_87_pred;
                _2822 = frontier_phi_87_pred_1;
                _2820 = frontier_phi_87_pred_2;
                _2818 = frontier_phi_87_pred_3;
                _2816 = frontier_phi_87_pred_4;
                _2814 = frontier_phi_87_pred_5;
                uint _3004 = _3003 + 1u;
                if (_3004 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2997 = _2812;
                    _2998 = _2814;
                    _2999 = _2816;
                    _3000 = _2818;
                    _3001 = _2820;
                    _3002 = _2822;
                    _3003 = _3004;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
        }
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.z;
        uint _2828 = (_2826 >> 8u) & 15u;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        if (((4294967295u << _2828) & _2677) == 0u)
        {
            _2965 = _2811;
            _2967 = _2813;
            _2969 = _2815;
            _2971 = _2817;
            _2973 = _2819;
            _2975 = _2821;
        }
        else
        {
            float _2990 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
            float _2991 = _2990 * _2081;
            float _2992 = _2990 * _2082;
            float _2993 = _2990 * _2083;
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            float frontier_phi_78_79_ladder_3;
            float frontier_phi_78_79_ladder_4;
            float frontier_phi_78_79_ladder_5;
            if (_2828 < ((_2826 >> 12u) & 15u))
            {
                float _2966;
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _3146 = _2811;
                float _3147 = _2813;
                float _3148 = _2815;
                float _3149 = _2817;
                float _3150 = _2819;
                float _3151 = _2821;
                uint _3152 = _2828;
                uint _3161;
                bool _3162;
                for (;;)
                {
                    _3161 = texelFetch(g_lightClassification, int((((_2671 << 5u) + (_2657 << 9u)) + (_3152 << 2u)) >> 2u)).x;
                    _3162 = _3161 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    float frontier_phi_98_pred_3;
                    float frontier_phi_98_pred_4;
                    float frontier_phi_98_pred_5;
                    if (_3162)
                    {
                        frontier_phi_98_pred = _3151;
                        frontier_phi_98_pred_1 = _3150;
                        frontier_phi_98_pred_2 = _3149;
                        frontier_phi_98_pred_3 = _3148;
                        frontier_phi_98_pred_4 = _3147;
                        frontier_phi_98_pred_5 = _3146;
                    }
                    else
                    {
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3367 = _3146;
                        float _3368 = _3147;
                        float _3369 = _3148;
                        float _3370 = _3149;
                        float _3371 = _3150;
                        float _3372 = _3151;
                        uint _3373 = _3161;
                        uint _3374;
                        vec4 _3399;
                        float _3400;
                        vec4 _3415;
                        vec3 _3427;
                        vec4 _3443;
                        vec4 _3458;
                        float _3504;
                        bool _3505;
                        for (;;)
                        {
                            uint _3384 = ((_3152 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3373));
                            _3374 = (_3373 + 4294967295u) & _3373;
                            uint _3386 = _3384 * 40u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            _3400 = _3399.w;
                            uint _3402 = (_3384 * 40u) + 4u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3417 = (_3384 * 40u) + 8u;
                            _3427 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x));
                            uint _3430 = (_3384 * 40u) + 16u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3384 * 40u) + 20u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3384 * 40u) + 24u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3479 = (_3384 * 40u) + 28u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3504 = fma(_2083, _3492.z, fma(_2082, _3492.y, _3492.x * _2081)) + _3492.w;
                            _3505 = !((fma(_2083, _3473.z, fma(_2082, _3473.y, _3473.x * _2081)) + _3473.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            float frontier_phi_104_pred_3;
                            float frontier_phi_104_pred_4;
                            float frontier_phi_104_pred_5;
                            if (_3505)
                            {
                                float _3532 = _3399.x - _2081;
                                float _3533 = _3399.y - _2082;
                                float _3534 = _3399.z - _2083;
                                float _3535 = dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534));
                                float _3538 = inversesqrt(_3535);
                                float _3539 = _3538 * _3532;
                                float _3540 = _3538 * _3533;
                                float _3541 = _3538 * _3534;
                                float _3545 = 1.0 - (_3535 / (_3400 * _3400));
                                float _4607 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3550 = sqrt(_3535) * _3415.w;
                                float _3552 = 1.39999997615814208984375 / (_3550 + 1.39999997615814208984375);
                                float _3553 = _3552 * _3552;
                                float _3556 = ((1.0 - _3553) * dot(vec3(_3539, _3540, _3541), vec3(_938, _941, _944))) + _3553;
                                float _3559 = _3550 * _3550;
                                float _3563 = (fma(_2083, _3443.z, fma(_2082, _3443.y, _3443.x * _2081)) + _3443.w) / _3504;
                                float _3564 = (fma(_2083, _3458.z, fma(_2082, _3458.y, _3458.x * _2081)) + _3458.w) / _3504;
                                float _3568 = 1.0 - dot(vec2(_3563, _3564), vec2(_3563, _3564));
                                float _4623 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3570 = _3569 * (((isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0))) * _3546) / ((_3559 * 0.699999988079071044921875) + 1.0));
                                float _3582 = exp2(log2(1.0 / ((_3559 * 3.5) + 5.0)) * 0.25);
                                float _3583 = 1.0 - _998;
                                float _3590 = sqrt(1.0 - ((1.0 - (_3583 * _3583)) * (1.0 - (_3582 * _3582))));
                                float _3591 = _3590 * _3590;
                                float _3592 = _3591 * _3591;
                                float _3593 = _3539 - _2991;
                                float _3594 = _3540 - _2992;
                                float _3595 = _3541 - _2993;
                                float _3599 = inversesqrt(dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595)));
                                float _3603 = dot(vec3(_938, _941, _944), vec3((-0.0) - _2991, (-0.0) - _2992, (-0.0) - _2993));
                                float _4634 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3606 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3607 = dot(vec3(_938, _941, _944), vec3(_3599 * _3593, _3599 * _3594, _3599 * _3595));
                                float _4645 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3610 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3614 = ((_3610 * _3610) * (_3592 + (-1.0))) + 1.0;
                                float _3615 = _3552 * _3591;
                                float _3616 = _3615 * _3615;
                                float _3622 = ((1.0 - _3616) * dot(vec3(_938, _941, _944), vec3(_3539, _3540, _3541))) + _3616;
                                float _4656 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3624 = 1.0 - _3591;
                                float _3634 = (0.5 / (((_3623 * ((_3606 * _3624) + _3591)) + 9.9999999392252902907785028219223e-09) + (((_3623 * _3624) + _3591) * _3606))) * _3623;
                                float _4667 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3644 = (_3569 * _3546) * (((_3592 * 3.1415927410125732421875) * (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) / ((_3614 * _3614) * ((_3559 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_104_pred = _3570 * _3415.y;
                                frontier_phi_104_pred_1 = _3570 * _3415.x;
                                frontier_phi_104_pred_2 = _3644 * _3427.z;
                                frontier_phi_104_pred_3 = _3644 * _3427.y;
                                frontier_phi_104_pred_4 = _3644 * _3427.x;
                                frontier_phi_104_pred_5 = _3570 * _3415.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                                frontier_phi_104_pred_3 = 0.0;
                                frontier_phi_104_pred_4 = 0.0;
                                frontier_phi_104_pred_5 = 0.0;
                            }
                            _3652 = frontier_phi_104_pred;
                            _3651 = frontier_phi_104_pred_1;
                            _3650 = frontier_phi_104_pred_2;
                            _3649 = frontier_phi_104_pred_3;
                            _3648 = frontier_phi_104_pred_4;
                            _3653 = frontier_phi_104_pred_5;
                            _3357 = _3651 + _3370;
                            _3358 = _3652 + _3371;
                            _3359 = _3653 + _3372;
                            _3354 = _3648 + _3367;
                            _3355 = _3649 + _3368;
                            _3356 = _3650 + _3369;
                            if (_3374 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3374;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _3359;
                        frontier_phi_98_pred_1 = _3358;
                        frontier_phi_98_pred_2 = _3357;
                        frontier_phi_98_pred_3 = _3356;
                        frontier_phi_98_pred_4 = _3355;
                        frontier_phi_98_pred_5 = _3354;
                    }
                    _2976 = frontier_phi_98_pred;
                    _2974 = frontier_phi_98_pred_1;
                    _2972 = frontier_phi_98_pred_2;
                    _2970 = frontier_phi_98_pred_3;
                    _2968 = frontier_phi_98_pred_4;
                    _2966 = frontier_phi_98_pred_5;
                    uint _3153 = _3152 + 1u;
                    if (_3153 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3146 = _2966;
                        _3147 = _2968;
                        _3148 = _2970;
                        _3149 = _2972;
                        _3150 = _2974;
                        _3151 = _2976;
                        _3152 = _3153;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2970;
                frontier_phi_78_79_ladder_1 = _2976;
                frontier_phi_78_79_ladder_2 = _2974;
                frontier_phi_78_79_ladder_3 = _2972;
                frontier_phi_78_79_ladder_4 = _2968;
                frontier_phi_78_79_ladder_5 = _2966;
            }
            else
            {
                frontier_phi_78_79_ladder = _2815;
                frontier_phi_78_79_ladder_1 = _2821;
                frontier_phi_78_79_ladder_2 = _2819;
                frontier_phi_78_79_ladder_3 = _2817;
                frontier_phi_78_79_ladder_4 = _2813;
                frontier_phi_78_79_ladder_5 = _2811;
            }
            _2965 = frontier_phi_78_79_ladder_5;
            _2967 = frontier_phi_78_79_ladder_4;
            _2969 = frontier_phi_78_79_ladder;
            _2971 = frontier_phi_78_79_ladder_3;
            _2973 = frontier_phi_78_79_ladder_2;
            _2975 = frontier_phi_78_79_ladder_1;
        }
        float _2980 = isnan(1.0) ? _982 : (isnan(_982) ? 1.0 : min(_982, 1.0));
        _2690 = (_2980 * _2971) + _2369;
        _2692 = (_2980 * _2973) + _2370;
        _2694 = (_2980 * _2975) + _2371;
        _2696 = ((_2965 * 0.039999999105930328369140625) * _2980) + _2525;
        _2698 = ((_2967 * 0.039999999105930328369140625) * _2980) + _2526;
        _2700 = ((_2969 * 0.039999999105930328369140625) * _2980) + _2527;
    }
    else
    {
        _2690 = _2369;
        _2692 = _2370;
        _2694 = _2371;
        _2696 = _2525;
        _2698 = _2526;
        _2700 = _2527;
    }
    uint _2706 = _958 + uint(cbMatDynParam._m0[0u].w);
    float _2712 = ((_847 * (_835 - (_835 * _808))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2706].x;
    float _2713 = ((_847 * (_836 - (_836 * _808))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2706].y;
    float _2714 = ((_847 * (_837 - (_837 * _808))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2706].z;
    float _4683 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4694 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _4705 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _2731 = (((isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2690 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _982))) + ((_2696 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1817)) * cbPerFrame._m0[3u].x)) + _2712;
    float _2733 = (_2713 + ((_2698 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1817)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2692 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _982)));
    float _2735 = (_2714 + ((_2700 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1817)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2694 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _982)));
    float _2736 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2737 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2738 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2744 = cbMtdParam._m0[2u].x * _2712;
    float _2745 = cbMtdParam._m0[2u].y * _2713;
    float _2746 = cbMtdParam._m0[2u].z * _2714;
    float _4731 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2748 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    uint _2749 = _957 + 6u;
    float _2757 = _919 / cbSceneParam._m0[86u].x;
    float _2758 = _920 / cbSceneParam._m0[86u].y;
    vec4 _2772 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2757, _2758, (log2((isnan(cbSceneParam._m0[77u].w) ? _893 : (isnan(_893) ? cbSceneParam._m0[77u].w : min(_893, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2774 = _2772.x;
    float _2775 = _2772.y;
    float _2776 = _2772.z;
    float _2777 = _2772.w;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    if (_893 > cbSceneParam._m0[78u].w)
    {
        float _2836 = isnan(_893) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _893 : min(cbSceneParam._m0[80u].w, _893));
        float _2837 = _2836 / _893;
        float _2848 = _2837 * _288;
        float _2849 = _289 * _2837;
        float _2850 = (-0.0) - _2849;
        float _2851 = _2837 * _290;
        float _2853 = (cbSceneParam._m0[77u].w * _2850) / _2836;
        float _2854 = _2853 + cbSceneParam._m0[79u].w;
        float _2855 = cbSceneParam._m0[79u].w - _2849;
        float _2861 = sqrt(((_2848 * _2848) + (_2849 * _2849)) + (_2851 * _2851));
        float _2864 = (1.0 - (cbSceneParam._m0[77u].w / _2836)) * _2861;
        float _2869 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2871 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3103;
        if (abs((_2850 - _2853) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3103 = ((((_2854 > 0.0) ? exp2(_2869 * _2854) : (2.0 - exp2(_2871 * _2854))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2864;
        }
        else
        {
            float _3026 = 1.0 / cbSceneParam._m0[80u].x;
            float _3027 = isnan(_2855) ? _2854 : (isnan(_2854) ? _2855 : max(_2854, _2855));
            float _3028 = isnan(_2855) ? _2854 : (isnan(_2854) ? _2855 : min(_2854, _2855));
            float _3037 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : min(_3027, 0.0));
            float _3038 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : min(_3028, 0.0));
            _3103 = ((abs(_2861 / _2850) * cbSceneParam._m0[80u].y) * ((((_3037 - _3038) * 2.0) - ((exp2(_2869 * (isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0)))) - exp2(_2869 * (isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0))))) * _3026)) - ((exp2(_2871 * _3037) - exp2(_2871 * _3038)) * _3026))) + (_2864 * cbSceneParam._m0[80u].z);
        }
        vec4 _3105 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2757, _2758, 1.0), 0.0);
        float _3114 = exp2((_3103 * (-1.44269502162933349609375)) * (1.0 - _3105.w));
        float _3115 = log2(_3114);
        float _3131 = log2(_2777);
        _2873 = (exp2(_3131 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].x)) * _3105.x) / cbSceneParam._m0[78u].x)) + _2774;
        _2875 = (exp2(_3131 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].y)) * _3105.y) / cbSceneParam._m0[78u].y)) + _2775;
        _2877 = (exp2(_3131 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].z)) * _3105.z) / cbSceneParam._m0[78u].z)) + _2776;
        _2879 = _3114 * _2777;
    }
    else
    {
        _2873 = _2774;
        _2875 = _2775;
        _2877 = _2776;
        _2879 = _2777;
    }
    bool _3141;
    vec4 _2888;
    vec4 _2910;
    float _2912;
    float _2916;
    float _2917;
    float _2918;
    float _2921;
    float _2924;
    float _2927;
    float _2928;
    bool _2938;
    for (;;)
    {
        _2888 = cbMatDynParam._m0[0u];
        float _2890 = roundEven(_2888.y);
        bool _2891 = _2890 == 3.0;
        float _2892 = log2(_2879);
        float _2896 = exp2(_2892 * cbSceneParam._m0[78u].x);
        float _2897 = exp2(_2892 * cbSceneParam._m0[78u].y);
        float _2898 = exp2(_2892 * cbSceneParam._m0[78u].z);
        float _2899 = _2896 * _2736;
        float _2900 = _2897 * _2737;
        float _2901 = _2898 * _2738;
        float _2908 = _907 + (-0.5);
        _2910 = cbMtdParam._m0[1u];
        _2912 = _2910.y * _2908;
        float _2915 = (_2890 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2916 = _2915 * (_2891 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2873)));
        _2917 = _2915 * (_2891 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2875)));
        _2918 = _2915 * (_2891 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2877)));
        _2921 = ((_2744 * _2748) * _2896) * _2915;
        _2924 = ((_2745 * _2748) * _2897) * _2915;
        _2927 = ((_2746 * _2748) * _2898) * _2915;
        _2928 = _2908 * 0.999000012874603271484375;
        _2938 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2938)
        {
            if ((cbInstanceData._m0[_957 + 7u].x + _2928) < 0.5)
            {
                _3141 = true;
                break;
            }
        }
        uint _3061 = _958 + uint(_2888.w);
        if ((cbInstanceData._m0[_3061].w < 1.0) && ((cbInstanceData._m0[_3061].w + _2928) < 0.5))
        {
            _3141 = true;
            break;
        }
        if ((_2912 + 1.0) < _2910.x)
        {
            _3141 = true;
            break;
        }
        _3141 = false;
        break;
    }
    float _3345;
    if (_3141)
    {
        discard_state = true;
        _3345 = 0.0;
    }
    else
    {
        _3345 = cbInstanceData._m0[_2749].w;
    }
    SV_Target.x = _2916;
    SV_Target.y = _2917;
    SV_Target.z = _2918;
    SV_Target.w = _3345;
    SV_Target_1.x = _2921;
    SV_Target_1.y = _2924;
    SV_Target_1.z = _2927;
    SV_Target_1.w = cbInstanceData._m0[_2749].w;
    discard_exit();
}


