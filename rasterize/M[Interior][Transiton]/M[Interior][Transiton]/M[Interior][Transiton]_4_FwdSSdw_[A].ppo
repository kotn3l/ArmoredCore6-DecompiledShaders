#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1276;
float _3443;
float _3444;
float _3445;
float _3446;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _298 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _301 = _298.x;
    vec4 _319 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _336 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _301) + cbMtdParam._m0[12u].x) * _319.x;
    float _338 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _301) + cbMtdParam._m0[12u].y) * _319.y;
    float _340 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _301) + cbMtdParam._m0[12u].z) * _319.z;
    vec4 _358 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _397 = cbMtdParam._m0[27u].w + _282;
    float _398 = cbMtdParam._m0[28u].x + _283;
    float _399 = cbMtdParam._m0[28u].y + _284;
    float _413 = (-0.0) - dot(vec3(_397, _398, _399), vec3(_212, _213, _214));
    float _414 = (-0.0) - dot(vec3(_397, _398, _399), vec3(_226, _227, _228));
    float _415 = (-0.0) - dot(vec3(_397, _398, _399), vec3((-0.0) - _219, (-0.0) - _220, (-0.0) - _221));
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _422 = _419 * _415;
    float _425 = ((_419 * _413) + ((cbMtdParam._m0[25u].w * _301) * ((_358.x * 2.0) + (-1.0)))) * cbMtdParam._m0[24u].x;
    float _426 = ((_419 * _414) + ((cbMtdParam._m0[26u].x * _301) * ((_358.y * 2.0) + (-1.0)))) * cbMtdParam._m0[23u].w;
    float _427 = fract(TEXCOORD.x);
    float _428 = fract(TEXCOORD.y);
    float _434;
    if (_425 > 0.0)
    {
        _434 = (1.0 - _427) / _425;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_425 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _427) / _425;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _434 = frontier_phi_3_2_ladder;
    }
    float _442;
    if (_426 > 0.0)
    {
        _442 = (1.0 - _428) / _426;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_426 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _428) / _426;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _442 = frontier_phi_7_6_ladder;
    }
    float _446 = (_422 > 0.0) ? (cbMtdParam._m0[17u].x / _422) : 5000.0;
    float _447 = isnan(_442) ? _434 : (isnan(_434) ? _442 : min(_434, _442));
    float _448 = isnan(_446) ? _447 : (isnan(_447) ? _446 : min(_447, _446));
    float _452 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _459 = ((_448 * _422) + _452) / _452;
    vec4 _484 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_427 + (-0.5)) + (_448 * _425)) / _459) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_428 + (-0.5)) + (_448 * _426)) / _459) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _497 = (_484.x * _301) * cbMtdParam._m0[9u].x;
    float _498 = (_484.y * _301) * cbMtdParam._m0[9u].y;
    float _499 = (_484.z * _301) * cbMtdParam._m0[9u].z;
    vec4 _512 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _516 = _512.z;
    float _519 = (_512.x * 2.0) + (-1.0);
    float _520 = (_512.y * 2.0) + (-1.0);
    float _521 = dot(vec2(_519, _520), vec2(_519, _520));
    float _3465 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _526 = sqrt(1.0 - (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))));
    float _538 = (cbMtdParam._m0[19u].y * _497) * cbMtdParam._m0[16u].x;
    float _540 = (cbMtdParam._m0[19u].y * _498) * cbMtdParam._m0[16u].y;
    float _542 = (cbMtdParam._m0[19u].y * _499) * cbMtdParam._m0[16u].z;
    vec4 _566 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _571 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _577 = ((_566.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _579 = (-0.0) - (cbMtdParam._m0[21u].x * ((_566.x * 0.5) + (-0.25)));
    float _580 = fract(_571);
    float _582 = fract(_571 + 0.5);
    vec4 _609 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_580 * _579) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_577 * _580) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _611 = _609.x;
    float _617 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_582 * _579) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_577 * _582) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _611) * abs((_580 * 2.0) + (-1.0))) + _611;
    float _623 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _627 = fract(abs(_623));
    float _637 = sin(cbMtdParam._m0[21u].z);
    float _638 = cos(cbMtdParam._m0[21u].z);
    float _639 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _640 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _665 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_640, (-0.0) - _637, _638 * _639) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_640, _638, _639 * _637) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_623 >= ((-0.0) - _623)) ? _627 : ((-0.0) - _627)) * cbMtdParam._m0[18u].z) - _617)) + cbMtdParam._m0[18u].w;
    float _666 = ceil(_665);
    float _3476 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _687 = ((((cbMtdParam._m0[21u].w * _497) * cbMtdParam._m0[15u].x) - _538) * _667) + _538;
    float _688 = ((((cbMtdParam._m0[21u].w * _498) * cbMtdParam._m0[15u].y) - _540) * _667) + _540;
    float _689 = ((((cbMtdParam._m0[21u].w * _499) * cbMtdParam._m0[15u].z) - _542) * _667) + _542;
    float _693 = abs(cbMtdParam._m0[20u].w * _665);
    float _697 = (((_693 * cbMtdParam._m0[18u].y) - _617) * _693) + _617;
    float _3487 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _698 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    vec4 _710 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _725 = (cbMtdParam._m0[14u].x * _710.x) * cbMtdParam._m0[19u].x;
    float _726 = (cbMtdParam._m0[14u].y * _710.y) * cbMtdParam._m0[19u].x;
    float _727 = (cbMtdParam._m0[14u].z * _710.z) * cbMtdParam._m0[19u].x;
    float _734 = exp2(log2(_698) * cbMtdParam._m0[20u].x);
    float _756 = fma(_526, _219, fma(_520, _226, _519 * _212));
    float _759 = fma(_526, _220, fma(_520, _227, _519 * _213));
    float _762 = fma(_526, _221, fma(_520, _228, _519 * _214));
    float _766 = inversesqrt(dot(vec3(_756, _759, _762), vec3(_756, _759, _762)));
    float _767 = _766 * _756;
    float _768 = _766 * _759;
    float _769 = _766 * _762;
    float _3498 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _770 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3520 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3531 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _789 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _793 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _794 = _282 * _793;
    float _795 = _283 * _793;
    float _796 = _284 * _793;
    vec4 _801 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _803 = _801.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _958 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _964 = (cbMatDynParam._m0[5u].x * _958) + cbMatDynParam._m0[5u].y;
        float _3542 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _969 = (cbMatDynParam._m0[5u].z * _958) + cbMatDynParam._m0[5u].w;
        float _3553 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) - _965)) + _965) < ((_803 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _815 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _816 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _834 = fma(_769, cbSceneParam._m0[5u].z, fma(_768, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _767));
    float _837 = fma(_769, cbSceneParam._m0[6u].z, fma(_768, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _767));
    float _840 = fma(_769, cbSceneParam._m0[7u].z, fma(_768, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _767));
    uint _853 = uint(roundEven(NORMAL.w)) * 13u;
    uint _854 = _853 + 9u;
    uint _855 = _854 + uint(cbMatDynParam._m0[0u].w);
    float _861 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * cbInstanceData._m0[_855].x;
    float _862 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) * cbInstanceData._m0[_855].y;
    float _863 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) * cbInstanceData._m0[_855].z;
    float _3564 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    vec4 _875 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _815, cbSceneParam._m0[86u].y * _816));
    float _878 = _875.x * TEXCOORD_4;
    float _879 = dot(vec3(_767, _768, _769), vec3(_794, _795, _796));
    float _882 = _879 * 2.0;
    float _886 = (_882 * _767) - _794;
    float _887 = (_882 * _768) - _795;
    float _888 = (_882 * _769) - _796;
    float _892 = abs(dot(vec3(_794, _795, _796), vec3(_767, _768, _769)));
    float _3597 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _894 = sqrt(_770);
    float _907 = exp2((_894 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_894 * 3.0));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1275;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1002 = fma(_947, cbModelParam._m0[26u].z, fma(_943, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939));
        float _1006 = fma(_947, cbModelParam._m0[27u].z, fma(_943, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939));
        float _1010 = fma(_947, cbModelParam._m0[28u].z, fma(_943, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939));
        float _1033 = _939 + _767;
        float _1034 = _943 + _768;
        float _1035 = _947 + _769;
        float _1045 = fma(_1035, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033)) - _1002;
        float _1046 = fma(_1035, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033)) - _1006;
        float _1047 = fma(_1035, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033)) - _1010;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1002 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1006 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[34u].z) + ((((((_1010 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1103 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1069.x + (-0.5));
        float _1105 = _1103 * (_1069.y + (-0.5));
        float _1106 = _1103 * (_1069.z + (-0.5));
        float _1113 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1076.x + (-0.5));
        float _1115 = _1113 * (_1076.y + (-0.5));
        float _1116 = _1113 * (_1076.z + (-0.5));
        float _1123 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1083.x + (-0.5));
        float _1125 = _1123 * (_1083.y + (-0.5));
        float _1126 = _1123 * (_1083.z + (-0.5));
        float _1133 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1090.x + (-0.5));
        float _1135 = _1133 * (_1090.y + (-0.5));
        float _1136 = _1133 * (_1090.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1157 = (dot(vec3(_767, _768, _769), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1167 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3645 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1169 + 1.0))) + _1174) * _1137;
        float _1184 = _1105 * 0.5;
        float _1185 = _1115 * 0.5;
        float _1186 = _1125 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_767, _768, _769), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3678 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1211 + 1.0))) + _1216) * _1138;
        float _1226 = _1106 * 0.5;
        float _1227 = _1116 * 0.5;
        float _1228 = _1126 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_767, _768, _769), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3711 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1253 + 1.0))) + _1258) * _1139;
        _1275 = _1106;
        _1277 = _1105;
        _1278 = _1104;
        _1279 = _1116;
        _1280 = _1115;
        _1281 = _1114;
        _1282 = _1126;
        _1283 = _1125;
        _1284 = _1124;
        _1285 = _1139;
        _1286 = _1138;
        _1287 = _1137;
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _1276;
        _1277 = _1276;
        _1278 = _1276;
        _1279 = _1276;
        _1280 = _1276;
        _1281 = _1276;
        _1282 = _1276;
        _1283 = _1276;
        _1284 = _1276;
        _1285 = _1276;
        _1286 = _1276;
        _1287 = _1276;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1318 = fma(_947, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _939));
        float _1322 = fma(_947, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _939));
        float _1326 = fma(_947, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _939));
        float _1349 = _939 + _767;
        float _1350 = _943 + _768;
        float _1351 = _947 + _769;
        float _1361 = fma(_1351, cbModelParam._m0[30u].z, fma(_1350, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1349)) - _1318;
        float _1362 = fma(_1351, cbModelParam._m0[31u].z, fma(_1350, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1349)) - _1322;
        float _1363 = fma(_1351, cbModelParam._m0[32u].z, fma(_1350, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1349)) - _1326;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1318 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1322 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[35u].z) + ((((((_1326 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1417 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1384.x + (-0.5));
        float _1419 = _1417 * (_1384.y + (-0.5));
        float _1420 = _1417 * (_1384.z + (-0.5));
        float _1427 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1391.x + (-0.5));
        float _1429 = _1427 * (_1391.y + (-0.5));
        float _1430 = _1427 * (_1391.z + (-0.5));
        float _1437 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1398.x + (-0.5));
        float _1439 = _1437 * (_1398.y + (-0.5));
        float _1440 = _1437 * (_1398.z + (-0.5));
        float _1447 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1405.x + (-0.5));
        float _1449 = _1447 * (_1405.y + (-0.5));
        float _1450 = _1447 * (_1405.z + (-0.5));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = _1418 * 0.5;
        float _1455 = _1428 * 0.5;
        float _1456 = _1438 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_767, _768, _769), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _3774 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1481 + 1.0))) + _1486) * _1451;
        float _1496 = _1419 * 0.5;
        float _1497 = _1429 * 0.5;
        float _1498 = _1439 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_767, _768, _769), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _3807 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1523 + 1.0))) + _1528) * _1452;
        float _1538 = _1420 * 0.5;
        float _1539 = _1430 * 0.5;
        float _1540 = _1440 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_767, _768, _769), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _3840 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1565 + 1.0))) + _1570) * _1453;
        _1587 = _1420;
        _1588 = _1419;
        _1589 = _1418;
        _1590 = _1430;
        _1591 = _1429;
        _1592 = _1428;
        _1593 = _1440;
        _1594 = _1439;
        _1595 = _1438;
        _1596 = _1453;
        _1597 = _1452;
        _1598 = _1451;
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
    }
    else
    {
        _1587 = _1276;
        _1588 = _1276;
        _1589 = _1276;
        _1590 = _1276;
        _1591 = _1276;
        _1592 = _1276;
        _1593 = _1276;
        _1594 = _1276;
        _1595 = _1276;
        _1596 = _1276;
        _1597 = _1276;
        _1598 = _1276;
        _1599 = 0.0;
        _1600 = 0.0;
        _1601 = 0.0;
    }
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1288)) + _1288;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1289)) + _1289;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1290)) + _1290;
    float _1634 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1611));
    float _1655 = _886 * 0.5;
    float _1656 = _887 * 0.5;
    float _1657 = _888 * 0.5;
    float _1658 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1661 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1664 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1698;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1671 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1275, _1279, _1282, _1285));
        float _1675 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1679 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1686 = dot(vec4(cbModelParam._m0[39u]), vec4(_1655, _1656, _1657, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1709;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1700 = dot(vec4(cbModelParam._m0[40u]), vec4(_1655, _1656, _1657, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1713 = (_1709 * cbModelParam._m0[1u].x) + (_1698 * (1.0 - cbModelParam._m0[1u].x));
    float _1723 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _770);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1723 : min(cbModelParam._m0[25u].z, _1723));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1771 = fma(_947, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939)) + cbModelParam._m0[13u].w;
        float _1775 = fma(_947, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939)) + cbModelParam._m0[14u].w;
        float _1779 = fma(_947, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939)) + cbModelParam._m0[15u].w;
        float _1782 = fma(_888, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _886));
        float _1785 = fma(_888, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _886));
        float _1788 = fma(_888, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _886));
        float _1816;
        if (_1782 > 0.0)
        {
            _1816 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1816 = frontier_phi_25_23_ladder;
        }
        float _2185;
        if (_1785 > 0.0)
        {
            _2185 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2185 = frontier_phi_34_30_ladder;
        }
        float _2527;
        if (_1788 > 0.0)
        {
            _2527 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2527 = frontier_phi_48_41_ladder;
        }
        float _2529 = isnan(_2185) ? _1816 : (isnan(_1816) ? _2185 : min(_1816, _2185));
        float _2530 = isnan(_2527) ? _2529 : (isnan(_2529) ? _2527 : min(_2529, _2527));
        float _2534 = (_2530 * _1782) + _1771;
        float _2535 = (_2530 * _1785) + _1775;
        float _2536 = (_2530 * _1788) + _1779;
        float _2537 = _2530 * 9.9999997473787516355514526367188e-05;
        float _2538 = (-1.0) - _2537;
        float _2540 = _2537 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2536 > _2540) || ((_2536 < _2538) || ((_2535 > _2540) || ((_2535 < _2538) || ((_2534 < _2538) || (_2534 > _2540))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2536, cbModelParam._m0[9u].z, fma(_2535, cbModelParam._m0[9u].y, _2534 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2536, cbModelParam._m0[10u].z, fma(_2535, cbModelParam._m0[10u].y, _2534 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2536, cbModelParam._m0[11u].z, fma(_2535, cbModelParam._m0[11u].y, _2534 * cbModelParam._m0[11u].x))), _1724);
            frontier_phi_24_48_ladder = _2678.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2678.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2678.x * cbModelParam._m0[1u].y;
        }
        _1804 = frontier_phi_24_48_ladder_2;
        _1806 = frontier_phi_24_48_ladder_1;
        _1808 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_886, _887, _888), _1724);
        _1804 = _1792.x * cbModelParam._m0[1u].y;
        _1806 = _1792.y * cbModelParam._m0[1u].y;
        _1808 = _1792.z * cbModelParam._m0[1u].y;
    }
    float _1812 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _770);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1812 : min(cbModelParam._m0[25u].w, _1812));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1865 = fma(_947, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939)) + cbModelParam._m0[21u].w;
        float _1869 = fma(_947, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939)) + cbModelParam._m0[22u].w;
        float _1873 = fma(_947, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939)) + cbModelParam._m0[23u].w;
        float _1876 = fma(_888, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _886));
        float _1879 = fma(_888, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _886));
        float _1882 = fma(_888, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _886));
        float _2190;
        if (_1876 > 0.0)
        {
            _2190 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2190 = frontier_phi_36_32_ladder;
        }
        float _2553;
        if (_1879 > 0.0)
        {
            _2553 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2553 = frontier_phi_50_43_ladder;
        }
        float _2743;
        if (_1882 > 0.0)
        {
            _2743 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2743 = frontier_phi_68_61_ladder;
        }
        float _2745 = isnan(_2553) ? _2190 : (isnan(_2190) ? _2553 : min(_2190, _2553));
        float _2746 = isnan(_2743) ? _2745 : (isnan(_2745) ? _2743 : min(_2745, _2743));
        float _2750 = (_2746 * _1876) + _1865;
        float _2751 = (_2746 * _1879) + _1869;
        float _2752 = (_2746 * _1882) + _1873;
        float _2753 = _2746 * 9.9999997473787516355514526367188e-05;
        float _2754 = (-1.0) - _2753;
        float _2756 = _2753 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2752 > _2756) || ((_2752 < _2754) || ((_2751 > _2756) || ((_2751 < _2754) || ((_2750 < _2754) || (_2750 > _2756))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2752, cbModelParam._m0[17u].z, fma(_2751, cbModelParam._m0[17u].y, _2750 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2752, cbModelParam._m0[18u].z, fma(_2751, cbModelParam._m0[18u].y, _2750 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2752, cbModelParam._m0[19u].z, fma(_2751, cbModelParam._m0[19u].y, _2750 * cbModelParam._m0[19u].x))), _1813);
            frontier_phi_33_68_ladder = _2994.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2994.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2994.x * cbModelParam._m0[1u].z;
        }
        _1901 = frontier_phi_33_68_ladder_2;
        _1903 = frontier_phi_33_68_ladder;
        _1905 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_886, _887, _888), _1813);
        _1901 = _1885.x * cbModelParam._m0[1u].z;
        _1903 = _1885.y * cbModelParam._m0[1u].z;
        _1905 = _1885.z * cbModelParam._m0[1u].z;
    }
    float _1917 = ((((1.0 - _907) * ((_894 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_907 * _894)) * _878;
    float _1918 = _1917 * ((cbModelParam._m0[1u].w * (_1901 - _1804)) + _1804);
    float _1919 = _1917 * ((cbModelParam._m0[1u].w * (_1903 - _1806)) + _1806);
    float _1920 = _1917 * ((cbModelParam._m0[1u].w * (_1905 - _1808)) + _1808);
    float _1923 = fma(_1920, cbSceneParam._m0[89u].z, fma(_1919, cbSceneParam._m0[89u].y, _1918 * cbSceneParam._m0[89u].x));
    float _1926 = fma(_1920, cbSceneParam._m0[90u].z, fma(_1919, cbSceneParam._m0[90u].y, _1918 * cbSceneParam._m0[90u].x));
    float _1929 = fma(_1920, cbSceneParam._m0[91u].z, fma(_1919, cbSceneParam._m0[91u].y, _1918 * cbSceneParam._m0[91u].x));
    vec4 _1937 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_815, _816));
    float _1939 = _1937.w;
    float _1951 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1939);
    float _1952 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1939);
    float _1953 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1939);
    uvec4 _1957 = floatBitsToUint(cbInstanceData._m0[_853 + 5u]);
    uint _1959 = _1957.x * 14u;
    uint _1960 = _1959 + 13u;
    float _1965 = _878 + (-1.0);
    float _1968 = (cbLight._m0[_1960].x * _1965) + 1.0;
    float _1969 = (cbLight._m0[_1960].y * _1965) + 1.0;
    uint _1970 = _1959 + 5u;
    float _1976 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1980 = _1959 + 4u;
    float _1989 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1993 = _1959 | 1u;
    float _2004 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_767, _768, _769));
    float _2007 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_767, _768, _769));
    float _3976 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _3987 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2012 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * 0.3183098733425140380859375;
    float _2014 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.3183098733425140380859375;
    float _2021 = ((cbLight._m0[_1970].x * _1976) * _2014) + (((cbLight._m0[_1980].x * _1951) * _1989) * _2012);
    float _2022 = ((_1976 * cbLight._m0[_1970].y) * _2014) + (((cbLight._m0[_1980].y * _1952) * _1989) * _2012);
    float _2023 = ((_1976 * cbLight._m0[_1970].z) * _2014) + (((cbLight._m0[_1980].z * _1953) * _1989) * _2012);
    uint _2025 = _1959 + 8u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1959].w)) * _770) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1959].x + _794;
    float _2041 = cbLight._m0[_1959].y + _795;
    float _2042 = cbLight._m0[_1959].z + _796;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_1959].xyz));
    float _3998 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _2054 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _2055 = dot(vec3(_767, _768, _769), vec3(_2047, _2048, _2049));
    float _4020 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_2047, _2048, _2049));
    float _4031 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2039 * _2039;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2078 = (exp2(log2(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2079 = 1.0 - _2039;
    float _2090 = (0.5 / (((_2054 * ((_2053 * _2079) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2079) + _2039) * _2053))) * _2053;
    float _4042 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    uint _2106 = _1959 + 9u;
    float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _770) * 0.949999988079071044921875);
    float _2118 = _2117 * _2117;
    float _2119 = cbLight._m0[_1993].x + _794;
    float _2120 = cbLight._m0[_1993].y + _795;
    float _2121 = cbLight._m0[_1993].z + _796;
    float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
    float _2126 = _2125 * _2119;
    float _2127 = _2125 * _2120;
    float _2128 = _2125 * _2121;
    float _2129 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_1993].xyz));
    float _4053 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _2133 = dot(vec3(_767, _768, _769), vec3(_2126, _2127, _2128));
    float _4064 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _2137 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2126, _2127, _2128));
    float _4075 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2141 = _2118 * _2118;
    float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
    float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2155 = 1.0 - _2118;
    float _2165 = (0.5 / (((_2054 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2155) + _2118) * _2132))) * _2132;
    float _4086 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
    float _2177 = (((_2154 * cbLight._m0[_2106].x) * _2167) * _1976) + ((((cbLight._m0[_2025].x * _1951) * _2078) * _2092) * _1989);
    float _2178 = (((_2154 * cbLight._m0[_2106].y) * _2167) * _1976) + ((((cbLight._m0[_2025].y * _1952) * _2078) * _2092) * _1989);
    float _2179 = (((_2154 * cbLight._m0[_2106].z) * _2167) * _1976) + ((((cbLight._m0[_2025].z * _1953) * _2078) * _2092) * _1989);
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    if (_1957.y == 0u)
    {
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2234;
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2234;
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2234;
        uvec4 _2249 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2250 = _2249.x;
        uint _2261 = uint((float(_2249.y) * floor(float(uint(cbSceneParam._m0[85u].y * _816) / _2250))) + floor(float(uint(cbSceneParam._m0[85u].x * _815) / _2250)));
        float _2271 = (log2(_2237 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2272 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        uint _2275 = uint(isnan(14.0) ? _2272 : (isnan(_2272) ? 14.0 : min(_2272, 14.0)));
        uvec4 _2280 = texelFetch(g_lightClusterGridBuffer, int(((_2275 << 2u) + (_2261 << 6u)) >> 2u));
        uint _2281 = _2280.x;
        uint _2282 = _2249.z;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        if (((((1u << ((_2282 >> 4u) & 15u)) + 4294967295u) & _2281) == 0u) || ((_2282 & 240u) == 0u))
        {
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
        }
        else
        {
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2409;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            uint _2596 = 0u;
            uint _2605;
            bool _2606;
            for (;;)
            {
                _2605 = texelFetch(g_lightClassification, int((((_2275 << 5u) + (_2261 << 9u)) + (_2596 << 2u)) >> 2u)).x;
                _2606 = _2605 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2606)
                {
                    frontier_phi_63_pred = _2592;
                    frontier_phi_63_pred_1 = _2595;
                    frontier_phi_63_pred_2 = _2594;
                    frontier_phi_63_pred_3 = _2593;
                    frontier_phi_63_pred_4 = _2591;
                    frontier_phi_63_pred_5 = _2590;
                }
                else
                {
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    uint _2792;
                    _2786 = _2590;
                    _2787 = _2591;
                    _2788 = _2592;
                    _2789 = _2593;
                    _2790 = _2594;
                    _2791 = _2595;
                    _2792 = _2605;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    for (;;)
                    {
                        uint _2796 = uint(findLSB(_2792)) + (_2596 << 5u);
                        uint _2793 = (_2792 + 4294967295u) & _2792;
                        uint _2798 = _2796 * 48u;
                        vec4 _2812 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2798)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 3u)).x));
                        uint _2818 = (_2796 * 48u) + 4u;
                        vec4 _2831 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2818)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 3u)).x));
                        uint _2837 = (_2796 * 48u) + 8u;
                        vec3 _2848 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 2u)).x));
                        float _2852 = _2812.x - _2235;
                        float _2853 = _2812.y - _2236;
                        float _2854 = _2812.z - _2237;
                        float _2855 = dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854));
                        float _2858 = inversesqrt(_2855);
                        float _2859 = _2858 * _2852;
                        float _2860 = _2858 * _2853;
                        float _2861 = _2858 * _2854;
                        float _2862 = dot(vec3(_834, _837, _840), vec3(_2859, _2860, _2861));
                        float _2867 = 1.0 - (_2855 * _2812.w);
                        float _4107 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2868 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2869 = sqrt(_2855) * _2831.w;
                        float _2872 = 1.39999997615814208984375 / (_2869 + 1.39999997615814208984375);
                        float _2873 = _2872 * _2872;
                        float _2876 = ((1.0 - _2873) * _2862) + _2873;
                        float _2879 = _2869 * _2869;
                        float _2883 = ((isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0))) * _2868) / ((_2879 * 0.699999988079071044921875) + 1.0);
                        float _2887 = (-0.0) - _2235;
                        float _2888 = (-0.0) - _2236;
                        float _2889 = (-0.0) - _2237;
                        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
                        float _2894 = _2893 * _2887;
                        float _2895 = _2893 * _2888;
                        float _2896 = _2893 * _2889;
                        float _2904 = exp2(log2(1.0 / ((_2879 * 3.5) + 5.0)) * 0.25);
                        float _2905 = 1.0 - _894;
                        float _2912 = sqrt(1.0 - ((1.0 - (_2905 * _2905)) * (1.0 - (_2904 * _2904))));
                        float _2913 = _2912 * _2912;
                        float _2914 = _2913 * _2913;
                        float _2915 = _2894 + _2859;
                        float _2916 = _2895 + _2860;
                        float _2917 = _2896 + _2861;
                        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
                        float _2925 = dot(vec3(_834, _837, _840), vec3(_2894, _2895, _2896));
                        float _4123 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2928 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2929 = dot(vec3(_834, _837, _840), vec3(_2921 * _2915, _2921 * _2916, _2921 * _2917));
                        float _4134 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2932 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2936 = ((_2932 * _2932) * (_2914 + (-1.0))) + 1.0;
                        float _2937 = _2872 * _2913;
                        float _2938 = _2937 * _2937;
                        float _2941 = ((1.0 - _2938) * _2862) + _2938;
                        float _4145 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2942 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _2943 = 1.0 - _2913;
                        float _2953 = (0.5 / (((_2942 * ((_2928 * _2943) + _2913)) + 9.9999999392252902907785028219223e-09) + (((_2942 * _2943) + _2913) * _2928))) * _2942;
                        float _4156 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2964 = (((_2914 * 3.1415927410125732421875) * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) / ((_2936 * _2936) * ((_2879 * 2.1991131305694580078125) + 3.141590118408203125))) * _2868;
                        _2690 = (_2883 * _2831.x) + _2789;
                        _2691 = (_2883 * _2831.y) + _2790;
                        _2692 = (_2883 * _2831.z) + _2791;
                        _2687 = (_2964 * _2848.x) + _2786;
                        _2688 = (_2964 * _2848.y) + _2787;
                        _2689 = (_2964 * _2848.z) + _2788;
                        if (_2793 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2786 = _2687;
                            _2787 = _2688;
                            _2788 = _2689;
                            _2789 = _2690;
                            _2790 = _2691;
                            _2791 = _2692;
                            _2792 = _2793;
                        }
                    }
                    frontier_phi_63_pred = _2689;
                    frontier_phi_63_pred_1 = _2692;
                    frontier_phi_63_pred_2 = _2691;
                    frontier_phi_63_pred_3 = _2690;
                    frontier_phi_63_pred_4 = _2688;
                    frontier_phi_63_pred_5 = _2687;
                }
                _2403 = frontier_phi_63_pred;
                _2409 = frontier_phi_63_pred_1;
                _2407 = frontier_phi_63_pred_2;
                _2405 = frontier_phi_63_pred_3;
                _2401 = frontier_phi_63_pred_4;
                _2399 = frontier_phi_63_pred_5;
                uint _2597 = _2596 + 1u;
                if (_2597 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2590 = _2399;
                    _2591 = _2401;
                    _2592 = _2403;
                    _2593 = _2405;
                    _2594 = _2407;
                    _2595 = _2409;
                    _2596 = _2597;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
        }
        uvec4 _2412 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2413 = _2412.z;
        uint _2415 = (_2413 >> 8u) & 15u;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        if (((4294967295u << _2415) & _2281) == 0u)
        {
            _2558 = _2398;
            _2560 = _2400;
            _2562 = _2402;
            _2564 = _2404;
            _2566 = _2406;
            _2568 = _2408;
        }
        else
        {
            float _2583 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
            float _2584 = _2583 * _2235;
            float _2585 = _2583 * _2236;
            float _2586 = _2583 * _2237;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2415 < ((_2413 >> 12u) & 15u))
            {
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2769 = _2398;
                float _2770 = _2400;
                float _2771 = _2402;
                float _2772 = _2404;
                float _2773 = _2406;
                float _2774 = _2408;
                uint _2775 = _2415;
                uint _2784;
                bool _2785;
                for (;;)
                {
                    _2784 = texelFetch(g_lightClassification, int((((_2275 << 5u) + (_2261 << 9u)) + (_2775 << 2u)) >> 2u)).x;
                    _2785 = _2784 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2785)
                    {
                        frontier_phi_77_pred = _2774;
                        frontier_phi_77_pred_1 = _2773;
                        frontier_phi_77_pred_2 = _2772;
                        frontier_phi_77_pred_3 = _2771;
                        frontier_phi_77_pred_4 = _2770;
                        frontier_phi_77_pred_5 = _2769;
                    }
                    else
                    {
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3012 = _2769;
                        float _3013 = _2770;
                        float _3014 = _2771;
                        float _3015 = _2772;
                        float _3016 = _2773;
                        float _3017 = _2774;
                        uint _3018 = _2784;
                        uint _3019;
                        vec4 _3044;
                        float _3045;
                        vec4 _3060;
                        vec3 _3072;
                        vec4 _3087;
                        vec4 _3102;
                        float _3148;
                        bool _3149;
                        for (;;)
                        {
                            uint _3029 = ((_2775 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3018));
                            _3019 = (_3018 + 4294967295u) & _3018;
                            uint _3031 = _3029 * 40u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            _3045 = _3044.w;
                            uint _3047 = (_3029 * 40u) + 4u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3062 = (_3029 * 40u) + 8u;
                            _3072 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x));
                            uint _3074 = (_3029 * 40u) + 16u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3089 = (_3029 * 40u) + 20u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3104 = (_3029 * 40u) + 24u;
                            vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3123 = (_3029 * 40u) + 28u;
                            vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            _3148 = fma(_2237, _3136.z, fma(_2236, _3136.y, _3136.x * _2235)) + _3136.w;
                            _3149 = !((fma(_2237, _3117.z, fma(_2236, _3117.y, _3117.x * _2235)) + _3117.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3149)
                            {
                                float _3176 = _3044.x - _2235;
                                float _3177 = _3044.y - _2236;
                                float _3178 = _3044.z - _2237;
                                float _3179 = dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178));
                                float _3182 = inversesqrt(_3179);
                                float _3183 = _3182 * _3176;
                                float _3184 = _3182 * _3177;
                                float _3185 = _3182 * _3178;
                                float _3189 = 1.0 - (_3179 / (_3045 * _3045));
                                float _4167 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3190 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3194 = sqrt(_3179) * _3060.w;
                                float _3196 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                                float _3197 = _3196 * _3196;
                                float _3200 = ((1.0 - _3197) * dot(vec3(_3183, _3184, _3185), vec3(_834, _837, _840))) + _3197;
                                float _3203 = _3194 * _3194;
                                float _3207 = (fma(_2237, _3087.z, fma(_2236, _3087.y, _3087.x * _2235)) + _3087.w) / _3148;
                                float _3208 = (fma(_2237, _3102.z, fma(_2236, _3102.y, _3102.x * _2235)) + _3102.w) / _3148;
                                float _3212 = 1.0 - dot(vec2(_3207, _3208), vec2(_3207, _3208));
                                float _4183 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3214 = _3213 * (((isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0))) * _3190) / ((_3203 * 0.699999988079071044921875) + 1.0));
                                float _3226 = exp2(log2(1.0 / ((_3203 * 3.5) + 5.0)) * 0.25);
                                float _3227 = 1.0 - _894;
                                float _3234 = sqrt(1.0 - ((1.0 - (_3227 * _3227)) * (1.0 - (_3226 * _3226))));
                                float _3235 = _3234 * _3234;
                                float _3236 = _3235 * _3235;
                                float _3237 = _3183 - _2584;
                                float _3238 = _3184 - _2585;
                                float _3239 = _3185 - _2586;
                                float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                                float _3247 = dot(vec3(_834, _837, _840), vec3((-0.0) - _2584, (-0.0) - _2585, (-0.0) - _2586));
                                float _4194 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3250 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3251 = dot(vec3(_834, _837, _840), vec3(_3243 * _3237, _3243 * _3238, _3243 * _3239));
                                float _4205 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3254 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3258 = ((_3254 * _3254) * (_3236 + (-1.0))) + 1.0;
                                float _3259 = _3196 * _3235;
                                float _3260 = _3259 * _3259;
                                float _3266 = ((1.0 - _3260) * dot(vec3(_834, _837, _840), vec3(_3183, _3184, _3185))) + _3260;
                                float _4216 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3268 = 1.0 - _3235;
                                float _3278 = (0.5 / (((_3267 * ((_3250 * _3268) + _3235)) + 9.9999999392252902907785028219223e-09) + (((_3267 * _3268) + _3235) * _3250))) * _3267;
                                float _4227 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3288 = (_3213 * _3190) * (((_3236 * 3.1415927410125732421875) * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) / ((_3258 * _3258) * ((_3203 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3214 * _3060.x;
                                frontier_phi_83_pred_1 = _3214 * _3060.z;
                                frontier_phi_83_pred_2 = _3214 * _3060.y;
                                frontier_phi_83_pred_3 = _3288 * _3072.z;
                                frontier_phi_83_pred_4 = _3288 * _3072.y;
                                frontier_phi_83_pred_5 = _3288 * _3072.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3295 = frontier_phi_83_pred;
                            _3297 = frontier_phi_83_pred_1;
                            _3296 = frontier_phi_83_pred_2;
                            _3294 = frontier_phi_83_pred_3;
                            _3293 = frontier_phi_83_pred_4;
                            _3292 = frontier_phi_83_pred_5;
                            _3002 = _3295 + _3015;
                            _3003 = _3296 + _3016;
                            _3004 = _3297 + _3017;
                            _2999 = _3292 + _3012;
                            _3000 = _3293 + _3013;
                            _3001 = _3294 + _3014;
                            if (_3019 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3019;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3004;
                        frontier_phi_77_pred_1 = _3003;
                        frontier_phi_77_pred_2 = _3002;
                        frontier_phi_77_pred_3 = _3001;
                        frontier_phi_77_pred_4 = _3000;
                        frontier_phi_77_pred_5 = _2999;
                    }
                    _2569 = frontier_phi_77_pred;
                    _2567 = frontier_phi_77_pred_1;
                    _2565 = frontier_phi_77_pred_2;
                    _2563 = frontier_phi_77_pred_3;
                    _2561 = frontier_phi_77_pred_4;
                    _2559 = frontier_phi_77_pred_5;
                    uint _2776 = _2775 + 1u;
                    if (_2776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2769 = _2559;
                        _2770 = _2561;
                        _2771 = _2563;
                        _2772 = _2565;
                        _2773 = _2567;
                        _2774 = _2569;
                        _2775 = _2776;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2561;
                frontier_phi_52_53_ladder_1 = _2569;
                frontier_phi_52_53_ladder_2 = _2567;
                frontier_phi_52_53_ladder_3 = _2565;
                frontier_phi_52_53_ladder_4 = _2563;
                frontier_phi_52_53_ladder_5 = _2559;
            }
            else
            {
                frontier_phi_52_53_ladder = _2400;
                frontier_phi_52_53_ladder_1 = _2408;
                frontier_phi_52_53_ladder_2 = _2406;
                frontier_phi_52_53_ladder_3 = _2404;
                frontier_phi_52_53_ladder_4 = _2402;
                frontier_phi_52_53_ladder_5 = _2398;
            }
            _2558 = frontier_phi_52_53_ladder_5;
            _2560 = frontier_phi_52_53_ladder;
            _2562 = frontier_phi_52_53_ladder_4;
            _2564 = frontier_phi_52_53_ladder_3;
            _2566 = frontier_phi_52_53_ladder_2;
            _2568 = frontier_phi_52_53_ladder_1;
        }
        float _2573 = isnan(1.0) ? _878 : (isnan(_878) ? 1.0 : min(_878, 1.0));
        _2294 = (_2573 * _2564) + _2021;
        _2296 = (_2573 * _2566) + _2022;
        _2298 = (_2573 * _2568) + _2023;
        _2300 = ((_2558 * 0.039999999105930328369140625) * _2573) + _2177;
        _2302 = ((_2560 * 0.039999999105930328369140625) * _2573) + _2178;
        _2304 = ((_2562 * 0.039999999105930328369140625) * _2573) + _2179;
    }
    else
    {
        _2294 = _2021;
        _2296 = _2022;
        _2298 = _2023;
        _2300 = _2177;
        _2302 = _2178;
        _2304 = _2179;
    }
    uint _2310 = _854 + uint(cbMatDynParam._m0[0u].w);
    float _2316 = (cbSceneParam._m0[72u].y * ((_734 * ((_725 - _687) - (_725 * _698))) + _687)) * cbInstanceData._m0[_2310].x;
    float _2317 = (cbSceneParam._m0[72u].y * ((_734 * ((_726 - _688) - (_726 * _698))) + _688)) * cbInstanceData._m0[_2310].y;
    float _2318 = (((_734 * ((_727 - _689) - (_727 * _698))) + _689) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2310].z;
    float _4243 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4254 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4265 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _2335 = (((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2294 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _878))) + ((_2300 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1713)) * cbPerFrame._m0[3u].x)) + _2316;
    float _2337 = (_2317 + ((_2302 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1713)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2296 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _878)));
    float _2339 = (_2318 + ((_2304 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1713)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2298 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _878)));
    float _2340 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2341 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2342 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2348 = cbMtdParam._m0[2u].x * _2316;
    float _2349 = cbMtdParam._m0[2u].y * _2317;
    float _2350 = cbMtdParam._m0[2u].z * _2318;
    float _4291 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2352 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    uint _2353 = _853 + 6u;
    float _2361 = _815 / cbSceneParam._m0[86u].x;
    float _2362 = _816 / cbSceneParam._m0[86u].y;
    vec4 _2376 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2361, _2362, (log2((isnan(cbSceneParam._m0[77u].w) ? _789 : (isnan(_789) ? cbSceneParam._m0[77u].w : min(_789, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2378 = _2376.x;
    float _2379 = _2376.y;
    float _2380 = _2376.z;
    float _2381 = _2376.w;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    if (_789 > cbSceneParam._m0[78u].w)
    {
        float _2423 = isnan(_789) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _789 : min(cbSceneParam._m0[80u].w, _789));
        float _2424 = _2423 / _789;
        float _2435 = _2424 * _282;
        float _2436 = _283 * _2424;
        float _2437 = (-0.0) - _2436;
        float _2438 = _2424 * _284;
        float _2440 = (cbSceneParam._m0[77u].w * _2437) / _2423;
        float _2441 = _2440 + cbSceneParam._m0[79u].w;
        float _2442 = cbSceneParam._m0[79u].w - _2436;
        float _2448 = sqrt(((_2435 * _2435) + (_2436 * _2436)) + (_2438 * _2438));
        float _2451 = (1.0 - (cbSceneParam._m0[77u].w / _2423)) * _2448;
        float _2457 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2459 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2700;
        if (abs((_2437 - _2440) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2700 = ((((_2441 > 0.0) ? exp2(_2457 * _2441) : (2.0 - exp2(_2459 * _2441))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2451;
        }
        else
        {
            float _2619 = 1.0 / cbSceneParam._m0[80u].x;
            float _2620 = isnan(_2442) ? _2441 : (isnan(_2441) ? _2442 : max(_2441, _2442));
            float _2621 = isnan(_2442) ? _2441 : (isnan(_2441) ? _2442 : min(_2441, _2442));
            float _2630 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : min(_2620, 0.0));
            float _2631 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : min(_2621, 0.0));
            _2700 = ((abs(_2448 / _2437) * cbSceneParam._m0[80u].y) * ((((_2630 - _2631) * 2.0) - ((exp2(_2457 * (isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0)))) - exp2(_2457 * (isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0))))) * _2619)) - ((exp2(_2459 * _2630) - exp2(_2459 * _2631)) * _2619))) + (_2451 * cbSceneParam._m0[80u].z);
        }
        vec4 _2702 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2361, _2362, 1.0), 0.0);
        float _2711 = exp2((_2700 * (-1.44269502162933349609375)) * (1.0 - _2702.w));
        float _2712 = log2(_2711);
        float _2728 = log2(_2381);
        _2461 = (exp2(_2728 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].x)) * _2702.x) / cbSceneParam._m0[78u].x)) + _2378;
        _2463 = (exp2(_2728 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].y)) * _2702.y) / cbSceneParam._m0[78u].y)) + _2379;
        _2465 = (exp2(_2728 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].z)) * _2702.z) / cbSceneParam._m0[78u].z)) + _2380;
        _2467 = _2711 * _2381;
    }
    else
    {
        _2461 = _2378;
        _2463 = _2379;
        _2465 = _2380;
        _2467 = _2381;
    }
    bool _2738;
    vec4 _2476;
    vec4 _2498;
    float _2500;
    float _2504;
    float _2505;
    float _2506;
    float _2509;
    float _2512;
    float _2515;
    float _2516;
    bool _2526;
    for (;;)
    {
        _2476 = cbMatDynParam._m0[0u];
        float _2478 = roundEven(_2476.y);
        bool _2479 = _2478 == 3.0;
        float _2480 = log2(_2467);
        float _2484 = exp2(_2480 * cbSceneParam._m0[78u].x);
        float _2485 = exp2(_2480 * cbSceneParam._m0[78u].y);
        float _2486 = exp2(_2480 * cbSceneParam._m0[78u].z);
        float _2487 = _2484 * _2340;
        float _2488 = _2485 * _2341;
        float _2489 = _2486 * _2342;
        float _2496 = _803 + (-0.5);
        _2498 = cbMtdParam._m0[1u];
        _2500 = _2498.y * _2496;
        float _2503 = (_2478 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2504 = _2503 * (_2479 ? _2487 : (_2487 + (cbSceneParam._m0[72u].w * _2461)));
        _2505 = _2503 * (_2479 ? _2488 : (_2488 + (cbSceneParam._m0[72u].w * _2463)));
        _2506 = _2503 * (_2479 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2465)));
        _2509 = ((_2348 * _2352) * _2484) * _2503;
        _2512 = ((_2349 * _2352) * _2485) * _2503;
        _2515 = ((_2350 * _2352) * _2486) * _2503;
        _2516 = _2496 * 0.999000012874603271484375;
        _2526 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2526)
        {
            if ((cbInstanceData._m0[_853 + 7u].x + _2516) < 0.5)
            {
                _2738 = true;
                break;
            }
        }
        uint _2654 = _854 + uint(_2476.w);
        if ((cbInstanceData._m0[_2654].w < 1.0) && ((cbInstanceData._m0[_2654].w + _2516) < 0.5))
        {
            _2738 = true;
            break;
        }
        if ((_2500 + 1.0) < _2498.x)
        {
            _2738 = true;
            break;
        }
        _2738 = false;
        break;
    }
    float _2969;
    if (_2738)
    {
        discard_state = true;
        _2969 = 0.0;
    }
    else
    {
        _2969 = cbInstanceData._m0[_2353].w;
    }
    SV_Target.x = _2504;
    SV_Target.y = _2505;
    SV_Target.z = _2506;
    SV_Target.w = _2969;
    SV_Target_1.x = _2509;
    SV_Target_1.y = _2512;
    SV_Target_1.z = _2515;
    SV_Target_1.w = cbInstanceData._m0[_2353].w;
    discard_exit();
}


