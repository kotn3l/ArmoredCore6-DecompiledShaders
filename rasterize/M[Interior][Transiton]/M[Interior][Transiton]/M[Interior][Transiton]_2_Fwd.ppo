#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _991;
uint _2148;
uint _2149;
uint _2150;
uint _2384;
uint _2385;
uint _2386;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _264);
    float _275 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _264);
    float _276 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _264);
    vec4 _295 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _333 = cbMtdParam._m0[27u].w + _274;
    float _334 = cbMtdParam._m0[28u].x + _275;
    float _335 = cbMtdParam._m0[28u].y + _276;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_203 * _195, _203 * _196, _203 * _197));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_217 * TANGENT.x, _217 * TANGENT.y, _217 * TANGENT.z));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - (_210 * NORMAL.x), (-0.0) - (_210 * NORMAL.y), (-0.0) - (_210 * NORMAL.z)));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _358 = _355 * _351;
    float _359 = (_355 * _349) + (((_295.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _360 = (_355 * _350) + (((_295.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _361 = _359 * cbMtdParam._m0[24u].x;
    float _362 = _360 * cbMtdParam._m0[23u].w;
    float _363 = fract(TEXCOORD.x);
    float _364 = fract(TEXCOORD.y);
    float _370;
    if (_361 > 0.0)
    {
        _370 = (1.0 - _363) / _361;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_361 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _363) / _361;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _370 = frontier_phi_3_2_ladder;
    }
    float _378;
    if (_362 > 0.0)
    {
        _378 = (1.0 - _364) / _362;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _364) / _362;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _378 = frontier_phi_7_6_ladder;
    }
    bool _380 = _358 > 0.0;
    float _382 = _380 ? (cbMtdParam._m0[17u].x / _358) : 5000.0;
    float _383 = isnan(_378) ? _370 : (isnan(_370) ? _378 : min(_370, _378));
    float _384 = isnan(_382) ? _383 : (isnan(_383) ? _382 : min(_383, _382));
    float _388 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _389 = _363 + (-0.5);
    float _392 = _364 + (-0.5);
    float _395 = ((_384 * _358) + _388) / _388;
    vec4 _420 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_389 + (_384 * _361)) / _395) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_392 + (_384 * _362)) / _395) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _430 = cbMtdParam._m0[9u].x * _420.x;
    float _431 = cbMtdParam._m0[9u].y * _420.y;
    float _432 = cbMtdParam._m0[9u].z * _420.z;
    float _450 = _359 * cbMtdParam._m0[26u].z;
    float _451 = _360 * cbMtdParam._m0[26u].y;
    bool _452 = _450 > 0.0;
    float _457;
    if (_452)
    {
        _457 = (1.0 - _363) / _450;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_450 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _363) / _450;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _457 = frontier_phi_11_10_ladder;
    }
    bool _459 = _451 > 0.0;
    float _464;
    if (_459)
    {
        _464 = (1.0 - _364) / _451;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_451 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _364) / _451;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _464 = frontier_phi_15_14_ladder;
    }
    float _467 = _380 ? (cbMtdParam._m0[19u].z / _358) : 5000.0;
    float _468 = isnan(_464) ? _457 : (isnan(_457) ? _464 : min(_457, _464));
    float _469 = isnan(_467) ? _468 : (isnan(_468) ? _467 : min(_468, _467));
    float _473 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _477 = ((_469 * _358) + _473) / _473;
    float _482 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _484 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _500 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_469 * _450)) / _477) + 0.5) + _482) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_469 * _451)) / _477) + 0.5) + _484) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _512;
    if (_452)
    {
        _512 = (1.0 - _363) / _450;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_450 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _363) / _450;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _512 = frontier_phi_19_18_ladder;
    }
    float _518;
    if (_459)
    {
        _518 = (1.0 - _364) / _451;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_451 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _364) / _451;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _518 = frontier_phi_23_22_ladder;
    }
    float _520 = isnan(_518) ? _512 : (isnan(_512) ? _518 : min(_512, _518));
    float _521 = isnan(_467) ? _520 : (isnan(_520) ? _467 : min(_520, _467));
    float _528 = ((_521 * _358) + _473) / _473;
    vec4 _548 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_389 + (_521 * _450)) / _528) + 0.5) + _482) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_392 + (_521 * _451)) / _528) + 0.5) + _484) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _550 = _548.x;
    float _557 = (_550 * ((_500.x * cbMtdParam._m0[10u].x) - _430)) + _430;
    float _558 = (_550 * ((_500.y * cbMtdParam._m0[10u].y) - _431)) + _431;
    float _559 = (_550 * ((_500.z * cbMtdParam._m0[10u].z) - _432)) + _432;
    float _568 = (cbMtdParam._m0[16u].x * cbMtdParam._m0[19u].y) * _557;
    float _570 = (_558 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].y;
    float _572 = (_559 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].z;
    vec4 _596 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _601 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _607 = ((_596.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _609 = (-0.0) - (cbMtdParam._m0[21u].x * ((_596.x * 0.5) + (-0.25)));
    float _610 = fract(_601);
    float _612 = fract(_601 + 0.5);
    vec4 _639 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_610 * _609) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_607 * _610) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _641 = _639.x;
    float _647 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_612 * _609) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_607 * _612) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _641) * abs((_610 * 2.0) + (-1.0))) + _641;
    float _653 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _657 = fract(abs(_653));
    float _667 = sin(cbMtdParam._m0[21u].z);
    float _668 = cos(cbMtdParam._m0[21u].z);
    float _669 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _670 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _695 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_670, (-0.0) - _667, _668 * _669) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_670, _668, _669 * _667) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_653 >= ((-0.0) - _653)) ? _657 : ((-0.0) - _657)) * cbMtdParam._m0[18u].z) - _647)) + cbMtdParam._m0[18u].w;
    float _696 = ceil(_695);
    float _2650 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _2650 : (isnan(_2650) ? 1.0 : min(_2650, 1.0));
    float _717 = ((((cbMtdParam._m0[21u].w * _557) * cbMtdParam._m0[15u].x) - _568) * _697) + _568;
    float _718 = ((((cbMtdParam._m0[21u].w * _558) * cbMtdParam._m0[15u].y) - _570) * _697) + _570;
    float _719 = ((((cbMtdParam._m0[21u].w * _559) * cbMtdParam._m0[15u].z) - _572) * _697) + _572;
    float _723 = abs(cbMtdParam._m0[20u].w * _695);
    float _727 = (((_723 * cbMtdParam._m0[18u].y) - _647) * _723) + _647;
    float _2661 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _728 = isnan(1.0) ? _2661 : (isnan(_2661) ? 1.0 : min(_2661, 1.0));
    vec4 _740 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _755 = (cbMtdParam._m0[14u].x * _740.x) * cbMtdParam._m0[19u].x;
    float _756 = (cbMtdParam._m0[14u].y * _740.y) * cbMtdParam._m0[19u].x;
    float _757 = (cbMtdParam._m0[14u].z * _740.z) * cbMtdParam._m0[19u].x;
    float _764 = exp2(log2(_728) * cbMtdParam._m0[20u].x);
    float _799 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _803 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _804 = _274 * _803;
    float _805 = _275 * _803;
    float _806 = _276 * _803;
    float _812 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _813 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _822 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_812 * cbSceneParam._m0[86u].x, _813 * cbSceneParam._m0[86u].y));
    float _825 = _822.x * TEXCOORD_4;
    float _826 = (-0.0) - _804;
    float _827 = (-0.0) - _805;
    float _828 = (-0.0) - _806;
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _990;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _913 = (cbModelParam._m0[37u].x * ((((fma(_858, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _850)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _915 = (cbModelParam._m0[37u].y * ((((fma(_858, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _850)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _916 = (((((fma(_858, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _850)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_913, _915, _916), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_913, _915, _916), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_913, _915, _916), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_913, _915, _916), 0.0);
        float _953 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _963 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _973 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _983 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_940.x + (-0.5));
        float _985 = _983 * (_940.y + (-0.5));
        float _986 = _983 * (_940.z + (-0.5));
        _990 = _953 * (_919.z + (-0.5));
        _992 = _953 * (_919.y + (-0.5));
        _993 = _953 * (_919.x + (-0.5));
        _994 = _963 * (_926.z + (-0.5));
        _995 = _963 * (_926.y + (-0.5));
        _996 = _963 * (_926.x + (-0.5));
        _997 = _973 * (_933.z + (-0.5));
        _998 = _973 * (_933.y + (-0.5));
        _999 = _973 * (_933.x + (-0.5));
        _1000 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        _1001 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        _1002 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    }
    else
    {
        _990 = _991;
        _992 = _991;
        _993 = _991;
        _994 = _991;
        _995 = _991;
        _996 = _991;
        _997 = _991;
        _998 = _991;
        _999 = _991;
        _1000 = _991;
        _1001 = _991;
        _1002 = _991;
    }
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1055 = (cbModelParam._m0[38u].x * ((((fma(_858, cbModelParam._m0[30u].z, fma(_854, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _850)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1056 = (cbModelParam._m0[38u].y * ((((fma(_858, cbModelParam._m0[31u].z, fma(_854, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _850)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1057 = (((((fma(_858, cbModelParam._m0[32u].z, fma(_854, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _850)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1092 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1080.x + (-0.5));
        float _1124 = _1122 * (_1080.y + (-0.5));
        float _1125 = _1122 * (_1080.z + (-0.5));
        _1129 = _1092 * (_1059.z + (-0.5));
        _1130 = _1092 * (_1059.y + (-0.5));
        _1131 = _1092 * (_1059.x + (-0.5));
        _1132 = _1102 * (_1066.z + (-0.5));
        _1133 = _1102 * (_1066.y + (-0.5));
        _1134 = _1102 * (_1066.x + (-0.5));
        _1135 = _1112 * (_1073.z + (-0.5));
        _1136 = _1112 * (_1073.y + (-0.5));
        _1137 = _1112 * (_1073.x + (-0.5));
        _1138 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        _1139 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        _1140 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    }
    else
    {
        _1129 = _991;
        _1130 = _991;
        _1131 = _991;
        _1132 = _991;
        _1133 = _991;
        _1134 = _991;
        _1135 = _991;
        _1136 = _991;
        _1137 = _991;
        _1138 = _991;
        _1139 = _991;
        _1140 = _991;
    }
    float _1155 = _804 * (-0.5);
    float _1156 = _805 * (-0.5);
    float _1157 = _806 * (-0.5);
    float _1158 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1131, _1134, _1137, _1140));
    float _1161 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1130, _1133, _1136, _1139));
    float _1164 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1129, _1132, _1135, _1138));
    float _1199;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1171 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_990, _994, _997, _1000));
        float _1175 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_992, _995, _998, _1001));
        float _1179 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_993, _996, _999, _1002));
        float _1186 = dot(vec4(cbModelParam._m0[39u]), vec4(_1155, _1156, _1157, 1.0));
        _1199 = dot(vec3(isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1186) ? 0.0 : (isnan(0.0) ? _1186 : max(0.0, _1186))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1199 = 1.0;
    }
    float _1210;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1201 = dot(vec4(cbModelParam._m0[40u]), vec4(_1155, _1156, _1157, 1.0));
        _1210 = dot(vec3(isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)), isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)), isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1201) ? 0.0 : (isnan(0.0) ? _1201 : max(0.0, _1201))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1210 = 1.0;
    }
    float _1214 = (_1210 * cbModelParam._m0[1u].x) + (_1199 * (1.0 - cbModelParam._m0[1u].x));
    float _1220 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1301;
    float _1303;
    float _1305;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1268 = fma(_858, cbModelParam._m0[13u].z, fma(_854, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _850)) + cbModelParam._m0[13u].w;
        float _1272 = fma(_858, cbModelParam._m0[14u].z, fma(_854, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _850)) + cbModelParam._m0[14u].w;
        float _1276 = fma(_858, cbModelParam._m0[15u].z, fma(_854, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _850)) + cbModelParam._m0[15u].w;
        float _1279 = fma(_828, cbModelParam._m0[13u].z, fma(_827, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _826));
        float _1282 = fma(_828, cbModelParam._m0[14u].z, fma(_827, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _826));
        float _1285 = fma(_828, cbModelParam._m0[15u].z, fma(_827, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _826));
        float _1311;
        if (_1279 > 0.0)
        {
            _1311 = abs((1.0 - _1268) / _1279);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1279 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1268 + 1.0) / _1279);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1311 = frontier_phi_38_36_ladder;
        }
        float _1587;
        if (_1282 > 0.0)
        {
            _1587 = abs((1.0 - _1272) / _1282);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1282 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1272 + 1.0) / _1282);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1587 = frontier_phi_47_43_ladder;
        }
        float _1901;
        if (_1285 > 0.0)
        {
            _1901 = abs((1.0 - _1276) / _1285);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1285 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1276 + 1.0) / _1285);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _1901 = frontier_phi_61_54_ladder;
        }
        float _1903 = isnan(_1587) ? _1311 : (isnan(_1311) ? _1587 : min(_1311, _1587));
        float _1904 = isnan(_1901) ? _1903 : (isnan(_1903) ? _1901 : min(_1903, _1901));
        float _1908 = (_1904 * _1279) + _1268;
        float _1909 = (_1904 * _1282) + _1272;
        float _1910 = (_1904 * _1285) + _1276;
        float _1911 = _1904 * 9.9999997473787516355514526367188e-05;
        float _1912 = (-1.0) - _1911;
        float _1914 = _1911 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_1910 > _1914) || ((_1910 < _1912) || ((_1909 > _1914) || ((_1909 < _1912) || ((_1908 < _1912) || (_1908 > _1914))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2021 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1910, cbModelParam._m0[9u].z, fma(_1909, cbModelParam._m0[9u].y, _1908 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1910, cbModelParam._m0[10u].z, fma(_1909, cbModelParam._m0[10u].y, _1908 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1910, cbModelParam._m0[11u].z, fma(_1909, cbModelParam._m0[11u].y, _1908 * cbModelParam._m0[11u].x))), _1220);
            frontier_phi_37_61_ladder = _2021.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2021.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2021.x * cbModelParam._m0[1u].y;
        }
        _1301 = frontier_phi_37_61_ladder_2;
        _1303 = frontier_phi_37_61_ladder_1;
        _1305 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1289 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_826, _827, _828), _1220);
        _1301 = _1289.x * cbModelParam._m0[1u].y;
        _1303 = _1289.y * cbModelParam._m0[1u].y;
        _1305 = _1289.z * cbModelParam._m0[1u].y;
    }
    float _1308 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1396;
    float _1398;
    float _1400;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1360 = fma(_858, cbModelParam._m0[21u].z, fma(_854, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _850)) + cbModelParam._m0[21u].w;
        float _1364 = fma(_858, cbModelParam._m0[22u].z, fma(_854, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _850)) + cbModelParam._m0[22u].w;
        float _1368 = fma(_858, cbModelParam._m0[23u].z, fma(_854, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _850)) + cbModelParam._m0[23u].w;
        float _1371 = fma(_828, cbModelParam._m0[21u].z, fma(_827, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _826));
        float _1374 = fma(_828, cbModelParam._m0[22u].z, fma(_827, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _826));
        float _1377 = fma(_828, cbModelParam._m0[23u].z, fma(_827, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _826));
        float _1592;
        if (_1371 > 0.0)
        {
            _1592 = abs((1.0 - _1360) / _1371);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1360 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1592 = frontier_phi_49_45_ladder;
        }
        float _1927;
        if (_1374 > 0.0)
        {
            _1927 = abs((1.0 - _1364) / _1374);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1364 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _1927 = frontier_phi_63_56_ladder;
        }
        float _2078;
        if (_1377 > 0.0)
        {
            _2078 = abs((1.0 - _1368) / _1377);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1368 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2078 = frontier_phi_77_72_ladder;
        }
        float _2080 = isnan(_1927) ? _1592 : (isnan(_1592) ? _1927 : min(_1592, _1927));
        float _2081 = isnan(_2078) ? _2080 : (isnan(_2080) ? _2078 : min(_2080, _2078));
        float _2085 = (_2081 * _1371) + _1360;
        float _2086 = (_2081 * _1374) + _1364;
        float _2087 = (_2081 * _1377) + _1368;
        float _2088 = _2081 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2088;
        float _2091 = _2088 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2087 > _2091) || ((_2087 < _2089) || ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 < _2089) || (_2085 > _2091))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2247 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2087, cbModelParam._m0[17u].z, fma(_2086, cbModelParam._m0[17u].y, _2085 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2087, cbModelParam._m0[18u].z, fma(_2086, cbModelParam._m0[18u].y, _2085 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2087, cbModelParam._m0[19u].z, fma(_2086, cbModelParam._m0[19u].y, _2085 * cbModelParam._m0[19u].x))), _1308);
            frontier_phi_46_77_ladder = _2247.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2247.x * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2247.y * cbModelParam._m0[1u].z;
        }
        _1396 = frontier_phi_46_77_ladder_1;
        _1398 = frontier_phi_46_77_ladder_2;
        _1400 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1380 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_826, _827, _828), _1308);
        _1396 = _1380.x * cbModelParam._m0[1u].z;
        _1398 = _1380.y * cbModelParam._m0[1u].z;
        _1400 = _1380.z * cbModelParam._m0[1u].z;
    }
    float _1412 = _825 * 0.01200000010430812835693359375;
    float _1414 = _1412 * ((cbModelParam._m0[1u].w * (_1396 - _1301)) + _1301);
    float _1415 = _1412 * ((cbModelParam._m0[1u].w * (_1398 - _1303)) + _1303);
    float _1416 = _1412 * ((cbModelParam._m0[1u].w * (_1400 - _1305)) + _1305);
    float _1437 = fma(_1416, cbSceneParam._m0[89u].z, fma(_1415, cbSceneParam._m0[89u].y, _1414 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1416, cbSceneParam._m0[90u].z, fma(_1415, cbSceneParam._m0[90u].y, _1414 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1416, cbSceneParam._m0[91u].z, fma(_1415, cbSceneParam._m0[91u].y, _1414 * cbSceneParam._m0[91u].x));
    uint _1450 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1454 = floatBitsToUint(cbInstanceData._m0[_1450 + 5u]);
    uint _1456 = _1454.x * 14u;
    uint _1457 = _1456 + 13u;
    float _1462 = _825 + (-1.0);
    float _1465 = (cbLight._m0[_1457].x * _1462) + 1.0;
    float _1466 = (cbLight._m0[_1457].y * _1462) + 1.0;
    uint _1467 = _1456 + 8u;
    float _1478 = cbLight._m0[_1456].x + _804;
    float _1479 = cbLight._m0[_1456].y + _805;
    float _1480 = cbLight._m0[_1456].z + _806;
    float _1484 = inversesqrt(dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480)));
    float _1488 = dot(vec3(0.0), vec3(cbLight._m0[_1456].xyz));
    float _2787 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
    float _1491 = isnan(1.0) ? _2787 : (isnan(_2787) ? 1.0 : min(_2787, 1.0));
    float _1492 = dot(vec3(0.0), vec3(_804, _805, _806));
    float _2798 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
    float _1495 = isnan(1.0) ? _2798 : (isnan(_2798) ? 1.0 : min(_2798, 1.0));
    float _1496 = dot(vec3(cbLight._m0[_1456].xyz), vec3(_1478 * _1484, _1479 * _1484, _1480 * _1484));
    float _2809 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
    float _1507 = (exp2(log2(1.0 - (isnan(1.0) ? _2809 : (isnan(_2809) ? 1.0 : min(_2809, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1513 = (0.5 / ((_1491 + 9.9999999392252902907785028219223e-09) + _1495)) * _1491;
    float _2820 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
    float _1515 = (isnan(1.0) ? _2820 : (isnan(_2820) ? 1.0 : min(_2820, 1.0))) * 0.31831014156341552734375;
    float _1517 = isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0));
    uint _1527 = _1456 + 9u;
    uint _1533 = _1456 | 1u;
    float _1539 = cbLight._m0[_1533].x + _804;
    float _1540 = cbLight._m0[_1533].y + _805;
    float _1541 = cbLight._m0[_1533].z + _806;
    float _1545 = inversesqrt(dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541)));
    float _1549 = dot(vec3(0.0), vec3(cbLight._m0[_1533].xyz));
    float _2836 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
    float _1552 = isnan(1.0) ? _2836 : (isnan(_2836) ? 1.0 : min(_2836, 1.0));
    float _1553 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_1539 * _1545, _1540 * _1545, _1541 * _1545));
    float _2847 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
    float _1562 = (exp2(log2(1.0 - (isnan(1.0) ? _2847 : (isnan(_2847) ? 1.0 : min(_2847, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1566 = (0.5 / ((_1552 + 9.9999999392252902907785028219223e-09) + _1495)) * _1552;
    float _2858 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1568 = (isnan(1.0) ? _2858 : (isnan(_2858) ? 1.0 : min(_2858, 1.0))) * 0.31831014156341552734375;
    float _1569 = isnan(1.0) ? _1466 : (isnan(_1466) ? 1.0 : min(_1466, 1.0));
    float _1579 = (((_1562 * cbLight._m0[_1527].x) * _1568) * _1569) + (((_1507 * cbLight._m0[_1467].x) * _1515) * _1517);
    float _1580 = (((_1562 * cbLight._m0[_1527].y) * _1568) * _1569) + (((_1507 * cbLight._m0[_1467].y) * _1515) * _1517);
    float _1581 = (((_1562 * cbLight._m0[_1527].z) * _1568) * _1569) + (((_1507 * cbLight._m0[_1467].z) * _1515) * _1517);
    float _1698;
    float _1700;
    float _1702;
    if (_1454.y == 0u)
    {
        float _1637 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1638 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1637;
        float _1639 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1637;
        float _1640 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1637;
        uvec4 _1652 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1653 = _1652.x;
        uint _1664 = uint((float(_1652.y) * floor(float(uint(cbSceneParam._m0[85u].y * _813) / _1653))) + floor(float(uint(cbSceneParam._m0[85u].x * _812) / _1653)));
        float _1674 = (log2(_1640 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1675 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        uint _1678 = uint(isnan(14.0) ? _1675 : (isnan(_1675) ? 14.0 : min(_1675, 14.0)));
        uvec4 _1684 = texelFetch(g_lightClusterGridBuffer, int(((_1678 << 2u) + (_1664 << 6u)) >> 2u));
        uint _1685 = _1684.x;
        uint _1686 = _1652.z;
        float _1785;
        float _1787;
        float _1789;
        if (((((1u << ((_1686 >> 4u) & 15u)) + 4294967295u) & _1685) == 0u) || ((_1686 & 240u) == 0u))
        {
            _1785 = 0.0;
            _1787 = 0.0;
            _1789 = 0.0;
        }
        else
        {
            float _1786;
            float _1788;
            float _1790;
            float _1952 = 0.0;
            float _1953 = 0.0;
            float _1954 = 0.0;
            uint _1955 = 0u;
            uint _1964;
            bool _1965;
            for (;;)
            {
                _1964 = texelFetch(g_lightClassification, int((((_1678 << 5u) + (_1664 << 9u)) + (_1955 << 2u)) >> 2u)).x;
                _1965 = _1964 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                if (_1965)
                {
                    frontier_phi_74_pred = _1954;
                    frontier_phi_74_pred_1 = _1953;
                    frontier_phi_74_pred_2 = _1952;
                }
                else
                {
                    float _2118;
                    float _2119;
                    float _2120;
                    uint _2121;
                    _2118 = _1952;
                    _2119 = _1953;
                    _2120 = _1954;
                    _2121 = _1964;
                    float _2030;
                    float _2031;
                    float _2032;
                    for (;;)
                    {
                        uint _2125 = uint(findLSB(_2121)) + (_1955 << 5u);
                        uint _2122 = (_2121 + 4294967295u) & _2121;
                        uint _2127 = _2125 * 48u;
                        vec4 _2141 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2127)).x, texelFetch(g_PointLightRenderingBuffer, int(_2127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2127 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2127 + 3u)).x));
                        uint _2158 = (_2125 * 48u) + 8u;
                        vec3 _2169 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2158)).x, texelFetch(g_PointLightRenderingBuffer, int(_2158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2158 + 2u)).x));
                        float _2173 = _2141.x - _1638;
                        float _2174 = _2141.y - _1639;
                        float _2175 = _2141.z - _1640;
                        float _2176 = dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175));
                        float _2179 = inversesqrt(_2176);
                        float _2188 = 1.0 - (_2176 * _2141.w);
                        float _2884 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
                        float _2190 = sqrt(_2176) * uintBitsToFloat(uvec4(_2148, _2149, _2150, texelFetch(g_PointLightRenderingBuffer, int(((_2125 * 48u) + 4u) + 3u)).x)).w;
                        float _2193 = 1.39999997615814208984375 / (_2190 + 1.39999997615814208984375);
                        float _2194 = _2193 * _2193;
                        float _2197 = ((1.0 - _2194) * dot(vec3(0.0), vec3(_2179 * _2173, _2179 * _2174, _2179 * _2175))) + _2194;
                        float _2199 = (-0.0) - _1638;
                        float _2200 = (-0.0) - _1639;
                        float _2201 = (-0.0) - _1640;
                        float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
                        float _2209 = dot(vec3(0.0), vec3(_2205 * _2199, _2205 * _2200, _2205 * _2201));
                        float _2895 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
                        float _2906 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
                        float _2213 = isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0));
                        float _2217 = (0.5 / (((isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0))) + 9.9999999392252902907785028219223e-09) + _2213)) * _2213;
                        float _2917 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
                        float _2226 = (((isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0))) * 3.1415927410125732421875) / (((_2190 * _2190) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0)));
                        _2030 = (_2226 * _2169.x) + _2118;
                        _2031 = (_2226 * _2169.y) + _2119;
                        _2032 = (_2226 * _2169.z) + _2120;
                        if (_2122 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2118 = _2030;
                            _2119 = _2031;
                            _2120 = _2032;
                            _2121 = _2122;
                        }
                    }
                    frontier_phi_74_pred = _2032;
                    frontier_phi_74_pred_1 = _2031;
                    frontier_phi_74_pred_2 = _2030;
                }
                _1790 = frontier_phi_74_pred;
                _1788 = frontier_phi_74_pred_1;
                _1786 = frontier_phi_74_pred_2;
                uint _1956 = _1955 + 1u;
                if (_1956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1952 = _1786;
                    _1953 = _1788;
                    _1954 = _1790;
                    _1955 = _1956;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1785 = _1786;
            _1787 = _1788;
            _1789 = _1790;
        }
        uvec4 _1793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1794 = _1793.z;
        uint _1796 = (_1794 >> 8u) & 15u;
        float _1932;
        float _1934;
        float _1936;
        if (((4294967295u << _1796) & _1685) == 0u)
        {
            _1932 = _1785;
            _1934 = _1787;
            _1936 = _1789;
        }
        else
        {
            float _1948 = inversesqrt(dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            if (_1796 < ((_1794 >> 12u) & 15u))
            {
                float _1933;
                float _1935;
                float _1937;
                float _2104 = _1785;
                float _2105 = _1787;
                float _2106 = _1789;
                uint _2107 = _1796;
                uint _2116;
                bool _2117;
                for (;;)
                {
                    _2116 = texelFetch(g_lightClassification, int((((_1678 << 5u) + (_1664 << 9u)) + (_2107 << 2u)) >> 2u)).x;
                    _2117 = _2116 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    if (_2117)
                    {
                        frontier_phi_83_pred = _2106;
                        frontier_phi_83_pred_1 = _2105;
                        frontier_phi_83_pred_2 = _2104;
                    }
                    else
                    {
                        float _2252;
                        float _2253;
                        float _2254;
                        float _2473;
                        float _2474;
                        float _2475;
                        float _2262 = _2104;
                        float _2263 = _2105;
                        float _2264 = _2106;
                        uint _2265 = _2116;
                        uint _2266;
                        uint _2276;
                        vec4 _2291;
                        float _2292;
                        vec3 _2304;
                        vec4 _2319;
                        vec4 _2334;
                        float _2380;
                        bool _2381;
                        for (;;)
                        {
                            _2276 = ((_2107 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2265));
                            _2266 = (_2265 + 4294967295u) & _2265;
                            uint _2278 = _2276 * 40u;
                            _2291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2278 + 3u)).x));
                            _2292 = _2291.w;
                            uint _2294 = (_2276 * 40u) + 8u;
                            _2304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2294 + 2u)).x));
                            uint _2306 = (_2276 * 40u) + 16u;
                            _2319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2306 + 3u)).x));
                            uint _2321 = (_2276 * 40u) + 20u;
                            _2334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2321 + 3u)).x));
                            uint _2336 = (_2276 * 40u) + 24u;
                            vec4 _2349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2336 + 3u)).x));
                            uint _2355 = (_2276 * 40u) + 28u;
                            vec4 _2368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2355 + 3u)).x));
                            _2380 = fma(_1640, _2368.z, fma(_1639, _2368.y, _2368.x * _1638)) + _2368.w;
                            _2381 = !((fma(_1640, _2349.z, fma(_1639, _2349.y, _2349.x * _1638)) + _2349.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            if (_2381)
                            {
                                float _2415 = _2291.x - _1638;
                                float _2416 = _2291.y - _1639;
                                float _2417 = _2291.z - _1640;
                                float _2418 = dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417));
                                float _2421 = inversesqrt(_2418);
                                float _2428 = 1.0 - (_2418 / (_2292 * _2292));
                                float _2928 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
                                float _2430 = sqrt(_2418) * uintBitsToFloat(uvec4(_2384, _2385, _2386, texelFetch(g_SpotLightRenderingBuffer, int(((_2276 * 40u) + 4u) + 3u)).x)).w;
                                float _2432 = 1.39999997615814208984375 / (_2430 + 1.39999997615814208984375);
                                float _2433 = _2432 * _2432;
                                float _2436 = (fma(_1640, _2319.z, fma(_1639, _2319.y, _2319.x * _1638)) + _2319.w) / _2380;
                                float _2437 = (fma(_1640, _2334.z, fma(_1639, _2334.y, _2334.x * _1638)) + _2334.w) / _2380;
                                float _2441 = 1.0 - dot(vec2(_2436, _2437), vec2(_2436, _2437));
                                float _2939 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
                                float _2449 = dot(vec3(0.0), vec3((-0.0) - (_1638 * _1948), (-0.0) - (_1639 * _1948), (-0.0) - (_1640 * _1948)));
                                float _2950 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
                                float _2457 = ((1.0 - _2433) * dot(vec3(0.0), vec3(_2421 * _2415, _2421 * _2416, _2421 * _2417))) + _2433;
                                float _2961 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
                                float _2458 = isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0));
                                float _2462 = (0.5 / (((isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0))) + 9.9999999392252902907785028219223e-09) + _2458)) * _2458;
                                float _2972 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
                                float _2469 = ((isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0))) * (isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0)))) * (((isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0))) * 3.1415927410125732421875) / (((_2430 * _2430) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_89_pred = _2469 * _2304.x;
                                frontier_phi_89_pred_1 = _2469 * _2304.z;
                                frontier_phi_89_pred_2 = _2469 * _2304.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                            }
                            _2473 = frontier_phi_89_pred;
                            _2475 = frontier_phi_89_pred_1;
                            _2474 = frontier_phi_89_pred_2;
                            _2252 = _2473 + _2262;
                            _2253 = _2474 + _2263;
                            _2254 = _2475 + _2264;
                            if (_2266 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2262 = _2252;
                                _2263 = _2253;
                                _2264 = _2254;
                                _2265 = _2266;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2254;
                        frontier_phi_83_pred_1 = _2253;
                        frontier_phi_83_pred_2 = _2252;
                    }
                    _1937 = frontier_phi_83_pred;
                    _1935 = frontier_phi_83_pred_1;
                    _1933 = frontier_phi_83_pred_2;
                    uint _2108 = _2107 + 1u;
                    if (_2108 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2104 = _1933;
                        _2105 = _1935;
                        _2106 = _1937;
                        _2107 = _2108;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _1935;
                frontier_phi_65_66_ladder_1 = _1933;
                frontier_phi_65_66_ladder_2 = _1937;
            }
            else
            {
                frontier_phi_65_66_ladder = _1787;
                frontier_phi_65_66_ladder_1 = _1785;
                frontier_phi_65_66_ladder_2 = _1789;
            }
            _1932 = frontier_phi_65_66_ladder_1;
            _1934 = frontier_phi_65_66_ladder;
            _1936 = frontier_phi_65_66_ladder_2;
        }
        float _1941 = isnan(1.0) ? _825 : (isnan(_825) ? 1.0 : min(_825, 1.0));
        _1698 = ((_1932 * 0.039999999105930328369140625) * _1941) + _1579;
        _1700 = ((_1934 * 0.039999999105930328369140625) * _1941) + _1580;
        _1702 = ((_1936 * 0.039999999105930328369140625) * _1941) + _1581;
    }
    else
    {
        _1698 = _1579;
        _1700 = _1580;
        _1702 = _1581;
    }
    uint _1709 = (_1450 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1715 = (cbSceneParam._m0[72u].y * ((_764 * ((_755 - _717) - (_755 * _728))) + _717)) * cbInstanceData._m0[_1709].x;
    float _1716 = (cbSceneParam._m0[72u].y * ((_764 * ((_756 - _718) - (_756 * _728))) + _718)) * cbInstanceData._m0[_1709].y;
    float _1717 = (((_764 * ((_757 - _719) - (_757 * _728))) + _719) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1709].z;
    float _1724 = _1715 + ((_1698 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _1214)) * cbPerFrame._m0[3u].x);
    float _1725 = _1716 + ((_1700 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _1214)) * cbPerFrame._m0[3u].x);
    float _1726 = _1717 + ((_1702 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _1214)) * cbPerFrame._m0[3u].x);
    float _3003 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1739 = isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0));
    uint _1740 = _1450 + 6u;
    float _1748 = _812 / cbSceneParam._m0[86u].x;
    float _1749 = _813 / cbSceneParam._m0[86u].y;
    vec4 _1763 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1748, _1749, (log2((isnan(cbSceneParam._m0[77u].w) ? _799 : (isnan(_799) ? cbSceneParam._m0[77u].w : min(_799, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1765 = _1763.x;
    float _1766 = _1763.y;
    float _1767 = _1763.z;
    float _1768 = _1763.w;
    float _1842;
    float _1844;
    float _1846;
    float _1848;
    if (_799 > cbSceneParam._m0[78u].w)
    {
        float _1804 = isnan(_799) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _799 : min(cbSceneParam._m0[80u].w, _799));
        float _1805 = _1804 / _799;
        float _1816 = _1805 * _274;
        float _1817 = _275 * _1805;
        float _1818 = (-0.0) - _1817;
        float _1819 = _1805 * _276;
        float _1821 = (cbSceneParam._m0[77u].w * _1818) / _1804;
        float _1822 = _1821 + cbSceneParam._m0[79u].w;
        float _1823 = cbSceneParam._m0[79u].w - _1817;
        float _1829 = sqrt(((_1816 * _1816) + (_1817 * _1817)) + (_1819 * _1819));
        float _1832 = (1.0 - (cbSceneParam._m0[77u].w / _1804)) * _1829;
        float _1838 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1840 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2040;
        if (abs((_1818 - _1821) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2040 = ((((_1822 > 0.0) ? exp2(_1838 * _1822) : (2.0 - exp2(_1840 * _1822))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1832;
        }
        else
        {
            float _1978 = 1.0 / cbSceneParam._m0[80u].x;
            float _1979 = isnan(_1823) ? _1822 : (isnan(_1822) ? _1823 : max(_1822, _1823));
            float _1980 = isnan(_1823) ? _1822 : (isnan(_1822) ? _1823 : min(_1822, _1823));
            float _1989 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : min(_1979, 0.0));
            float _1990 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : min(_1980, 0.0));
            _2040 = ((abs(_1829 / _1818) * cbSceneParam._m0[80u].y) * ((((_1989 - _1990) * 2.0) - ((exp2(_1838 * (isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)))) - exp2(_1838 * (isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))))) * _1978)) - ((exp2(_1840 * _1989) - exp2(_1840 * _1990)) * _1978))) + (_1832 * cbSceneParam._m0[80u].z);
        }
        vec4 _2042 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1748, _1749, 1.0), 0.0);
        float _2051 = exp2((_2040 * (-1.44269502162933349609375)) * (1.0 - _2042.w));
        float _2052 = log2(_2051);
        float _2068 = log2(_1768);
        _1842 = (exp2(_2068 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2052 * cbSceneParam._m0[78u].x)) * _2042.x) / cbSceneParam._m0[78u].x)) + _1765;
        _1844 = (exp2(_2068 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2052 * cbSceneParam._m0[78u].y)) * _2042.y) / cbSceneParam._m0[78u].y)) + _1766;
        _1846 = (exp2(_2068 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2052 * cbSceneParam._m0[78u].z)) * _2042.z) / cbSceneParam._m0[78u].z)) + _1767;
        _1848 = _2051 * _1768;
    }
    else
    {
        _1842 = _1765;
        _1844 = _1766;
        _1846 = _1767;
        _1848 = _1768;
    }
    float _1859 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1860 = _1859 == 3.0;
    float _1862 = log2(_1848);
    float _1866 = exp2(_1862 * cbSceneParam._m0[78u].x);
    float _1867 = exp2(_1862 * cbSceneParam._m0[78u].y);
    float _1868 = exp2(_1862 * cbSceneParam._m0[78u].z);
    float _1869 = _1866 * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
    float _1870 = _1867 * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
    float _1871 = _1868 * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
    float _1880 = (_1859 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1880 * (_1860 ? _1869 : (_1869 + (cbSceneParam._m0[72u].w * _1842)));
    SV_Target.y = _1880 * (_1860 ? _1870 : (_1870 + (cbSceneParam._m0[72u].w * _1844)));
    SV_Target.z = _1880 * (_1860 ? _1871 : (_1871 + (cbSceneParam._m0[72u].w * _1846)));
    SV_Target.w = cbInstanceData._m0[_1740].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1715) * _1739) * _1866) * _1880;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1716) * _1739) * _1867) * _1880;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1717) * _1739) * _1868) * _1880;
    SV_Target_1.w = cbInstanceData._m0[_1740].w;
}


