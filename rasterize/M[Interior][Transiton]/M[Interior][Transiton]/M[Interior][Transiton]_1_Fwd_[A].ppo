#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _909;
uint _2098;
uint _2099;
uint _2100;
uint _2343;
uint _2344;
uint _2345;
float _2568;
float _2569;
float _2570;
float _2571;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _292 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _330 = cbMtdParam._m0[27u].w + _271;
    float _331 = cbMtdParam._m0[28u].x + _272;
    float _332 = cbMtdParam._m0[28u].y + _273;
    float _349 = (-0.0) - dot(vec3(_330, _331, _332), vec3(_203 * _195, _203 * _196, _203 * _197));
    float _350 = (-0.0) - dot(vec3(_330, _331, _332), vec3(_214 * TANGENT.x, _214 * TANGENT.y, _214 * TANGENT.z));
    float _351 = (-0.0) - dot(vec3(_330, _331, _332), vec3((-0.0) - (NORMAL.x * _210), (-0.0) - (NORMAL.y * _210), (-0.0) - (NORMAL.z * _210)));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _358 = _355 * _351;
    float _361 = ((_355 * _349) + (((_292.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w)) * cbMtdParam._m0[24u].x;
    float _362 = ((_355 * _350) + (((_292.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x)) * cbMtdParam._m0[23u].w;
    float _363 = fract(TEXCOORD.x);
    float _364 = fract(TEXCOORD.y);
    float _370;
    if (_361 > 0.0)
    {
        _370 = (1.0 - _363) / _361;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_361 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _363) / _361;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _370 = frontier_phi_3_2_ladder;
    }
    float _378;
    if (_362 > 0.0)
    {
        _378 = (1.0 - _364) / _362;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _364) / _362;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _378 = frontier_phi_7_6_ladder;
    }
    float _382 = (_358 > 0.0) ? (cbMtdParam._m0[17u].x / _358) : 5000.0;
    float _383 = isnan(_378) ? _370 : (isnan(_370) ? _378 : min(_370, _378));
    float _384 = isnan(_382) ? _383 : (isnan(_383) ? _382 : min(_383, _382));
    float _388 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _395 = ((_384 * _358) + _388) / _388;
    vec4 _420 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_363 + (-0.5)) + (_384 * _361)) / _395) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_364 + (-0.5)) + (_384 * _362)) / _395) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _430 = cbMtdParam._m0[9u].x * _420.x;
    float _431 = cbMtdParam._m0[9u].y * _420.y;
    float _432 = cbMtdParam._m0[9u].z * _420.z;
    float _444 = (cbMtdParam._m0[19u].y * _430) * cbMtdParam._m0[16u].x;
    float _446 = (cbMtdParam._m0[19u].y * _431) * cbMtdParam._m0[16u].y;
    float _448 = (cbMtdParam._m0[19u].y * _432) * cbMtdParam._m0[16u].z;
    vec4 _472 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _477 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _483 = ((_472.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _485 = (-0.0) - (cbMtdParam._m0[21u].x * ((_472.x * 0.5) + (-0.25)));
    float _486 = fract(_477);
    float _488 = fract(_477 + 0.5);
    vec4 _515 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_486 * _485) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_483 * _486) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _517 = _515.x;
    float _523 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_488 * _485) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_483 * _488) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _517) * abs((_486 * 2.0) + (-1.0))) + _517;
    float _529 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _533 = fract(abs(_529));
    float _543 = sin(cbMtdParam._m0[21u].z);
    float _544 = cos(cbMtdParam._m0[21u].z);
    float _545 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _546 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _571 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_546, (-0.0) - _543, _544 * _545) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_546, _544, _545 * _543) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_529 >= ((-0.0) - _529)) ? _533 : ((-0.0) - _533)) * cbMtdParam._m0[18u].z) - _523)) + cbMtdParam._m0[18u].w;
    float _572 = ceil(_571);
    float _2590 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _2590 : (isnan(_2590) ? 1.0 : min(_2590, 1.0));
    float _593 = ((((cbMtdParam._m0[21u].w * _430) * cbMtdParam._m0[15u].x) - _444) * _573) + _444;
    float _594 = ((((cbMtdParam._m0[21u].w * _431) * cbMtdParam._m0[15u].y) - _446) * _573) + _446;
    float _595 = ((((cbMtdParam._m0[21u].w * _432) * cbMtdParam._m0[15u].z) - _448) * _573) + _448;
    float _599 = abs(cbMtdParam._m0[20u].w * _571);
    float _603 = (((_599 * cbMtdParam._m0[18u].y) - _523) * _599) + _523;
    float _2601 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _604 = isnan(1.0) ? _2601 : (isnan(_2601) ? 1.0 : min(_2601, 1.0));
    vec4 _616 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _631 = (cbMtdParam._m0[14u].x * _616.x) * cbMtdParam._m0[19u].x;
    float _632 = (cbMtdParam._m0[14u].y * _616.y) * cbMtdParam._m0[19u].x;
    float _633 = (cbMtdParam._m0[14u].z * _616.z) * cbMtdParam._m0[19u].x;
    float _640 = exp2(log2(_604) * cbMtdParam._m0[20u].x);
    float _675 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _679 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _680 = _271 * _679;
    float _681 = _272 * _679;
    float _682 = _273 * _679;
    vec4 _687 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _689 = _687.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _759 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _765 = (cbMatDynParam._m0[5u].x * _759) + cbMatDynParam._m0[5u].y;
        float _2612 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _2612 : (isnan(_2612) ? 1.0 : min(_2612, 1.0));
        float _770 = (cbMatDynParam._m0[5u].z * _759) + cbMatDynParam._m0[5u].w;
        float _2623 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2623 : (isnan(_2623) ? 1.0 : min(_2623, 1.0))) - _766)) + _766) < ((_689 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _712 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_702 * cbSceneParam._m0[86u].x, _703 * cbSceneParam._m0[86u].y));
    float _715 = _712.x * TEXCOORD_4;
    float _716 = (-0.0) - _680;
    float _717 = (-0.0) - _681;
    float _718 = (-0.0) - _682;
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _908;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _831 = (cbModelParam._m0[37u].x * ((((fma(_748, cbModelParam._m0[26u].z, fma(_744, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _833 = (cbModelParam._m0[37u].y * ((((fma(_748, cbModelParam._m0[27u].z, fma(_744, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _834 = (((((fma(_748, cbModelParam._m0[28u].z, fma(_744, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _833, _834), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _833, _834), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _833, _834), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _833, _834), 0.0);
        float _871 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _881 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _891 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _901 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_858.x + (-0.5));
        float _903 = _901 * (_858.y + (-0.5));
        float _904 = _901 * (_858.z + (-0.5));
        _908 = _871 * (_837.z + (-0.5));
        _910 = _871 * (_837.y + (-0.5));
        _911 = _871 * (_837.x + (-0.5));
        _912 = _881 * (_844.z + (-0.5));
        _913 = _881 * (_844.y + (-0.5));
        _914 = _881 * (_844.x + (-0.5));
        _915 = _891 * (_851.z + (-0.5));
        _916 = _891 * (_851.y + (-0.5));
        _917 = _891 * (_851.x + (-0.5));
        _918 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        _919 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        _920 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    }
    else
    {
        _908 = _909;
        _910 = _909;
        _911 = _909;
        _912 = _909;
        _913 = _909;
        _914 = _909;
        _915 = _909;
        _916 = _909;
        _917 = _909;
        _918 = _909;
        _919 = _909;
        _920 = _909;
    }
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _976 = (cbModelParam._m0[38u].x * ((((fma(_748, cbModelParam._m0[30u].z, fma(_744, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _740)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _977 = (cbModelParam._m0[38u].y * ((((fma(_748, cbModelParam._m0[31u].z, fma(_744, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _740)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _978 = (((((fma(_748, cbModelParam._m0[32u].z, fma(_744, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _740)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        float _1013 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1001.x + (-0.5));
        float _1045 = _1043 * (_1001.y + (-0.5));
        float _1046 = _1043 * (_1001.z + (-0.5));
        _1050 = _1013 * (_980.z + (-0.5));
        _1051 = _1013 * (_980.y + (-0.5));
        _1052 = _1013 * (_980.x + (-0.5));
        _1053 = _1023 * (_987.z + (-0.5));
        _1054 = _1023 * (_987.y + (-0.5));
        _1055 = _1023 * (_987.x + (-0.5));
        _1056 = _1033 * (_994.z + (-0.5));
        _1057 = _1033 * (_994.y + (-0.5));
        _1058 = _1033 * (_994.x + (-0.5));
        _1059 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        _1060 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        _1061 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    }
    else
    {
        _1050 = _909;
        _1051 = _909;
        _1052 = _909;
        _1053 = _909;
        _1054 = _909;
        _1055 = _909;
        _1056 = _909;
        _1057 = _909;
        _1058 = _909;
        _1059 = _909;
        _1060 = _909;
        _1061 = _909;
    }
    float _1076 = _680 * (-0.5);
    float _1077 = _681 * (-0.5);
    float _1078 = _682 * (-0.5);
    float _1079 = dot(vec4(_1076, _1077, _1078, 1.0), vec4(_1052, _1055, _1058, _1061));
    float _1082 = dot(vec4(_1076, _1077, _1078, 1.0), vec4(_1051, _1054, _1057, _1060));
    float _1085 = dot(vec4(_1076, _1077, _1078, 1.0), vec4(_1050, _1053, _1056, _1059));
    float _1120;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1092 = dot(vec4(_1076, _1077, _1078, 1.0), vec4(_908, _912, _915, _918));
        float _1096 = dot(vec4(_1076, _1077, _1078, 1.0), vec4(_910, _913, _916, _919));
        float _1100 = dot(vec4(_1076, _1077, _1078, 1.0), vec4(_911, _914, _917, _920));
        float _1107 = dot(vec4(cbModelParam._m0[39u]), vec4(_1076, _1077, _1078, 1.0));
        _1120 = dot(vec3(isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)), isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)), isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1107) ? 0.0 : (isnan(0.0) ? _1107 : max(0.0, _1107))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1120 = 1.0;
    }
    float _1131;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1122 = dot(vec4(cbModelParam._m0[40u]), vec4(_1076, _1077, _1078, 1.0));
        _1131 = dot(vec3(isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)), isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)), isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1122) ? 0.0 : (isnan(0.0) ? _1122 : max(0.0, _1122))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1131 = 1.0;
    }
    float _1135 = (_1131 * cbModelParam._m0[1u].x) + (_1120 * (1.0 - cbModelParam._m0[1u].x));
    float _1141 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1222;
    float _1224;
    float _1226;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1189 = fma(_748, cbModelParam._m0[13u].z, fma(_744, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _740)) + cbModelParam._m0[13u].w;
        float _1193 = fma(_748, cbModelParam._m0[14u].z, fma(_744, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _740)) + cbModelParam._m0[14u].w;
        float _1197 = fma(_748, cbModelParam._m0[15u].z, fma(_744, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _740)) + cbModelParam._m0[15u].w;
        float _1200 = fma(_718, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _716));
        float _1203 = fma(_718, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _716));
        float _1206 = fma(_718, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _716));
        float _1232;
        if (_1200 > 0.0)
        {
            _1232 = abs((1.0 - _1189) / _1200);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1200 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1189 + 1.0) / _1200);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1232 = frontier_phi_25_23_ladder;
        }
        float _1508;
        if (_1203 > 0.0)
        {
            _1508 = abs((1.0 - _1193) / _1203);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1203 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1193 + 1.0) / _1203);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1508 = frontier_phi_34_30_ladder;
        }
        float _1830;
        if (_1206 > 0.0)
        {
            _1830 = abs((1.0 - _1197) / _1206);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1206 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1197 + 1.0) / _1206);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1830 = frontier_phi_48_41_ladder;
        }
        float _1832 = isnan(_1508) ? _1232 : (isnan(_1232) ? _1508 : min(_1232, _1508));
        float _1833 = isnan(_1830) ? _1832 : (isnan(_1832) ? _1830 : min(_1832, _1830));
        float _1837 = (_1833 * _1200) + _1189;
        float _1838 = (_1833 * _1203) + _1193;
        float _1839 = (_1833 * _1206) + _1197;
        float _1840 = _1833 * 9.9999997473787516355514526367188e-05;
        float _1841 = (-1.0) - _1840;
        float _1843 = _1840 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1839 > _1843) || ((_1839 < _1841) || ((_1838 > _1843) || ((_1838 < _1841) || ((_1837 < _1841) || (_1837 > _1843))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1966 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1839, cbModelParam._m0[9u].z, fma(_1838, cbModelParam._m0[9u].y, _1837 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1839, cbModelParam._m0[10u].z, fma(_1838, cbModelParam._m0[10u].y, _1837 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1839, cbModelParam._m0[11u].z, fma(_1838, cbModelParam._m0[11u].y, _1837 * cbModelParam._m0[11u].x))), _1141);
            frontier_phi_24_48_ladder = _1966.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _1966.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _1966.x * cbModelParam._m0[1u].y;
        }
        _1222 = frontier_phi_24_48_ladder_2;
        _1224 = frontier_phi_24_48_ladder_1;
        _1226 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1210 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_716, _717, _718), _1141);
        _1222 = _1210.x * cbModelParam._m0[1u].y;
        _1224 = _1210.y * cbModelParam._m0[1u].y;
        _1226 = _1210.z * cbModelParam._m0[1u].y;
    }
    float _1229 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1317;
    float _1319;
    float _1321;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1281 = fma(_748, cbModelParam._m0[21u].z, fma(_744, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _740)) + cbModelParam._m0[21u].w;
        float _1285 = fma(_748, cbModelParam._m0[22u].z, fma(_744, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _740)) + cbModelParam._m0[22u].w;
        float _1289 = fma(_748, cbModelParam._m0[23u].z, fma(_744, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _740)) + cbModelParam._m0[23u].w;
        float _1292 = fma(_718, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _716));
        float _1295 = fma(_718, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _716));
        float _1298 = fma(_718, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _716));
        float _1513;
        if (_1292 > 0.0)
        {
            _1513 = abs((1.0 - _1281) / _1292);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1292 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1281 + 1.0) / _1292);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1513 = frontier_phi_36_32_ladder;
        }
        float _1856;
        if (_1295 > 0.0)
        {
            _1856 = abs((1.0 - _1285) / _1295);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1295 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1285 + 1.0) / _1295);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1856 = frontier_phi_50_43_ladder;
        }
        float _2028;
        if (_1298 > 0.0)
        {
            _2028 = abs((1.0 - _1289) / _1298);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1298 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1289 + 1.0) / _1298);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2028 = frontier_phi_68_61_ladder;
        }
        float _2030 = isnan(_1856) ? _1513 : (isnan(_1513) ? _1856 : min(_1513, _1856));
        float _2031 = isnan(_2028) ? _2030 : (isnan(_2030) ? _2028 : min(_2030, _2028));
        float _2035 = (_2031 * _1292) + _1281;
        float _2036 = (_2031 * _1295) + _1285;
        float _2037 = (_2031 * _1298) + _1289;
        float _2038 = _2031 * 9.9999997473787516355514526367188e-05;
        float _2039 = (-1.0) - _2038;
        float _2041 = _2038 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2037 > _2041) || ((_2037 < _2039) || ((_2036 > _2041) || ((_2036 < _2039) || ((_2035 < _2039) || (_2035 > _2041))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2206 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2037, cbModelParam._m0[17u].z, fma(_2036, cbModelParam._m0[17u].y, _2035 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2037, cbModelParam._m0[18u].z, fma(_2036, cbModelParam._m0[18u].y, _2035 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2037, cbModelParam._m0[19u].z, fma(_2036, cbModelParam._m0[19u].y, _2035 * cbModelParam._m0[19u].x))), _1229);
            frontier_phi_33_68_ladder = _2206.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2206.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2206.x * cbModelParam._m0[1u].z;
        }
        _1317 = frontier_phi_33_68_ladder_2;
        _1319 = frontier_phi_33_68_ladder_1;
        _1321 = frontier_phi_33_68_ladder;
    }
    else
    {
        vec4 _1301 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_716, _717, _718), _1229);
        _1317 = _1301.x * cbModelParam._m0[1u].z;
        _1319 = _1301.y * cbModelParam._m0[1u].z;
        _1321 = _1301.z * cbModelParam._m0[1u].z;
    }
    float _1333 = _715 * 0.01200000010430812835693359375;
    float _1335 = _1333 * ((cbModelParam._m0[1u].w * (_1317 - _1222)) + _1222);
    float _1336 = _1333 * ((cbModelParam._m0[1u].w * (_1319 - _1224)) + _1224);
    float _1337 = _1333 * ((cbModelParam._m0[1u].w * (_1321 - _1226)) + _1226);
    float _1358 = fma(_1337, cbSceneParam._m0[89u].z, fma(_1336, cbSceneParam._m0[89u].y, _1335 * cbSceneParam._m0[89u].x));
    float _1361 = fma(_1337, cbSceneParam._m0[90u].z, fma(_1336, cbSceneParam._m0[90u].y, _1335 * cbSceneParam._m0[90u].x));
    float _1364 = fma(_1337, cbSceneParam._m0[91u].z, fma(_1336, cbSceneParam._m0[91u].y, _1335 * cbSceneParam._m0[91u].x));
    uint _1371 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1375 = floatBitsToUint(cbInstanceData._m0[_1371 + 5u]);
    uint _1377 = _1375.x * 14u;
    uint _1378 = _1377 + 13u;
    float _1383 = _715 + (-1.0);
    float _1386 = (cbLight._m0[_1378].x * _1383) + 1.0;
    float _1387 = (cbLight._m0[_1378].y * _1383) + 1.0;
    uint _1388 = _1377 + 8u;
    float _1399 = cbLight._m0[_1377].x + _680;
    float _1400 = cbLight._m0[_1377].y + _681;
    float _1401 = cbLight._m0[_1377].z + _682;
    float _1405 = inversesqrt(dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401)));
    float _1409 = dot(vec3(0.0), vec3(cbLight._m0[_1377].xyz));
    float _2749 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
    float _1412 = isnan(1.0) ? _2749 : (isnan(_2749) ? 1.0 : min(_2749, 1.0));
    float _1413 = dot(vec3(0.0), vec3(_680, _681, _682));
    float _2760 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
    float _1416 = isnan(1.0) ? _2760 : (isnan(_2760) ? 1.0 : min(_2760, 1.0));
    float _1417 = dot(vec3(cbLight._m0[_1377].xyz), vec3(_1399 * _1405, _1400 * _1405, _1401 * _1405));
    float _2771 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
    float _1428 = (exp2(log2(1.0 - (isnan(1.0) ? _2771 : (isnan(_2771) ? 1.0 : min(_2771, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1434 = (0.5 / ((_1412 + 9.9999999392252902907785028219223e-09) + _1416)) * _1412;
    float _2782 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
    float _1436 = (isnan(1.0) ? _2782 : (isnan(_2782) ? 1.0 : min(_2782, 1.0))) * 0.31831014156341552734375;
    float _1438 = isnan(1.0) ? _1386 : (isnan(_1386) ? 1.0 : min(_1386, 1.0));
    uint _1448 = _1377 + 9u;
    uint _1454 = _1377 | 1u;
    float _1460 = cbLight._m0[_1454].x + _680;
    float _1461 = cbLight._m0[_1454].y + _681;
    float _1462 = cbLight._m0[_1454].z + _682;
    float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
    float _1470 = dot(vec3(0.0), vec3(cbLight._m0[_1454].xyz));
    float _2798 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
    float _1473 = isnan(1.0) ? _2798 : (isnan(_2798) ? 1.0 : min(_2798, 1.0));
    float _1474 = dot(vec3(cbLight._m0[_1454].xyz), vec3(_1460 * _1466, _1461 * _1466, _1462 * _1466));
    float _2809 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
    float _1483 = (exp2(log2(1.0 - (isnan(1.0) ? _2809 : (isnan(_2809) ? 1.0 : min(_2809, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1487 = (0.5 / ((_1473 + 9.9999999392252902907785028219223e-09) + _1416)) * _1473;
    float _2820 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
    float _1489 = (isnan(1.0) ? _2820 : (isnan(_2820) ? 1.0 : min(_2820, 1.0))) * 0.31831014156341552734375;
    float _1490 = isnan(1.0) ? _1387 : (isnan(_1387) ? 1.0 : min(_1387, 1.0));
    float _1500 = (((_1483 * cbLight._m0[_1448].x) * _1489) * _1490) + (((_1428 * cbLight._m0[_1388].x) * _1436) * _1438);
    float _1501 = (((_1483 * cbLight._m0[_1448].y) * _1489) * _1490) + (((_1428 * cbLight._m0[_1388].y) * _1436) * _1438);
    float _1502 = (((_1483 * cbLight._m0[_1448].z) * _1489) * _1490) + (((_1428 * cbLight._m0[_1388].z) * _1436) * _1438);
    float _1618;
    float _1620;
    float _1622;
    if (_1375.y == 0u)
    {
        float _1558 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1559 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1558;
        float _1560 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1558;
        float _1561 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1558;
        uvec4 _1573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1574 = _1573.x;
        uint _1585 = uint((float(_1573.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _1574))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _1574)));
        float _1595 = (log2(_1561 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1596 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        uint _1599 = uint(isnan(14.0) ? _1596 : (isnan(_1596) ? 14.0 : min(_1596, 14.0)));
        uvec4 _1604 = texelFetch(g_lightClusterGridBuffer, int(((_1599 << 2u) + (_1585 << 6u)) >> 2u));
        uint _1605 = _1604.x;
        uint _1606 = _1573.z;
        float _1705;
        float _1707;
        float _1709;
        if (((((1u << ((_1606 >> 4u) & 15u)) + 4294967295u) & _1605) == 0u) || ((_1606 & 240u) == 0u))
        {
            _1705 = 0.0;
            _1707 = 0.0;
            _1709 = 0.0;
        }
        else
        {
            float _1706;
            float _1708;
            float _1710;
            float _1881 = 0.0;
            float _1882 = 0.0;
            float _1883 = 0.0;
            uint _1884 = 0u;
            uint _1893;
            bool _1894;
            for (;;)
            {
                _1893 = texelFetch(g_lightClassification, int((((_1599 << 5u) + (_1585 << 9u)) + (_1884 << 2u)) >> 2u)).x;
                _1894 = _1893 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                if (_1894)
                {
                    frontier_phi_63_pred = _1883;
                    frontier_phi_63_pred_1 = _1882;
                    frontier_phi_63_pred_2 = _1881;
                }
                else
                {
                    float _2068;
                    float _2069;
                    float _2070;
                    uint _2071;
                    _2068 = _1881;
                    _2069 = _1882;
                    _2070 = _1883;
                    _2071 = _1893;
                    float _1975;
                    float _1976;
                    float _1977;
                    for (;;)
                    {
                        uint _2075 = uint(findLSB(_2071)) + (_1884 << 5u);
                        uint _2072 = (_2071 + 4294967295u) & _2071;
                        uint _2077 = _2075 * 48u;
                        vec4 _2091 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2077)).x, texelFetch(g_PointLightRenderingBuffer, int(_2077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2077 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2077 + 3u)).x));
                        uint _2108 = (_2075 * 48u) + 8u;
                        vec3 _2119 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2108)).x, texelFetch(g_PointLightRenderingBuffer, int(_2108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2108 + 2u)).x));
                        float _2123 = _2091.x - _1559;
                        float _2124 = _2091.y - _1560;
                        float _2125 = _2091.z - _1561;
                        float _2126 = dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125));
                        float _2129 = inversesqrt(_2126);
                        float _2138 = 1.0 - (_2126 * _2091.w);
                        float _2846 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
                        float _2140 = sqrt(_2126) * uintBitsToFloat(uvec4(_2098, _2099, _2100, texelFetch(g_PointLightRenderingBuffer, int(((_2075 * 48u) + 4u) + 3u)).x)).w;
                        float _2143 = 1.39999997615814208984375 / (_2140 + 1.39999997615814208984375);
                        float _2144 = _2143 * _2143;
                        float _2147 = ((1.0 - _2144) * dot(vec3(0.0), vec3(_2129 * _2123, _2129 * _2124, _2129 * _2125))) + _2144;
                        float _2149 = (-0.0) - _1559;
                        float _2150 = (-0.0) - _1560;
                        float _2151 = (-0.0) - _1561;
                        float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
                        float _2159 = dot(vec3(0.0), vec3(_2155 * _2149, _2155 * _2150, _2155 * _2151));
                        float _2857 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
                        float _2868 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
                        float _2163 = isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0));
                        float _2167 = (0.5 / (((isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0))) + 9.9999999392252902907785028219223e-09) + _2163)) * _2163;
                        float _2879 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
                        float _2176 = (((isnan(1.0) ? _2879 : (isnan(_2879) ? 1.0 : min(_2879, 1.0))) * 3.1415927410125732421875) / (((_2140 * _2140) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0)));
                        _1975 = (_2176 * _2119.x) + _2068;
                        _1976 = (_2176 * _2119.y) + _2069;
                        _1977 = (_2176 * _2119.z) + _2070;
                        if (_2072 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2068 = _1975;
                            _2069 = _1976;
                            _2070 = _1977;
                            _2071 = _2072;
                        }
                    }
                    frontier_phi_63_pred = _1977;
                    frontier_phi_63_pred_1 = _1976;
                    frontier_phi_63_pred_2 = _1975;
                }
                _1710 = frontier_phi_63_pred;
                _1708 = frontier_phi_63_pred_1;
                _1706 = frontier_phi_63_pred_2;
                uint _1885 = _1884 + 1u;
                if (_1885 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1881 = _1706;
                    _1882 = _1708;
                    _1883 = _1710;
                    _1884 = _1885;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1705 = _1706;
            _1707 = _1708;
            _1709 = _1710;
        }
        uvec4 _1713 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1714 = _1713.z;
        uint _1716 = (_1714 >> 8u) & 15u;
        float _1861;
        float _1863;
        float _1865;
        if (((4294967295u << _1716) & _1605) == 0u)
        {
            _1861 = _1705;
            _1863 = _1707;
            _1865 = _1709;
        }
        else
        {
            float _1877 = inversesqrt(dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1716 < ((_1714 >> 12u) & 15u))
            {
                float _1862;
                float _1864;
                float _1866;
                float _2054 = _1705;
                float _2055 = _1707;
                float _2056 = _1709;
                uint _2057 = _1716;
                uint _2066;
                bool _2067;
                for (;;)
                {
                    _2066 = texelFetch(g_lightClassification, int((((_1599 << 5u) + (_1585 << 9u)) + (_2057 << 2u)) >> 2u)).x;
                    _2067 = _2066 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    if (_2067)
                    {
                        frontier_phi_77_pred = _2055;
                        frontier_phi_77_pred_1 = _2054;
                        frontier_phi_77_pred_2 = _2056;
                    }
                    else
                    {
                        float _2211;
                        float _2212;
                        float _2213;
                        float _2432;
                        float _2433;
                        float _2434;
                        float _2221 = _2054;
                        float _2222 = _2055;
                        float _2223 = _2056;
                        uint _2224 = _2066;
                        uint _2225;
                        uint _2235;
                        vec4 _2250;
                        float _2251;
                        vec3 _2263;
                        vec4 _2278;
                        vec4 _2293;
                        float _2339;
                        bool _2340;
                        for (;;)
                        {
                            _2235 = ((_2057 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2224));
                            _2225 = (_2224 + 4294967295u) & _2224;
                            uint _2237 = _2235 * 40u;
                            _2250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2237 + 3u)).x));
                            _2251 = _2250.w;
                            uint _2253 = (_2235 * 40u) + 8u;
                            _2263 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2253 + 2u)).x));
                            uint _2265 = (_2235 * 40u) + 16u;
                            _2278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2265 + 3u)).x));
                            uint _2280 = (_2235 * 40u) + 20u;
                            _2293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2280 + 3u)).x));
                            uint _2295 = (_2235 * 40u) + 24u;
                            vec4 _2308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2295 + 3u)).x));
                            uint _2314 = (_2235 * 40u) + 28u;
                            vec4 _2327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2314 + 3u)).x));
                            _2339 = fma(_1561, _2327.z, fma(_1560, _2327.y, _2327.x * _1559)) + _2327.w;
                            _2340 = !((fma(_1561, _2308.z, fma(_1560, _2308.y, _2308.x * _1559)) + _2308.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            if (_2340)
                            {
                                float _2374 = _2250.x - _1559;
                                float _2375 = _2250.y - _1560;
                                float _2376 = _2250.z - _1561;
                                float _2377 = dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376));
                                float _2380 = inversesqrt(_2377);
                                float _2387 = 1.0 - (_2377 / (_2251 * _2251));
                                float _2890 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
                                float _2389 = sqrt(_2377) * uintBitsToFloat(uvec4(_2343, _2344, _2345, texelFetch(g_SpotLightRenderingBuffer, int(((_2235 * 40u) + 4u) + 3u)).x)).w;
                                float _2391 = 1.39999997615814208984375 / (_2389 + 1.39999997615814208984375);
                                float _2392 = _2391 * _2391;
                                float _2395 = (fma(_1561, _2278.z, fma(_1560, _2278.y, _2278.x * _1559)) + _2278.w) / _2339;
                                float _2396 = (fma(_1561, _2293.z, fma(_1560, _2293.y, _2293.x * _1559)) + _2293.w) / _2339;
                                float _2400 = 1.0 - dot(vec2(_2395, _2396), vec2(_2395, _2396));
                                float _2901 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
                                float _2408 = dot(vec3(0.0), vec3((-0.0) - (_1559 * _1877), (-0.0) - (_1560 * _1877), (-0.0) - (_1561 * _1877)));
                                float _2912 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
                                float _2416 = ((1.0 - _2392) * dot(vec3(0.0), vec3(_2380 * _2374, _2380 * _2375, _2380 * _2376))) + _2392;
                                float _2923 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
                                float _2417 = isnan(1.0) ? _2923 : (isnan(_2923) ? 1.0 : min(_2923, 1.0));
                                float _2421 = (0.5 / (((isnan(1.0) ? _2912 : (isnan(_2912) ? 1.0 : min(_2912, 1.0))) + 9.9999999392252902907785028219223e-09) + _2417)) * _2417;
                                float _2934 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
                                float _2428 = ((isnan(1.0) ? _2901 : (isnan(_2901) ? 1.0 : min(_2901, 1.0))) * (isnan(1.0) ? _2890 : (isnan(_2890) ? 1.0 : min(_2890, 1.0)))) * (((isnan(1.0) ? _2934 : (isnan(_2934) ? 1.0 : min(_2934, 1.0))) * 3.1415927410125732421875) / (((_2389 * _2389) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2428 * _2263.z;
                                frontier_phi_83_pred_1 = _2428 * _2263.y;
                                frontier_phi_83_pred_2 = _2428 * _2263.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                            }
                            _2434 = frontier_phi_83_pred;
                            _2433 = frontier_phi_83_pred_1;
                            _2432 = frontier_phi_83_pred_2;
                            _2211 = _2432 + _2221;
                            _2212 = _2433 + _2222;
                            _2213 = _2434 + _2223;
                            if (_2225 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2221 = _2211;
                                _2222 = _2212;
                                _2223 = _2213;
                                _2224 = _2225;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2212;
                        frontier_phi_77_pred_1 = _2211;
                        frontier_phi_77_pred_2 = _2213;
                    }
                    _1864 = frontier_phi_77_pred;
                    _1862 = frontier_phi_77_pred_1;
                    _1866 = frontier_phi_77_pred_2;
                    uint _2058 = _2057 + 1u;
                    if (_2058 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2054 = _1862;
                        _2055 = _1864;
                        _2056 = _1866;
                        _2057 = _2058;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1866;
                frontier_phi_52_53_ladder_1 = _1864;
                frontier_phi_52_53_ladder_2 = _1862;
            }
            else
            {
                frontier_phi_52_53_ladder = _1709;
                frontier_phi_52_53_ladder_1 = _1707;
                frontier_phi_52_53_ladder_2 = _1705;
            }
            _1861 = frontier_phi_52_53_ladder_2;
            _1863 = frontier_phi_52_53_ladder_1;
            _1865 = frontier_phi_52_53_ladder;
        }
        float _1870 = isnan(1.0) ? _715 : (isnan(_715) ? 1.0 : min(_715, 1.0));
        _1618 = ((_1861 * 0.039999999105930328369140625) * _1870) + _1500;
        _1620 = ((_1863 * 0.039999999105930328369140625) * _1870) + _1501;
        _1622 = ((_1865 * 0.039999999105930328369140625) * _1870) + _1502;
    }
    else
    {
        _1618 = _1500;
        _1620 = _1501;
        _1622 = _1502;
    }
    uint _1628 = _1371 + 9u;
    uint _1629 = _1628 + uint(cbMatDynParam._m0[0u].w);
    float _1635 = (cbSceneParam._m0[72u].y * ((_640 * ((_631 - _593) - (_631 * _604))) + _593)) * cbInstanceData._m0[_1629].x;
    float _1636 = (cbSceneParam._m0[72u].y * ((_640 * ((_632 - _594) - (_632 * _604))) + _594)) * cbInstanceData._m0[_1629].y;
    float _1637 = (((_640 * ((_633 - _595) - (_633 * _604))) + _595) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1629].z;
    float _1644 = _1635 + ((_1618 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _1135)) * cbPerFrame._m0[3u].x);
    float _1645 = _1636 + ((_1620 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _1135)) * cbPerFrame._m0[3u].x);
    float _1646 = _1637 + ((_1622 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _1135)) * cbPerFrame._m0[3u].x);
    float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _1655 = cbMtdParam._m0[2u].x * _1635;
    float _1656 = cbMtdParam._m0[2u].y * _1636;
    float _1657 = cbMtdParam._m0[2u].z * _1637;
    float _2965 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1659 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
    uint _1660 = _1371 + 6u;
    float _1668 = _702 / cbSceneParam._m0[86u].x;
    float _1669 = _703 / cbSceneParam._m0[86u].y;
    vec4 _1683 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1668, _1669, (log2((isnan(cbSceneParam._m0[77u].w) ? _675 : (isnan(_675) ? cbSceneParam._m0[77u].w : min(_675, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1685 = _1683.x;
    float _1686 = _1683.y;
    float _1687 = _1683.z;
    float _1688 = _1683.w;
    float _1762;
    float _1764;
    float _1766;
    float _1768;
    if (_675 > cbSceneParam._m0[78u].w)
    {
        float _1724 = isnan(_675) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _675 : min(cbSceneParam._m0[80u].w, _675));
        float _1725 = _1724 / _675;
        float _1736 = _1725 * _271;
        float _1737 = _272 * _1725;
        float _1738 = (-0.0) - _1737;
        float _1739 = _1725 * _273;
        float _1741 = (cbSceneParam._m0[77u].w * _1738) / _1724;
        float _1742 = _1741 + cbSceneParam._m0[79u].w;
        float _1743 = cbSceneParam._m0[79u].w - _1737;
        float _1749 = sqrt(((_1736 * _1736) + (_1737 * _1737)) + (_1739 * _1739));
        float _1752 = (1.0 - (cbSceneParam._m0[77u].w / _1724)) * _1749;
        float _1758 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1760 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1985;
        if (abs((_1738 - _1741) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1985 = ((((_1742 > 0.0) ? exp2(_1758 * _1742) : (2.0 - exp2(_1760 * _1742))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1752;
        }
        else
        {
            float _1907 = 1.0 / cbSceneParam._m0[80u].x;
            float _1908 = isnan(_1743) ? _1742 : (isnan(_1742) ? _1743 : max(_1742, _1743));
            float _1909 = isnan(_1743) ? _1742 : (isnan(_1742) ? _1743 : min(_1742, _1743));
            float _1918 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : min(_1908, 0.0));
            float _1919 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : min(_1909, 0.0));
            _1985 = ((abs(_1749 / _1738) * cbSceneParam._m0[80u].y) * ((((_1918 - _1919) * 2.0) - ((exp2(_1758 * (isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)))) - exp2(_1758 * (isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))))) * _1907)) - ((exp2(_1760 * _1918) - exp2(_1760 * _1919)) * _1907))) + (_1752 * cbSceneParam._m0[80u].z);
        }
        vec4 _1987 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1668, _1669, 1.0), 0.0);
        float _1996 = exp2((_1985 * (-1.44269502162933349609375)) * (1.0 - _1987.w));
        float _1997 = log2(_1996);
        float _2013 = log2(_1688);
        _1762 = (exp2(_2013 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1997 * cbSceneParam._m0[78u].x)) * _1987.x) / cbSceneParam._m0[78u].x)) + _1685;
        _1764 = (exp2(_2013 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1997 * cbSceneParam._m0[78u].y)) * _1987.y) / cbSceneParam._m0[78u].y)) + _1686;
        _1766 = (exp2(_2013 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1997 * cbSceneParam._m0[78u].z)) * _1987.z) / cbSceneParam._m0[78u].z)) + _1687;
        _1768 = _1996 * _1688;
    }
    else
    {
        _1762 = _1685;
        _1764 = _1686;
        _1766 = _1687;
        _1768 = _1688;
    }
    bool _2023;
    vec4 _1777;
    vec4 _1800;
    float _1802;
    float _1806;
    float _1807;
    float _1808;
    float _1811;
    float _1814;
    float _1817;
    float _1818;
    bool _1829;
    for (;;)
    {
        _1777 = cbMatDynParam._m0[0u];
        float _1779 = roundEven(_1777.y);
        bool _1780 = _1779 == 3.0;
        float _1782 = log2(_1768);
        float _1786 = exp2(_1782 * cbSceneParam._m0[78u].x);
        float _1787 = exp2(_1782 * cbSceneParam._m0[78u].y);
        float _1788 = exp2(_1782 * cbSceneParam._m0[78u].z);
        float _1789 = _1786 * _1647;
        float _1790 = _1787 * _1648;
        float _1791 = _1788 * _1649;
        float _1798 = _689 + (-0.5);
        _1800 = cbMtdParam._m0[1u];
        _1802 = _1800.y * _1798;
        float _1805 = (_1779 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1806 = _1805 * (_1780 ? _1789 : (_1789 + (cbSceneParam._m0[72u].w * _1762)));
        _1807 = _1805 * (_1780 ? _1790 : (_1790 + (cbSceneParam._m0[72u].w * _1764)));
        _1808 = _1805 * (_1780 ? _1791 : (_1791 + (cbSceneParam._m0[72u].w * _1766)));
        _1811 = ((_1655 * _1659) * _1786) * _1805;
        _1814 = ((_1656 * _1659) * _1787) * _1805;
        _1817 = ((_1657 * _1659) * _1788) * _1805;
        _1818 = _1798 * 0.999000012874603271484375;
        _1829 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1829)
        {
            if ((cbInstanceData._m0[_1371 + 7u].x + _1818) < 0.5)
            {
                _2023 = true;
                break;
            }
        }
        uint _1942 = _1628 + uint(_1777.w);
        if ((cbInstanceData._m0[_1942].w < 1.0) && ((cbInstanceData._m0[_1942].w + _1818) < 0.5))
        {
            _2023 = true;
            break;
        }
        if ((_1802 + 1.0) < _1800.x)
        {
            _2023 = true;
            break;
        }
        _2023 = false;
        break;
    }
    float _2181;
    if (_2023)
    {
        discard_state = true;
        _2181 = 0.0;
    }
    else
    {
        _2181 = cbInstanceData._m0[_1660].w;
    }
    SV_Target.x = _1806;
    SV_Target.y = _1807;
    SV_Target.z = _1808;
    SV_Target.w = _2181;
    SV_Target_1.x = _1811;
    SV_Target_1.y = _1814;
    SV_Target_1.z = _1817;
    SV_Target_1.w = cbInstanceData._m0[_1660].w;
    discard_exit();
}


