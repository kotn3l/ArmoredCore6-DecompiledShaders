#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1274;
float _3417;
float _3418;
float _3419;
float _3420;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _296 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _299 = _296.x;
    vec4 _317 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _299) + cbMtdParam._m0[12u].x) * _317.x;
    float _336 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _299) + cbMtdParam._m0[12u].y) * _317.y;
    float _338 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _299) + cbMtdParam._m0[12u].z) * _317.z;
    vec4 _356 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _395 = cbMtdParam._m0[27u].w + _280;
    float _396 = cbMtdParam._m0[28u].x + _281;
    float _397 = cbMtdParam._m0[28u].y + _282;
    float _411 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_210, _211, _212));
    float _412 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_224, _225, _226));
    float _413 = (-0.0) - dot(vec3(_395, _396, _397), vec3((-0.0) - _217, (-0.0) - _218, (-0.0) - _219));
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _420 = _417 * _413;
    float _423 = ((_417 * _411) + ((cbMtdParam._m0[25u].w * _299) * ((_356.x * 2.0) + (-1.0)))) * cbMtdParam._m0[24u].x;
    float _424 = ((_417 * _412) + ((cbMtdParam._m0[26u].x * _299) * ((_356.y * 2.0) + (-1.0)))) * cbMtdParam._m0[23u].w;
    float _425 = fract(TEXCOORD.x);
    float _426 = fract(TEXCOORD.y);
    float _432;
    if (_423 > 0.0)
    {
        _432 = (1.0 - _425) / _423;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_423 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _425) / _423;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _432 = frontier_phi_3_2_ladder;
    }
    float _440;
    if (_424 > 0.0)
    {
        _440 = (1.0 - _426) / _424;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_424 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _426) / _424;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _440 = frontier_phi_7_6_ladder;
    }
    float _444 = (_420 > 0.0) ? (cbMtdParam._m0[17u].x / _420) : 5000.0;
    float _445 = isnan(_440) ? _432 : (isnan(_432) ? _440 : min(_432, _440));
    float _446 = isnan(_444) ? _445 : (isnan(_445) ? _444 : min(_445, _444));
    float _450 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _457 = ((_446 * _420) + _450) / _450;
    vec4 _482 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_425 + (-0.5)) + (_446 * _423)) / _457) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_426 + (-0.5)) + (_446 * _424)) / _457) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _495 = (_482.x * _299) * cbMtdParam._m0[9u].x;
    float _496 = (_482.y * _299) * cbMtdParam._m0[9u].y;
    float _497 = (_482.z * _299) * cbMtdParam._m0[9u].z;
    vec4 _510 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _514 = _510.z;
    float _517 = (_510.x * 2.0) + (-1.0);
    float _518 = (_510.y * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3439 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = sqrt(1.0 - (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))));
    float _536 = (cbMtdParam._m0[19u].y * _495) * cbMtdParam._m0[16u].x;
    float _538 = (cbMtdParam._m0[19u].y * _496) * cbMtdParam._m0[16u].y;
    float _540 = (cbMtdParam._m0[19u].y * _497) * cbMtdParam._m0[16u].z;
    vec4 _564 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _569 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _575 = ((_564.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _577 = (-0.0) - (cbMtdParam._m0[21u].x * ((_564.x * 0.5) + (-0.25)));
    float _578 = fract(_569);
    float _580 = fract(_569 + 0.5);
    vec4 _607 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_578 * _577) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_575 * _578) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _609 = _607.x;
    float _615 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_580 * _577) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_575 * _580) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _609) * abs((_578 * 2.0) + (-1.0))) + _609;
    float _621 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _625 = fract(abs(_621));
    float _635 = sin(cbMtdParam._m0[21u].z);
    float _636 = cos(cbMtdParam._m0[21u].z);
    float _637 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _638 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _663 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_638, (-0.0) - _635, _636 * _637) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_638, _636, _637 * _635) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_621 >= ((-0.0) - _621)) ? _625 : ((-0.0) - _625)) * cbMtdParam._m0[18u].z) - _615)) + cbMtdParam._m0[18u].w;
    float _664 = ceil(_663);
    float _3450 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _685 = ((((cbMtdParam._m0[21u].w * _495) * cbMtdParam._m0[15u].x) - _536) * _665) + _536;
    float _686 = ((((cbMtdParam._m0[21u].w * _496) * cbMtdParam._m0[15u].y) - _538) * _665) + _538;
    float _687 = ((((cbMtdParam._m0[21u].w * _497) * cbMtdParam._m0[15u].z) - _540) * _665) + _540;
    float _691 = abs(cbMtdParam._m0[20u].w * _663);
    float _695 = (((_691 * cbMtdParam._m0[18u].y) - _615) * _691) + _615;
    float _3461 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _696 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    vec4 _708 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _723 = (cbMtdParam._m0[14u].x * _708.x) * cbMtdParam._m0[19u].x;
    float _724 = (cbMtdParam._m0[14u].y * _708.y) * cbMtdParam._m0[19u].x;
    float _725 = (cbMtdParam._m0[14u].z * _708.z) * cbMtdParam._m0[19u].x;
    float _732 = exp2(log2(_696) * cbMtdParam._m0[20u].x);
    float _754 = fma(_524, _217, fma(_518, _224, _517 * _210));
    float _757 = fma(_524, _218, fma(_518, _225, _517 * _211));
    float _760 = fma(_524, _219, fma(_518, _226, _517 * _212));
    float _764 = inversesqrt(dot(vec3(_754, _757, _760), vec3(_754, _757, _760)));
    float _765 = _764 * _754;
    float _766 = _764 * _757;
    float _767 = _764 * _760;
    float _3472 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _768 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3494 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3505 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _787 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _791 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _792 = _280 * _791;
    float _793 = _281 * _791;
    float _794 = _282 * _791;
    vec4 _799 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _801 = _799.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _956 = sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282));
        float _962 = (cbMatDynParam._m0[5u].x * _956) + cbMatDynParam._m0[5u].y;
        float _3516 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _967 = (cbMatDynParam._m0[5u].z * _956) + cbMatDynParam._m0[5u].w;
        float _3527 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) - _963)) + _963) < ((_801 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _813 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _814 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _832 = fma(_767, cbSceneParam._m0[5u].z, fma(_766, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _765));
    float _835 = fma(_767, cbSceneParam._m0[6u].z, fma(_766, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _765));
    float _838 = fma(_767, cbSceneParam._m0[7u].z, fma(_766, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _765));
    uint _851 = uint(roundEven(NORMAL.w)) * 13u;
    uint _852 = _851 + 9u;
    uint _853 = _852 + uint(cbMatDynParam._m0[0u].w);
    float _859 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * cbInstanceData._m0[_853].x;
    float _860 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_853].y;
    float _861 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_853].z;
    float _3538 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _3549 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    vec4 _873 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _813, cbSceneParam._m0[86u].y * _814));
    float _876 = _873.x * TEXCOORD_4;
    float _877 = dot(vec3(_765, _766, _767), vec3(_792, _793, _794));
    float _880 = _877 * 2.0;
    float _884 = (_880 * _765) - _792;
    float _885 = (_880 * _766) - _793;
    float _886 = (_880 * _767) - _794;
    float _890 = abs(dot(vec3(_792, _793, _794), vec3(_765, _766, _767)));
    float _3571 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _892 = sqrt(_768);
    float _905 = exp2((_892 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_892 * 3.0));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1273;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1000 = fma(_945, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937));
        float _1004 = fma(_945, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937));
        float _1008 = fma(_945, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937));
        float _1031 = _937 + _765;
        float _1032 = _941 + _766;
        float _1033 = _945 + _767;
        float _1043 = fma(_1033, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031)) - _1000;
        float _1044 = fma(_1033, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031)) - _1004;
        float _1045 = fma(_1033, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031)) - _1008;
        float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
        float _1062 = ((_1049 * _1043) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1000 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1049 * _1044) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1004 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1049 * _1045) / cbModelParam._m0[34u].z) + ((((((_1008 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        float _1101 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1067.x + (-0.5));
        float _1103 = _1101 * (_1067.y + (-0.5));
        float _1104 = _1101 * (_1067.z + (-0.5));
        float _1111 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1074.x + (-0.5));
        float _1113 = _1111 * (_1074.y + (-0.5));
        float _1114 = _1111 * (_1074.z + (-0.5));
        float _1121 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1081.x + (-0.5));
        float _1123 = _1121 * (_1081.y + (-0.5));
        float _1124 = _1121 * (_1081.z + (-0.5));
        float _1131 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1088.x + (-0.5));
        float _1133 = _1131 * (_1088.y + (-0.5));
        float _1134 = _1131 * (_1088.z + (-0.5));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = _1102 * 0.5;
        float _1139 = _1112 * 0.5;
        float _1140 = _1122 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1155 = (dot(vec3(_765, _766, _767), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1165 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3619 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1167 + 1.0))) + _1172) * _1135;
        float _1182 = _1103 * 0.5;
        float _1183 = _1113 * 0.5;
        float _1184 = _1123 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_765, _766, _767), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3652 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1209 + 1.0))) + _1214) * _1136;
        float _1224 = _1104 * 0.5;
        float _1225 = _1114 * 0.5;
        float _1226 = _1124 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_765, _766, _767), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3685 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1251 + 1.0))) + _1256) * _1137;
        _1273 = _1104;
        _1275 = _1103;
        _1276 = _1102;
        _1277 = _1114;
        _1278 = _1113;
        _1279 = _1112;
        _1280 = _1124;
        _1281 = _1123;
        _1282 = _1122;
        _1283 = _1137;
        _1284 = _1136;
        _1285 = _1135;
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
    }
    else
    {
        _1273 = _1274;
        _1275 = _1274;
        _1276 = _1274;
        _1277 = _1274;
        _1278 = _1274;
        _1279 = _1274;
        _1280 = _1274;
        _1281 = _1274;
        _1282 = _1274;
        _1283 = _1274;
        _1284 = _1274;
        _1285 = _1274;
        _1286 = 0.0;
        _1287 = 0.0;
        _1288 = 0.0;
    }
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1316 = fma(_945, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _937));
        float _1320 = fma(_945, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _937));
        float _1324 = fma(_945, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _937));
        float _1347 = _937 + _765;
        float _1348 = _941 + _766;
        float _1349 = _945 + _767;
        float _1359 = fma(_1349, cbModelParam._m0[30u].z, fma(_1348, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1347)) - _1316;
        float _1360 = fma(_1349, cbModelParam._m0[31u].z, fma(_1348, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1347)) - _1320;
        float _1361 = fma(_1349, cbModelParam._m0[32u].z, fma(_1348, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1347)) - _1324;
        float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
        float _1378 = ((_1365 * _1359) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1316 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1365 * _1360) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1320 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1365 * _1361) / cbModelParam._m0[35u].z) + ((((((_1324 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        float _1415 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1382.x + (-0.5));
        float _1417 = _1415 * (_1382.y + (-0.5));
        float _1418 = _1415 * (_1382.z + (-0.5));
        float _1425 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1389.x + (-0.5));
        float _1427 = _1425 * (_1389.y + (-0.5));
        float _1428 = _1425 * (_1389.z + (-0.5));
        float _1435 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1396.x + (-0.5));
        float _1437 = _1435 * (_1396.y + (-0.5));
        float _1438 = _1435 * (_1396.z + (-0.5));
        float _1445 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1403.x + (-0.5));
        float _1447 = _1445 * (_1403.y + (-0.5));
        float _1448 = _1445 * (_1403.z + (-0.5));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = _1416 * 0.5;
        float _1453 = _1426 * 0.5;
        float _1454 = _1436 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_765, _766, _767), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _3748 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1479 + 1.0))) + _1484) * _1449;
        float _1494 = _1417 * 0.5;
        float _1495 = _1427 * 0.5;
        float _1496 = _1437 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_765, _766, _767), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _3781 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1521 + 1.0))) + _1526) * _1450;
        float _1536 = _1418 * 0.5;
        float _1537 = _1428 * 0.5;
        float _1538 = _1438 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_765, _766, _767), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _3814 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1563 + 1.0))) + _1568) * _1451;
        _1585 = _1418;
        _1586 = _1417;
        _1587 = _1416;
        _1588 = _1428;
        _1589 = _1427;
        _1590 = _1426;
        _1591 = _1438;
        _1592 = _1437;
        _1593 = _1436;
        _1594 = _1451;
        _1595 = _1450;
        _1596 = _1449;
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
    }
    else
    {
        _1585 = _1274;
        _1586 = _1274;
        _1587 = _1274;
        _1588 = _1274;
        _1589 = _1274;
        _1590 = _1274;
        _1591 = _1274;
        _1592 = _1274;
        _1593 = _1274;
        _1594 = _1274;
        _1595 = _1274;
        _1596 = _1274;
        _1597 = 0.0;
        _1598 = 0.0;
        _1599 = 0.0;
    }
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1286)) + _1286;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1287)) + _1287;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1288)) + _1288;
    float _1632 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1609));
    float _1653 = _884 * 0.5;
    float _1654 = _885 * 0.5;
    float _1655 = _886 * 0.5;
    float _1656 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1659 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1662 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1696;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1669 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1273, _1277, _1280, _1283));
        float _1673 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1677 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1276, _1279, _1282, _1285));
        float _1684 = dot(vec4(cbModelParam._m0[39u]), vec4(_1653, _1654, _1655, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1707;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1698 = dot(vec4(cbModelParam._m0[40u]), vec4(_1653, _1654, _1655, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1711 = (_1707 * cbModelParam._m0[1u].x) + (_1696 * (1.0 - cbModelParam._m0[1u].x));
    float _1721 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _768);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1721 : min(cbModelParam._m0[25u].z, _1721));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1769 = fma(_945, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937)) + cbModelParam._m0[13u].w;
        float _1773 = fma(_945, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937)) + cbModelParam._m0[14u].w;
        float _1777 = fma(_945, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937)) + cbModelParam._m0[15u].w;
        float _1780 = fma(_886, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884));
        float _1783 = fma(_886, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884));
        float _1786 = fma(_886, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884));
        float _1814;
        if (_1780 > 0.0)
        {
            _1814 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1814 = frontier_phi_25_23_ladder;
        }
        float _2159;
        if (_1783 > 0.0)
        {
            _2159 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2159 = frontier_phi_34_30_ladder;
        }
        float _2501;
        if (_1786 > 0.0)
        {
            _2501 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2501 = frontier_phi_48_41_ladder;
        }
        float _2503 = isnan(_2159) ? _1814 : (isnan(_1814) ? _2159 : min(_1814, _2159));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _1780) + _1769;
        float _2509 = (_2504 * _1783) + _1773;
        float _2510 = (_2504 * _1786) + _1777;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2511;
        float _2514 = _2511 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2510 > _2514) || ((_2510 < _2512) || ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 < _2512) || (_2508 > _2514))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2510, cbModelParam._m0[9u].z, fma(_2509, cbModelParam._m0[9u].y, _2508 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2510, cbModelParam._m0[10u].z, fma(_2509, cbModelParam._m0[10u].y, _2508 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2510, cbModelParam._m0[11u].z, fma(_2509, cbModelParam._m0[11u].y, _2508 * cbModelParam._m0[11u].x))), _1722);
            frontier_phi_24_48_ladder = _2652.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2652.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2652.x * cbModelParam._m0[1u].y;
        }
        _1802 = frontier_phi_24_48_ladder_2;
        _1804 = frontier_phi_24_48_ladder_1;
        _1806 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_884, _885, _886), _1722);
        _1802 = _1790.x * cbModelParam._m0[1u].y;
        _1804 = _1790.y * cbModelParam._m0[1u].y;
        _1806 = _1790.z * cbModelParam._m0[1u].y;
    }
    float _1810 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _768);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1810 : min(cbModelParam._m0[25u].w, _1810));
    float _1899;
    float _1901;
    float _1903;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1863 = fma(_945, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937)) + cbModelParam._m0[21u].w;
        float _1867 = fma(_945, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937)) + cbModelParam._m0[22u].w;
        float _1871 = fma(_945, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937)) + cbModelParam._m0[23u].w;
        float _1874 = fma(_886, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884));
        float _1877 = fma(_886, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884));
        float _1880 = fma(_886, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884));
        float _2164;
        if (_1874 > 0.0)
        {
            _2164 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2164 = frontier_phi_36_32_ladder;
        }
        float _2527;
        if (_1877 > 0.0)
        {
            _2527 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2527 = frontier_phi_50_43_ladder;
        }
        float _2717;
        if (_1880 > 0.0)
        {
            _2717 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2717 = frontier_phi_68_61_ladder;
        }
        float _2719 = isnan(_2527) ? _2164 : (isnan(_2164) ? _2527 : min(_2164, _2527));
        float _2720 = isnan(_2717) ? _2719 : (isnan(_2719) ? _2717 : min(_2719, _2717));
        float _2724 = (_2720 * _1874) + _1863;
        float _2725 = (_2720 * _1877) + _1867;
        float _2726 = (_2720 * _1880) + _1871;
        float _2727 = _2720 * 9.9999997473787516355514526367188e-05;
        float _2728 = (-1.0) - _2727;
        float _2730 = _2727 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2726 > _2730) || ((_2726 < _2728) || ((_2725 > _2730) || ((_2725 < _2728) || ((_2724 < _2728) || (_2724 > _2730))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2726, cbModelParam._m0[17u].z, fma(_2725, cbModelParam._m0[17u].y, _2724 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2726, cbModelParam._m0[18u].z, fma(_2725, cbModelParam._m0[18u].y, _2724 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2726, cbModelParam._m0[19u].z, fma(_2725, cbModelParam._m0[19u].y, _2724 * cbModelParam._m0[19u].x))), _1811);
            frontier_phi_33_68_ladder = _2968.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2968.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2968.x * cbModelParam._m0[1u].z;
        }
        _1899 = frontier_phi_33_68_ladder_2;
        _1901 = frontier_phi_33_68_ladder;
        _1903 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1883 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_884, _885, _886), _1811);
        _1899 = _1883.x * cbModelParam._m0[1u].z;
        _1901 = _1883.y * cbModelParam._m0[1u].z;
        _1903 = _1883.z * cbModelParam._m0[1u].z;
    }
    float _1915 = ((((1.0 - _905) * ((_892 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_905 * _892)) * _876;
    float _1916 = _1915 * ((cbModelParam._m0[1u].w * (_1899 - _1802)) + _1802);
    float _1917 = _1915 * ((cbModelParam._m0[1u].w * (_1901 - _1804)) + _1804);
    float _1918 = _1915 * ((cbModelParam._m0[1u].w * (_1903 - _1806)) + _1806);
    float _1921 = fma(_1918, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1916 * cbSceneParam._m0[89u].x));
    float _1924 = fma(_1918, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1916 * cbSceneParam._m0[90u].x));
    float _1927 = fma(_1918, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, _1916 * cbSceneParam._m0[91u].x));
    uvec4 _1937 = floatBitsToUint(cbInstanceData._m0[_851 + 5u]);
    uint _1939 = _1937.x * 14u;
    uint _1940 = _1939 + 13u;
    float _1945 = _876 + (-1.0);
    float _1948 = (cbLight._m0[_1940].x * _1945) + 1.0;
    float _1949 = (cbLight._m0[_1940].y * _1945) + 1.0;
    uint _1950 = _1939 + 5u;
    float _1956 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1960 = _1939 + 4u;
    float _1966 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1970 = _1939 | 1u;
    float _1981 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_765, _766, _767));
    float _1984 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_765, _766, _767));
    float _3950 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _3961 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1989 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.3183098733425140380859375;
    float _1991 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.3183098733425140380859375;
    float _1998 = ((cbLight._m0[_1950].x * _1956) * _1991) + ((cbLight._m0[_1960].x * _1966) * _1989);
    float _1999 = ((_1956 * cbLight._m0[_1950].y) * _1991) + ((_1966 * cbLight._m0[_1960].y) * _1989);
    float _2000 = ((_1956 * cbLight._m0[_1950].z) * _1991) + ((_1966 * cbLight._m0[_1960].z) * _1989);
    uint _2002 = _1939 + 8u;
    float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _768) * 0.949999988079071044921875);
    float _2016 = _2015 * _2015;
    float _2017 = cbLight._m0[_1939].x + _792;
    float _2018 = cbLight._m0[_1939].y + _793;
    float _2019 = cbLight._m0[_1939].z + _794;
    float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
    float _2024 = _2023 * _2017;
    float _2025 = _2023 * _2018;
    float _2026 = _2023 * _2019;
    float _2027 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_1939].xyz));
    float _3972 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _2031 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _2032 = dot(vec3(_765, _766, _767), vec3(_2024, _2025, _2026));
    float _3994 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _2036 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2024, _2025, _2026));
    float _4005 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2040 = _2016 * _2016;
    float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
    float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2056 = 1.0 - _2016;
    float _2067 = (0.5 / (((_2031 * ((_2030 * _2056) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2056) + _2016) * _2030))) * _2030;
    float _4016 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
    uint _2080 = _1939 + 9u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _768) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1970].x + _792;
    float _2094 = cbLight._m0[_1970].y + _793;
    float _2095 = cbLight._m0[_1970].z + _794;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_1970].xyz));
    float _4027 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _2107 = dot(vec3(_765, _766, _767), vec3(_2100, _2101, _2102));
    float _4038 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _2111 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2100, _2101, _2102));
    float _4049 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2115 = _2092 * _2092;
    float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
    float _2128 = (exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2129 = 1.0 - _2092;
    float _2139 = (0.5 / (((_2031 * ((_2106 * _2129) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2129) + _2092) * _2106))) * _2106;
    float _4060 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
    float _2151 = (((_2128 * cbLight._m0[_2080].x) * _2141) * _1956) + (((_2055 * cbLight._m0[_2002].x) * _2069) * _1966);
    float _2152 = (((_2128 * cbLight._m0[_2080].y) * _2141) * _1956) + (((_2055 * cbLight._m0[_2002].y) * _2069) * _1966);
    float _2153 = (((_2128 * cbLight._m0[_2080].z) * _2141) * _1956) + (((_2055 * cbLight._m0[_2002].z) * _2069) * _1966);
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    if (_1937.y == 0u)
    {
        float _2208 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2208;
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2208;
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2208;
        uvec4 _2223 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2224 = _2223.x;
        uint _2235 = uint((float(_2223.y) * floor(float(uint(cbSceneParam._m0[85u].y * _814) / _2224))) + floor(float(uint(cbSceneParam._m0[85u].x * _813) / _2224)));
        float _2245 = (log2(_2211 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2246 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        uint _2249 = uint(isnan(14.0) ? _2246 : (isnan(_2246) ? 14.0 : min(_2246, 14.0)));
        uvec4 _2254 = texelFetch(g_lightClusterGridBuffer, int(((_2249 << 2u) + (_2235 << 6u)) >> 2u));
        uint _2255 = _2254.x;
        uint _2256 = _2223.z;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        if (((((1u << ((_2256 >> 4u) & 15u)) + 4294967295u) & _2255) == 0u) || ((_2256 & 240u) == 0u))
        {
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
        }
        else
        {
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            uint _2570 = 0u;
            uint _2579;
            bool _2580;
            for (;;)
            {
                _2579 = texelFetch(g_lightClassification, int((((_2249 << 5u) + (_2235 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                _2580 = _2579 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2580)
                {
                    frontier_phi_63_pred = _2566;
                    frontier_phi_63_pred_1 = _2569;
                    frontier_phi_63_pred_2 = _2568;
                    frontier_phi_63_pred_3 = _2567;
                    frontier_phi_63_pred_4 = _2565;
                    frontier_phi_63_pred_5 = _2564;
                }
                else
                {
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    uint _2766;
                    _2760 = _2564;
                    _2761 = _2565;
                    _2762 = _2566;
                    _2763 = _2567;
                    _2764 = _2568;
                    _2765 = _2569;
                    _2766 = _2579;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    for (;;)
                    {
                        uint _2770 = uint(findLSB(_2766)) + (_2570 << 5u);
                        uint _2767 = (_2766 + 4294967295u) & _2766;
                        uint _2772 = _2770 * 48u;
                        vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 3u)).x));
                        uint _2792 = (_2770 * 48u) + 4u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2811 = (_2770 * 48u) + 8u;
                        vec3 _2822 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x));
                        float _2826 = _2786.x - _2209;
                        float _2827 = _2786.y - _2210;
                        float _2828 = _2786.z - _2211;
                        float _2829 = dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828));
                        float _2832 = inversesqrt(_2829);
                        float _2833 = _2832 * _2826;
                        float _2834 = _2832 * _2827;
                        float _2835 = _2832 * _2828;
                        float _2836 = dot(vec3(_832, _835, _838), vec3(_2833, _2834, _2835));
                        float _2841 = 1.0 - (_2829 * _2786.w);
                        float _4081 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2842 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2843 = sqrt(_2829) * _2805.w;
                        float _2846 = 1.39999997615814208984375 / (_2843 + 1.39999997615814208984375);
                        float _2847 = _2846 * _2846;
                        float _2850 = ((1.0 - _2847) * _2836) + _2847;
                        float _2853 = _2843 * _2843;
                        float _2857 = ((isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))) * _2842) / ((_2853 * 0.699999988079071044921875) + 1.0);
                        float _2861 = (-0.0) - _2209;
                        float _2862 = (-0.0) - _2210;
                        float _2863 = (-0.0) - _2211;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2878 = exp2(log2(1.0 / ((_2853 * 3.5) + 5.0)) * 0.25);
                        float _2879 = 1.0 - _892;
                        float _2886 = sqrt(1.0 - ((1.0 - (_2879 * _2879)) * (1.0 - (_2878 * _2878))));
                        float _2887 = _2886 * _2886;
                        float _2888 = _2887 * _2887;
                        float _2889 = _2868 + _2833;
                        float _2890 = _2869 + _2834;
                        float _2891 = _2870 + _2835;
                        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
                        float _2899 = dot(vec3(_832, _835, _838), vec3(_2868, _2869, _2870));
                        float _4097 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2903 = dot(vec3(_832, _835, _838), vec3(_2895 * _2889, _2895 * _2890, _2895 * _2891));
                        float _4108 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2906 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2910 = ((_2906 * _2906) * (_2888 + (-1.0))) + 1.0;
                        float _2911 = _2846 * _2887;
                        float _2912 = _2911 * _2911;
                        float _2915 = ((1.0 - _2912) * _2836) + _2912;
                        float _4119 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2917 = 1.0 - _2887;
                        float _2927 = (0.5 / (((_2916 * ((_2902 * _2917) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2916 * _2917) + _2887) * _2902))) * _2916;
                        float _4130 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2938 = (((_2888 * 3.1415927410125732421875) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) / ((_2910 * _2910) * ((_2853 * 2.1991131305694580078125) + 3.141590118408203125))) * _2842;
                        _2664 = (_2857 * _2805.x) + _2763;
                        _2665 = (_2857 * _2805.y) + _2764;
                        _2666 = (_2857 * _2805.z) + _2765;
                        _2661 = (_2938 * _2822.x) + _2760;
                        _2662 = (_2938 * _2822.y) + _2761;
                        _2663 = (_2938 * _2822.z) + _2762;
                        if (_2767 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2760 = _2661;
                            _2761 = _2662;
                            _2762 = _2663;
                            _2763 = _2664;
                            _2764 = _2665;
                            _2765 = _2666;
                            _2766 = _2767;
                        }
                    }
                    frontier_phi_63_pred = _2663;
                    frontier_phi_63_pred_1 = _2666;
                    frontier_phi_63_pred_2 = _2665;
                    frontier_phi_63_pred_3 = _2664;
                    frontier_phi_63_pred_4 = _2662;
                    frontier_phi_63_pred_5 = _2661;
                }
                _2377 = frontier_phi_63_pred;
                _2383 = frontier_phi_63_pred_1;
                _2381 = frontier_phi_63_pred_2;
                _2379 = frontier_phi_63_pred_3;
                _2375 = frontier_phi_63_pred_4;
                _2373 = frontier_phi_63_pred_5;
                uint _2571 = _2570 + 1u;
                if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2564 = _2373;
                    _2565 = _2375;
                    _2566 = _2377;
                    _2567 = _2379;
                    _2568 = _2381;
                    _2569 = _2383;
                    _2570 = _2571;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
        }
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.z;
        uint _2389 = (_2387 >> 8u) & 15u;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        if (((4294967295u << _2389) & _2255) == 0u)
        {
            _2532 = _2372;
            _2534 = _2374;
            _2536 = _2376;
            _2538 = _2378;
            _2540 = _2380;
            _2542 = _2382;
        }
        else
        {
            float _2557 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
            float _2558 = _2557 * _2209;
            float _2559 = _2557 * _2210;
            float _2560 = _2557 * _2211;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2389 < ((_2387 >> 12u) & 15u))
            {
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2743 = _2372;
                float _2744 = _2374;
                float _2745 = _2376;
                float _2746 = _2378;
                float _2747 = _2380;
                float _2748 = _2382;
                uint _2749 = _2389;
                uint _2758;
                bool _2759;
                for (;;)
                {
                    _2758 = texelFetch(g_lightClassification, int((((_2249 << 5u) + (_2235 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                    _2759 = _2758 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2759)
                    {
                        frontier_phi_77_pred = _2748;
                        frontier_phi_77_pred_1 = _2747;
                        frontier_phi_77_pred_2 = _2746;
                        frontier_phi_77_pred_3 = _2745;
                        frontier_phi_77_pred_4 = _2744;
                        frontier_phi_77_pred_5 = _2743;
                    }
                    else
                    {
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2976;
                        float _2977;
                        float _2978;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _2986 = _2743;
                        float _2987 = _2744;
                        float _2988 = _2745;
                        float _2989 = _2746;
                        float _2990 = _2747;
                        float _2991 = _2748;
                        uint _2992 = _2758;
                        uint _2993;
                        vec4 _3018;
                        float _3019;
                        vec4 _3034;
                        vec3 _3046;
                        vec4 _3061;
                        vec4 _3076;
                        float _3122;
                        bool _3123;
                        for (;;)
                        {
                            uint _3003 = ((_2749 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2992));
                            _2993 = (_2992 + 4294967295u) & _2992;
                            uint _3005 = _3003 * 40u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            _3019 = _3018.w;
                            uint _3021 = (_3003 * 40u) + 4u;
                            _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            uint _3036 = (_3003 * 40u) + 8u;
                            _3046 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x));
                            uint _3048 = (_3003 * 40u) + 16u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3063 = (_3003 * 40u) + 20u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3078 = (_3003 * 40u) + 24u;
                            vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3097 = (_3003 * 40u) + 28u;
                            vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            _3122 = fma(_2211, _3110.z, fma(_2210, _3110.y, _3110.x * _2209)) + _3110.w;
                            _3123 = !((fma(_2211, _3091.z, fma(_2210, _3091.y, _3091.x * _2209)) + _3091.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3123)
                            {
                                float _3150 = _3018.x - _2209;
                                float _3151 = _3018.y - _2210;
                                float _3152 = _3018.z - _2211;
                                float _3153 = dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152));
                                float _3156 = inversesqrt(_3153);
                                float _3157 = _3156 * _3150;
                                float _3158 = _3156 * _3151;
                                float _3159 = _3156 * _3152;
                                float _3163 = 1.0 - (_3153 / (_3019 * _3019));
                                float _4141 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3164 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3168 = sqrt(_3153) * _3034.w;
                                float _3170 = 1.39999997615814208984375 / (_3168 + 1.39999997615814208984375);
                                float _3171 = _3170 * _3170;
                                float _3174 = ((1.0 - _3171) * dot(vec3(_3157, _3158, _3159), vec3(_832, _835, _838))) + _3171;
                                float _3177 = _3168 * _3168;
                                float _3181 = (fma(_2211, _3061.z, fma(_2210, _3061.y, _3061.x * _2209)) + _3061.w) / _3122;
                                float _3182 = (fma(_2211, _3076.z, fma(_2210, _3076.y, _3076.x * _2209)) + _3076.w) / _3122;
                                float _3186 = 1.0 - dot(vec2(_3181, _3182), vec2(_3181, _3182));
                                float _4157 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3188 = _3187 * (((isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))) * _3164) / ((_3177 * 0.699999988079071044921875) + 1.0));
                                float _3200 = exp2(log2(1.0 / ((_3177 * 3.5) + 5.0)) * 0.25);
                                float _3201 = 1.0 - _892;
                                float _3208 = sqrt(1.0 - ((1.0 - (_3201 * _3201)) * (1.0 - (_3200 * _3200))));
                                float _3209 = _3208 * _3208;
                                float _3210 = _3209 * _3209;
                                float _3211 = _3157 - _2558;
                                float _3212 = _3158 - _2559;
                                float _3213 = _3159 - _2560;
                                float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                                float _3221 = dot(vec3(_832, _835, _838), vec3((-0.0) - _2558, (-0.0) - _2559, (-0.0) - _2560));
                                float _4168 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3224 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3225 = dot(vec3(_832, _835, _838), vec3(_3217 * _3211, _3217 * _3212, _3217 * _3213));
                                float _4179 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3228 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3232 = ((_3228 * _3228) * (_3210 + (-1.0))) + 1.0;
                                float _3233 = _3170 * _3209;
                                float _3234 = _3233 * _3233;
                                float _3240 = ((1.0 - _3234) * dot(vec3(_832, _835, _838), vec3(_3157, _3158, _3159))) + _3234;
                                float _4190 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3242 = 1.0 - _3209;
                                float _3252 = (0.5 / (((_3241 * ((_3224 * _3242) + _3209)) + 9.9999999392252902907785028219223e-09) + (((_3241 * _3242) + _3209) * _3224))) * _3241;
                                float _4201 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3262 = (_3187 * _3164) * (((_3210 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_3232 * _3232) * ((_3177 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3188 * _3034.x;
                                frontier_phi_83_pred_1 = _3188 * _3034.z;
                                frontier_phi_83_pred_2 = _3188 * _3034.y;
                                frontier_phi_83_pred_3 = _3262 * _3046.z;
                                frontier_phi_83_pred_4 = _3262 * _3046.y;
                                frontier_phi_83_pred_5 = _3262 * _3046.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3269 = frontier_phi_83_pred;
                            _3271 = frontier_phi_83_pred_1;
                            _3270 = frontier_phi_83_pred_2;
                            _3268 = frontier_phi_83_pred_3;
                            _3267 = frontier_phi_83_pred_4;
                            _3266 = frontier_phi_83_pred_5;
                            _2976 = _3269 + _2989;
                            _2977 = _3270 + _2990;
                            _2978 = _3271 + _2991;
                            _2973 = _3266 + _2986;
                            _2974 = _3267 + _2987;
                            _2975 = _3268 + _2988;
                            if (_2993 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2993;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2978;
                        frontier_phi_77_pred_1 = _2977;
                        frontier_phi_77_pred_2 = _2976;
                        frontier_phi_77_pred_3 = _2975;
                        frontier_phi_77_pred_4 = _2974;
                        frontier_phi_77_pred_5 = _2973;
                    }
                    _2543 = frontier_phi_77_pred;
                    _2541 = frontier_phi_77_pred_1;
                    _2539 = frontier_phi_77_pred_2;
                    _2537 = frontier_phi_77_pred_3;
                    _2535 = frontier_phi_77_pred_4;
                    _2533 = frontier_phi_77_pred_5;
                    uint _2750 = _2749 + 1u;
                    if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2743 = _2533;
                        _2744 = _2535;
                        _2745 = _2537;
                        _2746 = _2539;
                        _2747 = _2541;
                        _2748 = _2543;
                        _2749 = _2750;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2535;
                frontier_phi_52_53_ladder_1 = _2543;
                frontier_phi_52_53_ladder_2 = _2541;
                frontier_phi_52_53_ladder_3 = _2539;
                frontier_phi_52_53_ladder_4 = _2537;
                frontier_phi_52_53_ladder_5 = _2533;
            }
            else
            {
                frontier_phi_52_53_ladder = _2374;
                frontier_phi_52_53_ladder_1 = _2382;
                frontier_phi_52_53_ladder_2 = _2380;
                frontier_phi_52_53_ladder_3 = _2378;
                frontier_phi_52_53_ladder_4 = _2376;
                frontier_phi_52_53_ladder_5 = _2372;
            }
            _2532 = frontier_phi_52_53_ladder_5;
            _2534 = frontier_phi_52_53_ladder;
            _2536 = frontier_phi_52_53_ladder_4;
            _2538 = frontier_phi_52_53_ladder_3;
            _2540 = frontier_phi_52_53_ladder_2;
            _2542 = frontier_phi_52_53_ladder_1;
        }
        float _2547 = isnan(1.0) ? _876 : (isnan(_876) ? 1.0 : min(_876, 1.0));
        _2268 = (_2547 * _2538) + _1998;
        _2270 = (_2547 * _2540) + _1999;
        _2272 = (_2547 * _2542) + _2000;
        _2274 = ((_2532 * 0.039999999105930328369140625) * _2547) + _2151;
        _2276 = ((_2534 * 0.039999999105930328369140625) * _2547) + _2152;
        _2278 = ((_2536 * 0.039999999105930328369140625) * _2547) + _2153;
    }
    else
    {
        _2268 = _1998;
        _2270 = _1999;
        _2272 = _2000;
        _2274 = _2151;
        _2276 = _2152;
        _2278 = _2153;
    }
    uint _2284 = _852 + uint(cbMatDynParam._m0[0u].w);
    float _2290 = (cbSceneParam._m0[72u].y * ((_732 * ((_723 - _685) - (_723 * _696))) + _685)) * cbInstanceData._m0[_2284].x;
    float _2291 = (cbSceneParam._m0[72u].y * ((_732 * ((_724 - _686) - (_724 * _696))) + _686)) * cbInstanceData._m0[_2284].y;
    float _2292 = (((_732 * ((_725 - _687) - (_725 * _696))) + _687) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2284].z;
    float _4217 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4228 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4239 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _2309 = (((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2268 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _876))) + ((_2274 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1711)) * cbPerFrame._m0[3u].x)) + _2290;
    float _2311 = (_2291 + ((_2276 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1711)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2270 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _876)));
    float _2313 = (_2292 + ((_2278 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1711)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2272 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _876)));
    float _2314 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2315 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2316 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2322 = cbMtdParam._m0[2u].x * _2290;
    float _2323 = cbMtdParam._m0[2u].y * _2291;
    float _2324 = cbMtdParam._m0[2u].z * _2292;
    float _4265 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2326 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    uint _2327 = _851 + 6u;
    float _2335 = _813 / cbSceneParam._m0[86u].x;
    float _2336 = _814 / cbSceneParam._m0[86u].y;
    vec4 _2350 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, (log2((isnan(cbSceneParam._m0[77u].w) ? _787 : (isnan(_787) ? cbSceneParam._m0[77u].w : min(_787, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2352 = _2350.x;
    float _2353 = _2350.y;
    float _2354 = _2350.z;
    float _2355 = _2350.w;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    if (_787 > cbSceneParam._m0[78u].w)
    {
        float _2397 = isnan(_787) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _787 : min(cbSceneParam._m0[80u].w, _787));
        float _2398 = _2397 / _787;
        float _2409 = _2398 * _280;
        float _2410 = _281 * _2398;
        float _2411 = (-0.0) - _2410;
        float _2412 = _2398 * _282;
        float _2414 = (cbSceneParam._m0[77u].w * _2411) / _2397;
        float _2415 = _2414 + cbSceneParam._m0[79u].w;
        float _2416 = cbSceneParam._m0[79u].w - _2410;
        float _2422 = sqrt(((_2409 * _2409) + (_2410 * _2410)) + (_2412 * _2412));
        float _2425 = (1.0 - (cbSceneParam._m0[77u].w / _2397)) * _2422;
        float _2431 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2433 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2674;
        if (abs((_2411 - _2414) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2674 = ((((_2415 > 0.0) ? exp2(_2431 * _2415) : (2.0 - exp2(_2433 * _2415))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2425;
        }
        else
        {
            float _2593 = 1.0 / cbSceneParam._m0[80u].x;
            float _2594 = isnan(_2416) ? _2415 : (isnan(_2415) ? _2416 : max(_2415, _2416));
            float _2595 = isnan(_2416) ? _2415 : (isnan(_2415) ? _2416 : min(_2415, _2416));
            float _2604 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : min(_2594, 0.0));
            float _2605 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : min(_2595, 0.0));
            _2674 = ((abs(_2422 / _2411) * cbSceneParam._m0[80u].y) * ((((_2604 - _2605) * 2.0) - ((exp2(_2431 * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0)))) - exp2(_2431 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0))))) * _2593)) - ((exp2(_2433 * _2604) - exp2(_2433 * _2605)) * _2593))) + (_2425 * cbSceneParam._m0[80u].z);
        }
        vec4 _2676 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, 1.0), 0.0);
        float _2685 = exp2((_2674 * (-1.44269502162933349609375)) * (1.0 - _2676.w));
        float _2686 = log2(_2685);
        float _2702 = log2(_2355);
        _2435 = (exp2(_2702 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].x)) * _2676.x) / cbSceneParam._m0[78u].x)) + _2352;
        _2437 = (exp2(_2702 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].y)) * _2676.y) / cbSceneParam._m0[78u].y)) + _2353;
        _2439 = (exp2(_2702 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].z)) * _2676.z) / cbSceneParam._m0[78u].z)) + _2354;
        _2441 = _2685 * _2355;
    }
    else
    {
        _2435 = _2352;
        _2437 = _2353;
        _2439 = _2354;
        _2441 = _2355;
    }
    bool _2712;
    vec4 _2450;
    vec4 _2472;
    float _2474;
    float _2478;
    float _2479;
    float _2480;
    float _2483;
    float _2486;
    float _2489;
    float _2490;
    bool _2500;
    for (;;)
    {
        _2450 = cbMatDynParam._m0[0u];
        float _2452 = roundEven(_2450.y);
        bool _2453 = _2452 == 3.0;
        float _2454 = log2(_2441);
        float _2458 = exp2(_2454 * cbSceneParam._m0[78u].x);
        float _2459 = exp2(_2454 * cbSceneParam._m0[78u].y);
        float _2460 = exp2(_2454 * cbSceneParam._m0[78u].z);
        float _2461 = _2458 * _2314;
        float _2462 = _2459 * _2315;
        float _2463 = _2460 * _2316;
        float _2470 = _801 + (-0.5);
        _2472 = cbMtdParam._m0[1u];
        _2474 = _2472.y * _2470;
        float _2477 = (_2452 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2478 = _2477 * (_2453 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2435)));
        _2479 = _2477 * (_2453 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2437)));
        _2480 = _2477 * (_2453 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2439)));
        _2483 = ((_2322 * _2326) * _2458) * _2477;
        _2486 = ((_2323 * _2326) * _2459) * _2477;
        _2489 = ((_2324 * _2326) * _2460) * _2477;
        _2490 = _2470 * 0.999000012874603271484375;
        _2500 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2500)
        {
            if ((cbInstanceData._m0[_851 + 7u].x + _2490) < 0.5)
            {
                _2712 = true;
                break;
            }
        }
        uint _2628 = _852 + uint(_2450.w);
        if ((cbInstanceData._m0[_2628].w < 1.0) && ((cbInstanceData._m0[_2628].w + _2490) < 0.5))
        {
            _2712 = true;
            break;
        }
        if ((_2474 + 1.0) < _2472.x)
        {
            _2712 = true;
            break;
        }
        _2712 = false;
        break;
    }
    float _2943;
    if (_2712)
    {
        discard_state = true;
        _2943 = 0.0;
    }
    else
    {
        _2943 = cbInstanceData._m0[_2327].w;
    }
    SV_Target.x = _2478;
    SV_Target.y = _2479;
    SV_Target.z = _2480;
    SV_Target.w = _2943;
    SV_Target_1.x = _2483;
    SV_Target_1.y = _2486;
    SV_Target_1.z = _2489;
    SV_Target_1.w = cbInstanceData._m0[_2327].w;
    discard_exit();
}


