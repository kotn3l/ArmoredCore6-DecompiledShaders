#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1244;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _303 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _341 = cbMtdParam._m0[27u].w + _282;
    float _342 = cbMtdParam._m0[28u].x + _283;
    float _343 = cbMtdParam._m0[28u].y + _284;
    float _357 = (-0.0) - dot(vec3(_341, _342, _343), vec3(_211 * _203, _211 * _204, _211 * _205));
    float _358 = (-0.0) - dot(vec3(_341, _342, _343), vec3(_225 * TANGENT.x, _225 * TANGENT.y, _225 * TANGENT.z));
    float _359 = (-0.0) - dot(vec3(_341, _342, _343), vec3((-0.0) - (_218 * NORMAL.x), (-0.0) - (_218 * NORMAL.y), (-0.0) - (_218 * NORMAL.z)));
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _366 = _363 * _359;
    float _367 = (_363 * _357) + (((_303.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _368 = (_363 * _358) + (((_303.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _369 = _367 * cbMtdParam._m0[24u].x;
    float _370 = _368 * cbMtdParam._m0[23u].w;
    float _371 = fract(TEXCOORD.x);
    float _372 = fract(TEXCOORD.y);
    float _378;
    if (_369 > 0.0)
    {
        _378 = (1.0 - _371) / _369;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_369 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _371) / _369;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _378 = frontier_phi_3_2_ladder;
    }
    float _386;
    if (_370 > 0.0)
    {
        _386 = (1.0 - _372) / _370;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_370 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _372) / _370;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _386 = frontier_phi_7_6_ladder;
    }
    bool _388 = _366 > 0.0;
    float _390 = _388 ? (cbMtdParam._m0[17u].x / _366) : 5000.0;
    float _391 = isnan(_386) ? _378 : (isnan(_378) ? _386 : min(_378, _386));
    float _392 = isnan(_390) ? _391 : (isnan(_391) ? _390 : min(_391, _390));
    float _396 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _397 = _371 + (-0.5);
    float _400 = _372 + (-0.5);
    float _403 = ((_392 * _366) + _396) / _396;
    vec4 _428 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_397 + (_392 * _369)) / _403) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_400 + (_392 * _370)) / _403) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _438 = cbMtdParam._m0[9u].x * _428.x;
    float _439 = cbMtdParam._m0[9u].y * _428.y;
    float _440 = cbMtdParam._m0[9u].z * _428.z;
    float _458 = _367 * cbMtdParam._m0[26u].z;
    float _459 = _368 * cbMtdParam._m0[26u].y;
    bool _460 = _458 > 0.0;
    float _465;
    if (_460)
    {
        _465 = (1.0 - _371) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _371) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _465 = frontier_phi_11_10_ladder;
    }
    bool _467 = _459 > 0.0;
    float _472;
    if (_467)
    {
        _472 = (1.0 - _372) / _459;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_459 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _372) / _459;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _472 = frontier_phi_15_14_ladder;
    }
    float _475 = _388 ? (cbMtdParam._m0[19u].z / _366) : 5000.0;
    float _476 = isnan(_472) ? _465 : (isnan(_465) ? _472 : min(_465, _472));
    float _477 = isnan(_475) ? _476 : (isnan(_476) ? _475 : min(_476, _475));
    float _481 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _485 = ((_477 * _366) + _481) / _481;
    float _490 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _492 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _508 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_397 + (_477 * _458)) / _485) + 0.5) + _490) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_400 + (_477 * _459)) / _485) + 0.5) + _492) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _520;
    if (_460)
    {
        _520 = (1.0 - _371) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _371) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _520 = frontier_phi_19_18_ladder;
    }
    float _526;
    if (_467)
    {
        _526 = (1.0 - _372) / _459;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_459 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _372) / _459;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _526 = frontier_phi_23_22_ladder;
    }
    float _528 = isnan(_526) ? _520 : (isnan(_520) ? _526 : min(_520, _526));
    float _529 = isnan(_475) ? _528 : (isnan(_528) ? _475 : min(_528, _475));
    float _536 = ((_529 * _366) + _481) / _481;
    vec4 _556 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_397 + (_529 * _458)) / _536) + 0.5) + _490) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_400 + (_529 * _459)) / _536) + 0.5) + _492) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _558 = _556.x;
    float _565 = (_558 * ((_508.x * cbMtdParam._m0[10u].x) - _438)) + _438;
    float _566 = (_558 * ((_508.y * cbMtdParam._m0[10u].y) - _439)) + _439;
    float _567 = (_558 * ((_508.z * cbMtdParam._m0[10u].z) - _440)) + _440;
    float _581 = _367 * cbMtdParam._m0[27u].x;
    float _582 = _368 * cbMtdParam._m0[26u].w;
    bool _583 = _581 > 0.0;
    float _588;
    if (_583)
    {
        _588 = (1.0 - _371) / _581;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_581 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _371) / _581;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _588 = frontier_phi_27_26_ladder;
    }
    bool _590 = _582 > 0.0;
    float _595;
    if (_590)
    {
        _595 = (1.0 - _372) / _582;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_582 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _372) / _582;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _595 = frontier_phi_31_30_ladder;
    }
    float _598 = _388 ? (cbMtdParam._m0[23u].x / _366) : 5000.0;
    float _599 = isnan(_595) ? _588 : (isnan(_588) ? _595 : min(_588, _595));
    float _600 = isnan(_598) ? _599 : (isnan(_599) ? _598 : min(_599, _598));
    float _604 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _608 = ((_600 * _366) + _604) / _604;
    float _613 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _615 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _631 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_397 + (_600 * _581)) / _608) + 0.5) + _613) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_400 + (_600 * _582)) / _608) + 0.5) + _615) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _643;
    if (_583)
    {
        _643 = (1.0 - _371) / _581;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_581 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _371) / _581;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _643 = frontier_phi_35_34_ladder;
    }
    float _649;
    if (_590)
    {
        _649 = (1.0 - _372) / _582;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_582 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _372) / _582;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _649 = frontier_phi_39_38_ladder;
    }
    float _651 = isnan(_649) ? _643 : (isnan(_643) ? _649 : min(_643, _649));
    float _652 = isnan(_598) ? _651 : (isnan(_651) ? _598 : min(_651, _598));
    float _659 = ((_652 * _366) + _604) / _604;
    vec4 _680 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_397 + (_652 * _581)) / _659) + 0.5) + _613) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_400 + (_652 * _582)) / _659) + 0.5) + _615) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _682 = _680.x;
    float _689 = (_682 * ((_631.x * cbMtdParam._m0[13u].x) - _565)) + _565;
    float _690 = (_682 * ((_631.y * cbMtdParam._m0[13u].y) - _566)) + _566;
    float _691 = (_682 * ((_631.z * cbMtdParam._m0[13u].z) - _567)) + _567;
    vec4 _715 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _720 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _726 = ((_715.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _728 = (-0.0) - (cbMtdParam._m0[21u].x * ((_715.x * 0.5) + (-0.25)));
    float _729 = fract(_720);
    float _731 = fract(_720 + 0.5);
    vec4 _758 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_729 * _728) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_726 * _729) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _760 = _758.x;
    float _766 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_731 * _728) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_726 * _731) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _760) * abs((_729 * 2.0) + (-1.0))) + _760;
    float _772 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _776 = fract(abs(_772));
    float _785 = sin(cbMtdParam._m0[21u].z);
    float _786 = cos(cbMtdParam._m0[21u].z);
    float _787 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _788 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _818 = abs(cbMtdParam._m0[20u].w * (((_766 - (((_772 >= ((-0.0) - _772)) ? _776 : ((-0.0) - _776)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_788, (-0.0) - _785, _786 * _787) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_788, _786, _787 * _785) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _822 = (((_818 * cbMtdParam._m0[18u].y) - _766) * _818) + _766;
    float _3535 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _823 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    vec4 _835 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _850 = (cbMtdParam._m0[14u].x * _835.x) * cbMtdParam._m0[19u].x;
    float _851 = (cbMtdParam._m0[14u].y * _835.y) * cbMtdParam._m0[19u].x;
    float _852 = (cbMtdParam._m0[14u].z * _835.z) * cbMtdParam._m0[19u].x;
    float _862 = exp2(log2(_823) * cbMtdParam._m0[20u].x);
    float _3546 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3557 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3568 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _891 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _895 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _896 = _282 * _895;
    float _897 = _283 * _895;
    float _898 = _284 * _895;
    float _904 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _905 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _918 = uint(roundEven(NORMAL.w)) * 13u;
    uint _919 = _918 + 9u;
    uint _920 = _919 + uint(cbMatDynParam._m0[0u].w);
    float _926 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) * cbInstanceData._m0[_920].x;
    float _927 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * cbInstanceData._m0[_920].y;
    float _928 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * cbInstanceData._m0[_920].z;
    float _3579 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    vec4 _940 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _904, cbSceneParam._m0[86u].y * _905));
    float _943 = _940.x * TEXCOORD_4;
    float _944 = (-0.0) - _896;
    float _945 = (-0.0) - _897;
    float _946 = (-0.0) - _898;
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1243;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1031 = (cbModelParam._m0[37u].x * ((((fma(_976, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _968)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1033 = (cbModelParam._m0[37u].y * ((((fma(_976, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _968)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1034 = (((((fma(_976, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _968)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1031, _1033, _1034), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1031, _1033, _1034), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1031, _1033, _1034), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1031, _1033, _1034), 0.0);
        float _1071 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1037.x + (-0.5));
        float _1073 = _1071 * (_1037.y + (-0.5));
        float _1074 = _1071 * (_1037.z + (-0.5));
        float _1081 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1044.x + (-0.5));
        float _1083 = _1081 * (_1044.y + (-0.5));
        float _1084 = _1081 * (_1044.z + (-0.5));
        float _1091 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1051.x + (-0.5));
        float _1093 = _1091 * (_1051.y + (-0.5));
        float _1094 = _1091 * (_1051.z + (-0.5));
        float _1101 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1058.x + (-0.5));
        float _1103 = _1101 * (_1058.y + (-0.5));
        float _1104 = _1101 * (_1058.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1125 = (dot(vec3(0.0), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1135 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3649 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1137 + 1.0))) + _1142) * _1105;
        float _1152 = _1073 * 0.5;
        float _1153 = _1083 * 0.5;
        float _1154 = _1093 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(0.0), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3682 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1179 + 1.0))) + _1184) * _1106;
        float _1194 = _1074 * 0.5;
        float _1195 = _1084 * 0.5;
        float _1196 = _1094 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(0.0), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3715 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1221 + 1.0))) + _1226) * _1107;
        _1243 = _1074;
        _1245 = _1073;
        _1246 = _1072;
        _1247 = _1084;
        _1248 = _1083;
        _1249 = _1082;
        _1250 = _1094;
        _1251 = _1093;
        _1252 = _1092;
        _1253 = _1107;
        _1254 = _1106;
        _1255 = _1105;
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _1244;
        _1245 = _1244;
        _1246 = _1244;
        _1247 = _1244;
        _1248 = _1244;
        _1249 = _1244;
        _1250 = _1244;
        _1251 = _1244;
        _1252 = _1244;
        _1253 = _1244;
        _1254 = _1244;
        _1255 = _1244;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1311 = (cbModelParam._m0[38u].x * ((((fma(_976, cbModelParam._m0[30u].z, fma(_972, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _968)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1312 = (cbModelParam._m0[38u].y * ((((fma(_976, cbModelParam._m0[31u].z, fma(_972, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _968)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1313 = (((((fma(_976, cbModelParam._m0[32u].z, fma(_972, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _968)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        float _1348 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1315.x + (-0.5));
        float _1350 = _1348 * (_1315.y + (-0.5));
        float _1351 = _1348 * (_1315.z + (-0.5));
        float _1358 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1322.x + (-0.5));
        float _1360 = _1358 * (_1322.y + (-0.5));
        float _1361 = _1358 * (_1322.z + (-0.5));
        float _1368 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1329.x + (-0.5));
        float _1370 = _1368 * (_1329.y + (-0.5));
        float _1371 = _1368 * (_1329.z + (-0.5));
        float _1378 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1336.x + (-0.5));
        float _1380 = _1378 * (_1336.y + (-0.5));
        float _1381 = _1378 * (_1336.z + (-0.5));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = _1349 * 0.5;
        float _1386 = _1359 * 0.5;
        float _1387 = _1369 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(0.0), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3778 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1412 + 1.0))) + _1417) * _1382;
        float _1427 = _1350 * 0.5;
        float _1428 = _1360 * 0.5;
        float _1429 = _1370 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(0.0), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3811 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1454 + 1.0))) + _1459) * _1383;
        float _1469 = _1351 * 0.5;
        float _1470 = _1361 * 0.5;
        float _1471 = _1371 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(0.0), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _3844 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1496 + 1.0))) + _1501) * _1384;
        _1518 = _1351;
        _1519 = _1350;
        _1520 = _1349;
        _1521 = _1361;
        _1522 = _1360;
        _1523 = _1359;
        _1524 = _1371;
        _1525 = _1370;
        _1526 = _1369;
        _1527 = _1384;
        _1528 = _1383;
        _1529 = _1382;
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
    }
    else
    {
        _1518 = _1244;
        _1519 = _1244;
        _1520 = _1244;
        _1521 = _1244;
        _1522 = _1244;
        _1523 = _1244;
        _1524 = _1244;
        _1525 = _1244;
        _1526 = _1244;
        _1527 = _1244;
        _1528 = _1244;
        _1529 = _1244;
        _1530 = 0.0;
        _1531 = 0.0;
        _1532 = 0.0;
    }
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1256)) + _1256;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1257)) + _1257;
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1258)) + _1258;
    float _1565 = fma(_1544, cbSceneParam._m0[89u].z, fma(_1543, cbSceneParam._m0[89u].y, _1542 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1544, cbSceneParam._m0[90u].z, fma(_1543, cbSceneParam._m0[90u].y, _1542 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1544, cbSceneParam._m0[91u].z, fma(_1543, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1542));
    float _1586 = _896 * (-0.5);
    float _1587 = _897 * (-0.5);
    float _1588 = _898 * (-0.5);
    float _1589 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1592 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1595 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1629;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1602 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1243, _1247, _1250, _1253));
        float _1606 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1610 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1246, _1249, _1252, _1255));
        float _1617 = dot(vec4(cbModelParam._m0[39u]), vec4(_1586, _1587, _1588, 1.0));
        _1629 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1617) ? 0.0 : (isnan(0.0) ? _1617 : max(0.0, _1617))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1629 = 1.0;
    }
    float _1640;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1631 = dot(vec4(cbModelParam._m0[40u]), vec4(_1586, _1587, _1588, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1644 = (_1640 * cbModelParam._m0[1u].x) + (_1629 * (1.0 - cbModelParam._m0[1u].x));
    float _1653 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1701 = fma(_976, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968)) + cbModelParam._m0[13u].w;
        float _1705 = fma(_976, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968)) + cbModelParam._m0[14u].w;
        float _1709 = fma(_976, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968)) + cbModelParam._m0[15u].w;
        float _1712 = fma(_946, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _944));
        float _1715 = fma(_946, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _944));
        float _1718 = fma(_946, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _944));
        float _1744;
        if (_1712 > 0.0)
        {
            _1744 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1744 = frontier_phi_54_52_ladder;
        }
        float _1913;
        if (_1715 > 0.0)
        {
            _1913 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1913 = frontier_phi_63_59_ladder;
        }
        float _2307;
        if (_1718 > 0.0)
        {
            _2307 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _2307 = frontier_phi_75_70_ladder;
        }
        float _2309 = isnan(_1913) ? _1744 : (isnan(_1744) ? _1913 : min(_1744, _1913));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1712) + _1701;
        float _2315 = (_2310 * _1715) + _1705;
        float _2316 = (_2310 * _1718) + _1709;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2319 = (-1.0) - _2317;
        float _2321 = _2317 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_2316 > _2321) || ((_2316 < _2319) || ((_2315 > _2321) || ((_2315 < _2319) || ((_2314 < _2319) || (_2314 > _2321))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2316, cbModelParam._m0[9u].z, fma(_2315, cbModelParam._m0[9u].y, _2314 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2316, cbModelParam._m0[10u].z, fma(_2315, cbModelParam._m0[10u].y, _2314 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2316, cbModelParam._m0[11u].z, fma(_2315, cbModelParam._m0[11u].y, _2314 * cbModelParam._m0[11u].x))), _1653);
            frontier_phi_53_75_ladder = _2577.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _2577.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _2577.x * cbModelParam._m0[1u].y;
        }
        _1734 = frontier_phi_53_75_ladder_2;
        _1736 = frontier_phi_53_75_ladder_1;
        _1738 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_944, _945, _946), _1653);
        _1734 = _1722.x * cbModelParam._m0[1u].y;
        _1736 = _1722.y * cbModelParam._m0[1u].y;
        _1738 = _1722.z * cbModelParam._m0[1u].y;
    }
    float _1741 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1793 = fma(_976, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968)) + cbModelParam._m0[21u].w;
        float _1797 = fma(_976, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968)) + cbModelParam._m0[22u].w;
        float _1801 = fma(_976, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968)) + cbModelParam._m0[23u].w;
        float _1804 = fma(_946, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _944));
        float _1807 = fma(_946, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _944));
        float _1810 = fma(_946, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _944));
        float _1918;
        if (_1804 > 0.0)
        {
            _1918 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1918 = frontier_phi_65_61_ladder;
        }
        float _2334;
        if (_1807 > 0.0)
        {
            _2334 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2334 = frontier_phi_77_72_ladder;
        }
        float _2707;
        if (_1810 > 0.0)
        {
            _2707 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2707 = frontier_phi_89_84_ladder;
        }
        float _2709 = isnan(_2334) ? _1918 : (isnan(_1918) ? _2334 : min(_1918, _2334));
        float _2710 = isnan(_2707) ? _2709 : (isnan(_2709) ? _2707 : min(_2709, _2707));
        float _2714 = (_2710 * _1804) + _1793;
        float _2715 = (_2710 * _1807) + _1797;
        float _2716 = (_2710 * _1810) + _1801;
        float _2717 = _2710 * 9.9999997473787516355514526367188e-05;
        float _2718 = (-1.0) - _2717;
        float _2720 = _2717 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2716 > _2720) || ((_2716 < _2718) || ((_2715 > _2720) || ((_2715 < _2718) || ((_2714 < _2718) || (_2714 > _2720))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2716, cbModelParam._m0[17u].z, fma(_2715, cbModelParam._m0[17u].y, _2714 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2716, cbModelParam._m0[18u].z, fma(_2715, cbModelParam._m0[18u].y, _2714 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2716, cbModelParam._m0[19u].z, fma(_2715, cbModelParam._m0[19u].y, _2714 * cbModelParam._m0[19u].x))), _1741);
            frontier_phi_62_89_ladder = _2834.z * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2834.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2834.x * cbModelParam._m0[1u].z;
        }
        _1829 = frontier_phi_62_89_ladder_2;
        _1831 = frontier_phi_62_89_ladder_1;
        _1833 = frontier_phi_62_89_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_944, _945, _946), _1741);
        _1829 = _1813.x * cbModelParam._m0[1u].z;
        _1831 = _1813.y * cbModelParam._m0[1u].z;
        _1833 = _1813.z * cbModelParam._m0[1u].z;
    }
    float _1845 = _943 * 0.01200000010430812835693359375;
    float _1847 = _1845 * ((cbModelParam._m0[1u].w * (_1829 - _1734)) + _1734);
    float _1848 = _1845 * ((cbModelParam._m0[1u].w * (_1831 - _1736)) + _1736);
    float _1849 = _1845 * ((cbModelParam._m0[1u].w * (_1833 - _1738)) + _1738);
    float _1852 = fma(_1849, cbSceneParam._m0[89u].z, fma(_1848, cbSceneParam._m0[89u].y, _1847 * cbSceneParam._m0[89u].x));
    float _1855 = fma(_1849, cbSceneParam._m0[90u].z, fma(_1848, cbSceneParam._m0[90u].y, _1847 * cbSceneParam._m0[90u].x));
    float _1858 = fma(_1849, cbSceneParam._m0[91u].z, fma(_1848, cbSceneParam._m0[91u].y, _1847 * cbSceneParam._m0[91u].x));
    float _1892 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1896 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1900 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1905 = _1892 / _1904;
    float _1906 = _1896 / _1904;
    float _1907 = _1900 / _1904;
    float _2055;
    float _2056;
    float _2057;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1934 = ((uint(_1907 > cbSceneParam._m0[59u].y) + uint(_1907 > cbSceneParam._m0[59u].x)) + uint(_1907 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1935 = _1934 + 43u;
        uint _1943 = _1934 + 44u;
        uint _1951 = _1934 + 45u;
        uint _1959 = _1934 + 46u;
        float _1970 = fma(_1904, cbSceneParam._m0[_1935].w, fma(_1900, cbSceneParam._m0[_1935].z, fma(_1896, cbSceneParam._m0[_1935].y, _1892 * cbSceneParam._m0[_1935].x)));
        float _1974 = fma(_1904, cbSceneParam._m0[_1943].w, fma(_1900, cbSceneParam._m0[_1943].z, fma(_1896, cbSceneParam._m0[_1943].y, _1892 * cbSceneParam._m0[_1943].x)));
        float _1982 = fma(_1904, cbSceneParam._m0[_1959].w, fma(_1900, cbSceneParam._m0[_1959].z, fma(_1896, cbSceneParam._m0[_1959].y, _1892 * cbSceneParam._m0[_1959].x)));
        float _1987 = cbSceneParam._m0[33u].z * _1982;
        float _1989 = cbSceneParam._m0[33u].w * _1982;
        float _1992 = fma(_1904, cbSceneParam._m0[_1951].w, fma(_1900, cbSceneParam._m0[_1951].z, fma(_1896, cbSceneParam._m0[_1951].y, _1892 * cbSceneParam._m0[_1951].x))) / _1982;
        float _2040 = (cbSceneParam._m0[33u].x - sqrt(((_1906 * _1906) + (_1905 * _1905)) + (_1907 * _1907))) * cbSceneParam._m0[33u].y;
        float _3970 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2048 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1987 + _1970) / _1982, (_1989 + _1974) / _1982), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1989 + _1970) / _1982, (_1974 - _1987) / _1982), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1970 - _1987) / _1982, (_1974 - _1989) / _1982), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1970 - _1989) / _1982, (_1987 + _1974) / _1982), _1992), 0.0)).x), vec4(0.25)));
        _2055 = 1.0 - (_2048 * cbSceneParam._m0[34u].x);
        _2056 = 1.0 - (_2048 * cbSceneParam._m0[34u].y);
        _2057 = 1.0 - (_2048 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2055 = 1.0;
        _2056 = 1.0;
        _2057 = 1.0;
    }
    float _2121;
    float _2123;
    float _2125;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2109 = fma(_1904, cbSceneParam._m0[63u].w, fma(_1900, cbSceneParam._m0[63u].z, fma(_1896, cbSceneParam._m0[63u].y, _1892 * cbSceneParam._m0[63u].x)));
        float _2110 = fma(_1904, cbSceneParam._m0[60u].w, fma(_1900, cbSceneParam._m0[60u].z, fma(_1896, cbSceneParam._m0[60u].y, _1892 * cbSceneParam._m0[60u].x))) / _2109;
        float _2111 = fma(_1904, cbSceneParam._m0[61u].w, fma(_1900, cbSceneParam._m0[61u].z, fma(_1896, cbSceneParam._m0[61u].y, _1892 * cbSceneParam._m0[61u].x))) / _2109;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_2110 >= cbSceneParam._m0[64u].x) && (_2111 >= cbSceneParam._m0[64u].y)) && (_2110 <= cbSceneParam._m0[64u].z)) && (_2111 <= cbSceneParam._m0[64u].w))
        {
            float _2347 = fma(_1904, cbSceneParam._m0[62u].w, fma(_1900, cbSceneParam._m0[62u].z, fma(_1896, cbSceneParam._m0[62u].y, _1892 * cbSceneParam._m0[62u].x))) / _2109;
            float _2351 = isnan(cbSceneParam._m0[41u].w) ? _2347 : (isnan(_2347) ? cbSceneParam._m0[41u].w : max(_2347, cbSceneParam._m0[41u].w));
            float _2394 = (cbSceneParam._m0[33u].x - sqrt(((_1906 * _1906) + (_1905 * _1905)) + (_1907 * _1907))) * cbSceneParam._m0[33u].y;
            float _3986 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
            float _2401 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2110, cbSceneParam._m0[33u].w + _2111), _2351), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2110, _2111 - cbSceneParam._m0[33u].z), _2351), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2110 - cbSceneParam._m0[33u].z, _2111 - cbSceneParam._m0[33u].w), _2351), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2110 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2111), _2351), 0.0)).x), vec4(0.25)));
            float _2405 = 1.0 - (_2401 * cbSceneParam._m0[34u].x);
            float _2406 = 1.0 - (_2401 * cbSceneParam._m0[34u].y);
            float _2407 = 1.0 - (_2401 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_2405) ? _2055 : (isnan(_2055) ? _2405 : min(_2055, _2405));
            frontier_phi_74_73_ladder_1 = isnan(_2406) ? _2056 : (isnan(_2056) ? _2406 : min(_2056, _2406));
            frontier_phi_74_73_ladder_2 = isnan(_2407) ? _2057 : (isnan(_2057) ? _2407 : min(_2057, _2407));
        }
        else
        {
            frontier_phi_74_73_ladder = _2055;
            frontier_phi_74_73_ladder_1 = _2056;
            frontier_phi_74_73_ladder_2 = _2057;
        }
        _2121 = frontier_phi_74_73_ladder;
        _2123 = frontier_phi_74_73_ladder_1;
        _2125 = frontier_phi_74_73_ladder_2;
    }
    else
    {
        _2121 = _2055;
        _2123 = _2056;
        _2125 = _2057;
    }
    uvec4 _2130 = floatBitsToUint(cbInstanceData._m0[_918 + 5u]);
    uint _2132 = _2130.x * 14u;
    uint _2133 = _2132 + 13u;
    float _2138 = _943 + (-1.0);
    float _2141 = (cbLight._m0[_2133].x * _2138) + 1.0;
    float _2142 = (cbLight._m0[_2133].y * _2138) + 1.0;
    uint _2143 = _2132 + 5u;
    float _2149 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
    uint _2153 = _2132 + 4u;
    float _2162 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2166 = _2132 | 1u;
    float _2177 = dot(vec3(cbLight._m0[_2132].xyz), vec3(0.0));
    float _2180 = dot(vec3(cbLight._m0[_2166].xyz), vec3(0.0));
    float _4022 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _4033 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2185 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.3183098733425140380859375;
    float _2187 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.3183098733425140380859375;
    float _2194 = ((cbLight._m0[_2143].x * _2149) * _2187) + (((cbLight._m0[_2153].x * _2121) * _2162) * _2185);
    float _2195 = ((_2149 * cbLight._m0[_2143].y) * _2187) + (((cbLight._m0[_2153].y * _2123) * _2162) * _2185);
    float _2196 = ((_2149 * cbLight._m0[_2143].z) * _2187) + (((cbLight._m0[_2153].z * _2125) * _2162) * _2185);
    uint _2197 = _2132 + 8u;
    float _2203 = cbLight._m0[_2132].x + _896;
    float _2204 = cbLight._m0[_2132].y + _897;
    float _2205 = cbLight._m0[_2132].z + _898;
    float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
    float _2213 = dot(vec3(0.0), vec3(cbLight._m0[_2132].xyz));
    float _4044 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _2217 = dot(vec3(0.0), vec3(_896, _897, _898));
    float _4055 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _2221 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2203 * _2209, _2204 * _2209, _2205 * _2209));
    float _4066 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2238 = (0.5 / ((_2216 + 9.9999999392252902907785028219223e-09) + _2220)) * _2216;
    float _4077 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.31831014156341552734375;
    uint _2254 = _2132 + 9u;
    float _2260 = cbLight._m0[_2166].x + _896;
    float _2261 = cbLight._m0[_2166].y + _897;
    float _2262 = cbLight._m0[_2166].z + _898;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2270 = dot(vec3(0.0), vec3(cbLight._m0[_2166].xyz));
    float _4088 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _2274 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2260 * _2266, _2261 * _2266, _2262 * _2266));
    float _4099 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2283 = (exp2(log2(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2287 = (0.5 / ((_2273 + 9.9999999392252902907785028219223e-09) + _2220)) * _2273;
    float _4110 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.31831014156341552734375;
    float _2299 = (((_2283 * cbLight._m0[_2254].x) * _2289) * _2149) + ((((cbLight._m0[_2197].x * _2121) * _2232) * _2240) * _2162);
    float _2300 = (((_2283 * cbLight._m0[_2254].y) * _2289) * _2149) + ((((cbLight._m0[_2197].y * _2123) * _2232) * _2240) * _2162);
    float _2301 = (((_2283 * cbLight._m0[_2254].z) * _2289) * _2149) + ((((cbLight._m0[_2197].z * _2125) * _2232) * _2240) * _2162);
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_2130.y == 0u)
    {
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.x;
        uint _2431 = uint((float(_2419.y) * floor(float(uint(cbSceneParam._m0[85u].y * _905) / _2420))) + floor(float(uint(cbSceneParam._m0[85u].x * _904) / _2420)));
        float _2441 = (log2(_1907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2442 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        uint _2445 = uint(isnan(14.0) ? _2442 : (isnan(_2442) ? 14.0 : min(_2442, 14.0)));
        uvec4 _2451 = texelFetch(g_lightClusterGridBuffer, int(((_2445 << 2u) + (_2431 << 6u)) >> 2u));
        uint _2452 = _2451.x;
        uint _2453 = _2419.z;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        if (((((1u << ((_2453 >> 4u) & 15u)) + 4294967295u) & _2452) == 0u) || ((_2453 & 240u) == 0u))
        {
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
        }
        else
        {
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            uint _2768 = 0u;
            uint _2777;
            bool _2778;
            for (;;)
            {
                _2777 = texelFetch(g_lightClassification, int((((_2445 << 5u) + (_2431 << 9u)) + (_2768 << 2u)) >> 2u)).x;
                _2778 = _2777 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                float frontier_phi_98_pred_3;
                float frontier_phi_98_pred_4;
                float frontier_phi_98_pred_5;
                if (_2778)
                {
                    frontier_phi_98_pred = _2762;
                    frontier_phi_98_pred_1 = _2763;
                    frontier_phi_98_pred_2 = _2767;
                    frontier_phi_98_pred_3 = _2766;
                    frontier_phi_98_pred_4 = _2765;
                    frontier_phi_98_pred_5 = _2764;
                }
                else
                {
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    uint _2913;
                    _2907 = _2762;
                    _2908 = _2763;
                    _2909 = _2764;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2767;
                    _2913 = _2777;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    for (;;)
                    {
                        uint _2917 = uint(findLSB(_2913)) + (_2768 << 5u);
                        uint _2914 = (_2913 + 4294967295u) & _2913;
                        uint _2919 = _2917 * 48u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 3u)).x));
                        uint _2939 = (_2917 * 48u) + 4u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2958 = (_2917 * 48u) + 8u;
                        vec3 _2969 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x));
                        float _2973 = _2933.x - _1905;
                        float _2974 = _2933.y - _1906;
                        float _2975 = _2933.z - _1907;
                        float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                        float _2979 = inversesqrt(_2976);
                        float _2988 = 1.0 - (_2976 * _2933.w);
                        float _4131 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                        float _2990 = sqrt(_2976) * _2952.w;
                        float _2993 = 1.39999997615814208984375 / (_2990 + 1.39999997615814208984375);
                        float _2994 = _2993 * _2993;
                        float _2997 = ((1.0 - _2994) * dot(vec3(0.0), vec3(_2979 * _2973, _2979 * _2974, _2979 * _2975))) + _2994;
                        float _3000 = _2990 * _2990;
                        float _3004 = ((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2989) / ((_3000 * 0.699999988079071044921875) + 1.0);
                        float _3008 = (-0.0) - _1905;
                        float _3009 = (-0.0) - _1906;
                        float _3010 = (-0.0) - _1907;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3018 = dot(vec3(0.0), vec3(_3014 * _3008, _3014 * _3009, _3014 * _3010));
                        float _4147 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _4158 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3022 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _3026 = (0.5 / (((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) + 9.9999999392252902907785028219223e-09) + _3022)) * _3022;
                        float _4169 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3035 = (((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 3.1415927410125732421875) / ((_3000 * 2.1991131305694580078125) + 3.141590118408203125)) * _2989;
                        _2842 = (_3004 * _2952.x) + _2910;
                        _2843 = (_3004 * _2952.y) + _2911;
                        _2844 = (_3004 * _2952.z) + _2912;
                        _2839 = (_3035 * _2969.x) + _2907;
                        _2840 = (_3035 * _2969.y) + _2908;
                        _2841 = (_3035 * _2969.z) + _2909;
                        if (_2914 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2914;
                        }
                    }
                    frontier_phi_98_pred = _2839;
                    frontier_phi_98_pred_1 = _2840;
                    frontier_phi_98_pred_2 = _2844;
                    frontier_phi_98_pred_3 = _2843;
                    frontier_phi_98_pred_4 = _2842;
                    frontier_phi_98_pred_5 = _2841;
                }
                _2587 = frontier_phi_98_pred;
                _2589 = frontier_phi_98_pred_1;
                _2597 = frontier_phi_98_pred_2;
                _2595 = frontier_phi_98_pred_3;
                _2593 = frontier_phi_98_pred_4;
                _2591 = frontier_phi_98_pred_5;
                uint _2769 = _2768 + 1u;
                if (_2769 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2762 = _2587;
                    _2763 = _2589;
                    _2764 = _2591;
                    _2765 = _2593;
                    _2766 = _2595;
                    _2767 = _2597;
                    _2768 = _2769;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
        }
        uvec4 _2600 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2601 = _2600.z;
        uint _2603 = (_2601 >> 8u) & 15u;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        if (((4294967295u << _2603) & _2452) == 0u)
        {
            _2733 = _2586;
            _2735 = _2588;
            _2737 = _2590;
            _2739 = _2592;
            _2741 = _2594;
            _2743 = _2596;
        }
        else
        {
            float _2758 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            float frontier_phi_91_92_ladder_3;
            float frontier_phi_91_92_ladder_4;
            float frontier_phi_91_92_ladder_5;
            if (_2603 < ((_2601 >> 12u) & 15u))
            {
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2890 = _2586;
                float _2891 = _2588;
                float _2892 = _2590;
                float _2893 = _2592;
                float _2894 = _2594;
                float _2895 = _2596;
                uint _2896 = _2603;
                uint _2905;
                bool _2906;
                for (;;)
                {
                    _2905 = texelFetch(g_lightClassification, int((((_2445 << 5u) + (_2431 << 9u)) + (_2896 << 2u)) >> 2u)).x;
                    _2906 = _2905 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    float frontier_phi_104_pred_3;
                    float frontier_phi_104_pred_4;
                    float frontier_phi_104_pred_5;
                    if (_2906)
                    {
                        frontier_phi_104_pred = _2895;
                        frontier_phi_104_pred_1 = _2894;
                        frontier_phi_104_pred_2 = _2893;
                        frontier_phi_104_pred_3 = _2892;
                        frontier_phi_104_pred_4 = _2891;
                        frontier_phi_104_pred_5 = _2890;
                    }
                    else
                    {
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3053 = _2890;
                        float _3054 = _2891;
                        float _3055 = _2892;
                        float _3056 = _2893;
                        float _3057 = _2894;
                        float _3058 = _2895;
                        uint _3059 = _2905;
                        uint _3060;
                        vec4 _3085;
                        float _3086;
                        vec4 _3101;
                        vec3 _3113;
                        vec4 _3129;
                        vec4 _3144;
                        float _3190;
                        bool _3191;
                        for (;;)
                        {
                            uint _3070 = ((_2896 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3059));
                            _3060 = (_3059 + 4294967295u) & _3059;
                            uint _3072 = _3070 * 40u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            _3086 = _3085.w;
                            uint _3088 = (_3070 * 40u) + 4u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3103 = (_3070 * 40u) + 8u;
                            _3113 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x));
                            uint _3116 = (_3070 * 40u) + 16u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3070 * 40u) + 20u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3146 = (_3070 * 40u) + 24u;
                            vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3165 = (_3070 * 40u) + 28u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3190 = fma(_1907, _3178.z, fma(_1906, _3178.y, _3178.x * _1905)) + _3178.w;
                            _3191 = !((fma(_1907, _3159.z, fma(_1906, _3159.y, _3159.x * _1905)) + _3159.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            float frontier_phi_110_pred_3;
                            float frontier_phi_110_pred_4;
                            float frontier_phi_110_pred_5;
                            if (_3191)
                            {
                                float _3218 = _3085.x - _1905;
                                float _3219 = _3085.y - _1906;
                                float _3220 = _3085.z - _1907;
                                float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                                float _3224 = inversesqrt(_3221);
                                float _3225 = _3224 * _3218;
                                float _3226 = _3224 * _3219;
                                float _3227 = _3224 * _3220;
                                float _3231 = 1.0 - (_3221 / (_3086 * _3086));
                                float _4180 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                                float _3236 = sqrt(_3221) * _3101.w;
                                float _3238 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                                float _3239 = _3238 * _3238;
                                float _3240 = 1.0 - _3239;
                                float _3242 = (_3240 * dot(vec3(_3225, _3226, _3227), vec3(0.0))) + _3239;
                                float _3245 = _3236 * _3236;
                                float _3249 = (fma(_1907, _3129.z, fma(_1906, _3129.y, _3129.x * _1905)) + _3129.w) / _3190;
                                float _3250 = (fma(_1907, _3144.z, fma(_1906, _3144.y, _3144.x * _1905)) + _3144.w) / _3190;
                                float _3254 = 1.0 - dot(vec2(_3249, _3250), vec2(_3249, _3250));
                                float _4196 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3256 = _3255 * (((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3232) / ((_3245 * 0.699999988079071044921875) + 1.0));
                                float _3266 = dot(vec3(0.0), vec3((-0.0) - (_1905 * _2758), (-0.0) - (_1906 * _2758), (-0.0) - (_1907 * _2758)));
                                float _4207 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3274 = (_3240 * dot(vec3(0.0), vec3(_3225, _3226, _3227))) + _3239;
                                float _4218 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3279 = (0.5 / (((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) + 9.9999999392252902907785028219223e-09) + _3275)) * _3275;
                                float _4229 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3286 = (_3255 * _3232) * (((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 3.1415927410125732421875) / ((_3245 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_110_pred = _3286 * _3113.z;
                                frontier_phi_110_pred_1 = _3256 * _3101.z;
                                frontier_phi_110_pred_2 = _3256 * _3101.y;
                                frontier_phi_110_pred_3 = _3256 * _3101.x;
                                frontier_phi_110_pred_4 = _3286 * _3113.y;
                                frontier_phi_110_pred_5 = _3286 * _3113.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                                frontier_phi_110_pred_3 = 0.0;
                                frontier_phi_110_pred_4 = 0.0;
                                frontier_phi_110_pred_5 = 0.0;
                            }
                            _3292 = frontier_phi_110_pred;
                            _3295 = frontier_phi_110_pred_1;
                            _3294 = frontier_phi_110_pred_2;
                            _3293 = frontier_phi_110_pred_3;
                            _3291 = frontier_phi_110_pred_4;
                            _3290 = frontier_phi_110_pred_5;
                            _3043 = _3293 + _3056;
                            _3044 = _3294 + _3057;
                            _3045 = _3295 + _3058;
                            _3040 = _3290 + _3053;
                            _3041 = _3291 + _3054;
                            _3042 = _3292 + _3055;
                            if (_3060 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3060;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _3045;
                        frontier_phi_104_pred_1 = _3044;
                        frontier_phi_104_pred_2 = _3043;
                        frontier_phi_104_pred_3 = _3042;
                        frontier_phi_104_pred_4 = _3041;
                        frontier_phi_104_pred_5 = _3040;
                    }
                    _2744 = frontier_phi_104_pred;
                    _2742 = frontier_phi_104_pred_1;
                    _2740 = frontier_phi_104_pred_2;
                    _2738 = frontier_phi_104_pred_3;
                    _2736 = frontier_phi_104_pred_4;
                    _2734 = frontier_phi_104_pred_5;
                    uint _2897 = _2896 + 1u;
                    if (_2897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2890 = _2734;
                        _2891 = _2736;
                        _2892 = _2738;
                        _2893 = _2740;
                        _2894 = _2742;
                        _2895 = _2744;
                        _2896 = _2897;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2744;
                frontier_phi_91_92_ladder_1 = _2742;
                frontier_phi_91_92_ladder_2 = _2740;
                frontier_phi_91_92_ladder_3 = _2738;
                frontier_phi_91_92_ladder_4 = _2736;
                frontier_phi_91_92_ladder_5 = _2734;
            }
            else
            {
                frontier_phi_91_92_ladder = _2596;
                frontier_phi_91_92_ladder_1 = _2594;
                frontier_phi_91_92_ladder_2 = _2592;
                frontier_phi_91_92_ladder_3 = _2590;
                frontier_phi_91_92_ladder_4 = _2588;
                frontier_phi_91_92_ladder_5 = _2586;
            }
            _2733 = frontier_phi_91_92_ladder_5;
            _2735 = frontier_phi_91_92_ladder_4;
            _2737 = frontier_phi_91_92_ladder_3;
            _2739 = frontier_phi_91_92_ladder_2;
            _2741 = frontier_phi_91_92_ladder_1;
            _2743 = frontier_phi_91_92_ladder;
        }
        float _2748 = isnan(1.0) ? _943 : (isnan(_943) ? 1.0 : min(_943, 1.0));
        _2465 = (_2748 * _2739) + _2194;
        _2467 = (_2748 * _2741) + _2195;
        _2469 = (_2748 * _2743) + _2196;
        _2471 = ((_2733 * 0.039999999105930328369140625) * _2748) + _2299;
        _2473 = ((_2735 * 0.039999999105930328369140625) * _2748) + _2300;
        _2475 = ((_2737 * 0.039999999105930328369140625) * _2748) + _2301;
    }
    else
    {
        _2465 = _2194;
        _2467 = _2195;
        _2469 = _2196;
        _2471 = _2299;
        _2473 = _2300;
        _2475 = _2301;
    }
    uint _2481 = _919 + uint(cbMatDynParam._m0[0u].w);
    float _2487 = ((_862 * (_850 - (_850 * _823))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2481].x;
    float _2488 = ((_862 * (_851 - (_851 * _823))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2481].y;
    float _2489 = ((_862 * (_852 - (_852 * _823))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2481].z;
    float _4245 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _4256 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _4267 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _2506 = (((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2465 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _943))) + ((_2471 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1644)) * cbPerFrame._m0[3u].x)) + _2487;
    float _2508 = (_2488 + ((_2473 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1644)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2467 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _943)));
    float _2510 = (_2489 + ((_2475 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1644)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2469 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _943)));
    float _4293 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2523 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    uint _2524 = _918 + 6u;
    float _2532 = _904 / cbSceneParam._m0[86u].x;
    float _2533 = _905 / cbSceneParam._m0[86u].y;
    vec4 _2547 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2532, _2533, (log2((isnan(cbSceneParam._m0[77u].w) ? _891 : (isnan(_891) ? cbSceneParam._m0[77u].w : min(_891, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2549 = _2547.x;
    float _2550 = _2547.y;
    float _2551 = _2547.z;
    float _2552 = _2547.w;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_891 > cbSceneParam._m0[78u].w)
    {
        float _2611 = isnan(_891) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _891 : min(cbSceneParam._m0[80u].w, _891));
        float _2612 = _2611 / _891;
        float _2623 = _2612 * _282;
        float _2624 = _283 * _2612;
        float _2625 = (-0.0) - _2624;
        float _2626 = _2612 * _284;
        float _2628 = (cbSceneParam._m0[77u].w * _2625) / _2611;
        float _2629 = _2628 + cbSceneParam._m0[79u].w;
        float _2630 = cbSceneParam._m0[79u].w - _2624;
        float _2636 = sqrt(((_2623 * _2623) + (_2624 * _2624)) + (_2626 * _2626));
        float _2639 = (1.0 - (cbSceneParam._m0[77u].w / _2611)) * _2636;
        float _2644 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2646 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2852;
        if (abs((_2625 - _2628) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2852 = ((((_2629 > 0.0) ? exp2(_2644 * _2629) : (2.0 - exp2(_2646 * _2629))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2639;
        }
        else
        {
            float _2791 = 1.0 / cbSceneParam._m0[80u].x;
            float _2792 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : max(_2629, _2630));
            float _2793 = isnan(_2630) ? _2629 : (isnan(_2629) ? _2630 : min(_2629, _2630));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            float _2803 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : min(_2793, 0.0));
            _2852 = ((abs(_2636 / _2625) * cbSceneParam._m0[80u].y) * ((((_2802 - _2803) * 2.0) - ((exp2(_2644 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0)))) - exp2(_2644 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))))) * _2791)) - ((exp2(_2646 * _2802) - exp2(_2646 * _2803)) * _2791))) + (_2639 * cbSceneParam._m0[80u].z);
        }
        vec4 _2854 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2532, _2533, 1.0), 0.0);
        float _2863 = exp2((_2852 * (-1.44269502162933349609375)) * (1.0 - _2854.w));
        float _2864 = log2(_2863);
        float _2880 = log2(_2552);
        _2648 = (exp2(_2880 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].x)) * _2854.x) / cbSceneParam._m0[78u].x)) + _2549;
        _2650 = (exp2(_2880 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].y)) * _2854.y) / cbSceneParam._m0[78u].y)) + _2550;
        _2652 = (exp2(_2880 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].z)) * _2854.z) / cbSceneParam._m0[78u].z)) + _2551;
        _2654 = _2863 * _2552;
    }
    else
    {
        _2648 = _2549;
        _2650 = _2550;
        _2652 = _2551;
        _2654 = _2552;
    }
    float _2665 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2666 = _2665 == 3.0;
    float _2668 = log2(_2654);
    float _2672 = exp2(_2668 * cbSceneParam._m0[78u].x);
    float _2673 = exp2(_2668 * cbSceneParam._m0[78u].y);
    float _2674 = exp2(_2668 * cbSceneParam._m0[78u].z);
    float _2675 = _2672 * (isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0)));
    float _2676 = _2673 * (isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0)));
    float _2677 = _2674 * (isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0)));
    float _2686 = (_2665 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2686 * (_2666 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2648)));
    SV_Target.y = _2686 * (_2666 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2650)));
    SV_Target.z = _2686 * (_2666 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.w = cbInstanceData._m0[_2524].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2487) * _2523) * _2672) * _2686;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2488) * _2523) * _2673) * _2686;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2489) * _2523) * _2674) * _2686;
    SV_Target_1.w = cbInstanceData._m0[_2524].w;
}


