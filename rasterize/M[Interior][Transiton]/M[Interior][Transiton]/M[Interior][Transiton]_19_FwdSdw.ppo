#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _452;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _296 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _299 = _296.x;
    vec4 _317 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _299) + cbMtdParam._m0[12u].x) * _317.x;
    float _336 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _299) + cbMtdParam._m0[12u].y) * _317.y;
    float _338 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _299) + cbMtdParam._m0[12u].z) * _317.z;
    vec4 _365 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _380 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _387 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _399 = cbMtdParam._m0[28u].z + _280;
    float _400 = cbMtdParam._m0[28u].w + _281;
    float _401 = cbMtdParam._m0[29u].x + _282;
    float _415 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_380 * _210, _380 * _211, _380 * _212));
    float _416 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_387 * _224, _387 * _225, _387 * _226));
    float _417 = (-0.0) - dot(vec3(_399, _400, _401), vec3((-0.0) - _217, (-0.0) - _218, (-0.0) - _219));
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _422 = _421 * _417;
    float _427 = ((cbMtdParam._m0[25u].y * _415) * _421) + (((_365.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _428 = ((cbMtdParam._m0[25u].z * _416) * _421) + (((_365.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _431 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _432 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _450;
    float _453;
    float _455;
    if (_427 > 0.0)
    {
        float _436 = (1.0 - _431) / _427;
        _450 = _436;
        _453 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_436 * _422)) * 0.16666667163372039794921875;
        _455 = (fract((_436 * _428) + _432) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_427 < 0.0)
        {
            float _451 = ((-0.0) - _431) / _427;
            frontier_phi_3_2_ladder = (fract(_451 * _422) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _451;
            frontier_phi_3_2_ladder_2 = (fract((_451 * _428) + _432) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _452;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _450 = frontier_phi_3_2_ladder_1;
        _453 = frontier_phi_3_2_ladder;
        _455 = frontier_phi_3_2_ladder_2;
    }
    float _481;
    float _483;
    float _485;
    if (_428 > 0.0)
    {
        float _468 = (1.0 - _432) / _428;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_468 < _450)
        {
            frontier_phi_8_5_ladder = (fract(_468 * _422) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_468 * _427) + _431) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _468;
        }
        else
        {
            frontier_phi_8_5_ladder = _455;
            frontier_phi_8_5_ladder_1 = _453;
            frontier_phi_8_5_ladder_2 = _450;
        }
        _481 = frontier_phi_8_5_ladder_2;
        _483 = frontier_phi_8_5_ladder_1;
        _485 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_428 < 0.0)
        {
            float _482 = ((-0.0) - _432) / _428;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_482 < _450)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_482 * _422) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_482 * _427) + _431) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _482;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _455;
                frontier_phi_8_6_ladder_9_ladder_1 = _453;
                frontier_phi_8_6_ladder_9_ladder_2 = _450;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _455;
            frontier_phi_8_6_ladder_1 = _453;
            frontier_phi_8_6_ladder_2 = _450;
        }
        _481 = frontier_phi_8_6_ladder_2;
        _483 = frontier_phi_8_6_ladder_1;
        _485 = frontier_phi_8_6_ladder;
    }
    float _489 = (_422 > 0.0) ? (cbMtdParam._m0[20u].z / _422) : 5000.0;
    float _502;
    float _503;
    if (_489 < _481)
    {
        _502 = ((_431 + cbMtdParam._m0[22u].x) + (_489 * _427)) * 0.16666667163372039794921875;
        _503 = (((_489 * _428) + _432) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _502 = _483;
        _503 = _485;
    }
    vec4 _505 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_502, _503));
    float _513 = _299 * 0.1500000059604644775390625;
    float _521 = (_513 * ((_505.x * _299) - _334)) + _334;
    float _522 = (_513 * ((_505.y * _299) - _336)) + _336;
    float _523 = (_513 * ((_505.z * _299) - _338)) + _338;
    vec4 _536 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _540 = _536.z;
    float _543 = (_536.x * 2.0) + (-1.0);
    float _544 = (_536.y * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _3618 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _550 = sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))));
    vec4 _577 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _582 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _588 = ((_577.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _590 = (-0.0) - (cbMtdParam._m0[21u].x * ((_577.x * 0.5) + (-0.25)));
    float _591 = fract(_582);
    float _593 = fract(_582 + 0.5);
    vec4 _620 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_591 * _590) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_588 * _591) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _622 = _620.x;
    float _628 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_593 * _590) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_588 * _593) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _622) * abs((_591 * 2.0) + (-1.0))) + _622;
    float _642 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _646 = fract(abs(_642));
    float _652 = sin(cbMtdParam._m0[21u].z);
    float _653 = cos(cbMtdParam._m0[21u].z);
    float _654 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _655 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _685 = abs(cbMtdParam._m0[20u].w * (((_628 - (((_642 >= ((-0.0) - _642)) ? _646 : ((-0.0) - _646)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_655, (-0.0) - _652, _653 * _654) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_655, _653, _654 * _652) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _689 = (((_685 * cbMtdParam._m0[18u].y) - _628) * _685) + _628;
    float _3629 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _690 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    vec4 _702 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _717 = (cbMtdParam._m0[14u].x * _702.x) * cbMtdParam._m0[19u].x;
    float _718 = (cbMtdParam._m0[14u].y * _702.y) * cbMtdParam._m0[19u].x;
    float _719 = (cbMtdParam._m0[14u].z * _702.z) * cbMtdParam._m0[19u].x;
    float _729 = exp2(log2(_690) * cbMtdParam._m0[20u].x);
    float _742 = fma(_550, _217, fma(_544, _224, _543 * _210));
    float _745 = fma(_550, _218, fma(_544, _225, _543 * _211));
    float _748 = fma(_550, _219, fma(_544, _226, _543 * _212));
    float _752 = inversesqrt(dot(vec3(_742, _745, _748), vec3(_742, _745, _748)));
    float _753 = _752 * _742;
    float _754 = _752 * _745;
    float _755 = _752 * _748;
    float _3640 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _756 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3662 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3673 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _775 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _779 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _780 = _280 * _779;
    float _781 = _281 * _779;
    float _782 = _282 * _779;
    float _788 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _789 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _808 = fma(_755, cbSceneParam._m0[5u].z, fma(_754, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _753));
    float _811 = fma(_755, cbSceneParam._m0[6u].z, fma(_754, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _753));
    float _814 = fma(_755, cbSceneParam._m0[7u].z, fma(_754, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _753));
    uint _827 = uint(roundEven(NORMAL.w)) * 13u;
    uint _828 = _827 + 9u;
    uint _829 = _828 + uint(cbMatDynParam._m0[0u].w);
    float _835 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_829].x;
    float _836 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_829].y;
    float _837 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_829].z;
    float _3684 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    vec4 _849 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _788, cbSceneParam._m0[86u].y * _789));
    float _852 = _849.x * TEXCOORD_4;
    float _853 = dot(vec3(_753, _754, _755), vec3(_780, _781, _782));
    float _856 = _853 * 2.0;
    float _860 = (_856 * _753) - _780;
    float _861 = (_856 * _754) - _781;
    float _862 = (_856 * _755) - _782;
    float _866 = abs(dot(vec3(_780, _781, _782), vec3(_753, _754, _755)));
    float _3717 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _868 = sqrt(_756);
    float _881 = exp2((_868 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_868 * 3.0));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _954 = fma(_921, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _913));
        float _958 = fma(_921, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _913));
        float _962 = fma(_921, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _913));
        float _986 = _913 + _753;
        float _987 = _917 + _754;
        float _988 = _921 + _755;
        float _998 = fma(_988, cbModelParam._m0[26u].z, fma(_987, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _986)) - _954;
        float _999 = fma(_988, cbModelParam._m0[27u].z, fma(_987, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _986)) - _958;
        float _1000 = fma(_988, cbModelParam._m0[28u].z, fma(_987, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _986)) - _962;
        float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
        float _1017 = ((_1004 * _998) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_954 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1004 * _999) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_958 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1004 * _1000) / cbModelParam._m0[34u].z) + ((((((_962 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        float _1056 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1022.x + (-0.5));
        float _1058 = _1056 * (_1022.y + (-0.5));
        float _1059 = _1056 * (_1022.z + (-0.5));
        float _1066 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1029.x + (-0.5));
        float _1068 = _1066 * (_1029.y + (-0.5));
        float _1069 = _1066 * (_1029.z + (-0.5));
        float _1076 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1036.x + (-0.5));
        float _1078 = _1076 * (_1036.y + (-0.5));
        float _1079 = _1076 * (_1036.z + (-0.5));
        float _1086 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1043.x + (-0.5));
        float _1088 = _1086 * (_1043.y + (-0.5));
        float _1089 = _1086 * (_1043.z + (-0.5));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = _1057 * 0.5;
        float _1094 = _1067 * 0.5;
        float _1095 = _1077 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1110 = (dot(vec3(_753, _754, _755), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1120 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3765 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1122 + 1.0))) + _1127) * _1090;
        float _1137 = _1058 * 0.5;
        float _1138 = _1068 * 0.5;
        float _1139 = _1078 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_753, _754, _755), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3798 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1164 + 1.0))) + _1169) * _1091;
        float _1179 = _1059 * 0.5;
        float _1180 = _1069 * 0.5;
        float _1181 = _1079 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_753, _754, _755), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3831 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1206 + 1.0))) + _1211) * _1092;
        _1228 = _1059;
        _1229 = _1058;
        _1230 = _1057;
        _1231 = _1069;
        _1232 = _1068;
        _1233 = _1067;
        _1234 = _1079;
        _1235 = _1078;
        _1236 = _1077;
        _1237 = _1092;
        _1238 = _1091;
        _1239 = _1090;
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
    }
    else
    {
        _1228 = _452;
        _1229 = _452;
        _1230 = _452;
        _1231 = _452;
        _1232 = _452;
        _1233 = _452;
        _1234 = _452;
        _1235 = _452;
        _1236 = _452;
        _1237 = _452;
        _1238 = _452;
        _1239 = _452;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1267 = fma(_921, cbModelParam._m0[30u].z, fma(_917, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _913));
        float _1271 = fma(_921, cbModelParam._m0[31u].z, fma(_917, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _913));
        float _1275 = fma(_921, cbModelParam._m0[32u].z, fma(_917, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _913));
        float _1298 = _913 + _753;
        float _1299 = _917 + _754;
        float _1300 = _921 + _755;
        float _1310 = fma(_1300, cbModelParam._m0[30u].z, fma(_1299, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1298)) - _1267;
        float _1311 = fma(_1300, cbModelParam._m0[31u].z, fma(_1299, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1298)) - _1271;
        float _1312 = fma(_1300, cbModelParam._m0[32u].z, fma(_1299, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1298)) - _1275;
        float _1316 = inversesqrt(dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312)));
        float _1329 = ((_1316 * _1310) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1267 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1316 * _1311) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1271 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1331 = ((_1316 * _1312) / cbModelParam._m0[35u].z) + ((((((_1275 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        float _1366 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1333.x + (-0.5));
        float _1368 = _1366 * (_1333.y + (-0.5));
        float _1369 = _1366 * (_1333.z + (-0.5));
        float _1376 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1340.x + (-0.5));
        float _1378 = _1376 * (_1340.y + (-0.5));
        float _1379 = _1376 * (_1340.z + (-0.5));
        float _1386 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1347.x + (-0.5));
        float _1388 = _1386 * (_1347.y + (-0.5));
        float _1389 = _1386 * (_1347.z + (-0.5));
        float _1396 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1354.x + (-0.5));
        float _1398 = _1396 * (_1354.y + (-0.5));
        float _1399 = _1396 * (_1354.z + (-0.5));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = _1367 * 0.5;
        float _1404 = _1377 * 0.5;
        float _1405 = _1387 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_753, _754, _755), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3894 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1430 + 1.0))) + _1435) * _1400;
        float _1445 = _1368 * 0.5;
        float _1446 = _1378 * 0.5;
        float _1447 = _1388 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_753, _754, _755), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _3927 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1472 + 1.0))) + _1477) * _1401;
        float _1487 = _1369 * 0.5;
        float _1488 = _1379 * 0.5;
        float _1489 = _1389 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_753, _754, _755), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _3960 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1514 + 1.0))) + _1519) * _1402;
        _1536 = _1369;
        _1537 = _1368;
        _1538 = _1367;
        _1539 = _1379;
        _1540 = _1378;
        _1541 = _1377;
        _1542 = _1389;
        _1543 = _1388;
        _1544 = _1387;
        _1545 = _1402;
        _1546 = _1401;
        _1547 = _1400;
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
    }
    else
    {
        _1536 = _452;
        _1537 = _452;
        _1538 = _452;
        _1539 = _452;
        _1540 = _452;
        _1541 = _452;
        _1542 = _452;
        _1543 = _452;
        _1544 = _452;
        _1545 = _452;
        _1546 = _452;
        _1547 = _452;
        _1548 = 0.0;
        _1549 = 0.0;
        _1550 = 0.0;
    }
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1240)) + _1240;
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1241)) + _1241;
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1242)) + _1242;
    float _1583 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1561, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1561, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1561, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1560));
    float _1604 = _860 * 0.5;
    float _1605 = _861 * 0.5;
    float _1606 = _862 * 0.5;
    float _1607 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1610 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1613 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1647;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1620 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1228, _1231, _1234, _1237));
        float _1624 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1628 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1230, _1233, _1236, _1239));
        float _1635 = dot(vec4(cbModelParam._m0[39u]), vec4(_1604, _1605, _1606, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1635) ? 0.0 : (isnan(0.0) ? _1635 : max(0.0, _1635))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1658;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1649 = dot(vec4(cbModelParam._m0[40u]), vec4(_1604, _1605, _1606, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1662 = (_1658 * cbModelParam._m0[1u].x) + (_1647 * (1.0 - cbModelParam._m0[1u].x));
    float _1672 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _756);
    float _1673 = isnan(_1672) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1672 : min(cbModelParam._m0[25u].z, _1672));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1721 = fma(_921, cbModelParam._m0[13u].z, fma(_917, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _913)) + cbModelParam._m0[13u].w;
        float _1725 = fma(_921, cbModelParam._m0[14u].z, fma(_917, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _913)) + cbModelParam._m0[14u].w;
        float _1729 = fma(_921, cbModelParam._m0[15u].z, fma(_917, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _913)) + cbModelParam._m0[15u].w;
        float _1732 = fma(_862, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860));
        float _1735 = fma(_862, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860));
        float _1738 = fma(_862, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860));
        float _1766;
        if (_1732 > 0.0)
        {
            _1766 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1766 = frontier_phi_26_24_ladder;
        }
        float _1934;
        if (_1735 > 0.0)
        {
            _1934 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1934 = frontier_phi_35_31_ladder;
        }
        float _2378;
        if (_1738 > 0.0)
        {
            _2378 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2378 = frontier_phi_47_42_ladder;
        }
        float _2380 = isnan(_1934) ? _1766 : (isnan(_1766) ? _1934 : min(_1766, _1934));
        float _2381 = isnan(_2378) ? _2380 : (isnan(_2380) ? _2378 : min(_2380, _2378));
        float _2385 = (_2381 * _1732) + _1721;
        float _2386 = (_2381 * _1735) + _1725;
        float _2387 = (_2381 * _1738) + _1729;
        float _2388 = _2381 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2388;
        float _2392 = _2388 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 > _2392) || ((_2386 < _2390) || ((_2385 < _2390) || (_2385 > _2392))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2387, cbModelParam._m0[9u].z, fma(_2386, cbModelParam._m0[9u].y, _2385 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2387, cbModelParam._m0[10u].z, fma(_2386, cbModelParam._m0[10u].y, _2385 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2387, cbModelParam._m0[11u].z, fma(_2386, cbModelParam._m0[11u].y, _2385 * cbModelParam._m0[11u].x))), _1673);
            frontier_phi_25_47_ladder = _2647.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2647.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2647.x * cbModelParam._m0[1u].y;
        }
        _1754 = frontier_phi_25_47_ladder_2;
        _1756 = frontier_phi_25_47_ladder_1;
        _1758 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_860, _861, _862), _1673);
        _1754 = _1742.x * cbModelParam._m0[1u].y;
        _1756 = _1742.y * cbModelParam._m0[1u].y;
        _1758 = _1742.z * cbModelParam._m0[1u].y;
    }
    float _1762 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _756);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1762 : min(cbModelParam._m0[25u].w, _1762));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1815 = fma(_921, cbModelParam._m0[21u].z, fma(_917, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _913)) + cbModelParam._m0[21u].w;
        float _1819 = fma(_921, cbModelParam._m0[22u].z, fma(_917, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _913)) + cbModelParam._m0[22u].w;
        float _1823 = fma(_921, cbModelParam._m0[23u].z, fma(_917, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _913)) + cbModelParam._m0[23u].w;
        float _1826 = fma(_862, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860));
        float _1829 = fma(_862, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860));
        float _1832 = fma(_862, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860));
        float _1939;
        if (_1826 > 0.0)
        {
            _1939 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1939 = frontier_phi_37_33_ladder;
        }
        float _2405;
        if (_1829 > 0.0)
        {
            _2405 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2405 = frontier_phi_49_44_ladder;
        }
        float _2776;
        if (_1832 > 0.0)
        {
            _2776 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2776 = frontier_phi_61_56_ladder;
        }
        float _2778 = isnan(_2405) ? _1939 : (isnan(_1939) ? _2405 : min(_1939, _2405));
        float _2779 = isnan(_2776) ? _2778 : (isnan(_2778) ? _2776 : min(_2778, _2776));
        float _2783 = (_2779 * _1826) + _1815;
        float _2784 = (_2779 * _1829) + _1819;
        float _2785 = (_2779 * _1832) + _1823;
        float _2786 = _2779 * 9.9999997473787516355514526367188e-05;
        float _2787 = (-1.0) - _2786;
        float _2789 = _2786 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2785 > _2789) || ((_2785 < _2787) || ((_2784 > _2789) || ((_2784 < _2787) || ((_2783 < _2787) || (_2783 > _2789))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2785, cbModelParam._m0[17u].z, fma(_2784, cbModelParam._m0[17u].y, _2783 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2785, cbModelParam._m0[18u].z, fma(_2784, cbModelParam._m0[18u].y, _2783 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2785, cbModelParam._m0[19u].z, fma(_2784, cbModelParam._m0[19u].y, _2783 * cbModelParam._m0[19u].x))), _1763);
            frontier_phi_34_61_ladder = _2906.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2906.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2906.x * cbModelParam._m0[1u].z;
        }
        _1851 = frontier_phi_34_61_ladder_2;
        _1853 = frontier_phi_34_61_ladder_1;
        _1855 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_860, _861, _862), _1763);
        _1851 = _1835.x * cbModelParam._m0[1u].z;
        _1853 = _1835.y * cbModelParam._m0[1u].z;
        _1855 = _1835.z * cbModelParam._m0[1u].z;
    }
    float _1867 = ((((1.0 - _881) * ((_868 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_881 * _868)) * _852;
    float _1868 = _1867 * ((cbModelParam._m0[1u].w * (_1851 - _1754)) + _1754);
    float _1869 = _1867 * ((cbModelParam._m0[1u].w * (_1853 - _1756)) + _1756);
    float _1870 = _1867 * ((cbModelParam._m0[1u].w * (_1855 - _1758)) + _1758);
    float _1873 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1869, cbSceneParam._m0[89u].y, _1868 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1869, cbSceneParam._m0[90u].y, _1868 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1869, cbSceneParam._m0[91u].y, _1868 * cbSceneParam._m0[91u].x));
    float _1913 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1925 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1926 = _1913 / _1925;
    float _1927 = _1917 / _1925;
    float _1928 = _1921 / _1925;
    float _2075;
    float _2076;
    float _2077;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1955 = ((uint(_1928 > cbSceneParam._m0[59u].y) + uint(_1928 > cbSceneParam._m0[59u].x)) + uint(_1928 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1956 = _1955 + 43u;
        uint _1964 = _1955 + 44u;
        uint _1972 = _1955 + 45u;
        uint _1980 = _1955 + 46u;
        float _1991 = fma(_1925, cbSceneParam._m0[_1956].w, fma(_1921, cbSceneParam._m0[_1956].z, fma(_1917, cbSceneParam._m0[_1956].y, _1913 * cbSceneParam._m0[_1956].x)));
        float _1995 = fma(_1925, cbSceneParam._m0[_1964].w, fma(_1921, cbSceneParam._m0[_1964].z, fma(_1917, cbSceneParam._m0[_1964].y, _1913 * cbSceneParam._m0[_1964].x)));
        float _2003 = fma(_1925, cbSceneParam._m0[_1980].w, fma(_1921, cbSceneParam._m0[_1980].z, fma(_1917, cbSceneParam._m0[_1980].y, _1913 * cbSceneParam._m0[_1980].x)));
        float _2008 = cbSceneParam._m0[33u].z * _2003;
        float _2010 = cbSceneParam._m0[33u].w * _2003;
        float _2013 = fma(_1925, cbSceneParam._m0[_1972].w, fma(_1921, cbSceneParam._m0[_1972].z, fma(_1917, cbSceneParam._m0[_1972].y, _1913 * cbSceneParam._m0[_1972].x))) / _2003;
        float _2061 = (cbSceneParam._m0[33u].x - sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928))) * cbSceneParam._m0[33u].y;
        float _4086 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2068 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2008 + _1991) / _2003, (_2010 + _1995) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2010 + _1991) / _2003, (_1995 - _2008) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 - _2008) / _2003, (_1995 - _2010) / _2003), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 - _2010) / _2003, (_2008 + _1995) / _2003), _2013), 0.0)).x), vec4(0.25)));
        _2075 = 1.0 - (_2068 * cbSceneParam._m0[34u].x);
        _2076 = 1.0 - (_2068 * cbSceneParam._m0[34u].y);
        _2077 = 1.0 - (_2068 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2075 = 1.0;
        _2076 = 1.0;
        _2077 = 1.0;
    }
    float _2141;
    float _2143;
    float _2145;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2129 = fma(_1925, cbSceneParam._m0[63u].w, fma(_1921, cbSceneParam._m0[63u].z, fma(_1917, cbSceneParam._m0[63u].y, _1913 * cbSceneParam._m0[63u].x)));
        float _2130 = fma(_1925, cbSceneParam._m0[60u].w, fma(_1921, cbSceneParam._m0[60u].z, fma(_1917, cbSceneParam._m0[60u].y, _1913 * cbSceneParam._m0[60u].x))) / _2129;
        float _2131 = fma(_1925, cbSceneParam._m0[61u].w, fma(_1921, cbSceneParam._m0[61u].z, fma(_1917, cbSceneParam._m0[61u].y, _1913 * cbSceneParam._m0[61u].x))) / _2129;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_2130 >= cbSceneParam._m0[64u].x) && (_2131 >= cbSceneParam._m0[64u].y)) && (_2130 <= cbSceneParam._m0[64u].z)) && (_2131 <= cbSceneParam._m0[64u].w))
        {
            float _2418 = fma(_1925, cbSceneParam._m0[62u].w, fma(_1921, cbSceneParam._m0[62u].z, fma(_1917, cbSceneParam._m0[62u].y, _1913 * cbSceneParam._m0[62u].x))) / _2129;
            float _2422 = isnan(cbSceneParam._m0[41u].w) ? _2418 : (isnan(_2418) ? cbSceneParam._m0[41u].w : max(_2418, cbSceneParam._m0[41u].w));
            float _2465 = (cbSceneParam._m0[33u].x - sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928))) * cbSceneParam._m0[33u].y;
            float _4102 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
            float _2472 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2130, cbSceneParam._m0[33u].w + _2131), _2422), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2130, _2131 - cbSceneParam._m0[33u].z), _2422), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2130 - cbSceneParam._m0[33u].z, _2131 - cbSceneParam._m0[33u].w), _2422), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2130 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2131), _2422), 0.0)).x), vec4(0.25)));
            float _2476 = 1.0 - (_2472 * cbSceneParam._m0[34u].x);
            float _2477 = 1.0 - (_2472 * cbSceneParam._m0[34u].y);
            float _2478 = 1.0 - (_2472 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2478) ? _2077 : (isnan(_2077) ? _2478 : min(_2077, _2478));
            frontier_phi_46_45_ladder_1 = isnan(_2477) ? _2076 : (isnan(_2076) ? _2477 : min(_2076, _2477));
            frontier_phi_46_45_ladder_2 = isnan(_2476) ? _2075 : (isnan(_2075) ? _2476 : min(_2075, _2476));
        }
        else
        {
            frontier_phi_46_45_ladder = _2077;
            frontier_phi_46_45_ladder_1 = _2076;
            frontier_phi_46_45_ladder_2 = _2075;
        }
        _2141 = frontier_phi_46_45_ladder_2;
        _2143 = frontier_phi_46_45_ladder_1;
        _2145 = frontier_phi_46_45_ladder;
    }
    else
    {
        _2141 = _2075;
        _2143 = _2076;
        _2145 = _2077;
    }
    uvec4 _2150 = floatBitsToUint(cbInstanceData._m0[_827 + 5u]);
    uint _2152 = _2150.x * 14u;
    uint _2153 = _2152 + 13u;
    float _2158 = _852 + (-1.0);
    float _2161 = (cbLight._m0[_2153].x * _2158) + 1.0;
    float _2162 = (cbLight._m0[_2153].y * _2158) + 1.0;
    uint _2163 = _2152 + 5u;
    float _2169 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2173 = _2152 + 4u;
    float _2182 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
    uint _2186 = _2152 | 1u;
    float _2197 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_753, _754, _755));
    float _2200 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_753, _754, _755));
    float _4138 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _4149 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2205 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * 0.3183098733425140380859375;
    float _2207 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.3183098733425140380859375;
    float _2214 = ((cbLight._m0[_2163].x * _2169) * _2207) + (((cbLight._m0[_2173].x * _2141) * _2182) * _2205);
    float _2215 = ((_2169 * cbLight._m0[_2163].y) * _2207) + (((cbLight._m0[_2173].y * _2143) * _2182) * _2205);
    float _2216 = ((_2169 * cbLight._m0[_2163].z) * _2207) + (((cbLight._m0[_2173].z * _2145) * _2182) * _2205);
    uint _2218 = _2152 + 8u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _756) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_2152].x + _780;
    float _2234 = cbLight._m0[_2152].y + _781;
    float _2235 = cbLight._m0[_2152].z + _782;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2152].xyz));
    float _4160 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _2247 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2248 = dot(vec3(_753, _754, _755), vec3(_2240, _2241, _2242));
    float _4182 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2240, _2241, _2242));
    float _4193 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2232 * _2232;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2272 = 1.0 - _2232;
    float _2283 = (0.5 / (((_2247 * ((_2246 * _2272) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2272) + _2232) * _2246))) * _2246;
    float _4204 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2285 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    uint _2299 = _2152 + 9u;
    float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _756) * 0.949999988079071044921875);
    float _2311 = _2310 * _2310;
    float _2312 = cbLight._m0[_2186].x + _780;
    float _2313 = cbLight._m0[_2186].y + _781;
    float _2314 = cbLight._m0[_2186].z + _782;
    float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
    float _2319 = _2318 * _2312;
    float _2320 = _2318 * _2313;
    float _2321 = _2318 * _2314;
    float _2322 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2186].xyz));
    float _4215 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2326 = dot(vec3(_753, _754, _755), vec3(_2319, _2320, _2321));
    float _4226 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2330 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2319, _2320, _2321));
    float _4237 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = _2311 * _2311;
    float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
    float _2347 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2348 = 1.0 - _2311;
    float _2358 = (0.5 / (((_2247 * ((_2325 * _2348) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2348) + _2311) * _2325))) * _2325;
    float _4248 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2360 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
    float _2370 = (((_2347 * cbLight._m0[_2299].x) * _2360) * _2169) + ((((cbLight._m0[_2218].x * _2141) * _2271) * _2285) * _2182);
    float _2371 = (((_2347 * cbLight._m0[_2299].y) * _2360) * _2169) + ((((cbLight._m0[_2218].y * _2143) * _2271) * _2285) * _2182);
    float _2372 = (((_2347 * cbLight._m0[_2299].z) * _2360) * _2169) + ((((cbLight._m0[_2218].z * _2145) * _2271) * _2285) * _2182);
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    if (_2150.y == 0u)
    {
        uvec4 _2490 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2491 = _2490.x;
        uint _2502 = uint((float(_2490.y) * floor(float(uint(cbSceneParam._m0[85u].y * _789) / _2491))) + floor(float(uint(cbSceneParam._m0[85u].x * _788) / _2491)));
        float _2512 = (log2(_1928 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2513 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        uint _2516 = uint(isnan(14.0) ? _2513 : (isnan(_2513) ? 14.0 : min(_2513, 14.0)));
        uvec4 _2521 = texelFetch(g_lightClusterGridBuffer, int(((_2516 << 2u) + (_2502 << 6u)) >> 2u));
        uint _2522 = _2521.x;
        uint _2523 = _2490.z;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        if (((((1u << ((_2523 >> 4u) & 15u)) + 4294967295u) & _2522) == 0u) || ((_2523 & 240u) == 0u))
        {
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
        }
        else
        {
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            uint _2840 = 0u;
            uint _2849;
            bool _2850;
            for (;;)
            {
                _2849 = texelFetch(g_lightClassification, int((((_2516 << 5u) + (_2502 << 9u)) + (_2840 << 2u)) >> 2u)).x;
                _2850 = _2849 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2850)
                {
                    frontier_phi_70_pred = _2837;
                    frontier_phi_70_pred_1 = _2839;
                    frontier_phi_70_pred_2 = _2838;
                    frontier_phi_70_pred_3 = _2836;
                    frontier_phi_70_pred_4 = _2835;
                    frontier_phi_70_pred_5 = _2834;
                }
                else
                {
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    uint _2985;
                    _2979 = _2834;
                    _2980 = _2835;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2849;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    for (;;)
                    {
                        uint _2989 = uint(findLSB(_2985)) + (_2840 << 5u);
                        uint _2986 = (_2985 + 4294967295u) & _2985;
                        uint _2991 = _2989 * 48u;
                        vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 3u)).x));
                        uint _3011 = (_2989 * 48u) + 4u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 3u)).x));
                        uint _3030 = (_2989 * 48u) + 8u;
                        vec3 _3041 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x));
                        float _3045 = _3005.x - _1926;
                        float _3046 = _3005.y - _1927;
                        float _3047 = _3005.z - _1928;
                        float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                        float _3051 = inversesqrt(_3048);
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3055 = dot(vec3(_808, _811, _814), vec3(_3052, _3053, _3054));
                        float _3060 = 1.0 - (_3048 * _3005.w);
                        float _4269 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _3062 = sqrt(_3048) * _3024.w;
                        float _3065 = 1.39999997615814208984375 / (_3062 + 1.39999997615814208984375);
                        float _3066 = _3065 * _3065;
                        float _3069 = ((1.0 - _3066) * _3055) + _3066;
                        float _3072 = _3062 * _3062;
                        float _3076 = ((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3061) / ((_3072 * 0.699999988079071044921875) + 1.0);
                        float _3080 = (-0.0) - _1926;
                        float _3081 = (-0.0) - _1927;
                        float _3082 = (-0.0) - _1928;
                        float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3096 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                        float _3097 = 1.0 - _868;
                        float _3104 = sqrt(1.0 - ((1.0 - (_3097 * _3097)) * (1.0 - (_3096 * _3096))));
                        float _3105 = _3104 * _3104;
                        float _3106 = _3105 * _3105;
                        float _3107 = _3087 + _3052;
                        float _3108 = _3088 + _3053;
                        float _3109 = _3089 + _3054;
                        float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                        float _3117 = dot(vec3(_808, _811, _814), vec3(_3087, _3088, _3089));
                        float _4285 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _3121 = dot(vec3(_808, _811, _814), vec3(_3113 * _3107, _3113 * _3108, _3113 * _3109));
                        float _4296 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _3128 = ((_3124 * _3124) * (_3106 + (-1.0))) + 1.0;
                        float _3129 = _3065 * _3105;
                        float _3130 = _3129 * _3129;
                        float _3133 = ((1.0 - _3130) * _3055) + _3130;
                        float _4307 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _3135 = 1.0 - _3105;
                        float _3145 = (0.5 / (((_3134 * ((_3120 * _3135) + _3105)) + 9.9999999392252902907785028219223e-09) + (((_3134 * _3135) + _3105) * _3120))) * _3134;
                        float _4318 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3156 = (((_3106 * 3.1415927410125732421875) * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) / ((_3128 * _3128) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125))) * _3061;
                        _2914 = (_3076 * _3024.x) + _2982;
                        _2915 = (_3076 * _3024.y) + _2983;
                        _2916 = (_3076 * _3024.z) + _2984;
                        _2911 = (_3156 * _3041.x) + _2979;
                        _2912 = (_3156 * _3041.y) + _2980;
                        _2913 = (_3156 * _3041.z) + _2981;
                        if (_2986 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2914;
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2986;
                        }
                    }
                    frontier_phi_70_pred = _2914;
                    frontier_phi_70_pred_1 = _2916;
                    frontier_phi_70_pred_2 = _2915;
                    frontier_phi_70_pred_3 = _2913;
                    frontier_phi_70_pred_4 = _2912;
                    frontier_phi_70_pred_5 = _2911;
                }
                _2663 = frontier_phi_70_pred;
                _2667 = frontier_phi_70_pred_1;
                _2665 = frontier_phi_70_pred_2;
                _2661 = frontier_phi_70_pred_3;
                _2659 = frontier_phi_70_pred_4;
                _2657 = frontier_phi_70_pred_5;
                uint _2841 = _2840 + 1u;
                if (_2841 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2834 = _2657;
                    _2835 = _2659;
                    _2836 = _2661;
                    _2837 = _2663;
                    _2838 = _2665;
                    _2839 = _2667;
                    _2840 = _2841;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
        }
        uvec4 _2670 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2671 = _2670.z;
        uint _2673 = (_2671 >> 8u) & 15u;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        if (((4294967295u << _2673) & _2522) == 0u)
        {
            _2802 = _2656;
            _2804 = _2658;
            _2806 = _2660;
            _2808 = _2662;
            _2810 = _2664;
            _2812 = _2666;
        }
        else
        {
            float _2827 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
            float _2828 = _2827 * _1926;
            float _2829 = _2827 * _1927;
            float _2830 = _2827 * _1928;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2673 < ((_2671 >> 12u) & 15u))
            {
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2962 = _2656;
                float _2963 = _2658;
                float _2964 = _2660;
                float _2965 = _2662;
                float _2966 = _2664;
                float _2967 = _2666;
                uint _2968 = _2673;
                uint _2977;
                bool _2978;
                for (;;)
                {
                    _2977 = texelFetch(g_lightClassification, int((((_2516 << 5u) + (_2502 << 9u)) + (_2968 << 2u)) >> 2u)).x;
                    _2978 = _2977 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2978)
                    {
                        frontier_phi_76_pred = _2967;
                        frontier_phi_76_pred_1 = _2966;
                        frontier_phi_76_pred_2 = _2965;
                        frontier_phi_76_pred_3 = _2964;
                        frontier_phi_76_pred_4 = _2963;
                        frontier_phi_76_pred_5 = _2962;
                    }
                    else
                    {
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3174 = _2962;
                        float _3175 = _2963;
                        float _3176 = _2964;
                        float _3177 = _2965;
                        float _3178 = _2966;
                        float _3179 = _2967;
                        uint _3180 = _2977;
                        uint _3181;
                        vec4 _3206;
                        float _3207;
                        vec4 _3222;
                        vec3 _3234;
                        vec4 _3250;
                        vec4 _3265;
                        float _3311;
                        bool _3312;
                        for (;;)
                        {
                            uint _3191 = ((_2968 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3180));
                            _3181 = (_3180 + 4294967295u) & _3180;
                            uint _3193 = _3191 * 40u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            _3207 = _3206.w;
                            uint _3209 = (_3191 * 40u) + 4u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3224 = (_3191 * 40u) + 8u;
                            _3234 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x));
                            uint _3237 = (_3191 * 40u) + 16u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3252 = (_3191 * 40u) + 20u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3267 = (_3191 * 40u) + 24u;
                            vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3286 = (_3191 * 40u) + 28u;
                            vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            _3311 = fma(_1928, _3299.z, fma(_1927, _3299.y, _3299.x * _1926)) + _3299.w;
                            _3312 = !((fma(_1928, _3280.z, fma(_1927, _3280.y, _3280.x * _1926)) + _3280.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3312)
                            {
                                float _3339 = _3206.x - _1926;
                                float _3340 = _3206.y - _1927;
                                float _3341 = _3206.z - _1928;
                                float _3342 = dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341));
                                float _3345 = inversesqrt(_3342);
                                float _3346 = _3345 * _3339;
                                float _3347 = _3345 * _3340;
                                float _3348 = _3345 * _3341;
                                float _3352 = 1.0 - (_3342 / (_3207 * _3207));
                                float _4329 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3357 = sqrt(_3342) * _3222.w;
                                float _3359 = 1.39999997615814208984375 / (_3357 + 1.39999997615814208984375);
                                float _3360 = _3359 * _3359;
                                float _3363 = ((1.0 - _3360) * dot(vec3(_3346, _3347, _3348), vec3(_808, _811, _814))) + _3360;
                                float _3366 = _3357 * _3357;
                                float _3370 = (fma(_1928, _3250.z, fma(_1927, _3250.y, _3250.x * _1926)) + _3250.w) / _3311;
                                float _3371 = (fma(_1928, _3265.z, fma(_1927, _3265.y, _3265.x * _1926)) + _3265.w) / _3311;
                                float _3375 = 1.0 - dot(vec2(_3370, _3371), vec2(_3370, _3371));
                                float _4345 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3376 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3377 = _3376 * (((isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0))) * _3353) / ((_3366 * 0.699999988079071044921875) + 1.0));
                                float _3389 = exp2(log2(1.0 / ((_3366 * 3.5) + 5.0)) * 0.25);
                                float _3390 = 1.0 - _868;
                                float _3397 = sqrt(1.0 - ((1.0 - (_3390 * _3390)) * (1.0 - (_3389 * _3389))));
                                float _3398 = _3397 * _3397;
                                float _3399 = _3398 * _3398;
                                float _3400 = _3346 - _2828;
                                float _3401 = _3347 - _2829;
                                float _3402 = _3348 - _2830;
                                float _3406 = inversesqrt(dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402)));
                                float _3410 = dot(vec3(_808, _811, _814), vec3((-0.0) - _2828, (-0.0) - _2829, (-0.0) - _2830));
                                float _4356 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3413 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3414 = dot(vec3(_808, _811, _814), vec3(_3406 * _3400, _3406 * _3401, _3406 * _3402));
                                float _4367 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3417 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3421 = ((_3417 * _3417) * (_3399 + (-1.0))) + 1.0;
                                float _3422 = _3359 * _3398;
                                float _3423 = _3422 * _3422;
                                float _3429 = ((1.0 - _3423) * dot(vec3(_808, _811, _814), vec3(_3346, _3347, _3348))) + _3423;
                                float _4378 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3431 = 1.0 - _3398;
                                float _3441 = (0.5 / (((_3430 * ((_3413 * _3431) + _3398)) + 9.9999999392252902907785028219223e-09) + (((_3430 * _3431) + _3398) * _3413))) * _3430;
                                float _4389 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3451 = (_3376 * _3353) * (((_3399 * 3.1415927410125732421875) * (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) / ((_3421 * _3421) * ((_3366 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3377 * _3222.z;
                                frontier_phi_82_pred_1 = _3377 * _3222.y;
                                frontier_phi_82_pred_2 = _3377 * _3222.x;
                                frontier_phi_82_pred_3 = _3451 * _3234.z;
                                frontier_phi_82_pred_4 = _3451 * _3234.y;
                                frontier_phi_82_pred_5 = _3451 * _3234.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3460 = frontier_phi_82_pred;
                            _3459 = frontier_phi_82_pred_1;
                            _3458 = frontier_phi_82_pred_2;
                            _3457 = frontier_phi_82_pred_3;
                            _3456 = frontier_phi_82_pred_4;
                            _3455 = frontier_phi_82_pred_5;
                            _3164 = _3458 + _3177;
                            _3165 = _3459 + _3178;
                            _3166 = _3460 + _3179;
                            _3161 = _3455 + _3174;
                            _3162 = _3456 + _3175;
                            _3163 = _3457 + _3176;
                            if (_3181 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3181;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3166;
                        frontier_phi_76_pred_1 = _3165;
                        frontier_phi_76_pred_2 = _3164;
                        frontier_phi_76_pred_3 = _3163;
                        frontier_phi_76_pred_4 = _3162;
                        frontier_phi_76_pred_5 = _3161;
                    }
                    _2813 = frontier_phi_76_pred;
                    _2811 = frontier_phi_76_pred_1;
                    _2809 = frontier_phi_76_pred_2;
                    _2807 = frontier_phi_76_pred_3;
                    _2805 = frontier_phi_76_pred_4;
                    _2803 = frontier_phi_76_pred_5;
                    uint _2969 = _2968 + 1u;
                    if (_2969 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2962 = _2803;
                        _2963 = _2805;
                        _2964 = _2807;
                        _2965 = _2809;
                        _2966 = _2811;
                        _2967 = _2813;
                        _2968 = _2969;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2811;
                frontier_phi_63_64_ladder_1 = _2813;
                frontier_phi_63_64_ladder_2 = _2809;
                frontier_phi_63_64_ladder_3 = _2807;
                frontier_phi_63_64_ladder_4 = _2805;
                frontier_phi_63_64_ladder_5 = _2803;
            }
            else
            {
                frontier_phi_63_64_ladder = _2664;
                frontier_phi_63_64_ladder_1 = _2666;
                frontier_phi_63_64_ladder_2 = _2662;
                frontier_phi_63_64_ladder_3 = _2660;
                frontier_phi_63_64_ladder_4 = _2658;
                frontier_phi_63_64_ladder_5 = _2656;
            }
            _2802 = frontier_phi_63_64_ladder_5;
            _2804 = frontier_phi_63_64_ladder_4;
            _2806 = frontier_phi_63_64_ladder_3;
            _2808 = frontier_phi_63_64_ladder_2;
            _2810 = frontier_phi_63_64_ladder;
            _2812 = frontier_phi_63_64_ladder_1;
        }
        float _2817 = isnan(1.0) ? _852 : (isnan(_852) ? 1.0 : min(_852, 1.0));
        _2535 = (_2817 * _2808) + _2214;
        _2537 = (_2817 * _2810) + _2215;
        _2539 = (_2817 * _2812) + _2216;
        _2541 = ((_2802 * 0.039999999105930328369140625) * _2817) + _2370;
        _2543 = ((_2804 * 0.039999999105930328369140625) * _2817) + _2371;
        _2545 = ((_2806 * 0.039999999105930328369140625) * _2817) + _2372;
    }
    else
    {
        _2535 = _2214;
        _2537 = _2215;
        _2539 = _2216;
        _2541 = _2370;
        _2543 = _2371;
        _2545 = _2372;
    }
    uint _2551 = _828 + uint(cbMatDynParam._m0[0u].w);
    float _2557 = ((_729 * (_717 - (_717 * _690))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2551].x;
    float _2558 = ((_729 * (_718 - (_718 * _690))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2551].y;
    float _2559 = ((_729 * (_719 - (_719 * _690))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2551].z;
    float _4405 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4416 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4427 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _2576 = (((isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2535 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _852))) + ((_2541 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1662)) * cbPerFrame._m0[3u].x)) + _2557;
    float _2578 = (_2558 + ((_2543 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1662)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2537 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _852)));
    float _2580 = (_2559 + ((_2545 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1662)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2539 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _852)));
    float _4453 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2593 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    uint _2594 = _827 + 6u;
    float _2602 = _788 / cbSceneParam._m0[86u].x;
    float _2603 = _789 / cbSceneParam._m0[86u].y;
    vec4 _2617 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, (log2((isnan(cbSceneParam._m0[77u].w) ? _775 : (isnan(_775) ? cbSceneParam._m0[77u].w : min(_775, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2619 = _2617.x;
    float _2620 = _2617.y;
    float _2621 = _2617.z;
    float _2622 = _2617.w;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_775 > cbSceneParam._m0[78u].w)
    {
        float _2681 = isnan(_775) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _775 : min(cbSceneParam._m0[80u].w, _775));
        float _2682 = _2681 / _775;
        float _2693 = _2682 * _280;
        float _2694 = _281 * _2682;
        float _2695 = (-0.0) - _2694;
        float _2696 = _2682 * _282;
        float _2698 = (cbSceneParam._m0[77u].w * _2695) / _2681;
        float _2699 = _2698 + cbSceneParam._m0[79u].w;
        float _2700 = cbSceneParam._m0[79u].w - _2694;
        float _2706 = sqrt(((_2693 * _2693) + (_2694 * _2694)) + (_2696 * _2696));
        float _2709 = (1.0 - (cbSceneParam._m0[77u].w / _2681)) * _2706;
        float _2714 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2716 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2924;
        if (abs((_2695 - _2698) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2924 = ((((_2699 > 0.0) ? exp2(_2714 * _2699) : (2.0 - exp2(_2716 * _2699))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2709;
        }
        else
        {
            float _2863 = 1.0 / cbSceneParam._m0[80u].x;
            float _2864 = isnan(_2700) ? _2699 : (isnan(_2699) ? _2700 : max(_2699, _2700));
            float _2865 = isnan(_2700) ? _2699 : (isnan(_2699) ? _2700 : min(_2699, _2700));
            float _2874 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : min(_2864, 0.0));
            float _2875 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : min(_2865, 0.0));
            _2924 = ((abs(_2706 / _2695) * cbSceneParam._m0[80u].y) * ((((_2874 - _2875) * 2.0) - ((exp2(_2714 * (isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0)))) - exp2(_2714 * (isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0))))) * _2863)) - ((exp2(_2716 * _2874) - exp2(_2716 * _2875)) * _2863))) + (_2709 * cbSceneParam._m0[80u].z);
        }
        vec4 _2926 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, 1.0), 0.0);
        float _2935 = exp2((_2924 * (-1.44269502162933349609375)) * (1.0 - _2926.w));
        float _2936 = log2(_2935);
        float _2952 = log2(_2622);
        _2718 = (exp2(_2952 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].x)) * _2926.x) / cbSceneParam._m0[78u].x)) + _2619;
        _2720 = (exp2(_2952 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].y)) * _2926.y) / cbSceneParam._m0[78u].y)) + _2620;
        _2722 = (exp2(_2952 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].z)) * _2926.z) / cbSceneParam._m0[78u].z)) + _2621;
        _2724 = _2935 * _2622;
    }
    else
    {
        _2718 = _2619;
        _2720 = _2620;
        _2722 = _2621;
        _2724 = _2622;
    }
    float _2735 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2736 = _2735 == 3.0;
    float _2737 = log2(_2724);
    float _2741 = exp2(_2737 * cbSceneParam._m0[78u].x);
    float _2742 = exp2(_2737 * cbSceneParam._m0[78u].y);
    float _2743 = exp2(_2737 * cbSceneParam._m0[78u].z);
    float _2744 = _2741 * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0)));
    float _2745 = _2742 * (isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0)));
    float _2746 = _2743 * (isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0)));
    float _2755 = (_2735 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2755 * (_2736 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2718)));
    SV_Target.y = _2755 * (_2736 ? _2745 : (_2745 + (cbSceneParam._m0[72u].w * _2720)));
    SV_Target.z = _2755 * (_2736 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2722)));
    SV_Target.w = cbInstanceData._m0[_2594].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2557) * _2593) * _2741) * _2755;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2558) * _2593) * _2742) * _2755;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2559) * _2593) * _2743) * _2755;
    SV_Target_1.w = cbInstanceData._m0[_2594].w;
}


