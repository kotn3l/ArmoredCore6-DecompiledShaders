#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1542;
float _3757;
float _3758;
float _3759;
float _3760;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _280 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _290 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _280);
    float _291 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _280);
    float _292 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _280);
    vec4 _306 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _309 = _306.x;
    vec4 _327 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _344 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _309) + cbMtdParam._m0[12u].x) * _327.x;
    float _346 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _309) + cbMtdParam._m0[12u].y) * _327.y;
    float _348 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _309) + cbMtdParam._m0[12u].z) * _327.z;
    vec4 _366 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _405 = cbMtdParam._m0[27u].w + _290;
    float _406 = cbMtdParam._m0[28u].x + _291;
    float _407 = cbMtdParam._m0[28u].y + _292;
    float _421 = (-0.0) - dot(vec3(_405, _406, _407), vec3(_220, _221, _222));
    float _422 = (-0.0) - dot(vec3(_405, _406, _407), vec3(_234, _235, _236));
    float _423 = (-0.0) - dot(vec3(_405, _406, _407), vec3((-0.0) - _227, (-0.0) - _228, (-0.0) - _229));
    float _427 = inversesqrt(dot(vec3(_421, _422, _423), vec3(_421, _422, _423)));
    float _430 = _427 * _423;
    float _431 = (_427 * _421) + ((cbMtdParam._m0[25u].w * _309) * ((_366.x * 2.0) + (-1.0)));
    float _432 = (_427 * _422) + ((cbMtdParam._m0[26u].x * _309) * ((_366.y * 2.0) + (-1.0)));
    float _433 = _431 * cbMtdParam._m0[24u].x;
    float _434 = _432 * cbMtdParam._m0[23u].w;
    float _435 = fract(TEXCOORD.x);
    float _436 = fract(TEXCOORD.y);
    float _442;
    if (_433 > 0.0)
    {
        _442 = (1.0 - _435) / _433;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_433 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _435) / _433;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _442 = frontier_phi_3_2_ladder;
    }
    float _450;
    if (_434 > 0.0)
    {
        _450 = (1.0 - _436) / _434;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_434 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _436) / _434;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _450 = frontier_phi_7_6_ladder;
    }
    bool _452 = _430 > 0.0;
    float _454 = _452 ? (cbMtdParam._m0[17u].x / _430) : 5000.0;
    float _455 = isnan(_450) ? _442 : (isnan(_442) ? _450 : min(_442, _450));
    float _456 = isnan(_454) ? _455 : (isnan(_455) ? _454 : min(_455, _454));
    float _460 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _461 = _435 + (-0.5);
    float _464 = _436 + (-0.5);
    float _467 = ((_456 * _430) + _460) / _460;
    vec4 _492 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_461 + (_456 * _433)) / _467) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_464 + (_456 * _434)) / _467) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _505 = (_492.x * _309) * cbMtdParam._m0[9u].x;
    float _506 = (_492.y * _309) * cbMtdParam._m0[9u].y;
    float _507 = (_492.z * _309) * cbMtdParam._m0[9u].z;
    float _525 = _431 * cbMtdParam._m0[26u].z;
    float _526 = _432 * cbMtdParam._m0[26u].y;
    bool _527 = _525 > 0.0;
    float _532;
    if (_527)
    {
        _532 = (1.0 - _435) / _525;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _435) / _525;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _532 = frontier_phi_11_10_ladder;
    }
    bool _534 = _526 > 0.0;
    float _539;
    if (_534)
    {
        _539 = (1.0 - _436) / _526;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_526 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _436) / _526;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _539 = frontier_phi_15_14_ladder;
    }
    float _542 = _452 ? (cbMtdParam._m0[19u].z / _430) : 5000.0;
    float _543 = isnan(_539) ? _532 : (isnan(_532) ? _539 : min(_532, _539));
    float _544 = isnan(_542) ? _543 : (isnan(_543) ? _542 : min(_543, _542));
    float _548 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _552 = ((_544 * _430) + _548) / _548;
    float _557 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _559 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _575 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_461 + (_544 * _525)) / _552) + 0.5) + _557) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_464 + (_544 * _526)) / _552) + 0.5) + _559) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _590;
    if (_527)
    {
        _590 = (1.0 - _435) / _525;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _435) / _525;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _590 = frontier_phi_19_18_ladder;
    }
    float _596;
    if (_534)
    {
        _596 = (1.0 - _436) / _526;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_526 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _436) / _526;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _596 = frontier_phi_23_22_ladder;
    }
    float _598 = isnan(_596) ? _590 : (isnan(_590) ? _596 : min(_590, _596));
    float _599 = isnan(_542) ? _598 : (isnan(_598) ? _542 : min(_598, _542));
    float _606 = ((_599 * _430) + _548) / _548;
    vec4 _626 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_461 + (_599 * _525)) / _606) + 0.5) + _557) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_464 + (_599 * _526)) / _606) + 0.5) + _559) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _628 = _626.x;
    float _638 = (((((cbMtdParam._m0[10u].x * _309) * _575.x) - _505) * _309) * _628) + _505;
    float _639 = (((((cbMtdParam._m0[10u].y * _309) * _575.y) - _506) * _309) * _628) + _506;
    float _640 = (((((cbMtdParam._m0[10u].z * _309) * _575.z) - _507) * _309) * _628) + _507;
    float _653 = _431 * cbMtdParam._m0[27u].x;
    float _654 = _432 * cbMtdParam._m0[26u].w;
    bool _655 = _653 > 0.0;
    float _660;
    if (_655)
    {
        _660 = (1.0 - _435) / _653;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_653 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _435) / _653;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _660 = frontier_phi_27_26_ladder;
    }
    bool _662 = _654 > 0.0;
    float _667;
    if (_662)
    {
        _667 = (1.0 - _436) / _654;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_654 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _436) / _654;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _667 = frontier_phi_31_30_ladder;
    }
    float _670 = _452 ? (cbMtdParam._m0[23u].x / _430) : 5000.0;
    float _671 = isnan(_667) ? _660 : (isnan(_660) ? _667 : min(_660, _667));
    float _672 = isnan(_670) ? _671 : (isnan(_671) ? _670 : min(_671, _670));
    float _676 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _680 = ((_672 * _430) + _676) / _676;
    float _685 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _687 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _703 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_461 + (_672 * _653)) / _680) + 0.5) + _685) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_464 + (_672 * _654)) / _680) + 0.5) + _687) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _718;
    if (_655)
    {
        _718 = (1.0 - _435) / _653;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_653 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _435) / _653;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _718 = frontier_phi_35_34_ladder;
    }
    float _724;
    if (_662)
    {
        _724 = (1.0 - _436) / _654;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_654 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _436) / _654;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _724 = frontier_phi_39_38_ladder;
    }
    float _726 = isnan(_724) ? _718 : (isnan(_718) ? _724 : min(_718, _724));
    float _727 = isnan(_670) ? _726 : (isnan(_726) ? _670 : min(_726, _670));
    float _734 = ((_727 * _430) + _676) / _676;
    vec4 _754 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_461 + (_727 * _653)) / _734) + 0.5) + _685) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_464 + (_727 * _654)) / _734) + 0.5) + _687) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _756 = _754.x;
    float _766 = (((((cbMtdParam._m0[13u].x * _309) * _703.x) - _638) * _309) * _756) + _638;
    float _767 = (((((cbMtdParam._m0[13u].y * _309) * _703.y) - _639) * _309) * _756) + _639;
    float _768 = (((((cbMtdParam._m0[13u].z * _309) * _703.z) - _640) * _309) * _756) + _640;
    vec4 _781 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _785 = _781.z;
    float _788 = (_781.x * 2.0) + (-1.0);
    float _789 = (_781.y * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _3819 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _795 = sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))));
    float _804 = (cbMtdParam._m0[19u].y * _766) * cbMtdParam._m0[16u].x;
    float _806 = (cbMtdParam._m0[19u].y * _767) * cbMtdParam._m0[16u].y;
    float _808 = (cbMtdParam._m0[19u].y * _768) * cbMtdParam._m0[16u].z;
    vec4 _832 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _837 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _843 = ((_832.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _845 = (-0.0) - (cbMtdParam._m0[21u].x * ((_832.x * 0.5) + (-0.25)));
    float _846 = fract(_837);
    float _848 = fract(_837 + 0.5);
    vec4 _875 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_846 * _845) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_843 * _846) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _877 = _875.x;
    float _883 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_848 * _845) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_843 * _848) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _877) * abs((_846 * 2.0) + (-1.0))) + _877;
    float _889 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _893 = fract(abs(_889));
    float _903 = sin(cbMtdParam._m0[21u].z);
    float _904 = cos(cbMtdParam._m0[21u].z);
    float _905 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _906 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _931 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_906, (-0.0) - _903, _904 * _905) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_906, _904, _905 * _903) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_889 >= ((-0.0) - _889)) ? _893 : ((-0.0) - _893)) * cbMtdParam._m0[18u].z) - _883)) + cbMtdParam._m0[18u].w;
    float _932 = ceil(_931);
    float _3830 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _933 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _953 = ((((cbMtdParam._m0[21u].w * _766) * cbMtdParam._m0[15u].x) - _804) * _933) + _804;
    float _954 = ((((cbMtdParam._m0[21u].w * _767) * cbMtdParam._m0[15u].y) - _806) * _933) + _806;
    float _955 = ((((cbMtdParam._m0[21u].w * _768) * cbMtdParam._m0[15u].z) - _808) * _933) + _808;
    float _959 = abs(cbMtdParam._m0[20u].w * _931);
    float _963 = (((_959 * cbMtdParam._m0[18u].y) - _883) * _959) + _883;
    float _3841 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _964 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    vec4 _976 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _991 = (cbMtdParam._m0[14u].x * _976.x) * cbMtdParam._m0[19u].x;
    float _992 = (cbMtdParam._m0[14u].y * _976.y) * cbMtdParam._m0[19u].x;
    float _993 = (cbMtdParam._m0[14u].z * _976.z) * cbMtdParam._m0[19u].x;
    float _1000 = exp2(log2(_964) * cbMtdParam._m0[20u].x);
    float _1022 = fma(_795, _227, fma(_789, _234, _788 * _220));
    float _1025 = fma(_795, _228, fma(_789, _235, _788 * _221));
    float _1028 = fma(_795, _229, fma(_789, _236, _788 * _222));
    float _1032 = inversesqrt(dot(vec3(_1022, _1025, _1028), vec3(_1022, _1025, _1028)));
    float _1033 = _1032 * _1022;
    float _1034 = _1032 * _1025;
    float _1035 = _1032 * _1028;
    float _3852 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _1036 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3874 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3885 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _1055 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1059 = inversesqrt(dot(vec3(_290, _291, _292), vec3(_290, _291, _292)));
    float _1060 = _290 * _1059;
    float _1061 = _291 * _1059;
    float _1062 = _292 * _1059;
    vec4 _1067 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1069 = _1067.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1224 = sqrt(((_290 * _290) + (_291 * _291)) + (_292 * _292));
        float _1230 = (cbMatDynParam._m0[5u].x * _1224) + cbMatDynParam._m0[5u].y;
        float _3896 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1235 = (cbMatDynParam._m0[5u].z * _1224) + cbMatDynParam._m0[5u].w;
        float _3907 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) - _1231)) + _1231) < ((_1069 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1081 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1082 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1100 = fma(_1035, cbSceneParam._m0[5u].z, fma(_1034, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1033));
    float _1103 = fma(_1035, cbSceneParam._m0[6u].z, fma(_1034, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1033));
    float _1106 = fma(_1035, cbSceneParam._m0[7u].z, fma(_1034, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1033));
    uint _1119 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1120 = _1119 + 9u;
    uint _1121 = _1120 + uint(cbMatDynParam._m0[0u].w);
    float _1127 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_1121].x;
    float _1128 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_1121].y;
    float _1129 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_1121].z;
    float _3918 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _1130 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1131 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _1132 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    vec4 _1141 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1081, cbSceneParam._m0[86u].y * _1082));
    float _1144 = _1141.x * TEXCOORD_4;
    float _1145 = dot(vec3(_1033, _1034, _1035), vec3(_1060, _1061, _1062));
    float _1148 = _1145 * 2.0;
    float _1152 = (_1148 * _1033) - _1060;
    float _1153 = (_1148 * _1034) - _1061;
    float _1154 = (_1148 * _1035) - _1062;
    float _1158 = abs(dot(vec3(_1060, _1061, _1062), vec3(_1033, _1034, _1035)));
    float _3951 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _1160 = sqrt(_1036);
    float _1173 = exp2((_1160 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1160 * 3.0));
    float _1205 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1209 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1213 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1541;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1268 = fma(_1213, cbModelParam._m0[26u].z, fma(_1209, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1205));
        float _1272 = fma(_1213, cbModelParam._m0[27u].z, fma(_1209, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1205));
        float _1276 = fma(_1213, cbModelParam._m0[28u].z, fma(_1209, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1205));
        float _1299 = _1205 + _1033;
        float _1300 = _1209 + _1034;
        float _1301 = _1213 + _1035;
        float _1311 = fma(_1301, cbModelParam._m0[26u].z, fma(_1300, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1299)) - _1268;
        float _1312 = fma(_1301, cbModelParam._m0[27u].z, fma(_1300, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1299)) - _1272;
        float _1313 = fma(_1301, cbModelParam._m0[28u].z, fma(_1300, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1299)) - _1276;
        float _1317 = inversesqrt(dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313)));
        float _1330 = ((_1317 * _1311) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1268 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1331 = ((_1317 * _1312) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1272 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1317 * _1313) / cbModelParam._m0[34u].z) + ((((((_1276 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        float _1369 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1335.x + (-0.5));
        float _1371 = _1369 * (_1335.y + (-0.5));
        float _1372 = _1369 * (_1335.z + (-0.5));
        float _1379 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1342.x + (-0.5));
        float _1381 = _1379 * (_1342.y + (-0.5));
        float _1382 = _1379 * (_1342.z + (-0.5));
        float _1389 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1349.x + (-0.5));
        float _1391 = _1389 * (_1349.y + (-0.5));
        float _1392 = _1389 * (_1349.z + (-0.5));
        float _1399 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1356.x + (-0.5));
        float _1401 = _1399 * (_1356.y + (-0.5));
        float _1402 = _1399 * (_1356.z + (-0.5));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = _1370 * 0.5;
        float _1407 = _1380 * 0.5;
        float _1408 = _1390 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1423 = (dot(vec3(_1033, _1034, _1035), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1433 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _3999 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1435 + 1.0))) + _1440) * _1403;
        float _1450 = _1371 * 0.5;
        float _1451 = _1381 * 0.5;
        float _1452 = _1391 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_1033, _1034, _1035), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4032 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1477 + 1.0))) + _1482) * _1404;
        float _1492 = _1372 * 0.5;
        float _1493 = _1382 * 0.5;
        float _1494 = _1392 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_1033, _1034, _1035), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4065 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1519 + 1.0))) + _1524) * _1405;
        _1541 = _1372;
        _1543 = _1371;
        _1544 = _1370;
        _1545 = _1382;
        _1546 = _1381;
        _1547 = _1380;
        _1548 = _1392;
        _1549 = _1391;
        _1550 = _1390;
        _1551 = _1405;
        _1552 = _1404;
        _1553 = _1403;
        _1554 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1555 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1556 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
    }
    else
    {
        _1541 = _1542;
        _1543 = _1542;
        _1544 = _1542;
        _1545 = _1542;
        _1546 = _1542;
        _1547 = _1542;
        _1548 = _1542;
        _1549 = _1542;
        _1550 = _1542;
        _1551 = _1542;
        _1552 = _1542;
        _1553 = _1542;
        _1554 = 0.0;
        _1555 = 0.0;
        _1556 = 0.0;
    }
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1584 = fma(_1213, cbModelParam._m0[30u].z, fma(_1209, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1205));
        float _1588 = fma(_1213, cbModelParam._m0[31u].z, fma(_1209, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1205));
        float _1592 = fma(_1213, cbModelParam._m0[32u].z, fma(_1209, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1205));
        float _1615 = _1205 + _1033;
        float _1616 = _1209 + _1034;
        float _1617 = _1213 + _1035;
        float _1627 = fma(_1617, cbModelParam._m0[30u].z, fma(_1616, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1615)) - _1584;
        float _1628 = fma(_1617, cbModelParam._m0[31u].z, fma(_1616, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1615)) - _1588;
        float _1629 = fma(_1617, cbModelParam._m0[32u].z, fma(_1616, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1615)) - _1592;
        float _1633 = inversesqrt(dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629)));
        float _1646 = ((_1633 * _1627) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1584 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1647 = ((_1633 * _1628) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1588 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1648 = ((_1633 * _1629) / cbModelParam._m0[35u].z) + ((((((_1592 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1646, _1647, _1648), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1646, _1647, _1648), 0.0);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1646, _1647, _1648), 0.0);
        vec4 _1671 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1646, _1647, _1648), 0.0);
        float _1683 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1684 = _1683 * (_1650.x + (-0.5));
        float _1685 = _1683 * (_1650.y + (-0.5));
        float _1686 = _1683 * (_1650.z + (-0.5));
        float _1693 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1694 = _1693 * (_1657.x + (-0.5));
        float _1695 = _1693 * (_1657.y + (-0.5));
        float _1696 = _1693 * (_1657.z + (-0.5));
        float _1703 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1664.x + (-0.5));
        float _1705 = _1703 * (_1664.y + (-0.5));
        float _1706 = _1703 * (_1664.z + (-0.5));
        float _1713 = exp2((_1671.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1671.x + (-0.5));
        float _1715 = _1713 * (_1671.y + (-0.5));
        float _1716 = _1713 * (_1671.z + (-0.5));
        float _1717 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1718 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1719 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1720 = _1684 * 0.5;
        float _1721 = _1694 * 0.5;
        float _1722 = _1704 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_1033, _1034, _1035), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1717 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4128 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1747 + 1.0))) + _1752) * _1717;
        float _1762 = _1685 * 0.5;
        float _1763 = _1695 * 0.5;
        float _1764 = _1705 * 0.5;
        float _1765 = dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764));
        float _1770 = (_1765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1765);
        float _1778 = (dot(vec3(_1033, _1034, _1035), vec3(_1770 * _1762, _1770 * _1763, _1770 * _1764)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764)) / (_1718 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1789 = _1788 * 2.0;
        float _1793 = (1.0 - _1788) / (_1788 + 1.0);
        float _4161 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1803 = ((((1.0 - _1794) * (_1789 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1789 + 1.0))) + _1794) * _1718;
        float _1804 = _1686 * 0.5;
        float _1805 = _1696 * 0.5;
        float _1806 = _1706 * 0.5;
        float _1807 = dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806));
        float _1812 = (_1807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1807);
        float _1820 = (dot(vec3(_1033, _1034, _1035), vec3(_1812 * _1804, _1812 * _1805, _1812 * _1806)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1829 = sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806)) / (_1719 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1831 = _1830 * 2.0;
        float _1835 = (1.0 - _1830) / (_1830 + 1.0);
        float _4194 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1845 = ((((1.0 - _1836) * (_1831 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1831 + 1.0))) + _1836) * _1719;
        _1853 = _1686;
        _1854 = _1685;
        _1855 = _1684;
        _1856 = _1696;
        _1857 = _1695;
        _1858 = _1694;
        _1859 = _1706;
        _1860 = _1705;
        _1861 = _1704;
        _1862 = _1719;
        _1863 = _1718;
        _1864 = _1717;
        _1865 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
        _1866 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)));
        _1867 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)));
    }
    else
    {
        _1853 = _1542;
        _1854 = _1542;
        _1855 = _1542;
        _1856 = _1542;
        _1857 = _1542;
        _1858 = _1542;
        _1859 = _1542;
        _1860 = _1542;
        _1861 = _1542;
        _1862 = _1542;
        _1863 = _1542;
        _1864 = _1542;
        _1865 = 0.0;
        _1866 = 0.0;
        _1867 = 0.0;
    }
    float _1877 = (cbModelParam._m0[1u].x * (_1865 - _1554)) + _1554;
    float _1878 = (cbModelParam._m0[1u].x * (_1866 - _1555)) + _1555;
    float _1879 = (cbModelParam._m0[1u].x * (_1867 - _1556)) + _1556;
    float _1900 = fma(_1879, cbSceneParam._m0[89u].z, fma(_1878, cbSceneParam._m0[89u].y, _1877 * cbSceneParam._m0[89u].x));
    float _1903 = fma(_1879, cbSceneParam._m0[90u].z, fma(_1878, cbSceneParam._m0[90u].y, _1877 * cbSceneParam._m0[90u].x));
    float _1906 = fma(_1879, cbSceneParam._m0[91u].z, fma(_1878, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1877));
    float _1921 = _1152 * 0.5;
    float _1922 = _1153 * 0.5;
    float _1923 = _1154 * 0.5;
    float _1924 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1855, _1858, _1861, _1864));
    float _1927 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1854, _1857, _1860, _1863));
    float _1930 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1853, _1856, _1859, _1862));
    float _1964;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1937 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1541, _1545, _1548, _1551));
        float _1941 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1543, _1546, _1549, _1552));
        float _1945 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1544, _1547, _1550, _1553));
        float _1952 = dot(vec4(cbModelParam._m0[39u]), vec4(_1921, _1922, _1923, 1.0));
        _1964 = dot(vec3(isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0)), isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1952) ? 0.0 : (isnan(0.0) ? _1952 : max(0.0, _1952))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1964 = 1.0;
    }
    float _1975;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1966 = dot(vec4(cbModelParam._m0[40u]), vec4(_1921, _1922, _1923, 1.0));
        _1975 = dot(vec3(isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1966) ? 0.0 : (isnan(0.0) ? _1966 : max(0.0, _1966))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1975 = 1.0;
    }
    float _1979 = (_1975 * cbModelParam._m0[1u].x) + (_1964 * (1.0 - cbModelParam._m0[1u].x));
    float _1989 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1036);
    float _1990 = isnan(_1989) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1989 : min(cbModelParam._m0[25u].z, _1989));
    float _2070;
    float _2072;
    float _2074;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2037 = fma(_1213, cbModelParam._m0[13u].z, fma(_1209, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1205)) + cbModelParam._m0[13u].w;
        float _2041 = fma(_1213, cbModelParam._m0[14u].z, fma(_1209, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1205)) + cbModelParam._m0[14u].w;
        float _2045 = fma(_1213, cbModelParam._m0[15u].z, fma(_1209, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1205)) + cbModelParam._m0[15u].w;
        float _2048 = fma(_1154, cbModelParam._m0[13u].z, fma(_1153, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1152));
        float _2051 = fma(_1154, cbModelParam._m0[14u].z, fma(_1153, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1152));
        float _2054 = fma(_1154, cbModelParam._m0[15u].z, fma(_1153, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1152));
        float _2082;
        if (_2048 > 0.0)
        {
            _2082 = abs((1.0 - _2037) / _2048);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_2037 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _2082 = frontier_phi_57_55_ladder;
        }
        float _2451;
        if (_2051 > 0.0)
        {
            _2451 = abs((1.0 - _2041) / _2051);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_2041 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2451 = frontier_phi_66_62_ladder;
        }
        float _2793;
        if (_2054 > 0.0)
        {
            _2793 = abs((1.0 - _2045) / _2054);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_2045 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2793 = frontier_phi_80_73_ladder;
        }
        float _2795 = isnan(_2451) ? _2082 : (isnan(_2082) ? _2451 : min(_2082, _2451));
        float _2796 = isnan(_2793) ? _2795 : (isnan(_2795) ? _2793 : min(_2795, _2793));
        float _2800 = (_2796 * _2048) + _2037;
        float _2801 = (_2796 * _2051) + _2041;
        float _2802 = (_2796 * _2054) + _2045;
        float _2803 = _2796 * 9.9999997473787516355514526367188e-05;
        float _2804 = (-1.0) - _2803;
        float _2806 = _2803 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2802 > _2806) || ((_2802 < _2804) || ((_2801 > _2806) || ((_2801 < _2804) || ((_2800 < _2804) || (_2800 > _2806))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2802, cbModelParam._m0[9u].z, fma(_2801, cbModelParam._m0[9u].y, _2800 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2802, cbModelParam._m0[10u].z, fma(_2801, cbModelParam._m0[10u].y, _2800 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2802, cbModelParam._m0[11u].z, fma(_2801, cbModelParam._m0[11u].y, _2800 * cbModelParam._m0[11u].x))), _1990);
            frontier_phi_56_80_ladder = _2944.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2944.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2944.x * cbModelParam._m0[1u].y;
        }
        _2070 = frontier_phi_56_80_ladder_2;
        _2072 = frontier_phi_56_80_ladder_1;
        _2074 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _2058 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1152, _1153, _1154), _1990);
        _2070 = _2058.x * cbModelParam._m0[1u].y;
        _2072 = _2058.y * cbModelParam._m0[1u].y;
        _2074 = _2058.z * cbModelParam._m0[1u].y;
    }
    float _2078 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1036);
    float _2079 = isnan(_2078) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2078 : min(cbModelParam._m0[25u].w, _2078));
    float _2167;
    float _2169;
    float _2171;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2131 = fma(_1213, cbModelParam._m0[21u].z, fma(_1209, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1205)) + cbModelParam._m0[21u].w;
        float _2135 = fma(_1213, cbModelParam._m0[22u].z, fma(_1209, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1205)) + cbModelParam._m0[22u].w;
        float _2139 = fma(_1213, cbModelParam._m0[23u].z, fma(_1209, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1205)) + cbModelParam._m0[23u].w;
        float _2142 = fma(_1154, cbModelParam._m0[21u].z, fma(_1153, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1152));
        float _2145 = fma(_1154, cbModelParam._m0[22u].z, fma(_1153, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1152));
        float _2148 = fma(_1154, cbModelParam._m0[23u].z, fma(_1153, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1152));
        float _2456;
        if (_2142 > 0.0)
        {
            _2456 = abs((1.0 - _2131) / _2142);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_2142 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_2131 + 1.0) / _2142);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2456 = frontier_phi_68_64_ladder;
        }
        float _2819;
        if (_2145 > 0.0)
        {
            _2819 = abs((1.0 - _2135) / _2145);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_2145 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_2135 + 1.0) / _2145);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2819 = frontier_phi_82_75_ladder;
        }
        float _3009;
        if (_2148 > 0.0)
        {
            _3009 = abs((1.0 - _2139) / _2148);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_2148 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_2139 + 1.0) / _2148);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _3009 = frontier_phi_100_93_ladder;
        }
        float _3011 = isnan(_2819) ? _2456 : (isnan(_2456) ? _2819 : min(_2456, _2819));
        float _3012 = isnan(_3009) ? _3011 : (isnan(_3011) ? _3009 : min(_3011, _3009));
        float _3016 = (_3012 * _2142) + _2131;
        float _3017 = (_3012 * _2145) + _2135;
        float _3018 = (_3012 * _2148) + _2139;
        float _3019 = _3012 * 9.9999997473787516355514526367188e-05;
        float _3020 = (-1.0) - _3019;
        float _3022 = _3019 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_3018 > _3022) || ((_3018 < _3020) || ((_3017 > _3022) || ((_3017 < _3020) || ((_3016 < _3020) || (_3016 > _3022))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3260 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3018, cbModelParam._m0[17u].z, fma(_3017, cbModelParam._m0[17u].y, _3016 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3018, cbModelParam._m0[18u].z, fma(_3017, cbModelParam._m0[18u].y, _3016 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3018, cbModelParam._m0[19u].z, fma(_3017, cbModelParam._m0[19u].y, _3016 * cbModelParam._m0[19u].x))), _2079);
            frontier_phi_65_100_ladder = _3260.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3260.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3260.z * cbModelParam._m0[1u].z;
        }
        _2167 = frontier_phi_65_100_ladder_1;
        _2169 = frontier_phi_65_100_ladder;
        _2171 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _2151 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1152, _1153, _1154), _2079);
        _2167 = _2151.x * cbModelParam._m0[1u].z;
        _2169 = _2151.y * cbModelParam._m0[1u].z;
        _2171 = _2151.z * cbModelParam._m0[1u].z;
    }
    float _2183 = ((((1.0 - _1173) * ((_1160 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1173 * _1160)) * _1144;
    float _2184 = _2183 * ((cbModelParam._m0[1u].w * (_2167 - _2070)) + _2070);
    float _2185 = _2183 * ((cbModelParam._m0[1u].w * (_2169 - _2072)) + _2072);
    float _2186 = _2183 * ((cbModelParam._m0[1u].w * (_2171 - _2074)) + _2074);
    float _2189 = fma(_2186, cbSceneParam._m0[89u].z, fma(_2185, cbSceneParam._m0[89u].y, _2184 * cbSceneParam._m0[89u].x));
    float _2192 = fma(_2186, cbSceneParam._m0[90u].z, fma(_2185, cbSceneParam._m0[90u].y, _2184 * cbSceneParam._m0[90u].x));
    float _2195 = fma(_2186, cbSceneParam._m0[91u].z, fma(_2185, cbSceneParam._m0[91u].y, _2184 * cbSceneParam._m0[91u].x));
    vec4 _2203 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1081, _1082));
    float _2205 = _2203.w;
    float _2217 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2205);
    float _2218 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2205);
    float _2219 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2205);
    uvec4 _2223 = floatBitsToUint(cbInstanceData._m0[_1119 + 5u]);
    uint _2225 = _2223.x * 14u;
    uint _2226 = _2225 + 13u;
    float _2231 = _1144 + (-1.0);
    float _2234 = (cbLight._m0[_2226].x * _2231) + 1.0;
    float _2235 = (cbLight._m0[_2226].y * _2231) + 1.0;
    uint _2236 = _2225 + 5u;
    float _2242 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
    uint _2246 = _2225 + 4u;
    float _2255 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
    uint _2259 = _2225 | 1u;
    float _2270 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_1033, _1034, _1035));
    float _2273 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_1033, _1034, _1035));
    float _4330 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _4341 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2278 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.3183098733425140380859375;
    float _2280 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.3183098733425140380859375;
    float _2287 = ((cbLight._m0[_2236].x * _2242) * _2280) + (((cbLight._m0[_2246].x * _2217) * _2255) * _2278);
    float _2288 = ((_2242 * cbLight._m0[_2236].y) * _2280) + (((cbLight._m0[_2246].y * _2218) * _2255) * _2278);
    float _2289 = ((_2242 * cbLight._m0[_2236].z) * _2280) + (((cbLight._m0[_2246].z * _2219) * _2255) * _2278);
    uint _2291 = _2225 + 8u;
    float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _1036) * 0.949999988079071044921875);
    float _2305 = _2304 * _2304;
    float _2306 = cbLight._m0[_2225].x + _1060;
    float _2307 = cbLight._m0[_2225].y + _1061;
    float _2308 = cbLight._m0[_2225].z + _1062;
    float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
    float _2313 = _2312 * _2306;
    float _2314 = _2312 * _2307;
    float _2315 = _2312 * _2308;
    float _2316 = dot(vec3(_1033, _1034, _1035), vec3(cbLight._m0[_2225].xyz));
    float _4352 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _2320 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2321 = dot(vec3(_1033, _1034, _1035), vec3(_2313, _2314, _2315));
    float _4374 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2325 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2313, _2314, _2315));
    float _4385 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2329 = _2305 * _2305;
    float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
    float _2344 = (exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2345 = 1.0 - _2305;
    float _2356 = (0.5 / (((_2320 * ((_2319 * _2345) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2345) + _2305) * _2319))) * _2319;
    float _4396 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2358 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
    uint _2372 = _2225 + 9u;
    float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _1036) * 0.949999988079071044921875);
    float _2384 = _2383 * _2383;
    float _2385 = cbLight._m0[_2259].x + _1060;
    float _2386 = cbLight._m0[_2259].y + _1061;
    float _2387 = cbLight._m0[_2259].z + _1062;
    float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
    float _2392 = _2391 * _2385;
    float _2393 = _2391 * _2386;
    float _2394 = _2391 * _2387;
    float _2395 = dot(vec3(_1033, _1034, _1035), vec3(cbLight._m0[_2259].xyz));
    float _4407 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2399 = dot(vec3(_1033, _1034, _1035), vec3(_2392, _2393, _2394));
    float _4418 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2403 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2392, _2393, _2394));
    float _4429 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2407 = _2384 * _2384;
    float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
    float _2420 = (exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2421 = 1.0 - _2384;
    float _2431 = (0.5 / (((_2320 * ((_2398 * _2421) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2421) + _2384) * _2398))) * _2398;
    float _4440 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2433 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
    float _2443 = (((_2420 * cbLight._m0[_2372].x) * _2433) * _2242) + ((((cbLight._m0[_2291].x * _2217) * _2344) * _2358) * _2255);
    float _2444 = (((_2420 * cbLight._m0[_2372].y) * _2433) * _2242) + ((((cbLight._m0[_2291].y * _2218) * _2344) * _2358) * _2255);
    float _2445 = (((_2420 * cbLight._m0[_2372].z) * _2433) * _2242) + ((((cbLight._m0[_2291].z * _2219) * _2344) * _2358) * _2255);
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    if (_2223.y == 0u)
    {
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2500;
        float _2502 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2500;
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2500;
        uvec4 _2515 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2516 = _2515.x;
        uint _2527 = uint((float(_2515.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1082) / _2516))) + floor(float(uint(cbSceneParam._m0[85u].x * _1081) / _2516)));
        float _2537 = (log2(_2503 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2538 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        uint _2541 = uint(isnan(14.0) ? _2538 : (isnan(_2538) ? 14.0 : min(_2538, 14.0)));
        uvec4 _2546 = texelFetch(g_lightClusterGridBuffer, int(((_2541 << 2u) + (_2527 << 6u)) >> 2u));
        uint _2547 = _2546.x;
        uint _2548 = _2515.z;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        if (((((1u << ((_2548 >> 4u) & 15u)) + 4294967295u) & _2547) == 0u) || ((_2548 & 240u) == 0u))
        {
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
        }
        else
        {
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            uint _2862 = 0u;
            uint _2871;
            bool _2872;
            for (;;)
            {
                _2871 = texelFetch(g_lightClassification, int((((_2541 << 5u) + (_2527 << 9u)) + (_2862 << 2u)) >> 2u)).x;
                _2872 = _2871 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2872)
                {
                    frontier_phi_95_pred = _2857;
                    frontier_phi_95_pred_1 = _2856;
                    frontier_phi_95_pred_2 = _2858;
                    frontier_phi_95_pred_3 = _2861;
                    frontier_phi_95_pred_4 = _2860;
                    frontier_phi_95_pred_5 = _2859;
                }
                else
                {
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    uint _3058;
                    _3052 = _2856;
                    _3053 = _2857;
                    _3054 = _2858;
                    _3055 = _2859;
                    _3056 = _2860;
                    _3057 = _2861;
                    _3058 = _2871;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    for (;;)
                    {
                        uint _3062 = uint(findLSB(_3058)) + (_2862 << 5u);
                        uint _3059 = (_3058 + 4294967295u) & _3058;
                        uint _3064 = _3062 * 48u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3084 = (_3062 * 48u) + 4u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3103 = (_3062 * 48u) + 8u;
                        vec3 _3114 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x));
                        float _3118 = _3078.x - _2501;
                        float _3119 = _3078.y - _2502;
                        float _3120 = _3078.z - _2503;
                        float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                        float _3124 = inversesqrt(_3121);
                        float _3125 = _3124 * _3118;
                        float _3126 = _3124 * _3119;
                        float _3127 = _3124 * _3120;
                        float _3128 = dot(vec3(_1100, _1103, _1106), vec3(_3125, _3126, _3127));
                        float _3133 = 1.0 - (_3121 * _3078.w);
                        float _4461 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3135 = sqrt(_3121) * _3097.w;
                        float _3138 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                        float _3139 = _3138 * _3138;
                        float _3142 = ((1.0 - _3139) * _3128) + _3139;
                        float _3145 = _3135 * _3135;
                        float _3149 = ((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3134) / ((_3145 * 0.699999988079071044921875) + 1.0);
                        float _3153 = (-0.0) - _2501;
                        float _3154 = (-0.0) - _2502;
                        float _3155 = (-0.0) - _2503;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3170 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                        float _3171 = 1.0 - _1160;
                        float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                        float _3179 = _3178 * _3178;
                        float _3180 = _3179 * _3179;
                        float _3181 = _3160 + _3125;
                        float _3182 = _3161 + _3126;
                        float _3183 = _3162 + _3127;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3191 = dot(vec3(_1100, _1103, _1106), vec3(_3160, _3161, _3162));
                        float _4477 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3195 = dot(vec3(_1100, _1103, _1106), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                        float _4488 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                        float _3203 = _3138 * _3179;
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3128) + _3204;
                        float _4499 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3209 = 1.0 - _3179;
                        float _3219 = (0.5 / (((_3208 * ((_3194 * _3209) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3179) * _3194))) * _3208;
                        float _4510 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3230 = (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) / ((_3202 * _3202) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125))) * _3134;
                        _2956 = (_3149 * _3097.x) + _3055;
                        _2957 = (_3149 * _3097.y) + _3056;
                        _2958 = (_3149 * _3097.z) + _3057;
                        _2953 = (_3230 * _3114.x) + _3052;
                        _2954 = (_3230 * _3114.y) + _3053;
                        _2955 = (_3230 * _3114.z) + _3054;
                        if (_3059 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3052 = _2953;
                            _3053 = _2954;
                            _3054 = _2955;
                            _3055 = _2956;
                            _3056 = _2957;
                            _3057 = _2958;
                            _3058 = _3059;
                        }
                    }
                    frontier_phi_95_pred = _2954;
                    frontier_phi_95_pred_1 = _2953;
                    frontier_phi_95_pred_2 = _2955;
                    frontier_phi_95_pred_3 = _2958;
                    frontier_phi_95_pred_4 = _2957;
                    frontier_phi_95_pred_5 = _2956;
                }
                _2667 = frontier_phi_95_pred;
                _2665 = frontier_phi_95_pred_1;
                _2669 = frontier_phi_95_pred_2;
                _2675 = frontier_phi_95_pred_3;
                _2673 = frontier_phi_95_pred_4;
                _2671 = frontier_phi_95_pred_5;
                uint _2863 = _2862 + 1u;
                if (_2863 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2856 = _2665;
                    _2857 = _2667;
                    _2858 = _2669;
                    _2859 = _2671;
                    _2860 = _2673;
                    _2861 = _2675;
                    _2862 = _2863;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
        }
        uvec4 _2678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2679 = _2678.z;
        uint _2681 = (_2679 >> 8u) & 15u;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        if (((4294967295u << _2681) & _2547) == 0u)
        {
            _2824 = _2664;
            _2826 = _2666;
            _2828 = _2668;
            _2830 = _2670;
            _2832 = _2672;
            _2834 = _2674;
        }
        else
        {
            float _2849 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
            float _2850 = _2849 * _2501;
            float _2851 = _2849 * _2502;
            float _2852 = _2849 * _2503;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2681 < ((_2679 >> 12u) & 15u))
            {
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _3035 = _2664;
                float _3036 = _2666;
                float _3037 = _2668;
                float _3038 = _2670;
                float _3039 = _2672;
                float _3040 = _2674;
                uint _3041 = _2681;
                uint _3050;
                bool _3051;
                for (;;)
                {
                    _3050 = texelFetch(g_lightClassification, int((((_2541 << 5u) + (_2527 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                    _3051 = _3050 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_3051)
                    {
                        frontier_phi_109_pred = _3036;
                        frontier_phi_109_pred_1 = _3035;
                        frontier_phi_109_pred_2 = _3040;
                        frontier_phi_109_pred_3 = _3039;
                        frontier_phi_109_pred_4 = _3038;
                        frontier_phi_109_pred_5 = _3037;
                    }
                    else
                    {
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3278 = _3035;
                        float _3279 = _3036;
                        float _3280 = _3037;
                        float _3281 = _3038;
                        float _3282 = _3039;
                        float _3283 = _3040;
                        uint _3284 = _3050;
                        uint _3285;
                        vec4 _3310;
                        float _3311;
                        vec4 _3326;
                        vec3 _3338;
                        vec4 _3353;
                        vec4 _3368;
                        float _3414;
                        bool _3415;
                        for (;;)
                        {
                            uint _3295 = ((_3041 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3284));
                            _3285 = (_3284 + 4294967295u) & _3284;
                            uint _3297 = _3295 * 40u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3311 = _3310.w;
                            uint _3313 = (_3295 * 40u) + 4u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3295 * 40u) + 8u;
                            _3338 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x));
                            uint _3340 = (_3295 * 40u) + 16u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3355 = (_3295 * 40u) + 20u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3370 = (_3295 * 40u) + 24u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3389 = (_3295 * 40u) + 28u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            _3414 = fma(_2503, _3402.z, fma(_2502, _3402.y, _3402.x * _2501)) + _3402.w;
                            _3415 = !((fma(_2503, _3383.z, fma(_2502, _3383.y, _3383.x * _2501)) + _3383.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3415)
                            {
                                float _3442 = _3310.x - _2501;
                                float _3443 = _3310.y - _2502;
                                float _3444 = _3310.z - _2503;
                                float _3445 = dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444));
                                float _3448 = inversesqrt(_3445);
                                float _3449 = _3448 * _3442;
                                float _3450 = _3448 * _3443;
                                float _3451 = _3448 * _3444;
                                float _3455 = 1.0 - (_3445 / (_3311 * _3311));
                                float _4521 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3460 = sqrt(_3445) * _3326.w;
                                float _3462 = 1.39999997615814208984375 / (_3460 + 1.39999997615814208984375);
                                float _3463 = _3462 * _3462;
                                float _3466 = ((1.0 - _3463) * dot(vec3(_3449, _3450, _3451), vec3(_1100, _1103, _1106))) + _3463;
                                float _3469 = _3460 * _3460;
                                float _3473 = (fma(_2503, _3353.z, fma(_2502, _3353.y, _3353.x * _2501)) + _3353.w) / _3414;
                                float _3474 = (fma(_2503, _3368.z, fma(_2502, _3368.y, _3368.x * _2501)) + _3368.w) / _3414;
                                float _3478 = 1.0 - dot(vec2(_3473, _3474), vec2(_3473, _3474));
                                float _4537 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3480 = _3479 * (((isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0))) * _3456) / ((_3469 * 0.699999988079071044921875) + 1.0));
                                float _3492 = exp2(log2(1.0 / ((_3469 * 3.5) + 5.0)) * 0.25);
                                float _3493 = 1.0 - _1160;
                                float _3500 = sqrt(1.0 - ((1.0 - (_3493 * _3493)) * (1.0 - (_3492 * _3492))));
                                float _3501 = _3500 * _3500;
                                float _3502 = _3501 * _3501;
                                float _3503 = _3449 - _2850;
                                float _3504 = _3450 - _2851;
                                float _3505 = _3451 - _2852;
                                float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                                float _3513 = dot(vec3(_1100, _1103, _1106), vec3((-0.0) - _2850, (-0.0) - _2851, (-0.0) - _2852));
                                float _4548 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3517 = dot(vec3(_1100, _1103, _1106), vec3(_3509 * _3503, _3509 * _3504, _3509 * _3505));
                                float _4559 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3524 = ((_3520 * _3520) * (_3502 + (-1.0))) + 1.0;
                                float _3525 = _3462 * _3501;
                                float _3526 = _3525 * _3525;
                                float _3532 = ((1.0 - _3526) * dot(vec3(_1100, _1103, _1106), vec3(_3449, _3450, _3451))) + _3526;
                                float _4570 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3534 = 1.0 - _3501;
                                float _3544 = (0.5 / (((_3533 * ((_3516 * _3534) + _3501)) + 9.9999999392252902907785028219223e-09) + (((_3533 * _3534) + _3501) * _3516))) * _3533;
                                float _4581 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3554 = (_3479 * _3456) * (((_3502 * 3.1415927410125732421875) * (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) / ((_3524 * _3524) * ((_3469 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3480 * _3326.y;
                                frontier_phi_115_pred_1 = _3480 * _3326.x;
                                frontier_phi_115_pred_2 = _3554 * _3338.z;
                                frontier_phi_115_pred_3 = _3554 * _3338.y;
                                frontier_phi_115_pred_4 = _3554 * _3338.x;
                                frontier_phi_115_pred_5 = _3480 * _3326.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3562 = frontier_phi_115_pred;
                            _3561 = frontier_phi_115_pred_1;
                            _3560 = frontier_phi_115_pred_2;
                            _3559 = frontier_phi_115_pred_3;
                            _3558 = frontier_phi_115_pred_4;
                            _3563 = frontier_phi_115_pred_5;
                            _3268 = _3561 + _3281;
                            _3269 = _3562 + _3282;
                            _3270 = _3563 + _3283;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            _3267 = _3560 + _3280;
                            if (_3285 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3285;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3266;
                        frontier_phi_109_pred_1 = _3265;
                        frontier_phi_109_pred_2 = _3270;
                        frontier_phi_109_pred_3 = _3269;
                        frontier_phi_109_pred_4 = _3268;
                        frontier_phi_109_pred_5 = _3267;
                    }
                    _2827 = frontier_phi_109_pred;
                    _2825 = frontier_phi_109_pred_1;
                    _2835 = frontier_phi_109_pred_2;
                    _2833 = frontier_phi_109_pred_3;
                    _2831 = frontier_phi_109_pred_4;
                    _2829 = frontier_phi_109_pred_5;
                    uint _3042 = _3041 + 1u;
                    if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3035 = _2825;
                        _3036 = _2827;
                        _3037 = _2829;
                        _3038 = _2831;
                        _3039 = _2833;
                        _3040 = _2835;
                        _3041 = _3042;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2825;
                frontier_phi_84_85_ladder_1 = _2829;
                frontier_phi_84_85_ladder_2 = _2835;
                frontier_phi_84_85_ladder_3 = _2833;
                frontier_phi_84_85_ladder_4 = _2831;
                frontier_phi_84_85_ladder_5 = _2827;
            }
            else
            {
                frontier_phi_84_85_ladder = _2664;
                frontier_phi_84_85_ladder_1 = _2668;
                frontier_phi_84_85_ladder_2 = _2674;
                frontier_phi_84_85_ladder_3 = _2672;
                frontier_phi_84_85_ladder_4 = _2670;
                frontier_phi_84_85_ladder_5 = _2666;
            }
            _2824 = frontier_phi_84_85_ladder;
            _2826 = frontier_phi_84_85_ladder_5;
            _2828 = frontier_phi_84_85_ladder_1;
            _2830 = frontier_phi_84_85_ladder_4;
            _2832 = frontier_phi_84_85_ladder_3;
            _2834 = frontier_phi_84_85_ladder_2;
        }
        float _2839 = isnan(1.0) ? _1144 : (isnan(_1144) ? 1.0 : min(_1144, 1.0));
        _2560 = (_2839 * _2830) + _2287;
        _2562 = (_2839 * _2832) + _2288;
        _2564 = (_2839 * _2834) + _2289;
        _2566 = ((_2824 * 0.039999999105930328369140625) * _2839) + _2443;
        _2568 = ((_2826 * 0.039999999105930328369140625) * _2839) + _2444;
        _2570 = ((_2828 * 0.039999999105930328369140625) * _2839) + _2445;
    }
    else
    {
        _2560 = _2287;
        _2562 = _2288;
        _2564 = _2289;
        _2566 = _2443;
        _2568 = _2444;
        _2570 = _2445;
    }
    uint _2576 = _1120 + uint(cbMatDynParam._m0[0u].w);
    float _2582 = (cbSceneParam._m0[72u].y * ((_1000 * ((_991 - _953) - (_991 * _964))) + _953)) * cbInstanceData._m0[_2576].x;
    float _2583 = (cbSceneParam._m0[72u].y * ((_1000 * ((_992 - _954) - (_992 * _964))) + _954)) * cbInstanceData._m0[_2576].y;
    float _2584 = (((_1000 * ((_993 - _955) - (_993 * _964))) + _955) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2576].z;
    float _4597 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _4608 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _4619 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _2601 = (((isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2560 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1144))) + ((_2566 + ((isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0))) * _1979)) * cbPerFrame._m0[3u].x)) + _2582;
    float _2603 = (_2583 + ((_2568 + ((isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0))) * _1979)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2562 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1144)));
    float _2605 = (_2584 + ((_2570 + ((isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0))) * _1979)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2564 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1144)));
    float _2606 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2607 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2608 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2614 = cbMtdParam._m0[2u].x * _2582;
    float _2615 = cbMtdParam._m0[2u].y * _2583;
    float _2616 = cbMtdParam._m0[2u].z * _2584;
    float _4645 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2618 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    uint _2619 = _1119 + 6u;
    float _2627 = _1081 / cbSceneParam._m0[86u].x;
    float _2628 = _1082 / cbSceneParam._m0[86u].y;
    vec4 _2642 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2627, _2628, (log2((isnan(cbSceneParam._m0[77u].w) ? _1055 : (isnan(_1055) ? cbSceneParam._m0[77u].w : min(_1055, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2644 = _2642.x;
    float _2645 = _2642.y;
    float _2646 = _2642.z;
    float _2647 = _2642.w;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    if (_1055 > cbSceneParam._m0[78u].w)
    {
        float _2689 = isnan(_1055) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1055 : min(cbSceneParam._m0[80u].w, _1055));
        float _2690 = _2689 / _1055;
        float _2701 = _2690 * _290;
        float _2702 = _291 * _2690;
        float _2703 = (-0.0) - _2702;
        float _2704 = _2690 * _292;
        float _2706 = (cbSceneParam._m0[77u].w * _2703) / _2689;
        float _2707 = _2706 + cbSceneParam._m0[79u].w;
        float _2708 = cbSceneParam._m0[79u].w - _2702;
        float _2714 = sqrt(((_2701 * _2701) + (_2702 * _2702)) + (_2704 * _2704));
        float _2717 = (1.0 - (cbSceneParam._m0[77u].w / _2689)) * _2714;
        float _2723 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2725 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2966;
        if (abs((_2703 - _2706) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2966 = ((((_2707 > 0.0) ? exp2(_2723 * _2707) : (2.0 - exp2(_2725 * _2707))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2717;
        }
        else
        {
            float _2885 = 1.0 / cbSceneParam._m0[80u].x;
            float _2886 = isnan(_2708) ? _2707 : (isnan(_2707) ? _2708 : max(_2707, _2708));
            float _2887 = isnan(_2708) ? _2707 : (isnan(_2707) ? _2708 : min(_2707, _2708));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            _2966 = ((abs(_2714 / _2703) * cbSceneParam._m0[80u].y) * ((((_2896 - _2897) * 2.0) - ((exp2(_2723 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0)))) - exp2(_2723 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))))) * _2885)) - ((exp2(_2725 * _2896) - exp2(_2725 * _2897)) * _2885))) + (_2717 * cbSceneParam._m0[80u].z);
        }
        vec4 _2968 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2627, _2628, 1.0), 0.0);
        float _2977 = exp2((_2966 * (-1.44269502162933349609375)) * (1.0 - _2968.w));
        float _2978 = log2(_2977);
        float _2994 = log2(_2647);
        _2727 = (exp2(_2994 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].x)) * _2968.x) / cbSceneParam._m0[78u].x)) + _2644;
        _2729 = (exp2(_2994 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].y)) * _2968.y) / cbSceneParam._m0[78u].y)) + _2645;
        _2731 = (exp2(_2994 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].z)) * _2968.z) / cbSceneParam._m0[78u].z)) + _2646;
        _2733 = _2977 * _2647;
    }
    else
    {
        _2727 = _2644;
        _2729 = _2645;
        _2731 = _2646;
        _2733 = _2647;
    }
    bool _3004;
    vec4 _2742;
    vec4 _2764;
    float _2766;
    float _2770;
    float _2771;
    float _2772;
    float _2775;
    float _2778;
    float _2781;
    float _2782;
    bool _2792;
    for (;;)
    {
        _2742 = cbMatDynParam._m0[0u];
        float _2744 = roundEven(_2742.y);
        bool _2745 = _2744 == 3.0;
        float _2746 = log2(_2733);
        float _2750 = exp2(_2746 * cbSceneParam._m0[78u].x);
        float _2751 = exp2(_2746 * cbSceneParam._m0[78u].y);
        float _2752 = exp2(_2746 * cbSceneParam._m0[78u].z);
        float _2753 = _2750 * _2606;
        float _2754 = _2751 * _2607;
        float _2755 = _2752 * _2608;
        float _2762 = _1069 + (-0.5);
        _2764 = cbMtdParam._m0[1u];
        _2766 = _2764.y * _2762;
        float _2769 = (_2744 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2770 = _2769 * (_2745 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2727)));
        _2771 = _2769 * (_2745 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2729)));
        _2772 = _2769 * (_2745 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2731)));
        _2775 = ((_2614 * _2618) * _2750) * _2769;
        _2778 = ((_2615 * _2618) * _2751) * _2769;
        _2781 = ((_2616 * _2618) * _2752) * _2769;
        _2782 = _2762 * 0.999000012874603271484375;
        _2792 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2792)
        {
            if ((cbInstanceData._m0[_1119 + 7u].x + _2782) < 0.5)
            {
                _3004 = true;
                break;
            }
        }
        uint _2920 = _1120 + uint(_2742.w);
        if ((cbInstanceData._m0[_2920].w < 1.0) && ((cbInstanceData._m0[_2920].w + _2782) < 0.5))
        {
            _3004 = true;
            break;
        }
        if ((_2766 + 1.0) < _2764.x)
        {
            _3004 = true;
            break;
        }
        _3004 = false;
        break;
    }
    float _3235;
    if (_3004)
    {
        discard_state = true;
        _3235 = 0.0;
    }
    else
    {
        _3235 = cbInstanceData._m0[_2619].w;
    }
    SV_Target.x = _2770;
    SV_Target.y = _2771;
    SV_Target.z = _2772;
    SV_Target.w = _3235;
    SV_Target_1.x = _2775;
    SV_Target_1.y = _2778;
    SV_Target_1.z = _2781;
    SV_Target_1.w = cbInstanceData._m0[_2619].w;
    discard_exit();
}


