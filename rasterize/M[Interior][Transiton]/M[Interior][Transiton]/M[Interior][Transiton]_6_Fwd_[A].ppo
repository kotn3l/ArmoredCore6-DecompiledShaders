#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1540;
float _3731;
float _3732;
float _3733;
float _3734;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _278 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _288 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _278);
    float _289 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _278);
    float _290 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _278);
    vec4 _304 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _307 = _304.x;
    vec4 _325 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _342 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _307) + cbMtdParam._m0[12u].x) * _325.x;
    float _344 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _307) + cbMtdParam._m0[12u].y) * _325.y;
    float _346 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _307) + cbMtdParam._m0[12u].z) * _325.z;
    vec4 _364 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _403 = cbMtdParam._m0[27u].w + _288;
    float _404 = cbMtdParam._m0[28u].x + _289;
    float _405 = cbMtdParam._m0[28u].y + _290;
    float _419 = (-0.0) - dot(vec3(_403, _404, _405), vec3(_218, _219, _220));
    float _420 = (-0.0) - dot(vec3(_403, _404, _405), vec3(_232, _233, _234));
    float _421 = (-0.0) - dot(vec3(_403, _404, _405), vec3((-0.0) - _225, (-0.0) - _226, (-0.0) - _227));
    float _425 = inversesqrt(dot(vec3(_419, _420, _421), vec3(_419, _420, _421)));
    float _428 = _425 * _421;
    float _429 = (_425 * _419) + ((cbMtdParam._m0[25u].w * _307) * ((_364.x * 2.0) + (-1.0)));
    float _430 = (_425 * _420) + ((cbMtdParam._m0[26u].x * _307) * ((_364.y * 2.0) + (-1.0)));
    float _431 = _429 * cbMtdParam._m0[24u].x;
    float _432 = _430 * cbMtdParam._m0[23u].w;
    float _433 = fract(TEXCOORD.x);
    float _434 = fract(TEXCOORD.y);
    float _440;
    if (_431 > 0.0)
    {
        _440 = (1.0 - _433) / _431;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_431 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _433) / _431;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _440 = frontier_phi_3_2_ladder;
    }
    float _448;
    if (_432 > 0.0)
    {
        _448 = (1.0 - _434) / _432;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_432 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _434) / _432;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _448 = frontier_phi_7_6_ladder;
    }
    bool _450 = _428 > 0.0;
    float _452 = _450 ? (cbMtdParam._m0[17u].x / _428) : 5000.0;
    float _453 = isnan(_448) ? _440 : (isnan(_440) ? _448 : min(_440, _448));
    float _454 = isnan(_452) ? _453 : (isnan(_453) ? _452 : min(_453, _452));
    float _458 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _459 = _433 + (-0.5);
    float _462 = _434 + (-0.5);
    float _465 = ((_454 * _428) + _458) / _458;
    vec4 _490 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_459 + (_454 * _431)) / _465) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_462 + (_454 * _432)) / _465) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _503 = (_490.x * _307) * cbMtdParam._m0[9u].x;
    float _504 = (_490.y * _307) * cbMtdParam._m0[9u].y;
    float _505 = (_490.z * _307) * cbMtdParam._m0[9u].z;
    float _523 = _429 * cbMtdParam._m0[26u].z;
    float _524 = _430 * cbMtdParam._m0[26u].y;
    bool _525 = _523 > 0.0;
    float _530;
    if (_525)
    {
        _530 = (1.0 - _433) / _523;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _433) / _523;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _530 = frontier_phi_11_10_ladder;
    }
    bool _532 = _524 > 0.0;
    float _537;
    if (_532)
    {
        _537 = (1.0 - _434) / _524;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_524 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _434) / _524;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _537 = frontier_phi_15_14_ladder;
    }
    float _540 = _450 ? (cbMtdParam._m0[19u].z / _428) : 5000.0;
    float _541 = isnan(_537) ? _530 : (isnan(_530) ? _537 : min(_530, _537));
    float _542 = isnan(_540) ? _541 : (isnan(_541) ? _540 : min(_541, _540));
    float _546 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _550 = ((_542 * _428) + _546) / _546;
    float _555 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _557 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _573 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_459 + (_542 * _523)) / _550) + 0.5) + _555) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_462 + (_542 * _524)) / _550) + 0.5) + _557) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _588;
    if (_525)
    {
        _588 = (1.0 - _433) / _523;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _433) / _523;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _588 = frontier_phi_19_18_ladder;
    }
    float _594;
    if (_532)
    {
        _594 = (1.0 - _434) / _524;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_524 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _434) / _524;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _594 = frontier_phi_23_22_ladder;
    }
    float _596 = isnan(_594) ? _588 : (isnan(_588) ? _594 : min(_588, _594));
    float _597 = isnan(_540) ? _596 : (isnan(_596) ? _540 : min(_596, _540));
    float _604 = ((_597 * _428) + _546) / _546;
    vec4 _624 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_459 + (_597 * _523)) / _604) + 0.5) + _555) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_462 + (_597 * _524)) / _604) + 0.5) + _557) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _626 = _624.x;
    float _636 = (((((cbMtdParam._m0[10u].x * _307) * _573.x) - _503) * _307) * _626) + _503;
    float _637 = (((((cbMtdParam._m0[10u].y * _307) * _573.y) - _504) * _307) * _626) + _504;
    float _638 = (((((cbMtdParam._m0[10u].z * _307) * _573.z) - _505) * _307) * _626) + _505;
    float _651 = _429 * cbMtdParam._m0[27u].x;
    float _652 = _430 * cbMtdParam._m0[26u].w;
    bool _653 = _651 > 0.0;
    float _658;
    if (_653)
    {
        _658 = (1.0 - _433) / _651;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_651 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _433) / _651;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _658 = frontier_phi_27_26_ladder;
    }
    bool _660 = _652 > 0.0;
    float _665;
    if (_660)
    {
        _665 = (1.0 - _434) / _652;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_652 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _434) / _652;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _665 = frontier_phi_31_30_ladder;
    }
    float _668 = _450 ? (cbMtdParam._m0[23u].x / _428) : 5000.0;
    float _669 = isnan(_665) ? _658 : (isnan(_658) ? _665 : min(_658, _665));
    float _670 = isnan(_668) ? _669 : (isnan(_669) ? _668 : min(_669, _668));
    float _674 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _678 = ((_670 * _428) + _674) / _674;
    float _683 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _685 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _701 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_459 + (_670 * _651)) / _678) + 0.5) + _683) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_462 + (_670 * _652)) / _678) + 0.5) + _685) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _716;
    if (_653)
    {
        _716 = (1.0 - _433) / _651;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_651 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _433) / _651;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _716 = frontier_phi_35_34_ladder;
    }
    float _722;
    if (_660)
    {
        _722 = (1.0 - _434) / _652;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_652 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _434) / _652;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _722 = frontier_phi_39_38_ladder;
    }
    float _724 = isnan(_722) ? _716 : (isnan(_716) ? _722 : min(_716, _722));
    float _725 = isnan(_668) ? _724 : (isnan(_724) ? _668 : min(_724, _668));
    float _732 = ((_725 * _428) + _674) / _674;
    vec4 _752 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_459 + (_725 * _651)) / _732) + 0.5) + _683) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_462 + (_725 * _652)) / _732) + 0.5) + _685) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _754 = _752.x;
    float _764 = (((((cbMtdParam._m0[13u].x * _307) * _701.x) - _636) * _307) * _754) + _636;
    float _765 = (((((cbMtdParam._m0[13u].y * _307) * _701.y) - _637) * _307) * _754) + _637;
    float _766 = (((((cbMtdParam._m0[13u].z * _307) * _701.z) - _638) * _307) * _754) + _638;
    vec4 _779 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _783 = _779.z;
    float _786 = (_779.x * 2.0) + (-1.0);
    float _787 = (_779.y * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _3793 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))));
    float _802 = (cbMtdParam._m0[19u].y * _764) * cbMtdParam._m0[16u].x;
    float _804 = (cbMtdParam._m0[19u].y * _765) * cbMtdParam._m0[16u].y;
    float _806 = (cbMtdParam._m0[19u].y * _766) * cbMtdParam._m0[16u].z;
    vec4 _830 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _835 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _841 = ((_830.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _843 = (-0.0) - (cbMtdParam._m0[21u].x * ((_830.x * 0.5) + (-0.25)));
    float _844 = fract(_835);
    float _846 = fract(_835 + 0.5);
    vec4 _873 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_844 * _843) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_841 * _844) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _875 = _873.x;
    float _881 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_846 * _843) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_841 * _846) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _875) * abs((_844 * 2.0) + (-1.0))) + _875;
    float _887 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _891 = fract(abs(_887));
    float _901 = sin(cbMtdParam._m0[21u].z);
    float _902 = cos(cbMtdParam._m0[21u].z);
    float _903 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _904 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _929 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_904, (-0.0) - _901, _902 * _903) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_904, _902, _903 * _901) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_887 >= ((-0.0) - _887)) ? _891 : ((-0.0) - _891)) * cbMtdParam._m0[18u].z) - _881)) + cbMtdParam._m0[18u].w;
    float _930 = ceil(_929);
    float _3804 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _931 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _951 = ((((cbMtdParam._m0[21u].w * _764) * cbMtdParam._m0[15u].x) - _802) * _931) + _802;
    float _952 = ((((cbMtdParam._m0[21u].w * _765) * cbMtdParam._m0[15u].y) - _804) * _931) + _804;
    float _953 = ((((cbMtdParam._m0[21u].w * _766) * cbMtdParam._m0[15u].z) - _806) * _931) + _806;
    float _957 = abs(cbMtdParam._m0[20u].w * _929);
    float _961 = (((_957 * cbMtdParam._m0[18u].y) - _881) * _957) + _881;
    float _3815 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _962 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    vec4 _974 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _989 = (cbMtdParam._m0[14u].x * _974.x) * cbMtdParam._m0[19u].x;
    float _990 = (cbMtdParam._m0[14u].y * _974.y) * cbMtdParam._m0[19u].x;
    float _991 = (cbMtdParam._m0[14u].z * _974.z) * cbMtdParam._m0[19u].x;
    float _998 = exp2(log2(_962) * cbMtdParam._m0[20u].x);
    float _1020 = fma(_793, _225, fma(_787, _232, _786 * _218));
    float _1023 = fma(_793, _226, fma(_787, _233, _786 * _219));
    float _1026 = fma(_793, _227, fma(_787, _234, _786 * _220));
    float _1030 = inversesqrt(dot(vec3(_1020, _1023, _1026), vec3(_1020, _1023, _1026)));
    float _1031 = _1030 * _1020;
    float _1032 = _1030 * _1023;
    float _1033 = _1030 * _1026;
    float _3826 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _1034 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3848 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3859 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _1053 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1057 = inversesqrt(dot(vec3(_288, _289, _290), vec3(_288, _289, _290)));
    float _1058 = _288 * _1057;
    float _1059 = _289 * _1057;
    float _1060 = _290 * _1057;
    vec4 _1065 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1067 = _1065.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1222 = sqrt(((_288 * _288) + (_289 * _289)) + (_290 * _290));
        float _1228 = (cbMatDynParam._m0[5u].x * _1222) + cbMatDynParam._m0[5u].y;
        float _3870 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1233 = (cbMatDynParam._m0[5u].z * _1222) + cbMatDynParam._m0[5u].w;
        float _3881 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) - _1229)) + _1229) < ((_1067 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1079 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1080 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1098 = fma(_1033, cbSceneParam._m0[5u].z, fma(_1032, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1031));
    float _1101 = fma(_1033, cbSceneParam._m0[6u].z, fma(_1032, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1031));
    float _1104 = fma(_1033, cbSceneParam._m0[7u].z, fma(_1032, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1031));
    uint _1117 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1118 = _1117 + 9u;
    uint _1119 = _1118 + uint(cbMatDynParam._m0[0u].w);
    float _1125 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_1119].x;
    float _1126 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_1119].y;
    float _1127 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_1119].z;
    float _3892 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1128 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1129 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _1130 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    vec4 _1139 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1079, cbSceneParam._m0[86u].y * _1080));
    float _1142 = _1139.x * TEXCOORD_4;
    float _1143 = dot(vec3(_1031, _1032, _1033), vec3(_1058, _1059, _1060));
    float _1146 = _1143 * 2.0;
    float _1150 = (_1146 * _1031) - _1058;
    float _1151 = (_1146 * _1032) - _1059;
    float _1152 = (_1146 * _1033) - _1060;
    float _1156 = abs(dot(vec3(_1058, _1059, _1060), vec3(_1031, _1032, _1033)));
    float _3925 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _1158 = sqrt(_1034);
    float _1171 = exp2((_1158 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1158 * 3.0));
    float _1203 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1207 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1211 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1539;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1266 = fma(_1211, cbModelParam._m0[26u].z, fma(_1207, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1203));
        float _1270 = fma(_1211, cbModelParam._m0[27u].z, fma(_1207, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1203));
        float _1274 = fma(_1211, cbModelParam._m0[28u].z, fma(_1207, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1203));
        float _1297 = _1203 + _1031;
        float _1298 = _1207 + _1032;
        float _1299 = _1211 + _1033;
        float _1309 = fma(_1299, cbModelParam._m0[26u].z, fma(_1298, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1297)) - _1266;
        float _1310 = fma(_1299, cbModelParam._m0[27u].z, fma(_1298, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1297)) - _1270;
        float _1311 = fma(_1299, cbModelParam._m0[28u].z, fma(_1298, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1297)) - _1274;
        float _1315 = inversesqrt(dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311)));
        float _1328 = ((_1315 * _1309) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1266 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1315 * _1310) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1270 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1315 * _1311) / cbModelParam._m0[34u].z) + ((((((_1274 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        float _1367 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1333.x + (-0.5));
        float _1369 = _1367 * (_1333.y + (-0.5));
        float _1370 = _1367 * (_1333.z + (-0.5));
        float _1377 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1340.x + (-0.5));
        float _1379 = _1377 * (_1340.y + (-0.5));
        float _1380 = _1377 * (_1340.z + (-0.5));
        float _1387 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1347.x + (-0.5));
        float _1389 = _1387 * (_1347.y + (-0.5));
        float _1390 = _1387 * (_1347.z + (-0.5));
        float _1397 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1354.x + (-0.5));
        float _1399 = _1397 * (_1354.y + (-0.5));
        float _1400 = _1397 * (_1354.z + (-0.5));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = _1368 * 0.5;
        float _1405 = _1378 * 0.5;
        float _1406 = _1388 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1421 = (dot(vec3(_1031, _1032, _1033), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1431 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _3973 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1433 + 1.0))) + _1438) * _1401;
        float _1448 = _1369 * 0.5;
        float _1449 = _1379 * 0.5;
        float _1450 = _1389 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_1031, _1032, _1033), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4006 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1475 + 1.0))) + _1480) * _1402;
        float _1490 = _1370 * 0.5;
        float _1491 = _1380 * 0.5;
        float _1492 = _1390 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_1031, _1032, _1033), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4039 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1517 + 1.0))) + _1522) * _1403;
        _1539 = _1370;
        _1541 = _1369;
        _1542 = _1368;
        _1543 = _1380;
        _1544 = _1379;
        _1545 = _1378;
        _1546 = _1390;
        _1547 = _1389;
        _1548 = _1388;
        _1549 = _1403;
        _1550 = _1402;
        _1551 = _1401;
        _1552 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1553 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1554 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
    }
    else
    {
        _1539 = _1540;
        _1541 = _1540;
        _1542 = _1540;
        _1543 = _1540;
        _1544 = _1540;
        _1545 = _1540;
        _1546 = _1540;
        _1547 = _1540;
        _1548 = _1540;
        _1549 = _1540;
        _1550 = _1540;
        _1551 = _1540;
        _1552 = 0.0;
        _1553 = 0.0;
        _1554 = 0.0;
    }
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1582 = fma(_1211, cbModelParam._m0[30u].z, fma(_1207, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1203));
        float _1586 = fma(_1211, cbModelParam._m0[31u].z, fma(_1207, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1203));
        float _1590 = fma(_1211, cbModelParam._m0[32u].z, fma(_1207, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1203));
        float _1613 = _1203 + _1031;
        float _1614 = _1207 + _1032;
        float _1615 = _1211 + _1033;
        float _1625 = fma(_1615, cbModelParam._m0[30u].z, fma(_1614, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1613)) - _1582;
        float _1626 = fma(_1615, cbModelParam._m0[31u].z, fma(_1614, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1613)) - _1586;
        float _1627 = fma(_1615, cbModelParam._m0[32u].z, fma(_1614, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1613)) - _1590;
        float _1631 = inversesqrt(dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627)));
        float _1644 = ((_1631 * _1625) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1582 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1645 = ((_1631 * _1626) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1586 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1646 = ((_1631 * _1627) / cbModelParam._m0[35u].z) + ((((((_1590 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        vec4 _1662 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        vec4 _1669 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        float _1681 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1648.x + (-0.5));
        float _1683 = _1681 * (_1648.y + (-0.5));
        float _1684 = _1681 * (_1648.z + (-0.5));
        float _1691 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1655.x + (-0.5));
        float _1693 = _1691 * (_1655.y + (-0.5));
        float _1694 = _1691 * (_1655.z + (-0.5));
        float _1701 = exp2((_1662.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1662.x + (-0.5));
        float _1703 = _1701 * (_1662.y + (-0.5));
        float _1704 = _1701 * (_1662.z + (-0.5));
        float _1711 = exp2((_1669.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1669.x + (-0.5));
        float _1713 = _1711 * (_1669.y + (-0.5));
        float _1714 = _1711 * (_1669.z + (-0.5));
        float _1715 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1716 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1717 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1718 = _1682 * 0.5;
        float _1719 = _1692 * 0.5;
        float _1720 = _1702 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_1031, _1032, _1033), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1715 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4102 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1745 + 1.0))) + _1750) * _1715;
        float _1760 = _1683 * 0.5;
        float _1761 = _1693 * 0.5;
        float _1762 = _1703 * 0.5;
        float _1763 = dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762));
        float _1768 = (_1763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1763);
        float _1776 = (dot(vec3(_1031, _1032, _1033), vec3(_1768 * _1760, _1768 * _1761, _1768 * _1762)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762)) / (_1716 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1787 = _1786 * 2.0;
        float _1791 = (1.0 - _1786) / (_1786 + 1.0);
        float _4135 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1801 = ((((1.0 - _1792) * (_1787 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1787 + 1.0))) + _1792) * _1716;
        float _1802 = _1684 * 0.5;
        float _1803 = _1694 * 0.5;
        float _1804 = _1704 * 0.5;
        float _1805 = dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804));
        float _1810 = (_1805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1805);
        float _1818 = (dot(vec3(_1031, _1032, _1033), vec3(_1810 * _1802, _1810 * _1803, _1810 * _1804)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1827 = sqrt(((_1803 * _1803) + (_1802 * _1802)) + (_1804 * _1804)) / (_1717 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1829 = _1828 * 2.0;
        float _1833 = (1.0 - _1828) / (_1828 + 1.0);
        float _4168 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1843 = ((((1.0 - _1834) * (_1829 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1829 + 1.0))) + _1834) * _1717;
        _1851 = _1684;
        _1852 = _1683;
        _1853 = _1682;
        _1854 = _1694;
        _1855 = _1693;
        _1856 = _1692;
        _1857 = _1704;
        _1858 = _1703;
        _1859 = _1702;
        _1860 = _1717;
        _1861 = _1716;
        _1862 = _1715;
        _1863 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
        _1864 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)));
        _1865 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)));
    }
    else
    {
        _1851 = _1540;
        _1852 = _1540;
        _1853 = _1540;
        _1854 = _1540;
        _1855 = _1540;
        _1856 = _1540;
        _1857 = _1540;
        _1858 = _1540;
        _1859 = _1540;
        _1860 = _1540;
        _1861 = _1540;
        _1862 = _1540;
        _1863 = 0.0;
        _1864 = 0.0;
        _1865 = 0.0;
    }
    float _1875 = (cbModelParam._m0[1u].x * (_1863 - _1552)) + _1552;
    float _1876 = (cbModelParam._m0[1u].x * (_1864 - _1553)) + _1553;
    float _1877 = (cbModelParam._m0[1u].x * (_1865 - _1554)) + _1554;
    float _1898 = fma(_1877, cbSceneParam._m0[89u].z, fma(_1876, cbSceneParam._m0[89u].y, _1875 * cbSceneParam._m0[89u].x));
    float _1901 = fma(_1877, cbSceneParam._m0[90u].z, fma(_1876, cbSceneParam._m0[90u].y, _1875 * cbSceneParam._m0[90u].x));
    float _1904 = fma(_1877, cbSceneParam._m0[91u].z, fma(_1876, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1875));
    float _1919 = _1150 * 0.5;
    float _1920 = _1151 * 0.5;
    float _1921 = _1152 * 0.5;
    float _1922 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1853, _1856, _1859, _1862));
    float _1925 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1852, _1855, _1858, _1861));
    float _1928 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1851, _1854, _1857, _1860));
    float _1962;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1935 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1539, _1543, _1546, _1549));
        float _1939 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1541, _1544, _1547, _1550));
        float _1943 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1542, _1545, _1548, _1551));
        float _1950 = dot(vec4(cbModelParam._m0[39u]), vec4(_1919, _1920, _1921, 1.0));
        _1962 = dot(vec3(isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)), isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0)), isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1950) ? 0.0 : (isnan(0.0) ? _1950 : max(0.0, _1950))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1962 = 1.0;
    }
    float _1973;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1964 = dot(vec4(cbModelParam._m0[40u]), vec4(_1919, _1920, _1921, 1.0));
        _1973 = dot(vec3(isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1964) ? 0.0 : (isnan(0.0) ? _1964 : max(0.0, _1964))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1973 = 1.0;
    }
    float _1977 = (_1973 * cbModelParam._m0[1u].x) + (_1962 * (1.0 - cbModelParam._m0[1u].x));
    float _1987 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1034);
    float _1988 = isnan(_1987) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1987 : min(cbModelParam._m0[25u].z, _1987));
    float _2068;
    float _2070;
    float _2072;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2035 = fma(_1211, cbModelParam._m0[13u].z, fma(_1207, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1203)) + cbModelParam._m0[13u].w;
        float _2039 = fma(_1211, cbModelParam._m0[14u].z, fma(_1207, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1203)) + cbModelParam._m0[14u].w;
        float _2043 = fma(_1211, cbModelParam._m0[15u].z, fma(_1207, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1203)) + cbModelParam._m0[15u].w;
        float _2046 = fma(_1152, cbModelParam._m0[13u].z, fma(_1151, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1150));
        float _2049 = fma(_1152, cbModelParam._m0[14u].z, fma(_1151, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1150));
        float _2052 = fma(_1152, cbModelParam._m0[15u].z, fma(_1151, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1150));
        float _2080;
        if (_2046 > 0.0)
        {
            _2080 = abs((1.0 - _2035) / _2046);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_2035 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _2080 = frontier_phi_57_55_ladder;
        }
        float _2425;
        if (_2049 > 0.0)
        {
            _2425 = abs((1.0 - _2039) / _2049);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_2039 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2425 = frontier_phi_66_62_ladder;
        }
        float _2767;
        if (_2052 > 0.0)
        {
            _2767 = abs((1.0 - _2043) / _2052);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_2043 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2767 = frontier_phi_80_73_ladder;
        }
        float _2769 = isnan(_2425) ? _2080 : (isnan(_2080) ? _2425 : min(_2080, _2425));
        float _2770 = isnan(_2767) ? _2769 : (isnan(_2769) ? _2767 : min(_2769, _2767));
        float _2774 = (_2770 * _2046) + _2035;
        float _2775 = (_2770 * _2049) + _2039;
        float _2776 = (_2770 * _2052) + _2043;
        float _2777 = _2770 * 9.9999997473787516355514526367188e-05;
        float _2778 = (-1.0) - _2777;
        float _2780 = _2777 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2776 > _2780) || ((_2776 < _2778) || ((_2775 > _2780) || ((_2775 < _2778) || ((_2774 < _2778) || (_2774 > _2780))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2918 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2776, cbModelParam._m0[9u].z, fma(_2775, cbModelParam._m0[9u].y, _2774 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2776, cbModelParam._m0[10u].z, fma(_2775, cbModelParam._m0[10u].y, _2774 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2776, cbModelParam._m0[11u].z, fma(_2775, cbModelParam._m0[11u].y, _2774 * cbModelParam._m0[11u].x))), _1988);
            frontier_phi_56_80_ladder = _2918.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2918.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2918.x * cbModelParam._m0[1u].y;
        }
        _2068 = frontier_phi_56_80_ladder_2;
        _2070 = frontier_phi_56_80_ladder_1;
        _2072 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _2056 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1150, _1151, _1152), _1988);
        _2068 = _2056.x * cbModelParam._m0[1u].y;
        _2070 = _2056.y * cbModelParam._m0[1u].y;
        _2072 = _2056.z * cbModelParam._m0[1u].y;
    }
    float _2076 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1034);
    float _2077 = isnan(_2076) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2076 : min(cbModelParam._m0[25u].w, _2076));
    float _2165;
    float _2167;
    float _2169;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2129 = fma(_1211, cbModelParam._m0[21u].z, fma(_1207, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1203)) + cbModelParam._m0[21u].w;
        float _2133 = fma(_1211, cbModelParam._m0[22u].z, fma(_1207, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1203)) + cbModelParam._m0[22u].w;
        float _2137 = fma(_1211, cbModelParam._m0[23u].z, fma(_1207, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1203)) + cbModelParam._m0[23u].w;
        float _2140 = fma(_1152, cbModelParam._m0[21u].z, fma(_1151, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1150));
        float _2143 = fma(_1152, cbModelParam._m0[22u].z, fma(_1151, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1150));
        float _2146 = fma(_1152, cbModelParam._m0[23u].z, fma(_1151, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1150));
        float _2430;
        if (_2140 > 0.0)
        {
            _2430 = abs((1.0 - _2129) / _2140);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_2129 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2430 = frontier_phi_68_64_ladder;
        }
        float _2793;
        if (_2143 > 0.0)
        {
            _2793 = abs((1.0 - _2133) / _2143);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_2143 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_2133 + 1.0) / _2143);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2793 = frontier_phi_82_75_ladder;
        }
        float _2983;
        if (_2146 > 0.0)
        {
            _2983 = abs((1.0 - _2137) / _2146);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_2146 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_2137 + 1.0) / _2146);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2983 = frontier_phi_100_93_ladder;
        }
        float _2985 = isnan(_2793) ? _2430 : (isnan(_2430) ? _2793 : min(_2430, _2793));
        float _2986 = isnan(_2983) ? _2985 : (isnan(_2985) ? _2983 : min(_2985, _2983));
        float _2990 = (_2986 * _2140) + _2129;
        float _2991 = (_2986 * _2143) + _2133;
        float _2992 = (_2986 * _2146) + _2137;
        float _2993 = _2986 * 9.9999997473787516355514526367188e-05;
        float _2994 = (-1.0) - _2993;
        float _2996 = _2993 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2992 > _2996) || ((_2992 < _2994) || ((_2991 > _2996) || ((_2991 < _2994) || ((_2990 < _2994) || (_2990 > _2996))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3234 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2992, cbModelParam._m0[17u].z, fma(_2991, cbModelParam._m0[17u].y, _2990 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2992, cbModelParam._m0[18u].z, fma(_2991, cbModelParam._m0[18u].y, _2990 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2992, cbModelParam._m0[19u].z, fma(_2991, cbModelParam._m0[19u].y, _2990 * cbModelParam._m0[19u].x))), _2077);
            frontier_phi_65_100_ladder = _3234.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3234.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3234.z * cbModelParam._m0[1u].z;
        }
        _2165 = frontier_phi_65_100_ladder_1;
        _2167 = frontier_phi_65_100_ladder;
        _2169 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _2149 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1150, _1151, _1152), _2077);
        _2165 = _2149.x * cbModelParam._m0[1u].z;
        _2167 = _2149.y * cbModelParam._m0[1u].z;
        _2169 = _2149.z * cbModelParam._m0[1u].z;
    }
    float _2181 = ((((1.0 - _1171) * ((_1158 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1171 * _1158)) * _1142;
    float _2182 = _2181 * ((cbModelParam._m0[1u].w * (_2165 - _2068)) + _2068);
    float _2183 = _2181 * ((cbModelParam._m0[1u].w * (_2167 - _2070)) + _2070);
    float _2184 = _2181 * ((cbModelParam._m0[1u].w * (_2169 - _2072)) + _2072);
    float _2187 = fma(_2184, cbSceneParam._m0[89u].z, fma(_2183, cbSceneParam._m0[89u].y, _2182 * cbSceneParam._m0[89u].x));
    float _2190 = fma(_2184, cbSceneParam._m0[90u].z, fma(_2183, cbSceneParam._m0[90u].y, _2182 * cbSceneParam._m0[90u].x));
    float _2193 = fma(_2184, cbSceneParam._m0[91u].z, fma(_2183, cbSceneParam._m0[91u].y, _2182 * cbSceneParam._m0[91u].x));
    uvec4 _2203 = floatBitsToUint(cbInstanceData._m0[_1117 + 5u]);
    uint _2205 = _2203.x * 14u;
    uint _2206 = _2205 + 13u;
    float _2211 = _1142 + (-1.0);
    float _2214 = (cbLight._m0[_2206].x * _2211) + 1.0;
    float _2215 = (cbLight._m0[_2206].y * _2211) + 1.0;
    uint _2216 = _2205 + 5u;
    float _2222 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
    uint _2226 = _2205 + 4u;
    float _2232 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
    uint _2236 = _2205 | 1u;
    float _2247 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_1031, _1032, _1033));
    float _2250 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_1031, _1032, _1033));
    float _4304 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _4315 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2255 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.3183098733425140380859375;
    float _2257 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * 0.3183098733425140380859375;
    float _2264 = ((cbLight._m0[_2216].x * _2222) * _2257) + ((cbLight._m0[_2226].x * _2232) * _2255);
    float _2265 = ((_2222 * cbLight._m0[_2216].y) * _2257) + ((_2232 * cbLight._m0[_2226].y) * _2255);
    float _2266 = ((_2222 * cbLight._m0[_2216].z) * _2257) + ((_2232 * cbLight._m0[_2226].z) * _2255);
    uint _2268 = _2205 + 8u;
    float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _1034) * 0.949999988079071044921875);
    float _2282 = _2281 * _2281;
    float _2283 = cbLight._m0[_2205].x + _1058;
    float _2284 = cbLight._m0[_2205].y + _1059;
    float _2285 = cbLight._m0[_2205].z + _1060;
    float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
    float _2290 = _2289 * _2283;
    float _2291 = _2289 * _2284;
    float _2292 = _2289 * _2285;
    float _2293 = dot(vec3(_1031, _1032, _1033), vec3(cbLight._m0[_2205].xyz));
    float _4326 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _4337 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _2297 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2298 = dot(vec3(_1031, _1032, _1033), vec3(_2290, _2291, _2292));
    float _4348 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2302 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2290, _2291, _2292));
    float _4359 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2306 = _2282 * _2282;
    float _2310 = ((_2301 * _2301) * (_2306 + (-1.0))) + 1.0;
    float _2321 = (exp2(log2(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2322 = 1.0 - _2282;
    float _2333 = (0.5 / (((_2297 * ((_2296 * _2322) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2322) + _2282) * _2296))) * _2296;
    float _4370 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2335 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2306 / ((_2310 * _2310) * 3.141590118408203125));
    uint _2346 = _2205 + 9u;
    float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _1034) * 0.949999988079071044921875);
    float _2358 = _2357 * _2357;
    float _2359 = cbLight._m0[_2236].x + _1058;
    float _2360 = cbLight._m0[_2236].y + _1059;
    float _2361 = cbLight._m0[_2236].z + _1060;
    float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
    float _2366 = _2365 * _2359;
    float _2367 = _2365 * _2360;
    float _2368 = _2365 * _2361;
    float _2369 = dot(vec3(_1031, _1032, _1033), vec3(cbLight._m0[_2236].xyz));
    float _4381 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2373 = dot(vec3(_1031, _1032, _1033), vec3(_2366, _2367, _2368));
    float _4392 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2377 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2366, _2367, _2368));
    float _4403 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2381 = _2358 * _2358;
    float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
    float _2394 = (exp2(log2(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2395 = 1.0 - _2358;
    float _2405 = (0.5 / (((_2297 * ((_2372 * _2395) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2395) + _2358) * _2372))) * _2372;
    float _4414 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2407 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
    float _2417 = (((_2394 * cbLight._m0[_2346].x) * _2407) * _2222) + (((_2321 * cbLight._m0[_2268].x) * _2335) * _2232);
    float _2418 = (((_2394 * cbLight._m0[_2346].y) * _2407) * _2222) + (((_2321 * cbLight._m0[_2268].y) * _2335) * _2232);
    float _2419 = (((_2394 * cbLight._m0[_2346].z) * _2407) * _2222) + (((_2321 * cbLight._m0[_2268].z) * _2335) * _2232);
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    if (_2203.y == 0u)
    {
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2474;
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2474;
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2474;
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.x;
        uint _2501 = uint((float(_2489.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1080) / _2490))) + floor(float(uint(cbSceneParam._m0[85u].x * _1079) / _2490)));
        float _2511 = (log2(_2477 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2512 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        uint _2515 = uint(isnan(14.0) ? _2512 : (isnan(_2512) ? 14.0 : min(_2512, 14.0)));
        uvec4 _2520 = texelFetch(g_lightClusterGridBuffer, int(((_2515 << 2u) + (_2501 << 6u)) >> 2u));
        uint _2521 = _2520.x;
        uint _2522 = _2489.z;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        if (((((1u << ((_2522 >> 4u) & 15u)) + 4294967295u) & _2521) == 0u) || ((_2522 & 240u) == 0u))
        {
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
        }
        else
        {
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            uint _2836 = 0u;
            uint _2845;
            bool _2846;
            for (;;)
            {
                _2845 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2836 << 2u)) >> 2u)).x;
                _2846 = _2845 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2846)
                {
                    frontier_phi_95_pred = _2831;
                    frontier_phi_95_pred_1 = _2830;
                    frontier_phi_95_pred_2 = _2832;
                    frontier_phi_95_pred_3 = _2835;
                    frontier_phi_95_pred_4 = _2834;
                    frontier_phi_95_pred_5 = _2833;
                }
                else
                {
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    uint _3032;
                    _3026 = _2830;
                    _3027 = _2831;
                    _3028 = _2832;
                    _3029 = _2833;
                    _3030 = _2834;
                    _3031 = _2835;
                    _3032 = _2845;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    for (;;)
                    {
                        uint _3036 = uint(findLSB(_3032)) + (_2836 << 5u);
                        uint _3033 = (_3032 + 4294967295u) & _3032;
                        uint _3038 = _3036 * 48u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 3u)).x));
                        uint _3058 = (_3036 * 48u) + 4u;
                        vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3077 = (_3036 * 48u) + 8u;
                        vec3 _3088 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x));
                        float _3092 = _3052.x - _2475;
                        float _3093 = _3052.y - _2476;
                        float _3094 = _3052.z - _2477;
                        float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                        float _3098 = inversesqrt(_3095);
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3102 = dot(vec3(_1098, _1101, _1104), vec3(_3099, _3100, _3101));
                        float _3107 = 1.0 - (_3095 * _3052.w);
                        float _4435 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3109 = sqrt(_3095) * _3071.w;
                        float _3112 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3102) + _3113;
                        float _3119 = _3109 * _3109;
                        float _3123 = ((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3108) / ((_3119 * 0.699999988079071044921875) + 1.0);
                        float _3127 = (-0.0) - _2475;
                        float _3128 = (-0.0) - _2476;
                        float _3129 = (-0.0) - _2477;
                        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3144 = exp2(log2(1.0 / ((_3119 * 3.5) + 5.0)) * 0.25);
                        float _3145 = 1.0 - _1158;
                        float _3152 = sqrt(1.0 - ((1.0 - (_3145 * _3145)) * (1.0 - (_3144 * _3144))));
                        float _3153 = _3152 * _3152;
                        float _3154 = _3153 * _3153;
                        float _3155 = _3134 + _3099;
                        float _3156 = _3135 + _3100;
                        float _3157 = _3136 + _3101;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3165 = dot(vec3(_1098, _1101, _1104), vec3(_3134, _3135, _3136));
                        float _4451 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3168 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3169 = dot(vec3(_1098, _1101, _1104), vec3(_3161 * _3155, _3161 * _3156, _3161 * _3157));
                        float _4462 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3176 = ((_3172 * _3172) * (_3154 + (-1.0))) + 1.0;
                        float _3177 = _3112 * _3153;
                        float _3178 = _3177 * _3177;
                        float _3181 = ((1.0 - _3178) * _3102) + _3178;
                        float _4473 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3182 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3183 = 1.0 - _3153;
                        float _3193 = (0.5 / (((_3182 * ((_3168 * _3183) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3153) * _3168))) * _3182;
                        float _4484 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3204 = (((_3154 * 3.1415927410125732421875) * (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) / ((_3176 * _3176) * ((_3119 * 2.1991131305694580078125) + 3.141590118408203125))) * _3108;
                        _2930 = (_3123 * _3071.x) + _3029;
                        _2931 = (_3123 * _3071.y) + _3030;
                        _2932 = (_3123 * _3071.z) + _3031;
                        _2927 = (_3204 * _3088.x) + _3026;
                        _2928 = (_3204 * _3088.y) + _3027;
                        _2929 = (_3204 * _3088.z) + _3028;
                        if (_3033 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3026 = _2927;
                            _3027 = _2928;
                            _3028 = _2929;
                            _3029 = _2930;
                            _3030 = _2931;
                            _3031 = _2932;
                            _3032 = _3033;
                        }
                    }
                    frontier_phi_95_pred = _2928;
                    frontier_phi_95_pred_1 = _2927;
                    frontier_phi_95_pred_2 = _2929;
                    frontier_phi_95_pred_3 = _2932;
                    frontier_phi_95_pred_4 = _2931;
                    frontier_phi_95_pred_5 = _2930;
                }
                _2641 = frontier_phi_95_pred;
                _2639 = frontier_phi_95_pred_1;
                _2643 = frontier_phi_95_pred_2;
                _2649 = frontier_phi_95_pred_3;
                _2647 = frontier_phi_95_pred_4;
                _2645 = frontier_phi_95_pred_5;
                uint _2837 = _2836 + 1u;
                if (_2837 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2830 = _2639;
                    _2831 = _2641;
                    _2832 = _2643;
                    _2833 = _2645;
                    _2834 = _2647;
                    _2835 = _2649;
                    _2836 = _2837;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
        }
        uvec4 _2652 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2653 = _2652.z;
        uint _2655 = (_2653 >> 8u) & 15u;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((4294967295u << _2655) & _2521) == 0u)
        {
            _2798 = _2638;
            _2800 = _2640;
            _2802 = _2642;
            _2804 = _2644;
            _2806 = _2646;
            _2808 = _2648;
        }
        else
        {
            float _2823 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
            float _2824 = _2823 * _2475;
            float _2825 = _2823 * _2476;
            float _2826 = _2823 * _2477;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2655 < ((_2653 >> 12u) & 15u))
            {
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _3009 = _2638;
                float _3010 = _2640;
                float _3011 = _2642;
                float _3012 = _2644;
                float _3013 = _2646;
                float _3014 = _2648;
                uint _3015 = _2655;
                uint _3024;
                bool _3025;
                for (;;)
                {
                    _3024 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                    _3025 = _3024 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_3025)
                    {
                        frontier_phi_109_pred = _3010;
                        frontier_phi_109_pred_1 = _3009;
                        frontier_phi_109_pred_2 = _3014;
                        frontier_phi_109_pred_3 = _3013;
                        frontier_phi_109_pred_4 = _3012;
                        frontier_phi_109_pred_5 = _3011;
                    }
                    else
                    {
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3252 = _3009;
                        float _3253 = _3010;
                        float _3254 = _3011;
                        float _3255 = _3012;
                        float _3256 = _3013;
                        float _3257 = _3014;
                        uint _3258 = _3024;
                        uint _3259;
                        vec4 _3284;
                        float _3285;
                        vec4 _3300;
                        vec3 _3312;
                        vec4 _3327;
                        vec4 _3342;
                        float _3388;
                        bool _3389;
                        for (;;)
                        {
                            uint _3269 = ((_3015 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3258));
                            _3259 = (_3258 + 4294967295u) & _3258;
                            uint _3271 = _3269 * 40u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3285 = _3284.w;
                            uint _3287 = (_3269 * 40u) + 4u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3269 * 40u) + 8u;
                            _3312 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x));
                            uint _3314 = (_3269 * 40u) + 16u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3329 = (_3269 * 40u) + 20u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3344 = (_3269 * 40u) + 24u;
                            vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3363 = (_3269 * 40u) + 28u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3388 = fma(_2477, _3376.z, fma(_2476, _3376.y, _3376.x * _2475)) + _3376.w;
                            _3389 = !((fma(_2477, _3357.z, fma(_2476, _3357.y, _3357.x * _2475)) + _3357.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3389)
                            {
                                float _3416 = _3284.x - _2475;
                                float _3417 = _3284.y - _2476;
                                float _3418 = _3284.z - _2477;
                                float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                                float _3422 = inversesqrt(_3419);
                                float _3423 = _3422 * _3416;
                                float _3424 = _3422 * _3417;
                                float _3425 = _3422 * _3418;
                                float _3429 = 1.0 - (_3419 / (_3285 * _3285));
                                float _4495 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3434 = sqrt(_3419) * _3300.w;
                                float _3436 = 1.39999997615814208984375 / (_3434 + 1.39999997615814208984375);
                                float _3437 = _3436 * _3436;
                                float _3440 = ((1.0 - _3437) * dot(vec3(_3423, _3424, _3425), vec3(_1098, _1101, _1104))) + _3437;
                                float _3443 = _3434 * _3434;
                                float _3447 = (fma(_2477, _3327.z, fma(_2476, _3327.y, _3327.x * _2475)) + _3327.w) / _3388;
                                float _3448 = (fma(_2477, _3342.z, fma(_2476, _3342.y, _3342.x * _2475)) + _3342.w) / _3388;
                                float _3452 = 1.0 - dot(vec2(_3447, _3448), vec2(_3447, _3448));
                                float _4511 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3454 = _3453 * (((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3430) / ((_3443 * 0.699999988079071044921875) + 1.0));
                                float _3466 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                                float _3467 = 1.0 - _1158;
                                float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                                float _3475 = _3474 * _3474;
                                float _3476 = _3475 * _3475;
                                float _3477 = _3423 - _2824;
                                float _3478 = _3424 - _2825;
                                float _3479 = _3425 - _2826;
                                float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                                float _3487 = dot(vec3(_1098, _1101, _1104), vec3((-0.0) - _2824, (-0.0) - _2825, (-0.0) - _2826));
                                float _4522 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3491 = dot(vec3(_1098, _1101, _1104), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                                float _4533 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                                float _3499 = _3436 * _3475;
                                float _3500 = _3499 * _3499;
                                float _3506 = ((1.0 - _3500) * dot(vec3(_1098, _1101, _1104), vec3(_3423, _3424, _3425))) + _3500;
                                float _4544 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3508 = 1.0 - _3475;
                                float _3518 = (0.5 / (((_3507 * ((_3490 * _3508) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3507 * _3508) + _3475) * _3490))) * _3507;
                                float _4555 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3528 = (_3453 * _3430) * (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) / ((_3498 * _3498) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3454 * _3300.y;
                                frontier_phi_115_pred_1 = _3454 * _3300.x;
                                frontier_phi_115_pred_2 = _3528 * _3312.z;
                                frontier_phi_115_pred_3 = _3528 * _3312.y;
                                frontier_phi_115_pred_4 = _3528 * _3312.x;
                                frontier_phi_115_pred_5 = _3454 * _3300.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3536 = frontier_phi_115_pred;
                            _3535 = frontier_phi_115_pred_1;
                            _3534 = frontier_phi_115_pred_2;
                            _3533 = frontier_phi_115_pred_3;
                            _3532 = frontier_phi_115_pred_4;
                            _3537 = frontier_phi_115_pred_5;
                            _3242 = _3535 + _3255;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            _3239 = _3532 + _3252;
                            _3240 = _3533 + _3253;
                            _3241 = _3534 + _3254;
                            if (_3259 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3259;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3240;
                        frontier_phi_109_pred_1 = _3239;
                        frontier_phi_109_pred_2 = _3244;
                        frontier_phi_109_pred_3 = _3243;
                        frontier_phi_109_pred_4 = _3242;
                        frontier_phi_109_pred_5 = _3241;
                    }
                    _2801 = frontier_phi_109_pred;
                    _2799 = frontier_phi_109_pred_1;
                    _2809 = frontier_phi_109_pred_2;
                    _2807 = frontier_phi_109_pred_3;
                    _2805 = frontier_phi_109_pred_4;
                    _2803 = frontier_phi_109_pred_5;
                    uint _3016 = _3015 + 1u;
                    if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3009 = _2799;
                        _3010 = _2801;
                        _3011 = _2803;
                        _3012 = _2805;
                        _3013 = _2807;
                        _3014 = _2809;
                        _3015 = _3016;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2799;
                frontier_phi_84_85_ladder_1 = _2803;
                frontier_phi_84_85_ladder_2 = _2809;
                frontier_phi_84_85_ladder_3 = _2807;
                frontier_phi_84_85_ladder_4 = _2805;
                frontier_phi_84_85_ladder_5 = _2801;
            }
            else
            {
                frontier_phi_84_85_ladder = _2638;
                frontier_phi_84_85_ladder_1 = _2642;
                frontier_phi_84_85_ladder_2 = _2648;
                frontier_phi_84_85_ladder_3 = _2646;
                frontier_phi_84_85_ladder_4 = _2644;
                frontier_phi_84_85_ladder_5 = _2640;
            }
            _2798 = frontier_phi_84_85_ladder;
            _2800 = frontier_phi_84_85_ladder_5;
            _2802 = frontier_phi_84_85_ladder_1;
            _2804 = frontier_phi_84_85_ladder_4;
            _2806 = frontier_phi_84_85_ladder_3;
            _2808 = frontier_phi_84_85_ladder_2;
        }
        float _2813 = isnan(1.0) ? _1142 : (isnan(_1142) ? 1.0 : min(_1142, 1.0));
        _2534 = (_2813 * _2804) + _2264;
        _2536 = (_2813 * _2806) + _2265;
        _2538 = (_2813 * _2808) + _2266;
        _2540 = ((_2798 * 0.039999999105930328369140625) * _2813) + _2417;
        _2542 = ((_2800 * 0.039999999105930328369140625) * _2813) + _2418;
        _2544 = ((_2802 * 0.039999999105930328369140625) * _2813) + _2419;
    }
    else
    {
        _2534 = _2264;
        _2536 = _2265;
        _2538 = _2266;
        _2540 = _2417;
        _2542 = _2418;
        _2544 = _2419;
    }
    uint _2550 = _1118 + uint(cbMatDynParam._m0[0u].w);
    float _2556 = (cbSceneParam._m0[72u].y * ((_998 * ((_989 - _951) - (_989 * _962))) + _951)) * cbInstanceData._m0[_2550].x;
    float _2557 = (cbSceneParam._m0[72u].y * ((_998 * ((_990 - _952) - (_990 * _962))) + _952)) * cbInstanceData._m0[_2550].y;
    float _2558 = (((_998 * ((_991 - _953) - (_991 * _962))) + _953) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2550].z;
    float _4571 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _4582 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _4593 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _2575 = (((isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2534 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1142))) + ((_2540 + ((isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))) * _1977)) * cbPerFrame._m0[3u].x)) + _2556;
    float _2577 = (_2557 + ((_2542 + ((isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0))) * _1977)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2536 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1142)));
    float _2579 = (_2558 + ((_2544 + ((isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0))) * _1977)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2538 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1142)));
    float _2580 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2581 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2582 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2588 = cbMtdParam._m0[2u].x * _2556;
    float _2589 = cbMtdParam._m0[2u].y * _2557;
    float _2590 = cbMtdParam._m0[2u].z * _2558;
    float _4619 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2592 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    uint _2593 = _1117 + 6u;
    float _2601 = _1079 / cbSceneParam._m0[86u].x;
    float _2602 = _1080 / cbSceneParam._m0[86u].y;
    vec4 _2616 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2601, _2602, (log2((isnan(cbSceneParam._m0[77u].w) ? _1053 : (isnan(_1053) ? cbSceneParam._m0[77u].w : min(_1053, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2618 = _2616.x;
    float _2619 = _2616.y;
    float _2620 = _2616.z;
    float _2621 = _2616.w;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    if (_1053 > cbSceneParam._m0[78u].w)
    {
        float _2663 = isnan(_1053) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1053 : min(cbSceneParam._m0[80u].w, _1053));
        float _2664 = _2663 / _1053;
        float _2675 = _2664 * _288;
        float _2676 = _289 * _2664;
        float _2677 = (-0.0) - _2676;
        float _2678 = _2664 * _290;
        float _2680 = (cbSceneParam._m0[77u].w * _2677) / _2663;
        float _2681 = _2680 + cbSceneParam._m0[79u].w;
        float _2682 = cbSceneParam._m0[79u].w - _2676;
        float _2688 = sqrt(((_2675 * _2675) + (_2676 * _2676)) + (_2678 * _2678));
        float _2691 = (1.0 - (cbSceneParam._m0[77u].w / _2663)) * _2688;
        float _2697 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2699 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2940;
        if (abs((_2677 - _2680) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2940 = ((((_2681 > 0.0) ? exp2(_2697 * _2681) : (2.0 - exp2(_2699 * _2681))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2691;
        }
        else
        {
            float _2859 = 1.0 / cbSceneParam._m0[80u].x;
            float _2860 = isnan(_2682) ? _2681 : (isnan(_2681) ? _2682 : max(_2681, _2682));
            float _2861 = isnan(_2682) ? _2681 : (isnan(_2681) ? _2682 : min(_2681, _2682));
            float _2870 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : min(_2860, 0.0));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            _2940 = ((abs(_2688 / _2677) * cbSceneParam._m0[80u].y) * ((((_2870 - _2871) * 2.0) - ((exp2(_2697 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0)))) - exp2(_2697 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))))) * _2859)) - ((exp2(_2699 * _2870) - exp2(_2699 * _2871)) * _2859))) + (_2691 * cbSceneParam._m0[80u].z);
        }
        vec4 _2942 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2601, _2602, 1.0), 0.0);
        float _2951 = exp2((_2940 * (-1.44269502162933349609375)) * (1.0 - _2942.w));
        float _2952 = log2(_2951);
        float _2968 = log2(_2621);
        _2701 = (exp2(_2968 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].x)) * _2942.x) / cbSceneParam._m0[78u].x)) + _2618;
        _2703 = (exp2(_2968 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].y)) * _2942.y) / cbSceneParam._m0[78u].y)) + _2619;
        _2705 = (exp2(_2968 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].z)) * _2942.z) / cbSceneParam._m0[78u].z)) + _2620;
        _2707 = _2951 * _2621;
    }
    else
    {
        _2701 = _2618;
        _2703 = _2619;
        _2705 = _2620;
        _2707 = _2621;
    }
    bool _2978;
    vec4 _2716;
    vec4 _2738;
    float _2740;
    float _2744;
    float _2745;
    float _2746;
    float _2749;
    float _2752;
    float _2755;
    float _2756;
    bool _2766;
    for (;;)
    {
        _2716 = cbMatDynParam._m0[0u];
        float _2718 = roundEven(_2716.y);
        bool _2719 = _2718 == 3.0;
        float _2720 = log2(_2707);
        float _2724 = exp2(_2720 * cbSceneParam._m0[78u].x);
        float _2725 = exp2(_2720 * cbSceneParam._m0[78u].y);
        float _2726 = exp2(_2720 * cbSceneParam._m0[78u].z);
        float _2727 = _2724 * _2580;
        float _2728 = _2725 * _2581;
        float _2729 = _2726 * _2582;
        float _2736 = _1067 + (-0.5);
        _2738 = cbMtdParam._m0[1u];
        _2740 = _2738.y * _2736;
        float _2743 = (_2718 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2744 = _2743 * (_2719 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2701)));
        _2745 = _2743 * (_2719 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2703)));
        _2746 = _2743 * (_2719 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2705)));
        _2749 = ((_2588 * _2592) * _2724) * _2743;
        _2752 = ((_2589 * _2592) * _2725) * _2743;
        _2755 = ((_2590 * _2592) * _2726) * _2743;
        _2756 = _2736 * 0.999000012874603271484375;
        _2766 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2766)
        {
            if ((cbInstanceData._m0[_1117 + 7u].x + _2756) < 0.5)
            {
                _2978 = true;
                break;
            }
        }
        uint _2894 = _1118 + uint(_2716.w);
        if ((cbInstanceData._m0[_2894].w < 1.0) && ((cbInstanceData._m0[_2894].w + _2756) < 0.5))
        {
            _2978 = true;
            break;
        }
        if ((_2740 + 1.0) < _2738.x)
        {
            _2978 = true;
            break;
        }
        _2978 = false;
        break;
    }
    float _3209;
    if (_2978)
    {
        discard_state = true;
        _3209 = 0.0;
    }
    else
    {
        _3209 = cbInstanceData._m0[_2593].w;
    }
    SV_Target.x = _2744;
    SV_Target.y = _2745;
    SV_Target.z = _2746;
    SV_Target.w = _3209;
    SV_Target_1.x = _2749;
    SV_Target_1.y = _2752;
    SV_Target_1.z = _2755;
    SV_Target_1.w = cbInstanceData._m0[_2593].w;
    discard_exit();
}


