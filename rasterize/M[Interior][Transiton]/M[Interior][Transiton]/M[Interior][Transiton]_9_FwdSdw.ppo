#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _452;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _296 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _299 = _296.x;
    vec4 _317 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _299) + cbMtdParam._m0[12u].x) * _317.x;
    float _336 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _299) + cbMtdParam._m0[12u].y) * _317.y;
    float _338 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _299) + cbMtdParam._m0[12u].z) * _317.z;
    vec4 _365 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _380 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _387 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _399 = cbMtdParam._m0[28u].z + _280;
    float _400 = cbMtdParam._m0[28u].w + _281;
    float _401 = cbMtdParam._m0[29u].x + _282;
    float _415 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_380 * _210, _380 * _211, _380 * _212));
    float _416 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_387 * _224, _387 * _225, _387 * _226));
    float _417 = (-0.0) - dot(vec3(_399, _400, _401), vec3((-0.0) - _217, (-0.0) - _218, (-0.0) - _219));
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _422 = _421 * _417;
    float _427 = ((cbMtdParam._m0[25u].y * _415) * _421) + (((_365.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _428 = ((cbMtdParam._m0[25u].z * _416) * _421) + (((_365.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _431 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _432 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _450;
    float _453;
    float _455;
    if (_427 > 0.0)
    {
        float _436 = (1.0 - _431) / _427;
        _450 = _436;
        _453 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_436 * _422)) * 0.16666667163372039794921875;
        _455 = (fract((_436 * _428) + _432) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_427 < 0.0)
        {
            float _451 = ((-0.0) - _431) / _427;
            frontier_phi_3_2_ladder = (fract(_451 * _422) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _451;
            frontier_phi_3_2_ladder_2 = (fract((_451 * _428) + _432) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _452;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _450 = frontier_phi_3_2_ladder_1;
        _453 = frontier_phi_3_2_ladder;
        _455 = frontier_phi_3_2_ladder_2;
    }
    float _481;
    float _483;
    float _485;
    if (_428 > 0.0)
    {
        float _468 = (1.0 - _432) / _428;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_468 < _450)
        {
            frontier_phi_8_5_ladder = (fract(_468 * _422) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_468 * _427) + _431) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _468;
        }
        else
        {
            frontier_phi_8_5_ladder = _455;
            frontier_phi_8_5_ladder_1 = _453;
            frontier_phi_8_5_ladder_2 = _450;
        }
        _481 = frontier_phi_8_5_ladder_2;
        _483 = frontier_phi_8_5_ladder_1;
        _485 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_428 < 0.0)
        {
            float _482 = ((-0.0) - _432) / _428;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_482 < _450)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_482 * _422) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_482 * _427) + _431) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _482;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _455;
                frontier_phi_8_6_ladder_9_ladder_1 = _453;
                frontier_phi_8_6_ladder_9_ladder_2 = _450;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _455;
            frontier_phi_8_6_ladder_1 = _453;
            frontier_phi_8_6_ladder_2 = _450;
        }
        _481 = frontier_phi_8_6_ladder_2;
        _483 = frontier_phi_8_6_ladder_1;
        _485 = frontier_phi_8_6_ladder;
    }
    float _489 = (_422 > 0.0) ? (cbMtdParam._m0[20u].z / _422) : 5000.0;
    float _502;
    float _503;
    if (_489 < _481)
    {
        _502 = ((_431 + cbMtdParam._m0[22u].x) + (_489 * _427)) * 0.16666667163372039794921875;
        _503 = (((_489 * _428) + _432) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _502 = _483;
        _503 = _485;
    }
    vec4 _505 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_502, _503));
    float _510 = _505.x * _299;
    float _511 = _505.y * _299;
    float _512 = _505.z * _299;
    vec4 _525 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _529 = _525.z;
    float _532 = (_525.x * 2.0) + (-1.0);
    float _533 = (_525.y * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3648 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))));
    float _551 = (cbMtdParam._m0[19u].y * _510) * cbMtdParam._m0[16u].x;
    float _553 = (cbMtdParam._m0[19u].y * _511) * cbMtdParam._m0[16u].y;
    float _555 = (cbMtdParam._m0[19u].y * _512) * cbMtdParam._m0[16u].z;
    vec4 _582 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _587 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _593 = ((_582.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _595 = (-0.0) - (cbMtdParam._m0[21u].x * ((_582.x * 0.5) + (-0.25)));
    float _596 = fract(_587);
    float _598 = fract(_587 + 0.5);
    vec4 _625 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_596 * _595) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_593 * _596) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _627 = _625.x;
    float _633 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_598 * _595) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_593 * _598) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _627) * abs((_596 * 2.0) + (-1.0))) + _627;
    float _644 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _648 = fract(abs(_644));
    float _655 = sin(cbMtdParam._m0[21u].z);
    float _656 = cos(cbMtdParam._m0[21u].z);
    float _657 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _658 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _683 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_658, (-0.0) - _655, _656 * _657) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_658, _656, _657 * _655) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_644 >= ((-0.0) - _644)) ? _648 : ((-0.0) - _648)) * cbMtdParam._m0[18u].z) - _633)) + cbMtdParam._m0[18u].w;
    float _684 = ceil(_683);
    float _3659 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _705 = ((((cbMtdParam._m0[21u].w * _510) * cbMtdParam._m0[15u].x) - _551) * _685) + _551;
    float _706 = ((((cbMtdParam._m0[21u].w * _511) * cbMtdParam._m0[15u].y) - _553) * _685) + _553;
    float _707 = ((((cbMtdParam._m0[21u].w * _512) * cbMtdParam._m0[15u].z) - _555) * _685) + _555;
    float _711 = abs(cbMtdParam._m0[20u].w * _683);
    float _715 = (((_711 * cbMtdParam._m0[18u].y) - _633) * _711) + _633;
    float _3670 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _716 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    vec4 _728 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _743 = (cbMtdParam._m0[14u].x * _728.x) * cbMtdParam._m0[19u].x;
    float _744 = (cbMtdParam._m0[14u].y * _728.y) * cbMtdParam._m0[19u].x;
    float _745 = (cbMtdParam._m0[14u].z * _728.z) * cbMtdParam._m0[19u].x;
    float _752 = exp2(log2(_716) * cbMtdParam._m0[20u].x);
    float _774 = fma(_539, _217, fma(_533, _224, _532 * _210));
    float _777 = fma(_539, _218, fma(_533, _225, _532 * _211));
    float _780 = fma(_539, _219, fma(_533, _226, _532 * _212));
    float _784 = inversesqrt(dot(vec3(_774, _777, _780), vec3(_774, _777, _780)));
    float _785 = _784 * _774;
    float _786 = _784 * _777;
    float _787 = _784 * _780;
    float _3681 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _788 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3703 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3714 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _807 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _811 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _812 = _280 * _811;
    float _813 = _281 * _811;
    float _814 = _282 * _811;
    float _820 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _821 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _840 = fma(_787, cbSceneParam._m0[5u].z, fma(_786, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _785));
    float _843 = fma(_787, cbSceneParam._m0[6u].z, fma(_786, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _785));
    float _846 = fma(_787, cbSceneParam._m0[7u].z, fma(_786, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _785));
    uint _859 = uint(roundEven(NORMAL.w)) * 13u;
    uint _860 = _859 + 9u;
    uint _861 = _860 + uint(cbMatDynParam._m0[0u].w);
    float _867 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_861].x;
    float _868 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * cbInstanceData._m0[_861].y;
    float _869 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_861].z;
    float _3725 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    vec4 _881 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _820, cbSceneParam._m0[86u].y * _821));
    float _884 = _881.x * TEXCOORD_4;
    float _885 = dot(vec3(_785, _786, _787), vec3(_812, _813, _814));
    float _888 = _885 * 2.0;
    float _892 = (_888 * _785) - _812;
    float _893 = (_888 * _786) - _813;
    float _894 = (_888 * _787) - _814;
    float _898 = abs(dot(vec3(_812, _813, _814), vec3(_785, _786, _787)));
    float _3758 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _900 = sqrt(_788);
    float _913 = exp2((_900 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_900 * 3.0));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _986 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _990 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _994 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1018 = _945 + _785;
        float _1019 = _949 + _786;
        float _1020 = _953 + _787;
        float _1030 = fma(_1020, cbModelParam._m0[26u].z, fma(_1019, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1018)) - _986;
        float _1031 = fma(_1020, cbModelParam._m0[27u].z, fma(_1019, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1018)) - _990;
        float _1032 = fma(_1020, cbModelParam._m0[28u].z, fma(_1019, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1018)) - _994;
        float _1036 = inversesqrt(dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032)));
        float _1049 = ((_1036 * _1030) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_986 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1036 * _1031) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_990 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1036 * _1032) / cbModelParam._m0[34u].z) + ((((((_994 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        float _1088 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1054.x + (-0.5));
        float _1090 = _1088 * (_1054.y + (-0.5));
        float _1091 = _1088 * (_1054.z + (-0.5));
        float _1098 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1061.x + (-0.5));
        float _1100 = _1098 * (_1061.y + (-0.5));
        float _1101 = _1098 * (_1061.z + (-0.5));
        float _1108 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1068.x + (-0.5));
        float _1110 = _1108 * (_1068.y + (-0.5));
        float _1111 = _1108 * (_1068.z + (-0.5));
        float _1118 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1075.x + (-0.5));
        float _1120 = _1118 * (_1075.y + (-0.5));
        float _1121 = _1118 * (_1075.z + (-0.5));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = _1089 * 0.5;
        float _1126 = _1099 * 0.5;
        float _1127 = _1109 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1142 = (dot(vec3(_785, _786, _787), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1152 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3806 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1154 + 1.0))) + _1159) * _1122;
        float _1169 = _1090 * 0.5;
        float _1170 = _1100 * 0.5;
        float _1171 = _1110 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_785, _786, _787), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3839 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1196 + 1.0))) + _1201) * _1123;
        float _1211 = _1091 * 0.5;
        float _1212 = _1101 * 0.5;
        float _1213 = _1111 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_785, _786, _787), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3872 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1238 + 1.0))) + _1243) * _1124;
        _1260 = _1091;
        _1261 = _1090;
        _1262 = _1089;
        _1263 = _1101;
        _1264 = _1100;
        _1265 = _1099;
        _1266 = _1111;
        _1267 = _1110;
        _1268 = _1109;
        _1269 = _1124;
        _1270 = _1123;
        _1271 = _1122;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
    }
    else
    {
        _1260 = _452;
        _1261 = _452;
        _1262 = _452;
        _1263 = _452;
        _1264 = _452;
        _1265 = _452;
        _1266 = _452;
        _1267 = _452;
        _1268 = _452;
        _1269 = _452;
        _1270 = _452;
        _1271 = _452;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1299 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1303 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1307 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1330 = _945 + _785;
        float _1331 = _949 + _786;
        float _1332 = _953 + _787;
        float _1342 = fma(_1332, cbModelParam._m0[30u].z, fma(_1331, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1330)) - _1299;
        float _1343 = fma(_1332, cbModelParam._m0[31u].z, fma(_1331, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1330)) - _1303;
        float _1344 = fma(_1332, cbModelParam._m0[32u].z, fma(_1331, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1330)) - _1307;
        float _1348 = inversesqrt(dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344)));
        float _1361 = ((_1348 * _1342) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1299 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1348 * _1343) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1303 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1348 * _1344) / cbModelParam._m0[35u].z) + ((((((_1307 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        float _1398 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1365.x + (-0.5));
        float _1400 = _1398 * (_1365.y + (-0.5));
        float _1401 = _1398 * (_1365.z + (-0.5));
        float _1408 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1372.x + (-0.5));
        float _1410 = _1408 * (_1372.y + (-0.5));
        float _1411 = _1408 * (_1372.z + (-0.5));
        float _1418 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1379.x + (-0.5));
        float _1420 = _1418 * (_1379.y + (-0.5));
        float _1421 = _1418 * (_1379.z + (-0.5));
        float _1428 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1386.x + (-0.5));
        float _1430 = _1428 * (_1386.y + (-0.5));
        float _1431 = _1428 * (_1386.z + (-0.5));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = _1399 * 0.5;
        float _1436 = _1409 * 0.5;
        float _1437 = _1419 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_785, _786, _787), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _3935 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1462 + 1.0))) + _1467) * _1432;
        float _1477 = _1400 * 0.5;
        float _1478 = _1410 * 0.5;
        float _1479 = _1420 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_785, _786, _787), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _3968 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1504 + 1.0))) + _1509) * _1433;
        float _1519 = _1401 * 0.5;
        float _1520 = _1411 * 0.5;
        float _1521 = _1421 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_785, _786, _787), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4001 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1546 + 1.0))) + _1551) * _1434;
        _1568 = _1401;
        _1569 = _1400;
        _1570 = _1399;
        _1571 = _1411;
        _1572 = _1410;
        _1573 = _1409;
        _1574 = _1421;
        _1575 = _1420;
        _1576 = _1419;
        _1577 = _1434;
        _1578 = _1433;
        _1579 = _1432;
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _452;
        _1569 = _452;
        _1570 = _452;
        _1571 = _452;
        _1572 = _452;
        _1573 = _452;
        _1574 = _452;
        _1575 = _452;
        _1576 = _452;
        _1577 = _452;
        _1578 = _452;
        _1579 = _452;
        _1580 = 0.0;
        _1581 = 0.0;
        _1582 = 0.0;
    }
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1272)) + _1272;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1273)) + _1273;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1274)) + _1274;
    float _1615 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1592));
    float _1636 = _892 * 0.5;
    float _1637 = _893 * 0.5;
    float _1638 = _894 * 0.5;
    float _1639 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1642 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1645 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1679;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1652 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1656 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1660 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1667 = dot(vec4(cbModelParam._m0[39u]), vec4(_1636, _1637, _1638, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1690;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1681 = dot(vec4(cbModelParam._m0[40u]), vec4(_1636, _1637, _1638, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1694 = (_1690 * cbModelParam._m0[1u].x) + (_1679 * (1.0 - cbModelParam._m0[1u].x));
    float _1704 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _788);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1704 : min(cbModelParam._m0[25u].z, _1704));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1752 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1756 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1760 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1763 = fma(_894, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892));
        float _1766 = fma(_894, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892));
        float _1769 = fma(_894, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892));
        float _1797;
        if (_1763 > 0.0)
        {
            _1797 = abs((1.0 - _1752) / _1763);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1752 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1797 = frontier_phi_26_24_ladder;
        }
        float _1965;
        if (_1766 > 0.0)
        {
            _1965 = abs((1.0 - _1756) / _1766);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1756 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1965 = frontier_phi_35_31_ladder;
        }
        float _2409;
        if (_1769 > 0.0)
        {
            _2409 = abs((1.0 - _1760) / _1769);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1760 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2409 = frontier_phi_47_42_ladder;
        }
        float _2411 = isnan(_1965) ? _1797 : (isnan(_1797) ? _1965 : min(_1797, _1965));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1763) + _1752;
        float _2417 = (_2412 * _1766) + _1756;
        float _2418 = (_2412 * _1769) + _1760;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2419;
        float _2423 = _2419 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 > _2423) || ((_2417 < _2421) || ((_2416 < _2421) || (_2416 > _2423))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2418, cbModelParam._m0[9u].z, fma(_2417, cbModelParam._m0[9u].y, _2416 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2418, cbModelParam._m0[10u].z, fma(_2417, cbModelParam._m0[10u].y, _2416 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2418, cbModelParam._m0[11u].z, fma(_2417, cbModelParam._m0[11u].y, _2416 * cbModelParam._m0[11u].x))), _1705);
            frontier_phi_25_47_ladder = _2678.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2678.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2678.x * cbModelParam._m0[1u].y;
        }
        _1785 = frontier_phi_25_47_ladder_2;
        _1787 = frontier_phi_25_47_ladder_1;
        _1789 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_892, _893, _894), _1705);
        _1785 = _1773.x * cbModelParam._m0[1u].y;
        _1787 = _1773.y * cbModelParam._m0[1u].y;
        _1789 = _1773.z * cbModelParam._m0[1u].y;
    }
    float _1793 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _788);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1793 : min(cbModelParam._m0[25u].w, _1793));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1846 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1850 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1854 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1857 = fma(_894, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892));
        float _1860 = fma(_894, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892));
        float _1863 = fma(_894, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892));
        float _1970;
        if (_1857 > 0.0)
        {
            _1970 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1970 = frontier_phi_37_33_ladder;
        }
        float _2436;
        if (_1860 > 0.0)
        {
            _2436 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2436 = frontier_phi_49_44_ladder;
        }
        float _2807;
        if (_1863 > 0.0)
        {
            _2807 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2807 = frontier_phi_61_56_ladder;
        }
        float _2809 = isnan(_2436) ? _1970 : (isnan(_1970) ? _2436 : min(_1970, _2436));
        float _2810 = isnan(_2807) ? _2809 : (isnan(_2809) ? _2807 : min(_2809, _2807));
        float _2814 = (_2810 * _1857) + _1846;
        float _2815 = (_2810 * _1860) + _1850;
        float _2816 = (_2810 * _1863) + _1854;
        float _2817 = _2810 * 9.9999997473787516355514526367188e-05;
        float _2818 = (-1.0) - _2817;
        float _2820 = _2817 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2816 > _2820) || ((_2816 < _2818) || ((_2815 > _2820) || ((_2815 < _2818) || ((_2814 < _2818) || (_2814 > _2820))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2816, cbModelParam._m0[17u].z, fma(_2815, cbModelParam._m0[17u].y, _2814 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2816, cbModelParam._m0[18u].z, fma(_2815, cbModelParam._m0[18u].y, _2814 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2816, cbModelParam._m0[19u].z, fma(_2815, cbModelParam._m0[19u].y, _2814 * cbModelParam._m0[19u].x))), _1794);
            frontier_phi_34_61_ladder = _2937.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2937.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2937.x * cbModelParam._m0[1u].z;
        }
        _1882 = frontier_phi_34_61_ladder_2;
        _1884 = frontier_phi_34_61_ladder_1;
        _1886 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_892, _893, _894), _1794);
        _1882 = _1866.x * cbModelParam._m0[1u].z;
        _1884 = _1866.y * cbModelParam._m0[1u].z;
        _1886 = _1866.z * cbModelParam._m0[1u].z;
    }
    float _1898 = ((((1.0 - _913) * ((_900 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_913 * _900)) * _884;
    float _1899 = _1898 * ((cbModelParam._m0[1u].w * (_1882 - _1785)) + _1785);
    float _1900 = _1898 * ((cbModelParam._m0[1u].w * (_1884 - _1787)) + _1787);
    float _1901 = _1898 * ((cbModelParam._m0[1u].w * (_1886 - _1789)) + _1789);
    float _1904 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1900, cbSceneParam._m0[89u].y, _1899 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1900, cbSceneParam._m0[90u].y, _1899 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1900, cbSceneParam._m0[91u].y, _1899 * cbSceneParam._m0[91u].x));
    float _1944 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1948 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1952 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1956 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1957 = _1944 / _1956;
    float _1958 = _1948 / _1956;
    float _1959 = _1952 / _1956;
    float _2106;
    float _2107;
    float _2108;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1986 = ((uint(_1959 > cbSceneParam._m0[59u].y) + uint(_1959 > cbSceneParam._m0[59u].x)) + uint(_1959 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1987 = _1986 + 43u;
        uint _1995 = _1986 + 44u;
        uint _2003 = _1986 + 45u;
        uint _2011 = _1986 + 46u;
        float _2022 = fma(_1956, cbSceneParam._m0[_1987].w, fma(_1952, cbSceneParam._m0[_1987].z, fma(_1948, cbSceneParam._m0[_1987].y, _1944 * cbSceneParam._m0[_1987].x)));
        float _2026 = fma(_1956, cbSceneParam._m0[_1995].w, fma(_1952, cbSceneParam._m0[_1995].z, fma(_1948, cbSceneParam._m0[_1995].y, _1944 * cbSceneParam._m0[_1995].x)));
        float _2034 = fma(_1956, cbSceneParam._m0[_2011].w, fma(_1952, cbSceneParam._m0[_2011].z, fma(_1948, cbSceneParam._m0[_2011].y, _1944 * cbSceneParam._m0[_2011].x)));
        float _2039 = cbSceneParam._m0[33u].z * _2034;
        float _2041 = cbSceneParam._m0[33u].w * _2034;
        float _2044 = fma(_1956, cbSceneParam._m0[_2003].w, fma(_1952, cbSceneParam._m0[_2003].z, fma(_1948, cbSceneParam._m0[_2003].y, _1944 * cbSceneParam._m0[_2003].x))) / _2034;
        float _2092 = (cbSceneParam._m0[33u].x - sqrt(((_1958 * _1958) + (_1957 * _1957)) + (_1959 * _1959))) * cbSceneParam._m0[33u].y;
        float _4127 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2099 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 + _2022) / _2034, (_2041 + _2026) / _2034), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2041 + _2022) / _2034, (_2026 - _2039) / _2034), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 - _2039) / _2034, (_2026 - _2041) / _2034), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 - _2041) / _2034, (_2039 + _2026) / _2034), _2044), 0.0)).x), vec4(0.25)));
        _2106 = 1.0 - (_2099 * cbSceneParam._m0[34u].x);
        _2107 = 1.0 - (_2099 * cbSceneParam._m0[34u].y);
        _2108 = 1.0 - (_2099 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2106 = 1.0;
        _2107 = 1.0;
        _2108 = 1.0;
    }
    float _2172;
    float _2174;
    float _2176;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2160 = fma(_1956, cbSceneParam._m0[63u].w, fma(_1952, cbSceneParam._m0[63u].z, fma(_1948, cbSceneParam._m0[63u].y, _1944 * cbSceneParam._m0[63u].x)));
        float _2161 = fma(_1956, cbSceneParam._m0[60u].w, fma(_1952, cbSceneParam._m0[60u].z, fma(_1948, cbSceneParam._m0[60u].y, _1944 * cbSceneParam._m0[60u].x))) / _2160;
        float _2162 = fma(_1956, cbSceneParam._m0[61u].w, fma(_1952, cbSceneParam._m0[61u].z, fma(_1948, cbSceneParam._m0[61u].y, _1944 * cbSceneParam._m0[61u].x))) / _2160;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_2161 >= cbSceneParam._m0[64u].x) && (_2162 >= cbSceneParam._m0[64u].y)) && (_2161 <= cbSceneParam._m0[64u].z)) && (_2162 <= cbSceneParam._m0[64u].w))
        {
            float _2449 = fma(_1956, cbSceneParam._m0[62u].w, fma(_1952, cbSceneParam._m0[62u].z, fma(_1948, cbSceneParam._m0[62u].y, _1944 * cbSceneParam._m0[62u].x))) / _2160;
            float _2453 = isnan(cbSceneParam._m0[41u].w) ? _2449 : (isnan(_2449) ? cbSceneParam._m0[41u].w : max(_2449, cbSceneParam._m0[41u].w));
            float _2496 = (cbSceneParam._m0[33u].x - sqrt(((_1958 * _1958) + (_1957 * _1957)) + (_1959 * _1959))) * cbSceneParam._m0[33u].y;
            float _4143 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
            float _2503 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2161, cbSceneParam._m0[33u].w + _2162), _2453), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2161, _2162 - cbSceneParam._m0[33u].z), _2453), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2161 - cbSceneParam._m0[33u].z, _2162 - cbSceneParam._m0[33u].w), _2453), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2161 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2162), _2453), 0.0)).x), vec4(0.25)));
            float _2507 = 1.0 - (_2503 * cbSceneParam._m0[34u].x);
            float _2508 = 1.0 - (_2503 * cbSceneParam._m0[34u].y);
            float _2509 = 1.0 - (_2503 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2509) ? _2108 : (isnan(_2108) ? _2509 : min(_2108, _2509));
            frontier_phi_46_45_ladder_1 = isnan(_2508) ? _2107 : (isnan(_2107) ? _2508 : min(_2107, _2508));
            frontier_phi_46_45_ladder_2 = isnan(_2507) ? _2106 : (isnan(_2106) ? _2507 : min(_2106, _2507));
        }
        else
        {
            frontier_phi_46_45_ladder = _2108;
            frontier_phi_46_45_ladder_1 = _2107;
            frontier_phi_46_45_ladder_2 = _2106;
        }
        _2172 = frontier_phi_46_45_ladder_2;
        _2174 = frontier_phi_46_45_ladder_1;
        _2176 = frontier_phi_46_45_ladder;
    }
    else
    {
        _2172 = _2106;
        _2174 = _2107;
        _2176 = _2108;
    }
    uvec4 _2181 = floatBitsToUint(cbInstanceData._m0[_859 + 5u]);
    uint _2183 = _2181.x * 14u;
    uint _2184 = _2183 + 13u;
    float _2189 = _884 + (-1.0);
    float _2192 = (cbLight._m0[_2184].x * _2189) + 1.0;
    float _2193 = (cbLight._m0[_2184].y * _2189) + 1.0;
    uint _2194 = _2183 + 5u;
    float _2200 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
    uint _2204 = _2183 + 4u;
    float _2213 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
    uint _2217 = _2183 | 1u;
    float _2228 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_785, _786, _787));
    float _2231 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_785, _786, _787));
    float _4179 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _4190 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2236 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * 0.3183098733425140380859375;
    float _2238 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.3183098733425140380859375;
    float _2245 = ((cbLight._m0[_2194].x * _2200) * _2238) + (((cbLight._m0[_2204].x * _2172) * _2213) * _2236);
    float _2246 = ((_2200 * cbLight._m0[_2194].y) * _2238) + (((cbLight._m0[_2204].y * _2174) * _2213) * _2236);
    float _2247 = ((_2200 * cbLight._m0[_2194].z) * _2238) + (((cbLight._m0[_2204].z * _2176) * _2213) * _2236);
    uint _2249 = _2183 + 8u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _788) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2183].x + _812;
    float _2265 = cbLight._m0[_2183].y + _813;
    float _2266 = cbLight._m0[_2183].z + _814;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2183].xyz));
    float _4201 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2278 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2279 = dot(vec3(_785, _786, _787), vec3(_2271, _2272, _2273));
    float _4223 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2271, _2272, _2273));
    float _4234 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2263 * _2263;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2302 = (exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2303 = 1.0 - _2263;
    float _2314 = (0.5 / (((_2278 * ((_2277 * _2303) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2303) + _2263) * _2277))) * _2277;
    float _4245 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2316 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    uint _2330 = _2183 + 9u;
    float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _788) * 0.949999988079071044921875);
    float _2342 = _2341 * _2341;
    float _2343 = cbLight._m0[_2217].x + _812;
    float _2344 = cbLight._m0[_2217].y + _813;
    float _2345 = cbLight._m0[_2217].z + _814;
    float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
    float _2350 = _2349 * _2343;
    float _2351 = _2349 * _2344;
    float _2352 = _2349 * _2345;
    float _2353 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2217].xyz));
    float _4256 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2357 = dot(vec3(_785, _786, _787), vec3(_2350, _2351, _2352));
    float _4267 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2361 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2350, _2351, _2352));
    float _4278 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2365 = _2342 * _2342;
    float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
    float _2378 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2379 = 1.0 - _2342;
    float _2389 = (0.5 / (((_2278 * ((_2356 * _2379) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2379) + _2342) * _2356))) * _2356;
    float _4289 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2391 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
    float _2401 = (((_2378 * cbLight._m0[_2330].x) * _2391) * _2200) + ((((cbLight._m0[_2249].x * _2172) * _2302) * _2316) * _2213);
    float _2402 = (((_2378 * cbLight._m0[_2330].y) * _2391) * _2200) + ((((cbLight._m0[_2249].y * _2174) * _2302) * _2316) * _2213);
    float _2403 = (((_2378 * cbLight._m0[_2330].z) * _2391) * _2200) + ((((cbLight._m0[_2249].z * _2176) * _2302) * _2316) * _2213);
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    if (_2181.y == 0u)
    {
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.x;
        uint _2533 = uint((float(_2521.y) * floor(float(uint(cbSceneParam._m0[85u].y * _821) / _2522))) + floor(float(uint(cbSceneParam._m0[85u].x * _820) / _2522)));
        float _2543 = (log2(_1959 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2544 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        uint _2547 = uint(isnan(14.0) ? _2544 : (isnan(_2544) ? 14.0 : min(_2544, 14.0)));
        uvec4 _2552 = texelFetch(g_lightClusterGridBuffer, int(((_2547 << 2u) + (_2533 << 6u)) >> 2u));
        uint _2553 = _2552.x;
        uint _2554 = _2521.z;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        if (((((1u << ((_2554 >> 4u) & 15u)) + 4294967295u) & _2553) == 0u) || ((_2554 & 240u) == 0u))
        {
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
        }
        else
        {
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            uint _2871 = 0u;
            uint _2880;
            bool _2881;
            for (;;)
            {
                _2880 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2871 << 2u)) >> 2u)).x;
                _2881 = _2880 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2881)
                {
                    frontier_phi_70_pred = _2868;
                    frontier_phi_70_pred_1 = _2870;
                    frontier_phi_70_pred_2 = _2869;
                    frontier_phi_70_pred_3 = _2867;
                    frontier_phi_70_pred_4 = _2866;
                    frontier_phi_70_pred_5 = _2865;
                }
                else
                {
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    uint _3016;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2880;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    for (;;)
                    {
                        uint _3020 = uint(findLSB(_3016)) + (_2871 << 5u);
                        uint _3017 = (_3016 + 4294967295u) & _3016;
                        uint _3022 = _3020 * 48u;
                        vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 3u)).x));
                        uint _3042 = (_3020 * 48u) + 4u;
                        vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 3u)).x));
                        uint _3061 = (_3020 * 48u) + 8u;
                        vec3 _3072 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x));
                        float _3076 = _3036.x - _1957;
                        float _3077 = _3036.y - _1958;
                        float _3078 = _3036.z - _1959;
                        float _3079 = dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078));
                        float _3082 = inversesqrt(_3079);
                        float _3083 = _3082 * _3076;
                        float _3084 = _3082 * _3077;
                        float _3085 = _3082 * _3078;
                        float _3086 = dot(vec3(_840, _843, _846), vec3(_3083, _3084, _3085));
                        float _3091 = 1.0 - (_3079 * _3036.w);
                        float _4310 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3092 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _3093 = sqrt(_3079) * _3055.w;
                        float _3096 = 1.39999997615814208984375 / (_3093 + 1.39999997615814208984375);
                        float _3097 = _3096 * _3096;
                        float _3100 = ((1.0 - _3097) * _3086) + _3097;
                        float _3103 = _3093 * _3093;
                        float _3107 = ((isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))) * _3092) / ((_3103 * 0.699999988079071044921875) + 1.0);
                        float _3111 = (-0.0) - _1957;
                        float _3112 = (-0.0) - _1958;
                        float _3113 = (-0.0) - _1959;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3118 = _3117 * _3111;
                        float _3119 = _3117 * _3112;
                        float _3120 = _3117 * _3113;
                        float _3127 = exp2(log2(1.0 / ((_3103 * 3.5) + 5.0)) * 0.25);
                        float _3128 = 1.0 - _900;
                        float _3135 = sqrt(1.0 - ((1.0 - (_3128 * _3128)) * (1.0 - (_3127 * _3127))));
                        float _3136 = _3135 * _3135;
                        float _3137 = _3136 * _3136;
                        float _3138 = _3118 + _3083;
                        float _3139 = _3119 + _3084;
                        float _3140 = _3120 + _3085;
                        float _3144 = inversesqrt(dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140)));
                        float _3148 = dot(vec3(_840, _843, _846), vec3(_3118, _3119, _3120));
                        float _4326 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3151 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3152 = dot(vec3(_840, _843, _846), vec3(_3144 * _3138, _3144 * _3139, _3144 * _3140));
                        float _4337 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3155 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3159 = ((_3155 * _3155) * (_3137 + (-1.0))) + 1.0;
                        float _3160 = _3096 * _3136;
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3086) + _3161;
                        float _4348 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3165 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3166 = 1.0 - _3136;
                        float _3176 = (0.5 / (((_3165 * ((_3151 * _3166) + _3136)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3136) * _3151))) * _3165;
                        float _4359 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3187 = (((_3137 * 3.1415927410125732421875) * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) / ((_3159 * _3159) * ((_3103 * 2.1991131305694580078125) + 3.141590118408203125))) * _3092;
                        _2945 = (_3107 * _3055.x) + _3013;
                        _2946 = (_3107 * _3055.y) + _3014;
                        _2947 = (_3107 * _3055.z) + _3015;
                        _2942 = (_3187 * _3072.x) + _3010;
                        _2943 = (_3187 * _3072.y) + _3011;
                        _2944 = (_3187 * _3072.z) + _3012;
                        if (_3017 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3010 = _2942;
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _3017;
                        }
                    }
                    frontier_phi_70_pred = _2945;
                    frontier_phi_70_pred_1 = _2947;
                    frontier_phi_70_pred_2 = _2946;
                    frontier_phi_70_pred_3 = _2944;
                    frontier_phi_70_pred_4 = _2943;
                    frontier_phi_70_pred_5 = _2942;
                }
                _2694 = frontier_phi_70_pred;
                _2698 = frontier_phi_70_pred_1;
                _2696 = frontier_phi_70_pred_2;
                _2692 = frontier_phi_70_pred_3;
                _2690 = frontier_phi_70_pred_4;
                _2688 = frontier_phi_70_pred_5;
                uint _2872 = _2871 + 1u;
                if (_2872 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2865 = _2688;
                    _2866 = _2690;
                    _2867 = _2692;
                    _2868 = _2694;
                    _2869 = _2696;
                    _2870 = _2698;
                    _2871 = _2872;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
        }
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.z;
        uint _2704 = (_2702 >> 8u) & 15u;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        if (((4294967295u << _2704) & _2553) == 0u)
        {
            _2833 = _2687;
            _2835 = _2689;
            _2837 = _2691;
            _2839 = _2693;
            _2841 = _2695;
            _2843 = _2697;
        }
        else
        {
            float _2858 = inversesqrt(dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959)));
            float _2859 = _2858 * _1957;
            float _2860 = _2858 * _1958;
            float _2861 = _2858 * _1959;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2704 < ((_2702 >> 12u) & 15u))
            {
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2993 = _2687;
                float _2994 = _2689;
                float _2995 = _2691;
                float _2996 = _2693;
                float _2997 = _2695;
                float _2998 = _2697;
                uint _2999 = _2704;
                uint _3008;
                bool _3009;
                for (;;)
                {
                    _3008 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2999 << 2u)) >> 2u)).x;
                    _3009 = _3008 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_3009)
                    {
                        frontier_phi_76_pred = _2998;
                        frontier_phi_76_pred_1 = _2997;
                        frontier_phi_76_pred_2 = _2996;
                        frontier_phi_76_pred_3 = _2995;
                        frontier_phi_76_pred_4 = _2994;
                        frontier_phi_76_pred_5 = _2993;
                    }
                    else
                    {
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3205 = _2993;
                        float _3206 = _2994;
                        float _3207 = _2995;
                        float _3208 = _2996;
                        float _3209 = _2997;
                        float _3210 = _2998;
                        uint _3211 = _3008;
                        uint _3212;
                        vec4 _3237;
                        float _3238;
                        vec4 _3253;
                        vec3 _3265;
                        vec4 _3280;
                        vec4 _3295;
                        float _3341;
                        bool _3342;
                        for (;;)
                        {
                            uint _3222 = ((_2999 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3211));
                            _3212 = (_3211 + 4294967295u) & _3211;
                            uint _3224 = _3222 * 40u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3238 = _3237.w;
                            uint _3240 = (_3222 * 40u) + 4u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3222 * 40u) + 8u;
                            _3265 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x));
                            uint _3267 = (_3222 * 40u) + 16u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3222 * 40u) + 20u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3222 * 40u) + 24u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3316 = (_3222 * 40u) + 28u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3341 = fma(_1959, _3329.z, fma(_1958, _3329.y, _3329.x * _1957)) + _3329.w;
                            _3342 = !((fma(_1959, _3310.z, fma(_1958, _3310.y, _3310.x * _1957)) + _3310.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3342)
                            {
                                float _3369 = _3237.x - _1957;
                                float _3370 = _3237.y - _1958;
                                float _3371 = _3237.z - _1959;
                                float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                                float _3375 = inversesqrt(_3372);
                                float _3376 = _3375 * _3369;
                                float _3377 = _3375 * _3370;
                                float _3378 = _3375 * _3371;
                                float _3382 = 1.0 - (_3372 / (_3238 * _3238));
                                float _4370 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3387 = sqrt(_3372) * _3253.w;
                                float _3389 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                                float _3390 = _3389 * _3389;
                                float _3393 = ((1.0 - _3390) * dot(vec3(_3376, _3377, _3378), vec3(_840, _843, _846))) + _3390;
                                float _3396 = _3387 * _3387;
                                float _3400 = (fma(_1959, _3280.z, fma(_1958, _3280.y, _3280.x * _1957)) + _3280.w) / _3341;
                                float _3401 = (fma(_1959, _3295.z, fma(_1958, _3295.y, _3295.x * _1957)) + _3295.w) / _3341;
                                float _3405 = 1.0 - dot(vec2(_3400, _3401), vec2(_3400, _3401));
                                float _4386 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3407 = _3406 * (((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3383) / ((_3396 * 0.699999988079071044921875) + 1.0));
                                float _3419 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                                float _3420 = 1.0 - _900;
                                float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                                float _3428 = _3427 * _3427;
                                float _3429 = _3428 * _3428;
                                float _3430 = _3376 - _2859;
                                float _3431 = _3377 - _2860;
                                float _3432 = _3378 - _2861;
                                float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                                float _3440 = dot(vec3(_840, _843, _846), vec3((-0.0) - _2859, (-0.0) - _2860, (-0.0) - _2861));
                                float _4397 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3444 = dot(vec3(_840, _843, _846), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                                float _4408 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                                float _3452 = _3389 * _3428;
                                float _3453 = _3452 * _3452;
                                float _3459 = ((1.0 - _3453) * dot(vec3(_840, _843, _846), vec3(_3376, _3377, _3378))) + _3453;
                                float _4419 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3461 = 1.0 - _3428;
                                float _3471 = (0.5 / (((_3460 * ((_3443 * _3461) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3428) * _3443))) * _3460;
                                float _4430 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3481 = (_3406 * _3383) * (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) / ((_3451 * _3451) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3407 * _3253.z;
                                frontier_phi_82_pred_1 = _3407 * _3253.y;
                                frontier_phi_82_pred_2 = _3407 * _3253.x;
                                frontier_phi_82_pred_3 = _3481 * _3265.z;
                                frontier_phi_82_pred_4 = _3481 * _3265.y;
                                frontier_phi_82_pred_5 = _3481 * _3265.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3490 = frontier_phi_82_pred;
                            _3489 = frontier_phi_82_pred_1;
                            _3488 = frontier_phi_82_pred_2;
                            _3487 = frontier_phi_82_pred_3;
                            _3486 = frontier_phi_82_pred_4;
                            _3485 = frontier_phi_82_pred_5;
                            _3195 = _3488 + _3208;
                            _3196 = _3489 + _3209;
                            _3197 = _3490 + _3210;
                            _3192 = _3485 + _3205;
                            _3193 = _3486 + _3206;
                            _3194 = _3487 + _3207;
                            if (_3212 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3212;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3197;
                        frontier_phi_76_pred_1 = _3196;
                        frontier_phi_76_pred_2 = _3195;
                        frontier_phi_76_pred_3 = _3194;
                        frontier_phi_76_pred_4 = _3193;
                        frontier_phi_76_pred_5 = _3192;
                    }
                    _2844 = frontier_phi_76_pred;
                    _2842 = frontier_phi_76_pred_1;
                    _2840 = frontier_phi_76_pred_2;
                    _2838 = frontier_phi_76_pred_3;
                    _2836 = frontier_phi_76_pred_4;
                    _2834 = frontier_phi_76_pred_5;
                    uint _3000 = _2999 + 1u;
                    if (_3000 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2993 = _2834;
                        _2994 = _2836;
                        _2995 = _2838;
                        _2996 = _2840;
                        _2997 = _2842;
                        _2998 = _2844;
                        _2999 = _3000;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2842;
                frontier_phi_63_64_ladder_1 = _2844;
                frontier_phi_63_64_ladder_2 = _2840;
                frontier_phi_63_64_ladder_3 = _2838;
                frontier_phi_63_64_ladder_4 = _2836;
                frontier_phi_63_64_ladder_5 = _2834;
            }
            else
            {
                frontier_phi_63_64_ladder = _2695;
                frontier_phi_63_64_ladder_1 = _2697;
                frontier_phi_63_64_ladder_2 = _2693;
                frontier_phi_63_64_ladder_3 = _2691;
                frontier_phi_63_64_ladder_4 = _2689;
                frontier_phi_63_64_ladder_5 = _2687;
            }
            _2833 = frontier_phi_63_64_ladder_5;
            _2835 = frontier_phi_63_64_ladder_4;
            _2837 = frontier_phi_63_64_ladder_3;
            _2839 = frontier_phi_63_64_ladder_2;
            _2841 = frontier_phi_63_64_ladder;
            _2843 = frontier_phi_63_64_ladder_1;
        }
        float _2848 = isnan(1.0) ? _884 : (isnan(_884) ? 1.0 : min(_884, 1.0));
        _2566 = (_2848 * _2839) + _2245;
        _2568 = (_2848 * _2841) + _2246;
        _2570 = (_2848 * _2843) + _2247;
        _2572 = ((_2833 * 0.039999999105930328369140625) * _2848) + _2401;
        _2574 = ((_2835 * 0.039999999105930328369140625) * _2848) + _2402;
        _2576 = ((_2837 * 0.039999999105930328369140625) * _2848) + _2403;
    }
    else
    {
        _2566 = _2245;
        _2568 = _2246;
        _2570 = _2247;
        _2572 = _2401;
        _2574 = _2402;
        _2576 = _2403;
    }
    uint _2582 = _860 + uint(cbMatDynParam._m0[0u].w);
    float _2588 = (cbSceneParam._m0[72u].y * ((_752 * ((_743 - _705) - (_743 * _716))) + _705)) * cbInstanceData._m0[_2582].x;
    float _2589 = (cbSceneParam._m0[72u].y * ((_752 * ((_744 - _706) - (_744 * _716))) + _706)) * cbInstanceData._m0[_2582].y;
    float _2590 = (((_752 * ((_745 - _707) - (_745 * _716))) + _707) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2582].z;
    float _4446 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4457 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4468 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _2607 = (((isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2566 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _884))) + ((_2572 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1694)) * cbPerFrame._m0[3u].x)) + _2588;
    float _2609 = (_2589 + ((_2574 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1694)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2568 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _884)));
    float _2611 = (_2590 + ((_2576 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1694)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2570 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _884)));
    float _4494 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2624 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    uint _2625 = _859 + 6u;
    float _2633 = _820 / cbSceneParam._m0[86u].x;
    float _2634 = _821 / cbSceneParam._m0[86u].y;
    vec4 _2648 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, (log2((isnan(cbSceneParam._m0[77u].w) ? _807 : (isnan(_807) ? cbSceneParam._m0[77u].w : min(_807, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2650 = _2648.x;
    float _2651 = _2648.y;
    float _2652 = _2648.z;
    float _2653 = _2648.w;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    if (_807 > cbSceneParam._m0[78u].w)
    {
        float _2712 = isnan(_807) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _807 : min(cbSceneParam._m0[80u].w, _807));
        float _2713 = _2712 / _807;
        float _2724 = _2713 * _280;
        float _2725 = _281 * _2713;
        float _2726 = (-0.0) - _2725;
        float _2727 = _2713 * _282;
        float _2729 = (cbSceneParam._m0[77u].w * _2726) / _2712;
        float _2730 = _2729 + cbSceneParam._m0[79u].w;
        float _2731 = cbSceneParam._m0[79u].w - _2725;
        float _2737 = sqrt(((_2724 * _2724) + (_2725 * _2725)) + (_2727 * _2727));
        float _2740 = (1.0 - (cbSceneParam._m0[77u].w / _2712)) * _2737;
        float _2745 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2747 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2955;
        if (abs((_2726 - _2729) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2955 = ((((_2730 > 0.0) ? exp2(_2745 * _2730) : (2.0 - exp2(_2747 * _2730))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2740;
        }
        else
        {
            float _2894 = 1.0 / cbSceneParam._m0[80u].x;
            float _2895 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : max(_2730, _2731));
            float _2896 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : min(_2730, _2731));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            float _2906 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : min(_2896, 0.0));
            _2955 = ((abs(_2737 / _2726) * cbSceneParam._m0[80u].y) * ((((_2905 - _2906) * 2.0) - ((exp2(_2745 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0)))) - exp2(_2745 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0))))) * _2894)) - ((exp2(_2747 * _2905) - exp2(_2747 * _2906)) * _2894))) + (_2740 * cbSceneParam._m0[80u].z);
        }
        vec4 _2957 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, 1.0), 0.0);
        float _2966 = exp2((_2955 * (-1.44269502162933349609375)) * (1.0 - _2957.w));
        float _2967 = log2(_2966);
        float _2983 = log2(_2653);
        _2749 = (exp2(_2983 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].x)) * _2957.x) / cbSceneParam._m0[78u].x)) + _2650;
        _2751 = (exp2(_2983 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].y)) * _2957.y) / cbSceneParam._m0[78u].y)) + _2651;
        _2753 = (exp2(_2983 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].z)) * _2957.z) / cbSceneParam._m0[78u].z)) + _2652;
        _2755 = _2966 * _2653;
    }
    else
    {
        _2749 = _2650;
        _2751 = _2651;
        _2753 = _2652;
        _2755 = _2653;
    }
    float _2766 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2767 = _2766 == 3.0;
    float _2768 = log2(_2755);
    float _2772 = exp2(_2768 * cbSceneParam._m0[78u].x);
    float _2773 = exp2(_2768 * cbSceneParam._m0[78u].y);
    float _2774 = exp2(_2768 * cbSceneParam._m0[78u].z);
    float _2775 = _2772 * (isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0)));
    float _2776 = _2773 * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0)));
    float _2777 = _2774 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0)));
    float _2786 = (_2766 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2786 * (_2767 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2749)));
    SV_Target.y = _2786 * (_2767 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2751)));
    SV_Target.z = _2786 * (_2767 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2753)));
    SV_Target.w = cbInstanceData._m0[_2625].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2588) * _2624) * _2772) * _2786;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2589) * _2624) * _2773) * _2786;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2590) * _2624) * _2774) * _2786;
    SV_Target_1.w = cbInstanceData._m0[_2625].w;
}


