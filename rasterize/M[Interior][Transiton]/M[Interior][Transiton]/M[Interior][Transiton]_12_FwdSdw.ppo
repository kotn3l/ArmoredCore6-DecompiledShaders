#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1117;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    vec4 _299 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _337 = cbMtdParam._m0[27u].w + _278;
    float _338 = cbMtdParam._m0[28u].x + _279;
    float _339 = cbMtdParam._m0[28u].y + _280;
    float _353 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_207 * _199, _207 * _200, _207 * _201));
    float _354 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_221 * TANGENT.x, _221 * TANGENT.y, _221 * TANGENT.z));
    float _355 = (-0.0) - dot(vec3(_337, _338, _339), vec3((-0.0) - (_214 * NORMAL.x), (-0.0) - (_214 * NORMAL.y), (-0.0) - (_214 * NORMAL.z)));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _362 = _359 * _355;
    float _363 = (_359 * _353) + (((_299.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _364 = (_359 * _354) + (((_299.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _365 = _363 * cbMtdParam._m0[24u].x;
    float _366 = _364 * cbMtdParam._m0[23u].w;
    float _367 = fract(TEXCOORD.x);
    float _368 = fract(TEXCOORD.y);
    float _374;
    if (_365 > 0.0)
    {
        _374 = (1.0 - _367) / _365;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_365 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _367) / _365;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _374 = frontier_phi_3_2_ladder;
    }
    float _382;
    if (_366 > 0.0)
    {
        _382 = (1.0 - _368) / _366;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_366 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _368) / _366;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _382 = frontier_phi_7_6_ladder;
    }
    bool _384 = _362 > 0.0;
    float _386 = _384 ? (cbMtdParam._m0[17u].x / _362) : 5000.0;
    float _387 = isnan(_382) ? _374 : (isnan(_374) ? _382 : min(_374, _382));
    float _388 = isnan(_386) ? _387 : (isnan(_387) ? _386 : min(_387, _386));
    float _392 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _393 = _367 + (-0.5);
    float _396 = _368 + (-0.5);
    float _399 = ((_388 * _362) + _392) / _392;
    vec4 _424 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_393 + (_388 * _365)) / _399) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_396 + (_388 * _366)) / _399) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _434 = cbMtdParam._m0[9u].x * _424.x;
    float _435 = cbMtdParam._m0[9u].y * _424.y;
    float _436 = cbMtdParam._m0[9u].z * _424.z;
    float _454 = _363 * cbMtdParam._m0[26u].z;
    float _455 = _364 * cbMtdParam._m0[26u].y;
    bool _456 = _454 > 0.0;
    float _461;
    if (_456)
    {
        _461 = (1.0 - _367) / _454;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _367) / _454;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _461 = frontier_phi_11_10_ladder;
    }
    bool _463 = _455 > 0.0;
    float _468;
    if (_463)
    {
        _468 = (1.0 - _368) / _455;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_455 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _368) / _455;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _468 = frontier_phi_15_14_ladder;
    }
    float _471 = _384 ? (cbMtdParam._m0[19u].z / _362) : 5000.0;
    float _472 = isnan(_468) ? _461 : (isnan(_461) ? _468 : min(_461, _468));
    float _473 = isnan(_471) ? _472 : (isnan(_472) ? _471 : min(_472, _471));
    float _477 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _481 = ((_473 * _362) + _477) / _477;
    float _486 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _488 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _504 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_393 + (_473 * _454)) / _481) + 0.5) + _486) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_396 + (_473 * _455)) / _481) + 0.5) + _488) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _516;
    if (_456)
    {
        _516 = (1.0 - _367) / _454;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _367) / _454;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _516 = frontier_phi_19_18_ladder;
    }
    float _522;
    if (_463)
    {
        _522 = (1.0 - _368) / _455;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_455 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _368) / _455;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _522 = frontier_phi_23_22_ladder;
    }
    float _524 = isnan(_522) ? _516 : (isnan(_516) ? _522 : min(_516, _522));
    float _525 = isnan(_471) ? _524 : (isnan(_524) ? _471 : min(_524, _471));
    float _532 = ((_525 * _362) + _477) / _477;
    vec4 _552 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_393 + (_525 * _454)) / _532) + 0.5) + _486) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_396 + (_525 * _455)) / _532) + 0.5) + _488) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _554 = _552.x;
    float _561 = (_554 * ((_504.x * cbMtdParam._m0[10u].x) - _434)) + _434;
    float _562 = (_554 * ((_504.y * cbMtdParam._m0[10u].y) - _435)) + _435;
    float _563 = (_554 * ((_504.z * cbMtdParam._m0[10u].z) - _436)) + _436;
    vec4 _587 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _592 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _598 = ((_587.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _600 = (-0.0) - (cbMtdParam._m0[21u].x * ((_587.x * 0.5) + (-0.25)));
    float _601 = fract(_592);
    float _603 = fract(_592 + 0.5);
    vec4 _630 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_601 * _600) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_598 * _601) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _632 = _630.x;
    float _638 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_603 * _600) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_598 * _603) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _632) * abs((_601 * 2.0) + (-1.0))) + _632;
    float _644 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _648 = fract(abs(_644));
    float _657 = sin(cbMtdParam._m0[21u].z);
    float _658 = cos(cbMtdParam._m0[21u].z);
    float _659 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _660 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _690 = abs(cbMtdParam._m0[20u].w * (((_638 - (((_644 >= ((-0.0) - _644)) ? _648 : ((-0.0) - _648)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_660, (-0.0) - _657, _658 * _659) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_660, _658, _659 * _657) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _694 = (((_690 * cbMtdParam._m0[18u].y) - _638) * _690) + _638;
    float _3365 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    vec4 _707 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _722 = (cbMtdParam._m0[14u].x * _707.x) * cbMtdParam._m0[19u].x;
    float _723 = (cbMtdParam._m0[14u].y * _707.y) * cbMtdParam._m0[19u].x;
    float _724 = (cbMtdParam._m0[14u].z * _707.z) * cbMtdParam._m0[19u].x;
    float _734 = exp2(log2(_695) * cbMtdParam._m0[20u].x);
    float _3376 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3387 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3398 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _763 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _768 = _278 * _767;
    float _769 = _279 * _767;
    float _770 = _280 * _767;
    float _776 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _777 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _790 = uint(roundEven(NORMAL.w)) * 13u;
    uint _792 = _790 + 9u;
    uint _793 = _792 + uint(cbMatDynParam._m0[0u].w);
    float _799 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0)))) * cbInstanceData._m0[_793].x;
    float _800 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0)))) * cbInstanceData._m0[_793].y;
    float _801 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) * cbInstanceData._m0[_793].z;
    float _3409 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _3420 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _3431 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    vec4 _813 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _776, cbSceneParam._m0[86u].y * _777));
    float _816 = _813.x * TEXCOORD_4;
    float _817 = (-0.0) - _768;
    float _818 = (-0.0) - _769;
    float _819 = (-0.0) - _770;
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1116;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _904 = (cbModelParam._m0[37u].x * ((((fma(_849, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _906 = (cbModelParam._m0[37u].y * ((((fma(_849, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _907 = (((((fma(_849, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_904, _906, _907), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_904, _906, _907), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_904, _906, _907), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_904, _906, _907), 0.0);
        float _944 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_910.x + (-0.5));
        float _946 = _944 * (_910.y + (-0.5));
        float _947 = _944 * (_910.z + (-0.5));
        float _954 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_917.x + (-0.5));
        float _956 = _954 * (_917.y + (-0.5));
        float _957 = _954 * (_917.z + (-0.5));
        float _964 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_924.x + (-0.5));
        float _966 = _964 * (_924.y + (-0.5));
        float _967 = _964 * (_924.z + (-0.5));
        float _974 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_931.x + (-0.5));
        float _976 = _974 * (_931.y + (-0.5));
        float _977 = _974 * (_931.z + (-0.5));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = _945 * 0.5;
        float _982 = _955 * 0.5;
        float _983 = _965 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _998 = (dot(vec3(0.0), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3457 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1008 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3468 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3479 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * (_1010 + 1.0))) + _1015) * _978;
        float _1025 = _946 * 0.5;
        float _1026 = _956 * 0.5;
        float _1027 = _966 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(0.0), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3512 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_1052 + 1.0))) + _1057) * _979;
        float _1067 = _947 * 0.5;
        float _1068 = _957 * 0.5;
        float _1069 = _967 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(0.0), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3545 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1094 + 1.0))) + _1099) * _980;
        _1116 = _947;
        _1118 = _946;
        _1119 = _945;
        _1120 = _957;
        _1121 = _956;
        _1122 = _955;
        _1123 = _967;
        _1124 = _966;
        _1125 = _965;
        _1126 = _980;
        _1127 = _979;
        _1128 = _978;
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _1117;
        _1118 = _1117;
        _1119 = _1117;
        _1120 = _1117;
        _1121 = _1117;
        _1122 = _1117;
        _1123 = _1117;
        _1124 = _1117;
        _1125 = _1117;
        _1126 = _1117;
        _1127 = _1117;
        _1128 = _1117;
        _1129 = 0.0;
        _1130 = 0.0;
        _1131 = 0.0;
    }
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1184 = (cbModelParam._m0[38u].x * ((((fma(_849, cbModelParam._m0[30u].z, fma(_845, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _841)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1185 = (cbModelParam._m0[38u].y * ((((fma(_849, cbModelParam._m0[31u].z, fma(_845, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _841)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1186 = (((((fma(_849, cbModelParam._m0[32u].z, fma(_845, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _841)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1221 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1188.x + (-0.5));
        float _1223 = _1221 * (_1188.y + (-0.5));
        float _1224 = _1221 * (_1188.z + (-0.5));
        float _1231 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1195.x + (-0.5));
        float _1233 = _1231 * (_1195.y + (-0.5));
        float _1234 = _1231 * (_1195.z + (-0.5));
        float _1241 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1202.x + (-0.5));
        float _1243 = _1241 * (_1202.y + (-0.5));
        float _1244 = _1241 * (_1202.z + (-0.5));
        float _1251 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1209.x + (-0.5));
        float _1253 = _1251 * (_1209.y + (-0.5));
        float _1254 = _1251 * (_1209.z + (-0.5));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = _1222 * 0.5;
        float _1259 = _1232 * 0.5;
        float _1260 = _1242 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(0.0), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3608 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_1285 + 1.0))) + _1290) * _1255;
        float _1300 = _1223 * 0.5;
        float _1301 = _1233 * 0.5;
        float _1302 = _1243 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(0.0), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3641 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1327 + 1.0))) + _1332) * _1256;
        float _1342 = _1224 * 0.5;
        float _1343 = _1234 * 0.5;
        float _1344 = _1244 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(0.0), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3674 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1369 + 1.0))) + _1374) * _1257;
        _1391 = _1224;
        _1392 = _1223;
        _1393 = _1222;
        _1394 = _1234;
        _1395 = _1233;
        _1396 = _1232;
        _1397 = _1244;
        _1398 = _1243;
        _1399 = _1242;
        _1400 = _1257;
        _1401 = _1256;
        _1402 = _1255;
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    }
    else
    {
        _1391 = _1117;
        _1392 = _1117;
        _1393 = _1117;
        _1394 = _1117;
        _1395 = _1117;
        _1396 = _1117;
        _1397 = _1117;
        _1398 = _1117;
        _1399 = _1117;
        _1400 = _1117;
        _1401 = _1117;
        _1402 = _1117;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1129)) + _1129;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1130)) + _1130;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1131)) + _1131;
    float _1438 = fma(_1417, cbSceneParam._m0[89u].z, fma(_1416, cbSceneParam._m0[89u].y, _1415 * cbSceneParam._m0[89u].x));
    float _1441 = fma(_1417, cbSceneParam._m0[90u].z, fma(_1416, cbSceneParam._m0[90u].y, _1415 * cbSceneParam._m0[90u].x));
    float _1444 = fma(_1417, cbSceneParam._m0[91u].z, fma(_1416, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1415));
    float _1459 = _768 * (-0.5);
    float _1460 = _769 * (-0.5);
    float _1461 = _770 * (-0.5);
    float _1462 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1465 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1468 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1502;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1475 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1116, _1120, _1123, _1126));
        float _1479 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1483 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1490 = dot(vec4(cbModelParam._m0[39u]), vec4(_1459, _1460, _1461, 1.0));
        _1502 = dot(vec3(isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1502 = 1.0;
    }
    float _1513;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1504 = dot(vec4(cbModelParam._m0[40u]), vec4(_1459, _1460, _1461, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1504) ? 0.0 : (isnan(0.0) ? _1504 : max(0.0, _1504))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1517 = (_1513 * cbModelParam._m0[1u].x) + (_1502 * (1.0 - cbModelParam._m0[1u].x));
    float _1526 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1574 = fma(_849, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841)) + cbModelParam._m0[13u].w;
        float _1578 = fma(_849, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841)) + cbModelParam._m0[14u].w;
        float _1582 = fma(_849, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841)) + cbModelParam._m0[15u].w;
        float _1585 = fma(_819, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817));
        float _1588 = fma(_819, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817));
        float _1591 = fma(_819, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817));
        float _1617;
        if (_1585 > 0.0)
        {
            _1617 = abs((1.0 - _1574) / _1585);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1574 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1617 = frontier_phi_38_36_ladder;
        }
        float _1787;
        if (_1588 > 0.0)
        {
            _1787 = abs((1.0 - _1578) / _1588);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1578 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1787 = frontier_phi_47_43_ladder;
        }
        float _2181;
        if (_1591 > 0.0)
        {
            _2181 = abs((1.0 - _1582) / _1591);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1582 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _2181 = frontier_phi_59_54_ladder;
        }
        float _2183 = isnan(_1787) ? _1617 : (isnan(_1617) ? _1787 : min(_1617, _1787));
        float _2184 = isnan(_2181) ? _2183 : (isnan(_2183) ? _2181 : min(_2183, _2181));
        float _2188 = (_2184 * _1585) + _1574;
        float _2189 = (_2184 * _1588) + _1578;
        float _2190 = (_2184 * _1591) + _1582;
        float _2191 = _2184 * 9.9999997473787516355514526367188e-05;
        float _2193 = (-1.0) - _2191;
        float _2195 = _2191 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_2190 > _2195) || ((_2190 < _2193) || ((_2189 > _2195) || ((_2189 < _2193) || ((_2188 < _2193) || (_2188 > _2195))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2190, cbModelParam._m0[9u].z, fma(_2189, cbModelParam._m0[9u].y, _2188 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2190, cbModelParam._m0[10u].z, fma(_2189, cbModelParam._m0[10u].y, _2188 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2190, cbModelParam._m0[11u].z, fma(_2189, cbModelParam._m0[11u].y, _2188 * cbModelParam._m0[11u].x))), _1526);
            frontier_phi_37_59_ladder = _2451.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2451.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2451.x * cbModelParam._m0[1u].y;
        }
        _1607 = frontier_phi_37_59_ladder_2;
        _1609 = frontier_phi_37_59_ladder_1;
        _1611 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_817, _818, _819), _1526);
        _1607 = _1595.x * cbModelParam._m0[1u].y;
        _1609 = _1595.y * cbModelParam._m0[1u].y;
        _1611 = _1595.z * cbModelParam._m0[1u].y;
    }
    float _1614 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1702;
    float _1704;
    float _1706;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1666 = fma(_849, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841)) + cbModelParam._m0[21u].w;
        float _1670 = fma(_849, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841)) + cbModelParam._m0[22u].w;
        float _1674 = fma(_849, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841)) + cbModelParam._m0[23u].w;
        float _1677 = fma(_819, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817));
        float _1680 = fma(_819, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817));
        float _1683 = fma(_819, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817));
        float _1792;
        if (_1677 > 0.0)
        {
            _1792 = abs((1.0 - _1666) / _1677);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1666 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1792 = frontier_phi_49_45_ladder;
        }
        float _2208;
        if (_1680 > 0.0)
        {
            _2208 = abs((1.0 - _1670) / _1680);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1670 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2208 = frontier_phi_61_56_ladder;
        }
        float _2581;
        if (_1683 > 0.0)
        {
            _2581 = abs((1.0 - _1674) / _1683);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1674 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2581 = frontier_phi_73_68_ladder;
        }
        float _2583 = isnan(_2208) ? _1792 : (isnan(_1792) ? _2208 : min(_1792, _2208));
        float _2584 = isnan(_2581) ? _2583 : (isnan(_2583) ? _2581 : min(_2583, _2581));
        float _2588 = (_2584 * _1677) + _1666;
        float _2589 = (_2584 * _1680) + _1670;
        float _2590 = (_2584 * _1683) + _1674;
        float _2591 = _2584 * 9.9999997473787516355514526367188e-05;
        float _2592 = (-1.0) - _2591;
        float _2594 = _2591 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2590 > _2594) || ((_2590 < _2592) || ((_2589 > _2594) || ((_2589 < _2592) || ((_2588 < _2592) || (_2588 > _2594))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2590, cbModelParam._m0[17u].z, fma(_2589, cbModelParam._m0[17u].y, _2588 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2590, cbModelParam._m0[18u].z, fma(_2589, cbModelParam._m0[18u].y, _2588 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2590, cbModelParam._m0[19u].z, fma(_2589, cbModelParam._m0[19u].y, _2588 * cbModelParam._m0[19u].x))), _1614);
            frontier_phi_46_73_ladder = _2708.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2708.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2708.x * cbModelParam._m0[1u].z;
        }
        _1702 = frontier_phi_46_73_ladder_2;
        _1704 = frontier_phi_46_73_ladder_1;
        _1706 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_817, _818, _819), _1614);
        _1702 = _1686.x * cbModelParam._m0[1u].z;
        _1704 = _1686.y * cbModelParam._m0[1u].z;
        _1706 = _1686.z * cbModelParam._m0[1u].z;
    }
    float _1718 = _816 * 0.01200000010430812835693359375;
    float _1720 = _1718 * ((cbModelParam._m0[1u].w * (_1702 - _1607)) + _1607);
    float _1721 = _1718 * ((cbModelParam._m0[1u].w * (_1704 - _1609)) + _1609);
    float _1722 = _1718 * ((cbModelParam._m0[1u].w * (_1706 - _1611)) + _1611);
    float _1725 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, _1720 * cbSceneParam._m0[91u].x));
    float _1766 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1770 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1774 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1778 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1779 = _1766 / _1778;
    float _1780 = _1770 / _1778;
    float _1781 = _1774 / _1778;
    float _1929;
    float _1930;
    float _1931;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1808 = ((uint(_1781 > cbSceneParam._m0[59u].y) + uint(_1781 > cbSceneParam._m0[59u].x)) + uint(_1781 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1809 = _1808 + 43u;
        uint _1817 = _1808 + 44u;
        uint _1825 = _1808 + 45u;
        uint _1833 = _1808 + 46u;
        float _1844 = fma(_1778, cbSceneParam._m0[_1809].w, fma(_1774, cbSceneParam._m0[_1809].z, fma(_1770, cbSceneParam._m0[_1809].y, _1766 * cbSceneParam._m0[_1809].x)));
        float _1848 = fma(_1778, cbSceneParam._m0[_1817].w, fma(_1774, cbSceneParam._m0[_1817].z, fma(_1770, cbSceneParam._m0[_1817].y, _1766 * cbSceneParam._m0[_1817].x)));
        float _1856 = fma(_1778, cbSceneParam._m0[_1833].w, fma(_1774, cbSceneParam._m0[_1833].z, fma(_1770, cbSceneParam._m0[_1833].y, _1766 * cbSceneParam._m0[_1833].x)));
        float _1861 = cbSceneParam._m0[33u].z * _1856;
        float _1863 = cbSceneParam._m0[33u].w * _1856;
        float _1866 = fma(_1778, cbSceneParam._m0[_1825].w, fma(_1774, cbSceneParam._m0[_1825].z, fma(_1770, cbSceneParam._m0[_1825].y, _1766 * cbSceneParam._m0[_1825].x))) / _1856;
        float _1914 = (cbSceneParam._m0[33u].x - sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781))) * cbSceneParam._m0[33u].y;
        float _3800 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1922 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1861 + _1844) / _1856, (_1863 + _1848) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1863 + _1844) / _1856, (_1848 - _1861) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1844 - _1861) / _1856, (_1848 - _1863) / _1856), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1844 - _1863) / _1856, (_1861 + _1848) / _1856), _1866), 0.0)).x), vec4(0.25)));
        _1929 = 1.0 - (_1922 * cbSceneParam._m0[34u].x);
        _1930 = 1.0 - (_1922 * cbSceneParam._m0[34u].y);
        _1931 = 1.0 - (_1922 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1929 = 1.0;
        _1930 = 1.0;
        _1931 = 1.0;
    }
    float _1995;
    float _1997;
    float _1999;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1983 = fma(_1778, cbSceneParam._m0[63u].w, fma(_1774, cbSceneParam._m0[63u].z, fma(_1770, cbSceneParam._m0[63u].y, _1766 * cbSceneParam._m0[63u].x)));
        float _1984 = fma(_1778, cbSceneParam._m0[60u].w, fma(_1774, cbSceneParam._m0[60u].z, fma(_1770, cbSceneParam._m0[60u].y, _1766 * cbSceneParam._m0[60u].x))) / _1983;
        float _1985 = fma(_1778, cbSceneParam._m0[61u].w, fma(_1774, cbSceneParam._m0[61u].z, fma(_1770, cbSceneParam._m0[61u].y, _1766 * cbSceneParam._m0[61u].x))) / _1983;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_1984 >= cbSceneParam._m0[64u].x) && (_1985 >= cbSceneParam._m0[64u].y)) && (_1984 <= cbSceneParam._m0[64u].z)) && (_1985 <= cbSceneParam._m0[64u].w))
        {
            float _2221 = fma(_1778, cbSceneParam._m0[62u].w, fma(_1774, cbSceneParam._m0[62u].z, fma(_1770, cbSceneParam._m0[62u].y, _1766 * cbSceneParam._m0[62u].x))) / _1983;
            float _2225 = isnan(cbSceneParam._m0[41u].w) ? _2221 : (isnan(_2221) ? cbSceneParam._m0[41u].w : max(_2221, cbSceneParam._m0[41u].w));
            float _2268 = (cbSceneParam._m0[33u].x - sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781))) * cbSceneParam._m0[33u].y;
            float _3816 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
            float _2275 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1984, cbSceneParam._m0[33u].w + _1985), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1984, _1985 - cbSceneParam._m0[33u].z), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1984 - cbSceneParam._m0[33u].z, _1985 - cbSceneParam._m0[33u].w), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1984 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1985), _2225), 0.0)).x), vec4(0.25)));
            float _2279 = 1.0 - (_2275 * cbSceneParam._m0[34u].x);
            float _2280 = 1.0 - (_2275 * cbSceneParam._m0[34u].y);
            float _2281 = 1.0 - (_2275 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_2281) ? _1931 : (isnan(_1931) ? _2281 : min(_1931, _2281));
            frontier_phi_58_57_ladder_1 = isnan(_2280) ? _1930 : (isnan(_1930) ? _2280 : min(_1930, _2280));
            frontier_phi_58_57_ladder_2 = isnan(_2279) ? _1929 : (isnan(_1929) ? _2279 : min(_1929, _2279));
        }
        else
        {
            frontier_phi_58_57_ladder = _1931;
            frontier_phi_58_57_ladder_1 = _1930;
            frontier_phi_58_57_ladder_2 = _1929;
        }
        _1995 = frontier_phi_58_57_ladder_2;
        _1997 = frontier_phi_58_57_ladder_1;
        _1999 = frontier_phi_58_57_ladder;
    }
    else
    {
        _1995 = _1929;
        _1997 = _1930;
        _1999 = _1931;
    }
    uvec4 _2004 = floatBitsToUint(cbInstanceData._m0[_790 + 5u]);
    uint _2006 = _2004.x * 14u;
    uint _2007 = _2006 + 13u;
    float _2012 = _816 + (-1.0);
    float _2015 = (cbLight._m0[_2007].x * _2012) + 1.0;
    float _2016 = (cbLight._m0[_2007].y * _2012) + 1.0;
    uint _2017 = _2006 + 5u;
    float _2023 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2027 = _2006 + 4u;
    float _2036 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2040 = _2006 | 1u;
    float _2051 = dot(vec3(cbLight._m0[_2006].xyz), vec3(0.0));
    float _2054 = dot(vec3(cbLight._m0[_2040].xyz), vec3(0.0));
    float _3852 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _3863 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2059 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.3183098733425140380859375;
    float _2061 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.3183098733425140380859375;
    float _2068 = ((cbLight._m0[_2017].x * _2023) * _2061) + (((cbLight._m0[_2027].x * _1995) * _2036) * _2059);
    float _2069 = ((_2023 * cbLight._m0[_2017].y) * _2061) + (((cbLight._m0[_2027].y * _1997) * _2036) * _2059);
    float _2070 = ((_2023 * cbLight._m0[_2017].z) * _2061) + (((cbLight._m0[_2027].z * _1999) * _2036) * _2059);
    uint _2071 = _2006 + 8u;
    float _2077 = cbLight._m0[_2006].x + _768;
    float _2078 = cbLight._m0[_2006].y + _769;
    float _2079 = cbLight._m0[_2006].z + _770;
    float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
    float _2087 = dot(vec3(0.0), vec3(cbLight._m0[_2006].xyz));
    float _3874 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _2091 = dot(vec3(0.0), vec3(_768, _769, _770));
    float _3885 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _2095 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2077 * _2083, _2078 * _2083, _2079 * _2083));
    float _3896 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2106 = (exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2112 = (0.5 / ((_2090 + 9.9999999392252902907785028219223e-09) + _2094)) * _2090;
    float _3907 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.31831014156341552734375;
    uint _2128 = _2006 + 9u;
    float _2134 = cbLight._m0[_2040].x + _768;
    float _2135 = cbLight._m0[_2040].y + _769;
    float _2136 = cbLight._m0[_2040].z + _770;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2144 = dot(vec3(0.0), vec3(cbLight._m0[_2040].xyz));
    float _3918 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2134 * _2140, _2135 * _2140, _2136 * _2140));
    float _3929 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2157 = (exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2161 = (0.5 / ((_2147 + 9.9999999392252902907785028219223e-09) + _2094)) * _2147;
    float _3940 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2163 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.31831014156341552734375;
    float _2173 = (((_2157 * cbLight._m0[_2128].x) * _2163) * _2023) + ((((cbLight._m0[_2071].x * _1995) * _2106) * _2114) * _2036);
    float _2174 = (((_2157 * cbLight._m0[_2128].y) * _2163) * _2023) + ((((cbLight._m0[_2071].y * _1997) * _2106) * _2114) * _2036);
    float _2175 = (((_2157 * cbLight._m0[_2128].z) * _2163) * _2023) + ((((cbLight._m0[_2071].z * _1999) * _2106) * _2114) * _2036);
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    if (_2004.y == 0u)
    {
        uvec4 _2293 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2294 = _2293.x;
        uint _2305 = uint((float(_2293.y) * floor(float(uint(cbSceneParam._m0[85u].y * _777) / _2294))) + floor(float(uint(cbSceneParam._m0[85u].x * _776) / _2294)));
        float _2315 = (log2(_1781 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2316 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        uint _2319 = uint(isnan(14.0) ? _2316 : (isnan(_2316) ? 14.0 : min(_2316, 14.0)));
        uvec4 _2325 = texelFetch(g_lightClusterGridBuffer, int(((_2319 << 2u) + (_2305 << 6u)) >> 2u));
        uint _2326 = _2325.x;
        uint _2327 = _2293.z;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        if (((((1u << ((_2327 >> 4u) & 15u)) + 4294967295u) & _2326) == 0u) || ((_2327 & 240u) == 0u))
        {
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
        }
        else
        {
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            uint _2642 = 0u;
            uint _2651;
            bool _2652;
            for (;;)
            {
                _2651 = texelFetch(g_lightClassification, int((((_2319 << 5u) + (_2305 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                _2652 = _2651 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2652)
                {
                    frontier_phi_82_pred = _2636;
                    frontier_phi_82_pred_1 = _2641;
                    frontier_phi_82_pred_2 = _2640;
                    frontier_phi_82_pred_3 = _2639;
                    frontier_phi_82_pred_4 = _2638;
                    frontier_phi_82_pred_5 = _2637;
                }
                else
                {
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    uint _2787;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2638;
                    _2784 = _2639;
                    _2785 = _2640;
                    _2786 = _2641;
                    _2787 = _2651;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    for (;;)
                    {
                        uint _2791 = uint(findLSB(_2787)) + (_2642 << 5u);
                        uint _2788 = (_2787 + 4294967295u) & _2787;
                        uint _2793 = _2791 * 48u;
                        vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 3u)).x));
                        uint _2813 = (_2791 * 48u) + 4u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 3u)).x));
                        uint _2832 = (_2791 * 48u) + 8u;
                        vec3 _2843 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x));
                        float _2847 = _2807.x - _1779;
                        float _2848 = _2807.y - _1780;
                        float _2849 = _2807.z - _1781;
                        float _2850 = dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849));
                        float _2853 = inversesqrt(_2850);
                        float _2862 = 1.0 - (_2850 * _2807.w);
                        float _3961 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2863 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                        float _2864 = sqrt(_2850) * _2826.w;
                        float _2867 = 1.39999997615814208984375 / (_2864 + 1.39999997615814208984375);
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * dot(vec3(0.0), vec3(_2853 * _2847, _2853 * _2848, _2853 * _2849))) + _2868;
                        float _2874 = _2864 * _2864;
                        float _2878 = ((isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0))) * _2863) / ((_2874 * 0.699999988079071044921875) + 1.0);
                        float _2882 = (-0.0) - _1779;
                        float _2883 = (-0.0) - _1780;
                        float _2884 = (-0.0) - _1781;
                        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
                        float _2892 = dot(vec3(0.0), vec3(_2888 * _2882, _2888 * _2883, _2888 * _2884));
                        float _3977 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _3988 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2896 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                        float _2900 = (0.5 / (((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) + 9.9999999392252902907785028219223e-09) + _2896)) * _2896;
                        float _3999 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2909 = (((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 3.1415927410125732421875) / ((_2874 * 2.1991131305694580078125) + 3.141590118408203125)) * _2863;
                        _2716 = (_2878 * _2826.x) + _2784;
                        _2717 = (_2878 * _2826.y) + _2785;
                        _2718 = (_2878 * _2826.z) + _2786;
                        _2713 = (_2909 * _2843.x) + _2781;
                        _2714 = (_2909 * _2843.y) + _2782;
                        _2715 = (_2909 * _2843.z) + _2783;
                        if (_2788 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2788;
                        }
                    }
                    frontier_phi_82_pred = _2713;
                    frontier_phi_82_pred_1 = _2718;
                    frontier_phi_82_pred_2 = _2717;
                    frontier_phi_82_pred_3 = _2716;
                    frontier_phi_82_pred_4 = _2715;
                    frontier_phi_82_pred_5 = _2714;
                }
                _2461 = frontier_phi_82_pred;
                _2471 = frontier_phi_82_pred_1;
                _2469 = frontier_phi_82_pred_2;
                _2467 = frontier_phi_82_pred_3;
                _2465 = frontier_phi_82_pred_4;
                _2463 = frontier_phi_82_pred_5;
                uint _2643 = _2642 + 1u;
                if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2636 = _2461;
                    _2637 = _2463;
                    _2638 = _2465;
                    _2639 = _2467;
                    _2640 = _2469;
                    _2641 = _2471;
                    _2642 = _2643;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
        }
        uvec4 _2474 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2475 = _2474.z;
        uint _2477 = (_2475 >> 8u) & 15u;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        if (((4294967295u << _2477) & _2326) == 0u)
        {
            _2607 = _2460;
            _2609 = _2462;
            _2611 = _2464;
            _2613 = _2466;
            _2615 = _2468;
            _2617 = _2470;
        }
        else
        {
            float _2632 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            float frontier_phi_75_76_ladder_3;
            float frontier_phi_75_76_ladder_4;
            float frontier_phi_75_76_ladder_5;
            if (_2477 < ((_2475 >> 12u) & 15u))
            {
                float _2608;
                float _2610;
                float _2612;
                float _2614;
                float _2616;
                float _2618;
                float _2764 = _2460;
                float _2765 = _2462;
                float _2766 = _2464;
                float _2767 = _2466;
                float _2768 = _2468;
                float _2769 = _2470;
                uint _2770 = _2477;
                uint _2779;
                bool _2780;
                for (;;)
                {
                    _2779 = texelFetch(g_lightClassification, int((((_2319 << 5u) + (_2305 << 9u)) + (_2770 << 2u)) >> 2u)).x;
                    _2780 = _2779 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2780)
                    {
                        frontier_phi_88_pred = _2767;
                        frontier_phi_88_pred_1 = _2768;
                        frontier_phi_88_pred_2 = _2769;
                        frontier_phi_88_pred_3 = _2766;
                        frontier_phi_88_pred_4 = _2765;
                        frontier_phi_88_pred_5 = _2764;
                    }
                    else
                    {
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _2927 = _2764;
                        float _2928 = _2765;
                        float _2929 = _2766;
                        float _2930 = _2767;
                        float _2931 = _2768;
                        float _2932 = _2769;
                        uint _2933 = _2779;
                        uint _2934;
                        vec4 _2959;
                        float _2960;
                        vec4 _2975;
                        vec3 _2987;
                        vec4 _3003;
                        vec4 _3018;
                        float _3064;
                        bool _3065;
                        for (;;)
                        {
                            uint _2944 = ((_2770 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2933));
                            _2934 = (_2933 + 4294967295u) & _2933;
                            uint _2946 = _2944 * 40u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            _2960 = _2959.w;
                            uint _2962 = (_2944 * 40u) + 4u;
                            _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2977 = (_2944 * 40u) + 8u;
                            _2987 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x));
                            uint _2990 = (_2944 * 40u) + 16u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3005 = (_2944 * 40u) + 20u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3020 = (_2944 * 40u) + 24u;
                            vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3039 = (_2944 * 40u) + 28u;
                            vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            _3064 = fma(_1781, _3052.z, fma(_1780, _3052.y, _3052.x * _1779)) + _3052.w;
                            _3065 = !((fma(_1781, _3033.z, fma(_1780, _3033.y, _3033.x * _1779)) + _3033.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3065)
                            {
                                float _3092 = _2959.x - _1779;
                                float _3093 = _2959.y - _1780;
                                float _3094 = _2959.z - _1781;
                                float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                                float _3098 = inversesqrt(_3095);
                                float _3099 = _3098 * _3092;
                                float _3100 = _3098 * _3093;
                                float _3101 = _3098 * _3094;
                                float _3105 = 1.0 - (_3095 / (_2960 * _2960));
                                float _4010 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                                float _3110 = sqrt(_3095) * _2975.w;
                                float _3112 = 1.39999997615814208984375 / (_3110 + 1.39999997615814208984375);
                                float _3113 = _3112 * _3112;
                                float _3114 = 1.0 - _3113;
                                float _3116 = (_3114 * dot(vec3(_3099, _3100, _3101), vec3(0.0))) + _3113;
                                float _3119 = _3110 * _3110;
                                float _3123 = (fma(_1781, _3003.z, fma(_1780, _3003.y, _3003.x * _1779)) + _3003.w) / _3064;
                                float _3124 = (fma(_1781, _3018.z, fma(_1780, _3018.y, _3018.x * _1779)) + _3018.w) / _3064;
                                float _3128 = 1.0 - dot(vec2(_3123, _3124), vec2(_3123, _3124));
                                float _4026 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3129 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                                float _3130 = _3129 * (((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3106) / ((_3119 * 0.699999988079071044921875) + 1.0));
                                float _3140 = dot(vec3(0.0), vec3((-0.0) - (_1779 * _2632), (-0.0) - (_1780 * _2632), (-0.0) - (_1781 * _2632)));
                                float _4037 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3148 = (_3114 * dot(vec3(0.0), vec3(_3099, _3100, _3101))) + _3113;
                                float _4048 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3149 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _3153 = (0.5 / (((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) + 9.9999999392252902907785028219223e-09) + _3149)) * _3149;
                                float _4059 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3160 = (_3129 * _3106) * (((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 3.1415927410125732421875) / ((_3119 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_94_pred = _3160 * _2987.x;
                                frontier_phi_94_pred_1 = _3160 * _2987.y;
                                frontier_phi_94_pred_2 = _3130 * _2975.z;
                                frontier_phi_94_pred_3 = _3130 * _2975.y;
                                frontier_phi_94_pred_4 = _3130 * _2975.x;
                                frontier_phi_94_pred_5 = _3160 * _2987.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3164 = frontier_phi_94_pred;
                            _3165 = frontier_phi_94_pred_1;
                            _3169 = frontier_phi_94_pred_2;
                            _3168 = frontier_phi_94_pred_3;
                            _3167 = frontier_phi_94_pred_4;
                            _3166 = frontier_phi_94_pred_5;
                            _2917 = _3167 + _2930;
                            _2918 = _3168 + _2931;
                            _2919 = _3169 + _2932;
                            _2914 = _3164 + _2927;
                            _2915 = _3165 + _2928;
                            _2916 = _3166 + _2929;
                            if (_2934 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2934;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _2917;
                        frontier_phi_88_pred_1 = _2918;
                        frontier_phi_88_pred_2 = _2919;
                        frontier_phi_88_pred_3 = _2916;
                        frontier_phi_88_pred_4 = _2915;
                        frontier_phi_88_pred_5 = _2914;
                    }
                    _2614 = frontier_phi_88_pred;
                    _2616 = frontier_phi_88_pred_1;
                    _2618 = frontier_phi_88_pred_2;
                    _2612 = frontier_phi_88_pred_3;
                    _2610 = frontier_phi_88_pred_4;
                    _2608 = frontier_phi_88_pred_5;
                    uint _2771 = _2770 + 1u;
                    if (_2771 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2764 = _2608;
                        _2765 = _2610;
                        _2766 = _2612;
                        _2767 = _2614;
                        _2768 = _2616;
                        _2769 = _2618;
                        _2770 = _2771;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2616;
                frontier_phi_75_76_ladder_1 = _2618;
                frontier_phi_75_76_ladder_2 = _2614;
                frontier_phi_75_76_ladder_3 = _2612;
                frontier_phi_75_76_ladder_4 = _2610;
                frontier_phi_75_76_ladder_5 = _2608;
            }
            else
            {
                frontier_phi_75_76_ladder = _2468;
                frontier_phi_75_76_ladder_1 = _2470;
                frontier_phi_75_76_ladder_2 = _2466;
                frontier_phi_75_76_ladder_3 = _2464;
                frontier_phi_75_76_ladder_4 = _2462;
                frontier_phi_75_76_ladder_5 = _2460;
            }
            _2607 = frontier_phi_75_76_ladder_5;
            _2609 = frontier_phi_75_76_ladder_4;
            _2611 = frontier_phi_75_76_ladder_3;
            _2613 = frontier_phi_75_76_ladder_2;
            _2615 = frontier_phi_75_76_ladder;
            _2617 = frontier_phi_75_76_ladder_1;
        }
        float _2622 = isnan(1.0) ? _816 : (isnan(_816) ? 1.0 : min(_816, 1.0));
        _2339 = (_2622 * _2613) + _2068;
        _2341 = (_2622 * _2615) + _2069;
        _2343 = (_2622 * _2617) + _2070;
        _2345 = ((_2607 * 0.039999999105930328369140625) * _2622) + _2173;
        _2347 = ((_2609 * 0.039999999105930328369140625) * _2622) + _2174;
        _2349 = ((_2611 * 0.039999999105930328369140625) * _2622) + _2175;
    }
    else
    {
        _2339 = _2068;
        _2341 = _2069;
        _2343 = _2070;
        _2345 = _2173;
        _2347 = _2174;
        _2349 = _2175;
    }
    uint _2355 = _792 + uint(cbMatDynParam._m0[0u].w);
    float _2361 = ((_734 * (_722 - (_722 * _695))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2355].x;
    float _2362 = ((_734 * (_723 - (_723 * _695))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2355].y;
    float _2363 = ((_734 * (_724 - (_724 * _695))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2355].z;
    float _4075 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4086 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4097 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _2380 = (((isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2339 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _816))) + ((_2345 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1517)) * cbPerFrame._m0[3u].x)) + _2361;
    float _2382 = (_2362 + ((_2347 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1517)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2341 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _816)));
    float _2384 = (_2363 + ((_2349 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1517)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2343 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _816)));
    float _4123 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2397 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    uint _2398 = _790 + 6u;
    float _2406 = _776 / cbSceneParam._m0[86u].x;
    float _2407 = _777 / cbSceneParam._m0[86u].y;
    vec4 _2421 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, (log2((isnan(cbSceneParam._m0[77u].w) ? _763 : (isnan(_763) ? cbSceneParam._m0[77u].w : min(_763, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2423 = _2421.x;
    float _2424 = _2421.y;
    float _2425 = _2421.z;
    float _2426 = _2421.w;
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    if (_763 > cbSceneParam._m0[78u].w)
    {
        float _2485 = isnan(_763) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _763 : min(cbSceneParam._m0[80u].w, _763));
        float _2486 = _2485 / _763;
        float _2497 = _2486 * _278;
        float _2498 = _279 * _2486;
        float _2499 = (-0.0) - _2498;
        float _2500 = _2486 * _280;
        float _2502 = (cbSceneParam._m0[77u].w * _2499) / _2485;
        float _2503 = _2502 + cbSceneParam._m0[79u].w;
        float _2504 = cbSceneParam._m0[79u].w - _2498;
        float _2510 = sqrt(((_2497 * _2497) + (_2498 * _2498)) + (_2500 * _2500));
        float _2513 = (1.0 - (cbSceneParam._m0[77u].w / _2485)) * _2510;
        float _2518 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2520 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2726;
        if (abs((_2499 - _2502) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2726 = ((((_2503 > 0.0) ? exp2(_2518 * _2503) : (2.0 - exp2(_2520 * _2503))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2513;
        }
        else
        {
            float _2665 = 1.0 / cbSceneParam._m0[80u].x;
            float _2666 = isnan(_2504) ? _2503 : (isnan(_2503) ? _2504 : max(_2503, _2504));
            float _2667 = isnan(_2504) ? _2503 : (isnan(_2503) ? _2504 : min(_2503, _2504));
            float _2676 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : min(_2666, 0.0));
            float _2677 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : min(_2667, 0.0));
            _2726 = ((abs(_2510 / _2499) * cbSceneParam._m0[80u].y) * ((((_2676 - _2677) * 2.0) - ((exp2(_2518 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0)))) - exp2(_2518 * (isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0))))) * _2665)) - ((exp2(_2520 * _2676) - exp2(_2520 * _2677)) * _2665))) + (_2513 * cbSceneParam._m0[80u].z);
        }
        vec4 _2728 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, 1.0), 0.0);
        float _2737 = exp2((_2726 * (-1.44269502162933349609375)) * (1.0 - _2728.w));
        float _2738 = log2(_2737);
        float _2754 = log2(_2426);
        _2522 = (exp2(_2754 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].x)) * _2728.x) / cbSceneParam._m0[78u].x)) + _2423;
        _2524 = (exp2(_2754 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].y)) * _2728.y) / cbSceneParam._m0[78u].y)) + _2424;
        _2526 = (exp2(_2754 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].z)) * _2728.z) / cbSceneParam._m0[78u].z)) + _2425;
        _2528 = _2737 * _2426;
    }
    else
    {
        _2522 = _2423;
        _2524 = _2424;
        _2526 = _2425;
        _2528 = _2426;
    }
    float _2539 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2540 = _2539 == 3.0;
    float _2542 = log2(_2528);
    float _2546 = exp2(_2542 * cbSceneParam._m0[78u].x);
    float _2547 = exp2(_2542 * cbSceneParam._m0[78u].y);
    float _2548 = exp2(_2542 * cbSceneParam._m0[78u].z);
    float _2549 = _2546 * (isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0)));
    float _2550 = _2547 * (isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0)));
    float _2551 = _2548 * (isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0)));
    float _2560 = (_2539 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2560 * (_2540 ? _2549 : (_2549 + (cbSceneParam._m0[72u].w * _2522)));
    SV_Target.y = _2560 * (_2540 ? _2550 : (_2550 + (cbSceneParam._m0[72u].w * _2524)));
    SV_Target.z = _2560 * (_2540 ? _2551 : (_2551 + (cbSceneParam._m0[72u].w * _2526)));
    SV_Target.w = cbInstanceData._m0[_2398].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2361) * _2397) * _2546) * _2560;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2362) * _2397) * _2547) * _2560;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2363) * _2397) * _2548) * _2560;
    SV_Target_1.w = cbInstanceData._m0[_2398].w;
}


