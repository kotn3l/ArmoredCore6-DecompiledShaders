#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _388;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _200 = _199 * _191;
    float _201 = _199 * _192;
    float _202 = _199 * _193;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _297 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _313 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _320 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _332 = cbMtdParam._m0[28u].z + _267;
    float _333 = cbMtdParam._m0[28u].w + _268;
    float _334 = cbMtdParam._m0[29u].x + _269;
    float _351 = (-0.0) - dot(vec3(_332, _333, _334), vec3(_313 * _200, _313 * _201, _313 * _202));
    float _352 = (-0.0) - dot(vec3(_332, _333, _334), vec3(_320 * _211, _320 * _212, _320 * _213));
    float _353 = (-0.0) - dot(vec3(_332, _333, _334), vec3((-0.0) - (NORMAL.x * _206), (-0.0) - (NORMAL.y * _206), (-0.0) - (NORMAL.z * _206)));
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _357 * _353;
    float _363 = ((cbMtdParam._m0[25u].y * _351) * _357) + (((_297.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _364 = ((cbMtdParam._m0[25u].z * _352) * _357) + (((_297.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _367 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _368 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _386;
    float _389;
    float _391;
    if (_363 > 0.0)
    {
        float _372 = (1.0 - _367) / _363;
        _386 = _372;
        _389 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_372 * _358)) * 0.16666667163372039794921875;
        _391 = (fract((_372 * _364) + _368) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_363 < 0.0)
        {
            float _387 = ((-0.0) - _367) / _363;
            frontier_phi_3_2_ladder = (fract((_387 * _364) + _368) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _387;
            frontier_phi_3_2_ladder_2 = (fract(_387 * _358) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _388;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _386 = frontier_phi_3_2_ladder_1;
        _389 = frontier_phi_3_2_ladder_2;
        _391 = frontier_phi_3_2_ladder;
    }
    float _417;
    float _419;
    float _421;
    if (_364 > 0.0)
    {
        float _404 = (1.0 - _368) / _364;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_404 < _386)
        {
            frontier_phi_8_5_ladder = (fract((_404 * _363) + _367) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _404;
            frontier_phi_8_5_ladder_2 = (fract(_404 * _358) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _389;
            frontier_phi_8_5_ladder_1 = _386;
            frontier_phi_8_5_ladder_2 = _391;
        }
        _417 = frontier_phi_8_5_ladder_1;
        _419 = frontier_phi_8_5_ladder;
        _421 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_364 < 0.0)
        {
            float _418 = ((-0.0) - _368) / _364;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_418 < _386)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_418 * _363) + _367) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _418;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_418 * _358) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _389;
                frontier_phi_8_6_ladder_9_ladder_1 = _386;
                frontier_phi_8_6_ladder_9_ladder_2 = _391;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _389;
            frontier_phi_8_6_ladder_1 = _386;
            frontier_phi_8_6_ladder_2 = _391;
        }
        _417 = frontier_phi_8_6_ladder_1;
        _419 = frontier_phi_8_6_ladder;
        _421 = frontier_phi_8_6_ladder_2;
    }
    float _425 = (_358 > 0.0) ? (cbMtdParam._m0[20u].z / _358) : 5000.0;
    float _438;
    float _439;
    if (_425 < _417)
    {
        _438 = ((_367 + cbMtdParam._m0[22u].x) + (_425 * _363)) * 0.16666667163372039794921875;
        _439 = (((_425 * _364) + _368) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _438 = _419;
        _439 = _421;
    }
    vec4 _441 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_438, _439));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    vec4 _472 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _477 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _483 = ((_472.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _485 = (-0.0) - (cbMtdParam._m0[21u].x * ((_472.x * 0.5) + (-0.25)));
    float _486 = fract(_477);
    float _488 = fract(_477 + 0.5);
    vec4 _515 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_486 * _485) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_483 * _486) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _517 = _515.x;
    float _523 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_488 * _485) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_483 * _488) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _517) * abs((_486 * 2.0) + (-1.0))) + _517;
    float _537 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _541 = fract(abs(_537));
    float _547 = sin(cbMtdParam._m0[21u].z);
    float _548 = cos(cbMtdParam._m0[21u].z);
    float _549 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _550 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _580 = abs(cbMtdParam._m0[20u].w * (((_523 - (((_537 >= ((-0.0) - _537)) ? _541 : ((-0.0) - _541)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_550, (-0.0) - _547, _548 * _549) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_550, _548, _549 * _547) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _584 = (((_580 * cbMtdParam._m0[18u].y) - _523) * _580) + _523;
    float _2939 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _585 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
    vec4 _597 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _612 = (cbMtdParam._m0[14u].x * _597.x) * cbMtdParam._m0[19u].x;
    float _613 = (cbMtdParam._m0[14u].y * _597.y) * cbMtdParam._m0[19u].x;
    float _614 = (cbMtdParam._m0[14u].z * _597.z) * cbMtdParam._m0[19u].x;
    float _624 = exp2(log2(_585) * cbMtdParam._m0[20u].x);
    float _2950 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _2961 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _2972 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _657 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _658 = _267 * _657;
    float _659 = _268 * _657;
    float _660 = _269 * _657;
    float _666 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _667 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _680 = uint(roundEven(NORMAL.w)) * 13u;
    uint _682 = _680 + 9u;
    uint _683 = _682 + uint(cbMatDynParam._m0[0u].w);
    float _689 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0)))) * cbInstanceData._m0[_683].x;
    float _690 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0)))) * cbInstanceData._m0[_683].y;
    float _691 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0)))) * cbInstanceData._m0[_683].z;
    float _2983 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0));
    float _2994 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0));
    float _3005 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0));
    vec4 _703 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _666, cbSceneParam._m0[86u].y * _667));
    float _706 = _703.x * TEXCOORD_4;
    float _707 = (-0.0) - _658;
    float _708 = (-0.0) - _659;
    float _709 = (-0.0) - _660;
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _801 = (cbModelParam._m0[37u].x * ((((fma(_739, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _803 = (cbModelParam._m0[37u].y * ((((fma(_739, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _804 = (((((fma(_739, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_801, _803, _804), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_801, _803, _804), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_801, _803, _804), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_801, _803, _804), 0.0);
        float _841 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_807.x + (-0.5));
        float _843 = _841 * (_807.y + (-0.5));
        float _844 = _841 * (_807.z + (-0.5));
        float _851 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_814.x + (-0.5));
        float _853 = _851 * (_814.y + (-0.5));
        float _854 = _851 * (_814.z + (-0.5));
        float _861 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_821.x + (-0.5));
        float _863 = _861 * (_821.y + (-0.5));
        float _864 = _861 * (_821.z + (-0.5));
        float _871 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_828.x + (-0.5));
        float _873 = _871 * (_828.y + (-0.5));
        float _874 = _871 * (_828.z + (-0.5));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = _842 * 0.5;
        float _879 = _852 * 0.5;
        float _880 = _862 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _895 = (dot(vec3(0.0), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3031 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _905 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3042 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3053 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0))) * (_907 + 1.0))) + _912) * _875;
        float _922 = _843 * 0.5;
        float _923 = _853 * 0.5;
        float _924 = _863 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(0.0), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3064 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3075 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3086 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0))) * (_949 + 1.0))) + _954) * _876;
        float _964 = _844 * 0.5;
        float _965 = _854 * 0.5;
        float _966 = _864 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(0.0), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3097 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3108 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3119 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))) * (_991 + 1.0))) + _996) * _877;
        _1013 = _844;
        _1014 = _843;
        _1015 = _842;
        _1016 = _854;
        _1017 = _853;
        _1018 = _852;
        _1019 = _864;
        _1020 = _863;
        _1021 = _862;
        _1022 = _877;
        _1023 = _876;
        _1024 = _875;
        _1025 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
    }
    else
    {
        _1013 = _388;
        _1014 = _388;
        _1015 = _388;
        _1016 = _388;
        _1017 = _388;
        _1018 = _388;
        _1019 = _388;
        _1020 = _388;
        _1021 = _388;
        _1022 = _388;
        _1023 = _388;
        _1024 = _388;
        _1025 = 0.0;
        _1026 = 0.0;
        _1027 = 0.0;
    }
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1080 = (cbModelParam._m0[38u].x * ((((fma(_739, cbModelParam._m0[30u].z, fma(_735, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _731)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1081 = (cbModelParam._m0[38u].y * ((((fma(_739, cbModelParam._m0[31u].z, fma(_735, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _731)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1082 = (((((fma(_739, cbModelParam._m0[32u].z, fma(_735, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _731)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        float _1117 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1084.x + (-0.5));
        float _1119 = _1117 * (_1084.y + (-0.5));
        float _1120 = _1117 * (_1084.z + (-0.5));
        float _1127 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1091.x + (-0.5));
        float _1129 = _1127 * (_1091.y + (-0.5));
        float _1130 = _1127 * (_1091.z + (-0.5));
        float _1137 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1098.x + (-0.5));
        float _1139 = _1137 * (_1098.y + (-0.5));
        float _1140 = _1137 * (_1098.z + (-0.5));
        float _1147 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1105.x + (-0.5));
        float _1149 = _1147 * (_1105.y + (-0.5));
        float _1150 = _1147 * (_1105.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(0.0), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3160 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3171 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3182 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0))) * (_1181 + 1.0))) + _1186) * _1151;
        float _1196 = _1119 * 0.5;
        float _1197 = _1129 * 0.5;
        float _1198 = _1139 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(0.0), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3193 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3204 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3215 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0))) * (_1223 + 1.0))) + _1228) * _1152;
        float _1238 = _1120 * 0.5;
        float _1239 = _1130 * 0.5;
        float _1240 = _1140 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(0.0), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3226 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3237 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3248 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * (_1265 + 1.0))) + _1270) * _1153;
        _1287 = _1120;
        _1288 = _1119;
        _1289 = _1118;
        _1290 = _1130;
        _1291 = _1129;
        _1292 = _1128;
        _1293 = _1140;
        _1294 = _1139;
        _1295 = _1138;
        _1296 = _1153;
        _1297 = _1152;
        _1298 = _1151;
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
    }
    else
    {
        _1287 = _388;
        _1288 = _388;
        _1289 = _388;
        _1290 = _388;
        _1291 = _388;
        _1292 = _388;
        _1293 = _388;
        _1294 = _388;
        _1295 = _388;
        _1296 = _388;
        _1297 = _388;
        _1298 = _388;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _1025)) + _1025;
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _1026)) + _1026;
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _1027)) + _1027;
    float _1334 = fma(_1313, cbSceneParam._m0[89u].z, fma(_1312, cbSceneParam._m0[89u].y, _1311 * cbSceneParam._m0[89u].x));
    float _1337 = fma(_1313, cbSceneParam._m0[90u].z, fma(_1312, cbSceneParam._m0[90u].y, _1311 * cbSceneParam._m0[90u].x));
    float _1340 = fma(_1313, cbSceneParam._m0[91u].z, fma(_1312, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1311));
    float _1355 = _658 * (-0.5);
    float _1356 = _659 * (-0.5);
    float _1357 = _660 * (-0.5);
    float _1358 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1361 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1364 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1398;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1371 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1013, _1016, _1019, _1022));
        float _1375 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1014, _1017, _1020, _1023));
        float _1379 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1386 = dot(vec4(cbModelParam._m0[39u]), vec4(_1355, _1356, _1357, 1.0));
        _1398 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1386) ? 0.0 : (isnan(0.0) ? _1386 : max(0.0, _1386))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1398 = 1.0;
    }
    float _1409;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1400 = dot(vec4(cbModelParam._m0[40u]), vec4(_1355, _1356, _1357, 1.0));
        _1409 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1400) ? 0.0 : (isnan(0.0) ? _1400 : max(0.0, _1400))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1409 = 1.0;
    }
    float _1413 = (_1409 * cbModelParam._m0[1u].x) + (_1398 * (1.0 - cbModelParam._m0[1u].x));
    float _1422 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1504;
    float _1506;
    float _1508;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1471 = fma(_739, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731)) + cbModelParam._m0[13u].w;
        float _1475 = fma(_739, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731)) + cbModelParam._m0[14u].w;
        float _1479 = fma(_739, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731)) + cbModelParam._m0[15u].w;
        float _1482 = fma(_709, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707));
        float _1485 = fma(_709, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707));
        float _1488 = fma(_709, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707));
        float _1514;
        if (_1482 > 0.0)
        {
            _1514 = abs((1.0 - _1471) / _1482);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1471 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1514 = frontier_phi_26_24_ladder;
        }
        float _1809;
        if (_1485 > 0.0)
        {
            _1809 = abs((1.0 - _1475) / _1485);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1475 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1809 = frontier_phi_35_31_ladder;
        }
        float _2146;
        if (_1488 > 0.0)
        {
            _2146 = abs((1.0 - _1479) / _1488);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1479 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2146 = frontier_phi_49_42_ladder;
        }
        float _2148 = isnan(_1809) ? _1514 : (isnan(_1514) ? _1809 : min(_1514, _1809));
        float _2149 = isnan(_2146) ? _2148 : (isnan(_2148) ? _2146 : min(_2148, _2146));
        float _2153 = (_2149 * _1482) + _1471;
        float _2154 = (_2149 * _1485) + _1475;
        float _2155 = (_2149 * _1488) + _1479;
        float _2156 = _2149 * 9.9999997473787516355514526367188e-05;
        float _2157 = (-1.0) - _2156;
        float _2159 = _2156 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2155 > _2159) || ((_2155 < _2157) || ((_2154 > _2159) || ((_2154 < _2157) || ((_2153 < _2157) || (_2153 > _2159))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2278 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2155, cbModelParam._m0[9u].z, fma(_2154, cbModelParam._m0[9u].y, _2153 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2155, cbModelParam._m0[10u].z, fma(_2154, cbModelParam._m0[10u].y, _2153 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2155, cbModelParam._m0[11u].z, fma(_2154, cbModelParam._m0[11u].y, _2153 * cbModelParam._m0[11u].x))), _1422);
            frontier_phi_25_49_ladder = _2278.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2278.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2278.x * cbModelParam._m0[1u].y;
        }
        _1504 = frontier_phi_25_49_ladder_2;
        _1506 = frontier_phi_25_49_ladder_1;
        _1508 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1492 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_707, _708, _709), _1422);
        _1504 = _1492.x * cbModelParam._m0[1u].y;
        _1506 = _1492.y * cbModelParam._m0[1u].y;
        _1508 = _1492.z * cbModelParam._m0[1u].y;
    }
    float _1511 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1563 = fma(_739, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731)) + cbModelParam._m0[21u].w;
        float _1567 = fma(_739, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731)) + cbModelParam._m0[22u].w;
        float _1571 = fma(_739, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731)) + cbModelParam._m0[23u].w;
        float _1574 = fma(_709, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707));
        float _1577 = fma(_709, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707));
        float _1580 = fma(_709, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707));
        float _1814;
        if (_1574 > 0.0)
        {
            _1814 = abs((1.0 - _1563) / _1574);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1563 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1814 = frontier_phi_37_33_ladder;
        }
        float _2172;
        if (_1577 > 0.0)
        {
            _2172 = abs((1.0 - _1567) / _1577);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1567 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2172 = frontier_phi_51_44_ladder;
        }
        float _2338;
        if (_1580 > 0.0)
        {
            _2338 = abs((1.0 - _1571) / _1580);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1571 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2338 = frontier_phi_65_60_ladder;
        }
        float _2340 = isnan(_2172) ? _1814 : (isnan(_1814) ? _2172 : min(_1814, _2172));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1574) + _1563;
        float _2346 = (_2341 * _1577) + _1567;
        float _2347 = (_2341 * _1580) + _1571;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2349 = (-1.0) - _2348;
        float _2351 = _2348 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2347 > _2351) || ((_2347 < _2349) || ((_2346 > _2351) || ((_2346 < _2349) || ((_2345 < _2349) || (_2345 > _2351))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2347, cbModelParam._m0[17u].z, fma(_2346, cbModelParam._m0[17u].y, _2345 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2347, cbModelParam._m0[18u].z, fma(_2346, cbModelParam._m0[18u].y, _2345 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2347, cbModelParam._m0[19u].z, fma(_2346, cbModelParam._m0[19u].y, _2345 * cbModelParam._m0[19u].x))), _1511);
            frontier_phi_34_65_ladder = _2530.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2530.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2530.z * cbModelParam._m0[1u].z;
        }
        _1599 = frontier_phi_34_65_ladder_1;
        _1601 = frontier_phi_34_65_ladder;
        _1603 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_707, _708, _709), _1511);
        _1599 = _1583.x * cbModelParam._m0[1u].z;
        _1601 = _1583.y * cbModelParam._m0[1u].z;
        _1603 = _1583.z * cbModelParam._m0[1u].z;
    }
    float _1615 = _706 * 0.01200000010430812835693359375;
    float _1617 = _1615 * ((cbModelParam._m0[1u].w * (_1599 - _1504)) + _1504);
    float _1618 = _1615 * ((cbModelParam._m0[1u].w * (_1601 - _1506)) + _1506);
    float _1619 = _1615 * ((cbModelParam._m0[1u].w * (_1603 - _1508)) + _1508);
    float _1622 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, _1617 * cbSceneParam._m0[91u].x));
    uvec4 _1638 = floatBitsToUint(cbInstanceData._m0[_680 + 5u]);
    uint _1640 = _1638.x * 14u;
    uint _1641 = _1640 + 13u;
    float _1646 = _706 + (-1.0);
    float _1649 = (cbLight._m0[_1641].x * _1646) + 1.0;
    float _1650 = (cbLight._m0[_1641].y * _1646) + 1.0;
    uint _1651 = _1640 + 5u;
    float _1657 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
    uint _1661 = _1640 + 4u;
    float _1667 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
    uint _1671 = _1640 | 1u;
    float _1682 = dot(vec3(cbLight._m0[_1640].xyz), vec3(0.0));
    float _1685 = dot(vec3(cbLight._m0[_1671].xyz), vec3(0.0));
    float _3384 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _3395 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1690 = (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * 0.3183098733425140380859375;
    float _1692 = (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) * 0.3183098733425140380859375;
    float _1699 = ((cbLight._m0[_1651].x * _1657) * _1692) + ((cbLight._m0[_1661].x * _1667) * _1690);
    float _1700 = ((_1657 * cbLight._m0[_1651].y) * _1692) + ((_1667 * cbLight._m0[_1661].y) * _1690);
    float _1701 = ((_1657 * cbLight._m0[_1651].z) * _1692) + ((_1667 * cbLight._m0[_1661].z) * _1690);
    uint _1702 = _1640 + 8u;
    float _1708 = cbLight._m0[_1640].x + _658;
    float _1709 = cbLight._m0[_1640].y + _659;
    float _1710 = cbLight._m0[_1640].z + _660;
    float _1714 = inversesqrt(dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710)));
    float _1718 = dot(vec3(0.0), vec3(cbLight._m0[_1640].xyz));
    float _3406 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1721 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _1722 = dot(vec3(0.0), vec3(_658, _659, _660));
    float _3417 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1725 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _1726 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_1708 * _1714, _1709 * _1714, _1710 * _1714));
    float _3428 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1737 = (exp2(log2(1.0 - (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1743 = (0.5 / ((_1721 + 9.9999999392252902907785028219223e-09) + _1725)) * _1721;
    float _3439 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1745 = (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * 0.31831014156341552734375;
    uint _1756 = _1640 + 9u;
    float _1762 = cbLight._m0[_1671].x + _658;
    float _1763 = cbLight._m0[_1671].y + _659;
    float _1764 = cbLight._m0[_1671].z + _660;
    float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
    float _1772 = dot(vec3(0.0), vec3(cbLight._m0[_1671].xyz));
    float _3450 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _1776 = dot(vec3(cbLight._m0[_1671].xyz), vec3(_1762 * _1768, _1763 * _1768, _1764 * _1768));
    float _3461 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1785 = (exp2(log2(1.0 - (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1789 = (0.5 / ((_1775 + 9.9999999392252902907785028219223e-09) + _1725)) * _1775;
    float _3472 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1791 = (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * 0.31831014156341552734375;
    float _1801 = (((_1785 * cbLight._m0[_1756].x) * _1791) * _1657) + (((_1737 * cbLight._m0[_1702].x) * _1745) * _1667);
    float _1802 = (((_1785 * cbLight._m0[_1756].y) * _1791) * _1657) + (((_1737 * cbLight._m0[_1702].y) * _1745) * _1667);
    float _1803 = (((_1785 * cbLight._m0[_1756].z) * _1791) * _1657) + (((_1737 * cbLight._m0[_1702].z) * _1745) * _1667);
    float _1920;
    float _1922;
    float _1924;
    float _1926;
    float _1928;
    float _1930;
    if (_1638.y == 0u)
    {
        float _1859 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1860 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1859;
        float _1861 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1859;
        float _1862 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1859;
        uvec4 _1874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1875 = _1874.x;
        uint _1886 = uint((float(_1874.y) * floor(float(uint(cbSceneParam._m0[85u].y * _667) / _1875))) + floor(float(uint(cbSceneParam._m0[85u].x * _666) / _1875)));
        float _1896 = (log2(_1862 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1897 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        uint _1900 = uint(isnan(14.0) ? _1897 : (isnan(_1897) ? 14.0 : min(_1897, 14.0)));
        uvec4 _1906 = texelFetch(g_lightClusterGridBuffer, int(((_1900 << 2u) + (_1886 << 6u)) >> 2u));
        uint _1907 = _1906.x;
        uint _1908 = _1874.z;
        float _2024;
        float _2026;
        float _2028;
        float _2030;
        float _2032;
        float _2034;
        if (((((1u << ((_1908 >> 4u) & 15u)) + 4294967295u) & _1907) == 0u) || ((_1908 & 240u) == 0u))
        {
            _2024 = 0.0;
            _2026 = 0.0;
            _2028 = 0.0;
            _2030 = 0.0;
            _2032 = 0.0;
            _2034 = 0.0;
        }
        else
        {
            float _2025;
            float _2027;
            float _2029;
            float _2031;
            float _2033;
            float _2035;
            float _2206 = 0.0;
            float _2207 = 0.0;
            float _2208 = 0.0;
            float _2209 = 0.0;
            float _2210 = 0.0;
            float _2211 = 0.0;
            uint _2212 = 0u;
            uint _2221;
            bool _2222;
            for (;;)
            {
                _2221 = texelFetch(g_lightClassification, int((((_1900 << 5u) + (_1886 << 9u)) + (_2212 << 2u)) >> 2u)).x;
                _2222 = _2221 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2222)
                {
                    frontier_phi_62_pred = _2207;
                    frontier_phi_62_pred_1 = _2206;
                    frontier_phi_62_pred_2 = _2208;
                    frontier_phi_62_pred_3 = _2211;
                    frontier_phi_62_pred_4 = _2210;
                    frontier_phi_62_pred_5 = _2209;
                }
                else
                {
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    float _2385;
                    float _2386;
                    uint _2387;
                    _2381 = _2206;
                    _2382 = _2207;
                    _2383 = _2208;
                    _2384 = _2209;
                    _2385 = _2210;
                    _2386 = _2211;
                    _2387 = _2221;
                    float _2287;
                    float _2288;
                    float _2289;
                    float _2290;
                    float _2291;
                    float _2292;
                    for (;;)
                    {
                        uint _2391 = uint(findLSB(_2387)) + (_2212 << 5u);
                        uint _2388 = (_2387 + 4294967295u) & _2387;
                        uint _2393 = _2391 * 48u;
                        vec4 _2407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2393)).x, texelFetch(g_PointLightRenderingBuffer, int(_2393 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2393 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2393 + 3u)).x));
                        uint _2413 = (_2391 * 48u) + 4u;
                        vec4 _2426 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2413)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 3u)).x));
                        uint _2432 = (_2391 * 48u) + 8u;
                        vec3 _2443 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2432)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 2u)).x));
                        float _2447 = _2407.x - _1860;
                        float _2448 = _2407.y - _1861;
                        float _2449 = _2407.z - _1862;
                        float _2450 = dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449));
                        float _2453 = inversesqrt(_2450);
                        float _2462 = 1.0 - (_2450 * _2407.w);
                        float _3493 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
                        float _2463 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
                        float _2464 = sqrt(_2450) * _2426.w;
                        float _2467 = 1.39999997615814208984375 / (_2464 + 1.39999997615814208984375);
                        float _2468 = _2467 * _2467;
                        float _2471 = ((1.0 - _2468) * dot(vec3(0.0), vec3(_2453 * _2447, _2453 * _2448, _2453 * _2449))) + _2468;
                        float _2474 = _2464 * _2464;
                        float _2478 = ((isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0))) * _2463) / ((_2474 * 0.699999988079071044921875) + 1.0);
                        float _2482 = (-0.0) - _1860;
                        float _2483 = (-0.0) - _1861;
                        float _2484 = (-0.0) - _1862;
                        float _2488 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
                        float _2492 = dot(vec3(0.0), vec3(_2488 * _2482, _2488 * _2483, _2488 * _2484));
                        float _3509 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
                        float _3520 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
                        float _2496 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
                        float _2500 = (0.5 / (((isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) + 9.9999999392252902907785028219223e-09) + _2496)) * _2496;
                        float _3531 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
                        float _2509 = (((isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * 3.1415927410125732421875) / ((_2474 * 2.1991131305694580078125) + 3.141590118408203125)) * _2463;
                        _2290 = (_2478 * _2426.x) + _2384;
                        _2291 = (_2478 * _2426.y) + _2385;
                        _2292 = (_2478 * _2426.z) + _2386;
                        _2287 = (_2509 * _2443.x) + _2381;
                        _2288 = (_2509 * _2443.y) + _2382;
                        _2289 = (_2509 * _2443.z) + _2383;
                        if (_2388 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2381 = _2287;
                            _2382 = _2288;
                            _2383 = _2289;
                            _2384 = _2290;
                            _2385 = _2291;
                            _2386 = _2292;
                            _2387 = _2388;
                        }
                    }
                    frontier_phi_62_pred = _2288;
                    frontier_phi_62_pred_1 = _2287;
                    frontier_phi_62_pred_2 = _2289;
                    frontier_phi_62_pred_3 = _2292;
                    frontier_phi_62_pred_4 = _2291;
                    frontier_phi_62_pred_5 = _2290;
                }
                _2027 = frontier_phi_62_pred;
                _2025 = frontier_phi_62_pred_1;
                _2029 = frontier_phi_62_pred_2;
                _2035 = frontier_phi_62_pred_3;
                _2033 = frontier_phi_62_pred_4;
                _2031 = frontier_phi_62_pred_5;
                uint _2213 = _2212 + 1u;
                if (_2213 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2206 = _2025;
                    _2207 = _2027;
                    _2208 = _2029;
                    _2209 = _2031;
                    _2210 = _2033;
                    _2211 = _2035;
                    _2212 = _2213;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2024 = _2025;
            _2026 = _2027;
            _2028 = _2029;
            _2030 = _2031;
            _2032 = _2033;
            _2034 = _2035;
        }
        uvec4 _2038 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2039 = _2038.z;
        uint _2041 = (_2039 >> 8u) & 15u;
        float _2177;
        float _2179;
        float _2181;
        float _2183;
        float _2185;
        float _2187;
        if (((4294967295u << _2041) & _1907) == 0u)
        {
            _2177 = _2024;
            _2179 = _2026;
            _2181 = _2028;
            _2183 = _2030;
            _2185 = _2032;
            _2187 = _2034;
        }
        else
        {
            float _2202 = inversesqrt(dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2041 < ((_2039 >> 12u) & 15u))
            {
                float _2178;
                float _2180;
                float _2182;
                float _2184;
                float _2186;
                float _2188;
                float _2364 = _2024;
                float _2365 = _2026;
                float _2366 = _2028;
                float _2367 = _2030;
                float _2368 = _2032;
                float _2369 = _2034;
                uint _2370 = _2041;
                uint _2379;
                bool _2380;
                for (;;)
                {
                    _2379 = texelFetch(g_lightClassification, int((((_1900 << 5u) + (_1886 << 9u)) + (_2370 << 2u)) >> 2u)).x;
                    _2380 = _2379 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2380)
                    {
                        frontier_phi_71_pred = _2365;
                        frontier_phi_71_pred_1 = _2364;
                        frontier_phi_71_pred_2 = _2369;
                        frontier_phi_71_pred_3 = _2368;
                        frontier_phi_71_pred_4 = _2367;
                        frontier_phi_71_pred_5 = _2366;
                    }
                    else
                    {
                        float _2535;
                        float _2536;
                        float _2537;
                        float _2538;
                        float _2539;
                        float _2540;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2548 = _2364;
                        float _2549 = _2365;
                        float _2550 = _2366;
                        float _2551 = _2367;
                        float _2552 = _2368;
                        float _2553 = _2369;
                        uint _2554 = _2379;
                        uint _2555;
                        vec4 _2580;
                        float _2581;
                        vec4 _2596;
                        vec3 _2608;
                        vec4 _2624;
                        vec4 _2639;
                        float _2685;
                        bool _2686;
                        for (;;)
                        {
                            uint _2565 = ((_2370 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2554));
                            _2555 = (_2554 + 4294967295u) & _2554;
                            uint _2567 = _2565 * 40u;
                            _2580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 3u)).x));
                            _2581 = _2580.w;
                            uint _2583 = (_2565 * 40u) + 4u;
                            _2596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 3u)).x));
                            uint _2598 = (_2565 * 40u) + 8u;
                            _2608 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 2u)).x));
                            uint _2611 = (_2565 * 40u) + 16u;
                            _2624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 3u)).x));
                            uint _2626 = (_2565 * 40u) + 20u;
                            _2639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2626 + 3u)).x));
                            uint _2641 = (_2565 * 40u) + 24u;
                            vec4 _2654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 3u)).x));
                            uint _2660 = (_2565 * 40u) + 28u;
                            vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 3u)).x));
                            _2685 = fma(_1862, _2673.z, fma(_1861, _2673.y, _2673.x * _1860)) + _2673.w;
                            _2686 = !((fma(_1862, _2654.z, fma(_1861, _2654.y, _2654.x * _1860)) + _2654.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2686)
                            {
                                float _2713 = _2580.x - _1860;
                                float _2714 = _2580.y - _1861;
                                float _2715 = _2580.z - _1862;
                                float _2716 = dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715));
                                float _2719 = inversesqrt(_2716);
                                float _2720 = _2719 * _2713;
                                float _2721 = _2719 * _2714;
                                float _2722 = _2719 * _2715;
                                float _2726 = 1.0 - (_2716 / (_2581 * _2581));
                                float _3542 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                                float _2727 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
                                float _2731 = sqrt(_2716) * _2596.w;
                                float _2733 = 1.39999997615814208984375 / (_2731 + 1.39999997615814208984375);
                                float _2734 = _2733 * _2733;
                                float _2735 = 1.0 - _2734;
                                float _2737 = (_2735 * dot(vec3(_2720, _2721, _2722), vec3(0.0))) + _2734;
                                float _2740 = _2731 * _2731;
                                float _2744 = (fma(_1862, _2624.z, fma(_1861, _2624.y, _2624.x * _1860)) + _2624.w) / _2685;
                                float _2745 = (fma(_1862, _2639.z, fma(_1861, _2639.y, _2639.x * _1860)) + _2639.w) / _2685;
                                float _2749 = 1.0 - dot(vec2(_2744, _2745), vec2(_2744, _2745));
                                float _3558 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                                float _2750 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
                                float _2751 = _2750 * (((isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0))) * _2727) / ((_2740 * 0.699999988079071044921875) + 1.0));
                                float _2761 = dot(vec3(0.0), vec3((-0.0) - (_1860 * _2202), (-0.0) - (_1861 * _2202), (-0.0) - (_1862 * _2202)));
                                float _3569 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                                float _2769 = (_2735 * dot(vec3(0.0), vec3(_2720, _2721, _2722))) + _2734;
                                float _3580 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                                float _2770 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
                                float _2774 = (0.5 / (((isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) + 9.9999999392252902907785028219223e-09) + _2770)) * _2770;
                                float _3591 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                                float _2781 = (_2750 * _2727) * (((isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * 3.1415927410125732421875) / ((_2740 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_77_pred = _2781 * _2608.y;
                                frontier_phi_77_pred_1 = _2781 * _2608.x;
                                frontier_phi_77_pred_2 = _2751 * _2596.z;
                                frontier_phi_77_pred_3 = _2751 * _2596.y;
                                frontier_phi_77_pred_4 = _2751 * _2596.x;
                                frontier_phi_77_pred_5 = _2781 * _2608.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2786 = frontier_phi_77_pred;
                            _2785 = frontier_phi_77_pred_1;
                            _2790 = frontier_phi_77_pred_2;
                            _2789 = frontier_phi_77_pred_3;
                            _2788 = frontier_phi_77_pred_4;
                            _2787 = frontier_phi_77_pred_5;
                            _2538 = _2788 + _2551;
                            _2539 = _2789 + _2552;
                            _2540 = _2790 + _2553;
                            _2535 = _2785 + _2548;
                            _2536 = _2786 + _2549;
                            _2537 = _2787 + _2550;
                            if (_2555 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2548 = _2535;
                                _2549 = _2536;
                                _2550 = _2537;
                                _2551 = _2538;
                                _2552 = _2539;
                                _2553 = _2540;
                                _2554 = _2555;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2536;
                        frontier_phi_71_pred_1 = _2535;
                        frontier_phi_71_pred_2 = _2540;
                        frontier_phi_71_pred_3 = _2539;
                        frontier_phi_71_pred_4 = _2538;
                        frontier_phi_71_pred_5 = _2537;
                    }
                    _2180 = frontier_phi_71_pred;
                    _2178 = frontier_phi_71_pred_1;
                    _2188 = frontier_phi_71_pred_2;
                    _2186 = frontier_phi_71_pred_3;
                    _2184 = frontier_phi_71_pred_4;
                    _2182 = frontier_phi_71_pred_5;
                    uint _2371 = _2370 + 1u;
                    if (_2371 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2364 = _2178;
                        _2365 = _2180;
                        _2366 = _2182;
                        _2367 = _2184;
                        _2368 = _2186;
                        _2369 = _2188;
                        _2370 = _2371;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2188;
                frontier_phi_53_54_ladder_1 = _2184;
                frontier_phi_53_54_ladder_2 = _2182;
                frontier_phi_53_54_ladder_3 = _2180;
                frontier_phi_53_54_ladder_4 = _2178;
                frontier_phi_53_54_ladder_5 = _2186;
            }
            else
            {
                frontier_phi_53_54_ladder = _2034;
                frontier_phi_53_54_ladder_1 = _2030;
                frontier_phi_53_54_ladder_2 = _2028;
                frontier_phi_53_54_ladder_3 = _2026;
                frontier_phi_53_54_ladder_4 = _2024;
                frontier_phi_53_54_ladder_5 = _2032;
            }
            _2177 = frontier_phi_53_54_ladder_4;
            _2179 = frontier_phi_53_54_ladder_3;
            _2181 = frontier_phi_53_54_ladder_2;
            _2183 = frontier_phi_53_54_ladder_1;
            _2185 = frontier_phi_53_54_ladder_5;
            _2187 = frontier_phi_53_54_ladder;
        }
        float _2192 = isnan(1.0) ? _706 : (isnan(_706) ? 1.0 : min(_706, 1.0));
        _1920 = (_2192 * _2183) + _1699;
        _1922 = (_2192 * _2185) + _1700;
        _1924 = (_2192 * _2187) + _1701;
        _1926 = ((_2177 * 0.039999999105930328369140625) * _2192) + _1801;
        _1928 = ((_2179 * 0.039999999105930328369140625) * _2192) + _1802;
        _1930 = ((_2181 * 0.039999999105930328369140625) * _2192) + _1803;
    }
    else
    {
        _1920 = _1699;
        _1922 = _1700;
        _1924 = _1701;
        _1926 = _1801;
        _1928 = _1802;
        _1930 = _1803;
    }
    uint _1936 = _682 + uint(cbMatDynParam._m0[0u].w);
    float _1942 = ((_624 * (_612 - (_612 * _585))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1936].x;
    float _1943 = ((_624 * (_613 - (_613 * _585))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1936].y;
    float _1944 = ((_624 * (_614 - (_614 * _585))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1936].z;
    float _3607 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _3618 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3629 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _1961 = (((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1920 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _706))) + ((_1926 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1413)) * cbPerFrame._m0[3u].x)) + _1942;
    float _1963 = (_1943 + ((_1928 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1413)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1922 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _706)));
    float _1965 = (_1944 + ((_1930 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1413)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1924 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _706)));
    float _3655 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1978 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    uint _1979 = _680 + 6u;
    float _1987 = _666 / cbSceneParam._m0[86u].x;
    float _1988 = _667 / cbSceneParam._m0[86u].y;
    vec4 _2002 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1987, _1988, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2004 = _2002.x;
    float _2005 = _2002.y;
    float _2006 = _2002.z;
    float _2007 = _2002.w;
    float _2087;
    float _2089;
    float _2091;
    float _2093;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2049 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2050 = _2049 / _653;
        float _2061 = _2050 * _267;
        float _2062 = _268 * _2050;
        float _2063 = (-0.0) - _2062;
        float _2064 = _2050 * _269;
        float _2066 = (cbSceneParam._m0[77u].w * _2063) / _2049;
        float _2067 = _2066 + cbSceneParam._m0[79u].w;
        float _2068 = cbSceneParam._m0[79u].w - _2062;
        float _2074 = sqrt(((_2061 * _2061) + (_2062 * _2062)) + (_2064 * _2064));
        float _2077 = (1.0 - (cbSceneParam._m0[77u].w / _2049)) * _2074;
        float _2083 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2085 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2300;
        if (abs((_2063 - _2066) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2300 = ((((_2067 > 0.0) ? exp2(_2083 * _2067) : (2.0 - exp2(_2085 * _2067))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2077;
        }
        else
        {
            float _2235 = 1.0 / cbSceneParam._m0[80u].x;
            float _2236 = isnan(_2068) ? _2067 : (isnan(_2067) ? _2068 : max(_2067, _2068));
            float _2237 = isnan(_2068) ? _2067 : (isnan(_2067) ? _2068 : min(_2067, _2068));
            float _2246 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : min(_2236, 0.0));
            float _2247 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : min(_2237, 0.0));
            _2300 = ((abs(_2074 / _2063) * cbSceneParam._m0[80u].y) * ((((_2246 - _2247) * 2.0) - ((exp2(_2083 * (isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0)))) - exp2(_2083 * (isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0))))) * _2235)) - ((exp2(_2085 * _2246) - exp2(_2085 * _2247)) * _2235))) + (_2077 * cbSceneParam._m0[80u].z);
        }
        vec4 _2302 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1987, _1988, 1.0), 0.0);
        float _2311 = exp2((_2300 * (-1.44269502162933349609375)) * (1.0 - _2302.w));
        float _2312 = log2(_2311);
        float _2328 = log2(_2007);
        _2087 = (exp2(_2328 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2312 * cbSceneParam._m0[78u].x)) * _2302.x) / cbSceneParam._m0[78u].x)) + _2004;
        _2089 = (exp2(_2328 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2312 * cbSceneParam._m0[78u].y)) * _2302.y) / cbSceneParam._m0[78u].y)) + _2005;
        _2091 = (exp2(_2328 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2312 * cbSceneParam._m0[78u].z)) * _2302.z) / cbSceneParam._m0[78u].z)) + _2006;
        _2093 = _2311 * _2007;
    }
    else
    {
        _2087 = _2004;
        _2089 = _2005;
        _2091 = _2006;
        _2093 = _2007;
    }
    float _2104 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2105 = _2104 == 3.0;
    float _2107 = log2(_2093);
    float _2111 = exp2(_2107 * cbSceneParam._m0[78u].x);
    float _2112 = exp2(_2107 * cbSceneParam._m0[78u].y);
    float _2113 = exp2(_2107 * cbSceneParam._m0[78u].z);
    float _2114 = _2111 * (isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)));
    float _2115 = _2112 * (isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)));
    float _2116 = _2113 * (isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)));
    float _2125 = (_2104 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2125 * (_2105 ? _2114 : (_2114 + (cbSceneParam._m0[72u].w * _2087)));
    SV_Target.y = _2125 * (_2105 ? _2115 : (_2115 + (cbSceneParam._m0[72u].w * _2089)));
    SV_Target.z = _2125 * (_2105 ? _2116 : (_2116 + (cbSceneParam._m0[72u].w * _2091)));
    SV_Target.w = cbInstanceData._m0[_1979].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1942) * _1978) * _2111) * _2125;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1943) * _1978) * _2112) * _2125;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1944) * _1978) * _2113) * _2125;
    SV_Target_1.w = cbInstanceData._m0[_1979].w;
}


