#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _394;
float _3066;
float _3067;
float _3068;
float _3069;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _303 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _319 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _326 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _338 = cbMtdParam._m0[28u].z + _273;
    float _339 = cbMtdParam._m0[28u].w + _274;
    float _340 = cbMtdParam._m0[29u].x + _275;
    float _357 = (-0.0) - dot(vec3(_338, _339, _340), vec3(_319 * _206, _319 * _207, _319 * _208));
    float _358 = (-0.0) - dot(vec3(_338, _339, _340), vec3(_326 * _217, _326 * _218, _326 * _219));
    float _359 = (-0.0) - dot(vec3(_338, _339, _340), vec3((-0.0) - (NORMAL.x * _212), (-0.0) - (NORMAL.y * _212), (-0.0) - (NORMAL.z * _212)));
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _364 = _363 * _359;
    float _369 = ((cbMtdParam._m0[25u].y * _357) * _363) + (((_303.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _370 = ((cbMtdParam._m0[25u].z * _358) * _363) + (((_303.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _373 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _374 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _392;
    float _395;
    float _397;
    if (_369 > 0.0)
    {
        float _378 = (1.0 - _373) / _369;
        _392 = _378;
        _395 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_378 * _364)) * 0.16666667163372039794921875;
        _397 = (fract((_378 * _370) + _374) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_369 < 0.0)
        {
            float _393 = ((-0.0) - _373) / _369;
            frontier_phi_3_2_ladder = _393;
            frontier_phi_3_2_ladder_1 = (fract((_393 * _370) + _374) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_393 * _364) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _394;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _392 = frontier_phi_3_2_ladder;
        _395 = frontier_phi_3_2_ladder_2;
        _397 = frontier_phi_3_2_ladder_1;
    }
    float _423;
    float _425;
    float _427;
    if (_370 > 0.0)
    {
        float _410 = (1.0 - _374) / _370;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_410 < _392)
        {
            frontier_phi_8_5_ladder = (fract(_410 * _364) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_410 * _369) + _373) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _410;
        }
        else
        {
            frontier_phi_8_5_ladder = _397;
            frontier_phi_8_5_ladder_1 = _395;
            frontier_phi_8_5_ladder_2 = _392;
        }
        _423 = frontier_phi_8_5_ladder_2;
        _425 = frontier_phi_8_5_ladder_1;
        _427 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_370 < 0.0)
        {
            float _424 = ((-0.0) - _374) / _370;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_424 < _392)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_424 * _364) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_424 * _369) + _373) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _424;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _397;
                frontier_phi_8_6_ladder_9_ladder_1 = _395;
                frontier_phi_8_6_ladder_9_ladder_2 = _392;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _397;
            frontier_phi_8_6_ladder_1 = _395;
            frontier_phi_8_6_ladder_2 = _392;
        }
        _423 = frontier_phi_8_6_ladder_2;
        _425 = frontier_phi_8_6_ladder_1;
        _427 = frontier_phi_8_6_ladder;
    }
    float _431 = (_364 > 0.0) ? (cbMtdParam._m0[20u].z / _364) : 5000.0;
    float _444;
    float _445;
    if (_431 < _423)
    {
        _444 = ((_373 + cbMtdParam._m0[22u].x) + (_431 * _369)) * 0.16666667163372039794921875;
        _445 = (((_431 * _370) + _374) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _444 = _425;
        _445 = _427;
    }
    vec4 _447 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_444, _445));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    vec4 _478 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _483 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _489 = ((_478.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _491 = (-0.0) - (cbMtdParam._m0[21u].x * ((_478.x * 0.5) + (-0.25)));
    float _492 = fract(_483);
    float _494 = fract(_483 + 0.5);
    vec4 _521 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_492 * _491) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_489 * _492) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _523 = _521.x;
    float _529 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_494 * _491) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_489 * _494) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _523) * abs((_492 * 2.0) + (-1.0))) + _523;
    float _543 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _547 = fract(abs(_543));
    float _553 = sin(cbMtdParam._m0[21u].z);
    float _554 = cos(cbMtdParam._m0[21u].z);
    float _555 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _556 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _586 = abs(cbMtdParam._m0[20u].w * (((_529 - (((_543 >= ((-0.0) - _543)) ? _547 : ((-0.0) - _547)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_556, (-0.0) - _553, _554 * _555) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_556, _554, _555 * _553) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _590 = (((_586 * cbMtdParam._m0[18u].y) - _529) * _586) + _529;
    float _3078 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
    vec4 _603 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _618 = (cbMtdParam._m0[14u].x * _603.x) * cbMtdParam._m0[19u].x;
    float _619 = (cbMtdParam._m0[14u].y * _603.y) * cbMtdParam._m0[19u].x;
    float _620 = (cbMtdParam._m0[14u].z * _603.z) * cbMtdParam._m0[19u].x;
    float _630 = exp2(log2(_591) * cbMtdParam._m0[20u].x);
    float _3089 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3100 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3111 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _659 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _663 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _664 = _273 * _663;
    float _665 = _274 * _663;
    float _666 = _275 * _663;
    vec4 _671 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _673 = _671.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _775 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _781 = (cbMatDynParam._m0[5u].x * _775) + cbMatDynParam._m0[5u].y;
        float _3122 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _786 = (cbMatDynParam._m0[5u].z * _775) + cbMatDynParam._m0[5u].w;
        float _3133 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0))) - _782)) + _782) < ((_673 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _691 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _692 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _705 = uint(roundEven(NORMAL.w)) * 13u;
    uint _707 = _705 + 9u;
    uint _708 = _707 + uint(cbMatDynParam._m0[0u].w);
    float _714 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0)))) * cbInstanceData._m0[_708].x;
    float _715 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0)))) * cbInstanceData._m0[_708].y;
    float _716 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0)))) * cbInstanceData._m0[_708].z;
    float _3144 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
    float _3155 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
    float _3166 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
    vec4 _728 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _691, cbSceneParam._m0[86u].y * _692));
    float _731 = _728.x * TEXCOORD_4;
    float _732 = (-0.0) - _664;
    float _733 = (-0.0) - _665;
    float _734 = (-0.0) - _666;
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _849 = (cbModelParam._m0[37u].x * ((((fma(_764, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _851 = (cbModelParam._m0[37u].y * ((((fma(_764, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _852 = (((((fma(_764, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_849, _851, _852), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_849, _851, _852), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_849, _851, _852), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_849, _851, _852), 0.0);
        float _889 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_855.x + (-0.5));
        float _891 = _889 * (_855.y + (-0.5));
        float _892 = _889 * (_855.z + (-0.5));
        float _899 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_862.x + (-0.5));
        float _901 = _899 * (_862.y + (-0.5));
        float _902 = _899 * (_862.z + (-0.5));
        float _909 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_869.x + (-0.5));
        float _911 = _909 * (_869.y + (-0.5));
        float _912 = _909 * (_869.z + (-0.5));
        float _919 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_876.x + (-0.5));
        float _921 = _919 * (_876.y + (-0.5));
        float _922 = _919 * (_876.z + (-0.5));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = _890 * 0.5;
        float _927 = _900 * 0.5;
        float _928 = _910 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _943 = (dot(vec3(0.0), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3192 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _953 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3203 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3214 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0))) * (_955 + 1.0))) + _960) * _923;
        float _970 = _891 * 0.5;
        float _971 = _901 * 0.5;
        float _972 = _911 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(0.0), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3225 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3236 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3247 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))) * (_997 + 1.0))) + _1002) * _924;
        float _1012 = _892 * 0.5;
        float _1013 = _902 * 0.5;
        float _1014 = _912 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(0.0), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3258 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3269 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3280 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))) * (_1039 + 1.0))) + _1044) * _925;
        _1061 = _892;
        _1062 = _891;
        _1063 = _890;
        _1064 = _902;
        _1065 = _901;
        _1066 = _900;
        _1067 = _912;
        _1068 = _911;
        _1069 = _910;
        _1070 = _925;
        _1071 = _924;
        _1072 = _923;
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _394;
        _1062 = _394;
        _1063 = _394;
        _1064 = _394;
        _1065 = _394;
        _1066 = _394;
        _1067 = _394;
        _1068 = _394;
        _1069 = _394;
        _1070 = _394;
        _1071 = _394;
        _1072 = _394;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1131 = (cbModelParam._m0[38u].x * ((((fma(_764, cbModelParam._m0[30u].z, fma(_760, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _756)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1132 = (cbModelParam._m0[38u].y * ((((fma(_764, cbModelParam._m0[31u].z, fma(_760, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _756)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1133 = (((((fma(_764, cbModelParam._m0[32u].z, fma(_760, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _756)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        float _1168 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1135.x + (-0.5));
        float _1170 = _1168 * (_1135.y + (-0.5));
        float _1171 = _1168 * (_1135.z + (-0.5));
        float _1178 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1142.x + (-0.5));
        float _1180 = _1178 * (_1142.y + (-0.5));
        float _1181 = _1178 * (_1142.z + (-0.5));
        float _1188 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1149.x + (-0.5));
        float _1190 = _1188 * (_1149.y + (-0.5));
        float _1191 = _1188 * (_1149.z + (-0.5));
        float _1198 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1156.x + (-0.5));
        float _1200 = _1198 * (_1156.y + (-0.5));
        float _1201 = _1198 * (_1156.z + (-0.5));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = _1169 * 0.5;
        float _1206 = _1179 * 0.5;
        float _1207 = _1189 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(0.0), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3321 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3332 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3343 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * (_1232 + 1.0))) + _1237) * _1202;
        float _1247 = _1170 * 0.5;
        float _1248 = _1180 * 0.5;
        float _1249 = _1190 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(0.0), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3354 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3365 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3376 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * (_1274 + 1.0))) + _1279) * _1203;
        float _1289 = _1171 * 0.5;
        float _1290 = _1181 * 0.5;
        float _1291 = _1191 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(0.0), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3409 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_1316 + 1.0))) + _1321) * _1204;
        _1338 = _1171;
        _1339 = _1170;
        _1340 = _1169;
        _1341 = _1181;
        _1342 = _1180;
        _1343 = _1179;
        _1344 = _1191;
        _1345 = _1190;
        _1346 = _1189;
        _1347 = _1204;
        _1348 = _1203;
        _1349 = _1202;
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
    }
    else
    {
        _1338 = _394;
        _1339 = _394;
        _1340 = _394;
        _1341 = _394;
        _1342 = _394;
        _1343 = _394;
        _1344 = _394;
        _1345 = _394;
        _1346 = _394;
        _1347 = _394;
        _1348 = _394;
        _1349 = _394;
        _1350 = 0.0;
        _1351 = 0.0;
        _1352 = 0.0;
    }
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1073)) + _1073;
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1074)) + _1074;
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1075)) + _1075;
    float _1385 = fma(_1364, cbSceneParam._m0[89u].z, fma(_1363, cbSceneParam._m0[89u].y, _1362 * cbSceneParam._m0[89u].x));
    float _1388 = fma(_1364, cbSceneParam._m0[90u].z, fma(_1363, cbSceneParam._m0[90u].y, _1362 * cbSceneParam._m0[90u].x));
    float _1391 = fma(_1364, cbSceneParam._m0[91u].z, fma(_1363, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1362));
    float _1406 = _664 * (-0.5);
    float _1407 = _665 * (-0.5);
    float _1408 = _666 * (-0.5);
    float _1409 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1412 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1415 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1449;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1422 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1426 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1430 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1437 = dot(vec4(cbModelParam._m0[39u]), vec4(_1406, _1407, _1408, 1.0));
        _1449 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1437) ? 0.0 : (isnan(0.0) ? _1437 : max(0.0, _1437))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1449 = 1.0;
    }
    float _1460;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1451 = dot(vec4(cbModelParam._m0[40u]), vec4(_1406, _1407, _1408, 1.0));
        _1460 = dot(vec3(isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1460 = 1.0;
    }
    float _1464 = (_1460 * cbModelParam._m0[1u].x) + (_1449 * (1.0 - cbModelParam._m0[1u].x));
    float _1473 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1555;
    float _1557;
    float _1559;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1522 = fma(_764, cbModelParam._m0[13u].z, fma(_760, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756)) + cbModelParam._m0[13u].w;
        float _1526 = fma(_764, cbModelParam._m0[14u].z, fma(_760, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756)) + cbModelParam._m0[14u].w;
        float _1530 = fma(_764, cbModelParam._m0[15u].z, fma(_760, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756)) + cbModelParam._m0[15u].w;
        float _1533 = fma(_734, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732));
        float _1536 = fma(_734, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732));
        float _1539 = fma(_734, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732));
        float _1565;
        if (_1533 > 0.0)
        {
            _1565 = abs((1.0 - _1522) / _1533);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1522 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1565 = frontier_phi_29_27_ladder;
        }
        float _1885;
        if (_1536 > 0.0)
        {
            _1885 = abs((1.0 - _1526) / _1536);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1526 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1885 = frontier_phi_38_34_ladder;
        }
        float _2230;
        if (_1539 > 0.0)
        {
            _2230 = abs((1.0 - _1530) / _1539);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1530 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2230 = frontier_phi_52_45_ladder;
        }
        float _2232 = isnan(_1885) ? _1565 : (isnan(_1565) ? _1885 : min(_1565, _1885));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1533) + _1522;
        float _2238 = (_2233 * _1536) + _1526;
        float _2239 = (_2233 * _1539) + _1530;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2241 = (-1.0) - _2240;
        float _2243 = _2240 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2239 > _2243) || ((_2239 < _2241) || ((_2238 > _2243) || ((_2238 < _2241) || ((_2237 < _2241) || (_2237 > _2243))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2239, cbModelParam._m0[9u].z, fma(_2238, cbModelParam._m0[9u].y, _2237 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2239, cbModelParam._m0[10u].z, fma(_2238, cbModelParam._m0[10u].y, _2237 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2239, cbModelParam._m0[11u].z, fma(_2238, cbModelParam._m0[11u].y, _2237 * cbModelParam._m0[11u].x))), _1473);
            frontier_phi_28_52_ladder = _2378.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2378.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2378.x * cbModelParam._m0[1u].y;
        }
        _1555 = frontier_phi_28_52_ladder_2;
        _1557 = frontier_phi_28_52_ladder_1;
        _1559 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1543 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_732, _733, _734), _1473);
        _1555 = _1543.x * cbModelParam._m0[1u].y;
        _1557 = _1543.y * cbModelParam._m0[1u].y;
        _1559 = _1543.z * cbModelParam._m0[1u].y;
    }
    float _1562 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1614 = fma(_764, cbModelParam._m0[21u].z, fma(_760, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756)) + cbModelParam._m0[21u].w;
        float _1618 = fma(_764, cbModelParam._m0[22u].z, fma(_760, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756)) + cbModelParam._m0[22u].w;
        float _1622 = fma(_764, cbModelParam._m0[23u].z, fma(_760, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756)) + cbModelParam._m0[23u].w;
        float _1625 = fma(_734, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732));
        float _1628 = fma(_734, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732));
        float _1631 = fma(_734, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732));
        float _1890;
        if (_1625 > 0.0)
        {
            _1890 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1890 = frontier_phi_40_36_ladder;
        }
        float _2256;
        if (_1628 > 0.0)
        {
            _2256 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2256 = frontier_phi_54_47_ladder;
        }
        float _2443;
        if (_1631 > 0.0)
        {
            _2443 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2443 = frontier_phi_72_65_ladder;
        }
        float _2445 = isnan(_2256) ? _1890 : (isnan(_1890) ? _2256 : min(_1890, _2256));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1625) + _1614;
        float _2451 = (_2446 * _1628) + _1618;
        float _2452 = (_2446 * _1631) + _1622;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2454 = (-1.0) - _2453;
        float _2456 = _2453 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2452 > _2456) || ((_2452 < _2454) || ((_2451 > _2456) || ((_2451 < _2454) || ((_2450 < _2454) || (_2450 > _2456))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2644 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2452, cbModelParam._m0[17u].z, fma(_2451, cbModelParam._m0[17u].y, _2450 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2452, cbModelParam._m0[18u].z, fma(_2451, cbModelParam._m0[18u].y, _2450 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2452, cbModelParam._m0[19u].z, fma(_2451, cbModelParam._m0[19u].y, _2450 * cbModelParam._m0[19u].x))), _1562);
            frontier_phi_37_72_ladder = _2644.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2644.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2644.x * cbModelParam._m0[1u].z;
        }
        _1650 = frontier_phi_37_72_ladder_2;
        _1652 = frontier_phi_37_72_ladder_1;
        _1654 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_732, _733, _734), _1562);
        _1650 = _1634.x * cbModelParam._m0[1u].z;
        _1652 = _1634.y * cbModelParam._m0[1u].z;
        _1654 = _1634.z * cbModelParam._m0[1u].z;
    }
    float _1666 = _731 * 0.01200000010430812835693359375;
    float _1668 = _1666 * ((cbModelParam._m0[1u].w * (_1650 - _1555)) + _1555);
    float _1669 = _1666 * ((cbModelParam._m0[1u].w * (_1652 - _1557)) + _1557);
    float _1670 = _1666 * ((cbModelParam._m0[1u].w * (_1654 - _1559)) + _1559);
    float _1673 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, _1668 * cbSceneParam._m0[91u].x));
    vec4 _1687 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_691, _692));
    float _1689 = _1687.w;
    float _1702 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1689);
    float _1703 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1689);
    float _1704 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1689);
    uvec4 _1708 = floatBitsToUint(cbInstanceData._m0[_705 + 5u]);
    uint _1710 = _1708.x * 14u;
    uint _1711 = _1710 + 13u;
    float _1716 = _731 + (-1.0);
    float _1719 = (cbLight._m0[_1711].x * _1716) + 1.0;
    float _1720 = (cbLight._m0[_1711].y * _1716) + 1.0;
    uint _1721 = _1710 + 5u;
    float _1727 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1731 = _1710 + 4u;
    float _1740 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1744 = _1710 | 1u;
    float _1755 = dot(vec3(cbLight._m0[_1710].xyz), vec3(0.0));
    float _1758 = dot(vec3(cbLight._m0[_1744].xyz), vec3(0.0));
    float _3545 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _3556 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1763 = (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * 0.3183098733425140380859375;
    float _1765 = (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * 0.3183098733425140380859375;
    float _1772 = ((cbLight._m0[_1721].x * _1727) * _1765) + (((cbLight._m0[_1731].x * _1702) * _1740) * _1763);
    float _1773 = ((_1727 * cbLight._m0[_1721].y) * _1765) + (((cbLight._m0[_1731].y * _1703) * _1740) * _1763);
    float _1774 = ((_1727 * cbLight._m0[_1721].z) * _1765) + (((cbLight._m0[_1731].z * _1704) * _1740) * _1763);
    uint _1775 = _1710 + 8u;
    float _1781 = cbLight._m0[_1710].x + _664;
    float _1782 = cbLight._m0[_1710].y + _665;
    float _1783 = cbLight._m0[_1710].z + _666;
    float _1787 = inversesqrt(dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783)));
    float _1791 = dot(vec3(0.0), vec3(cbLight._m0[_1710].xyz));
    float _3567 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _1795 = dot(vec3(0.0), vec3(_664, _665, _666));
    float _3578 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _1799 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1781 * _1787, _1782 * _1787, _1783 * _1787));
    float _3589 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1810 = (exp2(log2(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1816 = (0.5 / ((_1794 + 9.9999999392252902907785028219223e-09) + _1798)) * _1794;
    float _3600 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1818 = (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.31831014156341552734375;
    uint _1832 = _1710 + 9u;
    float _1838 = cbLight._m0[_1744].x + _664;
    float _1839 = cbLight._m0[_1744].y + _665;
    float _1840 = cbLight._m0[_1744].z + _666;
    float _1844 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
    float _1848 = dot(vec3(0.0), vec3(cbLight._m0[_1744].xyz));
    float _3611 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _1852 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1838 * _1844, _1839 * _1844, _1840 * _1844));
    float _3622 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1861 = (exp2(log2(1.0 - (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1865 = (0.5 / ((_1851 + 9.9999999392252902907785028219223e-09) + _1798)) * _1851;
    float _3633 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1867 = (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * 0.31831014156341552734375;
    float _1877 = (((_1861 * cbLight._m0[_1832].x) * _1867) * _1727) + ((((cbLight._m0[_1775].x * _1702) * _1810) * _1818) * _1740);
    float _1878 = (((_1861 * cbLight._m0[_1832].y) * _1867) * _1727) + ((((cbLight._m0[_1775].y * _1703) * _1810) * _1818) * _1740);
    float _1879 = (((_1861 * cbLight._m0[_1832].z) * _1867) * _1727) + ((((cbLight._m0[_1775].z * _1704) * _1810) * _1818) * _1740);
    float _1995;
    float _1997;
    float _1999;
    float _2001;
    float _2003;
    float _2005;
    if (_1708.y == 0u)
    {
        float _1935 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1936 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1935;
        float _1937 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1935;
        float _1938 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1935;
        uvec4 _1950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1951 = _1950.x;
        uint _1962 = uint((float(_1950.y) * floor(float(uint(cbSceneParam._m0[85u].y * _692) / _1951))) + floor(float(uint(cbSceneParam._m0[85u].x * _691) / _1951)));
        float _1972 = (log2(_1938 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1973 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        uint _1976 = uint(isnan(14.0) ? _1973 : (isnan(_1973) ? 14.0 : min(_1973, 14.0)));
        uvec4 _1981 = texelFetch(g_lightClusterGridBuffer, int(((_1976 << 2u) + (_1962 << 6u)) >> 2u));
        uint _1982 = _1981.x;
        uint _1983 = _1950.z;
        float _2099;
        float _2101;
        float _2103;
        float _2105;
        float _2107;
        float _2109;
        if (((((1u << ((_1983 >> 4u) & 15u)) + 4294967295u) & _1982) == 0u) || ((_1983 & 240u) == 0u))
        {
            _2099 = 0.0;
            _2101 = 0.0;
            _2103 = 0.0;
            _2105 = 0.0;
            _2107 = 0.0;
            _2109 = 0.0;
        }
        else
        {
            float _2100;
            float _2102;
            float _2104;
            float _2106;
            float _2108;
            float _2110;
            float _2290 = 0.0;
            float _2291 = 0.0;
            float _2292 = 0.0;
            float _2293 = 0.0;
            float _2294 = 0.0;
            float _2295 = 0.0;
            uint _2296 = 0u;
            uint _2305;
            bool _2306;
            for (;;)
            {
                _2305 = texelFetch(g_lightClassification, int((((_1976 << 5u) + (_1962 << 9u)) + (_2296 << 2u)) >> 2u)).x;
                _2306 = _2305 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2306)
                {
                    frontier_phi_67_pred = _2293;
                    frontier_phi_67_pred_1 = _2292;
                    frontier_phi_67_pred_2 = _2291;
                    frontier_phi_67_pred_3 = _2290;
                    frontier_phi_67_pred_4 = _2294;
                    frontier_phi_67_pred_5 = _2295;
                }
                else
                {
                    float _2486;
                    float _2487;
                    float _2488;
                    float _2489;
                    float _2490;
                    float _2491;
                    uint _2492;
                    _2486 = _2290;
                    _2487 = _2291;
                    _2488 = _2292;
                    _2489 = _2293;
                    _2490 = _2294;
                    _2491 = _2295;
                    _2492 = _2305;
                    float _2387;
                    float _2388;
                    float _2389;
                    float _2390;
                    float _2391;
                    float _2392;
                    for (;;)
                    {
                        uint _2496 = uint(findLSB(_2492)) + (_2296 << 5u);
                        uint _2493 = (_2492 + 4294967295u) & _2492;
                        uint _2498 = _2496 * 48u;
                        vec4 _2512 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2498)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 3u)).x));
                        uint _2518 = (_2496 * 48u) + 4u;
                        vec4 _2531 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2518)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 3u)).x));
                        uint _2537 = (_2496 * 48u) + 8u;
                        vec3 _2548 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2537)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 2u)).x));
                        float _2552 = _2512.x - _1936;
                        float _2553 = _2512.y - _1937;
                        float _2554 = _2512.z - _1938;
                        float _2555 = dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554));
                        float _2558 = inversesqrt(_2555);
                        float _2567 = 1.0 - (_2555 * _2512.w);
                        float _3654 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
                        float _2568 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
                        float _2569 = sqrt(_2555) * _2531.w;
                        float _2572 = 1.39999997615814208984375 / (_2569 + 1.39999997615814208984375);
                        float _2573 = _2572 * _2572;
                        float _2576 = ((1.0 - _2573) * dot(vec3(0.0), vec3(_2558 * _2552, _2558 * _2553, _2558 * _2554))) + _2573;
                        float _2579 = _2569 * _2569;
                        float _2583 = ((isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0))) * _2568) / ((_2579 * 0.699999988079071044921875) + 1.0);
                        float _2587 = (-0.0) - _1936;
                        float _2588 = (-0.0) - _1937;
                        float _2589 = (-0.0) - _1938;
                        float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
                        float _2597 = dot(vec3(0.0), vec3(_2593 * _2587, _2593 * _2588, _2593 * _2589));
                        float _3670 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
                        float _3681 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
                        float _2601 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
                        float _2605 = (0.5 / (((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) + 9.9999999392252902907785028219223e-09) + _2601)) * _2601;
                        float _3692 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
                        float _2614 = (((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * 3.1415927410125732421875) / ((_2579 * 2.1991131305694580078125) + 3.141590118408203125)) * _2568;
                        _2390 = (_2583 * _2531.x) + _2489;
                        _2391 = (_2583 * _2531.y) + _2490;
                        _2392 = (_2583 * _2531.z) + _2491;
                        _2387 = (_2614 * _2548.x) + _2486;
                        _2388 = (_2614 * _2548.y) + _2487;
                        _2389 = (_2614 * _2548.z) + _2488;
                        if (_2493 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2486 = _2387;
                            _2487 = _2388;
                            _2488 = _2389;
                            _2489 = _2390;
                            _2490 = _2391;
                            _2491 = _2392;
                            _2492 = _2493;
                        }
                    }
                    frontier_phi_67_pred = _2390;
                    frontier_phi_67_pred_1 = _2389;
                    frontier_phi_67_pred_2 = _2388;
                    frontier_phi_67_pred_3 = _2387;
                    frontier_phi_67_pred_4 = _2391;
                    frontier_phi_67_pred_5 = _2392;
                }
                _2106 = frontier_phi_67_pred;
                _2104 = frontier_phi_67_pred_1;
                _2102 = frontier_phi_67_pred_2;
                _2100 = frontier_phi_67_pred_3;
                _2108 = frontier_phi_67_pred_4;
                _2110 = frontier_phi_67_pred_5;
                uint _2297 = _2296 + 1u;
                if (_2297 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2290 = _2100;
                    _2291 = _2102;
                    _2292 = _2104;
                    _2293 = _2106;
                    _2294 = _2108;
                    _2295 = _2110;
                    _2296 = _2297;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2099 = _2100;
            _2101 = _2102;
            _2103 = _2104;
            _2105 = _2106;
            _2107 = _2108;
            _2109 = _2110;
        }
        uvec4 _2113 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2114 = _2113.z;
        uint _2116 = (_2114 >> 8u) & 15u;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        float _2271;
        if (((4294967295u << _2116) & _1982) == 0u)
        {
            _2261 = _2099;
            _2263 = _2101;
            _2265 = _2103;
            _2267 = _2105;
            _2269 = _2107;
            _2271 = _2109;
        }
        else
        {
            float _2286 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2116 < ((_2114 >> 12u) & 15u))
            {
                float _2262;
                float _2264;
                float _2266;
                float _2268;
                float _2270;
                float _2272;
                float _2469 = _2099;
                float _2470 = _2101;
                float _2471 = _2103;
                float _2472 = _2105;
                float _2473 = _2107;
                float _2474 = _2109;
                uint _2475 = _2116;
                uint _2484;
                bool _2485;
                for (;;)
                {
                    _2484 = texelFetch(g_lightClassification, int((((_1976 << 5u) + (_1962 << 9u)) + (_2475 << 2u)) >> 2u)).x;
                    _2485 = _2484 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2485)
                    {
                        frontier_phi_81_pred = _2472;
                        frontier_phi_81_pred_1 = _2471;
                        frontier_phi_81_pred_2 = _2470;
                        frontier_phi_81_pred_3 = _2469;
                        frontier_phi_81_pred_4 = _2474;
                        frontier_phi_81_pred_5 = _2473;
                    }
                    else
                    {
                        float _2649;
                        float _2650;
                        float _2651;
                        float _2652;
                        float _2653;
                        float _2654;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2662 = _2469;
                        float _2663 = _2470;
                        float _2664 = _2471;
                        float _2665 = _2472;
                        float _2666 = _2473;
                        float _2667 = _2474;
                        uint _2668 = _2484;
                        uint _2669;
                        vec4 _2694;
                        float _2695;
                        vec4 _2710;
                        vec3 _2722;
                        vec4 _2738;
                        vec4 _2753;
                        float _2799;
                        bool _2800;
                        for (;;)
                        {
                            uint _2679 = ((_2475 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2668));
                            _2669 = (_2668 + 4294967295u) & _2668;
                            uint _2681 = _2679 * 40u;
                            _2694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2681 + 3u)).x));
                            _2695 = _2694.w;
                            uint _2697 = (_2679 * 40u) + 4u;
                            _2710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 3u)).x));
                            uint _2712 = (_2679 * 40u) + 8u;
                            _2722 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 2u)).x));
                            uint _2725 = (_2679 * 40u) + 16u;
                            _2738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 3u)).x));
                            uint _2740 = (_2679 * 40u) + 20u;
                            _2753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 3u)).x));
                            uint _2755 = (_2679 * 40u) + 24u;
                            vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 3u)).x));
                            uint _2774 = (_2679 * 40u) + 28u;
                            vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 3u)).x));
                            _2799 = fma(_1938, _2787.z, fma(_1937, _2787.y, _2787.x * _1936)) + _2787.w;
                            _2800 = !((fma(_1938, _2768.z, fma(_1937, _2768.y, _2768.x * _1936)) + _2768.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2800)
                            {
                                float _2827 = _2694.x - _1936;
                                float _2828 = _2694.y - _1937;
                                float _2829 = _2694.z - _1938;
                                float _2830 = dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829));
                                float _2833 = inversesqrt(_2830);
                                float _2834 = _2833 * _2827;
                                float _2835 = _2833 * _2828;
                                float _2836 = _2833 * _2829;
                                float _2840 = 1.0 - (_2830 / (_2695 * _2695));
                                float _3703 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                                float _2841 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
                                float _2845 = sqrt(_2830) * _2710.w;
                                float _2847 = 1.39999997615814208984375 / (_2845 + 1.39999997615814208984375);
                                float _2848 = _2847 * _2847;
                                float _2849 = 1.0 - _2848;
                                float _2851 = (_2849 * dot(vec3(_2834, _2835, _2836), vec3(0.0))) + _2848;
                                float _2854 = _2845 * _2845;
                                float _2858 = (fma(_1938, _2738.z, fma(_1937, _2738.y, _2738.x * _1936)) + _2738.w) / _2799;
                                float _2859 = (fma(_1938, _2753.z, fma(_1937, _2753.y, _2753.x * _1936)) + _2753.w) / _2799;
                                float _2863 = 1.0 - dot(vec2(_2858, _2859), vec2(_2858, _2859));
                                float _3719 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                                float _2864 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
                                float _2865 = _2864 * (((isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0))) * _2841) / ((_2854 * 0.699999988079071044921875) + 1.0));
                                float _2875 = dot(vec3(0.0), vec3((-0.0) - (_1936 * _2286), (-0.0) - (_1937 * _2286), (-0.0) - (_1938 * _2286)));
                                float _3730 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                                float _2883 = (_2849 * dot(vec3(0.0), vec3(_2834, _2835, _2836))) + _2848;
                                float _3741 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                                float _2884 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
                                float _2888 = (0.5 / (((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) + 9.9999999392252902907785028219223e-09) + _2884)) * _2884;
                                float _3752 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                                float _2895 = (_2864 * _2841) * (((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * 3.1415927410125732421875) / ((_2854 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2865 * _2710.x;
                                frontier_phi_87_pred_1 = _2895 * _2722.z;
                                frontier_phi_87_pred_2 = _2895 * _2722.y;
                                frontier_phi_87_pred_3 = _2895 * _2722.x;
                                frontier_phi_87_pred_4 = _2865 * _2710.z;
                                frontier_phi_87_pred_5 = _2865 * _2710.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _2902 = frontier_phi_87_pred;
                            _2901 = frontier_phi_87_pred_1;
                            _2900 = frontier_phi_87_pred_2;
                            _2899 = frontier_phi_87_pred_3;
                            _2904 = frontier_phi_87_pred_4;
                            _2903 = frontier_phi_87_pred_5;
                            _2652 = _2902 + _2665;
                            _2653 = _2903 + _2666;
                            _2654 = _2904 + _2667;
                            _2649 = _2899 + _2662;
                            _2650 = _2900 + _2663;
                            _2651 = _2901 + _2664;
                            if (_2669 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2662 = _2649;
                                _2663 = _2650;
                                _2664 = _2651;
                                _2665 = _2652;
                                _2666 = _2653;
                                _2667 = _2654;
                                _2668 = _2669;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2652;
                        frontier_phi_81_pred_1 = _2651;
                        frontier_phi_81_pred_2 = _2650;
                        frontier_phi_81_pred_3 = _2649;
                        frontier_phi_81_pred_4 = _2654;
                        frontier_phi_81_pred_5 = _2653;
                    }
                    _2268 = frontier_phi_81_pred;
                    _2266 = frontier_phi_81_pred_1;
                    _2264 = frontier_phi_81_pred_2;
                    _2262 = frontier_phi_81_pred_3;
                    _2272 = frontier_phi_81_pred_4;
                    _2270 = frontier_phi_81_pred_5;
                    uint _2476 = _2475 + 1u;
                    if (_2476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2469 = _2262;
                        _2470 = _2264;
                        _2471 = _2266;
                        _2472 = _2268;
                        _2473 = _2270;
                        _2474 = _2272;
                        _2475 = _2476;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2272;
                frontier_phi_56_57_ladder_1 = _2270;
                frontier_phi_56_57_ladder_2 = _2268;
                frontier_phi_56_57_ladder_3 = _2264;
                frontier_phi_56_57_ladder_4 = _2262;
                frontier_phi_56_57_ladder_5 = _2266;
            }
            else
            {
                frontier_phi_56_57_ladder = _2109;
                frontier_phi_56_57_ladder_1 = _2107;
                frontier_phi_56_57_ladder_2 = _2105;
                frontier_phi_56_57_ladder_3 = _2101;
                frontier_phi_56_57_ladder_4 = _2099;
                frontier_phi_56_57_ladder_5 = _2103;
            }
            _2261 = frontier_phi_56_57_ladder_4;
            _2263 = frontier_phi_56_57_ladder_3;
            _2265 = frontier_phi_56_57_ladder_5;
            _2267 = frontier_phi_56_57_ladder_2;
            _2269 = frontier_phi_56_57_ladder_1;
            _2271 = frontier_phi_56_57_ladder;
        }
        float _2276 = isnan(1.0) ? _731 : (isnan(_731) ? 1.0 : min(_731, 1.0));
        _1995 = (_2276 * _2267) + _1772;
        _1997 = (_2276 * _2269) + _1773;
        _1999 = (_2276 * _2271) + _1774;
        _2001 = ((_2261 * 0.039999999105930328369140625) * _2276) + _1877;
        _2003 = ((_2263 * 0.039999999105930328369140625) * _2276) + _1878;
        _2005 = ((_2265 * 0.039999999105930328369140625) * _2276) + _1879;
    }
    else
    {
        _1995 = _1772;
        _1997 = _1773;
        _1999 = _1774;
        _2001 = _1877;
        _2003 = _1878;
        _2005 = _1879;
    }
    uint _2011 = _707 + uint(cbMatDynParam._m0[0u].w);
    float _2017 = ((_630 * (_618 - (_618 * _591))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2011].x;
    float _2018 = ((_630 * (_619 - (_619 * _591))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2011].y;
    float _2019 = ((_630 * (_620 - (_620 * _591))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2011].z;
    float _3768 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _3779 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _3790 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _2036 = (((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1995 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _731))) + ((_2001 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1464)) * cbPerFrame._m0[3u].x)) + _2017;
    float _2038 = (_2018 + ((_2003 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1464)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1997 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _731)));
    float _2040 = (_2019 + ((_2005 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1464)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1999 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _731)));
    float _2041 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2042 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2043 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2049 = cbMtdParam._m0[2u].x * _2017;
    float _2050 = cbMtdParam._m0[2u].y * _2018;
    float _2051 = cbMtdParam._m0[2u].z * _2019;
    float _3816 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2053 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    uint _2054 = _705 + 6u;
    float _2062 = _691 / cbSceneParam._m0[86u].x;
    float _2063 = _692 / cbSceneParam._m0[86u].y;
    vec4 _2077 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2062, _2063, (log2((isnan(cbSceneParam._m0[77u].w) ? _659 : (isnan(_659) ? cbSceneParam._m0[77u].w : min(_659, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2079 = _2077.x;
    float _2080 = _2077.y;
    float _2081 = _2077.z;
    float _2082 = _2077.w;
    float _2162;
    float _2164;
    float _2166;
    float _2168;
    if (_659 > cbSceneParam._m0[78u].w)
    {
        float _2124 = isnan(_659) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _659 : min(cbSceneParam._m0[80u].w, _659));
        float _2125 = _2124 / _659;
        float _2136 = _2125 * _273;
        float _2137 = _274 * _2125;
        float _2138 = (-0.0) - _2137;
        float _2139 = _2125 * _275;
        float _2141 = (cbSceneParam._m0[77u].w * _2138) / _2124;
        float _2142 = _2141 + cbSceneParam._m0[79u].w;
        float _2143 = cbSceneParam._m0[79u].w - _2137;
        float _2149 = sqrt(((_2136 * _2136) + (_2137 * _2137)) + (_2139 * _2139));
        float _2152 = (1.0 - (cbSceneParam._m0[77u].w / _2124)) * _2149;
        float _2158 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2160 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2400;
        if (abs((_2138 - _2141) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2400 = ((((_2142 > 0.0) ? exp2(_2158 * _2142) : (2.0 - exp2(_2160 * _2142))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2152;
        }
        else
        {
            float _2319 = 1.0 / cbSceneParam._m0[80u].x;
            float _2320 = isnan(_2143) ? _2142 : (isnan(_2142) ? _2143 : max(_2142, _2143));
            float _2321 = isnan(_2143) ? _2142 : (isnan(_2142) ? _2143 : min(_2142, _2143));
            float _2330 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : min(_2320, 0.0));
            float _2331 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : min(_2321, 0.0));
            _2400 = ((abs(_2149 / _2138) * cbSceneParam._m0[80u].y) * ((((_2330 - _2331) * 2.0) - ((exp2(_2158 * (isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0)))) - exp2(_2158 * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0))))) * _2319)) - ((exp2(_2160 * _2330) - exp2(_2160 * _2331)) * _2319))) + (_2152 * cbSceneParam._m0[80u].z);
        }
        vec4 _2402 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2062, _2063, 1.0), 0.0);
        float _2411 = exp2((_2400 * (-1.44269502162933349609375)) * (1.0 - _2402.w));
        float _2412 = log2(_2411);
        float _2428 = log2(_2082);
        _2162 = (exp2(_2428 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2412 * cbSceneParam._m0[78u].x)) * _2402.x) / cbSceneParam._m0[78u].x)) + _2079;
        _2164 = (exp2(_2428 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2412 * cbSceneParam._m0[78u].y)) * _2402.y) / cbSceneParam._m0[78u].y)) + _2080;
        _2166 = (exp2(_2428 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2412 * cbSceneParam._m0[78u].z)) * _2402.z) / cbSceneParam._m0[78u].z)) + _2081;
        _2168 = _2411 * _2082;
    }
    else
    {
        _2162 = _2079;
        _2164 = _2080;
        _2166 = _2081;
        _2168 = _2082;
    }
    bool _2438;
    vec4 _2177;
    vec4 _2200;
    float _2202;
    float _2206;
    float _2207;
    float _2208;
    float _2211;
    float _2214;
    float _2217;
    float _2218;
    bool _2229;
    for (;;)
    {
        _2177 = cbMatDynParam._m0[0u];
        float _2179 = roundEven(_2177.y);
        bool _2180 = _2179 == 3.0;
        float _2182 = log2(_2168);
        float _2186 = exp2(_2182 * cbSceneParam._m0[78u].x);
        float _2187 = exp2(_2182 * cbSceneParam._m0[78u].y);
        float _2188 = exp2(_2182 * cbSceneParam._m0[78u].z);
        float _2189 = _2186 * _2041;
        float _2190 = _2187 * _2042;
        float _2191 = _2188 * _2043;
        float _2198 = _673 + (-0.5);
        _2200 = cbMtdParam._m0[1u];
        _2202 = _2200.y * _2198;
        float _2205 = (_2179 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2206 = _2205 * (_2180 ? _2189 : (_2189 + (cbSceneParam._m0[72u].w * _2162)));
        _2207 = _2205 * (_2180 ? _2190 : (_2190 + (cbSceneParam._m0[72u].w * _2164)));
        _2208 = _2205 * (_2180 ? _2191 : (_2191 + (cbSceneParam._m0[72u].w * _2166)));
        _2211 = ((_2049 * _2053) * _2186) * _2205;
        _2214 = ((_2050 * _2053) * _2187) * _2205;
        _2217 = ((_2051 * _2053) * _2188) * _2205;
        _2218 = _2198 * 0.999000012874603271484375;
        _2229 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2229)
        {
            if ((cbInstanceData._m0[_705 + 7u].x + _2218) < 0.5)
            {
                _2438 = true;
                break;
            }
        }
        uint _2354 = _707 + uint(_2177.w);
        if ((cbInstanceData._m0[_2354].w < 1.0) && ((cbInstanceData._m0[_2354].w + _2218) < 0.5))
        {
            _2438 = true;
            break;
        }
        if ((_2202 + 1.0) < _2200.x)
        {
            _2438 = true;
            break;
        }
        _2438 = false;
        break;
    }
    float _2619;
    if (_2438)
    {
        discard_state = true;
        _2619 = 0.0;
    }
    else
    {
        _2619 = cbInstanceData._m0[_2054].w;
    }
    SV_Target.x = _2206;
    SV_Target.y = _2207;
    SV_Target.z = _2208;
    SV_Target.w = _2619;
    SV_Target_1.x = _2211;
    SV_Target_1.y = _2214;
    SV_Target_1.z = _2217;
    SV_Target_1.w = cbInstanceData._m0[_2054].w;
    discard_exit();
}


