#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1510;
float _3727;
float _3728;
float _3729;
float _3730;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _280 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _290 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _280);
    float _291 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _280);
    float _292 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _280);
    vec4 _306 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _309 = _306.x;
    vec4 _327 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _344 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _309) + cbMtdParam._m0[12u].x) * _327.x;
    float _346 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _309) + cbMtdParam._m0[12u].y) * _327.y;
    float _348 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _309) + cbMtdParam._m0[12u].z) * _327.z;
    vec4 _366 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _405 = cbMtdParam._m0[27u].w + _290;
    float _406 = cbMtdParam._m0[28u].x + _291;
    float _407 = cbMtdParam._m0[28u].y + _292;
    float _421 = (-0.0) - dot(vec3(_405, _406, _407), vec3(_220, _221, _222));
    float _422 = (-0.0) - dot(vec3(_405, _406, _407), vec3(_234, _235, _236));
    float _423 = (-0.0) - dot(vec3(_405, _406, _407), vec3((-0.0) - _227, (-0.0) - _228, (-0.0) - _229));
    float _427 = inversesqrt(dot(vec3(_421, _422, _423), vec3(_421, _422, _423)));
    float _430 = _427 * _423;
    float _431 = (_427 * _421) + ((cbMtdParam._m0[25u].w * _309) * ((_366.x * 2.0) + (-1.0)));
    float _432 = (_427 * _422) + ((cbMtdParam._m0[26u].x * _309) * ((_366.y * 2.0) + (-1.0)));
    float _433 = _431 * cbMtdParam._m0[24u].x;
    float _434 = _432 * cbMtdParam._m0[23u].w;
    float _435 = fract(TEXCOORD.x);
    float _436 = fract(TEXCOORD.y);
    float _442;
    if (_433 > 0.0)
    {
        _442 = (1.0 - _435) / _433;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_433 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _435) / _433;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _442 = frontier_phi_3_2_ladder;
    }
    float _450;
    if (_434 > 0.0)
    {
        _450 = (1.0 - _436) / _434;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_434 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _436) / _434;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _450 = frontier_phi_7_6_ladder;
    }
    bool _452 = _430 > 0.0;
    float _454 = _452 ? (cbMtdParam._m0[17u].x / _430) : 5000.0;
    float _455 = isnan(_450) ? _442 : (isnan(_442) ? _450 : min(_442, _450));
    float _456 = isnan(_454) ? _455 : (isnan(_455) ? _454 : min(_455, _454));
    float _460 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _461 = _435 + (-0.5);
    float _464 = _436 + (-0.5);
    float _467 = ((_456 * _430) + _460) / _460;
    vec4 _492 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_461 + (_456 * _433)) / _467) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_464 + (_456 * _434)) / _467) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _505 = (_492.x * _309) * cbMtdParam._m0[9u].x;
    float _506 = (_492.y * _309) * cbMtdParam._m0[9u].y;
    float _507 = (_492.z * _309) * cbMtdParam._m0[9u].z;
    float _525 = _431 * cbMtdParam._m0[26u].z;
    float _526 = _432 * cbMtdParam._m0[26u].y;
    bool _527 = _525 > 0.0;
    float _532;
    if (_527)
    {
        _532 = (1.0 - _435) / _525;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _435) / _525;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _532 = frontier_phi_11_10_ladder;
    }
    bool _534 = _526 > 0.0;
    float _539;
    if (_534)
    {
        _539 = (1.0 - _436) / _526;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_526 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _436) / _526;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _539 = frontier_phi_15_14_ladder;
    }
    float _542 = _452 ? (cbMtdParam._m0[19u].z / _430) : 5000.0;
    float _543 = isnan(_539) ? _532 : (isnan(_532) ? _539 : min(_532, _539));
    float _544 = isnan(_542) ? _543 : (isnan(_543) ? _542 : min(_543, _542));
    float _548 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _552 = ((_544 * _430) + _548) / _548;
    float _557 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _559 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _575 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_461 + (_544 * _525)) / _552) + 0.5) + _557) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_464 + (_544 * _526)) / _552) + 0.5) + _559) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _590;
    if (_527)
    {
        _590 = (1.0 - _435) / _525;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _435) / _525;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _590 = frontier_phi_19_18_ladder;
    }
    float _596;
    if (_534)
    {
        _596 = (1.0 - _436) / _526;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_526 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _436) / _526;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _596 = frontier_phi_23_22_ladder;
    }
    float _598 = isnan(_596) ? _590 : (isnan(_590) ? _596 : min(_590, _596));
    float _599 = isnan(_542) ? _598 : (isnan(_598) ? _542 : min(_598, _542));
    float _606 = ((_599 * _430) + _548) / _548;
    vec4 _626 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_461 + (_599 * _525)) / _606) + 0.5) + _557) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_464 + (_599 * _526)) / _606) + 0.5) + _559) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _628 = _626.x;
    float _638 = (((((cbMtdParam._m0[10u].x * _309) * _575.x) - _505) * _309) * _628) + _505;
    float _639 = (((((cbMtdParam._m0[10u].y * _309) * _575.y) - _506) * _309) * _628) + _506;
    float _640 = (((((cbMtdParam._m0[10u].z * _309) * _575.z) - _507) * _309) * _628) + _507;
    float _653 = _431 * cbMtdParam._m0[27u].x;
    float _654 = _432 * cbMtdParam._m0[26u].w;
    bool _655 = _653 > 0.0;
    float _660;
    if (_655)
    {
        _660 = (1.0 - _435) / _653;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_653 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _435) / _653;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _660 = frontier_phi_27_26_ladder;
    }
    bool _662 = _654 > 0.0;
    float _667;
    if (_662)
    {
        _667 = (1.0 - _436) / _654;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_654 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _436) / _654;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _667 = frontier_phi_31_30_ladder;
    }
    float _670 = _452 ? (cbMtdParam._m0[23u].x / _430) : 5000.0;
    float _671 = isnan(_667) ? _660 : (isnan(_660) ? _667 : min(_660, _667));
    float _672 = isnan(_670) ? _671 : (isnan(_671) ? _670 : min(_671, _670));
    float _676 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _680 = ((_672 * _430) + _676) / _676;
    float _685 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _687 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _703 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_461 + (_672 * _653)) / _680) + 0.5) + _685) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_464 + (_672 * _654)) / _680) + 0.5) + _687) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _718;
    if (_655)
    {
        _718 = (1.0 - _435) / _653;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_653 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _435) / _653;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _718 = frontier_phi_35_34_ladder;
    }
    float _724;
    if (_662)
    {
        _724 = (1.0 - _436) / _654;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_654 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _436) / _654;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _724 = frontier_phi_39_38_ladder;
    }
    float _726 = isnan(_724) ? _718 : (isnan(_718) ? _724 : min(_718, _724));
    float _727 = isnan(_670) ? _726 : (isnan(_726) ? _670 : min(_726, _670));
    float _734 = ((_727 * _430) + _676) / _676;
    vec4 _754 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_461 + (_727 * _653)) / _734) + 0.5) + _685) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_464 + (_727 * _654)) / _734) + 0.5) + _687) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _756 = _754.x;
    float _766 = _309 * 0.1500000059604644775390625;
    float _777 = (_766 * ((_638 - _344) + (((((cbMtdParam._m0[13u].x * _309) * _703.x) - _638) * _309) * _756))) + _344;
    float _778 = (_766 * ((_639 - _346) + (((((cbMtdParam._m0[13u].y * _309) * _703.y) - _639) * _309) * _756))) + _346;
    float _779 = (_766 * ((_640 - _348) + (((((cbMtdParam._m0[13u].z * _309) * _703.z) - _640) * _309) * _756))) + _348;
    vec4 _792 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _796 = _792.z;
    float _799 = (_792.x * 2.0) + (-1.0);
    float _800 = (_792.y * 2.0) + (-1.0);
    float _801 = dot(vec2(_799, _800), vec2(_799, _800));
    float _3789 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _806 = sqrt(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))));
    vec4 _830 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _835 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _841 = ((_830.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _843 = (-0.0) - (cbMtdParam._m0[21u].x * ((_830.x * 0.5) + (-0.25)));
    float _844 = fract(_835);
    float _846 = fract(_835 + 0.5);
    vec4 _873 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_844 * _843) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_841 * _844) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _875 = _873.x;
    float _881 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_846 * _843) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_841 * _846) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _875) * abs((_844 * 2.0) + (-1.0))) + _875;
    float _887 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _891 = fract(abs(_887));
    float _900 = sin(cbMtdParam._m0[21u].z);
    float _901 = cos(cbMtdParam._m0[21u].z);
    float _902 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _903 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _933 = abs(cbMtdParam._m0[20u].w * (((_881 - (((_887 >= ((-0.0) - _887)) ? _891 : ((-0.0) - _891)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_903, (-0.0) - _900, _901 * _902) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_903, _901, _902 * _900) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _937 = (((_933 * cbMtdParam._m0[18u].y) - _881) * _933) + _881;
    float _3800 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _938 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    vec4 _950 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _965 = (cbMtdParam._m0[14u].x * _950.x) * cbMtdParam._m0[19u].x;
    float _966 = (cbMtdParam._m0[14u].y * _950.y) * cbMtdParam._m0[19u].x;
    float _967 = (cbMtdParam._m0[14u].z * _950.z) * cbMtdParam._m0[19u].x;
    float _977 = exp2(log2(_938) * cbMtdParam._m0[20u].x);
    float _990 = fma(_806, _227, fma(_800, _234, _799 * _220));
    float _993 = fma(_806, _228, fma(_800, _235, _799 * _221));
    float _996 = fma(_806, _229, fma(_800, _236, _799 * _222));
    float _1000 = inversesqrt(dot(vec3(_990, _993, _996), vec3(_990, _993, _996)));
    float _1001 = _1000 * _990;
    float _1002 = _1000 * _993;
    float _1003 = _1000 * _996;
    float _3811 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _1004 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _3833 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _3844 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _1023 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1027 = inversesqrt(dot(vec3(_290, _291, _292), vec3(_290, _291, _292)));
    float _1028 = _290 * _1027;
    float _1029 = _291 * _1027;
    float _1030 = _292 * _1027;
    vec4 _1035 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1037 = _1035.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1192 = sqrt(((_290 * _290) + (_291 * _291)) + (_292 * _292));
        float _1198 = (cbMatDynParam._m0[5u].x * _1192) + cbMatDynParam._m0[5u].y;
        float _3855 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1203 = (cbMatDynParam._m0[5u].z * _1192) + cbMatDynParam._m0[5u].w;
        float _3866 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) - _1199)) + _1199) < ((_1037 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1049 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1050 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1068 = fma(_1003, cbSceneParam._m0[5u].z, fma(_1002, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1001));
    float _1071 = fma(_1003, cbSceneParam._m0[6u].z, fma(_1002, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1001));
    float _1074 = fma(_1003, cbSceneParam._m0[7u].z, fma(_1002, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1001));
    uint _1087 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1088 = _1087 + 9u;
    uint _1089 = _1088 + uint(cbMatDynParam._m0[0u].w);
    float _1095 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_1089].x;
    float _1096 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_1089].y;
    float _1097 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * cbInstanceData._m0[_1089].z;
    float _3877 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    vec4 _1109 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1049, cbSceneParam._m0[86u].y * _1050));
    float _1112 = _1109.x * TEXCOORD_4;
    float _1113 = dot(vec3(_1001, _1002, _1003), vec3(_1028, _1029, _1030));
    float _1116 = _1113 * 2.0;
    float _1120 = (_1116 * _1001) - _1028;
    float _1121 = (_1116 * _1002) - _1029;
    float _1122 = (_1116 * _1003) - _1030;
    float _1126 = abs(dot(vec3(_1028, _1029, _1030), vec3(_1001, _1002, _1003)));
    float _3910 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1128 = sqrt(_1004);
    float _1141 = exp2((_1128 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1128 * 3.0));
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1509;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1236 = fma(_1181, cbModelParam._m0[26u].z, fma(_1177, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1173));
        float _1240 = fma(_1181, cbModelParam._m0[27u].z, fma(_1177, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1173));
        float _1244 = fma(_1181, cbModelParam._m0[28u].z, fma(_1177, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1173));
        float _1267 = _1173 + _1001;
        float _1268 = _1177 + _1002;
        float _1269 = _1181 + _1003;
        float _1279 = fma(_1269, cbModelParam._m0[26u].z, fma(_1268, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1267)) - _1236;
        float _1280 = fma(_1269, cbModelParam._m0[27u].z, fma(_1268, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1267)) - _1240;
        float _1281 = fma(_1269, cbModelParam._m0[28u].z, fma(_1268, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1267)) - _1244;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1236 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1240 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[34u].z) + ((((((_1244 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1337 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1303.x + (-0.5));
        float _1339 = _1337 * (_1303.y + (-0.5));
        float _1340 = _1337 * (_1303.z + (-0.5));
        float _1347 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1310.x + (-0.5));
        float _1349 = _1347 * (_1310.y + (-0.5));
        float _1350 = _1347 * (_1310.z + (-0.5));
        float _1357 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1317.x + (-0.5));
        float _1359 = _1357 * (_1317.y + (-0.5));
        float _1360 = _1357 * (_1317.z + (-0.5));
        float _1367 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1324.x + (-0.5));
        float _1369 = _1367 * (_1324.y + (-0.5));
        float _1370 = _1367 * (_1324.z + (-0.5));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = _1338 * 0.5;
        float _1375 = _1348 * 0.5;
        float _1376 = _1358 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1391 = (dot(vec3(_1001, _1002, _1003), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1401 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _3958 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1403 + 1.0))) + _1408) * _1371;
        float _1418 = _1339 * 0.5;
        float _1419 = _1349 * 0.5;
        float _1420 = _1359 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_1001, _1002, _1003), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3991 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1445 + 1.0))) + _1450) * _1372;
        float _1460 = _1340 * 0.5;
        float _1461 = _1350 * 0.5;
        float _1462 = _1360 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_1001, _1002, _1003), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4024 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1487 + 1.0))) + _1492) * _1373;
        _1509 = _1340;
        _1511 = _1339;
        _1512 = _1338;
        _1513 = _1350;
        _1514 = _1349;
        _1515 = _1348;
        _1516 = _1360;
        _1517 = _1359;
        _1518 = _1358;
        _1519 = _1373;
        _1520 = _1372;
        _1521 = _1371;
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1524 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1510;
        _1511 = _1510;
        _1512 = _1510;
        _1513 = _1510;
        _1514 = _1510;
        _1515 = _1510;
        _1516 = _1510;
        _1517 = _1510;
        _1518 = _1510;
        _1519 = _1510;
        _1520 = _1510;
        _1521 = _1510;
        _1522 = 0.0;
        _1523 = 0.0;
        _1524 = 0.0;
    }
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1552 = fma(_1181, cbModelParam._m0[30u].z, fma(_1177, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1173));
        float _1556 = fma(_1181, cbModelParam._m0[31u].z, fma(_1177, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1173));
        float _1560 = fma(_1181, cbModelParam._m0[32u].z, fma(_1177, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1173));
        float _1583 = _1173 + _1001;
        float _1584 = _1177 + _1002;
        float _1585 = _1181 + _1003;
        float _1595 = fma(_1585, cbModelParam._m0[30u].z, fma(_1584, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1583)) - _1552;
        float _1596 = fma(_1585, cbModelParam._m0[31u].z, fma(_1584, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1583)) - _1556;
        float _1597 = fma(_1585, cbModelParam._m0[32u].z, fma(_1584, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1583)) - _1560;
        float _1601 = inversesqrt(dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597)));
        float _1614 = ((_1601 * _1595) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1552 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1615 = ((_1601 * _1596) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1556 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1616 = ((_1601 * _1597) / cbModelParam._m0[35u].z) + ((((((_1560 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        float _1651 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1618.x + (-0.5));
        float _1653 = _1651 * (_1618.y + (-0.5));
        float _1654 = _1651 * (_1618.z + (-0.5));
        float _1661 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1625.x + (-0.5));
        float _1663 = _1661 * (_1625.y + (-0.5));
        float _1664 = _1661 * (_1625.z + (-0.5));
        float _1671 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1632.x + (-0.5));
        float _1673 = _1671 * (_1632.y + (-0.5));
        float _1674 = _1671 * (_1632.z + (-0.5));
        float _1681 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1639.x + (-0.5));
        float _1683 = _1681 * (_1639.y + (-0.5));
        float _1684 = _1681 * (_1639.z + (-0.5));
        float _1685 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1686 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1687 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1688 = _1652 * 0.5;
        float _1689 = _1662 * 0.5;
        float _1690 = _1672 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_1001, _1002, _1003), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1685 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4087 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1715 + 1.0))) + _1720) * _1685;
        float _1730 = _1653 * 0.5;
        float _1731 = _1663 * 0.5;
        float _1732 = _1673 * 0.5;
        float _1733 = dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732));
        float _1738 = (_1733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1733);
        float _1746 = (dot(vec3(_1001, _1002, _1003), vec3(_1738 * _1730, _1738 * _1731, _1738 * _1732)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1755 = sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732)) / (_1686 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1757 = _1756 * 2.0;
        float _1761 = (1.0 - _1756) / (_1756 + 1.0);
        float _4120 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1771 = ((((1.0 - _1762) * (_1757 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1757 + 1.0))) + _1762) * _1686;
        float _1772 = _1654 * 0.5;
        float _1773 = _1664 * 0.5;
        float _1774 = _1674 * 0.5;
        float _1775 = dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774));
        float _1780 = (_1775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1775);
        float _1788 = (dot(vec3(_1001, _1002, _1003), vec3(_1780 * _1772, _1780 * _1773, _1780 * _1774)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1797 = sqrt(((_1773 * _1773) + (_1772 * _1772)) + (_1774 * _1774)) / (_1687 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1799 = _1798 * 2.0;
        float _1803 = (1.0 - _1798) / (_1798 + 1.0);
        float _4153 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1813 = ((((1.0 - _1804) * (_1799 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1799 + 1.0))) + _1804) * _1687;
        _1821 = _1654;
        _1822 = _1653;
        _1823 = _1652;
        _1824 = _1664;
        _1825 = _1663;
        _1826 = _1662;
        _1827 = _1674;
        _1828 = _1673;
        _1829 = _1672;
        _1830 = _1687;
        _1831 = _1686;
        _1832 = _1685;
        _1833 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
        _1834 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)));
        _1835 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)));
    }
    else
    {
        _1821 = _1510;
        _1822 = _1510;
        _1823 = _1510;
        _1824 = _1510;
        _1825 = _1510;
        _1826 = _1510;
        _1827 = _1510;
        _1828 = _1510;
        _1829 = _1510;
        _1830 = _1510;
        _1831 = _1510;
        _1832 = _1510;
        _1833 = 0.0;
        _1834 = 0.0;
        _1835 = 0.0;
    }
    float _1845 = (cbModelParam._m0[1u].x * (_1833 - _1522)) + _1522;
    float _1846 = (cbModelParam._m0[1u].x * (_1834 - _1523)) + _1523;
    float _1847 = (cbModelParam._m0[1u].x * (_1835 - _1524)) + _1524;
    float _1868 = fma(_1847, cbSceneParam._m0[89u].z, fma(_1846, cbSceneParam._m0[89u].y, _1845 * cbSceneParam._m0[89u].x));
    float _1871 = fma(_1847, cbSceneParam._m0[90u].z, fma(_1846, cbSceneParam._m0[90u].y, _1845 * cbSceneParam._m0[90u].x));
    float _1874 = fma(_1847, cbSceneParam._m0[91u].z, fma(_1846, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1845));
    float _1889 = _1120 * 0.5;
    float _1890 = _1121 * 0.5;
    float _1891 = _1122 * 0.5;
    float _1892 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1823, _1826, _1829, _1832));
    float _1895 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1822, _1825, _1828, _1831));
    float _1898 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1821, _1824, _1827, _1830));
    float _1932;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1905 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1509, _1513, _1516, _1519));
        float _1909 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1913 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1512, _1515, _1518, _1521));
        float _1920 = dot(vec4(cbModelParam._m0[39u]), vec4(_1889, _1890, _1891, 1.0));
        _1932 = dot(vec3(isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1920) ? 0.0 : (isnan(0.0) ? _1920 : max(0.0, _1920))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1932 = 1.0;
    }
    float _1943;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1934 = dot(vec4(cbModelParam._m0[40u]), vec4(_1889, _1890, _1891, 1.0));
        _1943 = dot(vec3(isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1934) ? 0.0 : (isnan(0.0) ? _1934 : max(0.0, _1934))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1943 = 1.0;
    }
    float _1947 = (_1943 * cbModelParam._m0[1u].x) + (_1932 * (1.0 - cbModelParam._m0[1u].x));
    float _1957 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1004);
    float _1958 = isnan(_1957) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1957 : min(cbModelParam._m0[25u].z, _1957));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2006 = fma(_1181, cbModelParam._m0[13u].z, fma(_1177, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1173)) + cbModelParam._m0[13u].w;
        float _2010 = fma(_1181, cbModelParam._m0[14u].z, fma(_1177, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1173)) + cbModelParam._m0[14u].w;
        float _2014 = fma(_1181, cbModelParam._m0[15u].z, fma(_1177, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1173)) + cbModelParam._m0[15u].w;
        float _2017 = fma(_1122, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120));
        float _2020 = fma(_1122, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120));
        float _2023 = fma(_1122, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120));
        float _2051;
        if (_2017 > 0.0)
        {
            _2051 = abs((1.0 - _2006) / _2017);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_2006 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _2051 = frontier_phi_57_55_ladder;
        }
        float _2420;
        if (_2020 > 0.0)
        {
            _2420 = abs((1.0 - _2010) / _2020);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_2010 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2420 = frontier_phi_66_62_ladder;
        }
        float _2762;
        if (_2023 > 0.0)
        {
            _2762 = abs((1.0 - _2014) / _2023);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_2014 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2762 = frontier_phi_80_73_ladder;
        }
        float _2764 = isnan(_2420) ? _2051 : (isnan(_2051) ? _2420 : min(_2051, _2420));
        float _2765 = isnan(_2762) ? _2764 : (isnan(_2764) ? _2762 : min(_2764, _2762));
        float _2769 = (_2765 * _2017) + _2006;
        float _2770 = (_2765 * _2020) + _2010;
        float _2771 = (_2765 * _2023) + _2014;
        float _2772 = _2765 * 9.9999997473787516355514526367188e-05;
        float _2773 = (-1.0) - _2772;
        float _2775 = _2772 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2771 > _2775) || ((_2771 < _2773) || ((_2770 > _2775) || ((_2770 < _2773) || ((_2769 < _2773) || (_2769 > _2775))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2913 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2771, cbModelParam._m0[9u].z, fma(_2770, cbModelParam._m0[9u].y, _2769 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2771, cbModelParam._m0[10u].z, fma(_2770, cbModelParam._m0[10u].y, _2769 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2771, cbModelParam._m0[11u].z, fma(_2770, cbModelParam._m0[11u].y, _2769 * cbModelParam._m0[11u].x))), _1958);
            frontier_phi_56_80_ladder = _2913.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2913.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2913.x * cbModelParam._m0[1u].y;
        }
        _2039 = frontier_phi_56_80_ladder_2;
        _2041 = frontier_phi_56_80_ladder_1;
        _2043 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _2027 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1120, _1121, _1122), _1958);
        _2039 = _2027.x * cbModelParam._m0[1u].y;
        _2041 = _2027.y * cbModelParam._m0[1u].y;
        _2043 = _2027.z * cbModelParam._m0[1u].y;
    }
    float _2047 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1004);
    float _2048 = isnan(_2047) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2047 : min(cbModelParam._m0[25u].w, _2047));
    float _2136;
    float _2138;
    float _2140;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2100 = fma(_1181, cbModelParam._m0[21u].z, fma(_1177, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1173)) + cbModelParam._m0[21u].w;
        float _2104 = fma(_1181, cbModelParam._m0[22u].z, fma(_1177, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1173)) + cbModelParam._m0[22u].w;
        float _2108 = fma(_1181, cbModelParam._m0[23u].z, fma(_1177, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1173)) + cbModelParam._m0[23u].w;
        float _2111 = fma(_1122, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120));
        float _2114 = fma(_1122, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120));
        float _2117 = fma(_1122, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120));
        float _2425;
        if (_2111 > 0.0)
        {
            _2425 = abs((1.0 - _2100) / _2111);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_2100 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2425 = frontier_phi_68_64_ladder;
        }
        float _2788;
        if (_2114 > 0.0)
        {
            _2788 = abs((1.0 - _2104) / _2114);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_2104 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2788 = frontier_phi_82_75_ladder;
        }
        float _2978;
        if (_2117 > 0.0)
        {
            _2978 = abs((1.0 - _2108) / _2117);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_2108 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2978 = frontier_phi_100_93_ladder;
        }
        float _2980 = isnan(_2788) ? _2425 : (isnan(_2425) ? _2788 : min(_2425, _2788));
        float _2981 = isnan(_2978) ? _2980 : (isnan(_2980) ? _2978 : min(_2980, _2978));
        float _2985 = (_2981 * _2111) + _2100;
        float _2986 = (_2981 * _2114) + _2104;
        float _2987 = (_2981 * _2117) + _2108;
        float _2988 = _2981 * 9.9999997473787516355514526367188e-05;
        float _2989 = (-1.0) - _2988;
        float _2991 = _2988 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2987 > _2991) || ((_2987 < _2989) || ((_2986 > _2991) || ((_2986 < _2989) || ((_2985 < _2989) || (_2985 > _2991))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3229 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2987, cbModelParam._m0[17u].z, fma(_2986, cbModelParam._m0[17u].y, _2985 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2987, cbModelParam._m0[18u].z, fma(_2986, cbModelParam._m0[18u].y, _2985 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2987, cbModelParam._m0[19u].z, fma(_2986, cbModelParam._m0[19u].y, _2985 * cbModelParam._m0[19u].x))), _2048);
            frontier_phi_65_100_ladder = _3229.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3229.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3229.z * cbModelParam._m0[1u].z;
        }
        _2136 = frontier_phi_65_100_ladder_1;
        _2138 = frontier_phi_65_100_ladder;
        _2140 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _2120 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1120, _1121, _1122), _2048);
        _2136 = _2120.x * cbModelParam._m0[1u].z;
        _2138 = _2120.y * cbModelParam._m0[1u].z;
        _2140 = _2120.z * cbModelParam._m0[1u].z;
    }
    float _2152 = ((((1.0 - _1141) * ((_1128 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1141 * _1128)) * _1112;
    float _2153 = _2152 * ((cbModelParam._m0[1u].w * (_2136 - _2039)) + _2039);
    float _2154 = _2152 * ((cbModelParam._m0[1u].w * (_2138 - _2041)) + _2041);
    float _2155 = _2152 * ((cbModelParam._m0[1u].w * (_2140 - _2043)) + _2043);
    float _2158 = fma(_2155, cbSceneParam._m0[89u].z, fma(_2154, cbSceneParam._m0[89u].y, _2153 * cbSceneParam._m0[89u].x));
    float _2161 = fma(_2155, cbSceneParam._m0[90u].z, fma(_2154, cbSceneParam._m0[90u].y, _2153 * cbSceneParam._m0[90u].x));
    float _2164 = fma(_2155, cbSceneParam._m0[91u].z, fma(_2154, cbSceneParam._m0[91u].y, _2153 * cbSceneParam._m0[91u].x));
    vec4 _2172 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1049, _1050));
    float _2174 = _2172.w;
    float _2186 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2174);
    float _2187 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2174);
    float _2188 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2174);
    uvec4 _2192 = floatBitsToUint(cbInstanceData._m0[_1087 + 5u]);
    uint _2194 = _2192.x * 14u;
    uint _2195 = _2194 + 13u;
    float _2200 = _1112 + (-1.0);
    float _2203 = (cbLight._m0[_2195].x * _2200) + 1.0;
    float _2204 = (cbLight._m0[_2195].y * _2200) + 1.0;
    uint _2205 = _2194 + 5u;
    float _2211 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2215 = _2194 + 4u;
    float _2224 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2228 = _2194 | 1u;
    float _2239 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_1001, _1002, _1003));
    float _2242 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_1001, _1002, _1003));
    float _4289 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _4300 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2247 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2249 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
    float _2256 = ((cbLight._m0[_2205].x * _2211) * _2249) + (((cbLight._m0[_2215].x * _2186) * _2224) * _2247);
    float _2257 = ((_2211 * cbLight._m0[_2205].y) * _2249) + (((cbLight._m0[_2215].y * _2187) * _2224) * _2247);
    float _2258 = ((_2211 * cbLight._m0[_2205].z) * _2249) + (((cbLight._m0[_2215].z * _2188) * _2224) * _2247);
    uint _2260 = _2194 + 8u;
    float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2194].w)) * _1004) * 0.949999988079071044921875);
    float _2274 = _2273 * _2273;
    float _2275 = cbLight._m0[_2194].x + _1028;
    float _2276 = cbLight._m0[_2194].y + _1029;
    float _2277 = cbLight._m0[_2194].z + _1030;
    float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
    float _2282 = _2281 * _2275;
    float _2283 = _2281 * _2276;
    float _2284 = _2281 * _2277;
    float _2285 = dot(vec3(_1001, _1002, _1003), vec3(cbLight._m0[_2194].xyz));
    float _4311 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _2289 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2290 = dot(vec3(_1001, _1002, _1003), vec3(_2282, _2283, _2284));
    float _4333 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2294 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2282, _2283, _2284));
    float _4344 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = _2274 * _2274;
    float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
    float _2313 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2314 = 1.0 - _2274;
    float _2325 = (0.5 / (((_2289 * ((_2288 * _2314) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2314) + _2274) * _2288))) * _2288;
    float _4355 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2327 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
    uint _2341 = _2194 + 9u;
    float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _1004) * 0.949999988079071044921875);
    float _2353 = _2352 * _2352;
    float _2354 = cbLight._m0[_2228].x + _1028;
    float _2355 = cbLight._m0[_2228].y + _1029;
    float _2356 = cbLight._m0[_2228].z + _1030;
    float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
    float _2361 = _2360 * _2354;
    float _2362 = _2360 * _2355;
    float _2363 = _2360 * _2356;
    float _2364 = dot(vec3(_1001, _1002, _1003), vec3(cbLight._m0[_2228].xyz));
    float _4366 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2368 = dot(vec3(_1001, _1002, _1003), vec3(_2361, _2362, _2363));
    float _4377 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2372 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2361, _2362, _2363));
    float _4388 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2376 = _2353 * _2353;
    float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
    float _2389 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2390 = 1.0 - _2353;
    float _2400 = (0.5 / (((_2289 * ((_2367 * _2390) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2390) + _2353) * _2367))) * _2367;
    float _4399 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
    float _2412 = (((_2389 * cbLight._m0[_2341].x) * _2402) * _2211) + ((((cbLight._m0[_2260].x * _2186) * _2313) * _2327) * _2224);
    float _2413 = (((_2389 * cbLight._m0[_2341].y) * _2402) * _2211) + ((((cbLight._m0[_2260].y * _2187) * _2313) * _2327) * _2224);
    float _2414 = (((_2389 * cbLight._m0[_2341].z) * _2402) * _2211) + ((((cbLight._m0[_2260].z * _2188) * _2313) * _2327) * _2224);
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    if (_2192.y == 0u)
    {
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2469;
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2469;
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2469;
        uvec4 _2484 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2485 = _2484.x;
        uint _2496 = uint((float(_2484.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1050) / _2485))) + floor(float(uint(cbSceneParam._m0[85u].x * _1049) / _2485)));
        float _2506 = (log2(_2472 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2507 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        uint _2510 = uint(isnan(14.0) ? _2507 : (isnan(_2507) ? 14.0 : min(_2507, 14.0)));
        uvec4 _2515 = texelFetch(g_lightClusterGridBuffer, int(((_2510 << 2u) + (_2496 << 6u)) >> 2u));
        uint _2516 = _2515.x;
        uint _2517 = _2484.z;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        if (((((1u << ((_2517 >> 4u) & 15u)) + 4294967295u) & _2516) == 0u) || ((_2517 & 240u) == 0u))
        {
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
        }
        else
        {
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            uint _2831 = 0u;
            uint _2840;
            bool _2841;
            for (;;)
            {
                _2840 = texelFetch(g_lightClassification, int((((_2510 << 5u) + (_2496 << 9u)) + (_2831 << 2u)) >> 2u)).x;
                _2841 = _2840 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2841)
                {
                    frontier_phi_95_pred = _2826;
                    frontier_phi_95_pred_1 = _2825;
                    frontier_phi_95_pred_2 = _2827;
                    frontier_phi_95_pred_3 = _2830;
                    frontier_phi_95_pred_4 = _2829;
                    frontier_phi_95_pred_5 = _2828;
                }
                else
                {
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    uint _3027;
                    _3021 = _2825;
                    _3022 = _2826;
                    _3023 = _2827;
                    _3024 = _2828;
                    _3025 = _2829;
                    _3026 = _2830;
                    _3027 = _2840;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    for (;;)
                    {
                        uint _3031 = uint(findLSB(_3027)) + (_2831 << 5u);
                        uint _3028 = (_3027 + 4294967295u) & _3027;
                        uint _3033 = _3031 * 48u;
                        vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 3u)).x));
                        uint _3053 = (_3031 * 48u) + 4u;
                        vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 3u)).x));
                        uint _3072 = (_3031 * 48u) + 8u;
                        vec3 _3083 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x));
                        float _3087 = _3047.x - _2470;
                        float _3088 = _3047.y - _2471;
                        float _3089 = _3047.z - _2472;
                        float _3090 = dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089));
                        float _3093 = inversesqrt(_3090);
                        float _3094 = _3093 * _3087;
                        float _3095 = _3093 * _3088;
                        float _3096 = _3093 * _3089;
                        float _3097 = dot(vec3(_1068, _1071, _1074), vec3(_3094, _3095, _3096));
                        float _3102 = 1.0 - (_3090 * _3047.w);
                        float _4420 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3103 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3104 = sqrt(_3090) * _3066.w;
                        float _3107 = 1.39999997615814208984375 / (_3104 + 1.39999997615814208984375);
                        float _3108 = _3107 * _3107;
                        float _3111 = ((1.0 - _3108) * _3097) + _3108;
                        float _3114 = _3104 * _3104;
                        float _3118 = ((isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0))) * _3103) / ((_3114 * 0.699999988079071044921875) + 1.0);
                        float _3122 = (-0.0) - _2470;
                        float _3123 = (-0.0) - _2471;
                        float _3124 = (-0.0) - _2472;
                        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                        float _3129 = _3128 * _3122;
                        float _3130 = _3128 * _3123;
                        float _3131 = _3128 * _3124;
                        float _3139 = exp2(log2(1.0 / ((_3114 * 3.5) + 5.0)) * 0.25);
                        float _3140 = 1.0 - _1128;
                        float _3147 = sqrt(1.0 - ((1.0 - (_3140 * _3140)) * (1.0 - (_3139 * _3139))));
                        float _3148 = _3147 * _3147;
                        float _3149 = _3148 * _3148;
                        float _3150 = _3129 + _3094;
                        float _3151 = _3130 + _3095;
                        float _3152 = _3131 + _3096;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3160 = dot(vec3(_1068, _1071, _1074), vec3(_3129, _3130, _3131));
                        float _4436 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3163 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3164 = dot(vec3(_1068, _1071, _1074), vec3(_3156 * _3150, _3156 * _3151, _3156 * _3152));
                        float _4447 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3167 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3171 = ((_3167 * _3167) * (_3149 + (-1.0))) + 1.0;
                        float _3172 = _3107 * _3148;
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3097) + _3173;
                        float _4458 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3177 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3178 = 1.0 - _3148;
                        float _3188 = (0.5 / (((_3177 * ((_3163 * _3178) + _3148)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3148) * _3163))) * _3177;
                        float _4469 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3199 = (((_3149 * 3.1415927410125732421875) * (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) / ((_3171 * _3171) * ((_3114 * 2.1991131305694580078125) + 3.141590118408203125))) * _3103;
                        _2925 = (_3118 * _3066.x) + _3024;
                        _2926 = (_3118 * _3066.y) + _3025;
                        _2927 = (_3118 * _3066.z) + _3026;
                        _2922 = (_3199 * _3083.x) + _3021;
                        _2923 = (_3199 * _3083.y) + _3022;
                        _2924 = (_3199 * _3083.z) + _3023;
                        if (_3028 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3021 = _2922;
                            _3022 = _2923;
                            _3023 = _2924;
                            _3024 = _2925;
                            _3025 = _2926;
                            _3026 = _2927;
                            _3027 = _3028;
                        }
                    }
                    frontier_phi_95_pred = _2923;
                    frontier_phi_95_pred_1 = _2922;
                    frontier_phi_95_pred_2 = _2924;
                    frontier_phi_95_pred_3 = _2927;
                    frontier_phi_95_pred_4 = _2926;
                    frontier_phi_95_pred_5 = _2925;
                }
                _2636 = frontier_phi_95_pred;
                _2634 = frontier_phi_95_pred_1;
                _2638 = frontier_phi_95_pred_2;
                _2644 = frontier_phi_95_pred_3;
                _2642 = frontier_phi_95_pred_4;
                _2640 = frontier_phi_95_pred_5;
                uint _2832 = _2831 + 1u;
                if (_2832 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2825 = _2634;
                    _2826 = _2636;
                    _2827 = _2638;
                    _2828 = _2640;
                    _2829 = _2642;
                    _2830 = _2644;
                    _2831 = _2832;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
        }
        uvec4 _2647 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2648 = _2647.z;
        uint _2650 = (_2648 >> 8u) & 15u;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((4294967295u << _2650) & _2516) == 0u)
        {
            _2793 = _2633;
            _2795 = _2635;
            _2797 = _2637;
            _2799 = _2639;
            _2801 = _2641;
            _2803 = _2643;
        }
        else
        {
            float _2818 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
            float _2819 = _2818 * _2470;
            float _2820 = _2818 * _2471;
            float _2821 = _2818 * _2472;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2650 < ((_2648 >> 12u) & 15u))
            {
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _3004 = _2633;
                float _3005 = _2635;
                float _3006 = _2637;
                float _3007 = _2639;
                float _3008 = _2641;
                float _3009 = _2643;
                uint _3010 = _2650;
                uint _3019;
                bool _3020;
                for (;;)
                {
                    _3019 = texelFetch(g_lightClassification, int((((_2510 << 5u) + (_2496 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                    _3020 = _3019 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_3020)
                    {
                        frontier_phi_109_pred = _3005;
                        frontier_phi_109_pred_1 = _3004;
                        frontier_phi_109_pred_2 = _3009;
                        frontier_phi_109_pred_3 = _3008;
                        frontier_phi_109_pred_4 = _3007;
                        frontier_phi_109_pred_5 = _3006;
                    }
                    else
                    {
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3247 = _3004;
                        float _3248 = _3005;
                        float _3249 = _3006;
                        float _3250 = _3007;
                        float _3251 = _3008;
                        float _3252 = _3009;
                        uint _3253 = _3019;
                        uint _3254;
                        vec4 _3279;
                        float _3280;
                        vec4 _3295;
                        vec3 _3307;
                        vec4 _3323;
                        vec4 _3338;
                        float _3384;
                        bool _3385;
                        for (;;)
                        {
                            uint _3264 = ((_3010 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3253));
                            _3254 = (_3253 + 4294967295u) & _3253;
                            uint _3266 = _3264 * 40u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3280 = _3279.w;
                            uint _3282 = (_3264 * 40u) + 4u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3264 * 40u) + 8u;
                            _3307 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x));
                            uint _3310 = (_3264 * 40u) + 16u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3325 = (_3264 * 40u) + 20u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3264 * 40u) + 24u;
                            vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3359 = (_3264 * 40u) + 28u;
                            vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3384 = fma(_2472, _3372.z, fma(_2471, _3372.y, _3372.x * _2470)) + _3372.w;
                            _3385 = !((fma(_2472, _3353.z, fma(_2471, _3353.y, _3353.x * _2470)) + _3353.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3385)
                            {
                                float _3412 = _3279.x - _2470;
                                float _3413 = _3279.y - _2471;
                                float _3414 = _3279.z - _2472;
                                float _3415 = dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414));
                                float _3418 = inversesqrt(_3415);
                                float _3419 = _3418 * _3412;
                                float _3420 = _3418 * _3413;
                                float _3421 = _3418 * _3414;
                                float _3425 = 1.0 - (_3415 / (_3280 * _3280));
                                float _4480 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3430 = sqrt(_3415) * _3295.w;
                                float _3432 = 1.39999997615814208984375 / (_3430 + 1.39999997615814208984375);
                                float _3433 = _3432 * _3432;
                                float _3436 = ((1.0 - _3433) * dot(vec3(_3419, _3420, _3421), vec3(_1068, _1071, _1074))) + _3433;
                                float _3439 = _3430 * _3430;
                                float _3443 = (fma(_2472, _3323.z, fma(_2471, _3323.y, _3323.x * _2470)) + _3323.w) / _3384;
                                float _3444 = (fma(_2472, _3338.z, fma(_2471, _3338.y, _3338.x * _2470)) + _3338.w) / _3384;
                                float _3448 = 1.0 - dot(vec2(_3443, _3444), vec2(_3443, _3444));
                                float _4496 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3450 = _3449 * (((isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0))) * _3426) / ((_3439 * 0.699999988079071044921875) + 1.0));
                                float _3462 = exp2(log2(1.0 / ((_3439 * 3.5) + 5.0)) * 0.25);
                                float _3463 = 1.0 - _1128;
                                float _3470 = sqrt(1.0 - ((1.0 - (_3463 * _3463)) * (1.0 - (_3462 * _3462))));
                                float _3471 = _3470 * _3470;
                                float _3472 = _3471 * _3471;
                                float _3473 = _3419 - _2819;
                                float _3474 = _3420 - _2820;
                                float _3475 = _3421 - _2821;
                                float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                                float _3483 = dot(vec3(_1068, _1071, _1074), vec3((-0.0) - _2819, (-0.0) - _2820, (-0.0) - _2821));
                                float _4507 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3487 = dot(vec3(_1068, _1071, _1074), vec3(_3479 * _3473, _3479 * _3474, _3479 * _3475));
                                float _4518 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3494 = ((_3490 * _3490) * (_3472 + (-1.0))) + 1.0;
                                float _3495 = _3432 * _3471;
                                float _3496 = _3495 * _3495;
                                float _3502 = ((1.0 - _3496) * dot(vec3(_1068, _1071, _1074), vec3(_3419, _3420, _3421))) + _3496;
                                float _4529 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3504 = 1.0 - _3471;
                                float _3514 = (0.5 / (((_3503 * ((_3486 * _3504) + _3471)) + 9.9999999392252902907785028219223e-09) + (((_3503 * _3504) + _3471) * _3486))) * _3503;
                                float _4540 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3524 = (_3449 * _3426) * (((_3472 * 3.1415927410125732421875) * (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) / ((_3494 * _3494) * ((_3439 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3450 * _3295.y;
                                frontier_phi_115_pred_1 = _3450 * _3295.x;
                                frontier_phi_115_pred_2 = _3524 * _3307.z;
                                frontier_phi_115_pred_3 = _3524 * _3307.y;
                                frontier_phi_115_pred_4 = _3524 * _3307.x;
                                frontier_phi_115_pred_5 = _3450 * _3295.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3532 = frontier_phi_115_pred;
                            _3531 = frontier_phi_115_pred_1;
                            _3530 = frontier_phi_115_pred_2;
                            _3529 = frontier_phi_115_pred_3;
                            _3528 = frontier_phi_115_pred_4;
                            _3533 = frontier_phi_115_pred_5;
                            _3237 = _3531 + _3250;
                            _3238 = _3532 + _3251;
                            _3239 = _3533 + _3252;
                            _3234 = _3528 + _3247;
                            _3235 = _3529 + _3248;
                            _3236 = _3530 + _3249;
                            if (_3254 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3254;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3235;
                        frontier_phi_109_pred_1 = _3234;
                        frontier_phi_109_pred_2 = _3239;
                        frontier_phi_109_pred_3 = _3238;
                        frontier_phi_109_pred_4 = _3237;
                        frontier_phi_109_pred_5 = _3236;
                    }
                    _2796 = frontier_phi_109_pred;
                    _2794 = frontier_phi_109_pred_1;
                    _2804 = frontier_phi_109_pred_2;
                    _2802 = frontier_phi_109_pred_3;
                    _2800 = frontier_phi_109_pred_4;
                    _2798 = frontier_phi_109_pred_5;
                    uint _3011 = _3010 + 1u;
                    if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3004 = _2794;
                        _3005 = _2796;
                        _3006 = _2798;
                        _3007 = _2800;
                        _3008 = _2802;
                        _3009 = _2804;
                        _3010 = _3011;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2794;
                frontier_phi_84_85_ladder_1 = _2798;
                frontier_phi_84_85_ladder_2 = _2804;
                frontier_phi_84_85_ladder_3 = _2802;
                frontier_phi_84_85_ladder_4 = _2800;
                frontier_phi_84_85_ladder_5 = _2796;
            }
            else
            {
                frontier_phi_84_85_ladder = _2633;
                frontier_phi_84_85_ladder_1 = _2637;
                frontier_phi_84_85_ladder_2 = _2643;
                frontier_phi_84_85_ladder_3 = _2641;
                frontier_phi_84_85_ladder_4 = _2639;
                frontier_phi_84_85_ladder_5 = _2635;
            }
            _2793 = frontier_phi_84_85_ladder;
            _2795 = frontier_phi_84_85_ladder_5;
            _2797 = frontier_phi_84_85_ladder_1;
            _2799 = frontier_phi_84_85_ladder_4;
            _2801 = frontier_phi_84_85_ladder_3;
            _2803 = frontier_phi_84_85_ladder_2;
        }
        float _2808 = isnan(1.0) ? _1112 : (isnan(_1112) ? 1.0 : min(_1112, 1.0));
        _2529 = (_2808 * _2799) + _2256;
        _2531 = (_2808 * _2801) + _2257;
        _2533 = (_2808 * _2803) + _2258;
        _2535 = ((_2793 * 0.039999999105930328369140625) * _2808) + _2412;
        _2537 = ((_2795 * 0.039999999105930328369140625) * _2808) + _2413;
        _2539 = ((_2797 * 0.039999999105930328369140625) * _2808) + _2414;
    }
    else
    {
        _2529 = _2256;
        _2531 = _2257;
        _2533 = _2258;
        _2535 = _2412;
        _2537 = _2413;
        _2539 = _2414;
    }
    uint _2545 = _1088 + uint(cbMatDynParam._m0[0u].w);
    float _2551 = ((_977 * (_965 - (_965 * _938))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2545].x;
    float _2552 = ((_977 * (_966 - (_966 * _938))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2545].y;
    float _2553 = ((_977 * (_967 - (_967 * _938))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2545].z;
    float _4556 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _4567 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _4578 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _2570 = (((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2529 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1112))) + ((_2535 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1947)) * cbPerFrame._m0[3u].x)) + _2551;
    float _2572 = (_2552 + ((_2537 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1947)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2531 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1112)));
    float _2574 = (_2553 + ((_2539 + ((isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))) * _1947)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2533 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1112)));
    float _2575 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2576 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2577 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2583 = cbMtdParam._m0[2u].x * _2551;
    float _2584 = cbMtdParam._m0[2u].y * _2552;
    float _2585 = cbMtdParam._m0[2u].z * _2553;
    float _4604 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2587 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    uint _2588 = _1087 + 6u;
    float _2596 = _1049 / cbSceneParam._m0[86u].x;
    float _2597 = _1050 / cbSceneParam._m0[86u].y;
    vec4 _2611 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, (log2((isnan(cbSceneParam._m0[77u].w) ? _1023 : (isnan(_1023) ? cbSceneParam._m0[77u].w : min(_1023, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2613 = _2611.x;
    float _2614 = _2611.y;
    float _2615 = _2611.z;
    float _2616 = _2611.w;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    if (_1023 > cbSceneParam._m0[78u].w)
    {
        float _2658 = isnan(_1023) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1023 : min(cbSceneParam._m0[80u].w, _1023));
        float _2659 = _2658 / _1023;
        float _2670 = _2659 * _290;
        float _2671 = _291 * _2659;
        float _2672 = (-0.0) - _2671;
        float _2673 = _2659 * _292;
        float _2675 = (cbSceneParam._m0[77u].w * _2672) / _2658;
        float _2676 = _2675 + cbSceneParam._m0[79u].w;
        float _2677 = cbSceneParam._m0[79u].w - _2671;
        float _2683 = sqrt(((_2670 * _2670) + (_2671 * _2671)) + (_2673 * _2673));
        float _2686 = (1.0 - (cbSceneParam._m0[77u].w / _2658)) * _2683;
        float _2692 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2694 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2935;
        if (abs((_2672 - _2675) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2935 = ((((_2676 > 0.0) ? exp2(_2692 * _2676) : (2.0 - exp2(_2694 * _2676))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2686;
        }
        else
        {
            float _2854 = 1.0 / cbSceneParam._m0[80u].x;
            float _2855 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : max(_2676, _2677));
            float _2856 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : min(_2676, _2677));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            _2935 = ((abs(_2683 / _2672) * cbSceneParam._m0[80u].y) * ((((_2865 - _2866) * 2.0) - ((exp2(_2692 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0)))) - exp2(_2692 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0))))) * _2854)) - ((exp2(_2694 * _2865) - exp2(_2694 * _2866)) * _2854))) + (_2686 * cbSceneParam._m0[80u].z);
        }
        vec4 _2937 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, 1.0), 0.0);
        float _2946 = exp2((_2935 * (-1.44269502162933349609375)) * (1.0 - _2937.w));
        float _2947 = log2(_2946);
        float _2963 = log2(_2616);
        _2696 = (exp2(_2963 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].x)) * _2937.x) / cbSceneParam._m0[78u].x)) + _2613;
        _2698 = (exp2(_2963 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].y)) * _2937.y) / cbSceneParam._m0[78u].y)) + _2614;
        _2700 = (exp2(_2963 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].z)) * _2937.z) / cbSceneParam._m0[78u].z)) + _2615;
        _2702 = _2946 * _2616;
    }
    else
    {
        _2696 = _2613;
        _2698 = _2614;
        _2700 = _2615;
        _2702 = _2616;
    }
    bool _2973;
    vec4 _2711;
    vec4 _2733;
    float _2735;
    float _2739;
    float _2740;
    float _2741;
    float _2744;
    float _2747;
    float _2750;
    float _2751;
    bool _2761;
    for (;;)
    {
        _2711 = cbMatDynParam._m0[0u];
        float _2713 = roundEven(_2711.y);
        bool _2714 = _2713 == 3.0;
        float _2715 = log2(_2702);
        float _2719 = exp2(_2715 * cbSceneParam._m0[78u].x);
        float _2720 = exp2(_2715 * cbSceneParam._m0[78u].y);
        float _2721 = exp2(_2715 * cbSceneParam._m0[78u].z);
        float _2722 = _2719 * _2575;
        float _2723 = _2720 * _2576;
        float _2724 = _2721 * _2577;
        float _2731 = _1037 + (-0.5);
        _2733 = cbMtdParam._m0[1u];
        _2735 = _2733.y * _2731;
        float _2738 = (_2713 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2739 = _2738 * (_2714 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2696)));
        _2740 = _2738 * (_2714 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2698)));
        _2741 = _2738 * (_2714 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2700)));
        _2744 = ((_2583 * _2587) * _2719) * _2738;
        _2747 = ((_2584 * _2587) * _2720) * _2738;
        _2750 = ((_2585 * _2587) * _2721) * _2738;
        _2751 = _2731 * 0.999000012874603271484375;
        _2761 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2761)
        {
            if ((cbInstanceData._m0[_1087 + 7u].x + _2751) < 0.5)
            {
                _2973 = true;
                break;
            }
        }
        uint _2889 = _1088 + uint(_2711.w);
        if ((cbInstanceData._m0[_2889].w < 1.0) && ((cbInstanceData._m0[_2889].w + _2751) < 0.5))
        {
            _2973 = true;
            break;
        }
        if ((_2735 + 1.0) < _2733.x)
        {
            _2973 = true;
            break;
        }
        _2973 = false;
        break;
    }
    float _3204;
    if (_2973)
    {
        discard_state = true;
        _3204 = 0.0;
    }
    else
    {
        _3204 = cbInstanceData._m0[_2588].w;
    }
    SV_Target.x = _2739;
    SV_Target.y = _2740;
    SV_Target.z = _2741;
    SV_Target.w = _3204;
    SV_Target_1.x = _2744;
    SV_Target_1.y = _2747;
    SV_Target_1.z = _2750;
    SV_Target_1.w = cbInstanceData._m0[_2588].w;
    discard_exit();
}


