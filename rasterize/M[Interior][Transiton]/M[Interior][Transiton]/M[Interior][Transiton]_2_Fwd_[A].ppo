#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1037;
uint _2226;
uint _2227;
uint _2228;
uint _2471;
uint _2472;
uint _2473;
float _2720;
float _2721;
float _2722;
float _2723;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    vec4 _299 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _337 = cbMtdParam._m0[27u].w + _278;
    float _338 = cbMtdParam._m0[28u].x + _279;
    float _339 = cbMtdParam._m0[28u].y + _280;
    float _353 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_207 * _199, _207 * _200, _207 * _201));
    float _354 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_221 * TANGENT.x, _221 * TANGENT.y, _221 * TANGENT.z));
    float _355 = (-0.0) - dot(vec3(_337, _338, _339), vec3((-0.0) - (_214 * NORMAL.x), (-0.0) - (_214 * NORMAL.y), (-0.0) - (_214 * NORMAL.z)));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _362 = _359 * _355;
    float _363 = (_359 * _353) + (((_299.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _364 = (_359 * _354) + (((_299.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _365 = _363 * cbMtdParam._m0[24u].x;
    float _366 = _364 * cbMtdParam._m0[23u].w;
    float _367 = fract(TEXCOORD.x);
    float _368 = fract(TEXCOORD.y);
    float _374;
    if (_365 > 0.0)
    {
        _374 = (1.0 - _367) / _365;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_365 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _367) / _365;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _374 = frontier_phi_3_2_ladder;
    }
    float _382;
    if (_366 > 0.0)
    {
        _382 = (1.0 - _368) / _366;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_366 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _368) / _366;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _382 = frontier_phi_7_6_ladder;
    }
    bool _384 = _362 > 0.0;
    float _386 = _384 ? (cbMtdParam._m0[17u].x / _362) : 5000.0;
    float _387 = isnan(_382) ? _374 : (isnan(_374) ? _382 : min(_374, _382));
    float _388 = isnan(_386) ? _387 : (isnan(_387) ? _386 : min(_387, _386));
    float _392 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _393 = _367 + (-0.5);
    float _396 = _368 + (-0.5);
    float _399 = ((_388 * _362) + _392) / _392;
    vec4 _424 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_393 + (_388 * _365)) / _399) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_396 + (_388 * _366)) / _399) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _434 = cbMtdParam._m0[9u].x * _424.x;
    float _435 = cbMtdParam._m0[9u].y * _424.y;
    float _436 = cbMtdParam._m0[9u].z * _424.z;
    float _454 = _363 * cbMtdParam._m0[26u].z;
    float _455 = _364 * cbMtdParam._m0[26u].y;
    bool _456 = _454 > 0.0;
    float _461;
    if (_456)
    {
        _461 = (1.0 - _367) / _454;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _367) / _454;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _461 = frontier_phi_11_10_ladder;
    }
    bool _463 = _455 > 0.0;
    float _468;
    if (_463)
    {
        _468 = (1.0 - _368) / _455;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_455 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _368) / _455;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _468 = frontier_phi_15_14_ladder;
    }
    float _471 = _384 ? (cbMtdParam._m0[19u].z / _362) : 5000.0;
    float _472 = isnan(_468) ? _461 : (isnan(_461) ? _468 : min(_461, _468));
    float _473 = isnan(_471) ? _472 : (isnan(_472) ? _471 : min(_472, _471));
    float _477 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _481 = ((_473 * _362) + _477) / _477;
    float _486 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _488 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _504 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_393 + (_473 * _454)) / _481) + 0.5) + _486) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_396 + (_473 * _455)) / _481) + 0.5) + _488) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _516;
    if (_456)
    {
        _516 = (1.0 - _367) / _454;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _367) / _454;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _516 = frontier_phi_19_18_ladder;
    }
    float _522;
    if (_463)
    {
        _522 = (1.0 - _368) / _455;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_455 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _368) / _455;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _522 = frontier_phi_23_22_ladder;
    }
    float _524 = isnan(_522) ? _516 : (isnan(_516) ? _522 : min(_516, _522));
    float _525 = isnan(_471) ? _524 : (isnan(_524) ? _471 : min(_524, _471));
    float _532 = ((_525 * _362) + _477) / _477;
    vec4 _552 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_393 + (_525 * _454)) / _532) + 0.5) + _486) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_396 + (_525 * _455)) / _532) + 0.5) + _488) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _554 = _552.x;
    float _561 = (_554 * ((_504.x * cbMtdParam._m0[10u].x) - _434)) + _434;
    float _562 = (_554 * ((_504.y * cbMtdParam._m0[10u].y) - _435)) + _435;
    float _563 = (_554 * ((_504.z * cbMtdParam._m0[10u].z) - _436)) + _436;
    float _572 = (cbMtdParam._m0[16u].x * cbMtdParam._m0[19u].y) * _561;
    float _574 = (_562 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].y;
    float _576 = (_563 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].z;
    vec4 _600 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _605 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _611 = ((_600.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _613 = (-0.0) - (cbMtdParam._m0[21u].x * ((_600.x * 0.5) + (-0.25)));
    float _614 = fract(_605);
    float _616 = fract(_605 + 0.5);
    vec4 _643 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_614 * _613) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_611 * _614) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _645 = _643.x;
    float _651 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_616 * _613) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_611 * _616) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _645) * abs((_614 * 2.0) + (-1.0))) + _645;
    float _657 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _661 = fract(abs(_657));
    float _671 = sin(cbMtdParam._m0[21u].z);
    float _672 = cos(cbMtdParam._m0[21u].z);
    float _673 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _674 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _699 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_674, (-0.0) - _671, _672 * _673) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_674, _672, _673 * _671) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_657 >= ((-0.0) - _657)) ? _661 : ((-0.0) - _661)) * cbMtdParam._m0[18u].z) - _651)) + cbMtdParam._m0[18u].w;
    float _700 = ceil(_699);
    float _2762 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _2762 : (isnan(_2762) ? 1.0 : min(_2762, 1.0));
    float _721 = ((((cbMtdParam._m0[21u].w * _561) * cbMtdParam._m0[15u].x) - _572) * _701) + _572;
    float _722 = ((((cbMtdParam._m0[21u].w * _562) * cbMtdParam._m0[15u].y) - _574) * _701) + _574;
    float _723 = ((((cbMtdParam._m0[21u].w * _563) * cbMtdParam._m0[15u].z) - _576) * _701) + _576;
    float _727 = abs(cbMtdParam._m0[20u].w * _699);
    float _731 = (((_727 * cbMtdParam._m0[18u].y) - _651) * _727) + _651;
    float _2773 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _732 = isnan(1.0) ? _2773 : (isnan(_2773) ? 1.0 : min(_2773, 1.0));
    vec4 _744 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _759 = (cbMtdParam._m0[14u].x * _744.x) * cbMtdParam._m0[19u].x;
    float _760 = (cbMtdParam._m0[14u].y * _744.y) * cbMtdParam._m0[19u].x;
    float _761 = (cbMtdParam._m0[14u].z * _744.z) * cbMtdParam._m0[19u].x;
    float _768 = exp2(log2(_732) * cbMtdParam._m0[20u].x);
    float _803 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _807 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _808 = _278 * _807;
    float _809 = _279 * _807;
    float _810 = _280 * _807;
    vec4 _815 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _817 = _815.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _887 = sqrt(((_278 * _278) + (_279 * _279)) + (_280 * _280));
        float _893 = (cbMatDynParam._m0[5u].x * _887) + cbMatDynParam._m0[5u].y;
        float _2784 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _2784 : (isnan(_2784) ? 1.0 : min(_2784, 1.0));
        float _898 = (cbMatDynParam._m0[5u].z * _887) + cbMatDynParam._m0[5u].w;
        float _2795 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2795 : (isnan(_2795) ? 1.0 : min(_2795, 1.0))) - _894)) + _894) < ((_817 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _830 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _831 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _840 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_830 * cbSceneParam._m0[86u].x, _831 * cbSceneParam._m0[86u].y));
    float _843 = _840.x * TEXCOORD_4;
    float _844 = (-0.0) - _808;
    float _845 = (-0.0) - _809;
    float _846 = (-0.0) - _810;
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1036;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _959 = (cbModelParam._m0[37u].x * ((((fma(_876, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _868)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _961 = (cbModelParam._m0[37u].y * ((((fma(_876, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _868)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _962 = (((((fma(_876, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _868)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_959, _961, _962), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_959, _961, _962), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_959, _961, _962), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_959, _961, _962), 0.0);
        float _999 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_986.x + (-0.5));
        float _1031 = _1029 * (_986.y + (-0.5));
        float _1032 = _1029 * (_986.z + (-0.5));
        _1036 = _999 * (_965.z + (-0.5));
        _1038 = _999 * (_965.y + (-0.5));
        _1039 = _999 * (_965.x + (-0.5));
        _1040 = _1009 * (_972.z + (-0.5));
        _1041 = _1009 * (_972.y + (-0.5));
        _1042 = _1009 * (_972.x + (-0.5));
        _1043 = _1019 * (_979.z + (-0.5));
        _1044 = _1019 * (_979.y + (-0.5));
        _1045 = _1019 * (_979.x + (-0.5));
        _1046 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        _1047 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        _1048 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    }
    else
    {
        _1036 = _1037;
        _1038 = _1037;
        _1039 = _1037;
        _1040 = _1037;
        _1041 = _1037;
        _1042 = _1037;
        _1043 = _1037;
        _1044 = _1037;
        _1045 = _1037;
        _1046 = _1037;
        _1047 = _1037;
        _1048 = _1037;
    }
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1104 = (cbModelParam._m0[38u].x * ((((fma(_876, cbModelParam._m0[30u].z, fma(_872, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _868)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1105 = (cbModelParam._m0[38u].y * ((((fma(_876, cbModelParam._m0[31u].z, fma(_872, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _868)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1106 = (((((fma(_876, cbModelParam._m0[32u].z, fma(_872, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _868)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1141 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1129.x + (-0.5));
        float _1173 = _1171 * (_1129.y + (-0.5));
        float _1174 = _1171 * (_1129.z + (-0.5));
        _1178 = _1141 * (_1108.z + (-0.5));
        _1179 = _1141 * (_1108.y + (-0.5));
        _1180 = _1141 * (_1108.x + (-0.5));
        _1181 = _1151 * (_1115.z + (-0.5));
        _1182 = _1151 * (_1115.y + (-0.5));
        _1183 = _1151 * (_1115.x + (-0.5));
        _1184 = _1161 * (_1122.z + (-0.5));
        _1185 = _1161 * (_1122.y + (-0.5));
        _1186 = _1161 * (_1122.x + (-0.5));
        _1187 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        _1188 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        _1189 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    }
    else
    {
        _1178 = _1037;
        _1179 = _1037;
        _1180 = _1037;
        _1181 = _1037;
        _1182 = _1037;
        _1183 = _1037;
        _1184 = _1037;
        _1185 = _1037;
        _1186 = _1037;
        _1187 = _1037;
        _1188 = _1037;
        _1189 = _1037;
    }
    float _1204 = _808 * (-0.5);
    float _1205 = _809 * (-0.5);
    float _1206 = _810 * (-0.5);
    float _1207 = dot(vec4(_1204, _1205, _1206, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1210 = dot(vec4(_1204, _1205, _1206, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1213 = dot(vec4(_1204, _1205, _1206, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1248;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1220 = dot(vec4(_1204, _1205, _1206, 1.0), vec4(_1036, _1040, _1043, _1046));
        float _1224 = dot(vec4(_1204, _1205, _1206, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1228 = dot(vec4(_1204, _1205, _1206, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1235 = dot(vec4(cbModelParam._m0[39u]), vec4(_1204, _1205, _1206, 1.0));
        _1248 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)), isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1235) ? 0.0 : (isnan(0.0) ? _1235 : max(0.0, _1235))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1248 = 1.0;
    }
    float _1259;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1250 = dot(vec4(cbModelParam._m0[40u]), vec4(_1204, _1205, _1206, 1.0));
        _1259 = dot(vec3(isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)), isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)), isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1250) ? 0.0 : (isnan(0.0) ? _1250 : max(0.0, _1250))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1259 = 1.0;
    }
    float _1263 = (_1259 * cbModelParam._m0[1u].x) + (_1248 * (1.0 - cbModelParam._m0[1u].x));
    float _1269 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1350;
    float _1352;
    float _1354;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1317 = fma(_876, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868)) + cbModelParam._m0[13u].w;
        float _1321 = fma(_876, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868)) + cbModelParam._m0[14u].w;
        float _1325 = fma(_876, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868)) + cbModelParam._m0[15u].w;
        float _1328 = fma(_846, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844));
        float _1331 = fma(_846, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844));
        float _1334 = fma(_846, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844));
        float _1360;
        if (_1328 > 0.0)
        {
            _1360 = abs((1.0 - _1317) / _1328);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1317 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1360 = frontier_phi_41_39_ladder;
        }
        float _1636;
        if (_1331 > 0.0)
        {
            _1636 = abs((1.0 - _1321) / _1331);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1321 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1636 = frontier_phi_50_46_ladder;
        }
        float _1958;
        if (_1334 > 0.0)
        {
            _1958 = abs((1.0 - _1325) / _1334);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1325 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _1958 = frontier_phi_64_57_ladder;
        }
        float _1960 = isnan(_1636) ? _1360 : (isnan(_1360) ? _1636 : min(_1360, _1636));
        float _1961 = isnan(_1958) ? _1960 : (isnan(_1960) ? _1958 : min(_1960, _1958));
        float _1965 = (_1961 * _1328) + _1317;
        float _1966 = (_1961 * _1331) + _1321;
        float _1967 = (_1961 * _1334) + _1325;
        float _1968 = _1961 * 9.9999997473787516355514526367188e-05;
        float _1969 = (-1.0) - _1968;
        float _1971 = _1968 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_1967 > _1971) || ((_1967 < _1969) || ((_1966 > _1971) || ((_1966 < _1969) || ((_1965 < _1969) || (_1965 > _1971))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2094 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1967, cbModelParam._m0[9u].z, fma(_1966, cbModelParam._m0[9u].y, _1965 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1967, cbModelParam._m0[10u].z, fma(_1966, cbModelParam._m0[10u].y, _1965 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1967, cbModelParam._m0[11u].z, fma(_1966, cbModelParam._m0[11u].y, _1965 * cbModelParam._m0[11u].x))), _1269);
            frontier_phi_40_64_ladder = _2094.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2094.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2094.x * cbModelParam._m0[1u].y;
        }
        _1350 = frontier_phi_40_64_ladder_2;
        _1352 = frontier_phi_40_64_ladder_1;
        _1354 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1338 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_844, _845, _846), _1269);
        _1350 = _1338.x * cbModelParam._m0[1u].y;
        _1352 = _1338.y * cbModelParam._m0[1u].y;
        _1354 = _1338.z * cbModelParam._m0[1u].y;
    }
    float _1357 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1445;
    float _1447;
    float _1449;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1409 = fma(_876, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868)) + cbModelParam._m0[21u].w;
        float _1413 = fma(_876, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868)) + cbModelParam._m0[22u].w;
        float _1417 = fma(_876, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868)) + cbModelParam._m0[23u].w;
        float _1420 = fma(_846, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844));
        float _1423 = fma(_846, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844));
        float _1426 = fma(_846, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844));
        float _1641;
        if (_1420 > 0.0)
        {
            _1641 = abs((1.0 - _1409) / _1420);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1409 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1641 = frontier_phi_52_48_ladder;
        }
        float _1984;
        if (_1423 > 0.0)
        {
            _1984 = abs((1.0 - _1413) / _1423);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1413 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _1984 = frontier_phi_66_59_ladder;
        }
        float _2156;
        if (_1426 > 0.0)
        {
            _2156 = abs((1.0 - _1417) / _1426);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1417 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2156 = frontier_phi_84_77_ladder;
        }
        float _2158 = isnan(_1984) ? _1641 : (isnan(_1641) ? _1984 : min(_1641, _1984));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1420) + _1409;
        float _2164 = (_2159 * _1423) + _1413;
        float _2165 = (_2159 * _1426) + _1417;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2167 = (-1.0) - _2166;
        float _2169 = _2166 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2165 > _2169) || ((_2165 < _2167) || ((_2164 > _2169) || ((_2164 < _2167) || ((_2163 < _2167) || (_2163 > _2169))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2334 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2165, cbModelParam._m0[17u].z, fma(_2164, cbModelParam._m0[17u].y, _2163 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2165, cbModelParam._m0[18u].z, fma(_2164, cbModelParam._m0[18u].y, _2163 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2165, cbModelParam._m0[19u].z, fma(_2164, cbModelParam._m0[19u].y, _2163 * cbModelParam._m0[19u].x))), _1357);
            frontier_phi_49_84_ladder = _2334.x * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2334.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2334.z * cbModelParam._m0[1u].z;
        }
        _1445 = frontier_phi_49_84_ladder;
        _1447 = frontier_phi_49_84_ladder_1;
        _1449 = frontier_phi_49_84_ladder_2;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_844, _845, _846), _1357);
        _1445 = _1429.x * cbModelParam._m0[1u].z;
        _1447 = _1429.y * cbModelParam._m0[1u].z;
        _1449 = _1429.z * cbModelParam._m0[1u].z;
    }
    float _1461 = _843 * 0.01200000010430812835693359375;
    float _1463 = _1461 * ((cbModelParam._m0[1u].w * (_1445 - _1350)) + _1350);
    float _1464 = _1461 * ((cbModelParam._m0[1u].w * (_1447 - _1352)) + _1352);
    float _1465 = _1461 * ((cbModelParam._m0[1u].w * (_1449 - _1354)) + _1354);
    float _1486 = fma(_1465, cbSceneParam._m0[89u].z, fma(_1464, cbSceneParam._m0[89u].y, _1463 * cbSceneParam._m0[89u].x));
    float _1489 = fma(_1465, cbSceneParam._m0[90u].z, fma(_1464, cbSceneParam._m0[90u].y, _1463 * cbSceneParam._m0[90u].x));
    float _1492 = fma(_1465, cbSceneParam._m0[91u].z, fma(_1464, cbSceneParam._m0[91u].y, _1463 * cbSceneParam._m0[91u].x));
    uint _1499 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1503 = floatBitsToUint(cbInstanceData._m0[_1499 + 5u]);
    uint _1505 = _1503.x * 14u;
    uint _1506 = _1505 + 13u;
    float _1511 = _843 + (-1.0);
    float _1514 = (cbLight._m0[_1506].x * _1511) + 1.0;
    float _1515 = (cbLight._m0[_1506].y * _1511) + 1.0;
    uint _1516 = _1505 + 8u;
    float _1527 = cbLight._m0[_1505].x + _808;
    float _1528 = cbLight._m0[_1505].y + _809;
    float _1529 = cbLight._m0[_1505].z + _810;
    float _1533 = inversesqrt(dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529)));
    float _1537 = dot(vec3(0.0), vec3(cbLight._m0[_1505].xyz));
    float _2921 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
    float _1540 = isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0));
    float _1541 = dot(vec3(0.0), vec3(_808, _809, _810));
    float _2932 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
    float _1544 = isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0));
    float _1545 = dot(vec3(cbLight._m0[_1505].xyz), vec3(_1527 * _1533, _1528 * _1533, _1529 * _1533));
    float _2943 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
    float _1556 = (exp2(log2(1.0 - (isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1562 = (0.5 / ((_1540 + 9.9999999392252902907785028219223e-09) + _1544)) * _1540;
    float _2954 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
    float _1564 = (isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0))) * 0.31831014156341552734375;
    float _1566 = isnan(1.0) ? _1514 : (isnan(_1514) ? 1.0 : min(_1514, 1.0));
    uint _1576 = _1505 + 9u;
    uint _1582 = _1505 | 1u;
    float _1588 = cbLight._m0[_1582].x + _808;
    float _1589 = cbLight._m0[_1582].y + _809;
    float _1590 = cbLight._m0[_1582].z + _810;
    float _1594 = inversesqrt(dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590)));
    float _1598 = dot(vec3(0.0), vec3(cbLight._m0[_1582].xyz));
    float _2970 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1601 = isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0));
    float _1602 = dot(vec3(cbLight._m0[_1582].xyz), vec3(_1588 * _1594, _1589 * _1594, _1590 * _1594));
    float _2981 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1611 = (exp2(log2(1.0 - (isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1615 = (0.5 / ((_1601 + 9.9999999392252902907785028219223e-09) + _1544)) * _1601;
    float _2992 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1617 = (isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0))) * 0.31831014156341552734375;
    float _1618 = isnan(1.0) ? _1515 : (isnan(_1515) ? 1.0 : min(_1515, 1.0));
    float _1628 = (((_1611 * cbLight._m0[_1576].x) * _1617) * _1618) + (((_1556 * cbLight._m0[_1516].x) * _1564) * _1566);
    float _1629 = (((_1611 * cbLight._m0[_1576].y) * _1617) * _1618) + (((_1556 * cbLight._m0[_1516].y) * _1564) * _1566);
    float _1630 = (((_1611 * cbLight._m0[_1576].z) * _1617) * _1618) + (((_1556 * cbLight._m0[_1516].z) * _1564) * _1566);
    float _1746;
    float _1748;
    float _1750;
    if (_1503.y == 0u)
    {
        float _1686 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1687 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1686;
        float _1688 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1686;
        float _1689 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1686;
        uvec4 _1701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1702 = _1701.x;
        uint _1713 = uint((float(_1701.y) * floor(float(uint(cbSceneParam._m0[85u].y * _831) / _1702))) + floor(float(uint(cbSceneParam._m0[85u].x * _830) / _1702)));
        float _1723 = (log2(_1689 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1724 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        uint _1727 = uint(isnan(14.0) ? _1724 : (isnan(_1724) ? 14.0 : min(_1724, 14.0)));
        uvec4 _1732 = texelFetch(g_lightClusterGridBuffer, int(((_1727 << 2u) + (_1713 << 6u)) >> 2u));
        uint _1733 = _1732.x;
        uint _1734 = _1701.z;
        float _1833;
        float _1835;
        float _1837;
        if (((((1u << ((_1734 >> 4u) & 15u)) + 4294967295u) & _1733) == 0u) || ((_1734 & 240u) == 0u))
        {
            _1833 = 0.0;
            _1835 = 0.0;
            _1837 = 0.0;
        }
        else
        {
            float _1834;
            float _1836;
            float _1838;
            float _2009 = 0.0;
            float _2010 = 0.0;
            float _2011 = 0.0;
            uint _2012 = 0u;
            uint _2021;
            bool _2022;
            for (;;)
            {
                _2021 = texelFetch(g_lightClassification, int((((_1727 << 5u) + (_1713 << 9u)) + (_2012 << 2u)) >> 2u)).x;
                _2022 = _2021 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                if (_2022)
                {
                    frontier_phi_79_pred = _2011;
                    frontier_phi_79_pred_1 = _2010;
                    frontier_phi_79_pred_2 = _2009;
                }
                else
                {
                    float _2196;
                    float _2197;
                    float _2198;
                    uint _2199;
                    _2196 = _2009;
                    _2197 = _2010;
                    _2198 = _2011;
                    _2199 = _2021;
                    float _2103;
                    float _2104;
                    float _2105;
                    for (;;)
                    {
                        uint _2203 = uint(findLSB(_2199)) + (_2012 << 5u);
                        uint _2200 = (_2199 + 4294967295u) & _2199;
                        uint _2205 = _2203 * 48u;
                        vec4 _2219 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2205)).x, texelFetch(g_PointLightRenderingBuffer, int(_2205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2205 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2205 + 3u)).x));
                        uint _2236 = (_2203 * 48u) + 8u;
                        vec3 _2247 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2236)).x, texelFetch(g_PointLightRenderingBuffer, int(_2236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2236 + 2u)).x));
                        float _2251 = _2219.x - _1687;
                        float _2252 = _2219.y - _1688;
                        float _2253 = _2219.z - _1689;
                        float _2254 = dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253));
                        float _2257 = inversesqrt(_2254);
                        float _2266 = 1.0 - (_2254 * _2219.w);
                        float _3018 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
                        float _2268 = sqrt(_2254) * uintBitsToFloat(uvec4(_2226, _2227, _2228, texelFetch(g_PointLightRenderingBuffer, int(((_2203 * 48u) + 4u) + 3u)).x)).w;
                        float _2271 = 1.39999997615814208984375 / (_2268 + 1.39999997615814208984375);
                        float _2272 = _2271 * _2271;
                        float _2275 = ((1.0 - _2272) * dot(vec3(0.0), vec3(_2257 * _2251, _2257 * _2252, _2257 * _2253))) + _2272;
                        float _2277 = (-0.0) - _1687;
                        float _2278 = (-0.0) - _1688;
                        float _2279 = (-0.0) - _1689;
                        float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
                        float _2287 = dot(vec3(0.0), vec3(_2283 * _2277, _2283 * _2278, _2283 * _2279));
                        float _3029 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
                        float _3040 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
                        float _2291 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
                        float _2295 = (0.5 / (((isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0))) + 9.9999999392252902907785028219223e-09) + _2291)) * _2291;
                        float _3051 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
                        float _2304 = (((isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0))) * 3.1415927410125732421875) / (((_2268 * _2268) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0)));
                        _2103 = (_2304 * _2247.x) + _2196;
                        _2104 = (_2304 * _2247.y) + _2197;
                        _2105 = (_2304 * _2247.z) + _2198;
                        if (_2200 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2196 = _2103;
                            _2197 = _2104;
                            _2198 = _2105;
                            _2199 = _2200;
                        }
                    }
                    frontier_phi_79_pred = _2105;
                    frontier_phi_79_pred_1 = _2104;
                    frontier_phi_79_pred_2 = _2103;
                }
                _1838 = frontier_phi_79_pred;
                _1836 = frontier_phi_79_pred_1;
                _1834 = frontier_phi_79_pred_2;
                uint _2013 = _2012 + 1u;
                if (_2013 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2009 = _1834;
                    _2010 = _1836;
                    _2011 = _1838;
                    _2012 = _2013;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1833 = _1834;
            _1835 = _1836;
            _1837 = _1838;
        }
        uvec4 _1841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1842 = _1841.z;
        uint _1844 = (_1842 >> 8u) & 15u;
        float _1989;
        float _1991;
        float _1993;
        if (((4294967295u << _1844) & _1733) == 0u)
        {
            _1989 = _1833;
            _1991 = _1835;
            _1993 = _1837;
        }
        else
        {
            float _2005 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            if (_1844 < ((_1842 >> 12u) & 15u))
            {
                float _1990;
                float _1992;
                float _1994;
                float _2182 = _1833;
                float _2183 = _1835;
                float _2184 = _1837;
                uint _2185 = _1844;
                uint _2194;
                bool _2195;
                for (;;)
                {
                    _2194 = texelFetch(g_lightClassification, int((((_1727 << 5u) + (_1713 << 9u)) + (_2185 << 2u)) >> 2u)).x;
                    _2195 = _2194 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    if (_2195)
                    {
                        frontier_phi_93_pred = _2184;
                        frontier_phi_93_pred_1 = _2183;
                        frontier_phi_93_pred_2 = _2182;
                    }
                    else
                    {
                        float _2339;
                        float _2340;
                        float _2341;
                        float _2560;
                        float _2561;
                        float _2562;
                        float _2349 = _2182;
                        float _2350 = _2183;
                        float _2351 = _2184;
                        uint _2352 = _2194;
                        uint _2353;
                        uint _2363;
                        vec4 _2378;
                        float _2379;
                        vec3 _2391;
                        vec4 _2406;
                        vec4 _2421;
                        float _2467;
                        bool _2468;
                        for (;;)
                        {
                            _2363 = ((_2185 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2352));
                            _2353 = (_2352 + 4294967295u) & _2352;
                            uint _2365 = _2363 * 40u;
                            _2378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2365 + 3u)).x));
                            _2379 = _2378.w;
                            uint _2381 = (_2363 * 40u) + 8u;
                            _2391 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2381 + 2u)).x));
                            uint _2393 = (_2363 * 40u) + 16u;
                            _2406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2393 + 3u)).x));
                            uint _2408 = (_2363 * 40u) + 20u;
                            _2421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2408 + 3u)).x));
                            uint _2423 = (_2363 * 40u) + 24u;
                            vec4 _2436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2423 + 3u)).x));
                            uint _2442 = (_2363 * 40u) + 28u;
                            vec4 _2455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2442 + 3u)).x));
                            _2467 = fma(_1689, _2455.z, fma(_1688, _2455.y, _2455.x * _1687)) + _2455.w;
                            _2468 = !((fma(_1689, _2436.z, fma(_1688, _2436.y, _2436.x * _1687)) + _2436.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            if (_2468)
                            {
                                float _2502 = _2378.x - _1687;
                                float _2503 = _2378.y - _1688;
                                float _2504 = _2378.z - _1689;
                                float _2505 = dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504));
                                float _2508 = inversesqrt(_2505);
                                float _2515 = 1.0 - (_2505 / (_2379 * _2379));
                                float _3062 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
                                float _2517 = sqrt(_2505) * uintBitsToFloat(uvec4(_2471, _2472, _2473, texelFetch(g_SpotLightRenderingBuffer, int(((_2363 * 40u) + 4u) + 3u)).x)).w;
                                float _2519 = 1.39999997615814208984375 / (_2517 + 1.39999997615814208984375);
                                float _2520 = _2519 * _2519;
                                float _2523 = (fma(_1689, _2406.z, fma(_1688, _2406.y, _2406.x * _1687)) + _2406.w) / _2467;
                                float _2524 = (fma(_1689, _2421.z, fma(_1688, _2421.y, _2421.x * _1687)) + _2421.w) / _2467;
                                float _2528 = 1.0 - dot(vec2(_2523, _2524), vec2(_2523, _2524));
                                float _3073 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
                                float _2536 = dot(vec3(0.0), vec3((-0.0) - (_1687 * _2005), (-0.0) - (_1688 * _2005), (-0.0) - (_1689 * _2005)));
                                float _3084 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
                                float _2544 = ((1.0 - _2520) * dot(vec3(0.0), vec3(_2508 * _2502, _2508 * _2503, _2508 * _2504))) + _2520;
                                float _3095 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
                                float _2545 = isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0));
                                float _2549 = (0.5 / (((isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0))) + 9.9999999392252902907785028219223e-09) + _2545)) * _2545;
                                float _3106 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
                                float _2556 = ((isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0))) * (isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0)))) * (((isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0))) * 3.1415927410125732421875) / (((_2517 * _2517) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2556 * _2391.z;
                                frontier_phi_99_pred_1 = _2556 * _2391.y;
                                frontier_phi_99_pred_2 = _2556 * _2391.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                            }
                            _2562 = frontier_phi_99_pred;
                            _2561 = frontier_phi_99_pred_1;
                            _2560 = frontier_phi_99_pred_2;
                            _2339 = _2560 + _2349;
                            _2340 = _2561 + _2350;
                            _2341 = _2562 + _2351;
                            if (_2353 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2349 = _2339;
                                _2350 = _2340;
                                _2351 = _2341;
                                _2352 = _2353;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2341;
                        frontier_phi_93_pred_1 = _2340;
                        frontier_phi_93_pred_2 = _2339;
                    }
                    _1994 = frontier_phi_93_pred;
                    _1992 = frontier_phi_93_pred_1;
                    _1990 = frontier_phi_93_pred_2;
                    uint _2186 = _2185 + 1u;
                    if (_2186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2182 = _1990;
                        _2183 = _1992;
                        _2184 = _1994;
                        _2185 = _2186;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _1994;
                frontier_phi_68_69_ladder_1 = _1992;
                frontier_phi_68_69_ladder_2 = _1990;
            }
            else
            {
                frontier_phi_68_69_ladder = _1837;
                frontier_phi_68_69_ladder_1 = _1835;
                frontier_phi_68_69_ladder_2 = _1833;
            }
            _1989 = frontier_phi_68_69_ladder_2;
            _1991 = frontier_phi_68_69_ladder_1;
            _1993 = frontier_phi_68_69_ladder;
        }
        float _1998 = isnan(1.0) ? _843 : (isnan(_843) ? 1.0 : min(_843, 1.0));
        _1746 = ((_1989 * 0.039999999105930328369140625) * _1998) + _1628;
        _1748 = ((_1991 * 0.039999999105930328369140625) * _1998) + _1629;
        _1750 = ((_1993 * 0.039999999105930328369140625) * _1998) + _1630;
    }
    else
    {
        _1746 = _1628;
        _1748 = _1629;
        _1750 = _1630;
    }
    uint _1756 = _1499 + 9u;
    uint _1757 = _1756 + uint(cbMatDynParam._m0[0u].w);
    float _1763 = (cbSceneParam._m0[72u].y * ((_768 * ((_759 - _721) - (_759 * _732))) + _721)) * cbInstanceData._m0[_1757].x;
    float _1764 = (cbSceneParam._m0[72u].y * ((_768 * ((_760 - _722) - (_760 * _732))) + _722)) * cbInstanceData._m0[_1757].y;
    float _1765 = (((_768 * ((_761 - _723) - (_761 * _732))) + _723) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1757].z;
    float _1772 = _1763 + ((_1746 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _1263)) * cbPerFrame._m0[3u].x);
    float _1773 = _1764 + ((_1748 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _1263)) * cbPerFrame._m0[3u].x);
    float _1774 = _1765 + ((_1750 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1263)) * cbPerFrame._m0[3u].x);
    float _1775 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1776 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1783 = cbMtdParam._m0[2u].x * _1763;
    float _1784 = cbMtdParam._m0[2u].y * _1764;
    float _1785 = cbMtdParam._m0[2u].z * _1765;
    float _3137 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1787 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
    uint _1788 = _1499 + 6u;
    float _1796 = _830 / cbSceneParam._m0[86u].x;
    float _1797 = _831 / cbSceneParam._m0[86u].y;
    vec4 _1811 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1796, _1797, (log2((isnan(cbSceneParam._m0[77u].w) ? _803 : (isnan(_803) ? cbSceneParam._m0[77u].w : min(_803, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1813 = _1811.x;
    float _1814 = _1811.y;
    float _1815 = _1811.z;
    float _1816 = _1811.w;
    float _1890;
    float _1892;
    float _1894;
    float _1896;
    if (_803 > cbSceneParam._m0[78u].w)
    {
        float _1852 = isnan(_803) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _803 : min(cbSceneParam._m0[80u].w, _803));
        float _1853 = _1852 / _803;
        float _1864 = _1853 * _278;
        float _1865 = _279 * _1853;
        float _1866 = (-0.0) - _1865;
        float _1867 = _1853 * _280;
        float _1869 = (cbSceneParam._m0[77u].w * _1866) / _1852;
        float _1870 = _1869 + cbSceneParam._m0[79u].w;
        float _1871 = cbSceneParam._m0[79u].w - _1865;
        float _1877 = sqrt(((_1864 * _1864) + (_1865 * _1865)) + (_1867 * _1867));
        float _1880 = (1.0 - (cbSceneParam._m0[77u].w / _1852)) * _1877;
        float _1886 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1888 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2113;
        if (abs((_1866 - _1869) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2113 = ((((_1870 > 0.0) ? exp2(_1886 * _1870) : (2.0 - exp2(_1888 * _1870))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1880;
        }
        else
        {
            float _2035 = 1.0 / cbSceneParam._m0[80u].x;
            float _2036 = isnan(_1871) ? _1870 : (isnan(_1870) ? _1871 : max(_1870, _1871));
            float _2037 = isnan(_1871) ? _1870 : (isnan(_1870) ? _1871 : min(_1870, _1871));
            float _2046 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : min(_2036, 0.0));
            float _2047 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : min(_2037, 0.0));
            _2113 = ((abs(_1877 / _1866) * cbSceneParam._m0[80u].y) * ((((_2046 - _2047) * 2.0) - ((exp2(_1886 * (isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0)))) - exp2(_1886 * (isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))))) * _2035)) - ((exp2(_1888 * _2046) - exp2(_1888 * _2047)) * _2035))) + (_1880 * cbSceneParam._m0[80u].z);
        }
        vec4 _2115 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1796, _1797, 1.0), 0.0);
        float _2124 = exp2((_2113 * (-1.44269502162933349609375)) * (1.0 - _2115.w));
        float _2125 = log2(_2124);
        float _2141 = log2(_1816);
        _1890 = (exp2(_2141 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2125 * cbSceneParam._m0[78u].x)) * _2115.x) / cbSceneParam._m0[78u].x)) + _1813;
        _1892 = (exp2(_2141 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2125 * cbSceneParam._m0[78u].y)) * _2115.y) / cbSceneParam._m0[78u].y)) + _1814;
        _1894 = (exp2(_2141 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2125 * cbSceneParam._m0[78u].z)) * _2115.z) / cbSceneParam._m0[78u].z)) + _1815;
        _1896 = _2124 * _1816;
    }
    else
    {
        _1890 = _1813;
        _1892 = _1814;
        _1894 = _1815;
        _1896 = _1816;
    }
    bool _2151;
    vec4 _1905;
    vec4 _1928;
    float _1930;
    float _1934;
    float _1935;
    float _1936;
    float _1939;
    float _1942;
    float _1945;
    float _1946;
    bool _1957;
    for (;;)
    {
        _1905 = cbMatDynParam._m0[0u];
        float _1907 = roundEven(_1905.y);
        bool _1908 = _1907 == 3.0;
        float _1910 = log2(_1896);
        float _1914 = exp2(_1910 * cbSceneParam._m0[78u].x);
        float _1915 = exp2(_1910 * cbSceneParam._m0[78u].y);
        float _1916 = exp2(_1910 * cbSceneParam._m0[78u].z);
        float _1917 = _1914 * _1775;
        float _1918 = _1915 * _1776;
        float _1919 = _1916 * _1777;
        float _1926 = _817 + (-0.5);
        _1928 = cbMtdParam._m0[1u];
        _1930 = _1928.y * _1926;
        float _1933 = (_1907 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1934 = _1933 * (_1908 ? _1917 : (_1917 + (cbSceneParam._m0[72u].w * _1890)));
        _1935 = _1933 * (_1908 ? _1918 : (_1918 + (cbSceneParam._m0[72u].w * _1892)));
        _1936 = _1933 * (_1908 ? _1919 : (_1919 + (cbSceneParam._m0[72u].w * _1894)));
        _1939 = ((_1783 * _1787) * _1914) * _1933;
        _1942 = ((_1784 * _1787) * _1915) * _1933;
        _1945 = ((_1785 * _1787) * _1916) * _1933;
        _1946 = _1926 * 0.999000012874603271484375;
        _1957 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1957)
        {
            if ((cbInstanceData._m0[_1499 + 7u].x + _1946) < 0.5)
            {
                _2151 = true;
                break;
            }
        }
        uint _2070 = _1756 + uint(_1905.w);
        if ((cbInstanceData._m0[_2070].w < 1.0) && ((cbInstanceData._m0[_2070].w + _1946) < 0.5))
        {
            _2151 = true;
            break;
        }
        if ((_1930 + 1.0) < _1928.x)
        {
            _2151 = true;
            break;
        }
        _2151 = false;
        break;
    }
    float _2309;
    if (_2151)
    {
        discard_state = true;
        _2309 = 0.0;
    }
    else
    {
        _2309 = cbInstanceData._m0[_1788].w;
    }
    SV_Target.x = _1934;
    SV_Target.y = _1935;
    SV_Target.z = _1936;
    SV_Target.w = _2309;
    SV_Target_1.x = _1939;
    SV_Target_1.y = _1942;
    SV_Target_1.z = _1945;
    SV_Target_1.w = cbInstanceData._m0[_1788].w;
    discard_exit();
}


