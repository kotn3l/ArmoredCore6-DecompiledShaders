#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _394;
uint _2151;
uint _2152;
uint _2153;
uint _2396;
uint _2397;
uint _2398;
float _2637;
float _2638;
float _2639;
float _2640;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _303 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _319 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _326 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _338 = cbMtdParam._m0[28u].z + _273;
    float _339 = cbMtdParam._m0[28u].w + _274;
    float _340 = cbMtdParam._m0[29u].x + _275;
    float _357 = (-0.0) - dot(vec3(_338, _339, _340), vec3(_319 * _206, _319 * _207, _319 * _208));
    float _358 = (-0.0) - dot(vec3(_338, _339, _340), vec3(_326 * _217, _326 * _218, _326 * _219));
    float _359 = (-0.0) - dot(vec3(_338, _339, _340), vec3((-0.0) - (NORMAL.x * _212), (-0.0) - (NORMAL.y * _212), (-0.0) - (NORMAL.z * _212)));
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _364 = _363 * _359;
    float _369 = ((cbMtdParam._m0[25u].y * _357) * _363) + (((_303.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _370 = ((cbMtdParam._m0[25u].z * _358) * _363) + (((_303.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _373 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _374 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _392;
    float _395;
    float _397;
    if (_369 > 0.0)
    {
        float _378 = (1.0 - _373) / _369;
        _392 = _378;
        _395 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_378 * _364)) * 0.16666667163372039794921875;
        _397 = (fract((_378 * _370) + _374) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_369 < 0.0)
        {
            float _393 = ((-0.0) - _373) / _369;
            frontier_phi_3_2_ladder = _393;
            frontier_phi_3_2_ladder_1 = (fract((_393 * _370) + _374) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_393 * _364) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _394;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _392 = frontier_phi_3_2_ladder;
        _395 = frontier_phi_3_2_ladder_2;
        _397 = frontier_phi_3_2_ladder_1;
    }
    float _423;
    float _425;
    float _427;
    if (_370 > 0.0)
    {
        float _410 = (1.0 - _374) / _370;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_410 < _392)
        {
            frontier_phi_8_5_ladder = (fract(_410 * _364) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_410 * _369) + _373) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _410;
        }
        else
        {
            frontier_phi_8_5_ladder = _397;
            frontier_phi_8_5_ladder_1 = _395;
            frontier_phi_8_5_ladder_2 = _392;
        }
        _423 = frontier_phi_8_5_ladder_2;
        _425 = frontier_phi_8_5_ladder_1;
        _427 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_370 < 0.0)
        {
            float _424 = ((-0.0) - _374) / _370;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_424 < _392)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_424 * _364) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_424 * _369) + _373) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _424;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _397;
                frontier_phi_8_6_ladder_9_ladder_1 = _395;
                frontier_phi_8_6_ladder_9_ladder_2 = _392;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _397;
            frontier_phi_8_6_ladder_1 = _395;
            frontier_phi_8_6_ladder_2 = _392;
        }
        _423 = frontier_phi_8_6_ladder_2;
        _425 = frontier_phi_8_6_ladder_1;
        _427 = frontier_phi_8_6_ladder;
    }
    float _431 = (_364 > 0.0) ? (cbMtdParam._m0[20u].z / _364) : 5000.0;
    float _444;
    float _445;
    if (_431 < _423)
    {
        _444 = ((_373 + cbMtdParam._m0[22u].x) + (_431 * _369)) * 0.16666667163372039794921875;
        _445 = (((_431 * _370) + _374) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _444 = _425;
        _445 = _427;
    }
    vec4 _447 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_444, _445));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    float _463 = (cbMtdParam._m0[19u].y * _449) * cbMtdParam._m0[16u].x;
    float _465 = (cbMtdParam._m0[19u].y * _450) * cbMtdParam._m0[16u].y;
    float _467 = (cbMtdParam._m0[19u].y * _451) * cbMtdParam._m0[16u].z;
    vec4 _494 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _499 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _505 = ((_494.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _507 = (-0.0) - (cbMtdParam._m0[21u].x * ((_494.x * 0.5) + (-0.25)));
    float _508 = fract(_499);
    float _510 = fract(_499 + 0.5);
    vec4 _537 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_508 * _507) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_505 * _508) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _539 = _537.x;
    float _545 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_510 * _507) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_505 * _510) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _539) * abs((_508 * 2.0) + (-1.0))) + _539;
    float _556 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _560 = fract(abs(_556));
    float _567 = sin(cbMtdParam._m0[21u].z);
    float _568 = cos(cbMtdParam._m0[21u].z);
    float _569 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _570 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _595 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_570, (-0.0) - _567, _568 * _569) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_570, _568, _569 * _567) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_556 >= ((-0.0) - _556)) ? _560 : ((-0.0) - _560)) * cbMtdParam._m0[18u].z) - _545)) + cbMtdParam._m0[18u].w;
    float _596 = ceil(_595);
    float _2649 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _2649 : (isnan(_2649) ? 1.0 : min(_2649, 1.0));
    float _617 = ((((cbMtdParam._m0[21u].w * _449) * cbMtdParam._m0[15u].x) - _463) * _597) + _463;
    float _618 = ((((cbMtdParam._m0[21u].w * _450) * cbMtdParam._m0[15u].y) - _465) * _597) + _465;
    float _619 = ((((cbMtdParam._m0[21u].w * _451) * cbMtdParam._m0[15u].z) - _467) * _597) + _467;
    float _623 = abs(cbMtdParam._m0[20u].w * _595);
    float _627 = (((_623 * cbMtdParam._m0[18u].y) - _545) * _623) + _545;
    float _2660 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _2660 : (isnan(_2660) ? 1.0 : min(_2660, 1.0));
    vec4 _640 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _655 = (cbMtdParam._m0[14u].x * _640.x) * cbMtdParam._m0[19u].x;
    float _656 = (cbMtdParam._m0[14u].y * _640.y) * cbMtdParam._m0[19u].x;
    float _657 = (cbMtdParam._m0[14u].z * _640.z) * cbMtdParam._m0[19u].x;
    float _664 = exp2(log2(_628) * cbMtdParam._m0[20u].x);
    float _699 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _703 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _704 = _273 * _703;
    float _705 = _274 * _703;
    float _706 = _275 * _703;
    vec4 _711 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _713 = _711.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _788 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _794 = (cbMatDynParam._m0[5u].x * _788) + cbMatDynParam._m0[5u].y;
        float _2671 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _2671 : (isnan(_2671) ? 1.0 : min(_2671, 1.0));
        float _799 = (cbMatDynParam._m0[5u].z * _788) + cbMatDynParam._m0[5u].w;
        float _2682 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2682 : (isnan(_2682) ? 1.0 : min(_2682, 1.0))) - _795)) + _795) < ((_713 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _731 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _732 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _741 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_731 * cbSceneParam._m0[86u].x, _732 * cbSceneParam._m0[86u].y));
    float _744 = _741.x * TEXCOORD_4;
    float _745 = (-0.0) - _704;
    float _746 = (-0.0) - _705;
    float _747 = (-0.0) - _706;
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _862 = (cbModelParam._m0[37u].x * ((((fma(_777, cbModelParam._m0[26u].z, fma(_773, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _769)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _864 = (cbModelParam._m0[37u].y * ((((fma(_777, cbModelParam._m0[27u].z, fma(_773, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _769)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _865 = (((((fma(_777, cbModelParam._m0[28u].z, fma(_773, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _769)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_862, _864, _865), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_862, _864, _865), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_862, _864, _865), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_862, _864, _865), 0.0);
        float _902 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _912 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _922 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _932 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_889.x + (-0.5));
        float _934 = _932 * (_889.y + (-0.5));
        float _935 = _932 * (_889.z + (-0.5));
        _939 = _902 * (_868.z + (-0.5));
        _940 = _902 * (_868.y + (-0.5));
        _941 = _902 * (_868.x + (-0.5));
        _942 = _912 * (_875.z + (-0.5));
        _943 = _912 * (_875.y + (-0.5));
        _944 = _912 * (_875.x + (-0.5));
        _945 = _922 * (_882.z + (-0.5));
        _946 = _922 * (_882.y + (-0.5));
        _947 = _922 * (_882.x + (-0.5));
        _948 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        _949 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        _950 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    }
    else
    {
        _939 = _394;
        _940 = _394;
        _941 = _394;
        _942 = _394;
        _943 = _394;
        _944 = _394;
        _945 = _394;
        _946 = _394;
        _947 = _394;
        _948 = _394;
        _949 = _394;
        _950 = _394;
    }
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1006 = (cbModelParam._m0[38u].x * ((((fma(_777, cbModelParam._m0[30u].z, fma(_773, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _769)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1007 = (cbModelParam._m0[38u].y * ((((fma(_777, cbModelParam._m0[31u].z, fma(_773, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _769)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1008 = (((((fma(_777, cbModelParam._m0[32u].z, fma(_773, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _769)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1043 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1031.x + (-0.5));
        float _1075 = _1073 * (_1031.y + (-0.5));
        float _1076 = _1073 * (_1031.z + (-0.5));
        _1080 = _1043 * (_1010.z + (-0.5));
        _1081 = _1043 * (_1010.y + (-0.5));
        _1082 = _1043 * (_1010.x + (-0.5));
        _1083 = _1053 * (_1017.z + (-0.5));
        _1084 = _1053 * (_1017.y + (-0.5));
        _1085 = _1053 * (_1017.x + (-0.5));
        _1086 = _1063 * (_1024.z + (-0.5));
        _1087 = _1063 * (_1024.y + (-0.5));
        _1088 = _1063 * (_1024.x + (-0.5));
        _1089 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        _1090 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        _1091 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    }
    else
    {
        _1080 = _394;
        _1081 = _394;
        _1082 = _394;
        _1083 = _394;
        _1084 = _394;
        _1085 = _394;
        _1086 = _394;
        _1087 = _394;
        _1088 = _394;
        _1089 = _394;
        _1090 = _394;
        _1091 = _394;
    }
    float _1106 = _704 * (-0.5);
    float _1107 = _705 * (-0.5);
    float _1108 = _706 * (-0.5);
    float _1109 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_1082, _1085, _1088, _1091));
    float _1112 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_1081, _1084, _1087, _1090));
    float _1115 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_1080, _1083, _1086, _1089));
    float _1150;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1122 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_939, _942, _945, _948));
        float _1126 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_940, _943, _946, _949));
        float _1130 = dot(vec4(_1106, _1107, _1108, 1.0), vec4(_941, _944, _947, _950));
        float _1137 = dot(vec4(cbModelParam._m0[39u]), vec4(_1106, _1107, _1108, 1.0));
        _1150 = dot(vec3(isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)), isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)), isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1137) ? 0.0 : (isnan(0.0) ? _1137 : max(0.0, _1137))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1150 = 1.0;
    }
    float _1161;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1152 = dot(vec4(cbModelParam._m0[40u]), vec4(_1106, _1107, _1108, 1.0));
        _1161 = dot(vec3(isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)), isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)), isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1152) ? 0.0 : (isnan(0.0) ? _1152 : max(0.0, _1152))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1161 = 1.0;
    }
    float _1165 = (_1161 * cbModelParam._m0[1u].x) + (_1150 * (1.0 - cbModelParam._m0[1u].x));
    float _1171 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1253;
    float _1255;
    float _1257;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1220 = fma(_777, cbModelParam._m0[13u].z, fma(_773, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _769)) + cbModelParam._m0[13u].w;
        float _1224 = fma(_777, cbModelParam._m0[14u].z, fma(_773, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _769)) + cbModelParam._m0[14u].w;
        float _1228 = fma(_777, cbModelParam._m0[15u].z, fma(_773, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _769)) + cbModelParam._m0[15u].w;
        float _1231 = fma(_747, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745));
        float _1234 = fma(_747, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745));
        float _1237 = fma(_747, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745));
        float _1263;
        if (_1231 > 0.0)
        {
            _1263 = abs((1.0 - _1220) / _1231);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1231 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1220 + 1.0) / _1231);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1263 = frontier_phi_29_27_ladder;
        }
        float _1561;
        if (_1234 > 0.0)
        {
            _1561 = abs((1.0 - _1224) / _1234);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1234 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1224 + 1.0) / _1234);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1561 = frontier_phi_38_34_ladder;
        }
        float _1883;
        if (_1237 > 0.0)
        {
            _1883 = abs((1.0 - _1228) / _1237);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1237 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1228 + 1.0) / _1237);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _1883 = frontier_phi_52_45_ladder;
        }
        float _1885 = isnan(_1561) ? _1263 : (isnan(_1263) ? _1561 : min(_1263, _1561));
        float _1886 = isnan(_1883) ? _1885 : (isnan(_1885) ? _1883 : min(_1885, _1883));
        float _1890 = (_1886 * _1231) + _1220;
        float _1891 = (_1886 * _1234) + _1224;
        float _1892 = (_1886 * _1237) + _1228;
        float _1893 = _1886 * 9.9999997473787516355514526367188e-05;
        float _1894 = (-1.0) - _1893;
        float _1896 = _1893 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_1892 > _1896) || ((_1892 < _1894) || ((_1891 > _1896) || ((_1891 < _1894) || ((_1890 < _1894) || (_1890 > _1896))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1892, cbModelParam._m0[9u].z, fma(_1891, cbModelParam._m0[9u].y, _1890 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1892, cbModelParam._m0[10u].z, fma(_1891, cbModelParam._m0[10u].y, _1890 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1892, cbModelParam._m0[11u].z, fma(_1891, cbModelParam._m0[11u].y, _1890 * cbModelParam._m0[11u].x))), _1171);
            frontier_phi_28_52_ladder = _2019.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2019.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2019.x * cbModelParam._m0[1u].y;
        }
        _1253 = frontier_phi_28_52_ladder_2;
        _1255 = frontier_phi_28_52_ladder_1;
        _1257 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1241 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_745, _746, _747), _1171);
        _1253 = _1241.x * cbModelParam._m0[1u].y;
        _1255 = _1241.y * cbModelParam._m0[1u].y;
        _1257 = _1241.z * cbModelParam._m0[1u].y;
    }
    float _1260 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1348;
    float _1350;
    float _1352;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1312 = fma(_777, cbModelParam._m0[21u].z, fma(_773, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _769)) + cbModelParam._m0[21u].w;
        float _1316 = fma(_777, cbModelParam._m0[22u].z, fma(_773, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _769)) + cbModelParam._m0[22u].w;
        float _1320 = fma(_777, cbModelParam._m0[23u].z, fma(_773, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _769)) + cbModelParam._m0[23u].w;
        float _1323 = fma(_747, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745));
        float _1326 = fma(_747, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745));
        float _1329 = fma(_747, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745));
        float _1566;
        if (_1323 > 0.0)
        {
            _1566 = abs((1.0 - _1312) / _1323);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1323 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1312 + 1.0) / _1323);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1566 = frontier_phi_40_36_ladder;
        }
        float _1909;
        if (_1326 > 0.0)
        {
            _1909 = abs((1.0 - _1316) / _1326);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1326 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1316 + 1.0) / _1326);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _1909 = frontier_phi_54_47_ladder;
        }
        float _2081;
        if (_1329 > 0.0)
        {
            _2081 = abs((1.0 - _1320) / _1329);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1320 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2081 = frontier_phi_72_65_ladder;
        }
        float _2083 = isnan(_1909) ? _1566 : (isnan(_1566) ? _1909 : min(_1566, _1909));
        float _2084 = isnan(_2081) ? _2083 : (isnan(_2083) ? _2081 : min(_2083, _2081));
        float _2088 = (_2084 * _1323) + _1312;
        float _2089 = (_2084 * _1326) + _1316;
        float _2090 = (_2084 * _1329) + _1320;
        float _2091 = _2084 * 9.9999997473787516355514526367188e-05;
        float _2092 = (-1.0) - _2091;
        float _2094 = _2091 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2090 > _2094) || ((_2090 < _2092) || ((_2089 > _2094) || ((_2089 < _2092) || ((_2088 < _2092) || (_2088 > _2094))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2259 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2090, cbModelParam._m0[17u].z, fma(_2089, cbModelParam._m0[17u].y, _2088 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2090, cbModelParam._m0[18u].z, fma(_2089, cbModelParam._m0[18u].y, _2088 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2090, cbModelParam._m0[19u].z, fma(_2089, cbModelParam._m0[19u].y, _2088 * cbModelParam._m0[19u].x))), _1260);
            frontier_phi_37_72_ladder = _2259.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2259.x * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2259.y * cbModelParam._m0[1u].z;
        }
        _1348 = frontier_phi_37_72_ladder_1;
        _1350 = frontier_phi_37_72_ladder_2;
        _1352 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1332 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_745, _746, _747), _1260);
        _1348 = _1332.x * cbModelParam._m0[1u].z;
        _1350 = _1332.y * cbModelParam._m0[1u].z;
        _1352 = _1332.z * cbModelParam._m0[1u].z;
    }
    float _1364 = _744 * 0.01200000010430812835693359375;
    float _1366 = _1364 * ((cbModelParam._m0[1u].w * (_1348 - _1253)) + _1253);
    float _1367 = _1364 * ((cbModelParam._m0[1u].w * (_1350 - _1255)) + _1255);
    float _1368 = _1364 * ((cbModelParam._m0[1u].w * (_1352 - _1257)) + _1257);
    float _1389 = fma(_1368, cbSceneParam._m0[89u].z, fma(_1367, cbSceneParam._m0[89u].y, _1366 * cbSceneParam._m0[89u].x));
    float _1392 = fma(_1368, cbSceneParam._m0[90u].z, fma(_1367, cbSceneParam._m0[90u].y, _1366 * cbSceneParam._m0[90u].x));
    float _1395 = fma(_1368, cbSceneParam._m0[91u].z, fma(_1367, cbSceneParam._m0[91u].y, _1366 * cbSceneParam._m0[91u].x));
    vec4 _1403 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_731, _732));
    float _1405 = _1403.w;
    uint _1421 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1425 = floatBitsToUint(cbInstanceData._m0[_1421 + 5u]);
    uint _1427 = _1425.x * 14u;
    uint _1428 = _1427 + 13u;
    float _1433 = _744 + (-1.0);
    float _1436 = (cbLight._m0[_1428].x * _1433) + 1.0;
    float _1437 = (cbLight._m0[_1428].y * _1433) + 1.0;
    uint _1438 = _1427 + 8u;
    float _1449 = cbLight._m0[_1427].x + _704;
    float _1450 = cbLight._m0[_1427].y + _705;
    float _1451 = cbLight._m0[_1427].z + _706;
    float _1455 = inversesqrt(dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451)));
    float _1459 = dot(vec3(0.0), vec3(cbLight._m0[_1427].xyz));
    float _2808 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
    float _1462 = isnan(1.0) ? _2808 : (isnan(_2808) ? 1.0 : min(_2808, 1.0));
    float _1463 = dot(vec3(0.0), vec3(_704, _705, _706));
    float _2819 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
    float _1466 = isnan(1.0) ? _2819 : (isnan(_2819) ? 1.0 : min(_2819, 1.0));
    float _1467 = dot(vec3(cbLight._m0[_1427].xyz), vec3(_1449 * _1455, _1450 * _1455, _1451 * _1455));
    float _2830 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
    float _1478 = (exp2(log2(1.0 - (isnan(1.0) ? _2830 : (isnan(_2830) ? 1.0 : min(_2830, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1484 = (0.5 / ((_1462 + 9.9999999392252902907785028219223e-09) + _1466)) * _1462;
    float _2841 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
    float _1486 = (isnan(1.0) ? _2841 : (isnan(_2841) ? 1.0 : min(_2841, 1.0))) * 0.31831014156341552734375;
    float _1488 = isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0));
    uint _1501 = _1427 + 9u;
    uint _1507 = _1427 | 1u;
    float _1513 = cbLight._m0[_1507].x + _704;
    float _1514 = cbLight._m0[_1507].y + _705;
    float _1515 = cbLight._m0[_1507].z + _706;
    float _1519 = inversesqrt(dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515)));
    float _1523 = dot(vec3(0.0), vec3(cbLight._m0[_1507].xyz));
    float _2857 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
    float _1526 = isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0));
    float _1527 = dot(vec3(cbLight._m0[_1507].xyz), vec3(_1513 * _1519, _1514 * _1519, _1515 * _1519));
    float _2868 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
    float _1536 = (exp2(log2(1.0 - (isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1540 = (0.5 / ((_1526 + 9.9999999392252902907785028219223e-09) + _1466)) * _1526;
    float _2879 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
    float _1542 = (isnan(1.0) ? _2879 : (isnan(_2879) ? 1.0 : min(_2879, 1.0))) * 0.31831014156341552734375;
    float _1543 = isnan(1.0) ? _1437 : (isnan(_1437) ? 1.0 : min(_1437, 1.0));
    float _1553 = (((_1536 * cbLight._m0[_1501].x) * _1542) * _1543) + ((((cbLight._m0[_1438].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1405))) * _1478) * _1486) * _1488);
    float _1554 = (((_1536 * cbLight._m0[_1501].y) * _1542) * _1543) + ((((cbLight._m0[_1438].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1405))) * _1478) * _1486) * _1488);
    float _1555 = (((_1536 * cbLight._m0[_1501].z) * _1542) * _1543) + ((((cbLight._m0[_1438].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1405))) * _1478) * _1486) * _1488);
    float _1671;
    float _1673;
    float _1675;
    if (_1425.y == 0u)
    {
        float _1611 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1612 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1611;
        float _1613 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1611;
        float _1614 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1611;
        uvec4 _1626 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1627 = _1626.x;
        uint _1638 = uint((float(_1626.y) * floor(float(uint(cbSceneParam._m0[85u].y * _732) / _1627))) + floor(float(uint(cbSceneParam._m0[85u].x * _731) / _1627)));
        float _1648 = (log2(_1614 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1649 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        uint _1652 = uint(isnan(14.0) ? _1649 : (isnan(_1649) ? 14.0 : min(_1649, 14.0)));
        uvec4 _1657 = texelFetch(g_lightClusterGridBuffer, int(((_1652 << 2u) + (_1638 << 6u)) >> 2u));
        uint _1658 = _1657.x;
        uint _1659 = _1626.z;
        float _1758;
        float _1760;
        float _1762;
        if (((((1u << ((_1659 >> 4u) & 15u)) + 4294967295u) & _1658) == 0u) || ((_1659 & 240u) == 0u))
        {
            _1758 = 0.0;
            _1760 = 0.0;
            _1762 = 0.0;
        }
        else
        {
            float _1759;
            float _1761;
            float _1763;
            float _1934 = 0.0;
            float _1935 = 0.0;
            float _1936 = 0.0;
            uint _1937 = 0u;
            uint _1946;
            bool _1947;
            for (;;)
            {
                _1946 = texelFetch(g_lightClassification, int((((_1652 << 5u) + (_1638 << 9u)) + (_1937 << 2u)) >> 2u)).x;
                _1947 = _1946 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                if (_1947)
                {
                    frontier_phi_67_pred = _1936;
                    frontier_phi_67_pred_1 = _1935;
                    frontier_phi_67_pred_2 = _1934;
                }
                else
                {
                    float _2121;
                    float _2122;
                    float _2123;
                    uint _2124;
                    _2121 = _1934;
                    _2122 = _1935;
                    _2123 = _1936;
                    _2124 = _1946;
                    float _2028;
                    float _2029;
                    float _2030;
                    for (;;)
                    {
                        uint _2128 = uint(findLSB(_2124)) + (_1937 << 5u);
                        uint _2125 = (_2124 + 4294967295u) & _2124;
                        uint _2130 = _2128 * 48u;
                        vec4 _2144 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2130)).x, texelFetch(g_PointLightRenderingBuffer, int(_2130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2130 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2130 + 3u)).x));
                        uint _2161 = (_2128 * 48u) + 8u;
                        vec3 _2172 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2161)).x, texelFetch(g_PointLightRenderingBuffer, int(_2161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2161 + 2u)).x));
                        float _2176 = _2144.x - _1612;
                        float _2177 = _2144.y - _1613;
                        float _2178 = _2144.z - _1614;
                        float _2179 = dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178));
                        float _2182 = inversesqrt(_2179);
                        float _2191 = 1.0 - (_2179 * _2144.w);
                        float _2905 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
                        float _2193 = sqrt(_2179) * uintBitsToFloat(uvec4(_2151, _2152, _2153, texelFetch(g_PointLightRenderingBuffer, int(((_2128 * 48u) + 4u) + 3u)).x)).w;
                        float _2196 = 1.39999997615814208984375 / (_2193 + 1.39999997615814208984375);
                        float _2197 = _2196 * _2196;
                        float _2200 = ((1.0 - _2197) * dot(vec3(0.0), vec3(_2182 * _2176, _2182 * _2177, _2182 * _2178))) + _2197;
                        float _2202 = (-0.0) - _1612;
                        float _2203 = (-0.0) - _1613;
                        float _2204 = (-0.0) - _1614;
                        float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
                        float _2212 = dot(vec3(0.0), vec3(_2208 * _2202, _2208 * _2203, _2208 * _2204));
                        float _2916 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
                        float _2927 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
                        float _2216 = isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0));
                        float _2220 = (0.5 / (((isnan(1.0) ? _2916 : (isnan(_2916) ? 1.0 : min(_2916, 1.0))) + 9.9999999392252902907785028219223e-09) + _2216)) * _2216;
                        float _2938 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
                        float _2229 = (((isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0))) * 3.1415927410125732421875) / (((_2193 * _2193) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2905 : (isnan(_2905) ? 1.0 : min(_2905, 1.0)));
                        _2028 = (_2229 * _2172.x) + _2121;
                        _2029 = (_2229 * _2172.y) + _2122;
                        _2030 = (_2229 * _2172.z) + _2123;
                        if (_2125 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2121 = _2028;
                            _2122 = _2029;
                            _2123 = _2030;
                            _2124 = _2125;
                        }
                    }
                    frontier_phi_67_pred = _2030;
                    frontier_phi_67_pred_1 = _2029;
                    frontier_phi_67_pred_2 = _2028;
                }
                _1763 = frontier_phi_67_pred;
                _1761 = frontier_phi_67_pred_1;
                _1759 = frontier_phi_67_pred_2;
                uint _1938 = _1937 + 1u;
                if (_1938 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1934 = _1759;
                    _1935 = _1761;
                    _1936 = _1763;
                    _1937 = _1938;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1758 = _1759;
            _1760 = _1761;
            _1762 = _1763;
        }
        uvec4 _1766 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1767 = _1766.z;
        uint _1769 = (_1767 >> 8u) & 15u;
        float _1914;
        float _1916;
        float _1918;
        if (((4294967295u << _1769) & _1658) == 0u)
        {
            _1914 = _1758;
            _1916 = _1760;
            _1918 = _1762;
        }
        else
        {
            float _1930 = inversesqrt(dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            if (_1769 < ((_1767 >> 12u) & 15u))
            {
                float _1915;
                float _1917;
                float _1919;
                float _2107 = _1758;
                float _2108 = _1760;
                float _2109 = _1762;
                uint _2110 = _1769;
                uint _2119;
                bool _2120;
                for (;;)
                {
                    _2119 = texelFetch(g_lightClassification, int((((_1652 << 5u) + (_1638 << 9u)) + (_2110 << 2u)) >> 2u)).x;
                    _2120 = _2119 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    if (_2120)
                    {
                        frontier_phi_81_pred = _2107;
                        frontier_phi_81_pred_1 = _2109;
                        frontier_phi_81_pred_2 = _2108;
                    }
                    else
                    {
                        float _2264;
                        float _2265;
                        float _2266;
                        float _2485;
                        float _2486;
                        float _2487;
                        float _2274 = _2107;
                        float _2275 = _2108;
                        float _2276 = _2109;
                        uint _2277 = _2119;
                        uint _2278;
                        uint _2288;
                        vec4 _2303;
                        float _2304;
                        vec3 _2316;
                        vec4 _2331;
                        vec4 _2346;
                        float _2392;
                        bool _2393;
                        for (;;)
                        {
                            _2288 = ((_2110 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2277));
                            _2278 = (_2277 + 4294967295u) & _2277;
                            uint _2290 = _2288 * 40u;
                            _2303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2290 + 3u)).x));
                            _2304 = _2303.w;
                            uint _2306 = (_2288 * 40u) + 8u;
                            _2316 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2306 + 2u)).x));
                            uint _2318 = (_2288 * 40u) + 16u;
                            _2331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 3u)).x));
                            uint _2333 = (_2288 * 40u) + 20u;
                            _2346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2333 + 3u)).x));
                            uint _2348 = (_2288 * 40u) + 24u;
                            vec4 _2361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2348 + 3u)).x));
                            uint _2367 = (_2288 * 40u) + 28u;
                            vec4 _2380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2367 + 3u)).x));
                            _2392 = fma(_1614, _2380.z, fma(_1613, _2380.y, _2380.x * _1612)) + _2380.w;
                            _2393 = !((fma(_1614, _2361.z, fma(_1613, _2361.y, _2361.x * _1612)) + _2361.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            if (_2393)
                            {
                                float _2427 = _2303.x - _1612;
                                float _2428 = _2303.y - _1613;
                                float _2429 = _2303.z - _1614;
                                float _2430 = dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429));
                                float _2433 = inversesqrt(_2430);
                                float _2440 = 1.0 - (_2430 / (_2304 * _2304));
                                float _2949 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
                                float _2442 = sqrt(_2430) * uintBitsToFloat(uvec4(_2396, _2397, _2398, texelFetch(g_SpotLightRenderingBuffer, int(((_2288 * 40u) + 4u) + 3u)).x)).w;
                                float _2444 = 1.39999997615814208984375 / (_2442 + 1.39999997615814208984375);
                                float _2445 = _2444 * _2444;
                                float _2448 = (fma(_1614, _2331.z, fma(_1613, _2331.y, _2331.x * _1612)) + _2331.w) / _2392;
                                float _2449 = (fma(_1614, _2346.z, fma(_1613, _2346.y, _2346.x * _1612)) + _2346.w) / _2392;
                                float _2453 = 1.0 - dot(vec2(_2448, _2449), vec2(_2448, _2449));
                                float _2960 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
                                float _2461 = dot(vec3(0.0), vec3((-0.0) - (_1612 * _1930), (-0.0) - (_1613 * _1930), (-0.0) - (_1614 * _1930)));
                                float _2971 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
                                float _2469 = ((1.0 - _2445) * dot(vec3(0.0), vec3(_2433 * _2427, _2433 * _2428, _2433 * _2429))) + _2445;
                                float _2982 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
                                float _2470 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
                                float _2474 = (0.5 / (((isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0))) + 9.9999999392252902907785028219223e-09) + _2470)) * _2470;
                                float _2993 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
                                float _2481 = ((isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0))) * (isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0)))) * (((isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0))) * 3.1415927410125732421875) / (((_2442 * _2442) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2481 * _2316.x;
                                frontier_phi_87_pred_1 = _2481 * _2316.y;
                                frontier_phi_87_pred_2 = _2481 * _2316.z;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                            }
                            _2485 = frontier_phi_87_pred;
                            _2486 = frontier_phi_87_pred_1;
                            _2487 = frontier_phi_87_pred_2;
                            _2264 = _2485 + _2274;
                            _2265 = _2486 + _2275;
                            _2266 = _2487 + _2276;
                            if (_2278 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2274 = _2264;
                                _2275 = _2265;
                                _2276 = _2266;
                                _2277 = _2278;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2264;
                        frontier_phi_81_pred_1 = _2266;
                        frontier_phi_81_pred_2 = _2265;
                    }
                    _1915 = frontier_phi_81_pred;
                    _1919 = frontier_phi_81_pred_1;
                    _1917 = frontier_phi_81_pred_2;
                    uint _2111 = _2110 + 1u;
                    if (_2111 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2107 = _1915;
                        _2108 = _1917;
                        _2109 = _1919;
                        _2110 = _2111;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _1919;
                frontier_phi_56_57_ladder_1 = _1917;
                frontier_phi_56_57_ladder_2 = _1915;
            }
            else
            {
                frontier_phi_56_57_ladder = _1762;
                frontier_phi_56_57_ladder_1 = _1760;
                frontier_phi_56_57_ladder_2 = _1758;
            }
            _1914 = frontier_phi_56_57_ladder_2;
            _1916 = frontier_phi_56_57_ladder_1;
            _1918 = frontier_phi_56_57_ladder;
        }
        float _1923 = isnan(1.0) ? _744 : (isnan(_744) ? 1.0 : min(_744, 1.0));
        _1671 = ((_1914 * 0.039999999105930328369140625) * _1923) + _1553;
        _1673 = ((_1916 * 0.039999999105930328369140625) * _1923) + _1554;
        _1675 = ((_1918 * 0.039999999105930328369140625) * _1923) + _1555;
    }
    else
    {
        _1671 = _1553;
        _1673 = _1554;
        _1675 = _1555;
    }
    uint _1681 = _1421 + 9u;
    uint _1682 = _1681 + uint(cbMatDynParam._m0[0u].w);
    float _1688 = (cbSceneParam._m0[72u].y * ((_664 * ((_655 - _617) - (_655 * _628))) + _617)) * cbInstanceData._m0[_1682].x;
    float _1689 = (cbSceneParam._m0[72u].y * ((_664 * ((_656 - _618) - (_656 * _628))) + _618)) * cbInstanceData._m0[_1682].y;
    float _1690 = (((_664 * ((_657 - _619) - (_657 * _628))) + _619) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1682].z;
    float _1697 = _1688 + ((_1671 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _1165)) * cbPerFrame._m0[3u].x);
    float _1698 = _1689 + ((_1673 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _1165)) * cbPerFrame._m0[3u].x);
    float _1699 = _1690 + ((_1675 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _1165)) * cbPerFrame._m0[3u].x);
    float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1708 = cbMtdParam._m0[2u].x * _1688;
    float _1709 = cbMtdParam._m0[2u].y * _1689;
    float _1710 = cbMtdParam._m0[2u].z * _1690;
    float _3024 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1712 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
    uint _1713 = _1421 + 6u;
    float _1721 = _731 / cbSceneParam._m0[86u].x;
    float _1722 = _732 / cbSceneParam._m0[86u].y;
    vec4 _1736 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1721, _1722, (log2((isnan(cbSceneParam._m0[77u].w) ? _699 : (isnan(_699) ? cbSceneParam._m0[77u].w : min(_699, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1738 = _1736.x;
    float _1739 = _1736.y;
    float _1740 = _1736.z;
    float _1741 = _1736.w;
    float _1815;
    float _1817;
    float _1819;
    float _1821;
    if (_699 > cbSceneParam._m0[78u].w)
    {
        float _1777 = isnan(_699) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _699 : min(cbSceneParam._m0[80u].w, _699));
        float _1778 = _1777 / _699;
        float _1789 = _1778 * _273;
        float _1790 = _274 * _1778;
        float _1791 = (-0.0) - _1790;
        float _1792 = _1778 * _275;
        float _1794 = (cbSceneParam._m0[77u].w * _1791) / _1777;
        float _1795 = _1794 + cbSceneParam._m0[79u].w;
        float _1796 = cbSceneParam._m0[79u].w - _1790;
        float _1802 = sqrt(((_1789 * _1789) + (_1790 * _1790)) + (_1792 * _1792));
        float _1805 = (1.0 - (cbSceneParam._m0[77u].w / _1777)) * _1802;
        float _1811 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1813 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2038;
        if (abs((_1791 - _1794) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2038 = ((((_1795 > 0.0) ? exp2(_1811 * _1795) : (2.0 - exp2(_1813 * _1795))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1805;
        }
        else
        {
            float _1960 = 1.0 / cbSceneParam._m0[80u].x;
            float _1961 = isnan(_1796) ? _1795 : (isnan(_1795) ? _1796 : max(_1795, _1796));
            float _1962 = isnan(_1796) ? _1795 : (isnan(_1795) ? _1796 : min(_1795, _1796));
            float _1971 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : min(_1961, 0.0));
            float _1972 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : min(_1962, 0.0));
            _2038 = ((abs(_1802 / _1791) * cbSceneParam._m0[80u].y) * ((((_1971 - _1972) * 2.0) - ((exp2(_1811 * (isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)))) - exp2(_1811 * (isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))))) * _1960)) - ((exp2(_1813 * _1971) - exp2(_1813 * _1972)) * _1960))) + (_1805 * cbSceneParam._m0[80u].z);
        }
        vec4 _2040 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1721, _1722, 1.0), 0.0);
        float _2049 = exp2((_2038 * (-1.44269502162933349609375)) * (1.0 - _2040.w));
        float _2050 = log2(_2049);
        float _2066 = log2(_1741);
        _1815 = (exp2(_2066 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2050 * cbSceneParam._m0[78u].x)) * _2040.x) / cbSceneParam._m0[78u].x)) + _1738;
        _1817 = (exp2(_2066 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2050 * cbSceneParam._m0[78u].y)) * _2040.y) / cbSceneParam._m0[78u].y)) + _1739;
        _1819 = (exp2(_2066 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2050 * cbSceneParam._m0[78u].z)) * _2040.z) / cbSceneParam._m0[78u].z)) + _1740;
        _1821 = _2049 * _1741;
    }
    else
    {
        _1815 = _1738;
        _1817 = _1739;
        _1819 = _1740;
        _1821 = _1741;
    }
    bool _2076;
    vec4 _1830;
    vec4 _1853;
    float _1855;
    float _1859;
    float _1860;
    float _1861;
    float _1864;
    float _1867;
    float _1870;
    float _1871;
    bool _1882;
    for (;;)
    {
        _1830 = cbMatDynParam._m0[0u];
        float _1832 = roundEven(_1830.y);
        bool _1833 = _1832 == 3.0;
        float _1835 = log2(_1821);
        float _1839 = exp2(_1835 * cbSceneParam._m0[78u].x);
        float _1840 = exp2(_1835 * cbSceneParam._m0[78u].y);
        float _1841 = exp2(_1835 * cbSceneParam._m0[78u].z);
        float _1842 = _1839 * _1700;
        float _1843 = _1840 * _1701;
        float _1844 = _1841 * _1702;
        float _1851 = _713 + (-0.5);
        _1853 = cbMtdParam._m0[1u];
        _1855 = _1853.y * _1851;
        float _1858 = (_1832 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1859 = _1858 * (_1833 ? _1842 : (_1842 + (cbSceneParam._m0[72u].w * _1815)));
        _1860 = _1858 * (_1833 ? _1843 : (_1843 + (cbSceneParam._m0[72u].w * _1817)));
        _1861 = _1858 * (_1833 ? _1844 : (_1844 + (cbSceneParam._m0[72u].w * _1819)));
        _1864 = ((_1708 * _1712) * _1839) * _1858;
        _1867 = ((_1709 * _1712) * _1840) * _1858;
        _1870 = ((_1710 * _1712) * _1841) * _1858;
        _1871 = _1851 * 0.999000012874603271484375;
        _1882 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1882)
        {
            if ((cbInstanceData._m0[_1421 + 7u].x + _1871) < 0.5)
            {
                _2076 = true;
                break;
            }
        }
        uint _1995 = _1681 + uint(_1830.w);
        if ((cbInstanceData._m0[_1995].w < 1.0) && ((cbInstanceData._m0[_1995].w + _1871) < 0.5))
        {
            _2076 = true;
            break;
        }
        if ((_1855 + 1.0) < _1853.x)
        {
            _2076 = true;
            break;
        }
        _2076 = false;
        break;
    }
    float _2234;
    if (_2076)
    {
        discard_state = true;
        _2234 = 0.0;
    }
    else
    {
        _2234 = cbInstanceData._m0[_1713].w;
    }
    SV_Target.x = _1859;
    SV_Target.y = _1860;
    SV_Target.z = _1861;
    SV_Target.w = _2234;
    SV_Target_1.x = _1864;
    SV_Target_1.y = _1867;
    SV_Target_1.z = _1870;
    SV_Target_1.w = cbInstanceData._m0[_1713].w;
    discard_exit();
}


