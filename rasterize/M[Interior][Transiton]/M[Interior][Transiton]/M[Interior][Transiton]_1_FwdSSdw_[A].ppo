#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _911;
uint _2122;
uint _2123;
uint _2124;
uint _2367;
uint _2368;
uint _2369;
float _2592;
float _2593;
float _2594;
float _2595;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _294 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _332 = cbMtdParam._m0[27u].w + _273;
    float _333 = cbMtdParam._m0[28u].x + _274;
    float _334 = cbMtdParam._m0[28u].y + _275;
    float _351 = (-0.0) - dot(vec3(_332, _333, _334), vec3(_205 * _197, _205 * _198, _205 * _199));
    float _352 = (-0.0) - dot(vec3(_332, _333, _334), vec3(_216 * TANGENT.x, _216 * TANGENT.y, _216 * TANGENT.z));
    float _353 = (-0.0) - dot(vec3(_332, _333, _334), vec3((-0.0) - (NORMAL.x * _212), (-0.0) - (NORMAL.y * _212), (-0.0) - (NORMAL.z * _212)));
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _360 = _357 * _353;
    float _363 = ((_357 * _351) + (((_294.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w)) * cbMtdParam._m0[24u].x;
    float _364 = ((_357 * _352) + (((_294.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x)) * cbMtdParam._m0[23u].w;
    float _365 = fract(TEXCOORD.x);
    float _366 = fract(TEXCOORD.y);
    float _372;
    if (_363 > 0.0)
    {
        _372 = (1.0 - _365) / _363;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_363 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _365) / _363;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _372 = frontier_phi_3_2_ladder;
    }
    float _380;
    if (_364 > 0.0)
    {
        _380 = (1.0 - _366) / _364;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_364 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _366) / _364;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _380 = frontier_phi_7_6_ladder;
    }
    float _384 = (_360 > 0.0) ? (cbMtdParam._m0[17u].x / _360) : 5000.0;
    float _385 = isnan(_380) ? _372 : (isnan(_372) ? _380 : min(_372, _380));
    float _386 = isnan(_384) ? _385 : (isnan(_385) ? _384 : min(_385, _384));
    float _390 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _397 = ((_386 * _360) + _390) / _390;
    vec4 _422 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_365 + (-0.5)) + (_386 * _363)) / _397) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_366 + (-0.5)) + (_386 * _364)) / _397) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _432 = cbMtdParam._m0[9u].x * _422.x;
    float _433 = cbMtdParam._m0[9u].y * _422.y;
    float _434 = cbMtdParam._m0[9u].z * _422.z;
    float _446 = (cbMtdParam._m0[19u].y * _432) * cbMtdParam._m0[16u].x;
    float _448 = (cbMtdParam._m0[19u].y * _433) * cbMtdParam._m0[16u].y;
    float _450 = (cbMtdParam._m0[19u].y * _434) * cbMtdParam._m0[16u].z;
    vec4 _474 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _479 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _485 = ((_474.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _487 = (-0.0) - (cbMtdParam._m0[21u].x * ((_474.x * 0.5) + (-0.25)));
    float _488 = fract(_479);
    float _490 = fract(_479 + 0.5);
    vec4 _517 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_488 * _487) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_485 * _488) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _519 = _517.x;
    float _525 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_490 * _487) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_485 * _490) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _519) * abs((_488 * 2.0) + (-1.0))) + _519;
    float _531 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _535 = fract(abs(_531));
    float _545 = sin(cbMtdParam._m0[21u].z);
    float _546 = cos(cbMtdParam._m0[21u].z);
    float _547 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _548 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _573 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_548, (-0.0) - _545, _546 * _547) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_548, _546, _547 * _545) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_531 >= ((-0.0) - _531)) ? _535 : ((-0.0) - _535)) * cbMtdParam._m0[18u].z) - _525)) + cbMtdParam._m0[18u].w;
    float _574 = ceil(_573);
    float _2614 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _2614 : (isnan(_2614) ? 1.0 : min(_2614, 1.0));
    float _595 = ((((cbMtdParam._m0[21u].w * _432) * cbMtdParam._m0[15u].x) - _446) * _575) + _446;
    float _596 = ((((cbMtdParam._m0[21u].w * _433) * cbMtdParam._m0[15u].y) - _448) * _575) + _448;
    float _597 = ((((cbMtdParam._m0[21u].w * _434) * cbMtdParam._m0[15u].z) - _450) * _575) + _450;
    float _601 = abs(cbMtdParam._m0[20u].w * _573);
    float _605 = (((_601 * cbMtdParam._m0[18u].y) - _525) * _601) + _525;
    float _2625 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _606 = isnan(1.0) ? _2625 : (isnan(_2625) ? 1.0 : min(_2625, 1.0));
    vec4 _618 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _633 = (cbMtdParam._m0[14u].x * _618.x) * cbMtdParam._m0[19u].x;
    float _634 = (cbMtdParam._m0[14u].y * _618.y) * cbMtdParam._m0[19u].x;
    float _635 = (cbMtdParam._m0[14u].z * _618.z) * cbMtdParam._m0[19u].x;
    float _642 = exp2(log2(_606) * cbMtdParam._m0[20u].x);
    float _677 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _681 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _682 = _273 * _681;
    float _683 = _274 * _681;
    float _684 = _275 * _681;
    vec4 _689 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _691 = _689.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _761 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _767 = (cbMatDynParam._m0[5u].x * _761) + cbMatDynParam._m0[5u].y;
        float _2636 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _2636 : (isnan(_2636) ? 1.0 : min(_2636, 1.0));
        float _772 = (cbMatDynParam._m0[5u].z * _761) + cbMatDynParam._m0[5u].w;
        float _2647 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2647 : (isnan(_2647) ? 1.0 : min(_2647, 1.0))) - _768)) + _768) < ((_691 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _704 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _705 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _714 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_704 * cbSceneParam._m0[86u].x, _705 * cbSceneParam._m0[86u].y));
    float _717 = _714.x * TEXCOORD_4;
    float _718 = (-0.0) - _682;
    float _719 = (-0.0) - _683;
    float _720 = (-0.0) - _684;
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _910;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _833 = (cbModelParam._m0[37u].x * ((((fma(_750, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _835 = (cbModelParam._m0[37u].y * ((((fma(_750, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _836 = (((((fma(_750, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _835, _836), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _835, _836), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _835, _836), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _835, _836), 0.0);
        float _873 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _883 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _893 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _903 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_860.x + (-0.5));
        float _905 = _903 * (_860.y + (-0.5));
        float _906 = _903 * (_860.z + (-0.5));
        _910 = _873 * (_839.z + (-0.5));
        _912 = _873 * (_839.y + (-0.5));
        _913 = _873 * (_839.x + (-0.5));
        _914 = _883 * (_846.z + (-0.5));
        _915 = _883 * (_846.y + (-0.5));
        _916 = _883 * (_846.x + (-0.5));
        _917 = _893 * (_853.z + (-0.5));
        _918 = _893 * (_853.y + (-0.5));
        _919 = _893 * (_853.x + (-0.5));
        _920 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        _921 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        _922 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    }
    else
    {
        _910 = _911;
        _912 = _911;
        _913 = _911;
        _914 = _911;
        _915 = _911;
        _916 = _911;
        _917 = _911;
        _918 = _911;
        _919 = _911;
        _920 = _911;
        _921 = _911;
        _922 = _911;
    }
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _978 = (cbModelParam._m0[38u].x * ((((fma(_750, cbModelParam._m0[30u].z, fma(_746, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _742)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _979 = (cbModelParam._m0[38u].y * ((((fma(_750, cbModelParam._m0[31u].z, fma(_746, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _742)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _980 = (((((fma(_750, cbModelParam._m0[32u].z, fma(_746, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _742)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        float _1015 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1003.x + (-0.5));
        float _1047 = _1045 * (_1003.y + (-0.5));
        float _1048 = _1045 * (_1003.z + (-0.5));
        _1052 = _1015 * (_982.z + (-0.5));
        _1053 = _1015 * (_982.y + (-0.5));
        _1054 = _1015 * (_982.x + (-0.5));
        _1055 = _1025 * (_989.z + (-0.5));
        _1056 = _1025 * (_989.y + (-0.5));
        _1057 = _1025 * (_989.x + (-0.5));
        _1058 = _1035 * (_996.z + (-0.5));
        _1059 = _1035 * (_996.y + (-0.5));
        _1060 = _1035 * (_996.x + (-0.5));
        _1061 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        _1062 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        _1063 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    }
    else
    {
        _1052 = _911;
        _1053 = _911;
        _1054 = _911;
        _1055 = _911;
        _1056 = _911;
        _1057 = _911;
        _1058 = _911;
        _1059 = _911;
        _1060 = _911;
        _1061 = _911;
        _1062 = _911;
        _1063 = _911;
    }
    float _1078 = _682 * (-0.5);
    float _1079 = _683 * (-0.5);
    float _1080 = _684 * (-0.5);
    float _1081 = dot(vec4(_1078, _1079, _1080, 1.0), vec4(_1054, _1057, _1060, _1063));
    float _1084 = dot(vec4(_1078, _1079, _1080, 1.0), vec4(_1053, _1056, _1059, _1062));
    float _1087 = dot(vec4(_1078, _1079, _1080, 1.0), vec4(_1052, _1055, _1058, _1061));
    float _1122;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1094 = dot(vec4(_1078, _1079, _1080, 1.0), vec4(_910, _914, _917, _920));
        float _1098 = dot(vec4(_1078, _1079, _1080, 1.0), vec4(_912, _915, _918, _921));
        float _1102 = dot(vec4(_1078, _1079, _1080, 1.0), vec4(_913, _916, _919, _922));
        float _1109 = dot(vec4(cbModelParam._m0[39u]), vec4(_1078, _1079, _1080, 1.0));
        _1122 = dot(vec3(isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)), isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)), isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1109) ? 0.0 : (isnan(0.0) ? _1109 : max(0.0, _1109))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1122 = 1.0;
    }
    float _1133;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1124 = dot(vec4(cbModelParam._m0[40u]), vec4(_1078, _1079, _1080, 1.0));
        _1133 = dot(vec3(isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)), isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)), isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1124) ? 0.0 : (isnan(0.0) ? _1124 : max(0.0, _1124))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1133 = 1.0;
    }
    float _1137 = (_1133 * cbModelParam._m0[1u].x) + (_1122 * (1.0 - cbModelParam._m0[1u].x));
    float _1143 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1224;
    float _1226;
    float _1228;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1191 = fma(_750, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _742)) + cbModelParam._m0[13u].w;
        float _1195 = fma(_750, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _742)) + cbModelParam._m0[14u].w;
        float _1199 = fma(_750, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _742)) + cbModelParam._m0[15u].w;
        float _1202 = fma(_720, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _718));
        float _1205 = fma(_720, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _718));
        float _1208 = fma(_720, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _718));
        float _1234;
        if (_1202 > 0.0)
        {
            _1234 = abs((1.0 - _1191) / _1202);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1202 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1191 + 1.0) / _1202);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1234 = frontier_phi_25_23_ladder;
        }
        float _1532;
        if (_1205 > 0.0)
        {
            _1532 = abs((1.0 - _1195) / _1205);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1205 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1195 + 1.0) / _1205);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1532 = frontier_phi_34_30_ladder;
        }
        float _1854;
        if (_1208 > 0.0)
        {
            _1854 = abs((1.0 - _1199) / _1208);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1208 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1199 + 1.0) / _1208);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1854 = frontier_phi_48_41_ladder;
        }
        float _1856 = isnan(_1532) ? _1234 : (isnan(_1234) ? _1532 : min(_1234, _1532));
        float _1857 = isnan(_1854) ? _1856 : (isnan(_1856) ? _1854 : min(_1856, _1854));
        float _1861 = (_1857 * _1202) + _1191;
        float _1862 = (_1857 * _1205) + _1195;
        float _1863 = (_1857 * _1208) + _1199;
        float _1864 = _1857 * 9.9999997473787516355514526367188e-05;
        float _1865 = (-1.0) - _1864;
        float _1867 = _1864 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1863 > _1867) || ((_1863 < _1865) || ((_1862 > _1867) || ((_1862 < _1865) || ((_1861 < _1865) || (_1861 > _1867))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1990 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1863, cbModelParam._m0[9u].z, fma(_1862, cbModelParam._m0[9u].y, _1861 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1863, cbModelParam._m0[10u].z, fma(_1862, cbModelParam._m0[10u].y, _1861 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1863, cbModelParam._m0[11u].z, fma(_1862, cbModelParam._m0[11u].y, _1861 * cbModelParam._m0[11u].x))), _1143);
            frontier_phi_24_48_ladder = _1990.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _1990.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _1990.x * cbModelParam._m0[1u].y;
        }
        _1224 = frontier_phi_24_48_ladder_2;
        _1226 = frontier_phi_24_48_ladder_1;
        _1228 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1212 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_718, _719, _720), _1143);
        _1224 = _1212.x * cbModelParam._m0[1u].y;
        _1226 = _1212.y * cbModelParam._m0[1u].y;
        _1228 = _1212.z * cbModelParam._m0[1u].y;
    }
    float _1231 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1319;
    float _1321;
    float _1323;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1283 = fma(_750, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _742)) + cbModelParam._m0[21u].w;
        float _1287 = fma(_750, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _742)) + cbModelParam._m0[22u].w;
        float _1291 = fma(_750, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _742)) + cbModelParam._m0[23u].w;
        float _1294 = fma(_720, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _718));
        float _1297 = fma(_720, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _718));
        float _1300 = fma(_720, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _718));
        float _1537;
        if (_1294 > 0.0)
        {
            _1537 = abs((1.0 - _1283) / _1294);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1294 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1283 + 1.0) / _1294);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1537 = frontier_phi_36_32_ladder;
        }
        float _1880;
        if (_1297 > 0.0)
        {
            _1880 = abs((1.0 - _1287) / _1297);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1297 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1287 + 1.0) / _1297);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1880 = frontier_phi_50_43_ladder;
        }
        float _2052;
        if (_1300 > 0.0)
        {
            _2052 = abs((1.0 - _1291) / _1300);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1300 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1291 + 1.0) / _1300);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2052 = frontier_phi_68_61_ladder;
        }
        float _2054 = isnan(_1880) ? _1537 : (isnan(_1537) ? _1880 : min(_1537, _1880));
        float _2055 = isnan(_2052) ? _2054 : (isnan(_2054) ? _2052 : min(_2054, _2052));
        float _2059 = (_2055 * _1294) + _1283;
        float _2060 = (_2055 * _1297) + _1287;
        float _2061 = (_2055 * _1300) + _1291;
        float _2062 = _2055 * 9.9999997473787516355514526367188e-05;
        float _2063 = (-1.0) - _2062;
        float _2065 = _2062 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2061 > _2065) || ((_2061 < _2063) || ((_2060 > _2065) || ((_2060 < _2063) || ((_2059 < _2063) || (_2059 > _2065))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2230 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2061, cbModelParam._m0[17u].z, fma(_2060, cbModelParam._m0[17u].y, _2059 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2061, cbModelParam._m0[18u].z, fma(_2060, cbModelParam._m0[18u].y, _2059 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2061, cbModelParam._m0[19u].z, fma(_2060, cbModelParam._m0[19u].y, _2059 * cbModelParam._m0[19u].x))), _1231);
            frontier_phi_33_68_ladder = _2230.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2230.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2230.x * cbModelParam._m0[1u].z;
        }
        _1319 = frontier_phi_33_68_ladder_2;
        _1321 = frontier_phi_33_68_ladder_1;
        _1323 = frontier_phi_33_68_ladder;
    }
    else
    {
        vec4 _1303 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_718, _719, _720), _1231);
        _1319 = _1303.x * cbModelParam._m0[1u].z;
        _1321 = _1303.y * cbModelParam._m0[1u].z;
        _1323 = _1303.z * cbModelParam._m0[1u].z;
    }
    float _1335 = _717 * 0.01200000010430812835693359375;
    float _1337 = _1335 * ((cbModelParam._m0[1u].w * (_1319 - _1224)) + _1224);
    float _1338 = _1335 * ((cbModelParam._m0[1u].w * (_1321 - _1226)) + _1226);
    float _1339 = _1335 * ((cbModelParam._m0[1u].w * (_1323 - _1228)) + _1228);
    float _1360 = fma(_1339, cbSceneParam._m0[89u].z, fma(_1338, cbSceneParam._m0[89u].y, _1337 * cbSceneParam._m0[89u].x));
    float _1363 = fma(_1339, cbSceneParam._m0[90u].z, fma(_1338, cbSceneParam._m0[90u].y, _1337 * cbSceneParam._m0[90u].x));
    float _1366 = fma(_1339, cbSceneParam._m0[91u].z, fma(_1338, cbSceneParam._m0[91u].y, _1337 * cbSceneParam._m0[91u].x));
    vec4 _1374 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_704, _705));
    float _1376 = _1374.w;
    uint _1392 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1396 = floatBitsToUint(cbInstanceData._m0[_1392 + 5u]);
    uint _1398 = _1396.x * 14u;
    uint _1399 = _1398 + 13u;
    float _1404 = _717 + (-1.0);
    float _1407 = (cbLight._m0[_1399].x * _1404) + 1.0;
    float _1408 = (cbLight._m0[_1399].y * _1404) + 1.0;
    uint _1409 = _1398 + 8u;
    float _1420 = cbLight._m0[_1398].x + _682;
    float _1421 = cbLight._m0[_1398].y + _683;
    float _1422 = cbLight._m0[_1398].z + _684;
    float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
    float _1430 = dot(vec3(0.0), vec3(cbLight._m0[_1398].xyz));
    float _2773 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
    float _1433 = isnan(1.0) ? _2773 : (isnan(_2773) ? 1.0 : min(_2773, 1.0));
    float _1434 = dot(vec3(0.0), vec3(_682, _683, _684));
    float _2784 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
    float _1437 = isnan(1.0) ? _2784 : (isnan(_2784) ? 1.0 : min(_2784, 1.0));
    float _1438 = dot(vec3(cbLight._m0[_1398].xyz), vec3(_1420 * _1426, _1421 * _1426, _1422 * _1426));
    float _2795 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
    float _1449 = (exp2(log2(1.0 - (isnan(1.0) ? _2795 : (isnan(_2795) ? 1.0 : min(_2795, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1455 = (0.5 / ((_1433 + 9.9999999392252902907785028219223e-09) + _1437)) * _1433;
    float _2806 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
    float _1457 = (isnan(1.0) ? _2806 : (isnan(_2806) ? 1.0 : min(_2806, 1.0))) * 0.31831014156341552734375;
    float _1459 = isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0));
    uint _1472 = _1398 + 9u;
    uint _1478 = _1398 | 1u;
    float _1484 = cbLight._m0[_1478].x + _682;
    float _1485 = cbLight._m0[_1478].y + _683;
    float _1486 = cbLight._m0[_1478].z + _684;
    float _1490 = inversesqrt(dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486)));
    float _1494 = dot(vec3(0.0), vec3(cbLight._m0[_1478].xyz));
    float _2822 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
    float _1497 = isnan(1.0) ? _2822 : (isnan(_2822) ? 1.0 : min(_2822, 1.0));
    float _1498 = dot(vec3(cbLight._m0[_1478].xyz), vec3(_1484 * _1490, _1485 * _1490, _1486 * _1490));
    float _2833 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
    float _1507 = (exp2(log2(1.0 - (isnan(1.0) ? _2833 : (isnan(_2833) ? 1.0 : min(_2833, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1511 = (0.5 / ((_1497 + 9.9999999392252902907785028219223e-09) + _1437)) * _1497;
    float _2844 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
    float _1513 = (isnan(1.0) ? _2844 : (isnan(_2844) ? 1.0 : min(_2844, 1.0))) * 0.31831014156341552734375;
    float _1514 = isnan(1.0) ? _1408 : (isnan(_1408) ? 1.0 : min(_1408, 1.0));
    float _1524 = (((_1507 * cbLight._m0[_1472].x) * _1513) * _1514) + ((((cbLight._m0[_1409].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1376))) * _1449) * _1457) * _1459);
    float _1525 = (((_1507 * cbLight._m0[_1472].y) * _1513) * _1514) + ((((cbLight._m0[_1409].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1376))) * _1449) * _1457) * _1459);
    float _1526 = (((_1507 * cbLight._m0[_1472].z) * _1513) * _1514) + ((((cbLight._m0[_1409].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1376))) * _1449) * _1457) * _1459);
    float _1642;
    float _1644;
    float _1646;
    if (_1396.y == 0u)
    {
        float _1582 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1583 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1582;
        float _1584 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1582;
        float _1585 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1582;
        uvec4 _1597 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1598 = _1597.x;
        uint _1609 = uint((float(_1597.y) * floor(float(uint(cbSceneParam._m0[85u].y * _705) / _1598))) + floor(float(uint(cbSceneParam._m0[85u].x * _704) / _1598)));
        float _1619 = (log2(_1585 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1620 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        uint _1623 = uint(isnan(14.0) ? _1620 : (isnan(_1620) ? 14.0 : min(_1620, 14.0)));
        uvec4 _1628 = texelFetch(g_lightClusterGridBuffer, int(((_1623 << 2u) + (_1609 << 6u)) >> 2u));
        uint _1629 = _1628.x;
        uint _1630 = _1597.z;
        float _1729;
        float _1731;
        float _1733;
        if (((((1u << ((_1630 >> 4u) & 15u)) + 4294967295u) & _1629) == 0u) || ((_1630 & 240u) == 0u))
        {
            _1729 = 0.0;
            _1731 = 0.0;
            _1733 = 0.0;
        }
        else
        {
            float _1730;
            float _1732;
            float _1734;
            float _1905 = 0.0;
            float _1906 = 0.0;
            float _1907 = 0.0;
            uint _1908 = 0u;
            uint _1917;
            bool _1918;
            for (;;)
            {
                _1917 = texelFetch(g_lightClassification, int((((_1623 << 5u) + (_1609 << 9u)) + (_1908 << 2u)) >> 2u)).x;
                _1918 = _1917 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                if (_1918)
                {
                    frontier_phi_63_pred = _1907;
                    frontier_phi_63_pred_1 = _1906;
                    frontier_phi_63_pred_2 = _1905;
                }
                else
                {
                    float _2092;
                    float _2093;
                    float _2094;
                    uint _2095;
                    _2092 = _1905;
                    _2093 = _1906;
                    _2094 = _1907;
                    _2095 = _1917;
                    float _1999;
                    float _2000;
                    float _2001;
                    for (;;)
                    {
                        uint _2099 = uint(findLSB(_2095)) + (_1908 << 5u);
                        uint _2096 = (_2095 + 4294967295u) & _2095;
                        uint _2101 = _2099 * 48u;
                        vec4 _2115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2101)).x, texelFetch(g_PointLightRenderingBuffer, int(_2101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2101 + 3u)).x));
                        uint _2132 = (_2099 * 48u) + 8u;
                        vec3 _2143 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2132)).x, texelFetch(g_PointLightRenderingBuffer, int(_2132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2132 + 2u)).x));
                        float _2147 = _2115.x - _1583;
                        float _2148 = _2115.y - _1584;
                        float _2149 = _2115.z - _1585;
                        float _2150 = dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149));
                        float _2153 = inversesqrt(_2150);
                        float _2162 = 1.0 - (_2150 * _2115.w);
                        float _2870 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
                        float _2164 = sqrt(_2150) * uintBitsToFloat(uvec4(_2122, _2123, _2124, texelFetch(g_PointLightRenderingBuffer, int(((_2099 * 48u) + 4u) + 3u)).x)).w;
                        float _2167 = 1.39999997615814208984375 / (_2164 + 1.39999997615814208984375);
                        float _2168 = _2167 * _2167;
                        float _2171 = ((1.0 - _2168) * dot(vec3(0.0), vec3(_2153 * _2147, _2153 * _2148, _2153 * _2149))) + _2168;
                        float _2173 = (-0.0) - _1583;
                        float _2174 = (-0.0) - _1584;
                        float _2175 = (-0.0) - _1585;
                        float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
                        float _2183 = dot(vec3(0.0), vec3(_2179 * _2173, _2179 * _2174, _2179 * _2175));
                        float _2881 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
                        float _2892 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
                        float _2187 = isnan(1.0) ? _2892 : (isnan(_2892) ? 1.0 : min(_2892, 1.0));
                        float _2191 = (0.5 / (((isnan(1.0) ? _2881 : (isnan(_2881) ? 1.0 : min(_2881, 1.0))) + 9.9999999392252902907785028219223e-09) + _2187)) * _2187;
                        float _2903 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
                        float _2200 = (((isnan(1.0) ? _2903 : (isnan(_2903) ? 1.0 : min(_2903, 1.0))) * 3.1415927410125732421875) / (((_2164 * _2164) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2870 : (isnan(_2870) ? 1.0 : min(_2870, 1.0)));
                        _1999 = (_2200 * _2143.x) + _2092;
                        _2000 = (_2200 * _2143.y) + _2093;
                        _2001 = (_2200 * _2143.z) + _2094;
                        if (_2096 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2092 = _1999;
                            _2093 = _2000;
                            _2094 = _2001;
                            _2095 = _2096;
                        }
                    }
                    frontier_phi_63_pred = _2001;
                    frontier_phi_63_pred_1 = _2000;
                    frontier_phi_63_pred_2 = _1999;
                }
                _1734 = frontier_phi_63_pred;
                _1732 = frontier_phi_63_pred_1;
                _1730 = frontier_phi_63_pred_2;
                uint _1909 = _1908 + 1u;
                if (_1909 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1905 = _1730;
                    _1906 = _1732;
                    _1907 = _1734;
                    _1908 = _1909;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1729 = _1730;
            _1731 = _1732;
            _1733 = _1734;
        }
        uvec4 _1737 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1738 = _1737.z;
        uint _1740 = (_1738 >> 8u) & 15u;
        float _1885;
        float _1887;
        float _1889;
        if (((4294967295u << _1740) & _1629) == 0u)
        {
            _1885 = _1729;
            _1887 = _1731;
            _1889 = _1733;
        }
        else
        {
            float _1901 = inversesqrt(dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1740 < ((_1738 >> 12u) & 15u))
            {
                float _1886;
                float _1888;
                float _1890;
                float _2078 = _1729;
                float _2079 = _1731;
                float _2080 = _1733;
                uint _2081 = _1740;
                uint _2090;
                bool _2091;
                for (;;)
                {
                    _2090 = texelFetch(g_lightClassification, int((((_1623 << 5u) + (_1609 << 9u)) + (_2081 << 2u)) >> 2u)).x;
                    _2091 = _2090 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    if (_2091)
                    {
                        frontier_phi_77_pred = _2079;
                        frontier_phi_77_pred_1 = _2078;
                        frontier_phi_77_pred_2 = _2080;
                    }
                    else
                    {
                        float _2235;
                        float _2236;
                        float _2237;
                        float _2456;
                        float _2457;
                        float _2458;
                        float _2245 = _2078;
                        float _2246 = _2079;
                        float _2247 = _2080;
                        uint _2248 = _2090;
                        uint _2249;
                        uint _2259;
                        vec4 _2274;
                        float _2275;
                        vec3 _2287;
                        vec4 _2302;
                        vec4 _2317;
                        float _2363;
                        bool _2364;
                        for (;;)
                        {
                            _2259 = ((_2081 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2248));
                            _2249 = (_2248 + 4294967295u) & _2248;
                            uint _2261 = _2259 * 40u;
                            _2274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2261 + 3u)).x));
                            _2275 = _2274.w;
                            uint _2277 = (_2259 * 40u) + 8u;
                            _2287 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2277 + 2u)).x));
                            uint _2289 = (_2259 * 40u) + 16u;
                            _2302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2289 + 3u)).x));
                            uint _2304 = (_2259 * 40u) + 20u;
                            _2317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2304 + 3u)).x));
                            uint _2319 = (_2259 * 40u) + 24u;
                            vec4 _2332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2319 + 3u)).x));
                            uint _2338 = (_2259 * 40u) + 28u;
                            vec4 _2351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2338 + 3u)).x));
                            _2363 = fma(_1585, _2351.z, fma(_1584, _2351.y, _2351.x * _1583)) + _2351.w;
                            _2364 = !((fma(_1585, _2332.z, fma(_1584, _2332.y, _2332.x * _1583)) + _2332.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            if (_2364)
                            {
                                float _2398 = _2274.x - _1583;
                                float _2399 = _2274.y - _1584;
                                float _2400 = _2274.z - _1585;
                                float _2401 = dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400));
                                float _2404 = inversesqrt(_2401);
                                float _2411 = 1.0 - (_2401 / (_2275 * _2275));
                                float _2914 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
                                float _2413 = sqrt(_2401) * uintBitsToFloat(uvec4(_2367, _2368, _2369, texelFetch(g_SpotLightRenderingBuffer, int(((_2259 * 40u) + 4u) + 3u)).x)).w;
                                float _2415 = 1.39999997615814208984375 / (_2413 + 1.39999997615814208984375);
                                float _2416 = _2415 * _2415;
                                float _2419 = (fma(_1585, _2302.z, fma(_1584, _2302.y, _2302.x * _1583)) + _2302.w) / _2363;
                                float _2420 = (fma(_1585, _2317.z, fma(_1584, _2317.y, _2317.x * _1583)) + _2317.w) / _2363;
                                float _2424 = 1.0 - dot(vec2(_2419, _2420), vec2(_2419, _2420));
                                float _2925 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
                                float _2432 = dot(vec3(0.0), vec3((-0.0) - (_1583 * _1901), (-0.0) - (_1584 * _1901), (-0.0) - (_1585 * _1901)));
                                float _2936 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
                                float _2440 = ((1.0 - _2416) * dot(vec3(0.0), vec3(_2404 * _2398, _2404 * _2399, _2404 * _2400))) + _2416;
                                float _2947 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
                                float _2441 = isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0));
                                float _2445 = (0.5 / (((isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0))) + 9.9999999392252902907785028219223e-09) + _2441)) * _2441;
                                float _2958 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
                                float _2452 = ((isnan(1.0) ? _2925 : (isnan(_2925) ? 1.0 : min(_2925, 1.0))) * (isnan(1.0) ? _2914 : (isnan(_2914) ? 1.0 : min(_2914, 1.0)))) * (((isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0))) * 3.1415927410125732421875) / (((_2413 * _2413) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2452 * _2287.z;
                                frontier_phi_83_pred_1 = _2452 * _2287.y;
                                frontier_phi_83_pred_2 = _2452 * _2287.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                            }
                            _2458 = frontier_phi_83_pred;
                            _2457 = frontier_phi_83_pred_1;
                            _2456 = frontier_phi_83_pred_2;
                            _2235 = _2456 + _2245;
                            _2236 = _2457 + _2246;
                            _2237 = _2458 + _2247;
                            if (_2249 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2245 = _2235;
                                _2246 = _2236;
                                _2247 = _2237;
                                _2248 = _2249;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2236;
                        frontier_phi_77_pred_1 = _2235;
                        frontier_phi_77_pred_2 = _2237;
                    }
                    _1888 = frontier_phi_77_pred;
                    _1886 = frontier_phi_77_pred_1;
                    _1890 = frontier_phi_77_pred_2;
                    uint _2082 = _2081 + 1u;
                    if (_2082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2078 = _1886;
                        _2079 = _1888;
                        _2080 = _1890;
                        _2081 = _2082;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1890;
                frontier_phi_52_53_ladder_1 = _1888;
                frontier_phi_52_53_ladder_2 = _1886;
            }
            else
            {
                frontier_phi_52_53_ladder = _1733;
                frontier_phi_52_53_ladder_1 = _1731;
                frontier_phi_52_53_ladder_2 = _1729;
            }
            _1885 = frontier_phi_52_53_ladder_2;
            _1887 = frontier_phi_52_53_ladder_1;
            _1889 = frontier_phi_52_53_ladder;
        }
        float _1894 = isnan(1.0) ? _717 : (isnan(_717) ? 1.0 : min(_717, 1.0));
        _1642 = ((_1885 * 0.039999999105930328369140625) * _1894) + _1524;
        _1644 = ((_1887 * 0.039999999105930328369140625) * _1894) + _1525;
        _1646 = ((_1889 * 0.039999999105930328369140625) * _1894) + _1526;
    }
    else
    {
        _1642 = _1524;
        _1644 = _1525;
        _1646 = _1526;
    }
    uint _1652 = _1392 + 9u;
    uint _1653 = _1652 + uint(cbMatDynParam._m0[0u].w);
    float _1659 = (cbSceneParam._m0[72u].y * ((_642 * ((_633 - _595) - (_633 * _606))) + _595)) * cbInstanceData._m0[_1653].x;
    float _1660 = (cbSceneParam._m0[72u].y * ((_642 * ((_634 - _596) - (_634 * _606))) + _596)) * cbInstanceData._m0[_1653].y;
    float _1661 = (((_642 * ((_635 - _597) - (_635 * _606))) + _597) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1653].z;
    float _1668 = _1659 + ((_1642 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _1137)) * cbPerFrame._m0[3u].x);
    float _1669 = _1660 + ((_1644 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _1137)) * cbPerFrame._m0[3u].x);
    float _1670 = _1661 + ((_1646 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _1137)) * cbPerFrame._m0[3u].x);
    float _1671 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1672 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1679 = cbMtdParam._m0[2u].x * _1659;
    float _1680 = cbMtdParam._m0[2u].y * _1660;
    float _1681 = cbMtdParam._m0[2u].z * _1661;
    float _2989 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1683 = isnan(1.0) ? _2989 : (isnan(_2989) ? 1.0 : min(_2989, 1.0));
    uint _1684 = _1392 + 6u;
    float _1692 = _704 / cbSceneParam._m0[86u].x;
    float _1693 = _705 / cbSceneParam._m0[86u].y;
    vec4 _1707 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1692, _1693, (log2((isnan(cbSceneParam._m0[77u].w) ? _677 : (isnan(_677) ? cbSceneParam._m0[77u].w : min(_677, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1709 = _1707.x;
    float _1710 = _1707.y;
    float _1711 = _1707.z;
    float _1712 = _1707.w;
    float _1786;
    float _1788;
    float _1790;
    float _1792;
    if (_677 > cbSceneParam._m0[78u].w)
    {
        float _1748 = isnan(_677) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _677 : min(cbSceneParam._m0[80u].w, _677));
        float _1749 = _1748 / _677;
        float _1760 = _1749 * _273;
        float _1761 = _274 * _1749;
        float _1762 = (-0.0) - _1761;
        float _1763 = _1749 * _275;
        float _1765 = (cbSceneParam._m0[77u].w * _1762) / _1748;
        float _1766 = _1765 + cbSceneParam._m0[79u].w;
        float _1767 = cbSceneParam._m0[79u].w - _1761;
        float _1773 = sqrt(((_1760 * _1760) + (_1761 * _1761)) + (_1763 * _1763));
        float _1776 = (1.0 - (cbSceneParam._m0[77u].w / _1748)) * _1773;
        float _1782 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1784 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2009;
        if (abs((_1762 - _1765) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2009 = ((((_1766 > 0.0) ? exp2(_1782 * _1766) : (2.0 - exp2(_1784 * _1766))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1776;
        }
        else
        {
            float _1931 = 1.0 / cbSceneParam._m0[80u].x;
            float _1932 = isnan(_1767) ? _1766 : (isnan(_1766) ? _1767 : max(_1766, _1767));
            float _1933 = isnan(_1767) ? _1766 : (isnan(_1766) ? _1767 : min(_1766, _1767));
            float _1942 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : min(_1932, 0.0));
            float _1943 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : min(_1933, 0.0));
            _2009 = ((abs(_1773 / _1762) * cbSceneParam._m0[80u].y) * ((((_1942 - _1943) * 2.0) - ((exp2(_1782 * (isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)))) - exp2(_1782 * (isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))))) * _1931)) - ((exp2(_1784 * _1942) - exp2(_1784 * _1943)) * _1931))) + (_1776 * cbSceneParam._m0[80u].z);
        }
        vec4 _2011 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1692, _1693, 1.0), 0.0);
        float _2020 = exp2((_2009 * (-1.44269502162933349609375)) * (1.0 - _2011.w));
        float _2021 = log2(_2020);
        float _2037 = log2(_1712);
        _1786 = (exp2(_2037 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2021 * cbSceneParam._m0[78u].x)) * _2011.x) / cbSceneParam._m0[78u].x)) + _1709;
        _1788 = (exp2(_2037 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2021 * cbSceneParam._m0[78u].y)) * _2011.y) / cbSceneParam._m0[78u].y)) + _1710;
        _1790 = (exp2(_2037 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2021 * cbSceneParam._m0[78u].z)) * _2011.z) / cbSceneParam._m0[78u].z)) + _1711;
        _1792 = _2020 * _1712;
    }
    else
    {
        _1786 = _1709;
        _1788 = _1710;
        _1790 = _1711;
        _1792 = _1712;
    }
    bool _2047;
    vec4 _1801;
    vec4 _1824;
    float _1826;
    float _1830;
    float _1831;
    float _1832;
    float _1835;
    float _1838;
    float _1841;
    float _1842;
    bool _1853;
    for (;;)
    {
        _1801 = cbMatDynParam._m0[0u];
        float _1803 = roundEven(_1801.y);
        bool _1804 = _1803 == 3.0;
        float _1806 = log2(_1792);
        float _1810 = exp2(_1806 * cbSceneParam._m0[78u].x);
        float _1811 = exp2(_1806 * cbSceneParam._m0[78u].y);
        float _1812 = exp2(_1806 * cbSceneParam._m0[78u].z);
        float _1813 = _1810 * _1671;
        float _1814 = _1811 * _1672;
        float _1815 = _1812 * _1673;
        float _1822 = _691 + (-0.5);
        _1824 = cbMtdParam._m0[1u];
        _1826 = _1824.y * _1822;
        float _1829 = (_1803 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1830 = _1829 * (_1804 ? _1813 : (_1813 + (cbSceneParam._m0[72u].w * _1786)));
        _1831 = _1829 * (_1804 ? _1814 : (_1814 + (cbSceneParam._m0[72u].w * _1788)));
        _1832 = _1829 * (_1804 ? _1815 : (_1815 + (cbSceneParam._m0[72u].w * _1790)));
        _1835 = ((_1679 * _1683) * _1810) * _1829;
        _1838 = ((_1680 * _1683) * _1811) * _1829;
        _1841 = ((_1681 * _1683) * _1812) * _1829;
        _1842 = _1822 * 0.999000012874603271484375;
        _1853 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1853)
        {
            if ((cbInstanceData._m0[_1392 + 7u].x + _1842) < 0.5)
            {
                _2047 = true;
                break;
            }
        }
        uint _1966 = _1652 + uint(_1801.w);
        if ((cbInstanceData._m0[_1966].w < 1.0) && ((cbInstanceData._m0[_1966].w + _1842) < 0.5))
        {
            _2047 = true;
            break;
        }
        if ((_1826 + 1.0) < _1824.x)
        {
            _2047 = true;
            break;
        }
        _2047 = false;
        break;
    }
    float _2205;
    if (_2047)
    {
        discard_state = true;
        _2205 = 0.0;
    }
    else
    {
        _2205 = cbInstanceData._m0[_1684].w;
    }
    SV_Target.x = _1830;
    SV_Target.y = _1831;
    SV_Target.z = _1832;
    SV_Target.w = _2205;
    SV_Target_1.x = _1835;
    SV_Target_1.y = _1838;
    SV_Target_1.z = _1841;
    SV_Target_1.w = cbInstanceData._m0[_1684].w;
    discard_exit();
}


