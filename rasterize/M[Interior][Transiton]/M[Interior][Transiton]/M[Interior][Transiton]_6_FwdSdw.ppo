#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1499;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _278 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _288 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _278);
    float _289 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _278);
    float _290 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _278);
    vec4 _304 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _307 = _304.x;
    vec4 _325 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _342 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _307) + cbMtdParam._m0[12u].x) * _325.x;
    float _344 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _307) + cbMtdParam._m0[12u].y) * _325.y;
    float _346 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _307) + cbMtdParam._m0[12u].z) * _325.z;
    vec4 _364 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _403 = cbMtdParam._m0[27u].w + _288;
    float _404 = cbMtdParam._m0[28u].x + _289;
    float _405 = cbMtdParam._m0[28u].y + _290;
    float _419 = (-0.0) - dot(vec3(_403, _404, _405), vec3(_218, _219, _220));
    float _420 = (-0.0) - dot(vec3(_403, _404, _405), vec3(_232, _233, _234));
    float _421 = (-0.0) - dot(vec3(_403, _404, _405), vec3((-0.0) - _225, (-0.0) - _226, (-0.0) - _227));
    float _425 = inversesqrt(dot(vec3(_419, _420, _421), vec3(_419, _420, _421)));
    float _428 = _425 * _421;
    float _429 = (_425 * _419) + ((cbMtdParam._m0[25u].w * _307) * ((_364.x * 2.0) + (-1.0)));
    float _430 = (_425 * _420) + ((cbMtdParam._m0[26u].x * _307) * ((_364.y * 2.0) + (-1.0)));
    float _431 = _429 * cbMtdParam._m0[24u].x;
    float _432 = _430 * cbMtdParam._m0[23u].w;
    float _433 = fract(TEXCOORD.x);
    float _434 = fract(TEXCOORD.y);
    float _440;
    if (_431 > 0.0)
    {
        _440 = (1.0 - _433) / _431;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_431 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _433) / _431;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _440 = frontier_phi_3_2_ladder;
    }
    float _448;
    if (_432 > 0.0)
    {
        _448 = (1.0 - _434) / _432;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_432 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _434) / _432;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _448 = frontier_phi_7_6_ladder;
    }
    bool _450 = _428 > 0.0;
    float _452 = _450 ? (cbMtdParam._m0[17u].x / _428) : 5000.0;
    float _453 = isnan(_448) ? _440 : (isnan(_440) ? _448 : min(_440, _448));
    float _454 = isnan(_452) ? _453 : (isnan(_453) ? _452 : min(_453, _452));
    float _458 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _459 = _433 + (-0.5);
    float _462 = _434 + (-0.5);
    float _465 = ((_454 * _428) + _458) / _458;
    vec4 _490 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_459 + (_454 * _431)) / _465) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_462 + (_454 * _432)) / _465) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _503 = (_490.x * _307) * cbMtdParam._m0[9u].x;
    float _504 = (_490.y * _307) * cbMtdParam._m0[9u].y;
    float _505 = (_490.z * _307) * cbMtdParam._m0[9u].z;
    float _523 = _429 * cbMtdParam._m0[26u].z;
    float _524 = _430 * cbMtdParam._m0[26u].y;
    bool _525 = _523 > 0.0;
    float _530;
    if (_525)
    {
        _530 = (1.0 - _433) / _523;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _433) / _523;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _530 = frontier_phi_11_10_ladder;
    }
    bool _532 = _524 > 0.0;
    float _537;
    if (_532)
    {
        _537 = (1.0 - _434) / _524;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_524 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _434) / _524;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _537 = frontier_phi_15_14_ladder;
    }
    float _540 = _450 ? (cbMtdParam._m0[19u].z / _428) : 5000.0;
    float _541 = isnan(_537) ? _530 : (isnan(_530) ? _537 : min(_530, _537));
    float _542 = isnan(_540) ? _541 : (isnan(_541) ? _540 : min(_541, _540));
    float _546 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _550 = ((_542 * _428) + _546) / _546;
    float _555 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _557 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _573 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_459 + (_542 * _523)) / _550) + 0.5) + _555) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_462 + (_542 * _524)) / _550) + 0.5) + _557) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _588;
    if (_525)
    {
        _588 = (1.0 - _433) / _523;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _433) / _523;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _588 = frontier_phi_19_18_ladder;
    }
    float _594;
    if (_532)
    {
        _594 = (1.0 - _434) / _524;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_524 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _434) / _524;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _594 = frontier_phi_23_22_ladder;
    }
    float _596 = isnan(_594) ? _588 : (isnan(_588) ? _594 : min(_588, _594));
    float _597 = isnan(_540) ? _596 : (isnan(_596) ? _540 : min(_596, _540));
    float _604 = ((_597 * _428) + _546) / _546;
    vec4 _624 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_459 + (_597 * _523)) / _604) + 0.5) + _555) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_462 + (_597 * _524)) / _604) + 0.5) + _557) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _626 = _624.x;
    float _636 = (((((cbMtdParam._m0[10u].x * _307) * _573.x) - _503) * _307) * _626) + _503;
    float _637 = (((((cbMtdParam._m0[10u].y * _307) * _573.y) - _504) * _307) * _626) + _504;
    float _638 = (((((cbMtdParam._m0[10u].z * _307) * _573.z) - _505) * _307) * _626) + _505;
    float _651 = _429 * cbMtdParam._m0[27u].x;
    float _652 = _430 * cbMtdParam._m0[26u].w;
    bool _653 = _651 > 0.0;
    float _658;
    if (_653)
    {
        _658 = (1.0 - _433) / _651;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_651 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _433) / _651;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _658 = frontier_phi_27_26_ladder;
    }
    bool _660 = _652 > 0.0;
    float _665;
    if (_660)
    {
        _665 = (1.0 - _434) / _652;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_652 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _434) / _652;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _665 = frontier_phi_31_30_ladder;
    }
    float _668 = _450 ? (cbMtdParam._m0[23u].x / _428) : 5000.0;
    float _669 = isnan(_665) ? _658 : (isnan(_658) ? _665 : min(_658, _665));
    float _670 = isnan(_668) ? _669 : (isnan(_669) ? _668 : min(_669, _668));
    float _674 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _678 = ((_670 * _428) + _674) / _674;
    float _683 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _685 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _701 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_459 + (_670 * _651)) / _678) + 0.5) + _683) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_462 + (_670 * _652)) / _678) + 0.5) + _685) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _716;
    if (_653)
    {
        _716 = (1.0 - _433) / _651;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_651 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _433) / _651;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _716 = frontier_phi_35_34_ladder;
    }
    float _722;
    if (_660)
    {
        _722 = (1.0 - _434) / _652;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_652 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _434) / _652;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _722 = frontier_phi_39_38_ladder;
    }
    float _724 = isnan(_722) ? _716 : (isnan(_716) ? _722 : min(_716, _722));
    float _725 = isnan(_668) ? _724 : (isnan(_724) ? _668 : min(_724, _668));
    float _732 = ((_725 * _428) + _674) / _674;
    vec4 _752 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_459 + (_725 * _651)) / _732) + 0.5) + _683) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_462 + (_725 * _652)) / _732) + 0.5) + _685) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _754 = _752.x;
    float _764 = (((((cbMtdParam._m0[13u].x * _307) * _701.x) - _636) * _307) * _754) + _636;
    float _765 = (((((cbMtdParam._m0[13u].y * _307) * _701.y) - _637) * _307) * _754) + _637;
    float _766 = (((((cbMtdParam._m0[13u].z * _307) * _701.z) - _638) * _307) * _754) + _638;
    vec4 _779 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _783 = _779.z;
    float _786 = (_779.x * 2.0) + (-1.0);
    float _787 = (_779.y * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _3969 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))));
    float _802 = (cbMtdParam._m0[19u].y * _764) * cbMtdParam._m0[16u].x;
    float _804 = (cbMtdParam._m0[19u].y * _765) * cbMtdParam._m0[16u].y;
    float _806 = (cbMtdParam._m0[19u].y * _766) * cbMtdParam._m0[16u].z;
    vec4 _830 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _835 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _841 = ((_830.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _843 = (-0.0) - (cbMtdParam._m0[21u].x * ((_830.x * 0.5) + (-0.25)));
    float _844 = fract(_835);
    float _846 = fract(_835 + 0.5);
    vec4 _873 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_844 * _843) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_841 * _844) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _875 = _873.x;
    float _881 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_846 * _843) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_841 * _846) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _875) * abs((_844 * 2.0) + (-1.0))) + _875;
    float _887 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _891 = fract(abs(_887));
    float _901 = sin(cbMtdParam._m0[21u].z);
    float _902 = cos(cbMtdParam._m0[21u].z);
    float _903 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _904 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _929 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_904, (-0.0) - _901, _902 * _903) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_904, _902, _903 * _901) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_887 >= ((-0.0) - _887)) ? _891 : ((-0.0) - _891)) * cbMtdParam._m0[18u].z) - _881)) + cbMtdParam._m0[18u].w;
    float _930 = ceil(_929);
    float _3980 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _931 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _951 = ((((cbMtdParam._m0[21u].w * _764) * cbMtdParam._m0[15u].x) - _802) * _931) + _802;
    float _952 = ((((cbMtdParam._m0[21u].w * _765) * cbMtdParam._m0[15u].y) - _804) * _931) + _804;
    float _953 = ((((cbMtdParam._m0[21u].w * _766) * cbMtdParam._m0[15u].z) - _806) * _931) + _806;
    float _957 = abs(cbMtdParam._m0[20u].w * _929);
    float _961 = (((_957 * cbMtdParam._m0[18u].y) - _881) * _957) + _881;
    float _3991 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _962 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    vec4 _974 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _989 = (cbMtdParam._m0[14u].x * _974.x) * cbMtdParam._m0[19u].x;
    float _990 = (cbMtdParam._m0[14u].y * _974.y) * cbMtdParam._m0[19u].x;
    float _991 = (cbMtdParam._m0[14u].z * _974.z) * cbMtdParam._m0[19u].x;
    float _998 = exp2(log2(_962) * cbMtdParam._m0[20u].x);
    float _1020 = fma(_793, _225, fma(_787, _232, _786 * _218));
    float _1023 = fma(_793, _226, fma(_787, _233, _786 * _219));
    float _1026 = fma(_793, _227, fma(_787, _234, _786 * _220));
    float _1030 = inversesqrt(dot(vec3(_1020, _1023, _1026), vec3(_1020, _1023, _1026)));
    float _1031 = _1030 * _1020;
    float _1032 = _1030 * _1023;
    float _1033 = _1030 * _1026;
    float _4002 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _1034 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _4024 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _4035 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _1053 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1057 = inversesqrt(dot(vec3(_288, _289, _290), vec3(_288, _289, _290)));
    float _1058 = _288 * _1057;
    float _1059 = _289 * _1057;
    float _1060 = _290 * _1057;
    float _1066 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1067 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1085 = fma(_1033, cbSceneParam._m0[5u].z, fma(_1032, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1031));
    float _1088 = fma(_1033, cbSceneParam._m0[6u].z, fma(_1032, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1031));
    float _1091 = fma(_1033, cbSceneParam._m0[7u].z, fma(_1032, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1031));
    uint _1104 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1105 = _1104 + 9u;
    uint _1106 = _1105 + uint(cbMatDynParam._m0[0u].w);
    float _1112 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_1106].x;
    float _1113 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_1106].y;
    float _1114 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_1106].z;
    float _4046 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1115 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1116 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1117 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    vec4 _1126 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1066, cbSceneParam._m0[86u].y * _1067));
    float _1129 = _1126.x * TEXCOORD_4;
    float _1130 = dot(vec3(_1031, _1032, _1033), vec3(_1058, _1059, _1060));
    float _1133 = _1130 * 2.0;
    float _1137 = (_1133 * _1031) - _1058;
    float _1138 = (_1133 * _1032) - _1059;
    float _1139 = (_1133 * _1033) - _1060;
    float _1143 = abs(dot(vec3(_1058, _1059, _1060), vec3(_1031, _1032, _1033)));
    float _4079 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _1145 = sqrt(_1034);
    float _1158 = exp2((_1145 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1145 * 3.0));
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1498;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1225 = fma(_1198, cbModelParam._m0[26u].z, fma(_1194, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190));
        float _1229 = fma(_1198, cbModelParam._m0[27u].z, fma(_1194, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190));
        float _1233 = fma(_1198, cbModelParam._m0[28u].z, fma(_1194, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190));
        float _1256 = _1190 + _1031;
        float _1257 = _1194 + _1032;
        float _1258 = _1198 + _1033;
        float _1268 = fma(_1258, cbModelParam._m0[26u].z, fma(_1257, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1256)) - _1225;
        float _1269 = fma(_1258, cbModelParam._m0[27u].z, fma(_1257, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1256)) - _1229;
        float _1270 = fma(_1258, cbModelParam._m0[28u].z, fma(_1257, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1256)) - _1233;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1225 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1229 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[34u].z) + ((((((_1233 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1326 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1292.x + (-0.5));
        float _1328 = _1326 * (_1292.y + (-0.5));
        float _1329 = _1326 * (_1292.z + (-0.5));
        float _1336 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1299.x + (-0.5));
        float _1338 = _1336 * (_1299.y + (-0.5));
        float _1339 = _1336 * (_1299.z + (-0.5));
        float _1346 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1306.x + (-0.5));
        float _1348 = _1346 * (_1306.y + (-0.5));
        float _1349 = _1346 * (_1306.z + (-0.5));
        float _1356 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1313.x + (-0.5));
        float _1358 = _1356 * (_1313.y + (-0.5));
        float _1359 = _1356 * (_1313.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1380 = (dot(vec3(_1031, _1032, _1033), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1390 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4127 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1392 + 1.0))) + _1397) * _1360;
        float _1407 = _1328 * 0.5;
        float _1408 = _1338 * 0.5;
        float _1409 = _1348 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_1031, _1032, _1033), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4160 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1434 + 1.0))) + _1439) * _1361;
        float _1449 = _1329 * 0.5;
        float _1450 = _1339 * 0.5;
        float _1451 = _1349 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_1031, _1032, _1033), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4193 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1476 + 1.0))) + _1481) * _1362;
        _1498 = _1329;
        _1500 = _1328;
        _1501 = _1327;
        _1502 = _1339;
        _1503 = _1338;
        _1504 = _1337;
        _1505 = _1349;
        _1506 = _1348;
        _1507 = _1347;
        _1508 = _1362;
        _1509 = _1361;
        _1510 = _1360;
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1512 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1499;
        _1500 = _1499;
        _1501 = _1499;
        _1502 = _1499;
        _1503 = _1499;
        _1504 = _1499;
        _1505 = _1499;
        _1506 = _1499;
        _1507 = _1499;
        _1508 = _1499;
        _1509 = _1499;
        _1510 = _1499;
        _1511 = 0.0;
        _1512 = 0.0;
        _1513 = 0.0;
    }
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1538 = fma(_1198, cbModelParam._m0[30u].z, fma(_1194, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1190));
        float _1542 = fma(_1198, cbModelParam._m0[31u].z, fma(_1194, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1190));
        float _1546 = fma(_1198, cbModelParam._m0[32u].z, fma(_1194, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1190));
        float _1569 = _1190 + _1031;
        float _1570 = _1194 + _1032;
        float _1571 = _1198 + _1033;
        float _1581 = fma(_1571, cbModelParam._m0[30u].z, fma(_1570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1569)) - _1538;
        float _1582 = fma(_1571, cbModelParam._m0[31u].z, fma(_1570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1569)) - _1542;
        float _1583 = fma(_1571, cbModelParam._m0[32u].z, fma(_1570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1569)) - _1546;
        float _1587 = inversesqrt(dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583)));
        float _1600 = ((_1587 * _1581) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1538 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1601 = ((_1587 * _1582) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1542 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1602 = ((_1587 * _1583) / cbModelParam._m0[35u].z) + ((((((_1546 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        float _1637 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1604.x + (-0.5));
        float _1639 = _1637 * (_1604.y + (-0.5));
        float _1640 = _1637 * (_1604.z + (-0.5));
        float _1647 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1611.x + (-0.5));
        float _1649 = _1647 * (_1611.y + (-0.5));
        float _1650 = _1647 * (_1611.z + (-0.5));
        float _1657 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1618.x + (-0.5));
        float _1659 = _1657 * (_1618.y + (-0.5));
        float _1660 = _1657 * (_1618.z + (-0.5));
        float _1667 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1625.x + (-0.5));
        float _1669 = _1667 * (_1625.y + (-0.5));
        float _1670 = _1667 * (_1625.z + (-0.5));
        float _1671 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1672 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = _1638 * 0.5;
        float _1675 = _1648 * 0.5;
        float _1676 = _1658 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_1031, _1032, _1033), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1671 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4256 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1701 + 1.0))) + _1706) * _1671;
        float _1716 = _1639 * 0.5;
        float _1717 = _1649 * 0.5;
        float _1718 = _1659 * 0.5;
        float _1719 = dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718));
        float _1724 = (_1719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1719);
        float _1732 = (dot(vec3(_1031, _1032, _1033), vec3(_1724 * _1716, _1724 * _1717, _1724 * _1718)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718)) / (_1672 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1743 = _1742 * 2.0;
        float _1747 = (1.0 - _1742) / (_1742 + 1.0);
        float _4289 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1757 = ((((1.0 - _1748) * (_1743 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1743 + 1.0))) + _1748) * _1672;
        float _1758 = _1640 * 0.5;
        float _1759 = _1650 * 0.5;
        float _1760 = _1660 * 0.5;
        float _1761 = dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760));
        float _1766 = (_1761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1761);
        float _1774 = (dot(vec3(_1031, _1032, _1033), vec3(_1766 * _1758, _1766 * _1759, _1766 * _1760)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1785 = _1784 * 2.0;
        float _1789 = (1.0 - _1784) / (_1784 + 1.0);
        float _4322 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1799 = ((((1.0 - _1790) * (_1785 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1785 + 1.0))) + _1790) * _1673;
        _1807 = _1640;
        _1808 = _1639;
        _1809 = _1638;
        _1810 = _1650;
        _1811 = _1649;
        _1812 = _1648;
        _1813 = _1660;
        _1814 = _1659;
        _1815 = _1658;
        _1816 = _1673;
        _1817 = _1672;
        _1818 = _1671;
        _1819 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
        _1820 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)));
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)));
    }
    else
    {
        _1807 = _1499;
        _1808 = _1499;
        _1809 = _1499;
        _1810 = _1499;
        _1811 = _1499;
        _1812 = _1499;
        _1813 = _1499;
        _1814 = _1499;
        _1815 = _1499;
        _1816 = _1499;
        _1817 = _1499;
        _1818 = _1499;
        _1819 = 0.0;
        _1820 = 0.0;
        _1821 = 0.0;
    }
    float _1831 = (cbModelParam._m0[1u].x * (_1819 - _1511)) + _1511;
    float _1832 = (cbModelParam._m0[1u].x * (_1820 - _1512)) + _1512;
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1513)) + _1513;
    float _1854 = fma(_1833, cbSceneParam._m0[89u].z, fma(_1832, cbSceneParam._m0[89u].y, _1831 * cbSceneParam._m0[89u].x));
    float _1857 = fma(_1833, cbSceneParam._m0[90u].z, fma(_1832, cbSceneParam._m0[90u].y, _1831 * cbSceneParam._m0[90u].x));
    float _1860 = fma(_1833, cbSceneParam._m0[91u].z, fma(_1832, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1831));
    float _1875 = _1137 * 0.5;
    float _1876 = _1138 * 0.5;
    float _1877 = _1139 * 0.5;
    float _1878 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1881 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1808, _1811, _1814, _1817));
    float _1884 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1807, _1810, _1813, _1816));
    float _1918;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1891 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1498, _1502, _1505, _1508));
        float _1895 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1500, _1503, _1506, _1509));
        float _1899 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1501, _1504, _1507, _1510));
        float _1906 = dot(vec4(cbModelParam._m0[39u]), vec4(_1875, _1876, _1877, 1.0));
        _1918 = dot(vec3(isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1918 = 1.0;
    }
    float _1929;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1920 = dot(vec4(cbModelParam._m0[40u]), vec4(_1875, _1876, _1877, 1.0));
        _1929 = dot(vec3(isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1920) ? 0.0 : (isnan(0.0) ? _1920 : max(0.0, _1920))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1929 = 1.0;
    }
    float _1933 = (_1929 * cbModelParam._m0[1u].x) + (_1918 * (1.0 - cbModelParam._m0[1u].x));
    float _1943 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1034);
    float _1944 = isnan(_1943) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1943 : min(cbModelParam._m0[25u].z, _1943));
    float _2024;
    float _2026;
    float _2028;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1991 = fma(_1198, cbModelParam._m0[13u].z, fma(_1194, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1190)) + cbModelParam._m0[13u].w;
        float _1995 = fma(_1198, cbModelParam._m0[14u].z, fma(_1194, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1190)) + cbModelParam._m0[14u].w;
        float _1999 = fma(_1198, cbModelParam._m0[15u].z, fma(_1194, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1190)) + cbModelParam._m0[15u].w;
        float _2002 = fma(_1139, cbModelParam._m0[13u].z, fma(_1138, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1137));
        float _2005 = fma(_1139, cbModelParam._m0[14u].z, fma(_1138, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1137));
        float _2008 = fma(_1139, cbModelParam._m0[15u].z, fma(_1138, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1137));
        float _2036;
        if (_2002 > 0.0)
        {
            _2036 = abs((1.0 - _1991) / _2002);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1991 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _2036 = frontier_phi_54_52_ladder;
        }
        float _2204;
        if (_2005 > 0.0)
        {
            _2204 = abs((1.0 - _1995) / _2005);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1995 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2204 = frontier_phi_63_59_ladder;
        }
        float _2648;
        if (_2008 > 0.0)
        {
            _2648 = abs((1.0 - _1999) / _2008);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1999 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _2648 = frontier_phi_75_70_ladder;
        }
        float _2650 = isnan(_2204) ? _2036 : (isnan(_2036) ? _2204 : min(_2036, _2204));
        float _2651 = isnan(_2648) ? _2650 : (isnan(_2650) ? _2648 : min(_2650, _2648));
        float _2655 = (_2651 * _2002) + _1991;
        float _2656 = (_2651 * _2005) + _1995;
        float _2657 = (_2651 * _2008) + _1999;
        float _2658 = _2651 * 9.9999997473787516355514526367188e-05;
        float _2660 = (-1.0) - _2658;
        float _2662 = _2658 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_2657 > _2662) || ((_2657 < _2660) || ((_2656 > _2662) || ((_2656 < _2660) || ((_2655 < _2660) || (_2655 > _2662))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2917 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2657, cbModelParam._m0[9u].z, fma(_2656, cbModelParam._m0[9u].y, _2655 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2657, cbModelParam._m0[10u].z, fma(_2656, cbModelParam._m0[10u].y, _2655 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2657, cbModelParam._m0[11u].z, fma(_2656, cbModelParam._m0[11u].y, _2655 * cbModelParam._m0[11u].x))), _1944);
            frontier_phi_53_75_ladder = _2917.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _2917.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _2917.x * cbModelParam._m0[1u].y;
        }
        _2024 = frontier_phi_53_75_ladder_2;
        _2026 = frontier_phi_53_75_ladder_1;
        _2028 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _2012 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1137, _1138, _1139), _1944);
        _2024 = _2012.x * cbModelParam._m0[1u].y;
        _2026 = _2012.y * cbModelParam._m0[1u].y;
        _2028 = _2012.z * cbModelParam._m0[1u].y;
    }
    float _2032 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1034);
    float _2033 = isnan(_2032) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2032 : min(cbModelParam._m0[25u].w, _2032));
    float _2121;
    float _2123;
    float _2125;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2085 = fma(_1198, cbModelParam._m0[21u].z, fma(_1194, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1190)) + cbModelParam._m0[21u].w;
        float _2089 = fma(_1198, cbModelParam._m0[22u].z, fma(_1194, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1190)) + cbModelParam._m0[22u].w;
        float _2093 = fma(_1198, cbModelParam._m0[23u].z, fma(_1194, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1190)) + cbModelParam._m0[23u].w;
        float _2096 = fma(_1139, cbModelParam._m0[21u].z, fma(_1138, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1137));
        float _2099 = fma(_1139, cbModelParam._m0[22u].z, fma(_1138, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1137));
        float _2102 = fma(_1139, cbModelParam._m0[23u].z, fma(_1138, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1137));
        float _2209;
        if (_2096 > 0.0)
        {
            _2209 = abs((1.0 - _2085) / _2096);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_2096 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_2085 + 1.0) / _2096);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2209 = frontier_phi_65_61_ladder;
        }
        float _2675;
        if (_2099 > 0.0)
        {
            _2675 = abs((1.0 - _2089) / _2099);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_2089 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2675 = frontier_phi_77_72_ladder;
        }
        float _3046;
        if (_2102 > 0.0)
        {
            _3046 = abs((1.0 - _2093) / _2102);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_2093 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _3046 = frontier_phi_89_84_ladder;
        }
        float _3048 = isnan(_2675) ? _2209 : (isnan(_2209) ? _2675 : min(_2209, _2675));
        float _3049 = isnan(_3046) ? _3048 : (isnan(_3048) ? _3046 : min(_3048, _3046));
        float _3053 = (_3049 * _2096) + _2085;
        float _3054 = (_3049 * _2099) + _2089;
        float _3055 = (_3049 * _2102) + _2093;
        float _3056 = _3049 * 9.9999997473787516355514526367188e-05;
        float _3057 = (-1.0) - _3056;
        float _3059 = _3056 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_3055 > _3059) || ((_3055 < _3057) || ((_3054 > _3059) || ((_3054 < _3057) || ((_3053 < _3057) || (_3053 > _3059))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3176 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3055, cbModelParam._m0[17u].z, fma(_3054, cbModelParam._m0[17u].y, _3053 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3055, cbModelParam._m0[18u].z, fma(_3054, cbModelParam._m0[18u].y, _3053 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3055, cbModelParam._m0[19u].z, fma(_3054, cbModelParam._m0[19u].y, _3053 * cbModelParam._m0[19u].x))), _2033);
            frontier_phi_62_89_ladder = _3176.z * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _3176.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _3176.x * cbModelParam._m0[1u].z;
        }
        _2121 = frontier_phi_62_89_ladder_2;
        _2123 = frontier_phi_62_89_ladder_1;
        _2125 = frontier_phi_62_89_ladder;
    }
    else
    {
        vec4 _2105 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1137, _1138, _1139), _2033);
        _2121 = _2105.x * cbModelParam._m0[1u].z;
        _2123 = _2105.y * cbModelParam._m0[1u].z;
        _2125 = _2105.z * cbModelParam._m0[1u].z;
    }
    float _2137 = ((((1.0 - _1158) * ((_1145 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1158 * _1145)) * _1129;
    float _2138 = _2137 * ((cbModelParam._m0[1u].w * (_2121 - _2024)) + _2024);
    float _2139 = _2137 * ((cbModelParam._m0[1u].w * (_2123 - _2026)) + _2026);
    float _2140 = _2137 * ((cbModelParam._m0[1u].w * (_2125 - _2028)) + _2028);
    float _2143 = fma(_2140, cbSceneParam._m0[89u].z, fma(_2139, cbSceneParam._m0[89u].y, _2138 * cbSceneParam._m0[89u].x));
    float _2146 = fma(_2140, cbSceneParam._m0[90u].z, fma(_2139, cbSceneParam._m0[90u].y, _2138 * cbSceneParam._m0[90u].x));
    float _2149 = fma(_2140, cbSceneParam._m0[91u].z, fma(_2139, cbSceneParam._m0[91u].y, _2138 * cbSceneParam._m0[91u].x));
    float _2183 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2187 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2191 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2195 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2196 = _2183 / _2195;
    float _2197 = _2187 / _2195;
    float _2198 = _2191 / _2195;
    float _2345;
    float _2346;
    float _2347;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2225 = ((uint(_2198 > cbSceneParam._m0[59u].y) + uint(_2198 > cbSceneParam._m0[59u].x)) + uint(_2198 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2226 = _2225 + 43u;
        uint _2234 = _2225 + 44u;
        uint _2242 = _2225 + 45u;
        uint _2250 = _2225 + 46u;
        float _2261 = fma(_2195, cbSceneParam._m0[_2226].w, fma(_2191, cbSceneParam._m0[_2226].z, fma(_2187, cbSceneParam._m0[_2226].y, _2183 * cbSceneParam._m0[_2226].x)));
        float _2265 = fma(_2195, cbSceneParam._m0[_2234].w, fma(_2191, cbSceneParam._m0[_2234].z, fma(_2187, cbSceneParam._m0[_2234].y, _2183 * cbSceneParam._m0[_2234].x)));
        float _2273 = fma(_2195, cbSceneParam._m0[_2250].w, fma(_2191, cbSceneParam._m0[_2250].z, fma(_2187, cbSceneParam._m0[_2250].y, _2183 * cbSceneParam._m0[_2250].x)));
        float _2278 = cbSceneParam._m0[33u].z * _2273;
        float _2280 = cbSceneParam._m0[33u].w * _2273;
        float _2283 = fma(_2195, cbSceneParam._m0[_2242].w, fma(_2191, cbSceneParam._m0[_2242].z, fma(_2187, cbSceneParam._m0[_2242].y, _2183 * cbSceneParam._m0[_2242].x))) / _2273;
        float _2331 = (cbSceneParam._m0[33u].x - sqrt(((_2197 * _2197) + (_2196 * _2196)) + (_2198 * _2198))) * cbSceneParam._m0[33u].y;
        float _4448 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2338 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2278 + _2261) / _2273, (_2280 + _2265) / _2273), _2283), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2280 + _2261) / _2273, (_2265 - _2278) / _2273), _2283), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2261 - _2278) / _2273, (_2265 - _2280) / _2273), _2283), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2261 - _2280) / _2273, (_2278 + _2265) / _2273), _2283), 0.0)).x), vec4(0.25)));
        _2345 = 1.0 - (_2338 * cbSceneParam._m0[34u].x);
        _2346 = 1.0 - (_2338 * cbSceneParam._m0[34u].y);
        _2347 = 1.0 - (_2338 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2345 = 1.0;
        _2346 = 1.0;
        _2347 = 1.0;
    }
    float _2411;
    float _2413;
    float _2415;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2399 = fma(_2195, cbSceneParam._m0[63u].w, fma(_2191, cbSceneParam._m0[63u].z, fma(_2187, cbSceneParam._m0[63u].y, _2183 * cbSceneParam._m0[63u].x)));
        float _2400 = fma(_2195, cbSceneParam._m0[60u].w, fma(_2191, cbSceneParam._m0[60u].z, fma(_2187, cbSceneParam._m0[60u].y, _2183 * cbSceneParam._m0[60u].x))) / _2399;
        float _2401 = fma(_2195, cbSceneParam._m0[61u].w, fma(_2191, cbSceneParam._m0[61u].z, fma(_2187, cbSceneParam._m0[61u].y, _2183 * cbSceneParam._m0[61u].x))) / _2399;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_2400 >= cbSceneParam._m0[64u].x) && (_2401 >= cbSceneParam._m0[64u].y)) && (_2400 <= cbSceneParam._m0[64u].z)) && (_2401 <= cbSceneParam._m0[64u].w))
        {
            float _2688 = fma(_2195, cbSceneParam._m0[62u].w, fma(_2191, cbSceneParam._m0[62u].z, fma(_2187, cbSceneParam._m0[62u].y, _2183 * cbSceneParam._m0[62u].x))) / _2399;
            float _2692 = isnan(cbSceneParam._m0[41u].w) ? _2688 : (isnan(_2688) ? cbSceneParam._m0[41u].w : max(_2688, cbSceneParam._m0[41u].w));
            float _2735 = (cbSceneParam._m0[33u].x - sqrt(((_2197 * _2197) + (_2196 * _2196)) + (_2198 * _2198))) * cbSceneParam._m0[33u].y;
            float _4464 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
            float _2742 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2400, cbSceneParam._m0[33u].w + _2401), _2692), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2400, _2401 - cbSceneParam._m0[33u].z), _2692), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2400 - cbSceneParam._m0[33u].z, _2401 - cbSceneParam._m0[33u].w), _2692), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2400 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2401), _2692), 0.0)).x), vec4(0.25)));
            float _2746 = 1.0 - (_2742 * cbSceneParam._m0[34u].x);
            float _2747 = 1.0 - (_2742 * cbSceneParam._m0[34u].y);
            float _2748 = 1.0 - (_2742 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_2746) ? _2345 : (isnan(_2345) ? _2746 : min(_2345, _2746));
            frontier_phi_74_73_ladder_1 = isnan(_2747) ? _2346 : (isnan(_2346) ? _2747 : min(_2346, _2747));
            frontier_phi_74_73_ladder_2 = isnan(_2748) ? _2347 : (isnan(_2347) ? _2748 : min(_2347, _2748));
        }
        else
        {
            frontier_phi_74_73_ladder = _2345;
            frontier_phi_74_73_ladder_1 = _2346;
            frontier_phi_74_73_ladder_2 = _2347;
        }
        _2411 = frontier_phi_74_73_ladder;
        _2413 = frontier_phi_74_73_ladder_1;
        _2415 = frontier_phi_74_73_ladder_2;
    }
    else
    {
        _2411 = _2345;
        _2413 = _2346;
        _2415 = _2347;
    }
    uvec4 _2420 = floatBitsToUint(cbInstanceData._m0[_1104 + 5u]);
    uint _2422 = _2420.x * 14u;
    uint _2423 = _2422 + 13u;
    float _2428 = _1129 + (-1.0);
    float _2431 = (cbLight._m0[_2423].x * _2428) + 1.0;
    float _2432 = (cbLight._m0[_2423].y * _2428) + 1.0;
    uint _2433 = _2422 + 5u;
    float _2439 = isnan(1.0) ? _2432 : (isnan(_2432) ? 1.0 : min(_2432, 1.0));
    uint _2443 = _2422 + 4u;
    float _2452 = isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0));
    uint _2456 = _2422 | 1u;
    float _2467 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_1031, _1032, _1033));
    float _2470 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_1031, _1032, _1033));
    float _4500 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _4511 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2475 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2477 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * 0.3183098733425140380859375;
    float _2484 = ((cbLight._m0[_2433].x * _2439) * _2477) + (((cbLight._m0[_2443].x * _2411) * _2452) * _2475);
    float _2485 = ((_2439 * cbLight._m0[_2433].y) * _2477) + (((cbLight._m0[_2443].y * _2413) * _2452) * _2475);
    float _2486 = ((_2439 * cbLight._m0[_2433].z) * _2477) + (((cbLight._m0[_2443].z * _2415) * _2452) * _2475);
    uint _2488 = _2422 + 8u;
    float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _1034) * 0.949999988079071044921875);
    float _2502 = _2501 * _2501;
    float _2503 = cbLight._m0[_2422].x + _1058;
    float _2504 = cbLight._m0[_2422].y + _1059;
    float _2505 = cbLight._m0[_2422].z + _1060;
    float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
    float _2510 = _2509 * _2503;
    float _2511 = _2509 * _2504;
    float _2512 = _2509 * _2505;
    float _2513 = dot(vec3(_1031, _1032, _1033), vec3(cbLight._m0[_2422].xyz));
    float _4522 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _4533 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _2517 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2518 = dot(vec3(_1031, _1032, _1033), vec3(_2510, _2511, _2512));
    float _4544 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2522 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2510, _2511, _2512));
    float _4555 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2526 = _2502 * _2502;
    float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
    float _2541 = (exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2542 = 1.0 - _2502;
    float _2553 = (0.5 / (((_2517 * ((_2516 * _2542) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2542) + _2502) * _2516))) * _2516;
    float _4566 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2555 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
    uint _2569 = _2422 + 9u;
    float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _1034) * 0.949999988079071044921875);
    float _2581 = _2580 * _2580;
    float _2582 = cbLight._m0[_2456].x + _1058;
    float _2583 = cbLight._m0[_2456].y + _1059;
    float _2584 = cbLight._m0[_2456].z + _1060;
    float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
    float _2589 = _2588 * _2582;
    float _2590 = _2588 * _2583;
    float _2591 = _2588 * _2584;
    float _2592 = dot(vec3(_1031, _1032, _1033), vec3(cbLight._m0[_2456].xyz));
    float _4577 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2596 = dot(vec3(_1031, _1032, _1033), vec3(_2589, _2590, _2591));
    float _4588 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2599 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2600 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2589, _2590, _2591));
    float _4599 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2604 = _2581 * _2581;
    float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
    float _2617 = (exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2618 = 1.0 - _2581;
    float _2628 = (0.5 / (((_2517 * ((_2595 * _2618) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2618) + _2581) * _2595))) * _2595;
    float _4610 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2630 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
    float _2640 = (((_2617 * cbLight._m0[_2569].x) * _2630) * _2439) + ((((cbLight._m0[_2488].x * _2411) * _2541) * _2555) * _2452);
    float _2641 = (((_2617 * cbLight._m0[_2569].y) * _2630) * _2439) + ((((cbLight._m0[_2488].y * _2413) * _2541) * _2555) * _2452);
    float _2642 = (((_2617 * cbLight._m0[_2569].z) * _2630) * _2439) + ((((cbLight._m0[_2488].z * _2415) * _2541) * _2555) * _2452);
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    if (_2420.y == 0u)
    {
        uvec4 _2760 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2761 = _2760.x;
        uint _2772 = uint((float(_2760.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1067) / _2761))) + floor(float(uint(cbSceneParam._m0[85u].x * _1066) / _2761)));
        float _2782 = (log2(_2198 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2783 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        uint _2786 = uint(isnan(14.0) ? _2783 : (isnan(_2783) ? 14.0 : min(_2783, 14.0)));
        uvec4 _2791 = texelFetch(g_lightClusterGridBuffer, int(((_2786 << 2u) + (_2772 << 6u)) >> 2u));
        uint _2792 = _2791.x;
        uint _2793 = _2760.z;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((((1u << ((_2793 >> 4u) & 15u)) + 4294967295u) & _2792) == 0u) || ((_2793 & 240u) == 0u))
        {
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
        }
        else
        {
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            uint _3110 = 0u;
            uint _3119;
            bool _3120;
            for (;;)
            {
                _3119 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3110 << 2u)) >> 2u)).x;
                _3120 = _3119 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                float frontier_phi_98_pred_3;
                float frontier_phi_98_pred_4;
                float frontier_phi_98_pred_5;
                if (_3120)
                {
                    frontier_phi_98_pred = _3104;
                    frontier_phi_98_pred_1 = _3105;
                    frontier_phi_98_pred_2 = _3109;
                    frontier_phi_98_pred_3 = _3108;
                    frontier_phi_98_pred_4 = _3107;
                    frontier_phi_98_pred_5 = _3106;
                }
                else
                {
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    uint _3255;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3119;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    for (;;)
                    {
                        uint _3259 = uint(findLSB(_3255)) + (_3110 << 5u);
                        uint _3256 = (_3255 + 4294967295u) & _3255;
                        uint _3261 = _3259 * 48u;
                        vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3281 = (_3259 * 48u) + 4u;
                        vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3281)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 3u)).x));
                        uint _3300 = (_3259 * 48u) + 8u;
                        vec3 _3311 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x));
                        float _3315 = _3275.x - _2196;
                        float _3316 = _3275.y - _2197;
                        float _3317 = _3275.z - _2198;
                        float _3318 = dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317));
                        float _3321 = inversesqrt(_3318);
                        float _3322 = _3321 * _3315;
                        float _3323 = _3321 * _3316;
                        float _3324 = _3321 * _3317;
                        float _3325 = dot(vec3(_1085, _1088, _1091), vec3(_3322, _3323, _3324));
                        float _3330 = 1.0 - (_3318 * _3275.w);
                        float _4631 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3331 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3332 = sqrt(_3318) * _3294.w;
                        float _3335 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                        float _3336 = _3335 * _3335;
                        float _3339 = ((1.0 - _3336) * _3325) + _3336;
                        float _3342 = _3332 * _3332;
                        float _3346 = ((isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0))) * _3331) / ((_3342 * 0.699999988079071044921875) + 1.0);
                        float _3350 = (-0.0) - _2196;
                        float _3351 = (-0.0) - _2197;
                        float _3352 = (-0.0) - _2198;
                        float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                        float _3357 = _3356 * _3350;
                        float _3358 = _3356 * _3351;
                        float _3359 = _3356 * _3352;
                        float _3366 = exp2(log2(1.0 / ((_3342 * 3.5) + 5.0)) * 0.25);
                        float _3367 = 1.0 - _1145;
                        float _3374 = sqrt(1.0 - ((1.0 - (_3367 * _3367)) * (1.0 - (_3366 * _3366))));
                        float _3375 = _3374 * _3374;
                        float _3376 = _3375 * _3375;
                        float _3377 = _3357 + _3322;
                        float _3378 = _3358 + _3323;
                        float _3379 = _3359 + _3324;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3387 = dot(vec3(_1085, _1088, _1091), vec3(_3357, _3358, _3359));
                        float _4647 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3390 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3391 = dot(vec3(_1085, _1088, _1091), vec3(_3383 * _3377, _3383 * _3378, _3383 * _3379));
                        float _4658 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3398 = ((_3394 * _3394) * (_3376 + (-1.0))) + 1.0;
                        float _3399 = _3335 * _3375;
                        float _3400 = _3399 * _3399;
                        float _3403 = ((1.0 - _3400) * _3325) + _3400;
                        float _4669 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3404 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3405 = 1.0 - _3375;
                        float _3415 = (0.5 / (((_3404 * ((_3390 * _3405) + _3375)) + 9.9999999392252902907785028219223e-09) + (((_3404 * _3405) + _3375) * _3390))) * _3404;
                        float _4680 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3426 = (((_3376 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3398 * _3398) * ((_3342 * 2.1991131305694580078125) + 3.141590118408203125))) * _3331;
                        _3184 = (_3346 * _3294.x) + _3252;
                        _3185 = (_3346 * _3294.y) + _3253;
                        _3186 = (_3346 * _3294.z) + _3254;
                        _3181 = (_3426 * _3311.x) + _3249;
                        _3182 = (_3426 * _3311.y) + _3250;
                        _3183 = (_3426 * _3311.z) + _3251;
                        if (_3256 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3249 = _3181;
                            _3250 = _3182;
                            _3251 = _3183;
                            _3252 = _3184;
                            _3253 = _3185;
                            _3254 = _3186;
                            _3255 = _3256;
                        }
                    }
                    frontier_phi_98_pred = _3181;
                    frontier_phi_98_pred_1 = _3182;
                    frontier_phi_98_pred_2 = _3186;
                    frontier_phi_98_pred_3 = _3185;
                    frontier_phi_98_pred_4 = _3184;
                    frontier_phi_98_pred_5 = _3183;
                }
                _2927 = frontier_phi_98_pred;
                _2929 = frontier_phi_98_pred_1;
                _2937 = frontier_phi_98_pred_2;
                _2935 = frontier_phi_98_pred_3;
                _2933 = frontier_phi_98_pred_4;
                _2931 = frontier_phi_98_pred_5;
                uint _3111 = _3110 + 1u;
                if (_3111 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3104 = _2927;
                    _3105 = _2929;
                    _3106 = _2931;
                    _3107 = _2933;
                    _3108 = _2935;
                    _3109 = _2937;
                    _3110 = _3111;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
        }
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.z;
        uint _2943 = (_2941 >> 8u) & 15u;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        if (((4294967295u << _2943) & _2792) == 0u)
        {
            _3072 = _2926;
            _3074 = _2928;
            _3076 = _2930;
            _3078 = _2932;
            _3080 = _2934;
            _3082 = _2936;
        }
        else
        {
            float _3097 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
            float _3098 = _3097 * _2196;
            float _3099 = _3097 * _2197;
            float _3100 = _3097 * _2198;
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            float frontier_phi_91_92_ladder_3;
            float frontier_phi_91_92_ladder_4;
            float frontier_phi_91_92_ladder_5;
            if (_2943 < ((_2941 >> 12u) & 15u))
            {
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3232 = _2926;
                float _3233 = _2928;
                float _3234 = _2930;
                float _3235 = _2932;
                float _3236 = _2934;
                float _3237 = _2936;
                uint _3238 = _2943;
                uint _3247;
                bool _3248;
                for (;;)
                {
                    _3247 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3238 << 2u)) >> 2u)).x;
                    _3248 = _3247 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    float frontier_phi_104_pred_3;
                    float frontier_phi_104_pred_4;
                    float frontier_phi_104_pred_5;
                    if (_3248)
                    {
                        frontier_phi_104_pred = _3237;
                        frontier_phi_104_pred_1 = _3236;
                        frontier_phi_104_pred_2 = _3235;
                        frontier_phi_104_pred_3 = _3234;
                        frontier_phi_104_pred_4 = _3233;
                        frontier_phi_104_pred_5 = _3232;
                    }
                    else
                    {
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3444 = _3232;
                        float _3445 = _3233;
                        float _3446 = _3234;
                        float _3447 = _3235;
                        float _3448 = _3236;
                        float _3449 = _3237;
                        uint _3450 = _3247;
                        uint _3451;
                        vec4 _3476;
                        float _3477;
                        vec4 _3492;
                        vec3 _3504;
                        vec4 _3519;
                        vec4 _3534;
                        float _3580;
                        bool _3581;
                        for (;;)
                        {
                            uint _3461 = ((_3238 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3450));
                            _3451 = (_3450 + 4294967295u) & _3450;
                            uint _3463 = _3461 * 40u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            _3477 = _3476.w;
                            uint _3479 = (_3461 * 40u) + 4u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3461 * 40u) + 8u;
                            _3504 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x));
                            uint _3506 = (_3461 * 40u) + 16u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3521 = (_3461 * 40u) + 20u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3461 * 40u) + 24u;
                            vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3555 = (_3461 * 40u) + 28u;
                            vec4 _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            _3580 = fma(_2198, _3568.z, fma(_2197, _3568.y, _3568.x * _2196)) + _3568.w;
                            _3581 = !((fma(_2198, _3549.z, fma(_2197, _3549.y, _3549.x * _2196)) + _3549.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            float frontier_phi_110_pred_3;
                            float frontier_phi_110_pred_4;
                            float frontier_phi_110_pred_5;
                            if (_3581)
                            {
                                float _3608 = _3476.x - _2196;
                                float _3609 = _3476.y - _2197;
                                float _3610 = _3476.z - _2198;
                                float _3611 = dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610));
                                float _3614 = inversesqrt(_3611);
                                float _3615 = _3614 * _3608;
                                float _3616 = _3614 * _3609;
                                float _3617 = _3614 * _3610;
                                float _3621 = 1.0 - (_3611 / (_3477 * _3477));
                                float _4691 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3622 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3626 = sqrt(_3611) * _3492.w;
                                float _3628 = 1.39999997615814208984375 / (_3626 + 1.39999997615814208984375);
                                float _3629 = _3628 * _3628;
                                float _3632 = ((1.0 - _3629) * dot(vec3(_3615, _3616, _3617), vec3(_1085, _1088, _1091))) + _3629;
                                float _3635 = _3626 * _3626;
                                float _3639 = (fma(_2198, _3519.z, fma(_2197, _3519.y, _3519.x * _2196)) + _3519.w) / _3580;
                                float _3640 = (fma(_2198, _3534.z, fma(_2197, _3534.y, _3534.x * _2196)) + _3534.w) / _3580;
                                float _3644 = 1.0 - dot(vec2(_3639, _3640), vec2(_3639, _3640));
                                float _4707 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3646 = _3645 * (((isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0))) * _3622) / ((_3635 * 0.699999988079071044921875) + 1.0));
                                float _3658 = exp2(log2(1.0 / ((_3635 * 3.5) + 5.0)) * 0.25);
                                float _3659 = 1.0 - _1145;
                                float _3666 = sqrt(1.0 - ((1.0 - (_3659 * _3659)) * (1.0 - (_3658 * _3658))));
                                float _3667 = _3666 * _3666;
                                float _3668 = _3667 * _3667;
                                float _3669 = _3615 - _3098;
                                float _3670 = _3616 - _3099;
                                float _3671 = _3617 - _3100;
                                float _3675 = inversesqrt(dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671)));
                                float _3679 = dot(vec3(_1085, _1088, _1091), vec3((-0.0) - _3098, (-0.0) - _3099, (-0.0) - _3100));
                                float _4718 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3682 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3683 = dot(vec3(_1085, _1088, _1091), vec3(_3675 * _3669, _3675 * _3670, _3675 * _3671));
                                float _4729 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3686 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3690 = ((_3686 * _3686) * (_3668 + (-1.0))) + 1.0;
                                float _3691 = _3628 * _3667;
                                float _3692 = _3691 * _3691;
                                float _3698 = ((1.0 - _3692) * dot(vec3(_1085, _1088, _1091), vec3(_3615, _3616, _3617))) + _3692;
                                float _4740 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3699 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3700 = 1.0 - _3667;
                                float _3710 = (0.5 / (((_3699 * ((_3682 * _3700) + _3667)) + 9.9999999392252902907785028219223e-09) + (((_3699 * _3700) + _3667) * _3682))) * _3699;
                                float _4751 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3720 = (_3645 * _3622) * (((_3668 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3690 * _3690) * ((_3635 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_110_pred = _3720 * _3504.z;
                                frontier_phi_110_pred_1 = _3646 * _3492.z;
                                frontier_phi_110_pred_2 = _3646 * _3492.y;
                                frontier_phi_110_pred_3 = _3646 * _3492.x;
                                frontier_phi_110_pred_4 = _3720 * _3504.y;
                                frontier_phi_110_pred_5 = _3720 * _3504.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                                frontier_phi_110_pred_3 = 0.0;
                                frontier_phi_110_pred_4 = 0.0;
                                frontier_phi_110_pred_5 = 0.0;
                            }
                            _3726 = frontier_phi_110_pred;
                            _3729 = frontier_phi_110_pred_1;
                            _3728 = frontier_phi_110_pred_2;
                            _3727 = frontier_phi_110_pred_3;
                            _3725 = frontier_phi_110_pred_4;
                            _3724 = frontier_phi_110_pred_5;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            if (_3451 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3451;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _3436;
                        frontier_phi_104_pred_1 = _3435;
                        frontier_phi_104_pred_2 = _3434;
                        frontier_phi_104_pred_3 = _3433;
                        frontier_phi_104_pred_4 = _3432;
                        frontier_phi_104_pred_5 = _3431;
                    }
                    _3083 = frontier_phi_104_pred;
                    _3081 = frontier_phi_104_pred_1;
                    _3079 = frontier_phi_104_pred_2;
                    _3077 = frontier_phi_104_pred_3;
                    _3075 = frontier_phi_104_pred_4;
                    _3073 = frontier_phi_104_pred_5;
                    uint _3239 = _3238 + 1u;
                    if (_3239 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3232 = _3073;
                        _3233 = _3075;
                        _3234 = _3077;
                        _3235 = _3079;
                        _3236 = _3081;
                        _3237 = _3083;
                        _3238 = _3239;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _3083;
                frontier_phi_91_92_ladder_1 = _3081;
                frontier_phi_91_92_ladder_2 = _3079;
                frontier_phi_91_92_ladder_3 = _3077;
                frontier_phi_91_92_ladder_4 = _3075;
                frontier_phi_91_92_ladder_5 = _3073;
            }
            else
            {
                frontier_phi_91_92_ladder = _2936;
                frontier_phi_91_92_ladder_1 = _2934;
                frontier_phi_91_92_ladder_2 = _2932;
                frontier_phi_91_92_ladder_3 = _2930;
                frontier_phi_91_92_ladder_4 = _2928;
                frontier_phi_91_92_ladder_5 = _2926;
            }
            _3072 = frontier_phi_91_92_ladder_5;
            _3074 = frontier_phi_91_92_ladder_4;
            _3076 = frontier_phi_91_92_ladder_3;
            _3078 = frontier_phi_91_92_ladder_2;
            _3080 = frontier_phi_91_92_ladder_1;
            _3082 = frontier_phi_91_92_ladder;
        }
        float _3087 = isnan(1.0) ? _1129 : (isnan(_1129) ? 1.0 : min(_1129, 1.0));
        _2805 = (_3087 * _3078) + _2484;
        _2807 = (_3087 * _3080) + _2485;
        _2809 = (_3087 * _3082) + _2486;
        _2811 = ((_3072 * 0.039999999105930328369140625) * _3087) + _2640;
        _2813 = ((_3074 * 0.039999999105930328369140625) * _3087) + _2641;
        _2815 = ((_3076 * 0.039999999105930328369140625) * _3087) + _2642;
    }
    else
    {
        _2805 = _2484;
        _2807 = _2485;
        _2809 = _2486;
        _2811 = _2640;
        _2813 = _2641;
        _2815 = _2642;
    }
    uint _2821 = _1105 + uint(cbMatDynParam._m0[0u].w);
    float _2827 = (cbSceneParam._m0[72u].y * ((_998 * ((_989 - _951) - (_989 * _962))) + _951)) * cbInstanceData._m0[_2821].x;
    float _2828 = (cbSceneParam._m0[72u].y * ((_998 * ((_990 - _952) - (_990 * _962))) + _952)) * cbInstanceData._m0[_2821].y;
    float _2829 = (((_998 * ((_991 - _953) - (_991 * _962))) + _953) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2821].z;
    float _4767 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _4778 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _4789 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2846 = (((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2805 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1129))) + ((_2811 + ((isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0))) * _1933)) * cbPerFrame._m0[3u].x)) + _2827;
    float _2848 = (_2828 + ((_2813 + ((isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0))) * _1933)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2807 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1129)));
    float _2850 = (_2829 + ((_2815 + ((isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))) * _1933)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2809 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1129)));
    float _4815 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2863 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
    uint _2864 = _1104 + 6u;
    float _2872 = _1066 / cbSceneParam._m0[86u].x;
    float _2873 = _1067 / cbSceneParam._m0[86u].y;
    vec4 _2887 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, (log2((isnan(cbSceneParam._m0[77u].w) ? _1053 : (isnan(_1053) ? cbSceneParam._m0[77u].w : min(_1053, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2889 = _2887.x;
    float _2890 = _2887.y;
    float _2891 = _2887.z;
    float _2892 = _2887.w;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_1053 > cbSceneParam._m0[78u].w)
    {
        float _2951 = isnan(_1053) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1053 : min(cbSceneParam._m0[80u].w, _1053));
        float _2952 = _2951 / _1053;
        float _2963 = _2952 * _288;
        float _2964 = _289 * _2952;
        float _2965 = (-0.0) - _2964;
        float _2966 = _2952 * _290;
        float _2968 = (cbSceneParam._m0[77u].w * _2965) / _2951;
        float _2969 = _2968 + cbSceneParam._m0[79u].w;
        float _2970 = cbSceneParam._m0[79u].w - _2964;
        float _2976 = sqrt(((_2963 * _2963) + (_2964 * _2964)) + (_2966 * _2966));
        float _2979 = (1.0 - (cbSceneParam._m0[77u].w / _2951)) * _2976;
        float _2984 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2986 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3194;
        if (abs((_2965 - _2968) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3194 = ((((_2969 > 0.0) ? exp2(_2984 * _2969) : (2.0 - exp2(_2986 * _2969))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2979;
        }
        else
        {
            float _3133 = 1.0 / cbSceneParam._m0[80u].x;
            float _3134 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : max(_2969, _2970));
            float _3135 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : min(_2969, _2970));
            float _3144 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : min(_3134, 0.0));
            float _3145 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : min(_3135, 0.0));
            _3194 = ((abs(_2976 / _2965) * cbSceneParam._m0[80u].y) * ((((_3144 - _3145) * 2.0) - ((exp2(_2984 * (isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0)))) - exp2(_2984 * (isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0))))) * _3133)) - ((exp2(_2986 * _3144) - exp2(_2986 * _3145)) * _3133))) + (_2979 * cbSceneParam._m0[80u].z);
        }
        vec4 _3196 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, 1.0), 0.0);
        float _3205 = exp2((_3194 * (-1.44269502162933349609375)) * (1.0 - _3196.w));
        float _3206 = log2(_3205);
        float _3222 = log2(_2892);
        _2988 = (exp2(_3222 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3206 * cbSceneParam._m0[78u].x)) * _3196.x) / cbSceneParam._m0[78u].x)) + _2889;
        _2990 = (exp2(_3222 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3206 * cbSceneParam._m0[78u].y)) * _3196.y) / cbSceneParam._m0[78u].y)) + _2890;
        _2992 = (exp2(_3222 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3206 * cbSceneParam._m0[78u].z)) * _3196.z) / cbSceneParam._m0[78u].z)) + _2891;
        _2994 = _3205 * _2892;
    }
    else
    {
        _2988 = _2889;
        _2990 = _2890;
        _2992 = _2891;
        _2994 = _2892;
    }
    float _3005 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3006 = _3005 == 3.0;
    float _3007 = log2(_2994);
    float _3011 = exp2(_3007 * cbSceneParam._m0[78u].x);
    float _3012 = exp2(_3007 * cbSceneParam._m0[78u].y);
    float _3013 = exp2(_3007 * cbSceneParam._m0[78u].z);
    float _3014 = _3011 * (isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0)));
    float _3015 = _3012 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0)));
    float _3016 = _3013 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0)));
    float _3025 = (_3005 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3025 * (_3006 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2988)));
    SV_Target.y = _3025 * (_3006 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2990)));
    SV_Target.z = _3025 * (_3006 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2992)));
    SV_Target.w = cbInstanceData._m0[_2864].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2827) * _2863) * _3011) * _3025;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2828) * _2863) * _3012) * _3025;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2829) * _2863) * _3013) * _3025;
    SV_Target_1.w = cbInstanceData._m0[_2864].w;
}


