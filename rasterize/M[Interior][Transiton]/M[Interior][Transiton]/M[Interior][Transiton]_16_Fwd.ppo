#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1463;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    vec4 _300 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _303 = _300.x;
    vec4 _321 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _338 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _303) + cbMtdParam._m0[12u].x) * _321.x;
    float _340 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _303) + cbMtdParam._m0[12u].y) * _321.y;
    float _342 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _303) + cbMtdParam._m0[12u].z) * _321.z;
    vec4 _360 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _399 = cbMtdParam._m0[27u].w + _284;
    float _400 = cbMtdParam._m0[28u].x + _285;
    float _401 = cbMtdParam._m0[28u].y + _286;
    float _415 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_214, _215, _216));
    float _416 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_228, _229, _230));
    float _417 = (-0.0) - dot(vec3(_399, _400, _401), vec3((-0.0) - _221, (-0.0) - _222, (-0.0) - _223));
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _424 = _421 * _417;
    float _425 = (_421 * _415) + ((cbMtdParam._m0[25u].w * _303) * ((_360.x * 2.0) + (-1.0)));
    float _426 = (_421 * _416) + ((cbMtdParam._m0[26u].x * _303) * ((_360.y * 2.0) + (-1.0)));
    float _427 = _425 * cbMtdParam._m0[24u].x;
    float _428 = _426 * cbMtdParam._m0[23u].w;
    float _429 = fract(TEXCOORD.x);
    float _430 = fract(TEXCOORD.y);
    float _436;
    if (_427 > 0.0)
    {
        _436 = (1.0 - _429) / _427;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_427 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _429) / _427;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _436 = frontier_phi_3_2_ladder;
    }
    float _444;
    if (_428 > 0.0)
    {
        _444 = (1.0 - _430) / _428;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_428 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _430) / _428;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _444 = frontier_phi_7_6_ladder;
    }
    bool _446 = _424 > 0.0;
    float _448 = _446 ? (cbMtdParam._m0[17u].x / _424) : 5000.0;
    float _449 = isnan(_444) ? _436 : (isnan(_436) ? _444 : min(_436, _444));
    float _450 = isnan(_448) ? _449 : (isnan(_449) ? _448 : min(_449, _448));
    float _454 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _455 = _429 + (-0.5);
    float _458 = _430 + (-0.5);
    float _461 = ((_450 * _424) + _454) / _454;
    vec4 _486 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_455 + (_450 * _427)) / _461) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_458 + (_450 * _428)) / _461) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _499 = (_486.x * _303) * cbMtdParam._m0[9u].x;
    float _500 = (_486.y * _303) * cbMtdParam._m0[9u].y;
    float _501 = (_486.z * _303) * cbMtdParam._m0[9u].z;
    float _519 = _425 * cbMtdParam._m0[26u].z;
    float _520 = _426 * cbMtdParam._m0[26u].y;
    bool _521 = _519 > 0.0;
    float _526;
    if (_521)
    {
        _526 = (1.0 - _429) / _519;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_519 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _429) / _519;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _526 = frontier_phi_11_10_ladder;
    }
    bool _528 = _520 > 0.0;
    float _533;
    if (_528)
    {
        _533 = (1.0 - _430) / _520;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_520 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _430) / _520;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _533 = frontier_phi_15_14_ladder;
    }
    float _536 = _446 ? (cbMtdParam._m0[19u].z / _424) : 5000.0;
    float _537 = isnan(_533) ? _526 : (isnan(_526) ? _533 : min(_526, _533));
    float _538 = isnan(_536) ? _537 : (isnan(_537) ? _536 : min(_537, _536));
    float _542 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _546 = ((_538 * _424) + _542) / _542;
    float _551 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _553 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _569 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_455 + (_538 * _519)) / _546) + 0.5) + _551) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_458 + (_538 * _520)) / _546) + 0.5) + _553) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _584;
    if (_521)
    {
        _584 = (1.0 - _429) / _519;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_519 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _429) / _519;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _584 = frontier_phi_19_18_ladder;
    }
    float _590;
    if (_528)
    {
        _590 = (1.0 - _430) / _520;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_520 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _430) / _520;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _590 = frontier_phi_23_22_ladder;
    }
    float _592 = isnan(_590) ? _584 : (isnan(_584) ? _590 : min(_584, _590));
    float _593 = isnan(_536) ? _592 : (isnan(_592) ? _536 : min(_592, _536));
    float _600 = ((_593 * _424) + _542) / _542;
    vec4 _620 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_455 + (_593 * _519)) / _600) + 0.5) + _551) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_458 + (_593 * _520)) / _600) + 0.5) + _553) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _622 = _620.x;
    float _632 = (((((cbMtdParam._m0[10u].x * _303) * _569.x) - _499) * _303) * _622) + _499;
    float _633 = (((((cbMtdParam._m0[10u].y * _303) * _569.y) - _500) * _303) * _622) + _500;
    float _634 = (((((cbMtdParam._m0[10u].z * _303) * _569.z) - _501) * _303) * _622) + _501;
    float _647 = _425 * cbMtdParam._m0[27u].x;
    float _648 = _426 * cbMtdParam._m0[26u].w;
    bool _649 = _647 > 0.0;
    float _654;
    if (_649)
    {
        _654 = (1.0 - _429) / _647;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_647 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _429) / _647;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _654 = frontier_phi_27_26_ladder;
    }
    bool _656 = _648 > 0.0;
    float _661;
    if (_656)
    {
        _661 = (1.0 - _430) / _648;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_648 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _430) / _648;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _661 = frontier_phi_31_30_ladder;
    }
    float _664 = _446 ? (cbMtdParam._m0[23u].x / _424) : 5000.0;
    float _665 = isnan(_661) ? _654 : (isnan(_654) ? _661 : min(_654, _661));
    float _666 = isnan(_664) ? _665 : (isnan(_665) ? _664 : min(_665, _664));
    float _670 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _674 = ((_666 * _424) + _670) / _670;
    float _679 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _681 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _697 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_455 + (_666 * _647)) / _674) + 0.5) + _679) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_458 + (_666 * _648)) / _674) + 0.5) + _681) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _712;
    if (_649)
    {
        _712 = (1.0 - _429) / _647;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_647 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _429) / _647;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _712 = frontier_phi_35_34_ladder;
    }
    float _718;
    if (_656)
    {
        _718 = (1.0 - _430) / _648;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_648 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _430) / _648;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _718 = frontier_phi_39_38_ladder;
    }
    float _720 = isnan(_718) ? _712 : (isnan(_712) ? _718 : min(_712, _718));
    float _721 = isnan(_664) ? _720 : (isnan(_720) ? _664 : min(_720, _664));
    float _728 = ((_721 * _424) + _670) / _670;
    vec4 _748 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_455 + (_721 * _647)) / _728) + 0.5) + _679) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_458 + (_721 * _648)) / _728) + 0.5) + _681) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _750 = _748.x;
    float _760 = _303 * 0.1500000059604644775390625;
    float _771 = (_760 * ((_632 - _338) + (((((cbMtdParam._m0[13u].x * _303) * _697.x) - _632) * _303) * _750))) + _338;
    float _772 = (_760 * ((_633 - _340) + (((((cbMtdParam._m0[13u].y * _303) * _697.y) - _633) * _303) * _750))) + _340;
    float _773 = (_760 * ((_634 - _342) + (((((cbMtdParam._m0[13u].z * _303) * _697.z) - _634) * _303) * _750))) + _342;
    vec4 _786 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _790 = _786.z;
    float _793 = (_786.x * 2.0) + (-1.0);
    float _794 = (_786.y * 2.0) + (-1.0);
    float _795 = dot(vec2(_793, _794), vec2(_793, _794));
    float _3652 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _800 = sqrt(1.0 - (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))));
    vec4 _824 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _829 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _835 = ((_824.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _837 = (-0.0) - (cbMtdParam._m0[21u].x * ((_824.x * 0.5) + (-0.25)));
    float _838 = fract(_829);
    float _840 = fract(_829 + 0.5);
    vec4 _867 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_838 * _837) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_835 * _838) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _869 = _867.x;
    float _875 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_840 * _837) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_835 * _840) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _869) * abs((_838 * 2.0) + (-1.0))) + _869;
    float _881 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _885 = fract(abs(_881));
    float _894 = sin(cbMtdParam._m0[21u].z);
    float _895 = cos(cbMtdParam._m0[21u].z);
    float _896 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _897 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _927 = abs(cbMtdParam._m0[20u].w * (((_875 - (((_881 >= ((-0.0) - _881)) ? _885 : ((-0.0) - _885)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_897, (-0.0) - _894, _895 * _896) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_897, _895, _896 * _894) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _931 = (((_927 * cbMtdParam._m0[18u].y) - _875) * _927) + _875;
    float _3663 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _932 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    vec4 _944 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _959 = (cbMtdParam._m0[14u].x * _944.x) * cbMtdParam._m0[19u].x;
    float _960 = (cbMtdParam._m0[14u].y * _944.y) * cbMtdParam._m0[19u].x;
    float _961 = (cbMtdParam._m0[14u].z * _944.z) * cbMtdParam._m0[19u].x;
    float _971 = exp2(log2(_932) * cbMtdParam._m0[20u].x);
    float _984 = fma(_800, _221, fma(_794, _228, _793 * _214));
    float _987 = fma(_800, _222, fma(_794, _229, _793 * _215));
    float _990 = fma(_800, _223, fma(_794, _230, _793 * _216));
    float _994 = inversesqrt(dot(vec3(_984, _987, _990), vec3(_984, _987, _990)));
    float _995 = _994 * _984;
    float _996 = _994 * _987;
    float _997 = _994 * _990;
    float _3674 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _998 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _3696 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _3707 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _1017 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1021 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _1022 = _284 * _1021;
    float _1023 = _285 * _1021;
    float _1024 = _286 * _1021;
    float _1030 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1031 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1049 = fma(_997, cbSceneParam._m0[5u].z, fma(_996, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _995));
    float _1052 = fma(_997, cbSceneParam._m0[6u].z, fma(_996, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _995));
    float _1055 = fma(_997, cbSceneParam._m0[7u].z, fma(_996, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _995));
    uint _1068 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1069 = _1068 + 9u;
    uint _1070 = _1069 + uint(cbMatDynParam._m0[0u].w);
    float _1076 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) * cbInstanceData._m0[_1070].x;
    float _1077 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * cbInstanceData._m0[_1070].y;
    float _1078 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)))) * cbInstanceData._m0[_1070].z;
    float _3718 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _3729 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    vec4 _1090 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1030, cbSceneParam._m0[86u].y * _1031));
    float _1093 = _1090.x * TEXCOORD_4;
    float _1094 = dot(vec3(_995, _996, _997), vec3(_1022, _1023, _1024));
    float _1097 = _1094 * 2.0;
    float _1101 = (_1097 * _995) - _1022;
    float _1102 = (_1097 * _996) - _1023;
    float _1103 = (_1097 * _997) - _1024;
    float _1107 = abs(dot(vec3(_1022, _1023, _1024), vec3(_995, _996, _997)));
    float _3751 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1109 = sqrt(_998);
    float _1122 = exp2((_1109 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1109 * 3.0));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1162 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1462;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1189 = fma(_1162, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1154));
        float _1193 = fma(_1162, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1154));
        float _1197 = fma(_1162, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1154));
        float _1220 = _1154 + _995;
        float _1221 = _1158 + _996;
        float _1222 = _1162 + _997;
        float _1232 = fma(_1222, cbModelParam._m0[26u].z, fma(_1221, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1220)) - _1189;
        float _1233 = fma(_1222, cbModelParam._m0[27u].z, fma(_1221, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1220)) - _1193;
        float _1234 = fma(_1222, cbModelParam._m0[28u].z, fma(_1221, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1220)) - _1197;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1189 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1193 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[34u].z) + ((((((_1197 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1290 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1256.x + (-0.5));
        float _1292 = _1290 * (_1256.y + (-0.5));
        float _1293 = _1290 * (_1256.z + (-0.5));
        float _1300 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1263.x + (-0.5));
        float _1302 = _1300 * (_1263.y + (-0.5));
        float _1303 = _1300 * (_1263.z + (-0.5));
        float _1310 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1270.x + (-0.5));
        float _1312 = _1310 * (_1270.y + (-0.5));
        float _1313 = _1310 * (_1270.z + (-0.5));
        float _1320 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1277.x + (-0.5));
        float _1322 = _1320 * (_1277.y + (-0.5));
        float _1323 = _1320 * (_1277.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1344 = (dot(vec3(_995, _996, _997), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1354 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _3799 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1356 + 1.0))) + _1361) * _1324;
        float _1371 = _1292 * 0.5;
        float _1372 = _1302 * 0.5;
        float _1373 = _1312 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_995, _996, _997), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _3832 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1398 + 1.0))) + _1403) * _1325;
        float _1413 = _1293 * 0.5;
        float _1414 = _1303 * 0.5;
        float _1415 = _1313 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_995, _996, _997), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _3865 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1440 + 1.0))) + _1445) * _1326;
        _1462 = _1293;
        _1464 = _1292;
        _1465 = _1291;
        _1466 = _1303;
        _1467 = _1302;
        _1468 = _1301;
        _1469 = _1313;
        _1470 = _1312;
        _1471 = _1311;
        _1472 = _1326;
        _1473 = _1325;
        _1474 = _1324;
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1463;
        _1464 = _1463;
        _1465 = _1463;
        _1466 = _1463;
        _1467 = _1463;
        _1468 = _1463;
        _1469 = _1463;
        _1470 = _1463;
        _1471 = _1463;
        _1472 = _1463;
        _1473 = _1463;
        _1474 = _1463;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1502 = fma(_1162, cbModelParam._m0[30u].z, fma(_1158, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154));
        float _1506 = fma(_1162, cbModelParam._m0[31u].z, fma(_1158, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154));
        float _1510 = fma(_1162, cbModelParam._m0[32u].z, fma(_1158, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154));
        float _1533 = _1154 + _995;
        float _1534 = _1158 + _996;
        float _1535 = _1162 + _997;
        float _1545 = fma(_1535, cbModelParam._m0[30u].z, fma(_1534, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1533)) - _1502;
        float _1546 = fma(_1535, cbModelParam._m0[31u].z, fma(_1534, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1533)) - _1506;
        float _1547 = fma(_1535, cbModelParam._m0[32u].z, fma(_1534, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1533)) - _1510;
        float _1551 = inversesqrt(dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547)));
        float _1564 = ((_1551 * _1545) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1502 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1565 = ((_1551 * _1546) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1506 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1566 = ((_1551 * _1547) / cbModelParam._m0[35u].z) + ((((((_1510 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        float _1601 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1568.x + (-0.5));
        float _1603 = _1601 * (_1568.y + (-0.5));
        float _1604 = _1601 * (_1568.z + (-0.5));
        float _1611 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1575.x + (-0.5));
        float _1613 = _1611 * (_1575.y + (-0.5));
        float _1614 = _1611 * (_1575.z + (-0.5));
        float _1621 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1582.x + (-0.5));
        float _1623 = _1621 * (_1582.y + (-0.5));
        float _1624 = _1621 * (_1582.z + (-0.5));
        float _1631 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1589.x + (-0.5));
        float _1633 = _1631 * (_1589.y + (-0.5));
        float _1634 = _1631 * (_1589.z + (-0.5));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = _1602 * 0.5;
        float _1639 = _1612 * 0.5;
        float _1640 = _1622 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_995, _996, _997), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _3928 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1665 + 1.0))) + _1670) * _1635;
        float _1680 = _1603 * 0.5;
        float _1681 = _1613 * 0.5;
        float _1682 = _1623 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_995, _996, _997), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _3961 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1707 + 1.0))) + _1712) * _1636;
        float _1722 = _1604 * 0.5;
        float _1723 = _1614 * 0.5;
        float _1724 = _1624 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_995, _996, _997), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _3994 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1749 + 1.0))) + _1754) * _1637;
        _1771 = _1604;
        _1772 = _1603;
        _1773 = _1602;
        _1774 = _1614;
        _1775 = _1613;
        _1776 = _1612;
        _1777 = _1624;
        _1778 = _1623;
        _1779 = _1622;
        _1780 = _1637;
        _1781 = _1636;
        _1782 = _1635;
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
    }
    else
    {
        _1771 = _1463;
        _1772 = _1463;
        _1773 = _1463;
        _1774 = _1463;
        _1775 = _1463;
        _1776 = _1463;
        _1777 = _1463;
        _1778 = _1463;
        _1779 = _1463;
        _1780 = _1463;
        _1781 = _1463;
        _1782 = _1463;
        _1783 = 0.0;
        _1784 = 0.0;
        _1785 = 0.0;
    }
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1475)) + _1475;
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1476)) + _1476;
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1477)) + _1477;
    float _1818 = fma(_1797, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1795 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1797, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1795 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1797, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1795));
    float _1839 = _1101 * 0.5;
    float _1840 = _1102 * 0.5;
    float _1841 = _1103 * 0.5;
    float _1842 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1845 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1848 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1882;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1855 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1462, _1466, _1469, _1472));
        float _1859 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1863 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1465, _1468, _1471, _1474));
        float _1870 = dot(vec4(cbModelParam._m0[39u]), vec4(_1839, _1840, _1841, 1.0));
        _1882 = dot(vec3(isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1870) ? 0.0 : (isnan(0.0) ? _1870 : max(0.0, _1870))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1882 = 1.0;
    }
    float _1893;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1884 = dot(vec4(cbModelParam._m0[40u]), vec4(_1839, _1840, _1841, 1.0));
        _1893 = dot(vec3(isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1884) ? 0.0 : (isnan(0.0) ? _1884 : max(0.0, _1884))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1893 = 1.0;
    }
    float _1897 = (_1893 * cbModelParam._m0[1u].x) + (_1882 * (1.0 - cbModelParam._m0[1u].x));
    float _1907 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _998);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1907 : min(cbModelParam._m0[25u].z, _1907));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1956 = fma(_1162, cbModelParam._m0[13u].z, fma(_1158, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1154)) + cbModelParam._m0[13u].w;
        float _1960 = fma(_1162, cbModelParam._m0[14u].z, fma(_1158, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1154)) + cbModelParam._m0[14u].w;
        float _1964 = fma(_1162, cbModelParam._m0[15u].z, fma(_1158, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1154)) + cbModelParam._m0[15u].w;
        float _1967 = fma(_1103, cbModelParam._m0[13u].z, fma(_1102, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101));
        float _1970 = fma(_1103, cbModelParam._m0[14u].z, fma(_1102, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101));
        float _1973 = fma(_1103, cbModelParam._m0[15u].z, fma(_1102, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101));
        float _2001;
        if (_1967 > 0.0)
        {
            _2001 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _2001 = frontier_phi_54_52_ladder;
        }
        float _2346;
        if (_1970 > 0.0)
        {
            _2346 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2346 = frontier_phi_63_59_ladder;
        }
        float _2680;
        if (_1973 > 0.0)
        {
            _2680 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2680 = frontier_phi_77_70_ladder;
        }
        float _2682 = isnan(_2346) ? _2001 : (isnan(_2001) ? _2346 : min(_2001, _2346));
        float _2683 = isnan(_2680) ? _2682 : (isnan(_2682) ? _2680 : min(_2682, _2680));
        float _2687 = (_2683 * _1967) + _1956;
        float _2688 = (_2683 * _1970) + _1960;
        float _2689 = (_2683 * _1973) + _1964;
        float _2690 = _2683 * 9.9999997473787516355514526367188e-05;
        float _2691 = (-1.0) - _2690;
        float _2693 = _2690 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2689 > _2693) || ((_2689 < _2691) || ((_2688 > _2693) || ((_2688 < _2691) || ((_2687 < _2691) || (_2687 > _2693))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2815 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2689, cbModelParam._m0[9u].z, fma(_2688, cbModelParam._m0[9u].y, _2687 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2689, cbModelParam._m0[10u].z, fma(_2688, cbModelParam._m0[10u].y, _2687 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2689, cbModelParam._m0[11u].z, fma(_2688, cbModelParam._m0[11u].y, _2687 * cbModelParam._m0[11u].x))), _1908);
            frontier_phi_53_77_ladder = _2815.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2815.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2815.z * cbModelParam._m0[1u].y;
        }
        _1989 = frontier_phi_53_77_ladder;
        _1991 = frontier_phi_53_77_ladder_1;
        _1993 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1977 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1101, _1102, _1103), _1908);
        _1989 = _1977.x * cbModelParam._m0[1u].y;
        _1991 = _1977.y * cbModelParam._m0[1u].y;
        _1993 = _1977.z * cbModelParam._m0[1u].y;
    }
    float _1997 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _998);
    float _1998 = isnan(_1997) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1997 : min(cbModelParam._m0[25u].w, _1997));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2050 = fma(_1162, cbModelParam._m0[21u].z, fma(_1158, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1154)) + cbModelParam._m0[21u].w;
        float _2054 = fma(_1162, cbModelParam._m0[22u].z, fma(_1158, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1154)) + cbModelParam._m0[22u].w;
        float _2058 = fma(_1162, cbModelParam._m0[23u].z, fma(_1158, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1154)) + cbModelParam._m0[23u].w;
        float _2061 = fma(_1103, cbModelParam._m0[21u].z, fma(_1102, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101));
        float _2064 = fma(_1103, cbModelParam._m0[22u].z, fma(_1102, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101));
        float _2067 = fma(_1103, cbModelParam._m0[23u].z, fma(_1102, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101));
        float _2351;
        if (_2061 > 0.0)
        {
            _2351 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2351 = frontier_phi_65_61_ladder;
        }
        float _2706;
        if (_2064 > 0.0)
        {
            _2706 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2706 = frontier_phi_79_72_ladder;
        }
        float _2875;
        if (_2067 > 0.0)
        {
            _2875 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2875 = frontier_phi_93_88_ladder;
        }
        float _2877 = isnan(_2706) ? _2351 : (isnan(_2351) ? _2706 : min(_2351, _2706));
        float _2878 = isnan(_2875) ? _2877 : (isnan(_2877) ? _2875 : min(_2877, _2875));
        float _2882 = (_2878 * _2061) + _2050;
        float _2883 = (_2878 * _2064) + _2054;
        float _2884 = (_2878 * _2067) + _2058;
        float _2885 = _2878 * 9.9999997473787516355514526367188e-05;
        float _2886 = (-1.0) - _2885;
        float _2888 = _2885 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2884 > _2888) || ((_2884 < _2886) || ((_2883 > _2888) || ((_2883 < _2886) || ((_2882 < _2886) || (_2882 > _2888))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2884, cbModelParam._m0[17u].z, fma(_2883, cbModelParam._m0[17u].y, _2882 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2884, cbModelParam._m0[18u].z, fma(_2883, cbModelParam._m0[18u].y, _2882 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2884, cbModelParam._m0[19u].z, fma(_2883, cbModelParam._m0[19u].y, _2882 * cbModelParam._m0[19u].x))), _1998);
            frontier_phi_62_93_ladder = _3117.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _3117.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _3117.x * cbModelParam._m0[1u].z;
        }
        _2086 = frontier_phi_62_93_ladder_2;
        _2088 = frontier_phi_62_93_ladder_1;
        _2090 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1101, _1102, _1103), _1998);
        _2086 = _2070.x * cbModelParam._m0[1u].z;
        _2088 = _2070.y * cbModelParam._m0[1u].z;
        _2090 = _2070.z * cbModelParam._m0[1u].z;
    }
    float _2102 = ((((1.0 - _1122) * ((_1109 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1122 * _1109)) * _1093;
    float _2103 = _2102 * ((cbModelParam._m0[1u].w * (_2086 - _1989)) + _1989);
    float _2104 = _2102 * ((cbModelParam._m0[1u].w * (_2088 - _1991)) + _1991);
    float _2105 = _2102 * ((cbModelParam._m0[1u].w * (_2090 - _1993)) + _1993);
    float _2108 = fma(_2105, cbSceneParam._m0[89u].z, fma(_2104, cbSceneParam._m0[89u].y, _2103 * cbSceneParam._m0[89u].x));
    float _2111 = fma(_2105, cbSceneParam._m0[90u].z, fma(_2104, cbSceneParam._m0[90u].y, _2103 * cbSceneParam._m0[90u].x));
    float _2114 = fma(_2105, cbSceneParam._m0[91u].z, fma(_2104, cbSceneParam._m0[91u].y, _2103 * cbSceneParam._m0[91u].x));
    uvec4 _2124 = floatBitsToUint(cbInstanceData._m0[_1068 + 5u]);
    uint _2126 = _2124.x * 14u;
    uint _2127 = _2126 + 13u;
    float _2132 = _1093 + (-1.0);
    float _2135 = (cbLight._m0[_2127].x * _2132) + 1.0;
    float _2136 = (cbLight._m0[_2127].y * _2132) + 1.0;
    uint _2137 = _2126 + 5u;
    float _2143 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
    uint _2147 = _2126 + 4u;
    float _2153 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2157 = _2126 | 1u;
    float _2168 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_995, _996, _997));
    float _2171 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_995, _996, _997));
    float _4130 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _4141 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2176 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * 0.3183098733425140380859375;
    float _2178 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.3183098733425140380859375;
    float _2185 = ((cbLight._m0[_2137].x * _2143) * _2178) + ((cbLight._m0[_2147].x * _2153) * _2176);
    float _2186 = ((_2143 * cbLight._m0[_2137].y) * _2178) + ((_2153 * cbLight._m0[_2147].y) * _2176);
    float _2187 = ((_2143 * cbLight._m0[_2137].z) * _2178) + ((_2153 * cbLight._m0[_2147].z) * _2176);
    uint _2189 = _2126 + 8u;
    float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _998) * 0.949999988079071044921875);
    float _2203 = _2202 * _2202;
    float _2204 = cbLight._m0[_2126].x + _1022;
    float _2205 = cbLight._m0[_2126].y + _1023;
    float _2206 = cbLight._m0[_2126].z + _1024;
    float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
    float _2211 = _2210 * _2204;
    float _2212 = _2210 * _2205;
    float _2213 = _2210 * _2206;
    float _2214 = dot(vec3(_995, _996, _997), vec3(cbLight._m0[_2126].xyz));
    float _4152 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _2218 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2219 = dot(vec3(_995, _996, _997), vec3(_2211, _2212, _2213));
    float _4174 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2223 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2211, _2212, _2213));
    float _4185 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2227 = _2203 * _2203;
    float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
    float _2242 = (exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2243 = 1.0 - _2203;
    float _2254 = (0.5 / (((_2218 * ((_2217 * _2243) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2243) + _2203) * _2217))) * _2217;
    float _4196 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2256 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
    uint _2267 = _2126 + 9u;
    float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _998) * 0.949999988079071044921875);
    float _2279 = _2278 * _2278;
    float _2280 = cbLight._m0[_2157].x + _1022;
    float _2281 = cbLight._m0[_2157].y + _1023;
    float _2282 = cbLight._m0[_2157].z + _1024;
    float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
    float _2287 = _2286 * _2280;
    float _2288 = _2286 * _2281;
    float _2289 = _2286 * _2282;
    float _2290 = dot(vec3(_995, _996, _997), vec3(cbLight._m0[_2157].xyz));
    float _4207 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2294 = dot(vec3(_995, _996, _997), vec3(_2287, _2288, _2289));
    float _4218 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2298 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2287, _2288, _2289));
    float _4229 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2302 = _2279 * _2279;
    float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
    float _2315 = (exp2(log2(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2316 = 1.0 - _2279;
    float _2326 = (0.5 / (((_2218 * ((_2293 * _2316) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2316) + _2279) * _2293))) * _2293;
    float _4240 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2328 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
    float _2338 = (((_2315 * cbLight._m0[_2267].x) * _2328) * _2143) + (((_2242 * cbLight._m0[_2189].x) * _2256) * _2153);
    float _2339 = (((_2315 * cbLight._m0[_2267].y) * _2328) * _2143) + (((_2242 * cbLight._m0[_2189].y) * _2256) * _2153);
    float _2340 = (((_2315 * cbLight._m0[_2267].z) * _2328) * _2143) + (((_2242 * cbLight._m0[_2189].z) * _2256) * _2153);
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    if (_2124.y == 0u)
    {
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2395;
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2395;
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2395;
        uvec4 _2410 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2411 = _2410.x;
        uint _2422 = uint((float(_2410.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1031) / _2411))) + floor(float(uint(cbSceneParam._m0[85u].x * _1030) / _2411)));
        float _2432 = (log2(_2398 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2433 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        uint _2436 = uint(isnan(14.0) ? _2433 : (isnan(_2433) ? 14.0 : min(_2433, 14.0)));
        uvec4 _2441 = texelFetch(g_lightClusterGridBuffer, int(((_2436 << 2u) + (_2422 << 6u)) >> 2u));
        uint _2442 = _2441.x;
        uint _2443 = _2410.z;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((((1u << ((_2443 >> 4u) & 15u)) + 4294967295u) & _2442) == 0u) || ((_2443 & 240u) == 0u))
        {
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
        }
        else
        {
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            uint _2749 = 0u;
            uint _2758;
            bool _2759;
            for (;;)
            {
                _2758 = texelFetch(g_lightClassification, int((((_2436 << 5u) + (_2422 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                _2759 = _2758 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2759)
                {
                    frontier_phi_90_pred = _2748;
                    frontier_phi_90_pred_1 = _2743;
                    frontier_phi_90_pred_2 = _2744;
                    frontier_phi_90_pred_3 = _2745;
                    frontier_phi_90_pred_4 = _2746;
                    frontier_phi_90_pred_5 = _2747;
                }
                else
                {
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    uint _2924;
                    _2918 = _2743;
                    _2919 = _2744;
                    _2920 = _2745;
                    _2921 = _2746;
                    _2922 = _2747;
                    _2923 = _2748;
                    _2924 = _2758;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    for (;;)
                    {
                        uint _2928 = uint(findLSB(_2924)) + (_2749 << 5u);
                        uint _2925 = (_2924 + 4294967295u) & _2924;
                        uint _2930 = _2928 * 48u;
                        vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 3u)).x));
                        uint _2950 = (_2928 * 48u) + 4u;
                        vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 3u)).x));
                        uint _2969 = (_2928 * 48u) + 8u;
                        vec3 _2980 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x));
                        float _2984 = _2944.x - _2396;
                        float _2985 = _2944.y - _2397;
                        float _2986 = _2944.z - _2398;
                        float _2987 = dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986));
                        float _2990 = inversesqrt(_2987);
                        float _2991 = _2990 * _2984;
                        float _2992 = _2990 * _2985;
                        float _2993 = _2990 * _2986;
                        float _2994 = dot(vec3(_1049, _1052, _1055), vec3(_2991, _2992, _2993));
                        float _2999 = 1.0 - (_2987 * _2944.w);
                        float _4261 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3000 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _3001 = sqrt(_2987) * _2963.w;
                        float _3004 = 1.39999997615814208984375 / (_3001 + 1.39999997615814208984375);
                        float _3005 = _3004 * _3004;
                        float _3008 = ((1.0 - _3005) * _2994) + _3005;
                        float _3011 = _3001 * _3001;
                        float _3015 = ((isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))) * _3000) / ((_3011 * 0.699999988079071044921875) + 1.0);
                        float _3019 = (-0.0) - _2396;
                        float _3020 = (-0.0) - _2397;
                        float _3021 = (-0.0) - _2398;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3026 = _3025 * _3019;
                        float _3027 = _3025 * _3020;
                        float _3028 = _3025 * _3021;
                        float _3036 = exp2(log2(1.0 / ((_3011 * 3.5) + 5.0)) * 0.25);
                        float _3037 = 1.0 - _1109;
                        float _3044 = sqrt(1.0 - ((1.0 - (_3037 * _3037)) * (1.0 - (_3036 * _3036))));
                        float _3045 = _3044 * _3044;
                        float _3046 = _3045 * _3045;
                        float _3047 = _3026 + _2991;
                        float _3048 = _3027 + _2992;
                        float _3049 = _3028 + _2993;
                        float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
                        float _3057 = dot(vec3(_1049, _1052, _1055), vec3(_3026, _3027, _3028));
                        float _4277 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3060 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _3061 = dot(vec3(_1049, _1052, _1055), vec3(_3053 * _3047, _3053 * _3048, _3053 * _3049));
                        float _4288 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3064 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _3068 = ((_3064 * _3064) * (_3046 + (-1.0))) + 1.0;
                        float _3069 = _3004 * _3045;
                        float _3070 = _3069 * _3069;
                        float _3073 = ((1.0 - _3070) * _2994) + _3070;
                        float _4299 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3074 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _3075 = 1.0 - _3045;
                        float _3085 = (0.5 / (((_3074 * ((_3060 * _3075) + _3045)) + 9.9999999392252902907785028219223e-09) + (((_3074 * _3075) + _3045) * _3060))) * _3074;
                        float _4310 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3096 = (((_3046 * 3.1415927410125732421875) * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) / ((_3068 * _3068) * ((_3011 * 2.1991131305694580078125) + 3.141590118408203125))) * _3000;
                        _2827 = (_3015 * _2963.x) + _2921;
                        _2828 = (_3015 * _2963.y) + _2922;
                        _2829 = (_3015 * _2963.z) + _2923;
                        _2824 = (_3096 * _2980.x) + _2918;
                        _2825 = (_3096 * _2980.y) + _2919;
                        _2826 = (_3096 * _2980.z) + _2920;
                        if (_2925 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2918 = _2824;
                            _2919 = _2825;
                            _2920 = _2826;
                            _2921 = _2827;
                            _2922 = _2828;
                            _2923 = _2829;
                            _2924 = _2925;
                        }
                    }
                    frontier_phi_90_pred = _2829;
                    frontier_phi_90_pred_1 = _2824;
                    frontier_phi_90_pred_2 = _2825;
                    frontier_phi_90_pred_3 = _2826;
                    frontier_phi_90_pred_4 = _2827;
                    frontier_phi_90_pred_5 = _2828;
                }
                _2570 = frontier_phi_90_pred;
                _2560 = frontier_phi_90_pred_1;
                _2562 = frontier_phi_90_pred_2;
                _2564 = frontier_phi_90_pred_3;
                _2566 = frontier_phi_90_pred_4;
                _2568 = frontier_phi_90_pred_5;
                uint _2750 = _2749 + 1u;
                if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2743 = _2560;
                    _2744 = _2562;
                    _2745 = _2564;
                    _2746 = _2566;
                    _2747 = _2568;
                    _2748 = _2570;
                    _2749 = _2750;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
        }
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.z;
        uint _2576 = (_2574 >> 8u) & 15u;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((4294967295u << _2576) & _2442) == 0u)
        {
            _2711 = _2559;
            _2713 = _2561;
            _2715 = _2563;
            _2717 = _2565;
            _2719 = _2567;
            _2721 = _2569;
        }
        else
        {
            float _2736 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
            float _2737 = _2736 * _2396;
            float _2738 = _2736 * _2397;
            float _2739 = _2736 * _2398;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2576 < ((_2574 >> 12u) & 15u))
            {
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2901 = _2559;
                float _2902 = _2561;
                float _2903 = _2563;
                float _2904 = _2565;
                float _2905 = _2567;
                float _2906 = _2569;
                uint _2907 = _2576;
                uint _2916;
                bool _2917;
                for (;;)
                {
                    _2916 = texelFetch(g_lightClassification, int((((_2436 << 5u) + (_2422 << 9u)) + (_2907 << 2u)) >> 2u)).x;
                    _2917 = _2916 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2917)
                    {
                        frontier_phi_99_pred = _2904;
                        frontier_phi_99_pred_1 = _2903;
                        frontier_phi_99_pred_2 = _2902;
                        frontier_phi_99_pred_3 = _2901;
                        frontier_phi_99_pred_4 = _2906;
                        frontier_phi_99_pred_5 = _2905;
                    }
                    else
                    {
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3135 = _2901;
                        float _3136 = _2902;
                        float _3137 = _2903;
                        float _3138 = _2904;
                        float _3139 = _2905;
                        float _3140 = _2906;
                        uint _3141 = _2916;
                        uint _3142;
                        vec4 _3167;
                        float _3168;
                        vec4 _3183;
                        vec3 _3195;
                        vec4 _3211;
                        vec4 _3226;
                        float _3272;
                        bool _3273;
                        for (;;)
                        {
                            uint _3152 = ((_2907 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3141));
                            _3142 = (_3141 + 4294967295u) & _3141;
                            uint _3154 = _3152 * 40u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            _3168 = _3167.w;
                            uint _3170 = (_3152 * 40u) + 4u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3185 = (_3152 * 40u) + 8u;
                            _3195 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x));
                            uint _3198 = (_3152 * 40u) + 16u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3213 = (_3152 * 40u) + 20u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3228 = (_3152 * 40u) + 24u;
                            vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3247 = (_3152 * 40u) + 28u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            _3272 = fma(_2398, _3260.z, fma(_2397, _3260.y, _3260.x * _2396)) + _3260.w;
                            _3273 = !((fma(_2398, _3241.z, fma(_2397, _3241.y, _3241.x * _2396)) + _3241.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3273)
                            {
                                float _3300 = _3167.x - _2396;
                                float _3301 = _3167.y - _2397;
                                float _3302 = _3167.z - _2398;
                                float _3303 = dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302));
                                float _3306 = inversesqrt(_3303);
                                float _3307 = _3306 * _3300;
                                float _3308 = _3306 * _3301;
                                float _3309 = _3306 * _3302;
                                float _3313 = 1.0 - (_3303 / (_3168 * _3168));
                                float _4321 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3318 = sqrt(_3303) * _3183.w;
                                float _3320 = 1.39999997615814208984375 / (_3318 + 1.39999997615814208984375);
                                float _3321 = _3320 * _3320;
                                float _3324 = ((1.0 - _3321) * dot(vec3(_3307, _3308, _3309), vec3(_1049, _1052, _1055))) + _3321;
                                float _3327 = _3318 * _3318;
                                float _3331 = (fma(_2398, _3211.z, fma(_2397, _3211.y, _3211.x * _2396)) + _3211.w) / _3272;
                                float _3332 = (fma(_2398, _3226.z, fma(_2397, _3226.y, _3226.x * _2396)) + _3226.w) / _3272;
                                float _3336 = 1.0 - dot(vec2(_3331, _3332), vec2(_3331, _3332));
                                float _4337 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3338 = _3337 * (((isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0))) * _3314) / ((_3327 * 0.699999988079071044921875) + 1.0));
                                float _3350 = exp2(log2(1.0 / ((_3327 * 3.5) + 5.0)) * 0.25);
                                float _3351 = 1.0 - _1109;
                                float _3358 = sqrt(1.0 - ((1.0 - (_3351 * _3351)) * (1.0 - (_3350 * _3350))));
                                float _3359 = _3358 * _3358;
                                float _3360 = _3359 * _3359;
                                float _3361 = _3307 - _2737;
                                float _3362 = _3308 - _2738;
                                float _3363 = _3309 - _2739;
                                float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                                float _3371 = dot(vec3(_1049, _1052, _1055), vec3((-0.0) - _2737, (-0.0) - _2738, (-0.0) - _2739));
                                float _4348 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3375 = dot(vec3(_1049, _1052, _1055), vec3(_3367 * _3361, _3367 * _3362, _3367 * _3363));
                                float _4359 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3382 = ((_3378 * _3378) * (_3360 + (-1.0))) + 1.0;
                                float _3383 = _3320 * _3359;
                                float _3384 = _3383 * _3383;
                                float _3390 = ((1.0 - _3384) * dot(vec3(_1049, _1052, _1055), vec3(_3307, _3308, _3309))) + _3384;
                                float _4370 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3392 = 1.0 - _3359;
                                float _3402 = (0.5 / (((_3391 * ((_3374 * _3392) + _3359)) + 9.9999999392252902907785028219223e-09) + (((_3391 * _3392) + _3359) * _3374))) * _3391;
                                float _4381 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3412 = (_3337 * _3314) * (((_3360 * 3.1415927410125732421875) * (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) / ((_3382 * _3382) * ((_3327 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3338 * _3183.z;
                                frontier_phi_105_pred_1 = _3412 * _3195.x;
                                frontier_phi_105_pred_2 = _3412 * _3195.y;
                                frontier_phi_105_pred_3 = _3412 * _3195.z;
                                frontier_phi_105_pred_4 = _3338 * _3183.x;
                                frontier_phi_105_pred_5 = _3338 * _3183.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3421 = frontier_phi_105_pred;
                            _3416 = frontier_phi_105_pred_1;
                            _3417 = frontier_phi_105_pred_2;
                            _3418 = frontier_phi_105_pred_3;
                            _3419 = frontier_phi_105_pred_4;
                            _3420 = frontier_phi_105_pred_5;
                            _3125 = _3419 + _3138;
                            _3126 = _3420 + _3139;
                            _3127 = _3421 + _3140;
                            _3122 = _3416 + _3135;
                            _3123 = _3417 + _3136;
                            _3124 = _3418 + _3137;
                            if (_3142 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3142;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _3125;
                        frontier_phi_99_pred_1 = _3124;
                        frontier_phi_99_pred_2 = _3123;
                        frontier_phi_99_pred_3 = _3122;
                        frontier_phi_99_pred_4 = _3127;
                        frontier_phi_99_pred_5 = _3126;
                    }
                    _2718 = frontier_phi_99_pred;
                    _2716 = frontier_phi_99_pred_1;
                    _2714 = frontier_phi_99_pred_2;
                    _2712 = frontier_phi_99_pred_3;
                    _2722 = frontier_phi_99_pred_4;
                    _2720 = frontier_phi_99_pred_5;
                    uint _2908 = _2907 + 1u;
                    if (_2908 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2901 = _2712;
                        _2902 = _2714;
                        _2903 = _2716;
                        _2904 = _2718;
                        _2905 = _2720;
                        _2906 = _2722;
                        _2907 = _2908;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2722;
                frontier_phi_81_82_ladder_1 = _2718;
                frontier_phi_81_82_ladder_2 = _2716;
                frontier_phi_81_82_ladder_3 = _2714;
                frontier_phi_81_82_ladder_4 = _2712;
                frontier_phi_81_82_ladder_5 = _2720;
            }
            else
            {
                frontier_phi_81_82_ladder = _2569;
                frontier_phi_81_82_ladder_1 = _2565;
                frontier_phi_81_82_ladder_2 = _2563;
                frontier_phi_81_82_ladder_3 = _2561;
                frontier_phi_81_82_ladder_4 = _2559;
                frontier_phi_81_82_ladder_5 = _2567;
            }
            _2711 = frontier_phi_81_82_ladder_4;
            _2713 = frontier_phi_81_82_ladder_3;
            _2715 = frontier_phi_81_82_ladder_2;
            _2717 = frontier_phi_81_82_ladder_1;
            _2719 = frontier_phi_81_82_ladder_5;
            _2721 = frontier_phi_81_82_ladder;
        }
        float _2726 = isnan(1.0) ? _1093 : (isnan(_1093) ? 1.0 : min(_1093, 1.0));
        _2455 = (_2726 * _2717) + _2185;
        _2457 = (_2726 * _2719) + _2186;
        _2459 = (_2726 * _2721) + _2187;
        _2461 = ((_2711 * 0.039999999105930328369140625) * _2726) + _2338;
        _2463 = ((_2713 * 0.039999999105930328369140625) * _2726) + _2339;
        _2465 = ((_2715 * 0.039999999105930328369140625) * _2726) + _2340;
    }
    else
    {
        _2455 = _2185;
        _2457 = _2186;
        _2459 = _2187;
        _2461 = _2338;
        _2463 = _2339;
        _2465 = _2340;
    }
    uint _2471 = _1069 + uint(cbMatDynParam._m0[0u].w);
    float _2477 = ((_971 * (_959 - (_959 * _932))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2471].x;
    float _2478 = ((_971 * (_960 - (_960 * _932))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2471].y;
    float _2479 = ((_971 * (_961 - (_961 * _932))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2471].z;
    float _4397 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _4408 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _4419 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _2496 = (((isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2455 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1093))) + ((_2461 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1897)) * cbPerFrame._m0[3u].x)) + _2477;
    float _2498 = (_2478 + ((_2463 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1897)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2457 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1093)));
    float _2500 = (_2479 + ((_2465 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1897)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2459 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1093)));
    float _4445 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2513 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    uint _2514 = _1068 + 6u;
    float _2522 = _1030 / cbSceneParam._m0[86u].x;
    float _2523 = _1031 / cbSceneParam._m0[86u].y;
    vec4 _2537 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2522, _2523, (log2((isnan(cbSceneParam._m0[77u].w) ? _1017 : (isnan(_1017) ? cbSceneParam._m0[77u].w : min(_1017, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2539 = _2537.x;
    float _2540 = _2537.y;
    float _2541 = _2537.z;
    float _2542 = _2537.w;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    if (_1017 > cbSceneParam._m0[78u].w)
    {
        float _2584 = isnan(_1017) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1017 : min(cbSceneParam._m0[80u].w, _1017));
        float _2585 = _2584 / _1017;
        float _2596 = _2585 * _284;
        float _2597 = _285 * _2585;
        float _2598 = (-0.0) - _2597;
        float _2599 = _2585 * _286;
        float _2601 = (cbSceneParam._m0[77u].w * _2598) / _2584;
        float _2602 = _2601 + cbSceneParam._m0[79u].w;
        float _2603 = cbSceneParam._m0[79u].w - _2597;
        float _2609 = sqrt(((_2596 * _2596) + (_2597 * _2597)) + (_2599 * _2599));
        float _2612 = (1.0 - (cbSceneParam._m0[77u].w / _2584)) * _2609;
        float _2618 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2620 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2837;
        if (abs((_2598 - _2601) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2837 = ((((_2602 > 0.0) ? exp2(_2618 * _2602) : (2.0 - exp2(_2620 * _2602))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2612;
        }
        else
        {
            float _2772 = 1.0 / cbSceneParam._m0[80u].x;
            float _2773 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : max(_2602, _2603));
            float _2774 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : min(_2602, _2603));
            float _2783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : min(_2773, 0.0));
            float _2784 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : min(_2774, 0.0));
            _2837 = ((abs(_2609 / _2598) * cbSceneParam._m0[80u].y) * ((((_2783 - _2784) * 2.0) - ((exp2(_2618 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0)))) - exp2(_2618 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0))))) * _2772)) - ((exp2(_2620 * _2783) - exp2(_2620 * _2784)) * _2772))) + (_2612 * cbSceneParam._m0[80u].z);
        }
        vec4 _2839 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2522, _2523, 1.0), 0.0);
        float _2848 = exp2((_2837 * (-1.44269502162933349609375)) * (1.0 - _2839.w));
        float _2849 = log2(_2848);
        float _2865 = log2(_2542);
        _2622 = (exp2(_2865 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2849 * cbSceneParam._m0[78u].x)) * _2839.x) / cbSceneParam._m0[78u].x)) + _2539;
        _2624 = (exp2(_2865 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2849 * cbSceneParam._m0[78u].y)) * _2839.y) / cbSceneParam._m0[78u].y)) + _2540;
        _2626 = (exp2(_2865 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2849 * cbSceneParam._m0[78u].z)) * _2839.z) / cbSceneParam._m0[78u].z)) + _2541;
        _2628 = _2848 * _2542;
    }
    else
    {
        _2622 = _2539;
        _2624 = _2540;
        _2626 = _2541;
        _2628 = _2542;
    }
    float _2639 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2640 = _2639 == 3.0;
    float _2641 = log2(_2628);
    float _2645 = exp2(_2641 * cbSceneParam._m0[78u].x);
    float _2646 = exp2(_2641 * cbSceneParam._m0[78u].y);
    float _2647 = exp2(_2641 * cbSceneParam._m0[78u].z);
    float _2648 = _2645 * (isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0)));
    float _2649 = _2646 * (isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0)));
    float _2650 = _2647 * (isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0)));
    float _2659 = (_2639 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2659 * (_2640 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2622)));
    SV_Target.y = _2659 * (_2640 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2624)));
    SV_Target.z = _2659 * (_2640 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2626)));
    SV_Target.w = cbInstanceData._m0[_2514].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2477) * _2513) * _2645) * _2659;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2478) * _2513) * _2646) * _2659;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2479) * _2513) * _2647) * _2659;
    SV_Target_1.w = cbInstanceData._m0[_2514].w;
}


