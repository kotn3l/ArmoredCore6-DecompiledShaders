#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1041;
uint _2524;
uint _2525;
uint _2526;
uint _2748;
uint _2749;
uint _2750;
float _3006;
float _3007;
float _3008;
float _3009;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _303 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _341 = cbMtdParam._m0[27u].w + _282;
    float _342 = cbMtdParam._m0[28u].x + _283;
    float _343 = cbMtdParam._m0[28u].y + _284;
    float _357 = (-0.0) - dot(vec3(_341, _342, _343), vec3(_211 * _203, _211 * _204, _211 * _205));
    float _358 = (-0.0) - dot(vec3(_341, _342, _343), vec3(_225 * TANGENT.x, _225 * TANGENT.y, _225 * TANGENT.z));
    float _359 = (-0.0) - dot(vec3(_341, _342, _343), vec3((-0.0) - (_218 * NORMAL.x), (-0.0) - (_218 * NORMAL.y), (-0.0) - (_218 * NORMAL.z)));
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _366 = _363 * _359;
    float _367 = (_363 * _357) + (((_303.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _368 = (_363 * _358) + (((_303.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _369 = _367 * cbMtdParam._m0[24u].x;
    float _370 = _368 * cbMtdParam._m0[23u].w;
    float _371 = fract(TEXCOORD.x);
    float _372 = fract(TEXCOORD.y);
    float _378;
    if (_369 > 0.0)
    {
        _378 = (1.0 - _371) / _369;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_369 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _371) / _369;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _378 = frontier_phi_3_2_ladder;
    }
    float _386;
    if (_370 > 0.0)
    {
        _386 = (1.0 - _372) / _370;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_370 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _372) / _370;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _386 = frontier_phi_7_6_ladder;
    }
    bool _388 = _366 > 0.0;
    float _390 = _388 ? (cbMtdParam._m0[17u].x / _366) : 5000.0;
    float _391 = isnan(_386) ? _378 : (isnan(_378) ? _386 : min(_378, _386));
    float _392 = isnan(_390) ? _391 : (isnan(_391) ? _390 : min(_391, _390));
    float _396 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _397 = _371 + (-0.5);
    float _400 = _372 + (-0.5);
    float _403 = ((_392 * _366) + _396) / _396;
    vec4 _428 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_397 + (_392 * _369)) / _403) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_400 + (_392 * _370)) / _403) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _438 = cbMtdParam._m0[9u].x * _428.x;
    float _439 = cbMtdParam._m0[9u].y * _428.y;
    float _440 = cbMtdParam._m0[9u].z * _428.z;
    float _458 = _367 * cbMtdParam._m0[26u].z;
    float _459 = _368 * cbMtdParam._m0[26u].y;
    bool _460 = _458 > 0.0;
    float _465;
    if (_460)
    {
        _465 = (1.0 - _371) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _371) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _465 = frontier_phi_11_10_ladder;
    }
    bool _467 = _459 > 0.0;
    float _472;
    if (_467)
    {
        _472 = (1.0 - _372) / _459;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_459 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _372) / _459;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _472 = frontier_phi_15_14_ladder;
    }
    float _475 = _388 ? (cbMtdParam._m0[19u].z / _366) : 5000.0;
    float _476 = isnan(_472) ? _465 : (isnan(_465) ? _472 : min(_465, _472));
    float _477 = isnan(_475) ? _476 : (isnan(_476) ? _475 : min(_476, _475));
    float _481 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _485 = ((_477 * _366) + _481) / _481;
    float _490 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _492 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _508 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_397 + (_477 * _458)) / _485) + 0.5) + _490) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_400 + (_477 * _459)) / _485) + 0.5) + _492) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _520;
    if (_460)
    {
        _520 = (1.0 - _371) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _371) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _520 = frontier_phi_19_18_ladder;
    }
    float _526;
    if (_467)
    {
        _526 = (1.0 - _372) / _459;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_459 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _372) / _459;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _526 = frontier_phi_23_22_ladder;
    }
    float _528 = isnan(_526) ? _520 : (isnan(_520) ? _526 : min(_520, _526));
    float _529 = isnan(_475) ? _528 : (isnan(_528) ? _475 : min(_528, _475));
    float _536 = ((_529 * _366) + _481) / _481;
    vec4 _556 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_397 + (_529 * _458)) / _536) + 0.5) + _490) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_400 + (_529 * _459)) / _536) + 0.5) + _492) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _558 = _556.x;
    float _565 = (_558 * ((_508.x * cbMtdParam._m0[10u].x) - _438)) + _438;
    float _566 = (_558 * ((_508.y * cbMtdParam._m0[10u].y) - _439)) + _439;
    float _567 = (_558 * ((_508.z * cbMtdParam._m0[10u].z) - _440)) + _440;
    float _576 = (cbMtdParam._m0[16u].x * cbMtdParam._m0[19u].y) * _565;
    float _578 = (_566 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].y;
    float _580 = (_567 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].z;
    vec4 _604 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _609 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _615 = ((_604.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _617 = (-0.0) - (cbMtdParam._m0[21u].x * ((_604.x * 0.5) + (-0.25)));
    float _618 = fract(_609);
    float _620 = fract(_609 + 0.5);
    vec4 _647 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_618 * _617) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_615 * _618) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _649 = _647.x;
    float _655 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_620 * _617) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_615 * _620) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _649) * abs((_618 * 2.0) + (-1.0))) + _649;
    float _661 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _665 = fract(abs(_661));
    float _675 = sin(cbMtdParam._m0[21u].z);
    float _676 = cos(cbMtdParam._m0[21u].z);
    float _677 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _678 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _703 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_678, (-0.0) - _675, _676 * _677) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_678, _676, _677 * _675) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_661 >= ((-0.0) - _661)) ? _665 : ((-0.0) - _665)) * cbMtdParam._m0[18u].z) - _655)) + cbMtdParam._m0[18u].w;
    float _704 = ceil(_703);
    float _3048 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _705 = isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0));
    float _725 = ((((cbMtdParam._m0[21u].w * _565) * cbMtdParam._m0[15u].x) - _576) * _705) + _576;
    float _726 = ((((cbMtdParam._m0[21u].w * _566) * cbMtdParam._m0[15u].y) - _578) * _705) + _578;
    float _727 = ((((cbMtdParam._m0[21u].w * _567) * cbMtdParam._m0[15u].z) - _580) * _705) + _580;
    float _731 = abs(cbMtdParam._m0[20u].w * _703);
    float _735 = (((_731 * cbMtdParam._m0[18u].y) - _655) * _731) + _655;
    float _3059 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _736 = isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0));
    vec4 _748 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _763 = (cbMtdParam._m0[14u].x * _748.x) * cbMtdParam._m0[19u].x;
    float _764 = (cbMtdParam._m0[14u].y * _748.y) * cbMtdParam._m0[19u].x;
    float _765 = (cbMtdParam._m0[14u].z * _748.z) * cbMtdParam._m0[19u].x;
    float _772 = exp2(log2(_736) * cbMtdParam._m0[20u].x);
    float _807 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _811 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _812 = _282 * _811;
    float _813 = _283 * _811;
    float _814 = _284 * _811;
    vec4 _819 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _821 = _819.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _891 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _897 = (cbMatDynParam._m0[5u].x * _891) + cbMatDynParam._m0[5u].y;
        float _3070 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0));
        float _902 = (cbMatDynParam._m0[5u].z * _891) + cbMatDynParam._m0[5u].w;
        float _3081 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0))) - _898)) + _898) < ((_821 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _834 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _835 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _844 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_834 * cbSceneParam._m0[86u].x, _835 * cbSceneParam._m0[86u].y));
    float _847 = _844.x * TEXCOORD_4;
    float _848 = (-0.0) - _812;
    float _849 = (-0.0) - _813;
    float _850 = (-0.0) - _814;
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1040;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _963 = (cbModelParam._m0[37u].x * ((((fma(_880, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _965 = (cbModelParam._m0[37u].y * ((((fma(_880, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _966 = (((((fma(_880, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_963, _965, _966), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_963, _965, _966), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_963, _965, _966), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_963, _965, _966), 0.0);
        float _1003 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_990.x + (-0.5));
        float _1035 = _1033 * (_990.y + (-0.5));
        float _1036 = _1033 * (_990.z + (-0.5));
        _1040 = _1003 * (_969.z + (-0.5));
        _1042 = _1003 * (_969.y + (-0.5));
        _1043 = _1003 * (_969.x + (-0.5));
        _1044 = _1013 * (_976.z + (-0.5));
        _1045 = _1013 * (_976.y + (-0.5));
        _1046 = _1013 * (_976.x + (-0.5));
        _1047 = _1023 * (_983.z + (-0.5));
        _1048 = _1023 * (_983.y + (-0.5));
        _1049 = _1023 * (_983.x + (-0.5));
        _1050 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        _1051 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        _1052 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    }
    else
    {
        _1040 = _1041;
        _1042 = _1041;
        _1043 = _1041;
        _1044 = _1041;
        _1045 = _1041;
        _1046 = _1041;
        _1047 = _1041;
        _1048 = _1041;
        _1049 = _1041;
        _1050 = _1041;
        _1051 = _1041;
        _1052 = _1041;
    }
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1108 = (cbModelParam._m0[38u].x * ((((fma(_880, cbModelParam._m0[30u].z, fma(_876, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1109 = (cbModelParam._m0[38u].y * ((((fma(_880, cbModelParam._m0[31u].z, fma(_876, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1110 = (((((fma(_880, cbModelParam._m0[32u].z, fma(_876, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        float _1145 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1133.x + (-0.5));
        float _1177 = _1175 * (_1133.y + (-0.5));
        float _1178 = _1175 * (_1133.z + (-0.5));
        _1182 = _1145 * (_1112.z + (-0.5));
        _1183 = _1145 * (_1112.y + (-0.5));
        _1184 = _1145 * (_1112.x + (-0.5));
        _1185 = _1155 * (_1119.z + (-0.5));
        _1186 = _1155 * (_1119.y + (-0.5));
        _1187 = _1155 * (_1119.x + (-0.5));
        _1188 = _1165 * (_1126.z + (-0.5));
        _1189 = _1165 * (_1126.y + (-0.5));
        _1190 = _1165 * (_1126.x + (-0.5));
        _1191 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        _1192 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        _1193 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    }
    else
    {
        _1182 = _1041;
        _1183 = _1041;
        _1184 = _1041;
        _1185 = _1041;
        _1186 = _1041;
        _1187 = _1041;
        _1188 = _1041;
        _1189 = _1041;
        _1190 = _1041;
        _1191 = _1041;
        _1192 = _1041;
        _1193 = _1041;
    }
    float _1208 = _812 * (-0.5);
    float _1209 = _813 * (-0.5);
    float _1210 = _814 * (-0.5);
    float _1211 = dot(vec4(_1208, _1209, _1210, 1.0), vec4(_1184, _1187, _1190, _1193));
    float _1214 = dot(vec4(_1208, _1209, _1210, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1217 = dot(vec4(_1208, _1209, _1210, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1252;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1224 = dot(vec4(_1208, _1209, _1210, 1.0), vec4(_1040, _1044, _1047, _1050));
        float _1228 = dot(vec4(_1208, _1209, _1210, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1232 = dot(vec4(_1208, _1209, _1210, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1239 = dot(vec4(cbModelParam._m0[39u]), vec4(_1208, _1209, _1210, 1.0));
        _1252 = dot(vec3(isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1239) ? 0.0 : (isnan(0.0) ? _1239 : max(0.0, _1239))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1252 = 1.0;
    }
    float _1263;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1254 = dot(vec4(cbModelParam._m0[40u]), vec4(_1208, _1209, _1210, 1.0));
        _1263 = dot(vec3(isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)), isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1263 = 1.0;
    }
    float _1267 = (_1263 * cbModelParam._m0[1u].x) + (_1252 * (1.0 - cbModelParam._m0[1u].x));
    float _1273 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1354;
    float _1356;
    float _1358;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1321 = fma(_880, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872)) + cbModelParam._m0[13u].w;
        float _1325 = fma(_880, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872)) + cbModelParam._m0[14u].w;
        float _1329 = fma(_880, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872)) + cbModelParam._m0[15u].w;
        float _1332 = fma(_850, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _848));
        float _1335 = fma(_850, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _848));
        float _1338 = fma(_850, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _848));
        float _1364;
        if (_1332 > 0.0)
        {
            _1364 = abs((1.0 - _1321) / _1332);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1321 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1364 = frontier_phi_41_39_ladder;
        }
        float _1552;
        if (_1335 > 0.0)
        {
            _1552 = abs((1.0 - _1325) / _1335);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1325 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1552 = frontier_phi_50_46_ladder;
        }
        float _1906;
        if (_1338 > 0.0)
        {
            _1906 = abs((1.0 - _1329) / _1338);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1329 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _1906 = frontier_phi_62_57_ladder;
        }
        float _1908 = isnan(_1552) ? _1364 : (isnan(_1364) ? _1552 : min(_1364, _1552));
        float _1909 = isnan(_1906) ? _1908 : (isnan(_1908) ? _1906 : min(_1908, _1906));
        float _1913 = (_1909 * _1332) + _1321;
        float _1914 = (_1909 * _1335) + _1325;
        float _1915 = (_1909 * _1338) + _1329;
        float _1916 = _1909 * 9.9999997473787516355514526367188e-05;
        float _1918 = (-1.0) - _1916;
        float _1920 = _1916 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_1915 > _1920) || ((_1915 < _1918) || ((_1914 > _1920) || ((_1914 < _1918) || ((_1913 < _1918) || (_1913 > _1920))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2158 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1915, cbModelParam._m0[9u].z, fma(_1914, cbModelParam._m0[9u].y, _1913 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1915, cbModelParam._m0[10u].z, fma(_1914, cbModelParam._m0[10u].y, _1913 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1915, cbModelParam._m0[11u].z, fma(_1914, cbModelParam._m0[11u].y, _1913 * cbModelParam._m0[11u].x))), _1273);
            frontier_phi_40_62_ladder = _2158.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _2158.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _2158.x * cbModelParam._m0[1u].y;
        }
        _1354 = frontier_phi_40_62_ladder_2;
        _1356 = frontier_phi_40_62_ladder_1;
        _1358 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1342 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_848, _849, _850), _1273);
        _1354 = _1342.x * cbModelParam._m0[1u].y;
        _1356 = _1342.y * cbModelParam._m0[1u].y;
        _1358 = _1342.z * cbModelParam._m0[1u].y;
    }
    float _1361 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1449;
    float _1451;
    float _1453;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1413 = fma(_880, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872)) + cbModelParam._m0[21u].w;
        float _1417 = fma(_880, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872)) + cbModelParam._m0[22u].w;
        float _1421 = fma(_880, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872)) + cbModelParam._m0[23u].w;
        float _1424 = fma(_850, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _848));
        float _1427 = fma(_850, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _848));
        float _1430 = fma(_850, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _848));
        float _1557;
        if (_1424 > 0.0)
        {
            _1557 = abs((1.0 - _1413) / _1424);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1413 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1557 = frontier_phi_52_48_ladder;
        }
        float _1933;
        if (_1427 > 0.0)
        {
            _1933 = abs((1.0 - _1417) / _1427);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1417 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _1933 = frontier_phi_64_59_ladder;
        }
        float _2291;
        if (_1430 > 0.0)
        {
            _2291 = abs((1.0 - _1421) / _1430);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_1421 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2291 = frontier_phi_76_71_ladder;
        }
        float _2293 = isnan(_1933) ? _1557 : (isnan(_1557) ? _1933 : min(_1557, _1933));
        float _2294 = isnan(_2291) ? _2293 : (isnan(_2293) ? _2291 : min(_2293, _2291));
        float _2298 = (_2294 * _1424) + _1413;
        float _2299 = (_2294 * _1427) + _1417;
        float _2300 = (_2294 * _1430) + _1421;
        float _2301 = _2294 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2301;
        float _2304 = _2301 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2300 > _2304) || ((_2300 < _2302) || ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 < _2302) || (_2298 > _2304))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2300, cbModelParam._m0[17u].z, fma(_2299, cbModelParam._m0[17u].y, _2298 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2300, cbModelParam._m0[18u].z, fma(_2299, cbModelParam._m0[18u].y, _2298 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2300, cbModelParam._m0[19u].z, fma(_2299, cbModelParam._m0[19u].y, _2298 * cbModelParam._m0[19u].x))), _1361);
            frontier_phi_49_76_ladder = _2422.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _2422.y * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _2422.x * cbModelParam._m0[1u].z;
        }
        _1449 = frontier_phi_49_76_ladder_2;
        _1451 = frontier_phi_49_76_ladder_1;
        _1453 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _1433 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_848, _849, _850), _1361);
        _1449 = _1433.x * cbModelParam._m0[1u].z;
        _1451 = _1433.y * cbModelParam._m0[1u].z;
        _1453 = _1433.z * cbModelParam._m0[1u].z;
    }
    float _1465 = _847 * 0.01200000010430812835693359375;
    float _1467 = _1465 * ((cbModelParam._m0[1u].w * (_1449 - _1354)) + _1354);
    float _1468 = _1465 * ((cbModelParam._m0[1u].w * (_1451 - _1356)) + _1356);
    float _1469 = _1465 * ((cbModelParam._m0[1u].w * (_1453 - _1358)) + _1358);
    float _1490 = fma(_1469, cbSceneParam._m0[89u].z, fma(_1468, cbSceneParam._m0[89u].y, _1467 * cbSceneParam._m0[89u].x));
    float _1493 = fma(_1469, cbSceneParam._m0[90u].z, fma(_1468, cbSceneParam._m0[90u].y, _1467 * cbSceneParam._m0[90u].x));
    float _1496 = fma(_1469, cbSceneParam._m0[91u].z, fma(_1468, cbSceneParam._m0[91u].y, _1467 * cbSceneParam._m0[91u].x));
    float _1531 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1535 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1539 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1543 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1544 = _1531 / _1543;
    float _1545 = _1535 / _1543;
    float _1546 = _1539 / _1543;
    float _1694;
    float _1695;
    float _1696;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1573 = ((uint(_1546 > cbSceneParam._m0[59u].y) + uint(_1546 > cbSceneParam._m0[59u].x)) + uint(_1546 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1574 = _1573 + 43u;
        uint _1582 = _1573 + 44u;
        uint _1590 = _1573 + 45u;
        uint _1598 = _1573 + 46u;
        float _1609 = fma(_1543, cbSceneParam._m0[_1574].w, fma(_1539, cbSceneParam._m0[_1574].z, fma(_1535, cbSceneParam._m0[_1574].y, _1531 * cbSceneParam._m0[_1574].x)));
        float _1613 = fma(_1543, cbSceneParam._m0[_1582].w, fma(_1539, cbSceneParam._m0[_1582].z, fma(_1535, cbSceneParam._m0[_1582].y, _1531 * cbSceneParam._m0[_1582].x)));
        float _1621 = fma(_1543, cbSceneParam._m0[_1598].w, fma(_1539, cbSceneParam._m0[_1598].z, fma(_1535, cbSceneParam._m0[_1598].y, _1531 * cbSceneParam._m0[_1598].x)));
        float _1626 = cbSceneParam._m0[33u].z * _1621;
        float _1628 = cbSceneParam._m0[33u].w * _1621;
        float _1631 = fma(_1543, cbSceneParam._m0[_1590].w, fma(_1539, cbSceneParam._m0[_1590].z, fma(_1535, cbSceneParam._m0[_1590].y, _1531 * cbSceneParam._m0[_1590].x))) / _1621;
        float _1679 = (cbSceneParam._m0[33u].x - sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546))) * cbSceneParam._m0[33u].y;
        float _3207 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1687 = (isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1626 + _1609) / _1621, (_1628 + _1613) / _1621), _1631), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1628 + _1609) / _1621, (_1613 - _1626) / _1621), _1631), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1609 - _1626) / _1621, (_1613 - _1628) / _1621), _1631), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1609 - _1628) / _1621, (_1626 + _1613) / _1621), _1631), 0.0)).x), vec4(0.25)));
        _1694 = 1.0 - (_1687 * cbSceneParam._m0[34u].x);
        _1695 = 1.0 - (_1687 * cbSceneParam._m0[34u].y);
        _1696 = 1.0 - (_1687 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1694 = 1.0;
        _1695 = 1.0;
        _1696 = 1.0;
    }
    float _1760;
    float _1762;
    float _1764;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1748 = fma(_1543, cbSceneParam._m0[63u].w, fma(_1539, cbSceneParam._m0[63u].z, fma(_1535, cbSceneParam._m0[63u].y, _1531 * cbSceneParam._m0[63u].x)));
        float _1749 = fma(_1543, cbSceneParam._m0[60u].w, fma(_1539, cbSceneParam._m0[60u].z, fma(_1535, cbSceneParam._m0[60u].y, _1531 * cbSceneParam._m0[60u].x))) / _1748;
        float _1750 = fma(_1543, cbSceneParam._m0[61u].w, fma(_1539, cbSceneParam._m0[61u].z, fma(_1535, cbSceneParam._m0[61u].y, _1531 * cbSceneParam._m0[61u].x))) / _1748;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_1749 >= cbSceneParam._m0[64u].x) && (_1750 >= cbSceneParam._m0[64u].y)) && (_1749 <= cbSceneParam._m0[64u].z)) && (_1750 <= cbSceneParam._m0[64u].w))
        {
            float _1946 = fma(_1543, cbSceneParam._m0[62u].w, fma(_1539, cbSceneParam._m0[62u].z, fma(_1535, cbSceneParam._m0[62u].y, _1531 * cbSceneParam._m0[62u].x))) / _1748;
            float _1950 = isnan(cbSceneParam._m0[41u].w) ? _1946 : (isnan(_1946) ? cbSceneParam._m0[41u].w : max(_1946, cbSceneParam._m0[41u].w));
            float _1993 = (cbSceneParam._m0[33u].x - sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546))) * cbSceneParam._m0[33u].y;
            float _3223 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
            float _2000 = (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1749, cbSceneParam._m0[33u].w + _1750), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1749, _1750 - cbSceneParam._m0[33u].z), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1749 - cbSceneParam._m0[33u].z, _1750 - cbSceneParam._m0[33u].w), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1749 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1750), _1950), 0.0)).x), vec4(0.25)));
            float _2004 = 1.0 - (_2000 * cbSceneParam._m0[34u].x);
            float _2005 = 1.0 - (_2000 * cbSceneParam._m0[34u].y);
            float _2006 = 1.0 - (_2000 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_2006) ? _1696 : (isnan(_1696) ? _2006 : min(_1696, _2006));
            frontier_phi_61_60_ladder_1 = isnan(_2005) ? _1695 : (isnan(_1695) ? _2005 : min(_1695, _2005));
            frontier_phi_61_60_ladder_2 = isnan(_2004) ? _1694 : (isnan(_1694) ? _2004 : min(_1694, _2004));
        }
        else
        {
            frontier_phi_61_60_ladder = _1696;
            frontier_phi_61_60_ladder_1 = _1695;
            frontier_phi_61_60_ladder_2 = _1694;
        }
        _1760 = frontier_phi_61_60_ladder_2;
        _1762 = frontier_phi_61_60_ladder_1;
        _1764 = frontier_phi_61_60_ladder;
    }
    else
    {
        _1760 = _1694;
        _1762 = _1695;
        _1764 = _1696;
    }
    uint _1766 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1770 = floatBitsToUint(cbInstanceData._m0[_1766 + 5u]);
    uint _1772 = _1770.x * 14u;
    uint _1773 = _1772 + 13u;
    float _1778 = _847 + (-1.0);
    float _1781 = (cbLight._m0[_1773].x * _1778) + 1.0;
    float _1782 = (cbLight._m0[_1773].y * _1778) + 1.0;
    uint _1783 = _1772 + 8u;
    float _1794 = cbLight._m0[_1772].x + _812;
    float _1795 = cbLight._m0[_1772].y + _813;
    float _1796 = cbLight._m0[_1772].z + _814;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1804 = dot(vec3(0.0), vec3(cbLight._m0[_1772].xyz));
    float _3249 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _1808 = dot(vec3(0.0), vec3(_812, _813, _814));
    float _3260 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _1812 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_1794 * _1800, _1795 * _1800, _1796 * _1800));
    float _3271 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1823 = (exp2(log2(1.0 - (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1829 = (0.5 / ((_1807 + 9.9999999392252902907785028219223e-09) + _1811)) * _1807;
    float _3282 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * 0.31831014156341552734375;
    float _1833 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
    uint _1846 = _1772 + 9u;
    uint _1852 = _1772 | 1u;
    float _1858 = cbLight._m0[_1852].x + _812;
    float _1859 = cbLight._m0[_1852].y + _813;
    float _1860 = cbLight._m0[_1852].z + _814;
    float _1864 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
    float _1868 = dot(vec3(0.0), vec3(cbLight._m0[_1852].xyz));
    float _3298 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _1872 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_1858 * _1864, _1859 * _1864, _1860 * _1864));
    float _3309 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1881 = (exp2(log2(1.0 - (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1885 = (0.5 / ((_1871 + 9.9999999392252902907785028219223e-09) + _1811)) * _1871;
    float _3320 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1887 = (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) * 0.31831014156341552734375;
    float _1888 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
    float _1898 = (((_1881 * cbLight._m0[_1846].x) * _1887) * _1888) + ((((cbLight._m0[_1783].x * _1760) * _1823) * _1831) * _1833);
    float _1899 = (((_1881 * cbLight._m0[_1846].y) * _1887) * _1888) + ((((cbLight._m0[_1783].y * _1762) * _1823) * _1831) * _1833);
    float _1900 = (((_1881 * cbLight._m0[_1846].z) * _1887) * _1888) + ((((cbLight._m0[_1783].z * _1764) * _1823) * _1831) * _1833);
    float _2063;
    float _2065;
    float _2067;
    if (_1770.y == 0u)
    {
        uvec4 _2018 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2019 = _2018.x;
        uint _2030 = uint((float(_2018.y) * floor(float(uint(cbSceneParam._m0[85u].y * _835) / _2019))) + floor(float(uint(cbSceneParam._m0[85u].x * _834) / _2019)));
        float _2040 = (log2(_1546 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2041 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        uint _2044 = uint(isnan(14.0) ? _2041 : (isnan(_2041) ? 14.0 : min(_2041, 14.0)));
        uvec4 _2049 = texelFetch(g_lightClusterGridBuffer, int(((_2044 << 2u) + (_2030 << 6u)) >> 2u));
        uint _2050 = _2049.x;
        uint _2051 = _2018.z;
        float _2167;
        float _2169;
        float _2171;
        if (((((1u << ((_2051 >> 4u) & 15u)) + 4294967295u) & _2050) == 0u) || ((_2051 & 240u) == 0u))
        {
            _2167 = 0.0;
            _2169 = 0.0;
            _2171 = 0.0;
        }
        else
        {
            float _2168;
            float _2170;
            float _2172;
            float _2337 = 0.0;
            float _2338 = 0.0;
            float _2339 = 0.0;
            uint _2340 = 0u;
            uint _2349;
            bool _2350;
            for (;;)
            {
                _2349 = texelFetch(g_lightClassification, int((((_2044 << 5u) + (_2030 << 9u)) + (_2340 << 2u)) >> 2u)).x;
                _2350 = _2349 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                if (_2350)
                {
                    frontier_phi_87_pred = _2339;
                    frontier_phi_87_pred_1 = _2338;
                    frontier_phi_87_pred_2 = _2337;
                }
                else
                {
                    float _2494;
                    float _2495;
                    float _2496;
                    uint _2497;
                    _2494 = _2337;
                    _2495 = _2338;
                    _2496 = _2339;
                    _2497 = _2349;
                    float _2427;
                    float _2428;
                    float _2429;
                    for (;;)
                    {
                        uint _2501 = uint(findLSB(_2497)) + (_2340 << 5u);
                        uint _2498 = (_2497 + 4294967295u) & _2497;
                        uint _2503 = _2501 * 48u;
                        vec4 _2517 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2503)).x, texelFetch(g_PointLightRenderingBuffer, int(_2503 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2503 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2503 + 3u)).x));
                        uint _2534 = (_2501 * 48u) + 8u;
                        vec3 _2545 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2534)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 2u)).x));
                        float _2549 = _2517.x - _1544;
                        float _2550 = _2517.y - _1545;
                        float _2551 = _2517.z - _1546;
                        float _2552 = dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551));
                        float _2555 = inversesqrt(_2552);
                        float _2564 = 1.0 - (_2552 * _2517.w);
                        float _3346 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                        float _2566 = sqrt(_2552) * uintBitsToFloat(uvec4(_2524, _2525, _2526, texelFetch(g_PointLightRenderingBuffer, int(((_2501 * 48u) + 4u) + 3u)).x)).w;
                        float _2569 = 1.39999997615814208984375 / (_2566 + 1.39999997615814208984375);
                        float _2570 = _2569 * _2569;
                        float _2573 = ((1.0 - _2570) * dot(vec3(0.0), vec3(_2555 * _2549, _2555 * _2550, _2555 * _2551))) + _2570;
                        float _2575 = (-0.0) - _1544;
                        float _2576 = (-0.0) - _1545;
                        float _2577 = (-0.0) - _1546;
                        float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
                        float _2585 = dot(vec3(0.0), vec3(_2581 * _2575, _2581 * _2576, _2581 * _2577));
                        float _3357 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _3368 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
                        float _2589 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
                        float _2593 = (0.5 / (((isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) + 9.9999999392252902907785028219223e-09) + _2589)) * _2589;
                        float _3379 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
                        float _2602 = (((isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * 3.1415927410125732421875) / (((_2566 * _2566) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)));
                        _2427 = (_2602 * _2545.x) + _2494;
                        _2428 = (_2602 * _2545.y) + _2495;
                        _2429 = (_2602 * _2545.z) + _2496;
                        if (_2498 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2494 = _2427;
                            _2495 = _2428;
                            _2496 = _2429;
                            _2497 = _2498;
                        }
                    }
                    frontier_phi_87_pred = _2429;
                    frontier_phi_87_pred_1 = _2428;
                    frontier_phi_87_pred_2 = _2427;
                }
                _2172 = frontier_phi_87_pred;
                _2170 = frontier_phi_87_pred_1;
                _2168 = frontier_phi_87_pred_2;
                uint _2341 = _2340 + 1u;
                if (_2341 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2337 = _2168;
                    _2338 = _2170;
                    _2339 = _2172;
                    _2340 = _2341;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2167 = _2168;
            _2169 = _2170;
            _2171 = _2172;
        }
        uvec4 _2175 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2176 = _2175.z;
        uint _2178 = (_2176 >> 8u) & 15u;
        float _2317;
        float _2319;
        float _2321;
        if (((4294967295u << _2178) & _2050) == 0u)
        {
            _2317 = _2167;
            _2319 = _2169;
            _2321 = _2171;
        }
        else
        {
            float _2333 = inversesqrt(dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546)));
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            if (_2178 < ((_2176 >> 12u) & 15u))
            {
                float _2318;
                float _2320;
                float _2322;
                float _2480 = _2167;
                float _2481 = _2169;
                float _2482 = _2171;
                uint _2483 = _2178;
                uint _2492;
                bool _2493;
                for (;;)
                {
                    _2492 = texelFetch(g_lightClassification, int((((_2044 << 5u) + (_2030 << 9u)) + (_2483 << 2u)) >> 2u)).x;
                    _2493 = _2492 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    if (_2493)
                    {
                        frontier_phi_98_pred = _2482;
                        frontier_phi_98_pred_1 = _2481;
                        frontier_phi_98_pred_2 = _2480;
                    }
                    else
                    {
                        float _2616;
                        float _2617;
                        float _2618;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2626 = _2480;
                        float _2627 = _2481;
                        float _2628 = _2482;
                        uint _2629 = _2492;
                        uint _2630;
                        uint _2640;
                        vec4 _2655;
                        float _2656;
                        vec3 _2668;
                        vec4 _2683;
                        vec4 _2698;
                        float _2744;
                        bool _2745;
                        for (;;)
                        {
                            _2640 = ((_2483 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2629));
                            _2630 = (_2629 + 4294967295u) & _2629;
                            uint _2642 = _2640 * 40u;
                            _2655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 3u)).x));
                            _2656 = _2655.w;
                            uint _2658 = (_2640 * 40u) + 8u;
                            _2668 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x));
                            uint _2670 = (_2640 * 40u) + 16u;
                            _2683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 3u)).x));
                            uint _2685 = (_2640 * 40u) + 20u;
                            _2698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 3u)).x));
                            uint _2700 = (_2640 * 40u) + 24u;
                            vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 3u)).x));
                            uint _2719 = (_2640 * 40u) + 28u;
                            vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 3u)).x));
                            _2744 = fma(_1546, _2732.z, fma(_1545, _2732.y, _2732.x * _1544)) + _2732.w;
                            _2745 = !((fma(_1546, _2713.z, fma(_1545, _2713.y, _2713.x * _1544)) + _2713.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            if (_2745)
                            {
                                float _2779 = _2655.x - _1544;
                                float _2780 = _2655.y - _1545;
                                float _2781 = _2655.z - _1546;
                                float _2782 = dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781));
                                float _2785 = inversesqrt(_2782);
                                float _2792 = 1.0 - (_2782 / (_2656 * _2656));
                                float _3390 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                                float _2794 = sqrt(_2782) * uintBitsToFloat(uvec4(_2748, _2749, _2750, texelFetch(g_SpotLightRenderingBuffer, int(((_2640 * 40u) + 4u) + 3u)).x)).w;
                                float _2796 = 1.39999997615814208984375 / (_2794 + 1.39999997615814208984375);
                                float _2797 = _2796 * _2796;
                                float _2800 = (fma(_1546, _2683.z, fma(_1545, _2683.y, _2683.x * _1544)) + _2683.w) / _2744;
                                float _2801 = (fma(_1546, _2698.z, fma(_1545, _2698.y, _2698.x * _1544)) + _2698.w) / _2744;
                                float _2805 = 1.0 - dot(vec2(_2800, _2801), vec2(_2800, _2801));
                                float _3401 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                                float _2813 = dot(vec3(0.0), vec3((-0.0) - (_1544 * _2333), (-0.0) - (_1545 * _2333), (-0.0) - (_1546 * _2333)));
                                float _3412 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                                float _2821 = ((1.0 - _2797) * dot(vec3(0.0), vec3(_2785 * _2779, _2785 * _2780, _2785 * _2781))) + _2797;
                                float _3423 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                                float _2822 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
                                float _2826 = (0.5 / (((isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) + 9.9999999392252902907785028219223e-09) + _2822)) * _2822;
                                float _3434 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                                float _2833 = ((isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * (((isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * 3.1415927410125732421875) / (((_2794 * _2794) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_104_pred = _2833 * _2668.y;
                                frontier_phi_104_pred_1 = _2833 * _2668.x;
                                frontier_phi_104_pred_2 = _2833 * _2668.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                            }
                            _2838 = frontier_phi_104_pred;
                            _2837 = frontier_phi_104_pred_1;
                            _2839 = frontier_phi_104_pred_2;
                            _2616 = _2837 + _2626;
                            _2617 = _2838 + _2627;
                            _2618 = _2839 + _2628;
                            if (_2630 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2626 = _2616;
                                _2627 = _2617;
                                _2628 = _2618;
                                _2629 = _2630;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _2618;
                        frontier_phi_98_pred_1 = _2617;
                        frontier_phi_98_pred_2 = _2616;
                    }
                    _2322 = frontier_phi_98_pred;
                    _2320 = frontier_phi_98_pred_1;
                    _2318 = frontier_phi_98_pred_2;
                    uint _2484 = _2483 + 1u;
                    if (_2484 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2480 = _2318;
                        _2481 = _2320;
                        _2482 = _2322;
                        _2483 = _2484;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2322;
                frontier_phi_78_79_ladder_1 = _2320;
                frontier_phi_78_79_ladder_2 = _2318;
            }
            else
            {
                frontier_phi_78_79_ladder = _2171;
                frontier_phi_78_79_ladder_1 = _2169;
                frontier_phi_78_79_ladder_2 = _2167;
            }
            _2317 = frontier_phi_78_79_ladder_2;
            _2319 = frontier_phi_78_79_ladder_1;
            _2321 = frontier_phi_78_79_ladder;
        }
        float _2326 = isnan(1.0) ? _847 : (isnan(_847) ? 1.0 : min(_847, 1.0));
        _2063 = ((_2317 * 0.039999999105930328369140625) * _2326) + _1898;
        _2065 = ((_2319 * 0.039999999105930328369140625) * _2326) + _1899;
        _2067 = ((_2321 * 0.039999999105930328369140625) * _2326) + _1900;
    }
    else
    {
        _2063 = _1898;
        _2065 = _1899;
        _2067 = _1900;
    }
    uint _2073 = _1766 + 9u;
    uint _2074 = _2073 + uint(cbMatDynParam._m0[0u].w);
    float _2080 = (cbSceneParam._m0[72u].y * ((_772 * ((_763 - _725) - (_763 * _736))) + _725)) * cbInstanceData._m0[_2074].x;
    float _2081 = (cbSceneParam._m0[72u].y * ((_772 * ((_764 - _726) - (_764 * _736))) + _726)) * cbInstanceData._m0[_2074].y;
    float _2082 = (((_772 * ((_765 - _727) - (_765 * _736))) + _727) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2074].z;
    float _2089 = _2080 + ((_2063 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _1267)) * cbPerFrame._m0[3u].x);
    float _2090 = _2081 + ((_2065 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _1267)) * cbPerFrame._m0[3u].x);
    float _2091 = _2082 + ((_2067 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _1267)) * cbPerFrame._m0[3u].x);
    float _2092 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2094 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2100 = cbMtdParam._m0[2u].x * _2080;
    float _2101 = cbMtdParam._m0[2u].y * _2081;
    float _2102 = cbMtdParam._m0[2u].z * _2082;
    float _3465 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2104 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    uint _2105 = _1766 + 6u;
    float _2113 = _834 / cbSceneParam._m0[86u].x;
    float _2114 = _835 / cbSceneParam._m0[86u].y;
    vec4 _2128 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2113, _2114, (log2((isnan(cbSceneParam._m0[77u].w) ? _807 : (isnan(_807) ? cbSceneParam._m0[77u].w : min(_807, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2130 = _2128.x;
    float _2131 = _2128.y;
    float _2132 = _2128.z;
    float _2133 = _2128.w;
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    if (_807 > cbSceneParam._m0[78u].w)
    {
        float _2186 = isnan(_807) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _807 : min(cbSceneParam._m0[80u].w, _807));
        float _2187 = _2186 / _807;
        float _2198 = _2187 * _282;
        float _2199 = _283 * _2187;
        float _2200 = (-0.0) - _2199;
        float _2201 = _2187 * _284;
        float _2203 = (cbSceneParam._m0[77u].w * _2200) / _2186;
        float _2204 = _2203 + cbSceneParam._m0[79u].w;
        float _2205 = cbSceneParam._m0[79u].w - _2199;
        float _2211 = sqrt(((_2198 * _2198) + (_2199 * _2199)) + (_2201 * _2201));
        float _2214 = (1.0 - (cbSceneParam._m0[77u].w / _2186)) * _2211;
        float _2219 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2221 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2437;
        if (abs((_2200 - _2203) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2437 = ((((_2204 > 0.0) ? exp2(_2219 * _2204) : (2.0 - exp2(_2221 * _2204))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2214;
        }
        else
        {
            float _2363 = 1.0 / cbSceneParam._m0[80u].x;
            float _2364 = isnan(_2205) ? _2204 : (isnan(_2204) ? _2205 : max(_2204, _2205));
            float _2365 = isnan(_2205) ? _2204 : (isnan(_2204) ? _2205 : min(_2204, _2205));
            float _2374 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : min(_2364, 0.0));
            float _2375 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : min(_2365, 0.0));
            _2437 = ((abs(_2211 / _2200) * cbSceneParam._m0[80u].y) * ((((_2374 - _2375) * 2.0) - ((exp2(_2219 * (isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0)))) - exp2(_2219 * (isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0))))) * _2363)) - ((exp2(_2221 * _2374) - exp2(_2221 * _2375)) * _2363))) + (_2214 * cbSceneParam._m0[80u].z);
        }
        vec4 _2439 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2113, _2114, 1.0), 0.0);
        float _2448 = exp2((_2437 * (-1.44269502162933349609375)) * (1.0 - _2439.w));
        float _2449 = log2(_2448);
        float _2465 = log2(_2133);
        _2223 = (exp2(_2465 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2449 * cbSceneParam._m0[78u].x)) * _2439.x) / cbSceneParam._m0[78u].x)) + _2130;
        _2225 = (exp2(_2465 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2449 * cbSceneParam._m0[78u].y)) * _2439.y) / cbSceneParam._m0[78u].y)) + _2131;
        _2227 = (exp2(_2465 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2449 * cbSceneParam._m0[78u].z)) * _2439.z) / cbSceneParam._m0[78u].z)) + _2132;
        _2229 = _2448 * _2133;
    }
    else
    {
        _2223 = _2130;
        _2225 = _2131;
        _2227 = _2132;
        _2229 = _2133;
    }
    bool _2475;
    vec4 _2238;
    vec4 _2261;
    float _2263;
    float _2267;
    float _2268;
    float _2269;
    float _2272;
    float _2275;
    float _2278;
    float _2279;
    bool _2290;
    for (;;)
    {
        _2238 = cbMatDynParam._m0[0u];
        float _2240 = roundEven(_2238.y);
        bool _2241 = _2240 == 3.0;
        float _2243 = log2(_2229);
        float _2247 = exp2(_2243 * cbSceneParam._m0[78u].x);
        float _2248 = exp2(_2243 * cbSceneParam._m0[78u].y);
        float _2249 = exp2(_2243 * cbSceneParam._m0[78u].z);
        float _2250 = _2247 * _2092;
        float _2251 = _2248 * _2093;
        float _2252 = _2249 * _2094;
        float _2259 = _821 + (-0.5);
        _2261 = cbMtdParam._m0[1u];
        _2263 = _2261.y * _2259;
        float _2266 = (_2240 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2267 = _2266 * (_2241 ? _2250 : (_2250 + (cbSceneParam._m0[72u].w * _2223)));
        _2268 = _2266 * (_2241 ? _2251 : (_2251 + (cbSceneParam._m0[72u].w * _2225)));
        _2269 = _2266 * (_2241 ? _2252 : (_2252 + (cbSceneParam._m0[72u].w * _2227)));
        _2272 = ((_2100 * _2104) * _2247) * _2266;
        _2275 = ((_2101 * _2104) * _2248) * _2266;
        _2278 = ((_2102 * _2104) * _2249) * _2266;
        _2279 = _2259 * 0.999000012874603271484375;
        _2290 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2290)
        {
            if ((cbInstanceData._m0[_1766 + 7u].x + _2279) < 0.5)
            {
                _2475 = true;
                break;
            }
        }
        uint _2398 = _2073 + uint(_2238.w);
        if ((cbInstanceData._m0[_2398].w < 1.0) && ((cbInstanceData._m0[_2398].w + _2279) < 0.5))
        {
            _2475 = true;
            break;
        }
        if ((_2263 + 1.0) < _2261.x)
        {
            _2475 = true;
            break;
        }
        _2475 = false;
        break;
    }
    float _2607;
    if (_2475)
    {
        discard_state = true;
        _2607 = 0.0;
    }
    else
    {
        _2607 = cbInstanceData._m0[_2105].w;
    }
    SV_Target.x = _2267;
    SV_Target.y = _2268;
    SV_Target.z = _2269;
    SV_Target.w = _2607;
    SV_Target_1.x = _2272;
    SV_Target_1.y = _2275;
    SV_Target_1.z = _2278;
    SV_Target_1.w = cbInstanceData._m0[_2105].w;
    discard_exit();
}


