#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _985;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _326 = cbMtdParam._m0[27u].w + _267;
    float _327 = cbMtdParam._m0[28u].x + _268;
    float _328 = cbMtdParam._m0[28u].y + _269;
    float _345 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_199 * _191, _199 * _192, _199 * _193));
    float _346 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_210 * TANGENT.x, _210 * TANGENT.y, _210 * TANGENT.z));
    float _347 = (-0.0) - dot(vec3(_326, _327, _328), vec3((-0.0) - (NORMAL.x * _206), (-0.0) - (NORMAL.y * _206), (-0.0) - (NORMAL.z * _206)));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _354 = _351 * _347;
    float _357 = ((_351 * _345) + (((_288.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w)) * cbMtdParam._m0[24u].x;
    float _358 = ((_351 * _346) + (((_288.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x)) * cbMtdParam._m0[23u].w;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_357 > 0.0)
    {
        _366 = (1.0 - _359) / _357;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_357 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _357;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    float _378 = (_354 > 0.0) ? (cbMtdParam._m0[17u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_359 + (-0.5)) + (_380 * _357)) / _391) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_360 + (-0.5)) + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _426 = cbMtdParam._m0[9u].x * _416.x;
    float _427 = cbMtdParam._m0[9u].y * _416.y;
    float _428 = cbMtdParam._m0[9u].z * _416.z;
    vec4 _452 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _457 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _463 = ((_452.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _465 = (-0.0) - (cbMtdParam._m0[21u].x * ((_452.x * 0.5) + (-0.25)));
    float _466 = fract(_457);
    float _468 = fract(_457 + 0.5);
    vec4 _495 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_466 * _465) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_463 * _466) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _497 = _495.x;
    float _503 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_468 * _465) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_463 * _468) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _497) * abs((_466 * 2.0) + (-1.0))) + _497;
    float _512 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _516 = fract(abs(_512));
    float _525 = sin(cbMtdParam._m0[21u].z);
    float _526 = cos(cbMtdParam._m0[21u].z);
    float _527 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _528 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _558 = abs(cbMtdParam._m0[20u].w * (((_503 - (((_512 >= ((-0.0) - _512)) ? _516 : ((-0.0) - _516)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_528, (-0.0) - _525, _526 * _527) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_528, _526, _527 * _525) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _562 = (((_558 * cbMtdParam._m0[18u].y) - _503) * _558) + _503;
    float _2904 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _2904 : (isnan(_2904) ? 1.0 : min(_2904, 1.0));
    vec4 _575 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _590 = (cbMtdParam._m0[14u].x * _575.x) * cbMtdParam._m0[19u].x;
    float _591 = (cbMtdParam._m0[14u].y * _575.y) * cbMtdParam._m0[19u].x;
    float _592 = (cbMtdParam._m0[14u].z * _575.z) * cbMtdParam._m0[19u].x;
    float _602 = exp2(log2(_563) * cbMtdParam._m0[20u].x);
    float _2915 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _2926 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _2937 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _631 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _635 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _636 = _267 * _635;
    float _637 = _268 * _635;
    float _638 = _269 * _635;
    float _644 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _645 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _658 = uint(roundEven(NORMAL.w)) * 13u;
    uint _660 = _658 + 9u;
    uint _661 = _660 + uint(cbMatDynParam._m0[0u].w);
    float _667 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2915 : (isnan(_2915) ? 1.0 : min(_2915, 1.0)))) * cbInstanceData._m0[_661].x;
    float _668 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2926 : (isnan(_2926) ? 1.0 : min(_2926, 1.0)))) * cbInstanceData._m0[_661].y;
    float _669 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0)))) * cbInstanceData._m0[_661].z;
    float _2948 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0));
    float _2959 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0));
    float _2970 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0));
    vec4 _681 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _644, cbSceneParam._m0[86u].y * _645));
    float _684 = _681.x * TEXCOORD_4;
    float _685 = (-0.0) - _636;
    float _686 = (-0.0) - _637;
    float _687 = (-0.0) - _638;
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _984;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _772 = (cbModelParam._m0[37u].x * ((((fma(_717, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _774 = (cbModelParam._m0[37u].y * ((((fma(_717, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _775 = (((((fma(_717, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_772, _774, _775), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_772, _774, _775), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_772, _774, _775), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_772, _774, _775), 0.0);
        float _812 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_778.x + (-0.5));
        float _814 = _812 * (_778.y + (-0.5));
        float _815 = _812 * (_778.z + (-0.5));
        float _822 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_785.x + (-0.5));
        float _824 = _822 * (_785.y + (-0.5));
        float _825 = _822 * (_785.z + (-0.5));
        float _832 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_792.x + (-0.5));
        float _834 = _832 * (_792.y + (-0.5));
        float _835 = _832 * (_792.z + (-0.5));
        float _842 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_799.x + (-0.5));
        float _844 = _842 * (_799.y + (-0.5));
        float _845 = _842 * (_799.z + (-0.5));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = _813 * 0.5;
        float _850 = _823 * 0.5;
        float _851 = _833 * 0.5;
        float _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _866 = (dot(vec3(0.0), vec3(_857 * _849, _857 * _850, _857 * _851)) + 1.0) * 0.5;
        float _2996 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _876 = sqrt(((_850 * _850) + (_849 * _849)) + (_851 * _851)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3007 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3018 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0))) * (_878 + 1.0))) + _883) * _846;
        float _893 = _814 * 0.5;
        float _894 = _824 * 0.5;
        float _895 = _834 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _909 = (dot(vec3(0.0), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _3029 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _918 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3040 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _3051 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0))) * (_920 + 1.0))) + _925) * _847;
        float _935 = _815 * 0.5;
        float _936 = _825 * 0.5;
        float _937 = _835 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(0.0), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3062 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3073 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3084 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0))) * (_962 + 1.0))) + _967) * _848;
        _984 = _815;
        _986 = _814;
        _987 = _813;
        _988 = _825;
        _989 = _824;
        _990 = _823;
        _991 = _835;
        _992 = _834;
        _993 = _833;
        _994 = _848;
        _995 = _847;
        _996 = _846;
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
    }
    else
    {
        _984 = _985;
        _986 = _985;
        _987 = _985;
        _988 = _985;
        _989 = _985;
        _990 = _985;
        _991 = _985;
        _992 = _985;
        _993 = _985;
        _994 = _985;
        _995 = _985;
        _996 = _985;
        _997 = 0.0;
        _998 = 0.0;
        _999 = 0.0;
    }
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1052 = (cbModelParam._m0[38u].x * ((((fma(_717, cbModelParam._m0[30u].z, fma(_713, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _709)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1053 = (cbModelParam._m0[38u].y * ((((fma(_717, cbModelParam._m0[31u].z, fma(_713, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _709)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1054 = (((((fma(_717, cbModelParam._m0[32u].z, fma(_713, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _709)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1089 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1056.x + (-0.5));
        float _1091 = _1089 * (_1056.y + (-0.5));
        float _1092 = _1089 * (_1056.z + (-0.5));
        float _1099 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1063.x + (-0.5));
        float _1101 = _1099 * (_1063.y + (-0.5));
        float _1102 = _1099 * (_1063.z + (-0.5));
        float _1109 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1070.x + (-0.5));
        float _1111 = _1109 * (_1070.y + (-0.5));
        float _1112 = _1109 * (_1070.z + (-0.5));
        float _1119 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1077.x + (-0.5));
        float _1121 = _1119 * (_1077.y + (-0.5));
        float _1122 = _1119 * (_1077.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(0.0), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3125 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3136 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3147 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0))) * (_1153 + 1.0))) + _1158) * _1123;
        float _1168 = _1091 * 0.5;
        float _1169 = _1101 * 0.5;
        float _1170 = _1111 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(0.0), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3158 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3169 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3180 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0))) * (_1195 + 1.0))) + _1200) * _1124;
        float _1210 = _1092 * 0.5;
        float _1211 = _1102 * 0.5;
        float _1212 = _1112 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(0.0), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3191 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3202 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3213 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0))) * (_1237 + 1.0))) + _1242) * _1125;
        _1259 = _1092;
        _1260 = _1091;
        _1261 = _1090;
        _1262 = _1102;
        _1263 = _1101;
        _1264 = _1100;
        _1265 = _1112;
        _1266 = _1111;
        _1267 = _1110;
        _1268 = _1125;
        _1269 = _1124;
        _1270 = _1123;
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _985;
        _1260 = _985;
        _1261 = _985;
        _1262 = _985;
        _1263 = _985;
        _1264 = _985;
        _1265 = _985;
        _1266 = _985;
        _1267 = _985;
        _1268 = _985;
        _1269 = _985;
        _1270 = _985;
        _1271 = 0.0;
        _1272 = 0.0;
        _1273 = 0.0;
    }
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _997)) + _997;
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _998)) + _998;
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _999)) + _999;
    float _1306 = fma(_1285, cbSceneParam._m0[89u].z, fma(_1284, cbSceneParam._m0[89u].y, _1283 * cbSceneParam._m0[89u].x));
    float _1309 = fma(_1285, cbSceneParam._m0[90u].z, fma(_1284, cbSceneParam._m0[90u].y, _1283 * cbSceneParam._m0[90u].x));
    float _1312 = fma(_1285, cbSceneParam._m0[91u].z, fma(_1284, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1283));
    float _1327 = _636 * (-0.5);
    float _1328 = _637 * (-0.5);
    float _1329 = _638 * (-0.5);
    float _1330 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1333 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1336 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1370;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1343 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_984, _988, _991, _994));
        float _1347 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_986, _989, _992, _995));
        float _1351 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_987, _990, _993, _996));
        float _1358 = dot(vec4(cbModelParam._m0[39u]), vec4(_1327, _1328, _1329, 1.0));
        _1370 = dot(vec3(isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1358) ? 0.0 : (isnan(0.0) ? _1358 : max(0.0, _1358))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1370 = 1.0;
    }
    float _1381;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1372 = dot(vec4(cbModelParam._m0[40u]), vec4(_1327, _1328, _1329, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1372) ? 0.0 : (isnan(0.0) ? _1372 : max(0.0, _1372))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1385 = (_1381 * cbModelParam._m0[1u].x) + (_1370 * (1.0 - cbModelParam._m0[1u].x));
    float _1394 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1475;
    float _1477;
    float _1479;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1442 = fma(_717, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _709)) + cbModelParam._m0[13u].w;
        float _1446 = fma(_717, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _709)) + cbModelParam._m0[14u].w;
        float _1450 = fma(_717, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _709)) + cbModelParam._m0[15u].w;
        float _1453 = fma(_687, cbModelParam._m0[13u].z, fma(_686, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685));
        float _1456 = fma(_687, cbModelParam._m0[14u].z, fma(_686, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685));
        float _1459 = fma(_687, cbModelParam._m0[15u].z, fma(_686, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685));
        float _1485;
        if (_1453 > 0.0)
        {
            _1485 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1485 = frontier_phi_22_20_ladder;
        }
        float _1780;
        if (_1456 > 0.0)
        {
            _1780 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1780 = frontier_phi_31_27_ladder;
        }
        float _2117;
        if (_1459 > 0.0)
        {
            _2117 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2117 = frontier_phi_45_38_ladder;
        }
        float _2119 = isnan(_1780) ? _1485 : (isnan(_1485) ? _1780 : min(_1485, _1780));
        float _2120 = isnan(_2117) ? _2119 : (isnan(_2119) ? _2117 : min(_2119, _2117));
        float _2124 = (_2120 * _1453) + _1442;
        float _2125 = (_2120 * _1456) + _1446;
        float _2126 = (_2120 * _1459) + _1450;
        float _2127 = _2120 * 9.9999997473787516355514526367188e-05;
        float _2128 = (-1.0) - _2127;
        float _2130 = _2127 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2126 > _2130) || ((_2126 < _2128) || ((_2125 > _2130) || ((_2125 < _2128) || ((_2124 < _2128) || (_2124 > _2130))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2249 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2126, cbModelParam._m0[9u].z, fma(_2125, cbModelParam._m0[9u].y, _2124 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2126, cbModelParam._m0[10u].z, fma(_2125, cbModelParam._m0[10u].y, _2124 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2126, cbModelParam._m0[11u].z, fma(_2125, cbModelParam._m0[11u].y, _2124 * cbModelParam._m0[11u].x))), _1394);
            frontier_phi_21_45_ladder = _2249.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2249.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2249.x * cbModelParam._m0[1u].y;
        }
        _1475 = frontier_phi_21_45_ladder_2;
        _1477 = frontier_phi_21_45_ladder_1;
        _1479 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1463 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_685, _686, _687), _1394);
        _1475 = _1463.x * cbModelParam._m0[1u].y;
        _1477 = _1463.y * cbModelParam._m0[1u].y;
        _1479 = _1463.z * cbModelParam._m0[1u].y;
    }
    float _1482 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1570;
    float _1572;
    float _1574;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1534 = fma(_717, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _709)) + cbModelParam._m0[21u].w;
        float _1538 = fma(_717, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _709)) + cbModelParam._m0[22u].w;
        float _1542 = fma(_717, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _709)) + cbModelParam._m0[23u].w;
        float _1545 = fma(_687, cbModelParam._m0[21u].z, fma(_686, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685));
        float _1548 = fma(_687, cbModelParam._m0[22u].z, fma(_686, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685));
        float _1551 = fma(_687, cbModelParam._m0[23u].z, fma(_686, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685));
        float _1785;
        if (_1545 > 0.0)
        {
            _1785 = abs((1.0 - _1534) / _1545);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1534 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1785 = frontier_phi_33_29_ladder;
        }
        float _2143;
        if (_1548 > 0.0)
        {
            _2143 = abs((1.0 - _1538) / _1548);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1538 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2143 = frontier_phi_47_40_ladder;
        }
        float _2309;
        if (_1551 > 0.0)
        {
            _2309 = abs((1.0 - _1542) / _1551);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1542 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2309 = frontier_phi_61_56_ladder;
        }
        float _2311 = isnan(_2143) ? _1785 : (isnan(_1785) ? _2143 : min(_1785, _2143));
        float _2312 = isnan(_2309) ? _2311 : (isnan(_2311) ? _2309 : min(_2311, _2309));
        float _2316 = (_2312 * _1545) + _1534;
        float _2317 = (_2312 * _1548) + _1538;
        float _2318 = (_2312 * _1551) + _1542;
        float _2319 = _2312 * 9.9999997473787516355514526367188e-05;
        float _2320 = (-1.0) - _2319;
        float _2322 = _2319 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2318 > _2322) || ((_2318 < _2320) || ((_2317 > _2322) || ((_2317 < _2320) || ((_2316 < _2320) || (_2316 > _2322))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2318, cbModelParam._m0[17u].z, fma(_2317, cbModelParam._m0[17u].y, _2316 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2318, cbModelParam._m0[18u].z, fma(_2317, cbModelParam._m0[18u].y, _2316 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2318, cbModelParam._m0[19u].z, fma(_2317, cbModelParam._m0[19u].y, _2316 * cbModelParam._m0[19u].x))), _1482);
            frontier_phi_30_61_ladder = _2501.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2501.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2501.x * cbModelParam._m0[1u].z;
        }
        _1570 = frontier_phi_30_61_ladder_2;
        _1572 = frontier_phi_30_61_ladder_1;
        _1574 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_685, _686, _687), _1482);
        _1570 = _1554.x * cbModelParam._m0[1u].z;
        _1572 = _1554.y * cbModelParam._m0[1u].z;
        _1574 = _1554.z * cbModelParam._m0[1u].z;
    }
    float _1586 = _684 * 0.01200000010430812835693359375;
    float _1588 = _1586 * ((cbModelParam._m0[1u].w * (_1570 - _1475)) + _1475);
    float _1589 = _1586 * ((cbModelParam._m0[1u].w * (_1572 - _1477)) + _1477);
    float _1590 = _1586 * ((cbModelParam._m0[1u].w * (_1574 - _1479)) + _1479);
    float _1593 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, _1588 * cbSceneParam._m0[91u].x));
    uvec4 _1609 = floatBitsToUint(cbInstanceData._m0[_658 + 5u]);
    uint _1611 = _1609.x * 14u;
    uint _1612 = _1611 + 13u;
    float _1617 = _684 + (-1.0);
    float _1620 = (cbLight._m0[_1612].x * _1617) + 1.0;
    float _1621 = (cbLight._m0[_1612].y * _1617) + 1.0;
    uint _1622 = _1611 + 5u;
    float _1628 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
    uint _1632 = _1611 + 4u;
    float _1638 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
    uint _1642 = _1611 | 1u;
    float _1653 = dot(vec3(cbLight._m0[_1611].xyz), vec3(0.0));
    float _1656 = dot(vec3(cbLight._m0[_1642].xyz), vec3(0.0));
    float _3349 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _3360 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1661 = (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * 0.3183098733425140380859375;
    float _1663 = (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * 0.3183098733425140380859375;
    float _1670 = ((cbLight._m0[_1622].x * _1628) * _1663) + ((cbLight._m0[_1632].x * _1638) * _1661);
    float _1671 = ((_1628 * cbLight._m0[_1622].y) * _1663) + ((_1638 * cbLight._m0[_1632].y) * _1661);
    float _1672 = ((_1628 * cbLight._m0[_1622].z) * _1663) + ((_1638 * cbLight._m0[_1632].z) * _1661);
    uint _1673 = _1611 + 8u;
    float _1679 = cbLight._m0[_1611].x + _636;
    float _1680 = cbLight._m0[_1611].y + _637;
    float _1681 = cbLight._m0[_1611].z + _638;
    float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
    float _1689 = dot(vec3(0.0), vec3(cbLight._m0[_1611].xyz));
    float _3371 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1692 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _1693 = dot(vec3(0.0), vec3(_636, _637, _638));
    float _3382 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1696 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _1697 = dot(vec3(cbLight._m0[_1611].xyz), vec3(_1679 * _1685, _1680 * _1685, _1681 * _1685));
    float _3393 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1708 = (exp2(log2(1.0 - (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1714 = (0.5 / ((_1692 + 9.9999999392252902907785028219223e-09) + _1696)) * _1692;
    float _3404 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1716 = (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * 0.31831014156341552734375;
    uint _1727 = _1611 + 9u;
    float _1733 = cbLight._m0[_1642].x + _636;
    float _1734 = cbLight._m0[_1642].y + _637;
    float _1735 = cbLight._m0[_1642].z + _638;
    float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
    float _1743 = dot(vec3(0.0), vec3(cbLight._m0[_1642].xyz));
    float _3415 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _1747 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_1733 * _1739, _1734 * _1739, _1735 * _1739));
    float _3426 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1756 = (exp2(log2(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1760 = (0.5 / ((_1746 + 9.9999999392252902907785028219223e-09) + _1696)) * _1746;
    float _3437 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1762 = (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * 0.31831014156341552734375;
    float _1772 = (((_1756 * cbLight._m0[_1727].x) * _1762) * _1628) + (((_1708 * cbLight._m0[_1673].x) * _1716) * _1638);
    float _1773 = (((_1756 * cbLight._m0[_1727].y) * _1762) * _1628) + (((_1708 * cbLight._m0[_1673].y) * _1716) * _1638);
    float _1774 = (((_1756 * cbLight._m0[_1727].z) * _1762) * _1628) + (((_1708 * cbLight._m0[_1673].z) * _1716) * _1638);
    float _1891;
    float _1893;
    float _1895;
    float _1897;
    float _1899;
    float _1901;
    if (_1609.y == 0u)
    {
        float _1830 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1831 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1830;
        float _1832 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1830;
        float _1833 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1830;
        uvec4 _1845 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1846 = _1845.x;
        uint _1857 = uint((float(_1845.y) * floor(float(uint(cbSceneParam._m0[85u].y * _645) / _1846))) + floor(float(uint(cbSceneParam._m0[85u].x * _644) / _1846)));
        float _1867 = (log2(_1833 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1868 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        uint _1871 = uint(isnan(14.0) ? _1868 : (isnan(_1868) ? 14.0 : min(_1868, 14.0)));
        uvec4 _1877 = texelFetch(g_lightClusterGridBuffer, int(((_1871 << 2u) + (_1857 << 6u)) >> 2u));
        uint _1878 = _1877.x;
        uint _1879 = _1845.z;
        float _1995;
        float _1997;
        float _1999;
        float _2001;
        float _2003;
        float _2005;
        if (((((1u << ((_1879 >> 4u) & 15u)) + 4294967295u) & _1878) == 0u) || ((_1879 & 240u) == 0u))
        {
            _1995 = 0.0;
            _1997 = 0.0;
            _1999 = 0.0;
            _2001 = 0.0;
            _2003 = 0.0;
            _2005 = 0.0;
        }
        else
        {
            float _1996;
            float _1998;
            float _2000;
            float _2002;
            float _2004;
            float _2006;
            float _2177 = 0.0;
            float _2178 = 0.0;
            float _2179 = 0.0;
            float _2180 = 0.0;
            float _2181 = 0.0;
            float _2182 = 0.0;
            uint _2183 = 0u;
            uint _2192;
            bool _2193;
            for (;;)
            {
                _2192 = texelFetch(g_lightClassification, int((((_1871 << 5u) + (_1857 << 9u)) + (_2183 << 2u)) >> 2u)).x;
                _2193 = _2192 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2193)
                {
                    frontier_phi_58_pred = _2178;
                    frontier_phi_58_pred_1 = _2182;
                    frontier_phi_58_pred_2 = _2181;
                    frontier_phi_58_pred_3 = _2180;
                    frontier_phi_58_pred_4 = _2179;
                    frontier_phi_58_pred_5 = _2177;
                }
                else
                {
                    float _2352;
                    float _2353;
                    float _2354;
                    float _2355;
                    float _2356;
                    float _2357;
                    uint _2358;
                    _2352 = _2177;
                    _2353 = _2178;
                    _2354 = _2179;
                    _2355 = _2180;
                    _2356 = _2181;
                    _2357 = _2182;
                    _2358 = _2192;
                    float _2258;
                    float _2259;
                    float _2260;
                    float _2261;
                    float _2262;
                    float _2263;
                    for (;;)
                    {
                        uint _2362 = uint(findLSB(_2358)) + (_2183 << 5u);
                        uint _2359 = (_2358 + 4294967295u) & _2358;
                        uint _2364 = _2362 * 48u;
                        vec4 _2378 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2364)).x, texelFetch(g_PointLightRenderingBuffer, int(_2364 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2364 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2364 + 3u)).x));
                        uint _2384 = (_2362 * 48u) + 4u;
                        vec4 _2397 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2384)).x, texelFetch(g_PointLightRenderingBuffer, int(_2384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2384 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2384 + 3u)).x));
                        uint _2403 = (_2362 * 48u) + 8u;
                        vec3 _2414 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2403)).x, texelFetch(g_PointLightRenderingBuffer, int(_2403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2403 + 2u)).x));
                        float _2418 = _2378.x - _1831;
                        float _2419 = _2378.y - _1832;
                        float _2420 = _2378.z - _1833;
                        float _2421 = dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420));
                        float _2424 = inversesqrt(_2421);
                        float _2433 = 1.0 - (_2421 * _2378.w);
                        float _3458 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
                        float _2434 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
                        float _2435 = sqrt(_2421) * _2397.w;
                        float _2438 = 1.39999997615814208984375 / (_2435 + 1.39999997615814208984375);
                        float _2439 = _2438 * _2438;
                        float _2442 = ((1.0 - _2439) * dot(vec3(0.0), vec3(_2424 * _2418, _2424 * _2419, _2424 * _2420))) + _2439;
                        float _2445 = _2435 * _2435;
                        float _2449 = ((isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0))) * _2434) / ((_2445 * 0.699999988079071044921875) + 1.0);
                        float _2453 = (-0.0) - _1831;
                        float _2454 = (-0.0) - _1832;
                        float _2455 = (-0.0) - _1833;
                        float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
                        float _2463 = dot(vec3(0.0), vec3(_2459 * _2453, _2459 * _2454, _2459 * _2455));
                        float _3474 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
                        float _3485 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
                        float _2467 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
                        float _2471 = (0.5 / (((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) + 9.9999999392252902907785028219223e-09) + _2467)) * _2467;
                        float _3496 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
                        float _2480 = (((isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * 3.1415927410125732421875) / ((_2445 * 2.1991131305694580078125) + 3.141590118408203125)) * _2434;
                        _2261 = (_2449 * _2397.x) + _2355;
                        _2262 = (_2449 * _2397.y) + _2356;
                        _2263 = (_2449 * _2397.z) + _2357;
                        _2258 = (_2480 * _2414.x) + _2352;
                        _2259 = (_2480 * _2414.y) + _2353;
                        _2260 = (_2480 * _2414.z) + _2354;
                        if (_2359 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2352 = _2258;
                            _2353 = _2259;
                            _2354 = _2260;
                            _2355 = _2261;
                            _2356 = _2262;
                            _2357 = _2263;
                            _2358 = _2359;
                        }
                    }
                    frontier_phi_58_pred = _2259;
                    frontier_phi_58_pred_1 = _2263;
                    frontier_phi_58_pred_2 = _2262;
                    frontier_phi_58_pred_3 = _2261;
                    frontier_phi_58_pred_4 = _2260;
                    frontier_phi_58_pred_5 = _2258;
                }
                _1998 = frontier_phi_58_pred;
                _2006 = frontier_phi_58_pred_1;
                _2004 = frontier_phi_58_pred_2;
                _2002 = frontier_phi_58_pred_3;
                _2000 = frontier_phi_58_pred_4;
                _1996 = frontier_phi_58_pred_5;
                uint _2184 = _2183 + 1u;
                if (_2184 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2177 = _1996;
                    _2178 = _1998;
                    _2179 = _2000;
                    _2180 = _2002;
                    _2181 = _2004;
                    _2182 = _2006;
                    _2183 = _2184;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1995 = _1996;
            _1997 = _1998;
            _1999 = _2000;
            _2001 = _2002;
            _2003 = _2004;
            _2005 = _2006;
        }
        uvec4 _2009 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2010 = _2009.z;
        uint _2012 = (_2010 >> 8u) & 15u;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        if (((4294967295u << _2012) & _1878) == 0u)
        {
            _2148 = _1995;
            _2150 = _1997;
            _2152 = _1999;
            _2154 = _2001;
            _2156 = _2003;
            _2158 = _2005;
        }
        else
        {
            float _2173 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2012 < ((_2010 >> 12u) & 15u))
            {
                float _2149;
                float _2151;
                float _2153;
                float _2155;
                float _2157;
                float _2159;
                float _2335 = _1995;
                float _2336 = _1997;
                float _2337 = _1999;
                float _2338 = _2001;
                float _2339 = _2003;
                float _2340 = _2005;
                uint _2341 = _2012;
                uint _2350;
                bool _2351;
                for (;;)
                {
                    _2350 = texelFetch(g_lightClassification, int((((_1871 << 5u) + (_1857 << 9u)) + (_2341 << 2u)) >> 2u)).x;
                    _2351 = _2350 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2351)
                    {
                        frontier_phi_67_pred = _2340;
                        frontier_phi_67_pred_1 = _2339;
                        frontier_phi_67_pred_2 = _2338;
                        frontier_phi_67_pred_3 = _2337;
                        frontier_phi_67_pred_4 = _2336;
                        frontier_phi_67_pred_5 = _2335;
                    }
                    else
                    {
                        float _2506;
                        float _2507;
                        float _2508;
                        float _2509;
                        float _2510;
                        float _2511;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2761;
                        float _2519 = _2335;
                        float _2520 = _2336;
                        float _2521 = _2337;
                        float _2522 = _2338;
                        float _2523 = _2339;
                        float _2524 = _2340;
                        uint _2525 = _2350;
                        uint _2526;
                        vec4 _2551;
                        float _2552;
                        vec4 _2567;
                        vec3 _2579;
                        vec4 _2595;
                        vec4 _2610;
                        float _2656;
                        bool _2657;
                        for (;;)
                        {
                            uint _2536 = ((_2341 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2525));
                            _2526 = (_2525 + 4294967295u) & _2525;
                            uint _2538 = _2536 * 40u;
                            _2551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2538 + 3u)).x));
                            _2552 = _2551.w;
                            uint _2554 = (_2536 * 40u) + 4u;
                            _2567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2554 + 3u)).x));
                            uint _2569 = (_2536 * 40u) + 8u;
                            _2579 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 2u)).x));
                            uint _2582 = (_2536 * 40u) + 16u;
                            _2595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 3u)).x));
                            uint _2597 = (_2536 * 40u) + 20u;
                            _2610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 3u)).x));
                            uint _2612 = (_2536 * 40u) + 24u;
                            vec4 _2625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 3u)).x));
                            uint _2631 = (_2536 * 40u) + 28u;
                            vec4 _2644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 3u)).x));
                            _2656 = fma(_1833, _2644.z, fma(_1832, _2644.y, _2644.x * _1831)) + _2644.w;
                            _2657 = !((fma(_1833, _2625.z, fma(_1832, _2625.y, _2625.x * _1831)) + _2625.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2657)
                            {
                                float _2684 = _2551.x - _1831;
                                float _2685 = _2551.y - _1832;
                                float _2686 = _2551.z - _1833;
                                float _2687 = dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686));
                                float _2690 = inversesqrt(_2687);
                                float _2691 = _2690 * _2684;
                                float _2692 = _2690 * _2685;
                                float _2693 = _2690 * _2686;
                                float _2697 = 1.0 - (_2687 / (_2552 * _2552));
                                float _3507 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                                float _2698 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
                                float _2702 = sqrt(_2687) * _2567.w;
                                float _2704 = 1.39999997615814208984375 / (_2702 + 1.39999997615814208984375);
                                float _2705 = _2704 * _2704;
                                float _2706 = 1.0 - _2705;
                                float _2708 = (_2706 * dot(vec3(_2691, _2692, _2693), vec3(0.0))) + _2705;
                                float _2711 = _2702 * _2702;
                                float _2715 = (fma(_1833, _2595.z, fma(_1832, _2595.y, _2595.x * _1831)) + _2595.w) / _2656;
                                float _2716 = (fma(_1833, _2610.z, fma(_1832, _2610.y, _2610.x * _1831)) + _2610.w) / _2656;
                                float _2720 = 1.0 - dot(vec2(_2715, _2716), vec2(_2715, _2716));
                                float _3523 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                                float _2721 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
                                float _2722 = _2721 * (((isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0))) * _2698) / ((_2711 * 0.699999988079071044921875) + 1.0));
                                float _2732 = dot(vec3(0.0), vec3((-0.0) - (_1831 * _2173), (-0.0) - (_1832 * _2173), (-0.0) - (_1833 * _2173)));
                                float _3534 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                                float _2740 = (_2706 * dot(vec3(0.0), vec3(_2691, _2692, _2693))) + _2705;
                                float _3545 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
                                float _2741 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
                                float _2745 = (0.5 / (((isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) + 9.9999999392252902907785028219223e-09) + _2741)) * _2741;
                                float _3556 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                                float _2752 = (_2721 * _2698) * (((isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * 3.1415927410125732421875) / ((_2711 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2722 * _2567.z;
                                frontier_phi_73_pred_1 = _2722 * _2567.y;
                                frontier_phi_73_pred_2 = _2722 * _2567.x;
                                frontier_phi_73_pred_3 = _2752 * _2579.z;
                                frontier_phi_73_pred_4 = _2752 * _2579.y;
                                frontier_phi_73_pred_5 = _2752 * _2579.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2761 = frontier_phi_73_pred;
                            _2760 = frontier_phi_73_pred_1;
                            _2759 = frontier_phi_73_pred_2;
                            _2758 = frontier_phi_73_pred_3;
                            _2757 = frontier_phi_73_pred_4;
                            _2756 = frontier_phi_73_pred_5;
                            _2509 = _2759 + _2522;
                            _2510 = _2760 + _2523;
                            _2511 = _2761 + _2524;
                            _2506 = _2756 + _2519;
                            _2507 = _2757 + _2520;
                            _2508 = _2758 + _2521;
                            if (_2526 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2519 = _2506;
                                _2520 = _2507;
                                _2521 = _2508;
                                _2522 = _2509;
                                _2523 = _2510;
                                _2524 = _2511;
                                _2525 = _2526;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2511;
                        frontier_phi_67_pred_1 = _2510;
                        frontier_phi_67_pred_2 = _2509;
                        frontier_phi_67_pred_3 = _2508;
                        frontier_phi_67_pred_4 = _2507;
                        frontier_phi_67_pred_5 = _2506;
                    }
                    _2159 = frontier_phi_67_pred;
                    _2157 = frontier_phi_67_pred_1;
                    _2155 = frontier_phi_67_pred_2;
                    _2153 = frontier_phi_67_pred_3;
                    _2151 = frontier_phi_67_pred_4;
                    _2149 = frontier_phi_67_pred_5;
                    uint _2342 = _2341 + 1u;
                    if (_2342 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2335 = _2149;
                        _2336 = _2151;
                        _2337 = _2153;
                        _2338 = _2155;
                        _2339 = _2157;
                        _2340 = _2159;
                        _2341 = _2342;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2155;
                frontier_phi_49_50_ladder_1 = _2159;
                frontier_phi_49_50_ladder_2 = _2157;
                frontier_phi_49_50_ladder_3 = _2153;
                frontier_phi_49_50_ladder_4 = _2151;
                frontier_phi_49_50_ladder_5 = _2149;
            }
            else
            {
                frontier_phi_49_50_ladder = _2001;
                frontier_phi_49_50_ladder_1 = _2005;
                frontier_phi_49_50_ladder_2 = _2003;
                frontier_phi_49_50_ladder_3 = _1999;
                frontier_phi_49_50_ladder_4 = _1997;
                frontier_phi_49_50_ladder_5 = _1995;
            }
            _2148 = frontier_phi_49_50_ladder_5;
            _2150 = frontier_phi_49_50_ladder_4;
            _2152 = frontier_phi_49_50_ladder_3;
            _2154 = frontier_phi_49_50_ladder;
            _2156 = frontier_phi_49_50_ladder_2;
            _2158 = frontier_phi_49_50_ladder_1;
        }
        float _2163 = isnan(1.0) ? _684 : (isnan(_684) ? 1.0 : min(_684, 1.0));
        _1891 = (_2163 * _2154) + _1670;
        _1893 = (_2163 * _2156) + _1671;
        _1895 = (_2163 * _2158) + _1672;
        _1897 = ((_2148 * 0.039999999105930328369140625) * _2163) + _1772;
        _1899 = ((_2150 * 0.039999999105930328369140625) * _2163) + _1773;
        _1901 = ((_2152 * 0.039999999105930328369140625) * _2163) + _1774;
    }
    else
    {
        _1891 = _1670;
        _1893 = _1671;
        _1895 = _1672;
        _1897 = _1772;
        _1899 = _1773;
        _1901 = _1774;
    }
    uint _1907 = _660 + uint(cbMatDynParam._m0[0u].w);
    float _1913 = ((_602 * (_590 - (_590 * _563))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1907].x;
    float _1914 = ((_602 * (_591 - (_591 * _563))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1907].y;
    float _1915 = ((_602 * (_592 - (_592 * _563))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1907].z;
    float _3572 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3583 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3594 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _1932 = (((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1891 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _684))) + ((_1897 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1385)) * cbPerFrame._m0[3u].x)) + _1913;
    float _1934 = (_1914 + ((_1899 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _1385)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1893 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _684)));
    float _1936 = (_1915 + ((_1901 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _1385)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_1895 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _684)));
    float _3620 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1949 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    uint _1950 = _658 + 6u;
    float _1958 = _644 / cbSceneParam._m0[86u].x;
    float _1959 = _645 / cbSceneParam._m0[86u].y;
    vec4 _1973 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1958, _1959, (log2((isnan(cbSceneParam._m0[77u].w) ? _631 : (isnan(_631) ? cbSceneParam._m0[77u].w : min(_631, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1975 = _1973.x;
    float _1976 = _1973.y;
    float _1977 = _1973.z;
    float _1978 = _1973.w;
    float _2058;
    float _2060;
    float _2062;
    float _2064;
    if (_631 > cbSceneParam._m0[78u].w)
    {
        float _2020 = isnan(_631) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _631 : min(cbSceneParam._m0[80u].w, _631));
        float _2021 = _2020 / _631;
        float _2032 = _2021 * _267;
        float _2033 = _268 * _2021;
        float _2034 = (-0.0) - _2033;
        float _2035 = _2021 * _269;
        float _2037 = (cbSceneParam._m0[77u].w * _2034) / _2020;
        float _2038 = _2037 + cbSceneParam._m0[79u].w;
        float _2039 = cbSceneParam._m0[79u].w - _2033;
        float _2045 = sqrt(((_2032 * _2032) + (_2033 * _2033)) + (_2035 * _2035));
        float _2048 = (1.0 - (cbSceneParam._m0[77u].w / _2020)) * _2045;
        float _2054 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2056 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2271;
        if (abs((_2034 - _2037) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2271 = ((((_2038 > 0.0) ? exp2(_2054 * _2038) : (2.0 - exp2(_2056 * _2038))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2048;
        }
        else
        {
            float _2206 = 1.0 / cbSceneParam._m0[80u].x;
            float _2207 = isnan(_2039) ? _2038 : (isnan(_2038) ? _2039 : max(_2038, _2039));
            float _2208 = isnan(_2039) ? _2038 : (isnan(_2038) ? _2039 : min(_2038, _2039));
            float _2217 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : min(_2207, 0.0));
            float _2218 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : min(_2208, 0.0));
            _2271 = ((abs(_2045 / _2034) * cbSceneParam._m0[80u].y) * ((((_2217 - _2218) * 2.0) - ((exp2(_2054 * (isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0)))) - exp2(_2054 * (isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))))) * _2206)) - ((exp2(_2056 * _2217) - exp2(_2056 * _2218)) * _2206))) + (_2048 * cbSceneParam._m0[80u].z);
        }
        vec4 _2273 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1958, _1959, 1.0), 0.0);
        float _2282 = exp2((_2271 * (-1.44269502162933349609375)) * (1.0 - _2273.w));
        float _2283 = log2(_2282);
        float _2299 = log2(_1978);
        _2058 = (exp2(_2299 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2283 * cbSceneParam._m0[78u].x)) * _2273.x) / cbSceneParam._m0[78u].x)) + _1975;
        _2060 = (exp2(_2299 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2283 * cbSceneParam._m0[78u].y)) * _2273.y) / cbSceneParam._m0[78u].y)) + _1976;
        _2062 = (exp2(_2299 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2283 * cbSceneParam._m0[78u].z)) * _2273.z) / cbSceneParam._m0[78u].z)) + _1977;
        _2064 = _2282 * _1978;
    }
    else
    {
        _2058 = _1975;
        _2060 = _1976;
        _2062 = _1977;
        _2064 = _1978;
    }
    float _2075 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2076 = _2075 == 3.0;
    float _2078 = log2(_2064);
    float _2082 = exp2(_2078 * cbSceneParam._m0[78u].x);
    float _2083 = exp2(_2078 * cbSceneParam._m0[78u].y);
    float _2084 = exp2(_2078 * cbSceneParam._m0[78u].z);
    float _2085 = _2082 * (isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)));
    float _2086 = _2083 * (isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)));
    float _2087 = _2084 * (isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)));
    float _2096 = (_2075 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2096 * (_2076 ? _2085 : (_2085 + (cbSceneParam._m0[72u].w * _2058)));
    SV_Target.y = _2096 * (_2076 ? _2086 : (_2086 + (cbSceneParam._m0[72u].w * _2060)));
    SV_Target.z = _2096 * (_2076 ? _2087 : (_2087 + (cbSceneParam._m0[72u].w * _2062)));
    SV_Target.w = cbInstanceData._m0[_1950].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1913) * _1949) * _2082) * _2096;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1914) * _1949) * _2083) * _2096;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1915) * _1949) * _2084) * _2096;
    SV_Target_1.w = cbInstanceData._m0[_1950].w;
}


