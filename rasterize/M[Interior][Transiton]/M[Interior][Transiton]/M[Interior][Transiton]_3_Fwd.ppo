#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1119;
uint _2274;
uint _2275;
uint _2276;
uint _2510;
uint _2511;
uint _2512;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    vec4 _299 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _337 = cbMtdParam._m0[27u].w + _278;
    float _338 = cbMtdParam._m0[28u].x + _279;
    float _339 = cbMtdParam._m0[28u].y + _280;
    float _353 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_207 * _199, _207 * _200, _207 * _201));
    float _354 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_221 * TANGENT.x, _221 * TANGENT.y, _221 * TANGENT.z));
    float _355 = (-0.0) - dot(vec3(_337, _338, _339), vec3((-0.0) - (_214 * NORMAL.x), (-0.0) - (_214 * NORMAL.y), (-0.0) - (_214 * NORMAL.z)));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _362 = _359 * _355;
    float _363 = (_359 * _353) + (((_299.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _364 = (_359 * _354) + (((_299.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _365 = _363 * cbMtdParam._m0[24u].x;
    float _366 = _364 * cbMtdParam._m0[23u].w;
    float _367 = fract(TEXCOORD.x);
    float _368 = fract(TEXCOORD.y);
    float _374;
    if (_365 > 0.0)
    {
        _374 = (1.0 - _367) / _365;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_365 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _367) / _365;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _374 = frontier_phi_3_2_ladder;
    }
    float _382;
    if (_366 > 0.0)
    {
        _382 = (1.0 - _368) / _366;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_366 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _368) / _366;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _382 = frontier_phi_7_6_ladder;
    }
    bool _384 = _362 > 0.0;
    float _386 = _384 ? (cbMtdParam._m0[17u].x / _362) : 5000.0;
    float _387 = isnan(_382) ? _374 : (isnan(_374) ? _382 : min(_374, _382));
    float _388 = isnan(_386) ? _387 : (isnan(_387) ? _386 : min(_387, _386));
    float _392 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _393 = _367 + (-0.5);
    float _396 = _368 + (-0.5);
    float _399 = ((_388 * _362) + _392) / _392;
    vec4 _424 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_393 + (_388 * _365)) / _399) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_396 + (_388 * _366)) / _399) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _434 = cbMtdParam._m0[9u].x * _424.x;
    float _435 = cbMtdParam._m0[9u].y * _424.y;
    float _436 = cbMtdParam._m0[9u].z * _424.z;
    float _454 = _363 * cbMtdParam._m0[26u].z;
    float _455 = _364 * cbMtdParam._m0[26u].y;
    bool _456 = _454 > 0.0;
    float _461;
    if (_456)
    {
        _461 = (1.0 - _367) / _454;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _367) / _454;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _461 = frontier_phi_11_10_ladder;
    }
    bool _463 = _455 > 0.0;
    float _468;
    if (_463)
    {
        _468 = (1.0 - _368) / _455;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_455 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _368) / _455;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _468 = frontier_phi_15_14_ladder;
    }
    float _471 = _384 ? (cbMtdParam._m0[19u].z / _362) : 5000.0;
    float _472 = isnan(_468) ? _461 : (isnan(_461) ? _468 : min(_461, _468));
    float _473 = isnan(_471) ? _472 : (isnan(_472) ? _471 : min(_472, _471));
    float _477 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _481 = ((_473 * _362) + _477) / _477;
    float _486 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _488 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _504 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_393 + (_473 * _454)) / _481) + 0.5) + _486) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_396 + (_473 * _455)) / _481) + 0.5) + _488) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _516;
    if (_456)
    {
        _516 = (1.0 - _367) / _454;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _367) / _454;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _516 = frontier_phi_19_18_ladder;
    }
    float _522;
    if (_463)
    {
        _522 = (1.0 - _368) / _455;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_455 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _368) / _455;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _522 = frontier_phi_23_22_ladder;
    }
    float _524 = isnan(_522) ? _516 : (isnan(_516) ? _522 : min(_516, _522));
    float _525 = isnan(_471) ? _524 : (isnan(_524) ? _471 : min(_524, _471));
    float _532 = ((_525 * _362) + _477) / _477;
    vec4 _552 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_393 + (_525 * _454)) / _532) + 0.5) + _486) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_396 + (_525 * _455)) / _532) + 0.5) + _488) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _554 = _552.x;
    float _561 = (_554 * ((_504.x * cbMtdParam._m0[10u].x) - _434)) + _434;
    float _562 = (_554 * ((_504.y * cbMtdParam._m0[10u].y) - _435)) + _435;
    float _563 = (_554 * ((_504.z * cbMtdParam._m0[10u].z) - _436)) + _436;
    float _577 = _363 * cbMtdParam._m0[27u].x;
    float _578 = _364 * cbMtdParam._m0[26u].w;
    bool _579 = _577 > 0.0;
    float _584;
    if (_579)
    {
        _584 = (1.0 - _367) / _577;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_577 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _367) / _577;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _584 = frontier_phi_27_26_ladder;
    }
    bool _586 = _578 > 0.0;
    float _591;
    if (_586)
    {
        _591 = (1.0 - _368) / _578;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_578 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _368) / _578;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _591 = frontier_phi_31_30_ladder;
    }
    float _594 = _384 ? (cbMtdParam._m0[23u].x / _362) : 5000.0;
    float _595 = isnan(_591) ? _584 : (isnan(_584) ? _591 : min(_584, _591));
    float _596 = isnan(_594) ? _595 : (isnan(_595) ? _594 : min(_595, _594));
    float _600 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _604 = ((_596 * _362) + _600) / _600;
    float _609 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _611 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _627 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_393 + (_596 * _577)) / _604) + 0.5) + _609) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_396 + (_596 * _578)) / _604) + 0.5) + _611) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _639;
    if (_579)
    {
        _639 = (1.0 - _367) / _577;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_577 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _367) / _577;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _639 = frontier_phi_35_34_ladder;
    }
    float _645;
    if (_586)
    {
        _645 = (1.0 - _368) / _578;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_578 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _368) / _578;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _645 = frontier_phi_39_38_ladder;
    }
    float _647 = isnan(_645) ? _639 : (isnan(_639) ? _645 : min(_639, _645));
    float _648 = isnan(_594) ? _647 : (isnan(_647) ? _594 : min(_647, _594));
    float _655 = ((_648 * _362) + _600) / _600;
    vec4 _676 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_393 + (_648 * _577)) / _655) + 0.5) + _609) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_396 + (_648 * _578)) / _655) + 0.5) + _611) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _678 = _676.x;
    float _685 = (_678 * ((_627.x * cbMtdParam._m0[13u].x) - _561)) + _561;
    float _686 = (_678 * ((_627.y * cbMtdParam._m0[13u].y) - _562)) + _562;
    float _687 = (_678 * ((_627.z * cbMtdParam._m0[13u].z) - _563)) + _563;
    float _696 = (cbMtdParam._m0[16u].x * cbMtdParam._m0[19u].y) * _685;
    float _698 = (_686 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].y;
    float _700 = (_687 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].z;
    vec4 _724 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _729 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _735 = ((_724.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _737 = (-0.0) - (cbMtdParam._m0[21u].x * ((_724.x * 0.5) + (-0.25)));
    float _738 = fract(_729);
    float _740 = fract(_729 + 0.5);
    vec4 _767 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_738 * _737) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_735 * _738) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _769 = _767.x;
    float _775 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_740 * _737) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_735 * _740) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _769) * abs((_738 * 2.0) + (-1.0))) + _769;
    float _781 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _785 = fract(abs(_781));
    float _795 = sin(cbMtdParam._m0[21u].z);
    float _796 = cos(cbMtdParam._m0[21u].z);
    float _797 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _798 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _823 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_798, (-0.0) - _795, _796 * _797) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_798, _796, _797 * _795) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_781 >= ((-0.0) - _781)) ? _785 : ((-0.0) - _785)) * cbMtdParam._m0[18u].z) - _775)) + cbMtdParam._m0[18u].w;
    float _824 = ceil(_823);
    float _2820 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _825 = isnan(1.0) ? _2820 : (isnan(_2820) ? 1.0 : min(_2820, 1.0));
    float _845 = ((((cbMtdParam._m0[21u].w * _685) * cbMtdParam._m0[15u].x) - _696) * _825) + _696;
    float _846 = ((((cbMtdParam._m0[21u].w * _686) * cbMtdParam._m0[15u].y) - _698) * _825) + _698;
    float _847 = ((((cbMtdParam._m0[21u].w * _687) * cbMtdParam._m0[15u].z) - _700) * _825) + _700;
    float _851 = abs(cbMtdParam._m0[20u].w * _823);
    float _855 = (((_851 * cbMtdParam._m0[18u].y) - _775) * _851) + _775;
    float _2831 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _856 = isnan(1.0) ? _2831 : (isnan(_2831) ? 1.0 : min(_2831, 1.0));
    vec4 _868 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _883 = (cbMtdParam._m0[14u].x * _868.x) * cbMtdParam._m0[19u].x;
    float _884 = (cbMtdParam._m0[14u].y * _868.y) * cbMtdParam._m0[19u].x;
    float _885 = (cbMtdParam._m0[14u].z * _868.z) * cbMtdParam._m0[19u].x;
    float _892 = exp2(log2(_856) * cbMtdParam._m0[20u].x);
    float _927 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _931 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _932 = _278 * _931;
    float _933 = _279 * _931;
    float _934 = _280 * _931;
    float _940 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _941 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _950 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_940 * cbSceneParam._m0[86u].x, _941 * cbSceneParam._m0[86u].y));
    float _953 = _950.x * TEXCOORD_4;
    float _954 = (-0.0) - _932;
    float _955 = (-0.0) - _933;
    float _956 = (-0.0) - _934;
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1118;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1041 = (cbModelParam._m0[37u].x * ((((fma(_986, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1043 = (cbModelParam._m0[37u].y * ((((fma(_986, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1044 = (((((fma(_986, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1041, _1043, _1044), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1041, _1043, _1044), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1041, _1043, _1044), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1041, _1043, _1044), 0.0);
        float _1081 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1068.x + (-0.5));
        float _1113 = _1111 * (_1068.y + (-0.5));
        float _1114 = _1111 * (_1068.z + (-0.5));
        _1118 = _1081 * (_1047.z + (-0.5));
        _1120 = _1081 * (_1047.y + (-0.5));
        _1121 = _1081 * (_1047.x + (-0.5));
        _1122 = _1091 * (_1054.z + (-0.5));
        _1123 = _1091 * (_1054.y + (-0.5));
        _1124 = _1091 * (_1054.x + (-0.5));
        _1125 = _1101 * (_1061.z + (-0.5));
        _1126 = _1101 * (_1061.y + (-0.5));
        _1127 = _1101 * (_1061.x + (-0.5));
        _1128 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        _1129 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        _1130 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    }
    else
    {
        _1118 = _1119;
        _1120 = _1119;
        _1121 = _1119;
        _1122 = _1119;
        _1123 = _1119;
        _1124 = _1119;
        _1125 = _1119;
        _1126 = _1119;
        _1127 = _1119;
        _1128 = _1119;
        _1129 = _1119;
        _1130 = _1119;
    }
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1183 = (cbModelParam._m0[38u].x * ((((fma(_986, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1184 = (cbModelParam._m0[38u].y * ((((fma(_986, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1185 = (((((fma(_986, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1220 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1208.x + (-0.5));
        float _1252 = _1250 * (_1208.y + (-0.5));
        float _1253 = _1250 * (_1208.z + (-0.5));
        _1257 = _1220 * (_1187.z + (-0.5));
        _1258 = _1220 * (_1187.y + (-0.5));
        _1259 = _1220 * (_1187.x + (-0.5));
        _1260 = _1230 * (_1194.z + (-0.5));
        _1261 = _1230 * (_1194.y + (-0.5));
        _1262 = _1230 * (_1194.x + (-0.5));
        _1263 = _1240 * (_1201.z + (-0.5));
        _1264 = _1240 * (_1201.y + (-0.5));
        _1265 = _1240 * (_1201.x + (-0.5));
        _1266 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        _1267 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        _1268 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
    }
    else
    {
        _1257 = _1119;
        _1258 = _1119;
        _1259 = _1119;
        _1260 = _1119;
        _1261 = _1119;
        _1262 = _1119;
        _1263 = _1119;
        _1264 = _1119;
        _1265 = _1119;
        _1266 = _1119;
        _1267 = _1119;
        _1268 = _1119;
    }
    float _1283 = _932 * (-0.5);
    float _1284 = _933 * (-0.5);
    float _1285 = _934 * (-0.5);
    float _1286 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1289 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1258, _1261, _1264, _1267));
    float _1292 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1257, _1260, _1263, _1266));
    float _1327;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1299 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1118, _1122, _1125, _1128));
        float _1303 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1307 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1314 = dot(vec4(cbModelParam._m0[39u]), vec4(_1283, _1284, _1285, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1338;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1329 = dot(vec4(cbModelParam._m0[40u]), vec4(_1283, _1284, _1285, 1.0));
        _1338 = dot(vec3(isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1338 = 1.0;
    }
    float _1342 = (_1338 * cbModelParam._m0[1u].x) + (_1327 * (1.0 - cbModelParam._m0[1u].x));
    float _1348 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1395 = fma(_986, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978)) + cbModelParam._m0[13u].w;
        float _1399 = fma(_986, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978)) + cbModelParam._m0[14u].w;
        float _1403 = fma(_986, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978)) + cbModelParam._m0[15u].w;
        float _1406 = fma(_956, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954));
        float _1409 = fma(_956, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954));
        float _1412 = fma(_956, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954));
        float _1438;
        if (_1406 > 0.0)
        {
            _1438 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1438 = frontier_phi_54_52_ladder;
        }
        float _1714;
        if (_1409 > 0.0)
        {
            _1714 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1714 = frontier_phi_63_59_ladder;
        }
        float _2027;
        if (_1412 > 0.0)
        {
            _2027 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2027 = frontier_phi_77_70_ladder;
        }
        float _2029 = isnan(_1714) ? _1438 : (isnan(_1438) ? _1714 : min(_1438, _1714));
        float _2030 = isnan(_2027) ? _2029 : (isnan(_2029) ? _2027 : min(_2029, _2027));
        float _2034 = (_2030 * _1406) + _1395;
        float _2035 = (_2030 * _1409) + _1399;
        float _2036 = (_2030 * _1412) + _1403;
        float _2037 = _2030 * 9.9999997473787516355514526367188e-05;
        float _2038 = (-1.0) - _2037;
        float _2040 = _2037 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2036 > _2040) || ((_2036 < _2038) || ((_2035 > _2040) || ((_2035 < _2038) || ((_2034 < _2038) || (_2034 > _2040))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2147 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2036, cbModelParam._m0[9u].z, fma(_2035, cbModelParam._m0[9u].y, _2034 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2036, cbModelParam._m0[10u].z, fma(_2035, cbModelParam._m0[10u].y, _2034 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2036, cbModelParam._m0[11u].z, fma(_2035, cbModelParam._m0[11u].y, _2034 * cbModelParam._m0[11u].x))), _1348);
            frontier_phi_53_77_ladder = _2147.z * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2147.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2147.x * cbModelParam._m0[1u].y;
        }
        _1428 = frontier_phi_53_77_ladder_2;
        _1430 = frontier_phi_53_77_ladder_1;
        _1432 = frontier_phi_53_77_ladder;
    }
    else
    {
        vec4 _1416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_954, _955, _956), _1348);
        _1428 = _1416.x * cbModelParam._m0[1u].y;
        _1430 = _1416.y * cbModelParam._m0[1u].y;
        _1432 = _1416.z * cbModelParam._m0[1u].y;
    }
    float _1435 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1523;
    float _1525;
    float _1527;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1487 = fma(_986, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978)) + cbModelParam._m0[21u].w;
        float _1491 = fma(_986, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978)) + cbModelParam._m0[22u].w;
        float _1495 = fma(_986, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978)) + cbModelParam._m0[23u].w;
        float _1498 = fma(_956, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954));
        float _1501 = fma(_956, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954));
        float _1504 = fma(_956, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954));
        float _1719;
        if (_1498 > 0.0)
        {
            _1719 = abs((1.0 - _1487) / _1498);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1487 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1719 = frontier_phi_65_61_ladder;
        }
        float _2053;
        if (_1501 > 0.0)
        {
            _2053 = abs((1.0 - _1491) / _1501);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1491 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2053 = frontier_phi_79_72_ladder;
        }
        float _2204;
        if (_1504 > 0.0)
        {
            _2204 = abs((1.0 - _1495) / _1504);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1495 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2204 = frontier_phi_93_88_ladder;
        }
        float _2206 = isnan(_2053) ? _1719 : (isnan(_1719) ? _2053 : min(_1719, _2053));
        float _2207 = isnan(_2204) ? _2206 : (isnan(_2206) ? _2204 : min(_2206, _2204));
        float _2211 = (_2207 * _1498) + _1487;
        float _2212 = (_2207 * _1501) + _1491;
        float _2213 = (_2207 * _1504) + _1495;
        float _2214 = _2207 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2214;
        float _2217 = _2214 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2213 > _2217) || ((_2213 < _2215) || ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 < _2215) || (_2211 > _2217))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2213, cbModelParam._m0[17u].z, fma(_2212, cbModelParam._m0[17u].y, _2211 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2213, cbModelParam._m0[18u].z, fma(_2212, cbModelParam._m0[18u].y, _2211 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2213, cbModelParam._m0[19u].z, fma(_2212, cbModelParam._m0[19u].y, _2211 * cbModelParam._m0[19u].x))), _1435);
            frontier_phi_62_93_ladder = _2373.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2373.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2373.x * cbModelParam._m0[1u].z;
        }
        _1523 = frontier_phi_62_93_ladder_2;
        _1525 = frontier_phi_62_93_ladder_1;
        _1527 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_954, _955, _956), _1435);
        _1523 = _1507.x * cbModelParam._m0[1u].z;
        _1525 = _1507.y * cbModelParam._m0[1u].z;
        _1527 = _1507.z * cbModelParam._m0[1u].z;
    }
    float _1539 = _953 * 0.01200000010430812835693359375;
    float _1541 = _1539 * ((cbModelParam._m0[1u].w * (_1523 - _1428)) + _1428);
    float _1542 = _1539 * ((cbModelParam._m0[1u].w * (_1525 - _1430)) + _1430);
    float _1543 = _1539 * ((cbModelParam._m0[1u].w * (_1527 - _1432)) + _1432);
    float _1564 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, _1541 * cbSceneParam._m0[91u].x));
    uint _1577 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1581 = floatBitsToUint(cbInstanceData._m0[_1577 + 5u]);
    uint _1583 = _1581.x * 14u;
    uint _1584 = _1583 + 13u;
    float _1589 = _953 + (-1.0);
    float _1592 = (cbLight._m0[_1584].x * _1589) + 1.0;
    float _1593 = (cbLight._m0[_1584].y * _1589) + 1.0;
    uint _1594 = _1583 + 8u;
    float _1605 = cbLight._m0[_1583].x + _932;
    float _1606 = cbLight._m0[_1583].y + _933;
    float _1607 = cbLight._m0[_1583].z + _934;
    float _1611 = inversesqrt(dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607)));
    float _1615 = dot(vec3(0.0), vec3(cbLight._m0[_1583].xyz));
    float _2957 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1618 = isnan(1.0) ? _2957 : (isnan(_2957) ? 1.0 : min(_2957, 1.0));
    float _1619 = dot(vec3(0.0), vec3(_932, _933, _934));
    float _2968 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1622 = isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0));
    float _1623 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_1605 * _1611, _1606 * _1611, _1607 * _1611));
    float _2979 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1634 = (exp2(log2(1.0 - (isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1640 = (0.5 / ((_1618 + 9.9999999392252902907785028219223e-09) + _1622)) * _1618;
    float _2990 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1642 = (isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0))) * 0.31831014156341552734375;
    float _1644 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
    uint _1654 = _1583 + 9u;
    uint _1660 = _1583 | 1u;
    float _1666 = cbLight._m0[_1660].x + _932;
    float _1667 = cbLight._m0[_1660].y + _933;
    float _1668 = cbLight._m0[_1660].z + _934;
    float _1672 = inversesqrt(dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668)));
    float _1676 = dot(vec3(0.0), vec3(cbLight._m0[_1660].xyz));
    float _3006 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1679 = isnan(1.0) ? _3006 : (isnan(_3006) ? 1.0 : min(_3006, 1.0));
    float _1680 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_1666 * _1672, _1667 * _1672, _1668 * _1672));
    float _3017 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1689 = (exp2(log2(1.0 - (isnan(1.0) ? _3017 : (isnan(_3017) ? 1.0 : min(_3017, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1693 = (0.5 / ((_1679 + 9.9999999392252902907785028219223e-09) + _1622)) * _1679;
    float _3028 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1695 = (isnan(1.0) ? _3028 : (isnan(_3028) ? 1.0 : min(_3028, 1.0))) * 0.31831014156341552734375;
    float _1696 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    float _1706 = (((_1689 * cbLight._m0[_1654].x) * _1695) * _1696) + (((_1634 * cbLight._m0[_1594].x) * _1642) * _1644);
    float _1707 = (((_1689 * cbLight._m0[_1654].y) * _1695) * _1696) + (((_1634 * cbLight._m0[_1594].y) * _1642) * _1644);
    float _1708 = (((_1689 * cbLight._m0[_1654].z) * _1695) * _1696) + (((_1634 * cbLight._m0[_1594].z) * _1642) * _1644);
    float _1824;
    float _1826;
    float _1828;
    if (_1581.y == 0u)
    {
        float _1763 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1764 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1763;
        float _1765 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1763;
        float _1766 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1763;
        uvec4 _1778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1779 = _1778.x;
        uint _1790 = uint((float(_1778.y) * floor(float(uint(cbSceneParam._m0[85u].y * _941) / _1779))) + floor(float(uint(cbSceneParam._m0[85u].x * _940) / _1779)));
        float _1800 = (log2(_1766 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1801 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        uint _1804 = uint(isnan(14.0) ? _1801 : (isnan(_1801) ? 14.0 : min(_1801, 14.0)));
        uvec4 _1810 = texelFetch(g_lightClusterGridBuffer, int(((_1804 << 2u) + (_1790 << 6u)) >> 2u));
        uint _1811 = _1810.x;
        uint _1812 = _1778.z;
        float _1911;
        float _1913;
        float _1915;
        if (((((1u << ((_1812 >> 4u) & 15u)) + 4294967295u) & _1811) == 0u) || ((_1812 & 240u) == 0u))
        {
            _1911 = 0.0;
            _1913 = 0.0;
            _1915 = 0.0;
        }
        else
        {
            float _1912;
            float _1914;
            float _1916;
            float _2078 = 0.0;
            float _2079 = 0.0;
            float _2080 = 0.0;
            uint _2081 = 0u;
            uint _2090;
            bool _2091;
            for (;;)
            {
                _2090 = texelFetch(g_lightClassification, int((((_1804 << 5u) + (_1790 << 9u)) + (_2081 << 2u)) >> 2u)).x;
                _2091 = _2090 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                if (_2091)
                {
                    frontier_phi_90_pred = _2080;
                    frontier_phi_90_pred_1 = _2079;
                    frontier_phi_90_pred_2 = _2078;
                }
                else
                {
                    float _2244;
                    float _2245;
                    float _2246;
                    uint _2247;
                    _2244 = _2078;
                    _2245 = _2079;
                    _2246 = _2080;
                    _2247 = _2090;
                    float _2156;
                    float _2157;
                    float _2158;
                    for (;;)
                    {
                        uint _2251 = uint(findLSB(_2247)) + (_2081 << 5u);
                        uint _2248 = (_2247 + 4294967295u) & _2247;
                        uint _2253 = _2251 * 48u;
                        vec4 _2267 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2253)).x, texelFetch(g_PointLightRenderingBuffer, int(_2253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2253 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2253 + 3u)).x));
                        uint _2284 = (_2251 * 48u) + 8u;
                        vec3 _2295 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2284)).x, texelFetch(g_PointLightRenderingBuffer, int(_2284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2284 + 2u)).x));
                        float _2299 = _2267.x - _1764;
                        float _2300 = _2267.y - _1765;
                        float _2301 = _2267.z - _1766;
                        float _2302 = dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301));
                        float _2305 = inversesqrt(_2302);
                        float _2314 = 1.0 - (_2302 * _2267.w);
                        float _3054 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
                        float _2316 = sqrt(_2302) * uintBitsToFloat(uvec4(_2274, _2275, _2276, texelFetch(g_PointLightRenderingBuffer, int(((_2251 * 48u) + 4u) + 3u)).x)).w;
                        float _2319 = 1.39999997615814208984375 / (_2316 + 1.39999997615814208984375);
                        float _2320 = _2319 * _2319;
                        float _2323 = ((1.0 - _2320) * dot(vec3(0.0), vec3(_2305 * _2299, _2305 * _2300, _2305 * _2301))) + _2320;
                        float _2325 = (-0.0) - _1764;
                        float _2326 = (-0.0) - _1765;
                        float _2327 = (-0.0) - _1766;
                        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
                        float _2335 = dot(vec3(0.0), vec3(_2331 * _2325, _2331 * _2326, _2331 * _2327));
                        float _3065 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
                        float _3076 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
                        float _2339 = isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0));
                        float _2343 = (0.5 / (((isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0))) + 9.9999999392252902907785028219223e-09) + _2339)) * _2339;
                        float _3087 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
                        float _2352 = (((isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0))) * 3.1415927410125732421875) / (((_2316 * _2316) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3054 : (isnan(_3054) ? 1.0 : min(_3054, 1.0)));
                        _2156 = (_2352 * _2295.x) + _2244;
                        _2157 = (_2352 * _2295.y) + _2245;
                        _2158 = (_2352 * _2295.z) + _2246;
                        if (_2248 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2244 = _2156;
                            _2245 = _2157;
                            _2246 = _2158;
                            _2247 = _2248;
                        }
                    }
                    frontier_phi_90_pred = _2158;
                    frontier_phi_90_pred_1 = _2157;
                    frontier_phi_90_pred_2 = _2156;
                }
                _1916 = frontier_phi_90_pred;
                _1914 = frontier_phi_90_pred_1;
                _1912 = frontier_phi_90_pred_2;
                uint _2082 = _2081 + 1u;
                if (_2082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2078 = _1912;
                    _2079 = _1914;
                    _2080 = _1916;
                    _2081 = _2082;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1911 = _1912;
            _1913 = _1914;
            _1915 = _1916;
        }
        uvec4 _1919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1920 = _1919.z;
        uint _1922 = (_1920 >> 8u) & 15u;
        float _2058;
        float _2060;
        float _2062;
        if (((4294967295u << _1922) & _1811) == 0u)
        {
            _2058 = _1911;
            _2060 = _1913;
            _2062 = _1915;
        }
        else
        {
            float _2074 = inversesqrt(dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            if (_1922 < ((_1920 >> 12u) & 15u))
            {
                float _2059;
                float _2061;
                float _2063;
                float _2230 = _1911;
                float _2231 = _1913;
                float _2232 = _1915;
                uint _2233 = _1922;
                uint _2242;
                bool _2243;
                for (;;)
                {
                    _2242 = texelFetch(g_lightClassification, int((((_1804 << 5u) + (_1790 << 9u)) + (_2233 << 2u)) >> 2u)).x;
                    _2243 = _2242 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    if (_2243)
                    {
                        frontier_phi_99_pred = _2232;
                        frontier_phi_99_pred_1 = _2231;
                        frontier_phi_99_pred_2 = _2230;
                    }
                    else
                    {
                        float _2378;
                        float _2379;
                        float _2380;
                        float _2599;
                        float _2600;
                        float _2601;
                        float _2388 = _2230;
                        float _2389 = _2231;
                        float _2390 = _2232;
                        uint _2391 = _2242;
                        uint _2392;
                        uint _2402;
                        vec4 _2417;
                        float _2418;
                        vec3 _2430;
                        vec4 _2445;
                        vec4 _2460;
                        float _2506;
                        bool _2507;
                        for (;;)
                        {
                            _2402 = ((_2233 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2391));
                            _2392 = (_2391 + 4294967295u) & _2391;
                            uint _2404 = _2402 * 40u;
                            _2417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2404 + 3u)).x));
                            _2418 = _2417.w;
                            uint _2420 = (_2402 * 40u) + 8u;
                            _2430 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2420 + 2u)).x));
                            uint _2432 = (_2402 * 40u) + 16u;
                            _2445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2432 + 3u)).x));
                            uint _2447 = (_2402 * 40u) + 20u;
                            _2460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2447 + 3u)).x));
                            uint _2462 = (_2402 * 40u) + 24u;
                            vec4 _2475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2462 + 3u)).x));
                            uint _2481 = (_2402 * 40u) + 28u;
                            vec4 _2494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 3u)).x));
                            _2506 = fma(_1766, _2494.z, fma(_1765, _2494.y, _2494.x * _1764)) + _2494.w;
                            _2507 = !((fma(_1766, _2475.z, fma(_1765, _2475.y, _2475.x * _1764)) + _2475.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            if (_2507)
                            {
                                float _2541 = _2417.x - _1764;
                                float _2542 = _2417.y - _1765;
                                float _2543 = _2417.z - _1766;
                                float _2544 = dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543));
                                float _2547 = inversesqrt(_2544);
                                float _2554 = 1.0 - (_2544 / (_2418 * _2418));
                                float _3098 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
                                float _2556 = sqrt(_2544) * uintBitsToFloat(uvec4(_2510, _2511, _2512, texelFetch(g_SpotLightRenderingBuffer, int(((_2402 * 40u) + 4u) + 3u)).x)).w;
                                float _2558 = 1.39999997615814208984375 / (_2556 + 1.39999997615814208984375);
                                float _2559 = _2558 * _2558;
                                float _2562 = (fma(_1766, _2445.z, fma(_1765, _2445.y, _2445.x * _1764)) + _2445.w) / _2506;
                                float _2563 = (fma(_1766, _2460.z, fma(_1765, _2460.y, _2460.x * _1764)) + _2460.w) / _2506;
                                float _2567 = 1.0 - dot(vec2(_2562, _2563), vec2(_2562, _2563));
                                float _3109 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
                                float _2575 = dot(vec3(0.0), vec3((-0.0) - (_1764 * _2074), (-0.0) - (_1765 * _2074), (-0.0) - (_1766 * _2074)));
                                float _3120 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
                                float _2583 = ((1.0 - _2559) * dot(vec3(0.0), vec3(_2547 * _2541, _2547 * _2542, _2547 * _2543))) + _2559;
                                float _3131 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
                                float _2584 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
                                float _2588 = (0.5 / (((isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0))) + 9.9999999392252902907785028219223e-09) + _2584)) * _2584;
                                float _3142 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
                                float _2595 = ((isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0))) * (isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0)))) * (((isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0))) * 3.1415927410125732421875) / (((_2556 * _2556) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2595 * _2430.z;
                                frontier_phi_105_pred_1 = _2595 * _2430.y;
                                frontier_phi_105_pred_2 = _2595 * _2430.x;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                            }
                            _2601 = frontier_phi_105_pred;
                            _2600 = frontier_phi_105_pred_1;
                            _2599 = frontier_phi_105_pred_2;
                            _2378 = _2599 + _2388;
                            _2379 = _2600 + _2389;
                            _2380 = _2601 + _2390;
                            if (_2392 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2388 = _2378;
                                _2389 = _2379;
                                _2390 = _2380;
                                _2391 = _2392;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2380;
                        frontier_phi_99_pred_1 = _2379;
                        frontier_phi_99_pred_2 = _2378;
                    }
                    _2063 = frontier_phi_99_pred;
                    _2061 = frontier_phi_99_pred_1;
                    _2059 = frontier_phi_99_pred_2;
                    uint _2234 = _2233 + 1u;
                    if (_2234 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2230 = _2059;
                        _2231 = _2061;
                        _2232 = _2063;
                        _2233 = _2234;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2061;
                frontier_phi_81_82_ladder_1 = _2059;
                frontier_phi_81_82_ladder_2 = _2063;
            }
            else
            {
                frontier_phi_81_82_ladder = _1913;
                frontier_phi_81_82_ladder_1 = _1911;
                frontier_phi_81_82_ladder_2 = _1915;
            }
            _2058 = frontier_phi_81_82_ladder_1;
            _2060 = frontier_phi_81_82_ladder;
            _2062 = frontier_phi_81_82_ladder_2;
        }
        float _2067 = isnan(1.0) ? _953 : (isnan(_953) ? 1.0 : min(_953, 1.0));
        _1824 = ((_2058 * 0.039999999105930328369140625) * _2067) + _1706;
        _1826 = ((_2060 * 0.039999999105930328369140625) * _2067) + _1707;
        _1828 = ((_2062 * 0.039999999105930328369140625) * _2067) + _1708;
    }
    else
    {
        _1824 = _1706;
        _1826 = _1707;
        _1828 = _1708;
    }
    uint _1835 = (_1577 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1841 = (cbSceneParam._m0[72u].y * ((_892 * ((_883 - _845) - (_883 * _856))) + _845)) * cbInstanceData._m0[_1835].x;
    float _1842 = (cbSceneParam._m0[72u].y * ((_892 * ((_884 - _846) - (_884 * _856))) + _846)) * cbInstanceData._m0[_1835].y;
    float _1843 = (((_892 * ((_885 - _847) - (_885 * _856))) + _847) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1835].z;
    float _1850 = _1841 + ((_1824 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1342)) * cbPerFrame._m0[3u].x);
    float _1851 = _1842 + ((_1826 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1342)) * cbPerFrame._m0[3u].x);
    float _1852 = _1843 + ((_1828 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1342)) * cbPerFrame._m0[3u].x);
    float _3173 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1865 = isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0));
    uint _1866 = _1577 + 6u;
    float _1874 = _940 / cbSceneParam._m0[86u].x;
    float _1875 = _941 / cbSceneParam._m0[86u].y;
    vec4 _1889 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1874, _1875, (log2((isnan(cbSceneParam._m0[77u].w) ? _927 : (isnan(_927) ? cbSceneParam._m0[77u].w : min(_927, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1891 = _1889.x;
    float _1892 = _1889.y;
    float _1893 = _1889.z;
    float _1894 = _1889.w;
    float _1968;
    float _1970;
    float _1972;
    float _1974;
    if (_927 > cbSceneParam._m0[78u].w)
    {
        float _1930 = isnan(_927) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _927 : min(cbSceneParam._m0[80u].w, _927));
        float _1931 = _1930 / _927;
        float _1942 = _1931 * _278;
        float _1943 = _279 * _1931;
        float _1944 = (-0.0) - _1943;
        float _1945 = _1931 * _280;
        float _1947 = (cbSceneParam._m0[77u].w * _1944) / _1930;
        float _1948 = _1947 + cbSceneParam._m0[79u].w;
        float _1949 = cbSceneParam._m0[79u].w - _1943;
        float _1955 = sqrt(((_1942 * _1942) + (_1943 * _1943)) + (_1945 * _1945));
        float _1958 = (1.0 - (cbSceneParam._m0[77u].w / _1930)) * _1955;
        float _1964 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1966 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2166;
        if (abs((_1944 - _1947) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2166 = ((((_1948 > 0.0) ? exp2(_1964 * _1948) : (2.0 - exp2(_1966 * _1948))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1958;
        }
        else
        {
            float _2104 = 1.0 / cbSceneParam._m0[80u].x;
            float _2105 = isnan(_1949) ? _1948 : (isnan(_1948) ? _1949 : max(_1948, _1949));
            float _2106 = isnan(_1949) ? _1948 : (isnan(_1948) ? _1949 : min(_1948, _1949));
            float _2115 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : min(_2105, 0.0));
            float _2116 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : min(_2106, 0.0));
            _2166 = ((abs(_1955 / _1944) * cbSceneParam._m0[80u].y) * ((((_2115 - _2116) * 2.0) - ((exp2(_1964 * (isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0)))) - exp2(_1964 * (isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))))) * _2104)) - ((exp2(_1966 * _2115) - exp2(_1966 * _2116)) * _2104))) + (_1958 * cbSceneParam._m0[80u].z);
        }
        vec4 _2168 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1874, _1875, 1.0), 0.0);
        float _2177 = exp2((_2166 * (-1.44269502162933349609375)) * (1.0 - _2168.w));
        float _2178 = log2(_2177);
        float _2194 = log2(_1894);
        _1968 = (exp2(_2194 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2178 * cbSceneParam._m0[78u].x)) * _2168.x) / cbSceneParam._m0[78u].x)) + _1891;
        _1970 = (exp2(_2194 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2178 * cbSceneParam._m0[78u].y)) * _2168.y) / cbSceneParam._m0[78u].y)) + _1892;
        _1972 = (exp2(_2194 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2178 * cbSceneParam._m0[78u].z)) * _2168.z) / cbSceneParam._m0[78u].z)) + _1893;
        _1974 = _2177 * _1894;
    }
    else
    {
        _1968 = _1891;
        _1970 = _1892;
        _1972 = _1893;
        _1974 = _1894;
    }
    float _1985 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1986 = _1985 == 3.0;
    float _1988 = log2(_1974);
    float _1992 = exp2(_1988 * cbSceneParam._m0[78u].x);
    float _1993 = exp2(_1988 * cbSceneParam._m0[78u].y);
    float _1994 = exp2(_1988 * cbSceneParam._m0[78u].z);
    float _1995 = _1992 * (isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)));
    float _1996 = _1993 * (isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)));
    float _1997 = _1994 * (isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)));
    float _2006 = (_1985 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2006 * (_1986 ? _1995 : (_1995 + (cbSceneParam._m0[72u].w * _1968)));
    SV_Target.y = _2006 * (_1986 ? _1996 : (_1996 + (cbSceneParam._m0[72u].w * _1970)));
    SV_Target.z = _2006 * (_1986 ? _1997 : (_1997 + (cbSceneParam._m0[72u].w * _1972)));
    SV_Target.w = cbInstanceData._m0[_1866].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1841) * _1865) * _1992) * _2006;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1842) * _1865) * _1993) * _2006;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1843) * _1865) * _1994) * _2006;
    SV_Target_1.w = cbInstanceData._m0[_1866].w;
}


