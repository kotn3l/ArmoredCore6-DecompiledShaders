#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _396;
uint _2425;
uint _2426;
uint _2427;
uint _2649;
uint _2650;
uint _2651;
float _2899;
float _2900;
float _2901;
float _2902;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _208 = _207 * _199;
    float _209 = _207 * _200;
    float _210 = _207 * _201;
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _305 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _321 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _328 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _340 = cbMtdParam._m0[28u].z + _275;
    float _341 = cbMtdParam._m0[28u].w + _276;
    float _342 = cbMtdParam._m0[29u].x + _277;
    float _359 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_321 * _208, _321 * _209, _321 * _210));
    float _360 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_328 * _219, _328 * _220, _328 * _221));
    float _361 = (-0.0) - dot(vec3(_340, _341, _342), vec3((-0.0) - (NORMAL.x * _214), (-0.0) - (NORMAL.y * _214), (-0.0) - (NORMAL.z * _214)));
    float _365 = inversesqrt(dot(vec3(_359, _360, _361), vec3(_359, _360, _361)));
    float _366 = _365 * _361;
    float _371 = ((cbMtdParam._m0[25u].y * _359) * _365) + (((_305.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _372 = ((cbMtdParam._m0[25u].z * _360) * _365) + (((_305.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _375 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _376 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _394;
    float _397;
    float _399;
    if (_371 > 0.0)
    {
        float _380 = (1.0 - _375) / _371;
        _394 = _380;
        _397 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_380 * _366)) * 0.16666667163372039794921875;
        _399 = (fract((_380 * _372) + _376) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_371 < 0.0)
        {
            float _395 = ((-0.0) - _375) / _371;
            frontier_phi_3_2_ladder = _395;
            frontier_phi_3_2_ladder_1 = (fract((_395 * _372) + _376) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_395 * _366) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _396;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _394 = frontier_phi_3_2_ladder;
        _397 = frontier_phi_3_2_ladder_2;
        _399 = frontier_phi_3_2_ladder_1;
    }
    float _425;
    float _427;
    float _429;
    if (_372 > 0.0)
    {
        float _412 = (1.0 - _376) / _372;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_412 < _394)
        {
            frontier_phi_8_5_ladder = (fract(_412 * _366) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_412 * _371) + _375) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _412;
        }
        else
        {
            frontier_phi_8_5_ladder = _399;
            frontier_phi_8_5_ladder_1 = _397;
            frontier_phi_8_5_ladder_2 = _394;
        }
        _425 = frontier_phi_8_5_ladder_2;
        _427 = frontier_phi_8_5_ladder_1;
        _429 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_372 < 0.0)
        {
            float _426 = ((-0.0) - _376) / _372;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_426 < _394)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_426 * _366) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_426 * _371) + _375) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _426;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _399;
                frontier_phi_8_6_ladder_9_ladder_1 = _397;
                frontier_phi_8_6_ladder_9_ladder_2 = _394;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _399;
            frontier_phi_8_6_ladder_1 = _397;
            frontier_phi_8_6_ladder_2 = _394;
        }
        _425 = frontier_phi_8_6_ladder_2;
        _427 = frontier_phi_8_6_ladder_1;
        _429 = frontier_phi_8_6_ladder;
    }
    float _433 = (_366 > 0.0) ? (cbMtdParam._m0[20u].z / _366) : 5000.0;
    float _446;
    float _447;
    if (_433 < _425)
    {
        _446 = ((_375 + cbMtdParam._m0[22u].x) + (_433 * _371)) * 0.16666667163372039794921875;
        _447 = (((_433 * _372) + _376) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _446 = _427;
        _447 = _429;
    }
    vec4 _449 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_446, _447));
    float _451 = _449.x;
    float _452 = _449.y;
    float _453 = _449.z;
    float _465 = (cbMtdParam._m0[19u].y * _451) * cbMtdParam._m0[16u].x;
    float _467 = (cbMtdParam._m0[19u].y * _452) * cbMtdParam._m0[16u].y;
    float _469 = (cbMtdParam._m0[19u].y * _453) * cbMtdParam._m0[16u].z;
    vec4 _496 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _501 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _507 = ((_496.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _509 = (-0.0) - (cbMtdParam._m0[21u].x * ((_496.x * 0.5) + (-0.25)));
    float _510 = fract(_501);
    float _512 = fract(_501 + 0.5);
    vec4 _539 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_510 * _509) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_507 * _510) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _541 = _539.x;
    float _547 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_512 * _509) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_507 * _512) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _541) * abs((_510 * 2.0) + (-1.0))) + _541;
    float _558 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _562 = fract(abs(_558));
    float _569 = sin(cbMtdParam._m0[21u].z);
    float _570 = cos(cbMtdParam._m0[21u].z);
    float _571 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _572 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _597 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_572, (-0.0) - _569, _570 * _571) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_572, _570, _571 * _569) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_558 >= ((-0.0) - _558)) ? _562 : ((-0.0) - _562)) * cbMtdParam._m0[18u].z) - _547)) + cbMtdParam._m0[18u].w;
    float _598 = ceil(_597);
    float _2911 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _2911 : (isnan(_2911) ? 1.0 : min(_2911, 1.0));
    float _619 = ((((cbMtdParam._m0[21u].w * _451) * cbMtdParam._m0[15u].x) - _465) * _599) + _465;
    float _620 = ((((cbMtdParam._m0[21u].w * _452) * cbMtdParam._m0[15u].y) - _467) * _599) + _467;
    float _621 = ((((cbMtdParam._m0[21u].w * _453) * cbMtdParam._m0[15u].z) - _469) * _599) + _469;
    float _625 = abs(cbMtdParam._m0[20u].w * _597);
    float _629 = (((_625 * cbMtdParam._m0[18u].y) - _547) * _625) + _547;
    float _2922 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _2922 : (isnan(_2922) ? 1.0 : min(_2922, 1.0));
    vec4 _642 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _657 = (cbMtdParam._m0[14u].x * _642.x) * cbMtdParam._m0[19u].x;
    float _658 = (cbMtdParam._m0[14u].y * _642.y) * cbMtdParam._m0[19u].x;
    float _659 = (cbMtdParam._m0[14u].z * _642.z) * cbMtdParam._m0[19u].x;
    float _666 = exp2(log2(_630) * cbMtdParam._m0[20u].x);
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _705 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _706 = _275 * _705;
    float _707 = _276 * _705;
    float _708 = _277 * _705;
    vec4 _713 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _715 = _713.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _790 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
        float _796 = (cbMatDynParam._m0[5u].x * _790) + cbMatDynParam._m0[5u].y;
        float _2933 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _2933 : (isnan(_2933) ? 1.0 : min(_2933, 1.0));
        float _801 = (cbMatDynParam._m0[5u].z * _790) + cbMatDynParam._m0[5u].w;
        float _2944 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0))) - _797)) + _797) < ((_715 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _733 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _734 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _743 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_733 * cbSceneParam._m0[86u].x, _734 * cbSceneParam._m0[86u].y));
    float _746 = _743.x * TEXCOORD_4;
    float _747 = (-0.0) - _706;
    float _748 = (-0.0) - _707;
    float _749 = (-0.0) - _708;
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _864 = (cbModelParam._m0[37u].x * ((((fma(_779, cbModelParam._m0[26u].z, fma(_775, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _866 = (cbModelParam._m0[37u].y * ((((fma(_779, cbModelParam._m0[27u].z, fma(_775, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _867 = (((((fma(_779, cbModelParam._m0[28u].z, fma(_775, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_864, _866, _867), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_864, _866, _867), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_864, _866, _867), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_864, _866, _867), 0.0);
        float _904 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _914 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _924 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _934 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_891.x + (-0.5));
        float _936 = _934 * (_891.y + (-0.5));
        float _937 = _934 * (_891.z + (-0.5));
        _941 = _904 * (_870.z + (-0.5));
        _942 = _904 * (_870.y + (-0.5));
        _943 = _904 * (_870.x + (-0.5));
        _944 = _914 * (_877.z + (-0.5));
        _945 = _914 * (_877.y + (-0.5));
        _946 = _914 * (_877.x + (-0.5));
        _947 = _924 * (_884.z + (-0.5));
        _948 = _924 * (_884.y + (-0.5));
        _949 = _924 * (_884.x + (-0.5));
        _950 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        _951 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        _952 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    }
    else
    {
        _941 = _396;
        _942 = _396;
        _943 = _396;
        _944 = _396;
        _945 = _396;
        _946 = _396;
        _947 = _396;
        _948 = _396;
        _949 = _396;
        _950 = _396;
        _951 = _396;
        _952 = _396;
    }
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1008 = (cbModelParam._m0[38u].x * ((((fma(_779, cbModelParam._m0[30u].z, fma(_775, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _771)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1009 = (cbModelParam._m0[38u].y * ((((fma(_779, cbModelParam._m0[31u].z, fma(_775, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _771)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1010 = (((((fma(_779, cbModelParam._m0[32u].z, fma(_775, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _771)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        float _1045 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1033.x + (-0.5));
        float _1077 = _1075 * (_1033.y + (-0.5));
        float _1078 = _1075 * (_1033.z + (-0.5));
        _1082 = _1045 * (_1012.z + (-0.5));
        _1083 = _1045 * (_1012.y + (-0.5));
        _1084 = _1045 * (_1012.x + (-0.5));
        _1085 = _1055 * (_1019.z + (-0.5));
        _1086 = _1055 * (_1019.y + (-0.5));
        _1087 = _1055 * (_1019.x + (-0.5));
        _1088 = _1065 * (_1026.z + (-0.5));
        _1089 = _1065 * (_1026.y + (-0.5));
        _1090 = _1065 * (_1026.x + (-0.5));
        _1091 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        _1092 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        _1093 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    }
    else
    {
        _1082 = _396;
        _1083 = _396;
        _1084 = _396;
        _1085 = _396;
        _1086 = _396;
        _1087 = _396;
        _1088 = _396;
        _1089 = _396;
        _1090 = _396;
        _1091 = _396;
        _1092 = _396;
        _1093 = _396;
    }
    float _1108 = _706 * (-0.5);
    float _1109 = _707 * (-0.5);
    float _1110 = _708 * (-0.5);
    float _1111 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_1084, _1087, _1090, _1093));
    float _1114 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_1083, _1086, _1089, _1092));
    float _1117 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_1082, _1085, _1088, _1091));
    float _1152;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1124 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_941, _944, _947, _950));
        float _1128 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_942, _945, _948, _951));
        float _1132 = dot(vec4(_1108, _1109, _1110, 1.0), vec4(_943, _946, _949, _952));
        float _1139 = dot(vec4(cbModelParam._m0[39u]), vec4(_1108, _1109, _1110, 1.0));
        _1152 = dot(vec3(isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)), isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)), isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1139) ? 0.0 : (isnan(0.0) ? _1139 : max(0.0, _1139))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1152 = 1.0;
    }
    float _1163;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1154 = dot(vec4(cbModelParam._m0[40u]), vec4(_1108, _1109, _1110, 1.0));
        _1163 = dot(vec3(isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)), isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1154) ? 0.0 : (isnan(0.0) ? _1154 : max(0.0, _1154))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1163 = 1.0;
    }
    float _1167 = (_1163 * cbModelParam._m0[1u].x) + (_1152 * (1.0 - cbModelParam._m0[1u].x));
    float _1173 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1255;
    float _1257;
    float _1259;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1222 = fma(_779, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _771)) + cbModelParam._m0[13u].w;
        float _1226 = fma(_779, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _771)) + cbModelParam._m0[14u].w;
        float _1230 = fma(_779, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _771)) + cbModelParam._m0[15u].w;
        float _1233 = fma(_749, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747));
        float _1236 = fma(_749, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747));
        float _1239 = fma(_749, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747));
        float _1265;
        if (_1233 > 0.0)
        {
            _1265 = abs((1.0 - _1222) / _1233);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1233 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1222 + 1.0) / _1233);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1265 = frontier_phi_29_27_ladder;
        }
        float _1453;
        if (_1236 > 0.0)
        {
            _1453 = abs((1.0 - _1226) / _1236);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1236 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1226 + 1.0) / _1236);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1453 = frontier_phi_38_34_ladder;
        }
        float _1807;
        if (_1239 > 0.0)
        {
            _1807 = abs((1.0 - _1230) / _1239);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1239 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1230 + 1.0) / _1239);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1807 = frontier_phi_50_45_ladder;
        }
        float _1809 = isnan(_1453) ? _1265 : (isnan(_1265) ? _1453 : min(_1265, _1453));
        float _1810 = isnan(_1807) ? _1809 : (isnan(_1809) ? _1807 : min(_1809, _1807));
        float _1814 = (_1810 * _1233) + _1222;
        float _1815 = (_1810 * _1236) + _1226;
        float _1816 = (_1810 * _1239) + _1230;
        float _1817 = _1810 * 9.9999997473787516355514526367188e-05;
        float _1819 = (-1.0) - _1817;
        float _1821 = _1817 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_1816 > _1821) || ((_1816 < _1819) || ((_1815 > _1821) || ((_1815 < _1819) || ((_1814 < _1819) || (_1814 > _1821))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2059 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1816, cbModelParam._m0[9u].z, fma(_1815, cbModelParam._m0[9u].y, _1814 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1816, cbModelParam._m0[10u].z, fma(_1815, cbModelParam._m0[10u].y, _1814 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1816, cbModelParam._m0[11u].z, fma(_1815, cbModelParam._m0[11u].y, _1814 * cbModelParam._m0[11u].x))), _1173);
            frontier_phi_28_50_ladder = _2059.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2059.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2059.x * cbModelParam._m0[1u].y;
        }
        _1255 = frontier_phi_28_50_ladder_2;
        _1257 = frontier_phi_28_50_ladder_1;
        _1259 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_747, _748, _749), _1173);
        _1255 = _1243.x * cbModelParam._m0[1u].y;
        _1257 = _1243.y * cbModelParam._m0[1u].y;
        _1259 = _1243.z * cbModelParam._m0[1u].y;
    }
    float _1262 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1350;
    float _1352;
    float _1354;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1314 = fma(_779, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _771)) + cbModelParam._m0[21u].w;
        float _1318 = fma(_779, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _771)) + cbModelParam._m0[22u].w;
        float _1322 = fma(_779, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _771)) + cbModelParam._m0[23u].w;
        float _1325 = fma(_749, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747));
        float _1328 = fma(_749, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747));
        float _1331 = fma(_749, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747));
        float _1458;
        if (_1325 > 0.0)
        {
            _1458 = abs((1.0 - _1314) / _1325);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1325 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1314 + 1.0) / _1325);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1458 = frontier_phi_40_36_ladder;
        }
        float _1834;
        if (_1328 > 0.0)
        {
            _1834 = abs((1.0 - _1318) / _1328);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1318 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _1834 = frontier_phi_52_47_ladder;
        }
        float _2192;
        if (_1331 > 0.0)
        {
            _2192 = abs((1.0 - _1322) / _1331);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1322 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2192 = frontier_phi_64_59_ladder;
        }
        float _2194 = isnan(_1834) ? _1458 : (isnan(_1458) ? _1834 : min(_1458, _1834));
        float _2195 = isnan(_2192) ? _2194 : (isnan(_2194) ? _2192 : min(_2194, _2192));
        float _2199 = (_2195 * _1325) + _1314;
        float _2200 = (_2195 * _1328) + _1318;
        float _2201 = (_2195 * _1331) + _1322;
        float _2202 = _2195 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2202;
        float _2205 = _2202 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2201 > _2205) || ((_2201 < _2203) || ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 < _2203) || (_2199 > _2205))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2323 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2201, cbModelParam._m0[17u].z, fma(_2200, cbModelParam._m0[17u].y, _2199 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2201, cbModelParam._m0[18u].z, fma(_2200, cbModelParam._m0[18u].y, _2199 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2201, cbModelParam._m0[19u].z, fma(_2200, cbModelParam._m0[19u].y, _2199 * cbModelParam._m0[19u].x))), _1262);
            frontier_phi_37_64_ladder = _2323.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2323.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2323.x * cbModelParam._m0[1u].z;
        }
        _1350 = frontier_phi_37_64_ladder_2;
        _1352 = frontier_phi_37_64_ladder_1;
        _1354 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1334 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_747, _748, _749), _1262);
        _1350 = _1334.x * cbModelParam._m0[1u].z;
        _1352 = _1334.y * cbModelParam._m0[1u].z;
        _1354 = _1334.z * cbModelParam._m0[1u].z;
    }
    float _1366 = _746 * 0.01200000010430812835693359375;
    float _1368 = _1366 * ((cbModelParam._m0[1u].w * (_1350 - _1255)) + _1255);
    float _1369 = _1366 * ((cbModelParam._m0[1u].w * (_1352 - _1257)) + _1257);
    float _1370 = _1366 * ((cbModelParam._m0[1u].w * (_1354 - _1259)) + _1259);
    float _1391 = fma(_1370, cbSceneParam._m0[89u].z, fma(_1369, cbSceneParam._m0[89u].y, _1368 * cbSceneParam._m0[89u].x));
    float _1394 = fma(_1370, cbSceneParam._m0[90u].z, fma(_1369, cbSceneParam._m0[90u].y, _1368 * cbSceneParam._m0[90u].x));
    float _1397 = fma(_1370, cbSceneParam._m0[91u].z, fma(_1369, cbSceneParam._m0[91u].y, _1368 * cbSceneParam._m0[91u].x));
    float _1432 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1436 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1440 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1444 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1445 = _1432 / _1444;
    float _1446 = _1436 / _1444;
    float _1447 = _1440 / _1444;
    float _1595;
    float _1596;
    float _1597;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1474 = ((uint(_1447 > cbSceneParam._m0[59u].y) + uint(_1447 > cbSceneParam._m0[59u].x)) + uint(_1447 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1475 = _1474 + 43u;
        uint _1483 = _1474 + 44u;
        uint _1491 = _1474 + 45u;
        uint _1499 = _1474 + 46u;
        float _1510 = fma(_1444, cbSceneParam._m0[_1475].w, fma(_1440, cbSceneParam._m0[_1475].z, fma(_1436, cbSceneParam._m0[_1475].y, _1432 * cbSceneParam._m0[_1475].x)));
        float _1514 = fma(_1444, cbSceneParam._m0[_1483].w, fma(_1440, cbSceneParam._m0[_1483].z, fma(_1436, cbSceneParam._m0[_1483].y, _1432 * cbSceneParam._m0[_1483].x)));
        float _1522 = fma(_1444, cbSceneParam._m0[_1499].w, fma(_1440, cbSceneParam._m0[_1499].z, fma(_1436, cbSceneParam._m0[_1499].y, _1432 * cbSceneParam._m0[_1499].x)));
        float _1527 = cbSceneParam._m0[33u].z * _1522;
        float _1529 = cbSceneParam._m0[33u].w * _1522;
        float _1532 = fma(_1444, cbSceneParam._m0[_1491].w, fma(_1440, cbSceneParam._m0[_1491].z, fma(_1436, cbSceneParam._m0[_1491].y, _1432 * cbSceneParam._m0[_1491].x))) / _1522;
        float _1580 = (cbSceneParam._m0[33u].x - sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447))) * cbSceneParam._m0[33u].y;
        float _3070 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1588 = (isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1527 + _1510) / _1522, (_1529 + _1514) / _1522), _1532), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1529 + _1510) / _1522, (_1514 - _1527) / _1522), _1532), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1510 - _1527) / _1522, (_1514 - _1529) / _1522), _1532), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1510 - _1529) / _1522, (_1527 + _1514) / _1522), _1532), 0.0)).x), vec4(0.25)));
        _1595 = 1.0 - (_1588 * cbSceneParam._m0[34u].x);
        _1596 = 1.0 - (_1588 * cbSceneParam._m0[34u].y);
        _1597 = 1.0 - (_1588 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1595 = 1.0;
        _1596 = 1.0;
        _1597 = 1.0;
    }
    float _1661;
    float _1663;
    float _1665;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1649 = fma(_1444, cbSceneParam._m0[63u].w, fma(_1440, cbSceneParam._m0[63u].z, fma(_1436, cbSceneParam._m0[63u].y, _1432 * cbSceneParam._m0[63u].x)));
        float _1650 = fma(_1444, cbSceneParam._m0[60u].w, fma(_1440, cbSceneParam._m0[60u].z, fma(_1436, cbSceneParam._m0[60u].y, _1432 * cbSceneParam._m0[60u].x))) / _1649;
        float _1651 = fma(_1444, cbSceneParam._m0[61u].w, fma(_1440, cbSceneParam._m0[61u].z, fma(_1436, cbSceneParam._m0[61u].y, _1432 * cbSceneParam._m0[61u].x))) / _1649;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1650 >= cbSceneParam._m0[64u].x) && (_1651 >= cbSceneParam._m0[64u].y)) && (_1650 <= cbSceneParam._m0[64u].z)) && (_1651 <= cbSceneParam._m0[64u].w))
        {
            float _1847 = fma(_1444, cbSceneParam._m0[62u].w, fma(_1440, cbSceneParam._m0[62u].z, fma(_1436, cbSceneParam._m0[62u].y, _1432 * cbSceneParam._m0[62u].x))) / _1649;
            float _1851 = isnan(cbSceneParam._m0[41u].w) ? _1847 : (isnan(_1847) ? cbSceneParam._m0[41u].w : max(_1847, cbSceneParam._m0[41u].w));
            float _1894 = (cbSceneParam._m0[33u].x - sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447))) * cbSceneParam._m0[33u].y;
            float _3086 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
            float _1901 = (isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1650, cbSceneParam._m0[33u].w + _1651), _1851), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1650, _1651 - cbSceneParam._m0[33u].z), _1851), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1650 - cbSceneParam._m0[33u].z, _1651 - cbSceneParam._m0[33u].w), _1851), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1650 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1651), _1851), 0.0)).x), vec4(0.25)));
            float _1905 = 1.0 - (_1901 * cbSceneParam._m0[34u].x);
            float _1906 = 1.0 - (_1901 * cbSceneParam._m0[34u].y);
            float _1907 = 1.0 - (_1901 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_1905) ? _1595 : (isnan(_1595) ? _1905 : min(_1595, _1905));
            frontier_phi_49_48_ladder_1 = isnan(_1906) ? _1596 : (isnan(_1596) ? _1906 : min(_1596, _1906));
            frontier_phi_49_48_ladder_2 = isnan(_1907) ? _1597 : (isnan(_1597) ? _1907 : min(_1597, _1907));
        }
        else
        {
            frontier_phi_49_48_ladder = _1595;
            frontier_phi_49_48_ladder_1 = _1596;
            frontier_phi_49_48_ladder_2 = _1597;
        }
        _1661 = frontier_phi_49_48_ladder;
        _1663 = frontier_phi_49_48_ladder_1;
        _1665 = frontier_phi_49_48_ladder_2;
    }
    else
    {
        _1661 = _1595;
        _1663 = _1596;
        _1665 = _1597;
    }
    uint _1667 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1671 = floatBitsToUint(cbInstanceData._m0[_1667 + 5u]);
    uint _1673 = _1671.x * 14u;
    uint _1674 = _1673 + 13u;
    float _1679 = _746 + (-1.0);
    float _1682 = (cbLight._m0[_1674].x * _1679) + 1.0;
    float _1683 = (cbLight._m0[_1674].y * _1679) + 1.0;
    uint _1684 = _1673 + 8u;
    float _1695 = cbLight._m0[_1673].x + _706;
    float _1696 = cbLight._m0[_1673].y + _707;
    float _1697 = cbLight._m0[_1673].z + _708;
    float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
    float _1705 = dot(vec3(0.0), vec3(cbLight._m0[_1673].xyz));
    float _3112 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0));
    float _1709 = dot(vec3(0.0), vec3(_706, _707, _708));
    float _3123 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1712 = isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0));
    float _1713 = dot(vec3(cbLight._m0[_1673].xyz), vec3(_1695 * _1701, _1696 * _1701, _1697 * _1701));
    float _3134 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1724 = (exp2(log2(1.0 - (isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1730 = (0.5 / ((_1708 + 9.9999999392252902907785028219223e-09) + _1712)) * _1708;
    float _3145 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1732 = (isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0))) * 0.31831014156341552734375;
    float _1734 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
    uint _1747 = _1673 + 9u;
    uint _1753 = _1673 | 1u;
    float _1759 = cbLight._m0[_1753].x + _706;
    float _1760 = cbLight._m0[_1753].y + _707;
    float _1761 = cbLight._m0[_1753].z + _708;
    float _1765 = inversesqrt(dot(vec3(_1759, _1760, _1761), vec3(_1759, _1760, _1761)));
    float _1769 = dot(vec3(0.0), vec3(cbLight._m0[_1753].xyz));
    float _3161 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_1759 * _1765, _1760 * _1765, _1761 * _1765));
    float _3172 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1782 = (exp2(log2(1.0 - (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1786 = (0.5 / ((_1772 + 9.9999999392252902907785028219223e-09) + _1712)) * _1772;
    float _3183 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1788 = (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))) * 0.31831014156341552734375;
    float _1789 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
    float _1799 = (((_1782 * cbLight._m0[_1747].x) * _1788) * _1789) + ((((cbLight._m0[_1684].x * _1661) * _1724) * _1732) * _1734);
    float _1800 = (((_1782 * cbLight._m0[_1747].y) * _1788) * _1789) + ((((cbLight._m0[_1684].y * _1663) * _1724) * _1732) * _1734);
    float _1801 = (((_1782 * cbLight._m0[_1747].z) * _1788) * _1789) + ((((cbLight._m0[_1684].z * _1665) * _1724) * _1732) * _1734);
    float _1964;
    float _1966;
    float _1968;
    if (_1671.y == 0u)
    {
        uvec4 _1919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1920 = _1919.x;
        uint _1931 = uint((float(_1919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _734) / _1920))) + floor(float(uint(cbSceneParam._m0[85u].x * _733) / _1920)));
        float _1941 = (log2(_1447 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1942 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        uint _1945 = uint(isnan(14.0) ? _1942 : (isnan(_1942) ? 14.0 : min(_1942, 14.0)));
        uvec4 _1950 = texelFetch(g_lightClusterGridBuffer, int(((_1945 << 2u) + (_1931 << 6u)) >> 2u));
        uint _1951 = _1950.x;
        uint _1952 = _1919.z;
        float _2068;
        float _2070;
        float _2072;
        if (((((1u << ((_1952 >> 4u) & 15u)) + 4294967295u) & _1951) == 0u) || ((_1952 & 240u) == 0u))
        {
            _2068 = 0.0;
            _2070 = 0.0;
            _2072 = 0.0;
        }
        else
        {
            float _2069;
            float _2071;
            float _2073;
            float _2238 = 0.0;
            float _2239 = 0.0;
            float _2240 = 0.0;
            uint _2241 = 0u;
            uint _2250;
            bool _2251;
            for (;;)
            {
                _2250 = texelFetch(g_lightClassification, int((((_1945 << 5u) + (_1931 << 9u)) + (_2241 << 2u)) >> 2u)).x;
                _2251 = _2250 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                if (_2251)
                {
                    frontier_phi_75_pred = _2240;
                    frontier_phi_75_pred_1 = _2239;
                    frontier_phi_75_pred_2 = _2238;
                }
                else
                {
                    float _2395;
                    float _2396;
                    float _2397;
                    uint _2398;
                    _2395 = _2238;
                    _2396 = _2239;
                    _2397 = _2240;
                    _2398 = _2250;
                    float _2328;
                    float _2329;
                    float _2330;
                    for (;;)
                    {
                        uint _2402 = uint(findLSB(_2398)) + (_2241 << 5u);
                        uint _2399 = (_2398 + 4294967295u) & _2398;
                        uint _2404 = _2402 * 48u;
                        vec4 _2418 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2404)).x, texelFetch(g_PointLightRenderingBuffer, int(_2404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2404 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2404 + 3u)).x));
                        uint _2435 = (_2402 * 48u) + 8u;
                        vec3 _2446 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2435)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 2u)).x));
                        float _2450 = _2418.x - _1445;
                        float _2451 = _2418.y - _1446;
                        float _2452 = _2418.z - _1447;
                        float _2453 = dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452));
                        float _2456 = inversesqrt(_2453);
                        float _2465 = 1.0 - (_2453 * _2418.w);
                        float _3209 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
                        float _2467 = sqrt(_2453) * uintBitsToFloat(uvec4(_2425, _2426, _2427, texelFetch(g_PointLightRenderingBuffer, int(((_2402 * 48u) + 4u) + 3u)).x)).w;
                        float _2470 = 1.39999997615814208984375 / (_2467 + 1.39999997615814208984375);
                        float _2471 = _2470 * _2470;
                        float _2474 = ((1.0 - _2471) * dot(vec3(0.0), vec3(_2456 * _2450, _2456 * _2451, _2456 * _2452))) + _2471;
                        float _2476 = (-0.0) - _1445;
                        float _2477 = (-0.0) - _1446;
                        float _2478 = (-0.0) - _1447;
                        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
                        float _2486 = dot(vec3(0.0), vec3(_2482 * _2476, _2482 * _2477, _2482 * _2478));
                        float _3220 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
                        float _3231 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
                        float _2490 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
                        float _2494 = (0.5 / (((isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0))) + 9.9999999392252902907785028219223e-09) + _2490)) * _2490;
                        float _3242 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
                        float _2503 = (((isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0))) * 3.1415927410125732421875) / (((_2467 * _2467) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0)));
                        _2328 = (_2503 * _2446.x) + _2395;
                        _2329 = (_2503 * _2446.y) + _2396;
                        _2330 = (_2503 * _2446.z) + _2397;
                        if (_2399 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2395 = _2328;
                            _2396 = _2329;
                            _2397 = _2330;
                            _2398 = _2399;
                        }
                    }
                    frontier_phi_75_pred = _2330;
                    frontier_phi_75_pred_1 = _2329;
                    frontier_phi_75_pred_2 = _2328;
                }
                _2073 = frontier_phi_75_pred;
                _2071 = frontier_phi_75_pred_1;
                _2069 = frontier_phi_75_pred_2;
                uint _2242 = _2241 + 1u;
                if (_2242 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2238 = _2069;
                    _2239 = _2071;
                    _2240 = _2073;
                    _2241 = _2242;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2068 = _2069;
            _2070 = _2071;
            _2072 = _2073;
        }
        uvec4 _2076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2077 = _2076.z;
        uint _2079 = (_2077 >> 8u) & 15u;
        float _2218;
        float _2220;
        float _2222;
        if (((4294967295u << _2079) & _1951) == 0u)
        {
            _2218 = _2068;
            _2220 = _2070;
            _2222 = _2072;
        }
        else
        {
            float _2234 = inversesqrt(dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447)));
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            if (_2079 < ((_2077 >> 12u) & 15u))
            {
                float _2219;
                float _2221;
                float _2223;
                float _2381 = _2068;
                float _2382 = _2070;
                float _2383 = _2072;
                uint _2384 = _2079;
                uint _2393;
                bool _2394;
                for (;;)
                {
                    _2393 = texelFetch(g_lightClassification, int((((_1945 << 5u) + (_1931 << 9u)) + (_2384 << 2u)) >> 2u)).x;
                    _2394 = _2393 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    if (_2394)
                    {
                        frontier_phi_86_pred = _2383;
                        frontier_phi_86_pred_1 = _2382;
                        frontier_phi_86_pred_2 = _2381;
                    }
                    else
                    {
                        float _2517;
                        float _2518;
                        float _2519;
                        float _2738;
                        float _2739;
                        float _2740;
                        float _2527 = _2381;
                        float _2528 = _2382;
                        float _2529 = _2383;
                        uint _2530 = _2393;
                        uint _2531;
                        uint _2541;
                        vec4 _2556;
                        float _2557;
                        vec3 _2569;
                        vec4 _2584;
                        vec4 _2599;
                        float _2645;
                        bool _2646;
                        for (;;)
                        {
                            _2541 = ((_2384 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2530));
                            _2531 = (_2530 + 4294967295u) & _2530;
                            uint _2543 = _2541 * 40u;
                            _2556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 3u)).x));
                            _2557 = _2556.w;
                            uint _2559 = (_2541 * 40u) + 8u;
                            _2569 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 2u)).x));
                            uint _2571 = (_2541 * 40u) + 16u;
                            _2584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 3u)).x));
                            uint _2586 = (_2541 * 40u) + 20u;
                            _2599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 3u)).x));
                            uint _2601 = (_2541 * 40u) + 24u;
                            vec4 _2614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 3u)).x));
                            uint _2620 = (_2541 * 40u) + 28u;
                            vec4 _2633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 3u)).x));
                            _2645 = fma(_1447, _2633.z, fma(_1446, _2633.y, _2633.x * _1445)) + _2633.w;
                            _2646 = !((fma(_1447, _2614.z, fma(_1446, _2614.y, _2614.x * _1445)) + _2614.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            if (_2646)
                            {
                                float _2680 = _2556.x - _1445;
                                float _2681 = _2556.y - _1446;
                                float _2682 = _2556.z - _1447;
                                float _2683 = dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682));
                                float _2686 = inversesqrt(_2683);
                                float _2693 = 1.0 - (_2683 / (_2557 * _2557));
                                float _3253 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                                float _2695 = sqrt(_2683) * uintBitsToFloat(uvec4(_2649, _2650, _2651, texelFetch(g_SpotLightRenderingBuffer, int(((_2541 * 40u) + 4u) + 3u)).x)).w;
                                float _2697 = 1.39999997615814208984375 / (_2695 + 1.39999997615814208984375);
                                float _2698 = _2697 * _2697;
                                float _2701 = (fma(_1447, _2584.z, fma(_1446, _2584.y, _2584.x * _1445)) + _2584.w) / _2645;
                                float _2702 = (fma(_1447, _2599.z, fma(_1446, _2599.y, _2599.x * _1445)) + _2599.w) / _2645;
                                float _2706 = 1.0 - dot(vec2(_2701, _2702), vec2(_2701, _2702));
                                float _3264 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                                float _2714 = dot(vec3(0.0), vec3((-0.0) - (_1445 * _2234), (-0.0) - (_1446 * _2234), (-0.0) - (_1447 * _2234)));
                                float _3275 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                                float _2722 = ((1.0 - _2698) * dot(vec3(0.0), vec3(_2686 * _2680, _2686 * _2681, _2686 * _2682))) + _2698;
                                float _3286 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                                float _2723 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
                                float _2727 = (0.5 / (((isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0))) + 9.9999999392252902907785028219223e-09) + _2723)) * _2723;
                                float _3297 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                                float _2734 = ((isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * (((isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * 3.1415927410125732421875) / (((_2695 * _2695) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_92_pred = _2734 * _2569.x;
                                frontier_phi_92_pred_1 = _2734 * _2569.z;
                                frontier_phi_92_pred_2 = _2734 * _2569.y;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                            }
                            _2738 = frontier_phi_92_pred;
                            _2740 = frontier_phi_92_pred_1;
                            _2739 = frontier_phi_92_pred_2;
                            _2517 = _2738 + _2527;
                            _2518 = _2739 + _2528;
                            _2519 = _2740 + _2529;
                            if (_2531 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2527 = _2517;
                                _2528 = _2518;
                                _2529 = _2519;
                                _2530 = _2531;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _2519;
                        frontier_phi_86_pred_1 = _2518;
                        frontier_phi_86_pred_2 = _2517;
                    }
                    _2223 = frontier_phi_86_pred;
                    _2221 = frontier_phi_86_pred_1;
                    _2219 = frontier_phi_86_pred_2;
                    uint _2385 = _2384 + 1u;
                    if (_2385 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2381 = _2219;
                        _2382 = _2221;
                        _2383 = _2223;
                        _2384 = _2385;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2223;
                frontier_phi_66_67_ladder_1 = _2219;
                frontier_phi_66_67_ladder_2 = _2221;
            }
            else
            {
                frontier_phi_66_67_ladder = _2072;
                frontier_phi_66_67_ladder_1 = _2068;
                frontier_phi_66_67_ladder_2 = _2070;
            }
            _2218 = frontier_phi_66_67_ladder_1;
            _2220 = frontier_phi_66_67_ladder_2;
            _2222 = frontier_phi_66_67_ladder;
        }
        float _2227 = isnan(1.0) ? _746 : (isnan(_746) ? 1.0 : min(_746, 1.0));
        _1964 = ((_2218 * 0.039999999105930328369140625) * _2227) + _1799;
        _1966 = ((_2220 * 0.039999999105930328369140625) * _2227) + _1800;
        _1968 = ((_2222 * 0.039999999105930328369140625) * _2227) + _1801;
    }
    else
    {
        _1964 = _1799;
        _1966 = _1800;
        _1968 = _1801;
    }
    uint _1974 = _1667 + 9u;
    uint _1975 = _1974 + uint(cbMatDynParam._m0[0u].w);
    float _1981 = (cbSceneParam._m0[72u].y * ((_666 * ((_657 - _619) - (_657 * _630))) + _619)) * cbInstanceData._m0[_1975].x;
    float _1982 = (cbSceneParam._m0[72u].y * ((_666 * ((_658 - _620) - (_658 * _630))) + _620)) * cbInstanceData._m0[_1975].y;
    float _1983 = (((_666 * ((_659 - _621) - (_659 * _630))) + _621) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1975].z;
    float _1990 = _1981 + ((_1964 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _1167)) * cbPerFrame._m0[3u].x);
    float _1991 = _1982 + ((_1966 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _1167)) * cbPerFrame._m0[3u].x);
    float _1992 = _1983 + ((_1968 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _1167)) * cbPerFrame._m0[3u].x);
    float _1993 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1994 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1995 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _2001 = cbMtdParam._m0[2u].x * _1981;
    float _2002 = cbMtdParam._m0[2u].y * _1982;
    float _2003 = cbMtdParam._m0[2u].z * _1983;
    float _3328 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2005 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    uint _2006 = _1667 + 6u;
    float _2014 = _733 / cbSceneParam._m0[86u].x;
    float _2015 = _734 / cbSceneParam._m0[86u].y;
    vec4 _2029 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2014, _2015, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2031 = _2029.x;
    float _2032 = _2029.y;
    float _2033 = _2029.z;
    float _2034 = _2029.w;
    float _2124;
    float _2126;
    float _2128;
    float _2130;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _2087 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _2088 = _2087 / _701;
        float _2099 = _2088 * _275;
        float _2100 = _276 * _2088;
        float _2101 = (-0.0) - _2100;
        float _2102 = _2088 * _277;
        float _2104 = (cbSceneParam._m0[77u].w * _2101) / _2087;
        float _2105 = _2104 + cbSceneParam._m0[79u].w;
        float _2106 = cbSceneParam._m0[79u].w - _2100;
        float _2112 = sqrt(((_2099 * _2099) + (_2100 * _2100)) + (_2102 * _2102));
        float _2115 = (1.0 - (cbSceneParam._m0[77u].w / _2087)) * _2112;
        float _2120 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2122 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2338;
        if (abs((_2101 - _2104) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2338 = ((((_2105 > 0.0) ? exp2(_2120 * _2105) : (2.0 - exp2(_2122 * _2105))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2115;
        }
        else
        {
            float _2264 = 1.0 / cbSceneParam._m0[80u].x;
            float _2265 = isnan(_2106) ? _2105 : (isnan(_2105) ? _2106 : max(_2105, _2106));
            float _2266 = isnan(_2106) ? _2105 : (isnan(_2105) ? _2106 : min(_2105, _2106));
            float _2275 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : min(_2265, 0.0));
            float _2276 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : min(_2266, 0.0));
            _2338 = ((abs(_2112 / _2101) * cbSceneParam._m0[80u].y) * ((((_2275 - _2276) * 2.0) - ((exp2(_2120 * (isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0)))) - exp2(_2120 * (isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0))))) * _2264)) - ((exp2(_2122 * _2275) - exp2(_2122 * _2276)) * _2264))) + (_2115 * cbSceneParam._m0[80u].z);
        }
        vec4 _2340 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2014, _2015, 1.0), 0.0);
        float _2349 = exp2((_2338 * (-1.44269502162933349609375)) * (1.0 - _2340.w));
        float _2350 = log2(_2349);
        float _2366 = log2(_2034);
        _2124 = (exp2(_2366 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2350 * cbSceneParam._m0[78u].x)) * _2340.x) / cbSceneParam._m0[78u].x)) + _2031;
        _2126 = (exp2(_2366 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2350 * cbSceneParam._m0[78u].y)) * _2340.y) / cbSceneParam._m0[78u].y)) + _2032;
        _2128 = (exp2(_2366 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2350 * cbSceneParam._m0[78u].z)) * _2340.z) / cbSceneParam._m0[78u].z)) + _2033;
        _2130 = _2349 * _2034;
    }
    else
    {
        _2124 = _2031;
        _2126 = _2032;
        _2128 = _2033;
        _2130 = _2034;
    }
    bool _2376;
    vec4 _2139;
    vec4 _2162;
    float _2164;
    float _2168;
    float _2169;
    float _2170;
    float _2173;
    float _2176;
    float _2179;
    float _2180;
    bool _2191;
    for (;;)
    {
        _2139 = cbMatDynParam._m0[0u];
        float _2141 = roundEven(_2139.y);
        bool _2142 = _2141 == 3.0;
        float _2144 = log2(_2130);
        float _2148 = exp2(_2144 * cbSceneParam._m0[78u].x);
        float _2149 = exp2(_2144 * cbSceneParam._m0[78u].y);
        float _2150 = exp2(_2144 * cbSceneParam._m0[78u].z);
        float _2151 = _2148 * _1993;
        float _2152 = _2149 * _1994;
        float _2153 = _2150 * _1995;
        float _2160 = _715 + (-0.5);
        _2162 = cbMtdParam._m0[1u];
        _2164 = _2162.y * _2160;
        float _2167 = (_2141 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2168 = _2167 * (_2142 ? _2151 : (_2151 + (cbSceneParam._m0[72u].w * _2124)));
        _2169 = _2167 * (_2142 ? _2152 : (_2152 + (cbSceneParam._m0[72u].w * _2126)));
        _2170 = _2167 * (_2142 ? _2153 : (_2153 + (cbSceneParam._m0[72u].w * _2128)));
        _2173 = ((_2001 * _2005) * _2148) * _2167;
        _2176 = ((_2002 * _2005) * _2149) * _2167;
        _2179 = ((_2003 * _2005) * _2150) * _2167;
        _2180 = _2160 * 0.999000012874603271484375;
        _2191 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2191)
        {
            if ((cbInstanceData._m0[_1667 + 7u].x + _2180) < 0.5)
            {
                _2376 = true;
                break;
            }
        }
        uint _2299 = _1974 + uint(_2139.w);
        if ((cbInstanceData._m0[_2299].w < 1.0) && ((cbInstanceData._m0[_2299].w + _2180) < 0.5))
        {
            _2376 = true;
            break;
        }
        if ((_2164 + 1.0) < _2162.x)
        {
            _2376 = true;
            break;
        }
        _2376 = false;
        break;
    }
    float _2508;
    if (_2376)
    {
        discard_state = true;
        _2508 = 0.0;
    }
    else
    {
        _2508 = cbInstanceData._m0[_2006].w;
    }
    SV_Target.x = _2168;
    SV_Target.y = _2169;
    SV_Target.z = _2170;
    SV_Target.w = _2508;
    SV_Target_1.x = _2173;
    SV_Target_1.y = _2176;
    SV_Target_1.z = _2179;
    SV_Target_1.w = cbInstanceData._m0[_2006].w;
    discard_exit();
}


