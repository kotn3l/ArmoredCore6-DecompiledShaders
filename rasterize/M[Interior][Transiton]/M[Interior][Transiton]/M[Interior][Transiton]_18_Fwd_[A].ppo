#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _392;
float _3039;
float _3040;
float _3041;
float _3042;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _204 = _203 * _195;
    float _205 = _203 * _196;
    float _206 = _203 * _197;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _301 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _324 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _336 = cbMtdParam._m0[28u].z + _271;
    float _337 = cbMtdParam._m0[28u].w + _272;
    float _338 = cbMtdParam._m0[29u].x + _273;
    float _355 = (-0.0) - dot(vec3(_336, _337, _338), vec3(_317 * _204, _317 * _205, _317 * _206));
    float _356 = (-0.0) - dot(vec3(_336, _337, _338), vec3(_324 * _215, _324 * _216, _324 * _217));
    float _357 = (-0.0) - dot(vec3(_336, _337, _338), vec3((-0.0) - (NORMAL.x * _210), (-0.0) - (NORMAL.y * _210), (-0.0) - (NORMAL.z * _210)));
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _362 = _361 * _357;
    float _367 = ((cbMtdParam._m0[25u].y * _355) * _361) + (((_301.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _368 = ((cbMtdParam._m0[25u].z * _356) * _361) + (((_301.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _371 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _372 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _390;
    float _393;
    float _395;
    if (_367 > 0.0)
    {
        float _376 = (1.0 - _371) / _367;
        _390 = _376;
        _393 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_376 * _362)) * 0.16666667163372039794921875;
        _395 = (fract((_376 * _368) + _372) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_367 < 0.0)
        {
            float _391 = ((-0.0) - _371) / _367;
            frontier_phi_3_2_ladder = _391;
            frontier_phi_3_2_ladder_1 = (fract((_391 * _368) + _372) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_391 * _362) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _392;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _390 = frontier_phi_3_2_ladder;
        _393 = frontier_phi_3_2_ladder_2;
        _395 = frontier_phi_3_2_ladder_1;
    }
    float _421;
    float _423;
    float _425;
    if (_368 > 0.0)
    {
        float _408 = (1.0 - _372) / _368;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_408 < _390)
        {
            frontier_phi_8_5_ladder = (fract(_408 * _362) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_408 * _367) + _371) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _408;
        }
        else
        {
            frontier_phi_8_5_ladder = _395;
            frontier_phi_8_5_ladder_1 = _393;
            frontier_phi_8_5_ladder_2 = _390;
        }
        _421 = frontier_phi_8_5_ladder_2;
        _423 = frontier_phi_8_5_ladder_1;
        _425 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_368 < 0.0)
        {
            float _422 = ((-0.0) - _372) / _368;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_422 < _390)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_422 * _362) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_422 * _367) + _371) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _422;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _395;
                frontier_phi_8_6_ladder_9_ladder_1 = _393;
                frontier_phi_8_6_ladder_9_ladder_2 = _390;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _395;
            frontier_phi_8_6_ladder_1 = _393;
            frontier_phi_8_6_ladder_2 = _390;
        }
        _421 = frontier_phi_8_6_ladder_2;
        _423 = frontier_phi_8_6_ladder_1;
        _425 = frontier_phi_8_6_ladder;
    }
    float _429 = (_362 > 0.0) ? (cbMtdParam._m0[20u].z / _362) : 5000.0;
    float _442;
    float _443;
    if (_429 < _421)
    {
        _442 = ((_371 + cbMtdParam._m0[22u].x) + (_429 * _367)) * 0.16666667163372039794921875;
        _443 = (((_429 * _368) + _372) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _442 = _423;
        _443 = _425;
    }
    vec4 _445 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_442, _443));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    vec4 _476 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _481 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _487 = ((_476.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _489 = (-0.0) - (cbMtdParam._m0[21u].x * ((_476.x * 0.5) + (-0.25)));
    float _490 = fract(_481);
    float _492 = fract(_481 + 0.5);
    vec4 _519 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_490 * _489) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_487 * _490) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _521 = _519.x;
    float _527 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_492 * _489) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_487 * _492) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _521) * abs((_490 * 2.0) + (-1.0))) + _521;
    float _541 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _545 = fract(abs(_541));
    float _551 = sin(cbMtdParam._m0[21u].z);
    float _552 = cos(cbMtdParam._m0[21u].z);
    float _553 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _554 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _584 = abs(cbMtdParam._m0[20u].w * (((_527 - (((_541 >= ((-0.0) - _541)) ? _545 : ((-0.0) - _545)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_554, (-0.0) - _551, _552 * _553) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_554, _552, _553 * _551) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _588 = (((_584 * cbMtdParam._m0[18u].y) - _527) * _584) + _527;
    float _3051 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
    vec4 _601 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _616 = (cbMtdParam._m0[14u].x * _601.x) * cbMtdParam._m0[19u].x;
    float _617 = (cbMtdParam._m0[14u].y * _601.y) * cbMtdParam._m0[19u].x;
    float _618 = (cbMtdParam._m0[14u].z * _601.z) * cbMtdParam._m0[19u].x;
    float _628 = exp2(log2(_589) * cbMtdParam._m0[20u].x);
    float _3062 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3073 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3084 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _657 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _661 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _662 = _271 * _661;
    float _663 = _272 * _661;
    float _664 = _273 * _661;
    vec4 _669 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _671 = _669.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _773 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _779 = (cbMatDynParam._m0[5u].x * _773) + cbMatDynParam._m0[5u].y;
        float _3095 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0));
        float _784 = (cbMatDynParam._m0[5u].z * _773) + cbMatDynParam._m0[5u].w;
        float _3106 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0))) - _780)) + _780) < ((_671 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _689 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _690 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _703 = uint(roundEven(NORMAL.w)) * 13u;
    uint _705 = _703 + 9u;
    uint _706 = _705 + uint(cbMatDynParam._m0[0u].w);
    float _712 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0)))) * cbInstanceData._m0[_706].x;
    float _713 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0)))) * cbInstanceData._m0[_706].y;
    float _714 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0)))) * cbInstanceData._m0[_706].z;
    float _3117 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
    float _3128 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
    float _3139 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
    vec4 _726 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _689, cbSceneParam._m0[86u].y * _690));
    float _729 = _726.x * TEXCOORD_4;
    float _730 = (-0.0) - _662;
    float _731 = (-0.0) - _663;
    float _732 = (-0.0) - _664;
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _847 = (cbModelParam._m0[37u].x * ((((fma(_762, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _849 = (cbModelParam._m0[37u].y * ((((fma(_762, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _850 = (((((fma(_762, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_847, _849, _850), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_847, _849, _850), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_847, _849, _850), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_847, _849, _850), 0.0);
        float _887 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_853.x + (-0.5));
        float _889 = _887 * (_853.y + (-0.5));
        float _890 = _887 * (_853.z + (-0.5));
        float _897 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_860.x + (-0.5));
        float _899 = _897 * (_860.y + (-0.5));
        float _900 = _897 * (_860.z + (-0.5));
        float _907 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_867.x + (-0.5));
        float _909 = _907 * (_867.y + (-0.5));
        float _910 = _907 * (_867.z + (-0.5));
        float _917 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_874.x + (-0.5));
        float _919 = _917 * (_874.y + (-0.5));
        float _920 = _917 * (_874.z + (-0.5));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = _888 * 0.5;
        float _925 = _898 * 0.5;
        float _926 = _908 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _941 = (dot(vec3(0.0), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3165 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _951 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3176 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3187 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0))) * (_953 + 1.0))) + _958) * _921;
        float _968 = _889 * 0.5;
        float _969 = _899 * 0.5;
        float _970 = _909 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(0.0), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3198 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3209 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3220 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0))) * (_995 + 1.0))) + _1000) * _922;
        float _1010 = _890 * 0.5;
        float _1011 = _900 * 0.5;
        float _1012 = _910 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(0.0), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3231 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3242 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3253 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * (_1037 + 1.0))) + _1042) * _923;
        _1059 = _890;
        _1060 = _889;
        _1061 = _888;
        _1062 = _900;
        _1063 = _899;
        _1064 = _898;
        _1065 = _910;
        _1066 = _909;
        _1067 = _908;
        _1068 = _923;
        _1069 = _922;
        _1070 = _921;
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
    }
    else
    {
        _1059 = _392;
        _1060 = _392;
        _1061 = _392;
        _1062 = _392;
        _1063 = _392;
        _1064 = _392;
        _1065 = _392;
        _1066 = _392;
        _1067 = _392;
        _1068 = _392;
        _1069 = _392;
        _1070 = _392;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1129 = (cbModelParam._m0[38u].x * ((((fma(_762, cbModelParam._m0[30u].z, fma(_758, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _754)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1130 = (cbModelParam._m0[38u].y * ((((fma(_762, cbModelParam._m0[31u].z, fma(_758, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _754)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1131 = (((((fma(_762, cbModelParam._m0[32u].z, fma(_758, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _754)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1166 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1133.x + (-0.5));
        float _1168 = _1166 * (_1133.y + (-0.5));
        float _1169 = _1166 * (_1133.z + (-0.5));
        float _1176 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1140.x + (-0.5));
        float _1178 = _1176 * (_1140.y + (-0.5));
        float _1179 = _1176 * (_1140.z + (-0.5));
        float _1186 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1147.x + (-0.5));
        float _1188 = _1186 * (_1147.y + (-0.5));
        float _1189 = _1186 * (_1147.z + (-0.5));
        float _1196 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1154.x + (-0.5));
        float _1198 = _1196 * (_1154.y + (-0.5));
        float _1199 = _1196 * (_1154.z + (-0.5));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = _1167 * 0.5;
        float _1204 = _1177 * 0.5;
        float _1205 = _1187 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(0.0), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3294 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3305 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3316 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) * (_1230 + 1.0))) + _1235) * _1200;
        float _1245 = _1168 * 0.5;
        float _1246 = _1178 * 0.5;
        float _1247 = _1188 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(0.0), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3349 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_1272 + 1.0))) + _1277) * _1201;
        float _1287 = _1169 * 0.5;
        float _1288 = _1179 * 0.5;
        float _1289 = _1189 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(0.0), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3382 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_1314 + 1.0))) + _1319) * _1202;
        _1336 = _1169;
        _1337 = _1168;
        _1338 = _1167;
        _1339 = _1179;
        _1340 = _1178;
        _1341 = _1177;
        _1342 = _1189;
        _1343 = _1188;
        _1344 = _1187;
        _1345 = _1202;
        _1346 = _1201;
        _1347 = _1200;
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _392;
        _1337 = _392;
        _1338 = _392;
        _1339 = _392;
        _1340 = _392;
        _1341 = _392;
        _1342 = _392;
        _1343 = _392;
        _1344 = _392;
        _1345 = _392;
        _1346 = _392;
        _1347 = _392;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1071)) + _1071;
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1072)) + _1072;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1073)) + _1073;
    float _1383 = fma(_1362, cbSceneParam._m0[89u].z, fma(_1361, cbSceneParam._m0[89u].y, _1360 * cbSceneParam._m0[89u].x));
    float _1386 = fma(_1362, cbSceneParam._m0[90u].z, fma(_1361, cbSceneParam._m0[90u].y, _1360 * cbSceneParam._m0[90u].x));
    float _1389 = fma(_1362, cbSceneParam._m0[91u].z, fma(_1361, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1360));
    float _1404 = _662 * (-0.5);
    float _1405 = _663 * (-0.5);
    float _1406 = _664 * (-0.5);
    float _1407 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1410 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1413 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1447;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1420 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1424 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1428 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1435 = dot(vec4(cbModelParam._m0[39u]), vec4(_1404, _1405, _1406, 1.0));
        _1447 = dot(vec3(isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1435) ? 0.0 : (isnan(0.0) ? _1435 : max(0.0, _1435))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1447 = 1.0;
    }
    float _1458;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1449 = dot(vec4(cbModelParam._m0[40u]), vec4(_1404, _1405, _1406, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1449) ? 0.0 : (isnan(0.0) ? _1449 : max(0.0, _1449))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1462 = (_1458 * cbModelParam._m0[1u].x) + (_1447 * (1.0 - cbModelParam._m0[1u].x));
    float _1471 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1553;
    float _1555;
    float _1557;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1520 = fma(_762, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754)) + cbModelParam._m0[13u].w;
        float _1524 = fma(_762, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754)) + cbModelParam._m0[14u].w;
        float _1528 = fma(_762, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754)) + cbModelParam._m0[15u].w;
        float _1531 = fma(_732, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _730));
        float _1534 = fma(_732, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _730));
        float _1537 = fma(_732, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _730));
        float _1563;
        if (_1531 > 0.0)
        {
            _1563 = abs((1.0 - _1520) / _1531);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1520 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1563 = frontier_phi_29_27_ladder;
        }
        float _1858;
        if (_1534 > 0.0)
        {
            _1858 = abs((1.0 - _1524) / _1534);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1524 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1858 = frontier_phi_38_34_ladder;
        }
        float _2203;
        if (_1537 > 0.0)
        {
            _2203 = abs((1.0 - _1528) / _1537);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1528 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2203 = frontier_phi_52_45_ladder;
        }
        float _2205 = isnan(_1858) ? _1563 : (isnan(_1563) ? _1858 : min(_1563, _1858));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1531) + _1520;
        float _2211 = (_2206 * _1534) + _1524;
        float _2212 = (_2206 * _1537) + _1528;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2213;
        float _2216 = _2213 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2212 > _2216) || ((_2212 < _2214) || ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 < _2214) || (_2210 > _2216))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1471);
            frontier_phi_28_52_ladder = _2351.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2351.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2351.x * cbModelParam._m0[1u].y;
        }
        _1553 = frontier_phi_28_52_ladder_2;
        _1555 = frontier_phi_28_52_ladder_1;
        _1557 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_730, _731, _732), _1471);
        _1553 = _1541.x * cbModelParam._m0[1u].y;
        _1555 = _1541.y * cbModelParam._m0[1u].y;
        _1557 = _1541.z * cbModelParam._m0[1u].y;
    }
    float _1560 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1648;
    float _1650;
    float _1652;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1612 = fma(_762, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754)) + cbModelParam._m0[21u].w;
        float _1616 = fma(_762, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754)) + cbModelParam._m0[22u].w;
        float _1620 = fma(_762, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754)) + cbModelParam._m0[23u].w;
        float _1623 = fma(_732, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _730));
        float _1626 = fma(_732, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _730));
        float _1629 = fma(_732, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _730));
        float _1863;
        if (_1623 > 0.0)
        {
            _1863 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1863 = frontier_phi_40_36_ladder;
        }
        float _2229;
        if (_1626 > 0.0)
        {
            _2229 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2229 = frontier_phi_54_47_ladder;
        }
        float _2416;
        if (_1629 > 0.0)
        {
            _2416 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2416 = frontier_phi_72_65_ladder;
        }
        float _2418 = isnan(_2229) ? _1863 : (isnan(_1863) ? _2229 : min(_1863, _2229));
        float _2419 = isnan(_2416) ? _2418 : (isnan(_2418) ? _2416 : min(_2418, _2416));
        float _2423 = (_2419 * _1623) + _1612;
        float _2424 = (_2419 * _1626) + _1616;
        float _2425 = (_2419 * _1629) + _1620;
        float _2426 = _2419 * 9.9999997473787516355514526367188e-05;
        float _2427 = (-1.0) - _2426;
        float _2429 = _2426 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2425 > _2429) || ((_2425 < _2427) || ((_2424 > _2429) || ((_2424 < _2427) || ((_2423 < _2427) || (_2423 > _2429))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2425, cbModelParam._m0[17u].z, fma(_2424, cbModelParam._m0[17u].y, _2423 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2425, cbModelParam._m0[18u].z, fma(_2424, cbModelParam._m0[18u].y, _2423 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2425, cbModelParam._m0[19u].z, fma(_2424, cbModelParam._m0[19u].y, _2423 * cbModelParam._m0[19u].x))), _1560);
            frontier_phi_37_72_ladder = _2617.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2617.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2617.x * cbModelParam._m0[1u].z;
        }
        _1648 = frontier_phi_37_72_ladder_2;
        _1650 = frontier_phi_37_72_ladder_1;
        _1652 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_730, _731, _732), _1560);
        _1648 = _1632.x * cbModelParam._m0[1u].z;
        _1650 = _1632.y * cbModelParam._m0[1u].z;
        _1652 = _1632.z * cbModelParam._m0[1u].z;
    }
    float _1664 = _729 * 0.01200000010430812835693359375;
    float _1666 = _1664 * ((cbModelParam._m0[1u].w * (_1648 - _1553)) + _1553);
    float _1667 = _1664 * ((cbModelParam._m0[1u].w * (_1650 - _1555)) + _1555);
    float _1668 = _1664 * ((cbModelParam._m0[1u].w * (_1652 - _1557)) + _1557);
    float _1671 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1674 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1677 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, _1666 * cbSceneParam._m0[91u].x));
    uvec4 _1687 = floatBitsToUint(cbInstanceData._m0[_703 + 5u]);
    uint _1689 = _1687.x * 14u;
    uint _1690 = _1689 + 13u;
    float _1695 = _729 + (-1.0);
    float _1698 = (cbLight._m0[_1690].x * _1695) + 1.0;
    float _1699 = (cbLight._m0[_1690].y * _1695) + 1.0;
    uint _1700 = _1689 + 5u;
    float _1706 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
    uint _1710 = _1689 + 4u;
    float _1716 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
    uint _1720 = _1689 | 1u;
    float _1731 = dot(vec3(cbLight._m0[_1689].xyz), vec3(0.0));
    float _1734 = dot(vec3(cbLight._m0[_1720].xyz), vec3(0.0));
    float _3518 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _3529 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1739 = (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.3183098733425140380859375;
    float _1741 = (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 0.3183098733425140380859375;
    float _1748 = ((cbLight._m0[_1700].x * _1706) * _1741) + ((cbLight._m0[_1710].x * _1716) * _1739);
    float _1749 = ((_1706 * cbLight._m0[_1700].y) * _1741) + ((_1716 * cbLight._m0[_1710].y) * _1739);
    float _1750 = ((_1706 * cbLight._m0[_1700].z) * _1741) + ((_1716 * cbLight._m0[_1710].z) * _1739);
    uint _1751 = _1689 + 8u;
    float _1757 = cbLight._m0[_1689].x + _662;
    float _1758 = cbLight._m0[_1689].y + _663;
    float _1759 = cbLight._m0[_1689].z + _664;
    float _1763 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
    float _1767 = dot(vec3(0.0), vec3(cbLight._m0[_1689].xyz));
    float _3540 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _1771 = dot(vec3(0.0), vec3(_662, _663, _664));
    float _3551 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _1775 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_1757 * _1763, _1758 * _1763, _1759 * _1763));
    float _3562 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1786 = (exp2(log2(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1792 = (0.5 / ((_1770 + 9.9999999392252902907785028219223e-09) + _1774)) * _1770;
    float _3573 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1794 = (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.31831014156341552734375;
    uint _1805 = _1689 + 9u;
    float _1811 = cbLight._m0[_1720].x + _662;
    float _1812 = cbLight._m0[_1720].y + _663;
    float _1813 = cbLight._m0[_1720].z + _664;
    float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
    float _1821 = dot(vec3(0.0), vec3(cbLight._m0[_1720].xyz));
    float _3584 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _1825 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1811 * _1817, _1812 * _1817, _1813 * _1817));
    float _3595 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1834 = (exp2(log2(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1838 = (0.5 / ((_1824 + 9.9999999392252902907785028219223e-09) + _1774)) * _1824;
    float _3606 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * 0.31831014156341552734375;
    float _1850 = (((_1834 * cbLight._m0[_1805].x) * _1840) * _1706) + (((_1786 * cbLight._m0[_1751].x) * _1794) * _1716);
    float _1851 = (((_1834 * cbLight._m0[_1805].y) * _1840) * _1706) + (((_1786 * cbLight._m0[_1751].y) * _1794) * _1716);
    float _1852 = (((_1834 * cbLight._m0[_1805].z) * _1840) * _1706) + (((_1786 * cbLight._m0[_1751].z) * _1794) * _1716);
    float _1968;
    float _1970;
    float _1972;
    float _1974;
    float _1976;
    float _1978;
    if (_1687.y == 0u)
    {
        float _1908 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1909 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1908;
        float _1910 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1908;
        float _1911 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1908;
        uvec4 _1923 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1924 = _1923.x;
        uint _1935 = uint((float(_1923.y) * floor(float(uint(cbSceneParam._m0[85u].y * _690) / _1924))) + floor(float(uint(cbSceneParam._m0[85u].x * _689) / _1924)));
        float _1945 = (log2(_1911 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1946 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        uint _1949 = uint(isnan(14.0) ? _1946 : (isnan(_1946) ? 14.0 : min(_1946, 14.0)));
        uvec4 _1954 = texelFetch(g_lightClusterGridBuffer, int(((_1949 << 2u) + (_1935 << 6u)) >> 2u));
        uint _1955 = _1954.x;
        uint _1956 = _1923.z;
        float _2072;
        float _2074;
        float _2076;
        float _2078;
        float _2080;
        float _2082;
        if (((((1u << ((_1956 >> 4u) & 15u)) + 4294967295u) & _1955) == 0u) || ((_1956 & 240u) == 0u))
        {
            _2072 = 0.0;
            _2074 = 0.0;
            _2076 = 0.0;
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
        }
        else
        {
            float _2073;
            float _2075;
            float _2077;
            float _2079;
            float _2081;
            float _2083;
            float _2263 = 0.0;
            float _2264 = 0.0;
            float _2265 = 0.0;
            float _2266 = 0.0;
            float _2267 = 0.0;
            float _2268 = 0.0;
            uint _2269 = 0u;
            uint _2278;
            bool _2279;
            for (;;)
            {
                _2278 = texelFetch(g_lightClassification, int((((_1949 << 5u) + (_1935 << 9u)) + (_2269 << 2u)) >> 2u)).x;
                _2279 = _2278 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2279)
                {
                    frontier_phi_67_pred = _2266;
                    frontier_phi_67_pred_1 = _2265;
                    frontier_phi_67_pred_2 = _2264;
                    frontier_phi_67_pred_3 = _2263;
                    frontier_phi_67_pred_4 = _2267;
                    frontier_phi_67_pred_5 = _2268;
                }
                else
                {
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    float _2463;
                    float _2464;
                    uint _2465;
                    _2459 = _2263;
                    _2460 = _2264;
                    _2461 = _2265;
                    _2462 = _2266;
                    _2463 = _2267;
                    _2464 = _2268;
                    _2465 = _2278;
                    float _2360;
                    float _2361;
                    float _2362;
                    float _2363;
                    float _2364;
                    float _2365;
                    for (;;)
                    {
                        uint _2469 = uint(findLSB(_2465)) + (_2269 << 5u);
                        uint _2466 = (_2465 + 4294967295u) & _2465;
                        uint _2471 = _2469 * 48u;
                        vec4 _2485 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2471)).x, texelFetch(g_PointLightRenderingBuffer, int(_2471 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2471 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2471 + 3u)).x));
                        uint _2491 = (_2469 * 48u) + 4u;
                        vec4 _2504 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2491)).x, texelFetch(g_PointLightRenderingBuffer, int(_2491 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2491 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2491 + 3u)).x));
                        uint _2510 = (_2469 * 48u) + 8u;
                        vec3 _2521 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2510)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 2u)).x));
                        float _2525 = _2485.x - _1909;
                        float _2526 = _2485.y - _1910;
                        float _2527 = _2485.z - _1911;
                        float _2528 = dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527));
                        float _2531 = inversesqrt(_2528);
                        float _2540 = 1.0 - (_2528 * _2485.w);
                        float _3627 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
                        float _2541 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
                        float _2542 = sqrt(_2528) * _2504.w;
                        float _2545 = 1.39999997615814208984375 / (_2542 + 1.39999997615814208984375);
                        float _2546 = _2545 * _2545;
                        float _2549 = ((1.0 - _2546) * dot(vec3(0.0), vec3(_2531 * _2525, _2531 * _2526, _2531 * _2527))) + _2546;
                        float _2552 = _2542 * _2542;
                        float _2556 = ((isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0))) * _2541) / ((_2552 * 0.699999988079071044921875) + 1.0);
                        float _2560 = (-0.0) - _1909;
                        float _2561 = (-0.0) - _1910;
                        float _2562 = (-0.0) - _1911;
                        float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
                        float _2570 = dot(vec3(0.0), vec3(_2566 * _2560, _2566 * _2561, _2566 * _2562));
                        float _3643 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
                        float _3654 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
                        float _2574 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
                        float _2578 = (0.5 / (((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) + 9.9999999392252902907785028219223e-09) + _2574)) * _2574;
                        float _3665 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
                        float _2587 = (((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 3.1415927410125732421875) / ((_2552 * 2.1991131305694580078125) + 3.141590118408203125)) * _2541;
                        _2363 = (_2556 * _2504.x) + _2462;
                        _2364 = (_2556 * _2504.y) + _2463;
                        _2365 = (_2556 * _2504.z) + _2464;
                        _2360 = (_2587 * _2521.x) + _2459;
                        _2361 = (_2587 * _2521.y) + _2460;
                        _2362 = (_2587 * _2521.z) + _2461;
                        if (_2466 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2459 = _2360;
                            _2460 = _2361;
                            _2461 = _2362;
                            _2462 = _2363;
                            _2463 = _2364;
                            _2464 = _2365;
                            _2465 = _2466;
                        }
                    }
                    frontier_phi_67_pred = _2363;
                    frontier_phi_67_pred_1 = _2362;
                    frontier_phi_67_pred_2 = _2361;
                    frontier_phi_67_pred_3 = _2360;
                    frontier_phi_67_pred_4 = _2364;
                    frontier_phi_67_pred_5 = _2365;
                }
                _2079 = frontier_phi_67_pred;
                _2077 = frontier_phi_67_pred_1;
                _2075 = frontier_phi_67_pred_2;
                _2073 = frontier_phi_67_pred_3;
                _2081 = frontier_phi_67_pred_4;
                _2083 = frontier_phi_67_pred_5;
                uint _2270 = _2269 + 1u;
                if (_2270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2263 = _2073;
                    _2264 = _2075;
                    _2265 = _2077;
                    _2266 = _2079;
                    _2267 = _2081;
                    _2268 = _2083;
                    _2269 = _2270;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2072 = _2073;
            _2074 = _2075;
            _2076 = _2077;
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
        }
        uvec4 _2086 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2087 = _2086.z;
        uint _2089 = (_2087 >> 8u) & 15u;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        float _2244;
        if (((4294967295u << _2089) & _1955) == 0u)
        {
            _2234 = _2072;
            _2236 = _2074;
            _2238 = _2076;
            _2240 = _2078;
            _2242 = _2080;
            _2244 = _2082;
        }
        else
        {
            float _2259 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2089 < ((_2087 >> 12u) & 15u))
            {
                float _2235;
                float _2237;
                float _2239;
                float _2241;
                float _2243;
                float _2245;
                float _2442 = _2072;
                float _2443 = _2074;
                float _2444 = _2076;
                float _2445 = _2078;
                float _2446 = _2080;
                float _2447 = _2082;
                uint _2448 = _2089;
                uint _2457;
                bool _2458;
                for (;;)
                {
                    _2457 = texelFetch(g_lightClassification, int((((_1949 << 5u) + (_1935 << 9u)) + (_2448 << 2u)) >> 2u)).x;
                    _2458 = _2457 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2458)
                    {
                        frontier_phi_81_pred = _2445;
                        frontier_phi_81_pred_1 = _2444;
                        frontier_phi_81_pred_2 = _2443;
                        frontier_phi_81_pred_3 = _2442;
                        frontier_phi_81_pred_4 = _2447;
                        frontier_phi_81_pred_5 = _2446;
                    }
                    else
                    {
                        float _2622;
                        float _2623;
                        float _2624;
                        float _2625;
                        float _2626;
                        float _2627;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2635 = _2442;
                        float _2636 = _2443;
                        float _2637 = _2444;
                        float _2638 = _2445;
                        float _2639 = _2446;
                        float _2640 = _2447;
                        uint _2641 = _2457;
                        uint _2642;
                        vec4 _2667;
                        float _2668;
                        vec4 _2683;
                        vec3 _2695;
                        vec4 _2711;
                        vec4 _2726;
                        float _2772;
                        bool _2773;
                        for (;;)
                        {
                            uint _2652 = ((_2448 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2641));
                            _2642 = (_2641 + 4294967295u) & _2641;
                            uint _2654 = _2652 * 40u;
                            _2667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 3u)).x));
                            _2668 = _2667.w;
                            uint _2670 = (_2652 * 40u) + 4u;
                            _2683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 3u)).x));
                            uint _2685 = (_2652 * 40u) + 8u;
                            _2695 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 2u)).x));
                            uint _2698 = (_2652 * 40u) + 16u;
                            _2711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 3u)).x));
                            uint _2713 = (_2652 * 40u) + 20u;
                            _2726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 3u)).x));
                            uint _2728 = (_2652 * 40u) + 24u;
                            vec4 _2741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 3u)).x));
                            uint _2747 = (_2652 * 40u) + 28u;
                            vec4 _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            _2772 = fma(_1911, _2760.z, fma(_1910, _2760.y, _2760.x * _1909)) + _2760.w;
                            _2773 = !((fma(_1911, _2741.z, fma(_1910, _2741.y, _2741.x * _1909)) + _2741.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2773)
                            {
                                float _2800 = _2667.x - _1909;
                                float _2801 = _2667.y - _1910;
                                float _2802 = _2667.z - _1911;
                                float _2803 = dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802));
                                float _2806 = inversesqrt(_2803);
                                float _2807 = _2806 * _2800;
                                float _2808 = _2806 * _2801;
                                float _2809 = _2806 * _2802;
                                float _2813 = 1.0 - (_2803 / (_2668 * _2668));
                                float _3676 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                                float _2814 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                                float _2818 = sqrt(_2803) * _2683.w;
                                float _2820 = 1.39999997615814208984375 / (_2818 + 1.39999997615814208984375);
                                float _2821 = _2820 * _2820;
                                float _2822 = 1.0 - _2821;
                                float _2824 = (_2822 * dot(vec3(_2807, _2808, _2809), vec3(0.0))) + _2821;
                                float _2827 = _2818 * _2818;
                                float _2831 = (fma(_1911, _2711.z, fma(_1910, _2711.y, _2711.x * _1909)) + _2711.w) / _2772;
                                float _2832 = (fma(_1911, _2726.z, fma(_1910, _2726.y, _2726.x * _1909)) + _2726.w) / _2772;
                                float _2836 = 1.0 - dot(vec2(_2831, _2832), vec2(_2831, _2832));
                                float _3692 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                                float _2837 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
                                float _2838 = _2837 * (((isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0))) * _2814) / ((_2827 * 0.699999988079071044921875) + 1.0));
                                float _2848 = dot(vec3(0.0), vec3((-0.0) - (_1909 * _2259), (-0.0) - (_1910 * _2259), (-0.0) - (_1911 * _2259)));
                                float _3703 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                                float _2856 = (_2822 * dot(vec3(0.0), vec3(_2807, _2808, _2809))) + _2821;
                                float _3714 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                                float _2857 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
                                float _2861 = (0.5 / (((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) + 9.9999999392252902907785028219223e-09) + _2857)) * _2857;
                                float _3725 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                                float _2868 = (_2837 * _2814) * (((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 3.1415927410125732421875) / ((_2827 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2838 * _2683.x;
                                frontier_phi_87_pred_1 = _2868 * _2695.z;
                                frontier_phi_87_pred_2 = _2868 * _2695.y;
                                frontier_phi_87_pred_3 = _2868 * _2695.x;
                                frontier_phi_87_pred_4 = _2838 * _2683.z;
                                frontier_phi_87_pred_5 = _2838 * _2683.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _2875 = frontier_phi_87_pred;
                            _2874 = frontier_phi_87_pred_1;
                            _2873 = frontier_phi_87_pred_2;
                            _2872 = frontier_phi_87_pred_3;
                            _2877 = frontier_phi_87_pred_4;
                            _2876 = frontier_phi_87_pred_5;
                            _2625 = _2875 + _2638;
                            _2626 = _2876 + _2639;
                            _2627 = _2877 + _2640;
                            _2622 = _2872 + _2635;
                            _2623 = _2873 + _2636;
                            _2624 = _2874 + _2637;
                            if (_2642 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2635 = _2622;
                                _2636 = _2623;
                                _2637 = _2624;
                                _2638 = _2625;
                                _2639 = _2626;
                                _2640 = _2627;
                                _2641 = _2642;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2625;
                        frontier_phi_81_pred_1 = _2624;
                        frontier_phi_81_pred_2 = _2623;
                        frontier_phi_81_pred_3 = _2622;
                        frontier_phi_81_pred_4 = _2627;
                        frontier_phi_81_pred_5 = _2626;
                    }
                    _2241 = frontier_phi_81_pred;
                    _2239 = frontier_phi_81_pred_1;
                    _2237 = frontier_phi_81_pred_2;
                    _2235 = frontier_phi_81_pred_3;
                    _2245 = frontier_phi_81_pred_4;
                    _2243 = frontier_phi_81_pred_5;
                    uint _2449 = _2448 + 1u;
                    if (_2449 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2442 = _2235;
                        _2443 = _2237;
                        _2444 = _2239;
                        _2445 = _2241;
                        _2446 = _2243;
                        _2447 = _2245;
                        _2448 = _2449;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2245;
                frontier_phi_56_57_ladder_1 = _2243;
                frontier_phi_56_57_ladder_2 = _2241;
                frontier_phi_56_57_ladder_3 = _2237;
                frontier_phi_56_57_ladder_4 = _2235;
                frontier_phi_56_57_ladder_5 = _2239;
            }
            else
            {
                frontier_phi_56_57_ladder = _2082;
                frontier_phi_56_57_ladder_1 = _2080;
                frontier_phi_56_57_ladder_2 = _2078;
                frontier_phi_56_57_ladder_3 = _2074;
                frontier_phi_56_57_ladder_4 = _2072;
                frontier_phi_56_57_ladder_5 = _2076;
            }
            _2234 = frontier_phi_56_57_ladder_4;
            _2236 = frontier_phi_56_57_ladder_3;
            _2238 = frontier_phi_56_57_ladder_5;
            _2240 = frontier_phi_56_57_ladder_2;
            _2242 = frontier_phi_56_57_ladder_1;
            _2244 = frontier_phi_56_57_ladder;
        }
        float _2249 = isnan(1.0) ? _729 : (isnan(_729) ? 1.0 : min(_729, 1.0));
        _1968 = (_2249 * _2240) + _1748;
        _1970 = (_2249 * _2242) + _1749;
        _1972 = (_2249 * _2244) + _1750;
        _1974 = ((_2234 * 0.039999999105930328369140625) * _2249) + _1850;
        _1976 = ((_2236 * 0.039999999105930328369140625) * _2249) + _1851;
        _1978 = ((_2238 * 0.039999999105930328369140625) * _2249) + _1852;
    }
    else
    {
        _1968 = _1748;
        _1970 = _1749;
        _1972 = _1750;
        _1974 = _1850;
        _1976 = _1851;
        _1978 = _1852;
    }
    uint _1984 = _705 + uint(cbMatDynParam._m0[0u].w);
    float _1990 = ((_628 * (_616 - (_616 * _589))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1984].x;
    float _1991 = ((_628 * (_617 - (_617 * _589))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1984].y;
    float _1992 = ((_628 * (_618 - (_618 * _589))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1984].z;
    float _3741 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _3752 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _3763 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _2009 = (((isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1968 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _729))) + ((_1974 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1462)) * cbPerFrame._m0[3u].x)) + _1990;
    float _2011 = (_1991 + ((_1976 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1462)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1970 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _729)));
    float _2013 = (_1992 + ((_1978 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1462)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1972 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _729)));
    float _2014 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2015 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2016 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2022 = cbMtdParam._m0[2u].x * _1990;
    float _2023 = cbMtdParam._m0[2u].y * _1991;
    float _2024 = cbMtdParam._m0[2u].z * _1992;
    float _3789 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2026 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    uint _2027 = _703 + 6u;
    float _2035 = _689 / cbSceneParam._m0[86u].x;
    float _2036 = _690 / cbSceneParam._m0[86u].y;
    vec4 _2050 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2035, _2036, (log2((isnan(cbSceneParam._m0[77u].w) ? _657 : (isnan(_657) ? cbSceneParam._m0[77u].w : min(_657, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2052 = _2050.x;
    float _2053 = _2050.y;
    float _2054 = _2050.z;
    float _2055 = _2050.w;
    float _2135;
    float _2137;
    float _2139;
    float _2141;
    if (_657 > cbSceneParam._m0[78u].w)
    {
        float _2097 = isnan(_657) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _657 : min(cbSceneParam._m0[80u].w, _657));
        float _2098 = _2097 / _657;
        float _2109 = _2098 * _271;
        float _2110 = _272 * _2098;
        float _2111 = (-0.0) - _2110;
        float _2112 = _2098 * _273;
        float _2114 = (cbSceneParam._m0[77u].w * _2111) / _2097;
        float _2115 = _2114 + cbSceneParam._m0[79u].w;
        float _2116 = cbSceneParam._m0[79u].w - _2110;
        float _2122 = sqrt(((_2109 * _2109) + (_2110 * _2110)) + (_2112 * _2112));
        float _2125 = (1.0 - (cbSceneParam._m0[77u].w / _2097)) * _2122;
        float _2131 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2133 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2373;
        if (abs((_2111 - _2114) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2373 = ((((_2115 > 0.0) ? exp2(_2131 * _2115) : (2.0 - exp2(_2133 * _2115))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2125;
        }
        else
        {
            float _2292 = 1.0 / cbSceneParam._m0[80u].x;
            float _2293 = isnan(_2116) ? _2115 : (isnan(_2115) ? _2116 : max(_2115, _2116));
            float _2294 = isnan(_2116) ? _2115 : (isnan(_2115) ? _2116 : min(_2115, _2116));
            float _2303 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : min(_2293, 0.0));
            float _2304 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : min(_2294, 0.0));
            _2373 = ((abs(_2122 / _2111) * cbSceneParam._m0[80u].y) * ((((_2303 - _2304) * 2.0) - ((exp2(_2131 * (isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0)))) - exp2(_2131 * (isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0))))) * _2292)) - ((exp2(_2133 * _2303) - exp2(_2133 * _2304)) * _2292))) + (_2125 * cbSceneParam._m0[80u].z);
        }
        vec4 _2375 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2035, _2036, 1.0), 0.0);
        float _2384 = exp2((_2373 * (-1.44269502162933349609375)) * (1.0 - _2375.w));
        float _2385 = log2(_2384);
        float _2401 = log2(_2055);
        _2135 = (exp2(_2401 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2385 * cbSceneParam._m0[78u].x)) * _2375.x) / cbSceneParam._m0[78u].x)) + _2052;
        _2137 = (exp2(_2401 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2385 * cbSceneParam._m0[78u].y)) * _2375.y) / cbSceneParam._m0[78u].y)) + _2053;
        _2139 = (exp2(_2401 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2385 * cbSceneParam._m0[78u].z)) * _2375.z) / cbSceneParam._m0[78u].z)) + _2054;
        _2141 = _2384 * _2055;
    }
    else
    {
        _2135 = _2052;
        _2137 = _2053;
        _2139 = _2054;
        _2141 = _2055;
    }
    bool _2411;
    vec4 _2150;
    vec4 _2173;
    float _2175;
    float _2179;
    float _2180;
    float _2181;
    float _2184;
    float _2187;
    float _2190;
    float _2191;
    bool _2202;
    for (;;)
    {
        _2150 = cbMatDynParam._m0[0u];
        float _2152 = roundEven(_2150.y);
        bool _2153 = _2152 == 3.0;
        float _2155 = log2(_2141);
        float _2159 = exp2(_2155 * cbSceneParam._m0[78u].x);
        float _2160 = exp2(_2155 * cbSceneParam._m0[78u].y);
        float _2161 = exp2(_2155 * cbSceneParam._m0[78u].z);
        float _2162 = _2159 * _2014;
        float _2163 = _2160 * _2015;
        float _2164 = _2161 * _2016;
        float _2171 = _671 + (-0.5);
        _2173 = cbMtdParam._m0[1u];
        _2175 = _2173.y * _2171;
        float _2178 = (_2152 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2179 = _2178 * (_2153 ? _2162 : (_2162 + (cbSceneParam._m0[72u].w * _2135)));
        _2180 = _2178 * (_2153 ? _2163 : (_2163 + (cbSceneParam._m0[72u].w * _2137)));
        _2181 = _2178 * (_2153 ? _2164 : (_2164 + (cbSceneParam._m0[72u].w * _2139)));
        _2184 = ((_2022 * _2026) * _2159) * _2178;
        _2187 = ((_2023 * _2026) * _2160) * _2178;
        _2190 = ((_2024 * _2026) * _2161) * _2178;
        _2191 = _2171 * 0.999000012874603271484375;
        _2202 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2202)
        {
            if ((cbInstanceData._m0[_703 + 7u].x + _2191) < 0.5)
            {
                _2411 = true;
                break;
            }
        }
        uint _2327 = _705 + uint(_2150.w);
        if ((cbInstanceData._m0[_2327].w < 1.0) && ((cbInstanceData._m0[_2327].w + _2191) < 0.5))
        {
            _2411 = true;
            break;
        }
        if ((_2175 + 1.0) < _2173.x)
        {
            _2411 = true;
            break;
        }
        _2411 = false;
        break;
    }
    float _2592;
    if (_2411)
    {
        discard_state = true;
        _2592 = 0.0;
    }
    else
    {
        _2592 = cbInstanceData._m0[_2027].w;
    }
    SV_Target.x = _2179;
    SV_Target.y = _2180;
    SV_Target.z = _2181;
    SV_Target.w = _2592;
    SV_Target_1.x = _2184;
    SV_Target_1.y = _2187;
    SV_Target_1.z = _2190;
    SV_Target_1.w = cbInstanceData._m0[_2027].w;
    discard_exit();
}


