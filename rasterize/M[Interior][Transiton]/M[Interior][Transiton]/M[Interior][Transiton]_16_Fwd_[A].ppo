#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1508;
float _3701;
float _3702;
float _3703;
float _3704;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _278 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _288 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _278);
    float _289 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _278);
    float _290 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _278);
    vec4 _304 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _307 = _304.x;
    vec4 _325 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _342 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _307) + cbMtdParam._m0[12u].x) * _325.x;
    float _344 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _307) + cbMtdParam._m0[12u].y) * _325.y;
    float _346 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _307) + cbMtdParam._m0[12u].z) * _325.z;
    vec4 _364 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _403 = cbMtdParam._m0[27u].w + _288;
    float _404 = cbMtdParam._m0[28u].x + _289;
    float _405 = cbMtdParam._m0[28u].y + _290;
    float _419 = (-0.0) - dot(vec3(_403, _404, _405), vec3(_218, _219, _220));
    float _420 = (-0.0) - dot(vec3(_403, _404, _405), vec3(_232, _233, _234));
    float _421 = (-0.0) - dot(vec3(_403, _404, _405), vec3((-0.0) - _225, (-0.0) - _226, (-0.0) - _227));
    float _425 = inversesqrt(dot(vec3(_419, _420, _421), vec3(_419, _420, _421)));
    float _428 = _425 * _421;
    float _429 = (_425 * _419) + ((cbMtdParam._m0[25u].w * _307) * ((_364.x * 2.0) + (-1.0)));
    float _430 = (_425 * _420) + ((cbMtdParam._m0[26u].x * _307) * ((_364.y * 2.0) + (-1.0)));
    float _431 = _429 * cbMtdParam._m0[24u].x;
    float _432 = _430 * cbMtdParam._m0[23u].w;
    float _433 = fract(TEXCOORD.x);
    float _434 = fract(TEXCOORD.y);
    float _440;
    if (_431 > 0.0)
    {
        _440 = (1.0 - _433) / _431;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_431 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _433) / _431;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _440 = frontier_phi_3_2_ladder;
    }
    float _448;
    if (_432 > 0.0)
    {
        _448 = (1.0 - _434) / _432;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_432 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _434) / _432;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _448 = frontier_phi_7_6_ladder;
    }
    bool _450 = _428 > 0.0;
    float _452 = _450 ? (cbMtdParam._m0[17u].x / _428) : 5000.0;
    float _453 = isnan(_448) ? _440 : (isnan(_440) ? _448 : min(_440, _448));
    float _454 = isnan(_452) ? _453 : (isnan(_453) ? _452 : min(_453, _452));
    float _458 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _459 = _433 + (-0.5);
    float _462 = _434 + (-0.5);
    float _465 = ((_454 * _428) + _458) / _458;
    vec4 _490 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_459 + (_454 * _431)) / _465) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_462 + (_454 * _432)) / _465) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _503 = (_490.x * _307) * cbMtdParam._m0[9u].x;
    float _504 = (_490.y * _307) * cbMtdParam._m0[9u].y;
    float _505 = (_490.z * _307) * cbMtdParam._m0[9u].z;
    float _523 = _429 * cbMtdParam._m0[26u].z;
    float _524 = _430 * cbMtdParam._m0[26u].y;
    bool _525 = _523 > 0.0;
    float _530;
    if (_525)
    {
        _530 = (1.0 - _433) / _523;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _433) / _523;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _530 = frontier_phi_11_10_ladder;
    }
    bool _532 = _524 > 0.0;
    float _537;
    if (_532)
    {
        _537 = (1.0 - _434) / _524;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_524 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _434) / _524;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _537 = frontier_phi_15_14_ladder;
    }
    float _540 = _450 ? (cbMtdParam._m0[19u].z / _428) : 5000.0;
    float _541 = isnan(_537) ? _530 : (isnan(_530) ? _537 : min(_530, _537));
    float _542 = isnan(_540) ? _541 : (isnan(_541) ? _540 : min(_541, _540));
    float _546 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _550 = ((_542 * _428) + _546) / _546;
    float _555 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _557 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _573 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_459 + (_542 * _523)) / _550) + 0.5) + _555) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_462 + (_542 * _524)) / _550) + 0.5) + _557) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _588;
    if (_525)
    {
        _588 = (1.0 - _433) / _523;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _433) / _523;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _588 = frontier_phi_19_18_ladder;
    }
    float _594;
    if (_532)
    {
        _594 = (1.0 - _434) / _524;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_524 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _434) / _524;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _594 = frontier_phi_23_22_ladder;
    }
    float _596 = isnan(_594) ? _588 : (isnan(_588) ? _594 : min(_588, _594));
    float _597 = isnan(_540) ? _596 : (isnan(_596) ? _540 : min(_596, _540));
    float _604 = ((_597 * _428) + _546) / _546;
    vec4 _624 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_459 + (_597 * _523)) / _604) + 0.5) + _555) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_462 + (_597 * _524)) / _604) + 0.5) + _557) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _626 = _624.x;
    float _636 = (((((cbMtdParam._m0[10u].x * _307) * _573.x) - _503) * _307) * _626) + _503;
    float _637 = (((((cbMtdParam._m0[10u].y * _307) * _573.y) - _504) * _307) * _626) + _504;
    float _638 = (((((cbMtdParam._m0[10u].z * _307) * _573.z) - _505) * _307) * _626) + _505;
    float _651 = _429 * cbMtdParam._m0[27u].x;
    float _652 = _430 * cbMtdParam._m0[26u].w;
    bool _653 = _651 > 0.0;
    float _658;
    if (_653)
    {
        _658 = (1.0 - _433) / _651;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_651 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _433) / _651;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _658 = frontier_phi_27_26_ladder;
    }
    bool _660 = _652 > 0.0;
    float _665;
    if (_660)
    {
        _665 = (1.0 - _434) / _652;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_652 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _434) / _652;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _665 = frontier_phi_31_30_ladder;
    }
    float _668 = _450 ? (cbMtdParam._m0[23u].x / _428) : 5000.0;
    float _669 = isnan(_665) ? _658 : (isnan(_658) ? _665 : min(_658, _665));
    float _670 = isnan(_668) ? _669 : (isnan(_669) ? _668 : min(_669, _668));
    float _674 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _678 = ((_670 * _428) + _674) / _674;
    float _683 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _685 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _701 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_459 + (_670 * _651)) / _678) + 0.5) + _683) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_462 + (_670 * _652)) / _678) + 0.5) + _685) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _716;
    if (_653)
    {
        _716 = (1.0 - _433) / _651;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_651 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _433) / _651;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _716 = frontier_phi_35_34_ladder;
    }
    float _722;
    if (_660)
    {
        _722 = (1.0 - _434) / _652;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_652 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _434) / _652;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _722 = frontier_phi_39_38_ladder;
    }
    float _724 = isnan(_722) ? _716 : (isnan(_716) ? _722 : min(_716, _722));
    float _725 = isnan(_668) ? _724 : (isnan(_724) ? _668 : min(_724, _668));
    float _732 = ((_725 * _428) + _674) / _674;
    vec4 _752 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_459 + (_725 * _651)) / _732) + 0.5) + _683) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_462 + (_725 * _652)) / _732) + 0.5) + _685) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _754 = _752.x;
    float _764 = _307 * 0.1500000059604644775390625;
    float _775 = (_764 * ((_636 - _342) + (((((cbMtdParam._m0[13u].x * _307) * _701.x) - _636) * _307) * _754))) + _342;
    float _776 = (_764 * ((_637 - _344) + (((((cbMtdParam._m0[13u].y * _307) * _701.y) - _637) * _307) * _754))) + _344;
    float _777 = (_764 * ((_638 - _346) + (((((cbMtdParam._m0[13u].z * _307) * _701.z) - _638) * _307) * _754))) + _346;
    vec4 _790 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _794 = _790.z;
    float _797 = (_790.x * 2.0) + (-1.0);
    float _798 = (_790.y * 2.0) + (-1.0);
    float _799 = dot(vec2(_797, _798), vec2(_797, _798));
    float _3763 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _804 = sqrt(1.0 - (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))));
    vec4 _828 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _833 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _839 = ((_828.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _841 = (-0.0) - (cbMtdParam._m0[21u].x * ((_828.x * 0.5) + (-0.25)));
    float _842 = fract(_833);
    float _844 = fract(_833 + 0.5);
    vec4 _871 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_842 * _841) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_839 * _842) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _873 = _871.x;
    float _879 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_844 * _841) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_839 * _844) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _873) * abs((_842 * 2.0) + (-1.0))) + _873;
    float _885 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _889 = fract(abs(_885));
    float _898 = sin(cbMtdParam._m0[21u].z);
    float _899 = cos(cbMtdParam._m0[21u].z);
    float _900 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _901 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _931 = abs(cbMtdParam._m0[20u].w * (((_879 - (((_885 >= ((-0.0) - _885)) ? _889 : ((-0.0) - _889)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_901, (-0.0) - _898, _899 * _900) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_901, _899, _900 * _898) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _935 = (((_931 * cbMtdParam._m0[18u].y) - _879) * _931) + _879;
    float _3774 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _936 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    vec4 _948 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _963 = (cbMtdParam._m0[14u].x * _948.x) * cbMtdParam._m0[19u].x;
    float _964 = (cbMtdParam._m0[14u].y * _948.y) * cbMtdParam._m0[19u].x;
    float _965 = (cbMtdParam._m0[14u].z * _948.z) * cbMtdParam._m0[19u].x;
    float _975 = exp2(log2(_936) * cbMtdParam._m0[20u].x);
    float _988 = fma(_804, _225, fma(_798, _232, _797 * _218));
    float _991 = fma(_804, _226, fma(_798, _233, _797 * _219));
    float _994 = fma(_804, _227, fma(_798, _234, _797 * _220));
    float _998 = inversesqrt(dot(vec3(_988, _991, _994), vec3(_988, _991, _994)));
    float _999 = _998 * _988;
    float _1000 = _998 * _991;
    float _1001 = _998 * _994;
    float _3785 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _1002 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _3807 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _3818 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _1021 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1025 = inversesqrt(dot(vec3(_288, _289, _290), vec3(_288, _289, _290)));
    float _1026 = _288 * _1025;
    float _1027 = _289 * _1025;
    float _1028 = _290 * _1025;
    vec4 _1033 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1035 = _1033.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1190 = sqrt(((_288 * _288) + (_289 * _289)) + (_290 * _290));
        float _1196 = (cbMatDynParam._m0[5u].x * _1190) + cbMatDynParam._m0[5u].y;
        float _3829 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1201 = (cbMatDynParam._m0[5u].z * _1190) + cbMatDynParam._m0[5u].w;
        float _3840 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) - _1197)) + _1197) < ((_1035 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1047 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1048 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1066 = fma(_1001, cbSceneParam._m0[5u].z, fma(_1000, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _999));
    float _1069 = fma(_1001, cbSceneParam._m0[6u].z, fma(_1000, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _999));
    float _1072 = fma(_1001, cbSceneParam._m0[7u].z, fma(_1000, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _999));
    uint _1085 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1086 = _1085 + 9u;
    uint _1087 = _1086 + uint(cbMatDynParam._m0[0u].w);
    float _1093 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_1087].x;
    float _1094 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_1087].y;
    float _1095 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * cbInstanceData._m0[_1087].z;
    float _3851 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1097 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _3873 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    vec4 _1107 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1047, cbSceneParam._m0[86u].y * _1048));
    float _1110 = _1107.x * TEXCOORD_4;
    float _1111 = dot(vec3(_999, _1000, _1001), vec3(_1026, _1027, _1028));
    float _1114 = _1111 * 2.0;
    float _1118 = (_1114 * _999) - _1026;
    float _1119 = (_1114 * _1000) - _1027;
    float _1120 = (_1114 * _1001) - _1028;
    float _1124 = abs(dot(vec3(_1026, _1027, _1028), vec3(_999, _1000, _1001)));
    float _3884 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1126 = sqrt(_1002);
    float _1139 = exp2((_1126 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1126 * 3.0));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1507;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1234 = fma(_1179, cbModelParam._m0[26u].z, fma(_1175, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171));
        float _1238 = fma(_1179, cbModelParam._m0[27u].z, fma(_1175, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171));
        float _1242 = fma(_1179, cbModelParam._m0[28u].z, fma(_1175, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171));
        float _1265 = _1171 + _999;
        float _1266 = _1175 + _1000;
        float _1267 = _1179 + _1001;
        float _1277 = fma(_1267, cbModelParam._m0[26u].z, fma(_1266, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1265)) - _1234;
        float _1278 = fma(_1267, cbModelParam._m0[27u].z, fma(_1266, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1265)) - _1238;
        float _1279 = fma(_1267, cbModelParam._m0[28u].z, fma(_1266, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1265)) - _1242;
        float _1283 = inversesqrt(dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279)));
        float _1296 = ((_1283 * _1277) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1234 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1283 * _1278) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1238 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1283 * _1279) / cbModelParam._m0[34u].z) + ((((((_1242 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        float _1335 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1301.x + (-0.5));
        float _1337 = _1335 * (_1301.y + (-0.5));
        float _1338 = _1335 * (_1301.z + (-0.5));
        float _1345 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1308.x + (-0.5));
        float _1347 = _1345 * (_1308.y + (-0.5));
        float _1348 = _1345 * (_1308.z + (-0.5));
        float _1355 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1315.x + (-0.5));
        float _1357 = _1355 * (_1315.y + (-0.5));
        float _1358 = _1355 * (_1315.z + (-0.5));
        float _1365 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1322.x + (-0.5));
        float _1367 = _1365 * (_1322.y + (-0.5));
        float _1368 = _1365 * (_1322.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1389 = (dot(vec3(_999, _1000, _1001), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1399 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3932 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1401 + 1.0))) + _1406) * _1369;
        float _1416 = _1337 * 0.5;
        float _1417 = _1347 * 0.5;
        float _1418 = _1357 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_999, _1000, _1001), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _3965 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1443 + 1.0))) + _1448) * _1370;
        float _1458 = _1338 * 0.5;
        float _1459 = _1348 * 0.5;
        float _1460 = _1358 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_999, _1000, _1001), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _3998 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1485 + 1.0))) + _1490) * _1371;
        _1507 = _1338;
        _1509 = _1337;
        _1510 = _1336;
        _1511 = _1348;
        _1512 = _1347;
        _1513 = _1346;
        _1514 = _1358;
        _1515 = _1357;
        _1516 = _1356;
        _1517 = _1371;
        _1518 = _1370;
        _1519 = _1369;
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    }
    else
    {
        _1507 = _1508;
        _1509 = _1508;
        _1510 = _1508;
        _1511 = _1508;
        _1512 = _1508;
        _1513 = _1508;
        _1514 = _1508;
        _1515 = _1508;
        _1516 = _1508;
        _1517 = _1508;
        _1518 = _1508;
        _1519 = _1508;
        _1520 = 0.0;
        _1521 = 0.0;
        _1522 = 0.0;
    }
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1550 = fma(_1179, cbModelParam._m0[30u].z, fma(_1175, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171));
        float _1554 = fma(_1179, cbModelParam._m0[31u].z, fma(_1175, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171));
        float _1558 = fma(_1179, cbModelParam._m0[32u].z, fma(_1175, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171));
        float _1581 = _1171 + _999;
        float _1582 = _1175 + _1000;
        float _1583 = _1179 + _1001;
        float _1593 = fma(_1583, cbModelParam._m0[30u].z, fma(_1582, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1581)) - _1550;
        float _1594 = fma(_1583, cbModelParam._m0[31u].z, fma(_1582, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1581)) - _1554;
        float _1595 = fma(_1583, cbModelParam._m0[32u].z, fma(_1582, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1581)) - _1558;
        float _1599 = inversesqrt(dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595)));
        float _1612 = ((_1599 * _1593) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1550 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1613 = ((_1599 * _1594) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1554 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1614 = ((_1599 * _1595) / cbModelParam._m0[35u].z) + ((((((_1558 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1616 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1612, _1613, _1614), 0.0);
        float _1649 = exp2((_1616.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1616.x + (-0.5));
        float _1651 = _1649 * (_1616.y + (-0.5));
        float _1652 = _1649 * (_1616.z + (-0.5));
        float _1659 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1623.x + (-0.5));
        float _1661 = _1659 * (_1623.y + (-0.5));
        float _1662 = _1659 * (_1623.z + (-0.5));
        float _1669 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1630.x + (-0.5));
        float _1671 = _1669 * (_1630.y + (-0.5));
        float _1672 = _1669 * (_1630.z + (-0.5));
        float _1679 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1637.x + (-0.5));
        float _1681 = _1679 * (_1637.y + (-0.5));
        float _1682 = _1679 * (_1637.z + (-0.5));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1686 = _1650 * 0.5;
        float _1687 = _1660 * 0.5;
        float _1688 = _1670 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_999, _1000, _1001), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4061 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1713 + 1.0))) + _1718) * _1683;
        float _1728 = _1651 * 0.5;
        float _1729 = _1661 * 0.5;
        float _1730 = _1671 * 0.5;
        float _1731 = dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730));
        float _1736 = (_1731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1731);
        float _1744 = (dot(vec3(_999, _1000, _1001), vec3(_1736 * _1728, _1736 * _1729, _1736 * _1730)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1753 = sqrt(((_1729 * _1729) + (_1728 * _1728)) + (_1730 * _1730)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1755 = _1754 * 2.0;
        float _1759 = (1.0 - _1754) / (_1754 + 1.0);
        float _4094 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1769 = ((((1.0 - _1760) * (_1755 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1755 + 1.0))) + _1760) * _1684;
        float _1770 = _1652 * 0.5;
        float _1771 = _1662 * 0.5;
        float _1772 = _1672 * 0.5;
        float _1773 = dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772));
        float _1778 = (_1773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1773);
        float _1786 = (dot(vec3(_999, _1000, _1001), vec3(_1778 * _1770, _1778 * _1771, _1778 * _1772)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1795 = sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772)) / (_1685 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1797 = _1796 * 2.0;
        float _1801 = (1.0 - _1796) / (_1796 + 1.0);
        float _4127 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1811 = ((((1.0 - _1802) * (_1797 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1797 + 1.0))) + _1802) * _1685;
        _1819 = _1652;
        _1820 = _1651;
        _1821 = _1650;
        _1822 = _1662;
        _1823 = _1661;
        _1824 = _1660;
        _1825 = _1672;
        _1826 = _1671;
        _1827 = _1670;
        _1828 = _1685;
        _1829 = _1684;
        _1830 = _1683;
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)));
        _1833 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)));
    }
    else
    {
        _1819 = _1508;
        _1820 = _1508;
        _1821 = _1508;
        _1822 = _1508;
        _1823 = _1508;
        _1824 = _1508;
        _1825 = _1508;
        _1826 = _1508;
        _1827 = _1508;
        _1828 = _1508;
        _1829 = _1508;
        _1830 = _1508;
        _1831 = 0.0;
        _1832 = 0.0;
        _1833 = 0.0;
    }
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1520)) + _1520;
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1521)) + _1521;
    float _1845 = (cbModelParam._m0[1u].x * (_1833 - _1522)) + _1522;
    float _1866 = fma(_1845, cbSceneParam._m0[89u].z, fma(_1844, cbSceneParam._m0[89u].y, _1843 * cbSceneParam._m0[89u].x));
    float _1869 = fma(_1845, cbSceneParam._m0[90u].z, fma(_1844, cbSceneParam._m0[90u].y, _1843 * cbSceneParam._m0[90u].x));
    float _1872 = fma(_1845, cbSceneParam._m0[91u].z, fma(_1844, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1843));
    float _1887 = _1118 * 0.5;
    float _1888 = _1119 * 0.5;
    float _1889 = _1120 * 0.5;
    float _1890 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1821, _1824, _1827, _1830));
    float _1893 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1896 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1930;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1903 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1507, _1511, _1514, _1517));
        float _1907 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1509, _1512, _1515, _1518));
        float _1911 = dot(vec4(_1887, _1888, _1889, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1918 = dot(vec4(cbModelParam._m0[39u]), vec4(_1887, _1888, _1889, 1.0));
        _1930 = dot(vec3(isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1918) ? 0.0 : (isnan(0.0) ? _1918 : max(0.0, _1918))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1930 = 1.0;
    }
    float _1941;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1932 = dot(vec4(cbModelParam._m0[40u]), vec4(_1887, _1888, _1889, 1.0));
        _1941 = dot(vec3(isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1932) ? 0.0 : (isnan(0.0) ? _1932 : max(0.0, _1932))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1941 = 1.0;
    }
    float _1945 = (_1941 * cbModelParam._m0[1u].x) + (_1930 * (1.0 - cbModelParam._m0[1u].x));
    float _1955 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1002);
    float _1956 = isnan(_1955) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1955 : min(cbModelParam._m0[25u].z, _1955));
    float _2037;
    float _2039;
    float _2041;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2004 = fma(_1179, cbModelParam._m0[13u].z, fma(_1175, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1171)) + cbModelParam._m0[13u].w;
        float _2008 = fma(_1179, cbModelParam._m0[14u].z, fma(_1175, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1171)) + cbModelParam._m0[14u].w;
        float _2012 = fma(_1179, cbModelParam._m0[15u].z, fma(_1175, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1171)) + cbModelParam._m0[15u].w;
        float _2015 = fma(_1120, cbModelParam._m0[13u].z, fma(_1119, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1118));
        float _2018 = fma(_1120, cbModelParam._m0[14u].z, fma(_1119, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1118));
        float _2021 = fma(_1120, cbModelParam._m0[15u].z, fma(_1119, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1118));
        float _2049;
        if (_2015 > 0.0)
        {
            _2049 = abs((1.0 - _2004) / _2015);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_2004 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _2049 = frontier_phi_57_55_ladder;
        }
        float _2394;
        if (_2018 > 0.0)
        {
            _2394 = abs((1.0 - _2008) / _2018);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_2008 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2394 = frontier_phi_66_62_ladder;
        }
        float _2736;
        if (_2021 > 0.0)
        {
            _2736 = abs((1.0 - _2012) / _2021);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_2012 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2736 = frontier_phi_80_73_ladder;
        }
        float _2738 = isnan(_2394) ? _2049 : (isnan(_2049) ? _2394 : min(_2049, _2394));
        float _2739 = isnan(_2736) ? _2738 : (isnan(_2738) ? _2736 : min(_2738, _2736));
        float _2743 = (_2739 * _2015) + _2004;
        float _2744 = (_2739 * _2018) + _2008;
        float _2745 = (_2739 * _2021) + _2012;
        float _2746 = _2739 * 9.9999997473787516355514526367188e-05;
        float _2747 = (-1.0) - _2746;
        float _2749 = _2746 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2745 > _2749) || ((_2745 < _2747) || ((_2744 > _2749) || ((_2744 < _2747) || ((_2743 < _2747) || (_2743 > _2749))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2887 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2745, cbModelParam._m0[9u].z, fma(_2744, cbModelParam._m0[9u].y, _2743 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2745, cbModelParam._m0[10u].z, fma(_2744, cbModelParam._m0[10u].y, _2743 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2745, cbModelParam._m0[11u].z, fma(_2744, cbModelParam._m0[11u].y, _2743 * cbModelParam._m0[11u].x))), _1956);
            frontier_phi_56_80_ladder = _2887.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2887.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2887.x * cbModelParam._m0[1u].y;
        }
        _2037 = frontier_phi_56_80_ladder_2;
        _2039 = frontier_phi_56_80_ladder_1;
        _2041 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _2025 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1118, _1119, _1120), _1956);
        _2037 = _2025.x * cbModelParam._m0[1u].y;
        _2039 = _2025.y * cbModelParam._m0[1u].y;
        _2041 = _2025.z * cbModelParam._m0[1u].y;
    }
    float _2045 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1002);
    float _2046 = isnan(_2045) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2045 : min(cbModelParam._m0[25u].w, _2045));
    float _2134;
    float _2136;
    float _2138;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2098 = fma(_1179, cbModelParam._m0[21u].z, fma(_1175, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1171)) + cbModelParam._m0[21u].w;
        float _2102 = fma(_1179, cbModelParam._m0[22u].z, fma(_1175, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1171)) + cbModelParam._m0[22u].w;
        float _2106 = fma(_1179, cbModelParam._m0[23u].z, fma(_1175, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1171)) + cbModelParam._m0[23u].w;
        float _2109 = fma(_1120, cbModelParam._m0[21u].z, fma(_1119, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1118));
        float _2112 = fma(_1120, cbModelParam._m0[22u].z, fma(_1119, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1118));
        float _2115 = fma(_1120, cbModelParam._m0[23u].z, fma(_1119, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1118));
        float _2399;
        if (_2109 > 0.0)
        {
            _2399 = abs((1.0 - _2098) / _2109);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_2098 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2399 = frontier_phi_68_64_ladder;
        }
        float _2762;
        if (_2112 > 0.0)
        {
            _2762 = abs((1.0 - _2102) / _2112);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_2102 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2762 = frontier_phi_82_75_ladder;
        }
        float _2952;
        if (_2115 > 0.0)
        {
            _2952 = abs((1.0 - _2106) / _2115);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_2106 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2952 = frontier_phi_100_93_ladder;
        }
        float _2954 = isnan(_2762) ? _2399 : (isnan(_2399) ? _2762 : min(_2399, _2762));
        float _2955 = isnan(_2952) ? _2954 : (isnan(_2954) ? _2952 : min(_2954, _2952));
        float _2959 = (_2955 * _2109) + _2098;
        float _2960 = (_2955 * _2112) + _2102;
        float _2961 = (_2955 * _2115) + _2106;
        float _2962 = _2955 * 9.9999997473787516355514526367188e-05;
        float _2963 = (-1.0) - _2962;
        float _2965 = _2962 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2961 > _2965) || ((_2961 < _2963) || ((_2960 > _2965) || ((_2960 < _2963) || ((_2959 < _2963) || (_2959 > _2965))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3203 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2961, cbModelParam._m0[17u].z, fma(_2960, cbModelParam._m0[17u].y, _2959 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2961, cbModelParam._m0[18u].z, fma(_2960, cbModelParam._m0[18u].y, _2959 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2961, cbModelParam._m0[19u].z, fma(_2960, cbModelParam._m0[19u].y, _2959 * cbModelParam._m0[19u].x))), _2046);
            frontier_phi_65_100_ladder = _3203.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3203.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3203.z * cbModelParam._m0[1u].z;
        }
        _2134 = frontier_phi_65_100_ladder_1;
        _2136 = frontier_phi_65_100_ladder;
        _2138 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _2118 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1118, _1119, _1120), _2046);
        _2134 = _2118.x * cbModelParam._m0[1u].z;
        _2136 = _2118.y * cbModelParam._m0[1u].z;
        _2138 = _2118.z * cbModelParam._m0[1u].z;
    }
    float _2150 = ((((1.0 - _1139) * ((_1126 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1139 * _1126)) * _1110;
    float _2151 = _2150 * ((cbModelParam._m0[1u].w * (_2134 - _2037)) + _2037);
    float _2152 = _2150 * ((cbModelParam._m0[1u].w * (_2136 - _2039)) + _2039);
    float _2153 = _2150 * ((cbModelParam._m0[1u].w * (_2138 - _2041)) + _2041);
    float _2156 = fma(_2153, cbSceneParam._m0[89u].z, fma(_2152, cbSceneParam._m0[89u].y, _2151 * cbSceneParam._m0[89u].x));
    float _2159 = fma(_2153, cbSceneParam._m0[90u].z, fma(_2152, cbSceneParam._m0[90u].y, _2151 * cbSceneParam._m0[90u].x));
    float _2162 = fma(_2153, cbSceneParam._m0[91u].z, fma(_2152, cbSceneParam._m0[91u].y, _2151 * cbSceneParam._m0[91u].x));
    uvec4 _2172 = floatBitsToUint(cbInstanceData._m0[_1085 + 5u]);
    uint _2174 = _2172.x * 14u;
    uint _2175 = _2174 + 13u;
    float _2180 = _1110 + (-1.0);
    float _2183 = (cbLight._m0[_2175].x * _2180) + 1.0;
    float _2184 = (cbLight._m0[_2175].y * _2180) + 1.0;
    uint _2185 = _2174 + 5u;
    float _2191 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2195 = _2174 + 4u;
    float _2201 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2205 = _2174 | 1u;
    float _2216 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_999, _1000, _1001));
    float _2219 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_999, _1000, _1001));
    float _4263 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _4274 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2224 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * 0.3183098733425140380859375;
    float _2226 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * 0.3183098733425140380859375;
    float _2233 = ((cbLight._m0[_2185].x * _2191) * _2226) + ((cbLight._m0[_2195].x * _2201) * _2224);
    float _2234 = ((_2191 * cbLight._m0[_2185].y) * _2226) + ((_2201 * cbLight._m0[_2195].y) * _2224);
    float _2235 = ((_2191 * cbLight._m0[_2185].z) * _2226) + ((_2201 * cbLight._m0[_2195].z) * _2224);
    uint _2237 = _2174 + 8u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _1002) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_2174].x + _1026;
    float _2253 = cbLight._m0[_2174].y + _1027;
    float _2254 = cbLight._m0[_2174].z + _1028;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_999, _1000, _1001), vec3(cbLight._m0[_2174].xyz));
    float _4285 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _4296 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _2266 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2267 = dot(vec3(_999, _1000, _1001), vec3(_2259, _2260, _2261));
    float _4307 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2259, _2260, _2261));
    float _4318 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2251 * _2251;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2290 = (exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2291 = 1.0 - _2251;
    float _2302 = (0.5 / (((_2266 * ((_2265 * _2291) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2291) + _2251) * _2265))) * _2265;
    float _4329 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    uint _2315 = _2174 + 9u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _1002) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2205].x + _1026;
    float _2329 = cbLight._m0[_2205].y + _1027;
    float _2330 = cbLight._m0[_2205].z + _1028;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_999, _1000, _1001), vec3(cbLight._m0[_2205].xyz));
    float _4340 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2342 = dot(vec3(_999, _1000, _1001), vec3(_2335, _2336, _2337));
    float _4351 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2346 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2335, _2336, _2337));
    float _4362 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2350 = _2327 * _2327;
    float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
    float _2363 = (exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2364 = 1.0 - _2327;
    float _2374 = (0.5 / (((_2266 * ((_2341 * _2364) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2364) + _2327) * _2341))) * _2341;
    float _4373 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
    float _2386 = (((_2363 * cbLight._m0[_2315].x) * _2376) * _2191) + (((_2290 * cbLight._m0[_2237].x) * _2304) * _2201);
    float _2387 = (((_2363 * cbLight._m0[_2315].y) * _2376) * _2191) + (((_2290 * cbLight._m0[_2237].y) * _2304) * _2201);
    float _2388 = (((_2363 * cbLight._m0[_2315].z) * _2376) * _2191) + (((_2290 * cbLight._m0[_2237].z) * _2304) * _2201);
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    if (_2172.y == 0u)
    {
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2443;
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2443;
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2443;
        uvec4 _2458 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2459 = _2458.x;
        uint _2470 = uint((float(_2458.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1048) / _2459))) + floor(float(uint(cbSceneParam._m0[85u].x * _1047) / _2459)));
        float _2480 = (log2(_2446 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2481 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        uint _2484 = uint(isnan(14.0) ? _2481 : (isnan(_2481) ? 14.0 : min(_2481, 14.0)));
        uvec4 _2489 = texelFetch(g_lightClusterGridBuffer, int(((_2484 << 2u) + (_2470 << 6u)) >> 2u));
        uint _2490 = _2489.x;
        uint _2491 = _2458.z;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        if (((((1u << ((_2491 >> 4u) & 15u)) + 4294967295u) & _2490) == 0u) || ((_2491 & 240u) == 0u))
        {
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
        }
        else
        {
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            uint _2805 = 0u;
            uint _2814;
            bool _2815;
            for (;;)
            {
                _2814 = texelFetch(g_lightClassification, int((((_2484 << 5u) + (_2470 << 9u)) + (_2805 << 2u)) >> 2u)).x;
                _2815 = _2814 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2815)
                {
                    frontier_phi_95_pred = _2800;
                    frontier_phi_95_pred_1 = _2799;
                    frontier_phi_95_pred_2 = _2801;
                    frontier_phi_95_pred_3 = _2804;
                    frontier_phi_95_pred_4 = _2803;
                    frontier_phi_95_pred_5 = _2802;
                }
                else
                {
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    uint _3001;
                    _2995 = _2799;
                    _2996 = _2800;
                    _2997 = _2801;
                    _2998 = _2802;
                    _2999 = _2803;
                    _3000 = _2804;
                    _3001 = _2814;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    for (;;)
                    {
                        uint _3005 = uint(findLSB(_3001)) + (_2805 << 5u);
                        uint _3002 = (_3001 + 4294967295u) & _3001;
                        uint _3007 = _3005 * 48u;
                        vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3027 = (_3005 * 48u) + 4u;
                        vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 3u)).x));
                        uint _3046 = (_3005 * 48u) + 8u;
                        vec3 _3057 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x));
                        float _3061 = _3021.x - _2444;
                        float _3062 = _3021.y - _2445;
                        float _3063 = _3021.z - _2446;
                        float _3064 = dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063));
                        float _3067 = inversesqrt(_3064);
                        float _3068 = _3067 * _3061;
                        float _3069 = _3067 * _3062;
                        float _3070 = _3067 * _3063;
                        float _3071 = dot(vec3(_1066, _1069, _1072), vec3(_3068, _3069, _3070));
                        float _3076 = 1.0 - (_3064 * _3021.w);
                        float _4394 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3077 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3078 = sqrt(_3064) * _3040.w;
                        float _3081 = 1.39999997615814208984375 / (_3078 + 1.39999997615814208984375);
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3071) + _3082;
                        float _3088 = _3078 * _3078;
                        float _3092 = ((isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))) * _3077) / ((_3088 * 0.699999988079071044921875) + 1.0);
                        float _3096 = (-0.0) - _2444;
                        float _3097 = (-0.0) - _2445;
                        float _3098 = (-0.0) - _2446;
                        float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                        float _3103 = _3102 * _3096;
                        float _3104 = _3102 * _3097;
                        float _3105 = _3102 * _3098;
                        float _3113 = exp2(log2(1.0 / ((_3088 * 3.5) + 5.0)) * 0.25);
                        float _3114 = 1.0 - _1126;
                        float _3121 = sqrt(1.0 - ((1.0 - (_3114 * _3114)) * (1.0 - (_3113 * _3113))));
                        float _3122 = _3121 * _3121;
                        float _3123 = _3122 * _3122;
                        float _3124 = _3103 + _3068;
                        float _3125 = _3104 + _3069;
                        float _3126 = _3105 + _3070;
                        float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                        float _3134 = dot(vec3(_1066, _1069, _1072), vec3(_3103, _3104, _3105));
                        float _4410 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3137 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3138 = dot(vec3(_1066, _1069, _1072), vec3(_3130 * _3124, _3130 * _3125, _3130 * _3126));
                        float _4421 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3141 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3145 = ((_3141 * _3141) * (_3123 + (-1.0))) + 1.0;
                        float _3146 = _3081 * _3122;
                        float _3147 = _3146 * _3146;
                        float _3150 = ((1.0 - _3147) * _3071) + _3147;
                        float _4432 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3151 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3152 = 1.0 - _3122;
                        float _3162 = (0.5 / (((_3151 * ((_3137 * _3152) + _3122)) + 9.9999999392252902907785028219223e-09) + (((_3151 * _3152) + _3122) * _3137))) * _3151;
                        float _4443 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3173 = (((_3123 * 3.1415927410125732421875) * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) / ((_3145 * _3145) * ((_3088 * 2.1991131305694580078125) + 3.141590118408203125))) * _3077;
                        _2899 = (_3092 * _3040.x) + _2998;
                        _2900 = (_3092 * _3040.y) + _2999;
                        _2901 = (_3092 * _3040.z) + _3000;
                        _2896 = (_3173 * _3057.x) + _2995;
                        _2897 = (_3173 * _3057.y) + _2996;
                        _2898 = (_3173 * _3057.z) + _2997;
                        if (_3002 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2995 = _2896;
                            _2996 = _2897;
                            _2997 = _2898;
                            _2998 = _2899;
                            _2999 = _2900;
                            _3000 = _2901;
                            _3001 = _3002;
                        }
                    }
                    frontier_phi_95_pred = _2897;
                    frontier_phi_95_pred_1 = _2896;
                    frontier_phi_95_pred_2 = _2898;
                    frontier_phi_95_pred_3 = _2901;
                    frontier_phi_95_pred_4 = _2900;
                    frontier_phi_95_pred_5 = _2899;
                }
                _2610 = frontier_phi_95_pred;
                _2608 = frontier_phi_95_pred_1;
                _2612 = frontier_phi_95_pred_2;
                _2618 = frontier_phi_95_pred_3;
                _2616 = frontier_phi_95_pred_4;
                _2614 = frontier_phi_95_pred_5;
                uint _2806 = _2805 + 1u;
                if (_2806 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2799 = _2608;
                    _2800 = _2610;
                    _2801 = _2612;
                    _2802 = _2614;
                    _2803 = _2616;
                    _2804 = _2618;
                    _2805 = _2806;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
        }
        uvec4 _2621 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2622 = _2621.z;
        uint _2624 = (_2622 >> 8u) & 15u;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        if (((4294967295u << _2624) & _2490) == 0u)
        {
            _2767 = _2607;
            _2769 = _2609;
            _2771 = _2611;
            _2773 = _2613;
            _2775 = _2615;
            _2777 = _2617;
        }
        else
        {
            float _2792 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
            float _2793 = _2792 * _2444;
            float _2794 = _2792 * _2445;
            float _2795 = _2792 * _2446;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2624 < ((_2622 >> 12u) & 15u))
            {
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2978 = _2607;
                float _2979 = _2609;
                float _2980 = _2611;
                float _2981 = _2613;
                float _2982 = _2615;
                float _2983 = _2617;
                uint _2984 = _2624;
                uint _2993;
                bool _2994;
                for (;;)
                {
                    _2993 = texelFetch(g_lightClassification, int((((_2484 << 5u) + (_2470 << 9u)) + (_2984 << 2u)) >> 2u)).x;
                    _2994 = _2993 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2994)
                    {
                        frontier_phi_109_pred = _2979;
                        frontier_phi_109_pred_1 = _2978;
                        frontier_phi_109_pred_2 = _2983;
                        frontier_phi_109_pred_3 = _2982;
                        frontier_phi_109_pred_4 = _2981;
                        frontier_phi_109_pred_5 = _2980;
                    }
                    else
                    {
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3221 = _2978;
                        float _3222 = _2979;
                        float _3223 = _2980;
                        float _3224 = _2981;
                        float _3225 = _2982;
                        float _3226 = _2983;
                        uint _3227 = _2993;
                        uint _3228;
                        vec4 _3253;
                        float _3254;
                        vec4 _3269;
                        vec3 _3281;
                        vec4 _3297;
                        vec4 _3312;
                        float _3358;
                        bool _3359;
                        for (;;)
                        {
                            uint _3238 = ((_2984 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3227));
                            _3228 = (_3227 + 4294967295u) & _3227;
                            uint _3240 = _3238 * 40u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            _3254 = _3253.w;
                            uint _3256 = (_3238 * 40u) + 4u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3271 = (_3238 * 40u) + 8u;
                            _3281 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x));
                            uint _3284 = (_3238 * 40u) + 16u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3238 * 40u) + 20u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3238 * 40u) + 24u;
                            vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3333 = (_3238 * 40u) + 28u;
                            vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            _3358 = fma(_2446, _3346.z, fma(_2445, _3346.y, _3346.x * _2444)) + _3346.w;
                            _3359 = !((fma(_2446, _3327.z, fma(_2445, _3327.y, _3327.x * _2444)) + _3327.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3359)
                            {
                                float _3386 = _3253.x - _2444;
                                float _3387 = _3253.y - _2445;
                                float _3388 = _3253.z - _2446;
                                float _3389 = dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388));
                                float _3392 = inversesqrt(_3389);
                                float _3393 = _3392 * _3386;
                                float _3394 = _3392 * _3387;
                                float _3395 = _3392 * _3388;
                                float _3399 = 1.0 - (_3389 / (_3254 * _3254));
                                float _4454 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3404 = sqrt(_3389) * _3269.w;
                                float _3406 = 1.39999997615814208984375 / (_3404 + 1.39999997615814208984375);
                                float _3407 = _3406 * _3406;
                                float _3410 = ((1.0 - _3407) * dot(vec3(_3393, _3394, _3395), vec3(_1066, _1069, _1072))) + _3407;
                                float _3413 = _3404 * _3404;
                                float _3417 = (fma(_2446, _3297.z, fma(_2445, _3297.y, _3297.x * _2444)) + _3297.w) / _3358;
                                float _3418 = (fma(_2446, _3312.z, fma(_2445, _3312.y, _3312.x * _2444)) + _3312.w) / _3358;
                                float _3422 = 1.0 - dot(vec2(_3417, _3418), vec2(_3417, _3418));
                                float _4470 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3424 = _3423 * (((isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0))) * _3400) / ((_3413 * 0.699999988079071044921875) + 1.0));
                                float _3436 = exp2(log2(1.0 / ((_3413 * 3.5) + 5.0)) * 0.25);
                                float _3437 = 1.0 - _1126;
                                float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                                float _3445 = _3444 * _3444;
                                float _3446 = _3445 * _3445;
                                float _3447 = _3393 - _2793;
                                float _3448 = _3394 - _2794;
                                float _3449 = _3395 - _2795;
                                float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                                float _3457 = dot(vec3(_1066, _1069, _1072), vec3((-0.0) - _2793, (-0.0) - _2794, (-0.0) - _2795));
                                float _4481 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3460 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3461 = dot(vec3(_1066, _1069, _1072), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                                float _4492 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3464 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                                float _3469 = _3406 * _3445;
                                float _3470 = _3469 * _3469;
                                float _3476 = ((1.0 - _3470) * dot(vec3(_1066, _1069, _1072), vec3(_3393, _3394, _3395))) + _3470;
                                float _4503 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3478 = 1.0 - _3445;
                                float _3488 = (0.5 / (((_3477 * ((_3460 * _3478) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3477 * _3478) + _3445) * _3460))) * _3477;
                                float _4514 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3498 = (_3423 * _3400) * (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) / ((_3468 * _3468) * ((_3413 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3424 * _3269.y;
                                frontier_phi_115_pred_1 = _3424 * _3269.x;
                                frontier_phi_115_pred_2 = _3498 * _3281.z;
                                frontier_phi_115_pred_3 = _3498 * _3281.y;
                                frontier_phi_115_pred_4 = _3498 * _3281.x;
                                frontier_phi_115_pred_5 = _3424 * _3269.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3506 = frontier_phi_115_pred;
                            _3505 = frontier_phi_115_pred_1;
                            _3504 = frontier_phi_115_pred_2;
                            _3503 = frontier_phi_115_pred_3;
                            _3502 = frontier_phi_115_pred_4;
                            _3507 = frontier_phi_115_pred_5;
                            _3211 = _3505 + _3224;
                            _3212 = _3506 + _3225;
                            _3213 = _3507 + _3226;
                            _3208 = _3502 + _3221;
                            _3209 = _3503 + _3222;
                            _3210 = _3504 + _3223;
                            if (_3228 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3228;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3209;
                        frontier_phi_109_pred_1 = _3208;
                        frontier_phi_109_pred_2 = _3213;
                        frontier_phi_109_pred_3 = _3212;
                        frontier_phi_109_pred_4 = _3211;
                        frontier_phi_109_pred_5 = _3210;
                    }
                    _2770 = frontier_phi_109_pred;
                    _2768 = frontier_phi_109_pred_1;
                    _2778 = frontier_phi_109_pred_2;
                    _2776 = frontier_phi_109_pred_3;
                    _2774 = frontier_phi_109_pred_4;
                    _2772 = frontier_phi_109_pred_5;
                    uint _2985 = _2984 + 1u;
                    if (_2985 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2978 = _2768;
                        _2979 = _2770;
                        _2980 = _2772;
                        _2981 = _2774;
                        _2982 = _2776;
                        _2983 = _2778;
                        _2984 = _2985;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2768;
                frontier_phi_84_85_ladder_1 = _2772;
                frontier_phi_84_85_ladder_2 = _2778;
                frontier_phi_84_85_ladder_3 = _2776;
                frontier_phi_84_85_ladder_4 = _2774;
                frontier_phi_84_85_ladder_5 = _2770;
            }
            else
            {
                frontier_phi_84_85_ladder = _2607;
                frontier_phi_84_85_ladder_1 = _2611;
                frontier_phi_84_85_ladder_2 = _2617;
                frontier_phi_84_85_ladder_3 = _2615;
                frontier_phi_84_85_ladder_4 = _2613;
                frontier_phi_84_85_ladder_5 = _2609;
            }
            _2767 = frontier_phi_84_85_ladder;
            _2769 = frontier_phi_84_85_ladder_5;
            _2771 = frontier_phi_84_85_ladder_1;
            _2773 = frontier_phi_84_85_ladder_4;
            _2775 = frontier_phi_84_85_ladder_3;
            _2777 = frontier_phi_84_85_ladder_2;
        }
        float _2782 = isnan(1.0) ? _1110 : (isnan(_1110) ? 1.0 : min(_1110, 1.0));
        _2503 = (_2782 * _2773) + _2233;
        _2505 = (_2782 * _2775) + _2234;
        _2507 = (_2782 * _2777) + _2235;
        _2509 = ((_2767 * 0.039999999105930328369140625) * _2782) + _2386;
        _2511 = ((_2769 * 0.039999999105930328369140625) * _2782) + _2387;
        _2513 = ((_2771 * 0.039999999105930328369140625) * _2782) + _2388;
    }
    else
    {
        _2503 = _2233;
        _2505 = _2234;
        _2507 = _2235;
        _2509 = _2386;
        _2511 = _2387;
        _2513 = _2388;
    }
    uint _2519 = _1086 + uint(cbMatDynParam._m0[0u].w);
    float _2525 = ((_975 * (_963 - (_963 * _936))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2519].x;
    float _2526 = ((_975 * (_964 - (_964 * _936))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2519].y;
    float _2527 = ((_975 * (_965 - (_965 * _936))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2519].z;
    float _4530 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _4541 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _4552 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _2544 = (((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2503 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1110))) + ((_2509 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1945)) * cbPerFrame._m0[3u].x)) + _2525;
    float _2546 = (_2526 + ((_2511 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1945)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2505 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1110)));
    float _2548 = (_2527 + ((_2513 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1945)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2507 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1110)));
    float _2549 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2550 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2551 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2557 = cbMtdParam._m0[2u].x * _2525;
    float _2558 = cbMtdParam._m0[2u].y * _2526;
    float _2559 = cbMtdParam._m0[2u].z * _2527;
    float _4578 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2561 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    uint _2562 = _1085 + 6u;
    float _2570 = _1047 / cbSceneParam._m0[86u].x;
    float _2571 = _1048 / cbSceneParam._m0[86u].y;
    vec4 _2585 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, (log2((isnan(cbSceneParam._m0[77u].w) ? _1021 : (isnan(_1021) ? cbSceneParam._m0[77u].w : min(_1021, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2587 = _2585.x;
    float _2588 = _2585.y;
    float _2589 = _2585.z;
    float _2590 = _2585.w;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    if (_1021 > cbSceneParam._m0[78u].w)
    {
        float _2632 = isnan(_1021) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1021 : min(cbSceneParam._m0[80u].w, _1021));
        float _2633 = _2632 / _1021;
        float _2644 = _2633 * _288;
        float _2645 = _289 * _2633;
        float _2646 = (-0.0) - _2645;
        float _2647 = _2633 * _290;
        float _2649 = (cbSceneParam._m0[77u].w * _2646) / _2632;
        float _2650 = _2649 + cbSceneParam._m0[79u].w;
        float _2651 = cbSceneParam._m0[79u].w - _2645;
        float _2657 = sqrt(((_2644 * _2644) + (_2645 * _2645)) + (_2647 * _2647));
        float _2660 = (1.0 - (cbSceneParam._m0[77u].w / _2632)) * _2657;
        float _2666 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2668 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2909;
        if (abs((_2646 - _2649) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2909 = ((((_2650 > 0.0) ? exp2(_2666 * _2650) : (2.0 - exp2(_2668 * _2650))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2660;
        }
        else
        {
            float _2828 = 1.0 / cbSceneParam._m0[80u].x;
            float _2829 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : max(_2650, _2651));
            float _2830 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : min(_2650, _2651));
            float _2839 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : min(_2829, 0.0));
            float _2840 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : min(_2830, 0.0));
            _2909 = ((abs(_2657 / _2646) * cbSceneParam._m0[80u].y) * ((((_2839 - _2840) * 2.0) - ((exp2(_2666 * (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0)))) - exp2(_2666 * (isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0))))) * _2828)) - ((exp2(_2668 * _2839) - exp2(_2668 * _2840)) * _2828))) + (_2660 * cbSceneParam._m0[80u].z);
        }
        vec4 _2911 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, 1.0), 0.0);
        float _2920 = exp2((_2909 * (-1.44269502162933349609375)) * (1.0 - _2911.w));
        float _2921 = log2(_2920);
        float _2937 = log2(_2590);
        _2670 = (exp2(_2937 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].x)) * _2911.x) / cbSceneParam._m0[78u].x)) + _2587;
        _2672 = (exp2(_2937 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].y)) * _2911.y) / cbSceneParam._m0[78u].y)) + _2588;
        _2674 = (exp2(_2937 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].z)) * _2911.z) / cbSceneParam._m0[78u].z)) + _2589;
        _2676 = _2920 * _2590;
    }
    else
    {
        _2670 = _2587;
        _2672 = _2588;
        _2674 = _2589;
        _2676 = _2590;
    }
    bool _2947;
    vec4 _2685;
    vec4 _2707;
    float _2709;
    float _2713;
    float _2714;
    float _2715;
    float _2718;
    float _2721;
    float _2724;
    float _2725;
    bool _2735;
    for (;;)
    {
        _2685 = cbMatDynParam._m0[0u];
        float _2687 = roundEven(_2685.y);
        bool _2688 = _2687 == 3.0;
        float _2689 = log2(_2676);
        float _2693 = exp2(_2689 * cbSceneParam._m0[78u].x);
        float _2694 = exp2(_2689 * cbSceneParam._m0[78u].y);
        float _2695 = exp2(_2689 * cbSceneParam._m0[78u].z);
        float _2696 = _2693 * _2549;
        float _2697 = _2694 * _2550;
        float _2698 = _2695 * _2551;
        float _2705 = _1035 + (-0.5);
        _2707 = cbMtdParam._m0[1u];
        _2709 = _2707.y * _2705;
        float _2712 = (_2687 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2713 = _2712 * (_2688 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2670)));
        _2714 = _2712 * (_2688 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2672)));
        _2715 = _2712 * (_2688 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2674)));
        _2718 = ((_2557 * _2561) * _2693) * _2712;
        _2721 = ((_2558 * _2561) * _2694) * _2712;
        _2724 = ((_2559 * _2561) * _2695) * _2712;
        _2725 = _2705 * 0.999000012874603271484375;
        _2735 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2735)
        {
            if ((cbInstanceData._m0[_1085 + 7u].x + _2725) < 0.5)
            {
                _2947 = true;
                break;
            }
        }
        uint _2863 = _1086 + uint(_2685.w);
        if ((cbInstanceData._m0[_2863].w < 1.0) && ((cbInstanceData._m0[_2863].w + _2725) < 0.5))
        {
            _2947 = true;
            break;
        }
        if ((_2709 + 1.0) < _2707.x)
        {
            _2947 = true;
            break;
        }
        _2947 = false;
        break;
    }
    float _3178;
    if (_2947)
    {
        discard_state = true;
        _3178 = 0.0;
    }
    else
    {
        _3178 = cbInstanceData._m0[_2562].w;
    }
    SV_Target.x = _2713;
    SV_Target.y = _2714;
    SV_Target.z = _2715;
    SV_Target.w = _3178;
    SV_Target_1.x = _2718;
    SV_Target_1.y = _2721;
    SV_Target_1.z = _2724;
    SV_Target_1.w = cbInstanceData._m0[_2562].w;
    discard_exit();
}


