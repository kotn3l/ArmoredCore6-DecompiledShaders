#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1123;
uint _2572;
uint _2573;
uint _2574;
uint _2787;
uint _2788;
uint _2789;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _303 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _341 = cbMtdParam._m0[27u].w + _282;
    float _342 = cbMtdParam._m0[28u].x + _283;
    float _343 = cbMtdParam._m0[28u].y + _284;
    float _357 = (-0.0) - dot(vec3(_341, _342, _343), vec3(_211 * _203, _211 * _204, _211 * _205));
    float _358 = (-0.0) - dot(vec3(_341, _342, _343), vec3(_225 * TANGENT.x, _225 * TANGENT.y, _225 * TANGENT.z));
    float _359 = (-0.0) - dot(vec3(_341, _342, _343), vec3((-0.0) - (_218 * NORMAL.x), (-0.0) - (_218 * NORMAL.y), (-0.0) - (_218 * NORMAL.z)));
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _366 = _363 * _359;
    float _367 = (_363 * _357) + (((_303.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _368 = (_363 * _358) + (((_303.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _369 = _367 * cbMtdParam._m0[24u].x;
    float _370 = _368 * cbMtdParam._m0[23u].w;
    float _371 = fract(TEXCOORD.x);
    float _372 = fract(TEXCOORD.y);
    float _378;
    if (_369 > 0.0)
    {
        _378 = (1.0 - _371) / _369;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_369 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _371) / _369;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _378 = frontier_phi_3_2_ladder;
    }
    float _386;
    if (_370 > 0.0)
    {
        _386 = (1.0 - _372) / _370;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_370 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _372) / _370;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _386 = frontier_phi_7_6_ladder;
    }
    bool _388 = _366 > 0.0;
    float _390 = _388 ? (cbMtdParam._m0[17u].x / _366) : 5000.0;
    float _391 = isnan(_386) ? _378 : (isnan(_378) ? _386 : min(_378, _386));
    float _392 = isnan(_390) ? _391 : (isnan(_391) ? _390 : min(_391, _390));
    float _396 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _397 = _371 + (-0.5);
    float _400 = _372 + (-0.5);
    float _403 = ((_392 * _366) + _396) / _396;
    vec4 _428 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_397 + (_392 * _369)) / _403) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_400 + (_392 * _370)) / _403) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _438 = cbMtdParam._m0[9u].x * _428.x;
    float _439 = cbMtdParam._m0[9u].y * _428.y;
    float _440 = cbMtdParam._m0[9u].z * _428.z;
    float _458 = _367 * cbMtdParam._m0[26u].z;
    float _459 = _368 * cbMtdParam._m0[26u].y;
    bool _460 = _458 > 0.0;
    float _465;
    if (_460)
    {
        _465 = (1.0 - _371) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _371) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _465 = frontier_phi_11_10_ladder;
    }
    bool _467 = _459 > 0.0;
    float _472;
    if (_467)
    {
        _472 = (1.0 - _372) / _459;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_459 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _372) / _459;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _472 = frontier_phi_15_14_ladder;
    }
    float _475 = _388 ? (cbMtdParam._m0[19u].z / _366) : 5000.0;
    float _476 = isnan(_472) ? _465 : (isnan(_465) ? _472 : min(_465, _472));
    float _477 = isnan(_475) ? _476 : (isnan(_476) ? _475 : min(_476, _475));
    float _481 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _485 = ((_477 * _366) + _481) / _481;
    float _490 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _492 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _508 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_397 + (_477 * _458)) / _485) + 0.5) + _490) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_400 + (_477 * _459)) / _485) + 0.5) + _492) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _520;
    if (_460)
    {
        _520 = (1.0 - _371) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _371) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _520 = frontier_phi_19_18_ladder;
    }
    float _526;
    if (_467)
    {
        _526 = (1.0 - _372) / _459;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_459 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _372) / _459;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _526 = frontier_phi_23_22_ladder;
    }
    float _528 = isnan(_526) ? _520 : (isnan(_520) ? _526 : min(_520, _526));
    float _529 = isnan(_475) ? _528 : (isnan(_528) ? _475 : min(_528, _475));
    float _536 = ((_529 * _366) + _481) / _481;
    vec4 _556 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_397 + (_529 * _458)) / _536) + 0.5) + _490) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_400 + (_529 * _459)) / _536) + 0.5) + _492) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _558 = _556.x;
    float _565 = (_558 * ((_508.x * cbMtdParam._m0[10u].x) - _438)) + _438;
    float _566 = (_558 * ((_508.y * cbMtdParam._m0[10u].y) - _439)) + _439;
    float _567 = (_558 * ((_508.z * cbMtdParam._m0[10u].z) - _440)) + _440;
    float _581 = _367 * cbMtdParam._m0[27u].x;
    float _582 = _368 * cbMtdParam._m0[26u].w;
    bool _583 = _581 > 0.0;
    float _588;
    if (_583)
    {
        _588 = (1.0 - _371) / _581;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_581 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _371) / _581;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _588 = frontier_phi_27_26_ladder;
    }
    bool _590 = _582 > 0.0;
    float _595;
    if (_590)
    {
        _595 = (1.0 - _372) / _582;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_582 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _372) / _582;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _595 = frontier_phi_31_30_ladder;
    }
    float _598 = _388 ? (cbMtdParam._m0[23u].x / _366) : 5000.0;
    float _599 = isnan(_595) ? _588 : (isnan(_588) ? _595 : min(_588, _595));
    float _600 = isnan(_598) ? _599 : (isnan(_599) ? _598 : min(_599, _598));
    float _604 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _608 = ((_600 * _366) + _604) / _604;
    float _613 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _615 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _631 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_397 + (_600 * _581)) / _608) + 0.5) + _613) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_400 + (_600 * _582)) / _608) + 0.5) + _615) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _643;
    if (_583)
    {
        _643 = (1.0 - _371) / _581;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_581 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _371) / _581;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _643 = frontier_phi_35_34_ladder;
    }
    float _649;
    if (_590)
    {
        _649 = (1.0 - _372) / _582;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_582 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _372) / _582;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _649 = frontier_phi_39_38_ladder;
    }
    float _651 = isnan(_649) ? _643 : (isnan(_643) ? _649 : min(_643, _649));
    float _652 = isnan(_598) ? _651 : (isnan(_651) ? _598 : min(_651, _598));
    float _659 = ((_652 * _366) + _604) / _604;
    vec4 _680 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_397 + (_652 * _581)) / _659) + 0.5) + _613) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_400 + (_652 * _582)) / _659) + 0.5) + _615) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _682 = _680.x;
    float _689 = (_682 * ((_631.x * cbMtdParam._m0[13u].x) - _565)) + _565;
    float _690 = (_682 * ((_631.y * cbMtdParam._m0[13u].y) - _566)) + _566;
    float _691 = (_682 * ((_631.z * cbMtdParam._m0[13u].z) - _567)) + _567;
    float _700 = (cbMtdParam._m0[16u].x * cbMtdParam._m0[19u].y) * _689;
    float _702 = (_690 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].y;
    float _704 = (_691 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].z;
    vec4 _728 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _733 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _739 = ((_728.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _741 = (-0.0) - (cbMtdParam._m0[21u].x * ((_728.x * 0.5) + (-0.25)));
    float _742 = fract(_733);
    float _744 = fract(_733 + 0.5);
    vec4 _771 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_742 * _741) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_739 * _742) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _773 = _771.x;
    float _779 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_744 * _741) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_739 * _744) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _773) * abs((_742 * 2.0) + (-1.0))) + _773;
    float _785 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _789 = fract(abs(_785));
    float _799 = sin(cbMtdParam._m0[21u].z);
    float _800 = cos(cbMtdParam._m0[21u].z);
    float _801 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _802 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _827 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_802, (-0.0) - _799, _800 * _801) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_802, _800, _801 * _799) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_785 >= ((-0.0) - _785)) ? _789 : ((-0.0) - _789)) * cbMtdParam._m0[18u].z) - _779)) + cbMtdParam._m0[18u].w;
    float _828 = ceil(_827);
    float _3106 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _829 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
    float _849 = ((((cbMtdParam._m0[21u].w * _689) * cbMtdParam._m0[15u].x) - _700) * _829) + _700;
    float _850 = ((((cbMtdParam._m0[21u].w * _690) * cbMtdParam._m0[15u].y) - _702) * _829) + _702;
    float _851 = ((((cbMtdParam._m0[21u].w * _691) * cbMtdParam._m0[15u].z) - _704) * _829) + _704;
    float _855 = abs(cbMtdParam._m0[20u].w * _827);
    float _859 = (((_855 * cbMtdParam._m0[18u].y) - _779) * _855) + _779;
    float _3117 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _860 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
    vec4 _872 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _887 = (cbMtdParam._m0[14u].x * _872.x) * cbMtdParam._m0[19u].x;
    float _888 = (cbMtdParam._m0[14u].y * _872.y) * cbMtdParam._m0[19u].x;
    float _889 = (cbMtdParam._m0[14u].z * _872.z) * cbMtdParam._m0[19u].x;
    float _896 = exp2(log2(_860) * cbMtdParam._m0[20u].x);
    float _931 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _935 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _936 = _282 * _935;
    float _937 = _283 * _935;
    float _938 = _284 * _935;
    float _944 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _945 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _954 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_944 * cbSceneParam._m0[86u].x, _945 * cbSceneParam._m0[86u].y));
    float _957 = _954.x * TEXCOORD_4;
    float _958 = (-0.0) - _936;
    float _959 = (-0.0) - _937;
    float _960 = (-0.0) - _938;
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1122;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1045 = (cbModelParam._m0[37u].x * ((((fma(_990, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _982)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1047 = (cbModelParam._m0[37u].y * ((((fma(_990, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _982)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1048 = (((((fma(_990, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _982)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1045, _1047, _1048), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1045, _1047, _1048), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1045, _1047, _1048), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1045, _1047, _1048), 0.0);
        float _1085 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1072.x + (-0.5));
        float _1117 = _1115 * (_1072.y + (-0.5));
        float _1118 = _1115 * (_1072.z + (-0.5));
        _1122 = _1085 * (_1051.z + (-0.5));
        _1124 = _1085 * (_1051.y + (-0.5));
        _1125 = _1085 * (_1051.x + (-0.5));
        _1126 = _1095 * (_1058.z + (-0.5));
        _1127 = _1095 * (_1058.y + (-0.5));
        _1128 = _1095 * (_1058.x + (-0.5));
        _1129 = _1105 * (_1065.z + (-0.5));
        _1130 = _1105 * (_1065.y + (-0.5));
        _1131 = _1105 * (_1065.x + (-0.5));
        _1132 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        _1133 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        _1134 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    }
    else
    {
        _1122 = _1123;
        _1124 = _1123;
        _1125 = _1123;
        _1126 = _1123;
        _1127 = _1123;
        _1128 = _1123;
        _1129 = _1123;
        _1130 = _1123;
        _1131 = _1123;
        _1132 = _1123;
        _1133 = _1123;
        _1134 = _1123;
    }
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1187 = (cbModelParam._m0[38u].x * ((((fma(_990, cbModelParam._m0[30u].z, fma(_986, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1188 = (cbModelParam._m0[38u].y * ((((fma(_990, cbModelParam._m0[31u].z, fma(_986, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1189 = (((((fma(_990, cbModelParam._m0[32u].z, fma(_986, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1224 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1212.x + (-0.5));
        float _1256 = _1254 * (_1212.y + (-0.5));
        float _1257 = _1254 * (_1212.z + (-0.5));
        _1261 = _1224 * (_1191.z + (-0.5));
        _1262 = _1224 * (_1191.y + (-0.5));
        _1263 = _1224 * (_1191.x + (-0.5));
        _1264 = _1234 * (_1198.z + (-0.5));
        _1265 = _1234 * (_1198.y + (-0.5));
        _1266 = _1234 * (_1198.x + (-0.5));
        _1267 = _1244 * (_1205.z + (-0.5));
        _1268 = _1244 * (_1205.y + (-0.5));
        _1269 = _1244 * (_1205.x + (-0.5));
        _1270 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        _1271 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        _1272 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
    }
    else
    {
        _1261 = _1123;
        _1262 = _1123;
        _1263 = _1123;
        _1264 = _1123;
        _1265 = _1123;
        _1266 = _1123;
        _1267 = _1123;
        _1268 = _1123;
        _1269 = _1123;
        _1270 = _1123;
        _1271 = _1123;
        _1272 = _1123;
    }
    float _1287 = _936 * (-0.5);
    float _1288 = _937 * (-0.5);
    float _1289 = _938 * (-0.5);
    float _1290 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1293 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1296 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1331;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1303 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1122, _1126, _1129, _1132));
        float _1307 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1124, _1127, _1130, _1133));
        float _1311 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1318 = dot(vec4(cbModelParam._m0[39u]), vec4(_1287, _1288, _1289, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1342;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1333 = dot(vec4(cbModelParam._m0[40u]), vec4(_1287, _1288, _1289, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1346 = (_1342 * cbModelParam._m0[1u].x) + (_1331 * (1.0 - cbModelParam._m0[1u].x));
    float _1352 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1432;
    float _1434;
    float _1436;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1399 = fma(_990, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982)) + cbModelParam._m0[13u].w;
        float _1403 = fma(_990, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982)) + cbModelParam._m0[14u].w;
        float _1407 = fma(_990, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982)) + cbModelParam._m0[15u].w;
        float _1410 = fma(_960, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _958));
        float _1413 = fma(_960, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _958));
        float _1416 = fma(_960, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _958));
        float _1442;
        if (_1410 > 0.0)
        {
            _1442 = abs((1.0 - _1399) / _1410);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1399 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1442 = frontier_phi_54_52_ladder;
        }
        float _1629;
        if (_1413 > 0.0)
        {
            _1629 = abs((1.0 - _1403) / _1413);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1403 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1629 = frontier_phi_63_59_ladder;
        }
        float _1983;
        if (_1416 > 0.0)
        {
            _1983 = abs((1.0 - _1407) / _1416);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1407 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _1983 = frontier_phi_75_70_ladder;
        }
        float _1985 = isnan(_1629) ? _1442 : (isnan(_1442) ? _1629 : min(_1442, _1629));
        float _1986 = isnan(_1983) ? _1985 : (isnan(_1985) ? _1983 : min(_1985, _1983));
        float _1990 = (_1986 * _1410) + _1399;
        float _1991 = (_1986 * _1413) + _1403;
        float _1992 = (_1986 * _1416) + _1407;
        float _1993 = _1986 * 9.9999997473787516355514526367188e-05;
        float _1995 = (-1.0) - _1993;
        float _1997 = _1993 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_1992 > _1997) || ((_1992 < _1995) || ((_1991 > _1997) || ((_1991 < _1995) || ((_1990 < _1995) || (_1990 > _1997))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2236 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1992, cbModelParam._m0[9u].z, fma(_1991, cbModelParam._m0[9u].y, _1990 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1992, cbModelParam._m0[10u].z, fma(_1991, cbModelParam._m0[10u].y, _1990 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1992, cbModelParam._m0[11u].z, fma(_1991, cbModelParam._m0[11u].y, _1990 * cbModelParam._m0[11u].x))), _1352);
            frontier_phi_53_75_ladder = _2236.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _2236.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _2236.x * cbModelParam._m0[1u].y;
        }
        _1432 = frontier_phi_53_75_ladder_2;
        _1434 = frontier_phi_53_75_ladder_1;
        _1436 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_958, _959, _960), _1352);
        _1432 = _1420.x * cbModelParam._m0[1u].y;
        _1434 = _1420.y * cbModelParam._m0[1u].y;
        _1436 = _1420.z * cbModelParam._m0[1u].y;
    }
    float _1439 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1527;
    float _1529;
    float _1531;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1491 = fma(_990, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982)) + cbModelParam._m0[21u].w;
        float _1495 = fma(_990, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982)) + cbModelParam._m0[22u].w;
        float _1499 = fma(_990, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982)) + cbModelParam._m0[23u].w;
        float _1502 = fma(_960, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _958));
        float _1505 = fma(_960, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _958));
        float _1508 = fma(_960, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _958));
        float _1634;
        if (_1502 > 0.0)
        {
            _1634 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1634 = frontier_phi_65_61_ladder;
        }
        float _2010;
        if (_1505 > 0.0)
        {
            _2010 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2010 = frontier_phi_77_72_ladder;
        }
        float _2360;
        if (_1508 > 0.0)
        {
            _2360 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2360 = frontier_phi_89_84_ladder;
        }
        float _2362 = isnan(_2010) ? _1634 : (isnan(_1634) ? _2010 : min(_1634, _2010));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1502) + _1491;
        float _2368 = (_2363 * _1505) + _1495;
        float _2369 = (_2363 * _1508) + _1499;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2370;
        float _2373 = _2370 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2369 > _2373) || ((_2369 < _2371) || ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 < _2371) || (_2367 > _2373))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2369, cbModelParam._m0[17u].z, fma(_2368, cbModelParam._m0[17u].y, _2367 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2369, cbModelParam._m0[18u].z, fma(_2368, cbModelParam._m0[18u].y, _2367 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2369, cbModelParam._m0[19u].z, fma(_2368, cbModelParam._m0[19u].y, _2367 * cbModelParam._m0[19u].x))), _1439);
            frontier_phi_62_89_ladder = _2475.x * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2475.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2475.z * cbModelParam._m0[1u].z;
        }
        _1527 = frontier_phi_62_89_ladder;
        _1529 = frontier_phi_62_89_ladder_1;
        _1531 = frontier_phi_62_89_ladder_2;
    }
    else
    {
        vec4 _1511 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_958, _959, _960), _1439);
        _1527 = _1511.x * cbModelParam._m0[1u].z;
        _1529 = _1511.y * cbModelParam._m0[1u].z;
        _1531 = _1511.z * cbModelParam._m0[1u].z;
    }
    float _1543 = _957 * 0.01200000010430812835693359375;
    float _1545 = _1543 * ((cbModelParam._m0[1u].w * (_1527 - _1432)) + _1432);
    float _1546 = _1543 * ((cbModelParam._m0[1u].w * (_1529 - _1434)) + _1434);
    float _1547 = _1543 * ((cbModelParam._m0[1u].w * (_1531 - _1436)) + _1436);
    float _1568 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1546, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1571 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1546, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1574 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1546, cbSceneParam._m0[91u].y, _1545 * cbSceneParam._m0[91u].x));
    float _1608 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1612 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1616 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1620 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1621 = _1608 / _1620;
    float _1622 = _1612 / _1620;
    float _1623 = _1616 / _1620;
    float _1771;
    float _1772;
    float _1773;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1650 = ((uint(_1623 > cbSceneParam._m0[59u].y) + uint(_1623 > cbSceneParam._m0[59u].x)) + uint(_1623 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1651 = _1650 + 43u;
        uint _1659 = _1650 + 44u;
        uint _1667 = _1650 + 45u;
        uint _1675 = _1650 + 46u;
        float _1686 = fma(_1620, cbSceneParam._m0[_1651].w, fma(_1616, cbSceneParam._m0[_1651].z, fma(_1612, cbSceneParam._m0[_1651].y, _1608 * cbSceneParam._m0[_1651].x)));
        float _1690 = fma(_1620, cbSceneParam._m0[_1659].w, fma(_1616, cbSceneParam._m0[_1659].z, fma(_1612, cbSceneParam._m0[_1659].y, _1608 * cbSceneParam._m0[_1659].x)));
        float _1698 = fma(_1620, cbSceneParam._m0[_1675].w, fma(_1616, cbSceneParam._m0[_1675].z, fma(_1612, cbSceneParam._m0[_1675].y, _1608 * cbSceneParam._m0[_1675].x)));
        float _1703 = cbSceneParam._m0[33u].z * _1698;
        float _1705 = cbSceneParam._m0[33u].w * _1698;
        float _1708 = fma(_1620, cbSceneParam._m0[_1667].w, fma(_1616, cbSceneParam._m0[_1667].z, fma(_1612, cbSceneParam._m0[_1667].y, _1608 * cbSceneParam._m0[_1667].x))) / _1698;
        float _1756 = (cbSceneParam._m0[33u].x - sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623))) * cbSceneParam._m0[33u].y;
        float _3243 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1764 = (isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1703 + _1686) / _1698, (_1705 + _1690) / _1698), _1708), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1705 + _1686) / _1698, (_1690 - _1703) / _1698), _1708), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1686 - _1703) / _1698, (_1690 - _1705) / _1698), _1708), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1686 - _1705) / _1698, (_1703 + _1690) / _1698), _1708), 0.0)).x), vec4(0.25)));
        _1771 = 1.0 - (_1764 * cbSceneParam._m0[34u].x);
        _1772 = 1.0 - (_1764 * cbSceneParam._m0[34u].y);
        _1773 = 1.0 - (_1764 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1771 = 1.0;
        _1772 = 1.0;
        _1773 = 1.0;
    }
    float _1837;
    float _1839;
    float _1841;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1825 = fma(_1620, cbSceneParam._m0[63u].w, fma(_1616, cbSceneParam._m0[63u].z, fma(_1612, cbSceneParam._m0[63u].y, _1608 * cbSceneParam._m0[63u].x)));
        float _1826 = fma(_1620, cbSceneParam._m0[60u].w, fma(_1616, cbSceneParam._m0[60u].z, fma(_1612, cbSceneParam._m0[60u].y, _1608 * cbSceneParam._m0[60u].x))) / _1825;
        float _1827 = fma(_1620, cbSceneParam._m0[61u].w, fma(_1616, cbSceneParam._m0[61u].z, fma(_1612, cbSceneParam._m0[61u].y, _1608 * cbSceneParam._m0[61u].x))) / _1825;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_1826 >= cbSceneParam._m0[64u].x) && (_1827 >= cbSceneParam._m0[64u].y)) && (_1826 <= cbSceneParam._m0[64u].z)) && (_1827 <= cbSceneParam._m0[64u].w))
        {
            float _2023 = fma(_1620, cbSceneParam._m0[62u].w, fma(_1616, cbSceneParam._m0[62u].z, fma(_1612, cbSceneParam._m0[62u].y, _1608 * cbSceneParam._m0[62u].x))) / _1825;
            float _2027 = isnan(cbSceneParam._m0[41u].w) ? _2023 : (isnan(_2023) ? cbSceneParam._m0[41u].w : max(_2023, cbSceneParam._m0[41u].w));
            float _2070 = (cbSceneParam._m0[33u].x - sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623))) * cbSceneParam._m0[33u].y;
            float _3259 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
            float _2077 = (isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1826, cbSceneParam._m0[33u].w + _1827), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1826, _1827 - cbSceneParam._m0[33u].z), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1826 - cbSceneParam._m0[33u].z, _1827 - cbSceneParam._m0[33u].w), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1826 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1827), _2027), 0.0)).x), vec4(0.25)));
            float _2081 = 1.0 - (_2077 * cbSceneParam._m0[34u].x);
            float _2082 = 1.0 - (_2077 * cbSceneParam._m0[34u].y);
            float _2083 = 1.0 - (_2077 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_2083) ? _1773 : (isnan(_1773) ? _2083 : min(_1773, _2083));
            frontier_phi_74_73_ladder_1 = isnan(_2082) ? _1772 : (isnan(_1772) ? _2082 : min(_1772, _2082));
            frontier_phi_74_73_ladder_2 = isnan(_2081) ? _1771 : (isnan(_1771) ? _2081 : min(_1771, _2081));
        }
        else
        {
            frontier_phi_74_73_ladder = _1773;
            frontier_phi_74_73_ladder_1 = _1772;
            frontier_phi_74_73_ladder_2 = _1771;
        }
        _1837 = frontier_phi_74_73_ladder_2;
        _1839 = frontier_phi_74_73_ladder_1;
        _1841 = frontier_phi_74_73_ladder;
    }
    else
    {
        _1837 = _1771;
        _1839 = _1772;
        _1841 = _1773;
    }
    uint _1843 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1847 = floatBitsToUint(cbInstanceData._m0[_1843 + 5u]);
    uint _1849 = _1847.x * 14u;
    uint _1850 = _1849 + 13u;
    float _1855 = _957 + (-1.0);
    float _1858 = (cbLight._m0[_1850].x * _1855) + 1.0;
    float _1859 = (cbLight._m0[_1850].y * _1855) + 1.0;
    uint _1860 = _1849 + 8u;
    float _1871 = cbLight._m0[_1849].x + _936;
    float _1872 = cbLight._m0[_1849].y + _937;
    float _1873 = cbLight._m0[_1849].z + _938;
    float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
    float _1881 = dot(vec3(0.0), vec3(cbLight._m0[_1849].xyz));
    float _3285 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _1885 = dot(vec3(0.0), vec3(_936, _937, _938));
    float _3296 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _1889 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_1871 * _1877, _1872 * _1877, _1873 * _1877));
    float _3307 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1900 = (exp2(log2(1.0 - (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1906 = (0.5 / ((_1884 + 9.9999999392252902907785028219223e-09) + _1888)) * _1884;
    float _3318 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1908 = (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.31831014156341552734375;
    float _1910 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1923 = _1849 + 9u;
    uint _1929 = _1849 | 1u;
    float _1935 = cbLight._m0[_1929].x + _936;
    float _1936 = cbLight._m0[_1929].y + _937;
    float _1937 = cbLight._m0[_1929].z + _938;
    float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
    float _1945 = dot(vec3(0.0), vec3(cbLight._m0[_1929].xyz));
    float _3334 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _1949 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_1935 * _1941, _1936 * _1941, _1937 * _1941));
    float _3345 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1958 = (exp2(log2(1.0 - (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1962 = (0.5 / ((_1948 + 9.9999999392252902907785028219223e-09) + _1888)) * _1948;
    float _3356 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1964 = (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * 0.31831014156341552734375;
    float _1965 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    float _1975 = (((_1958 * cbLight._m0[_1923].x) * _1964) * _1965) + ((((cbLight._m0[_1860].x * _1837) * _1900) * _1908) * _1910);
    float _1976 = (((_1958 * cbLight._m0[_1923].y) * _1964) * _1965) + ((((cbLight._m0[_1860].y * _1839) * _1900) * _1908) * _1910);
    float _1977 = (((_1958 * cbLight._m0[_1923].z) * _1964) * _1965) + ((((cbLight._m0[_1860].z * _1841) * _1900) * _1908) * _1910);
    float _2141;
    float _2143;
    float _2145;
    if (_1847.y == 0u)
    {
        uvec4 _2095 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2096 = _2095.x;
        uint _2107 = uint((float(_2095.y) * floor(float(uint(cbSceneParam._m0[85u].y * _945) / _2096))) + floor(float(uint(cbSceneParam._m0[85u].x * _944) / _2096)));
        float _2117 = (log2(_1623 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2118 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        uint _2121 = uint(isnan(14.0) ? _2118 : (isnan(_2118) ? 14.0 : min(_2118, 14.0)));
        uvec4 _2127 = texelFetch(g_lightClusterGridBuffer, int(((_2121 << 2u) + (_2107 << 6u)) >> 2u));
        uint _2128 = _2127.x;
        uint _2129 = _2095.z;
        float _2245;
        float _2247;
        float _2249;
        if (((((1u << ((_2129 >> 4u) & 15u)) + 4294967295u) & _2128) == 0u) || ((_2129 & 240u) == 0u))
        {
            _2245 = 0.0;
            _2247 = 0.0;
            _2249 = 0.0;
        }
        else
        {
            float _2246;
            float _2248;
            float _2250;
            float _2406 = 0.0;
            float _2407 = 0.0;
            float _2408 = 0.0;
            uint _2409 = 0u;
            uint _2418;
            bool _2419;
            for (;;)
            {
                _2418 = texelFetch(g_lightClassification, int((((_2121 << 5u) + (_2107 << 9u)) + (_2409 << 2u)) >> 2u)).x;
                _2419 = _2418 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                if (_2419)
                {
                    frontier_phi_98_pred = _2408;
                    frontier_phi_98_pred_1 = _2407;
                    frontier_phi_98_pred_2 = _2406;
                }
                else
                {
                    float _2542;
                    float _2543;
                    float _2544;
                    uint _2545;
                    _2542 = _2406;
                    _2543 = _2407;
                    _2544 = _2408;
                    _2545 = _2418;
                    float _2480;
                    float _2481;
                    float _2482;
                    for (;;)
                    {
                        uint _2549 = uint(findLSB(_2545)) + (_2409 << 5u);
                        uint _2546 = (_2545 + 4294967295u) & _2545;
                        uint _2551 = _2549 * 48u;
                        vec4 _2565 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2551)).x, texelFetch(g_PointLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2551 + 3u)).x));
                        uint _2582 = (_2549 * 48u) + 8u;
                        vec3 _2593 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x));
                        float _2597 = _2565.x - _1621;
                        float _2598 = _2565.y - _1622;
                        float _2599 = _2565.z - _1623;
                        float _2600 = dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599));
                        float _2603 = inversesqrt(_2600);
                        float _2612 = 1.0 - (_2600 * _2565.w);
                        float _3382 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
                        float _2614 = sqrt(_2600) * uintBitsToFloat(uvec4(_2572, _2573, _2574, texelFetch(g_PointLightRenderingBuffer, int(((_2549 * 48u) + 4u) + 3u)).x)).w;
                        float _2617 = 1.39999997615814208984375 / (_2614 + 1.39999997615814208984375);
                        float _2618 = _2617 * _2617;
                        float _2621 = ((1.0 - _2618) * dot(vec3(0.0), vec3(_2603 * _2597, _2603 * _2598, _2603 * _2599))) + _2618;
                        float _2623 = (-0.0) - _1621;
                        float _2624 = (-0.0) - _1622;
                        float _2625 = (-0.0) - _1623;
                        float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
                        float _2633 = dot(vec3(0.0), vec3(_2629 * _2623, _2629 * _2624, _2629 * _2625));
                        float _3393 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
                        float _3404 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
                        float _2637 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
                        float _2641 = (0.5 / (((isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) + 9.9999999392252902907785028219223e-09) + _2637)) * _2637;
                        float _3415 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
                        float _2650 = (((isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * 3.1415927410125732421875) / (((_2614 * _2614) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)));
                        _2480 = (_2650 * _2593.x) + _2542;
                        _2481 = (_2650 * _2593.y) + _2543;
                        _2482 = (_2650 * _2593.z) + _2544;
                        if (_2546 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2542 = _2480;
                            _2543 = _2481;
                            _2544 = _2482;
                            _2545 = _2546;
                        }
                    }
                    frontier_phi_98_pred = _2482;
                    frontier_phi_98_pred_1 = _2481;
                    frontier_phi_98_pred_2 = _2480;
                }
                _2250 = frontier_phi_98_pred;
                _2248 = frontier_phi_98_pred_1;
                _2246 = frontier_phi_98_pred_2;
                uint _2410 = _2409 + 1u;
                if (_2410 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2406 = _2246;
                    _2407 = _2248;
                    _2408 = _2250;
                    _2409 = _2410;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2245 = _2246;
            _2247 = _2248;
            _2249 = _2250;
        }
        uvec4 _2253 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2254 = _2253.z;
        uint _2256 = (_2254 >> 8u) & 15u;
        float _2386;
        float _2388;
        float _2390;
        if (((4294967295u << _2256) & _2128) == 0u)
        {
            _2386 = _2245;
            _2388 = _2247;
            _2390 = _2249;
        }
        else
        {
            float _2402 = inversesqrt(dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623)));
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            if (_2256 < ((_2254 >> 12u) & 15u))
            {
                float _2387;
                float _2389;
                float _2391;
                float _2528 = _2245;
                float _2529 = _2247;
                float _2530 = _2249;
                uint _2531 = _2256;
                uint _2540;
                bool _2541;
                for (;;)
                {
                    _2540 = texelFetch(g_lightClassification, int((((_2121 << 5u) + (_2107 << 9u)) + (_2531 << 2u)) >> 2u)).x;
                    _2541 = _2540 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    if (_2541)
                    {
                        frontier_phi_104_pred = _2530;
                        frontier_phi_104_pred_1 = _2529;
                        frontier_phi_104_pred_2 = _2528;
                    }
                    else
                    {
                        float _2655;
                        float _2656;
                        float _2657;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2665 = _2528;
                        float _2666 = _2529;
                        float _2667 = _2530;
                        uint _2668 = _2540;
                        uint _2669;
                        uint _2679;
                        vec4 _2694;
                        float _2695;
                        vec3 _2707;
                        vec4 _2722;
                        vec4 _2737;
                        float _2783;
                        bool _2784;
                        for (;;)
                        {
                            _2679 = ((_2531 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2668));
                            _2669 = (_2668 + 4294967295u) & _2668;
                            uint _2681 = _2679 * 40u;
                            _2694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2681 + 3u)).x));
                            _2695 = _2694.w;
                            uint _2697 = (_2679 * 40u) + 8u;
                            _2707 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 2u)).x));
                            uint _2709 = (_2679 * 40u) + 16u;
                            _2722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 3u)).x));
                            uint _2724 = (_2679 * 40u) + 20u;
                            _2737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 3u)).x));
                            uint _2739 = (_2679 * 40u) + 24u;
                            vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 3u)).x));
                            uint _2758 = (_2679 * 40u) + 28u;
                            vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 3u)).x));
                            _2783 = fma(_1623, _2771.z, fma(_1622, _2771.y, _2771.x * _1621)) + _2771.w;
                            _2784 = !((fma(_1623, _2752.z, fma(_1622, _2752.y, _2752.x * _1621)) + _2752.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            if (_2784)
                            {
                                float _2818 = _2694.x - _1621;
                                float _2819 = _2694.y - _1622;
                                float _2820 = _2694.z - _1623;
                                float _2821 = dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820));
                                float _2824 = inversesqrt(_2821);
                                float _2831 = 1.0 - (_2821 / (_2695 * _2695));
                                float _3426 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                                float _2833 = sqrt(_2821) * uintBitsToFloat(uvec4(_2787, _2788, _2789, texelFetch(g_SpotLightRenderingBuffer, int(((_2679 * 40u) + 4u) + 3u)).x)).w;
                                float _2835 = 1.39999997615814208984375 / (_2833 + 1.39999997615814208984375);
                                float _2836 = _2835 * _2835;
                                float _2839 = (fma(_1623, _2722.z, fma(_1622, _2722.y, _2722.x * _1621)) + _2722.w) / _2783;
                                float _2840 = (fma(_1623, _2737.z, fma(_1622, _2737.y, _2737.x * _1621)) + _2737.w) / _2783;
                                float _2844 = 1.0 - dot(vec2(_2839, _2840), vec2(_2839, _2840));
                                float _3437 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                                float _2852 = dot(vec3(0.0), vec3((-0.0) - (_1621 * _2402), (-0.0) - (_1622 * _2402), (-0.0) - (_1623 * _2402)));
                                float _3448 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                                float _2860 = ((1.0 - _2836) * dot(vec3(0.0), vec3(_2824 * _2818, _2824 * _2819, _2824 * _2820))) + _2836;
                                float _3459 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                                float _2861 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
                                float _2865 = (0.5 / (((isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) + 9.9999999392252902907785028219223e-09) + _2861)) * _2861;
                                float _3470 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                                float _2872 = ((isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * (((isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * 3.1415927410125732421875) / (((_2833 * _2833) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_110_pred = _2872 * _2707.z;
                                frontier_phi_110_pred_1 = _2872 * _2707.y;
                                frontier_phi_110_pred_2 = _2872 * _2707.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                            }
                            _2878 = frontier_phi_110_pred;
                            _2877 = frontier_phi_110_pred_1;
                            _2876 = frontier_phi_110_pred_2;
                            _2655 = _2876 + _2665;
                            _2656 = _2877 + _2666;
                            _2657 = _2878 + _2667;
                            if (_2669 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2665 = _2655;
                                _2666 = _2656;
                                _2667 = _2657;
                                _2668 = _2669;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _2657;
                        frontier_phi_104_pred_1 = _2656;
                        frontier_phi_104_pred_2 = _2655;
                    }
                    _2391 = frontier_phi_104_pred;
                    _2389 = frontier_phi_104_pred_1;
                    _2387 = frontier_phi_104_pred_2;
                    uint _2532 = _2531 + 1u;
                    if (_2532 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2528 = _2387;
                        _2529 = _2389;
                        _2530 = _2391;
                        _2531 = _2532;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2389;
                frontier_phi_91_92_ladder_1 = _2387;
                frontier_phi_91_92_ladder_2 = _2391;
            }
            else
            {
                frontier_phi_91_92_ladder = _2247;
                frontier_phi_91_92_ladder_1 = _2245;
                frontier_phi_91_92_ladder_2 = _2249;
            }
            _2386 = frontier_phi_91_92_ladder_1;
            _2388 = frontier_phi_91_92_ladder;
            _2390 = frontier_phi_91_92_ladder_2;
        }
        float _2395 = isnan(1.0) ? _957 : (isnan(_957) ? 1.0 : min(_957, 1.0));
        _2141 = ((_2386 * 0.039999999105930328369140625) * _2395) + _1975;
        _2143 = ((_2388 * 0.039999999105930328369140625) * _2395) + _1976;
        _2145 = ((_2390 * 0.039999999105930328369140625) * _2395) + _1977;
    }
    else
    {
        _2141 = _1975;
        _2143 = _1976;
        _2145 = _1977;
    }
    uint _2152 = (_1843 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _2158 = (cbSceneParam._m0[72u].y * ((_896 * ((_887 - _849) - (_887 * _860))) + _849)) * cbInstanceData._m0[_2152].x;
    float _2159 = (cbSceneParam._m0[72u].y * ((_896 * ((_888 - _850) - (_888 * _860))) + _850)) * cbInstanceData._m0[_2152].y;
    float _2160 = (((_896 * ((_889 - _851) - (_889 * _860))) + _851) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2152].z;
    float _2167 = _2158 + ((_2141 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1346)) * cbPerFrame._m0[3u].x);
    float _2168 = _2159 + ((_2143 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1346)) * cbPerFrame._m0[3u].x);
    float _2169 = _2160 + ((_2145 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1346)) * cbPerFrame._m0[3u].x);
    float _3501 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2182 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    uint _2183 = _1843 + 6u;
    float _2191 = _944 / cbSceneParam._m0[86u].x;
    float _2192 = _945 / cbSceneParam._m0[86u].y;
    vec4 _2206 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2191, _2192, (log2((isnan(cbSceneParam._m0[77u].w) ? _931 : (isnan(_931) ? cbSceneParam._m0[77u].w : min(_931, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2208 = _2206.x;
    float _2209 = _2206.y;
    float _2210 = _2206.z;
    float _2211 = _2206.w;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    if (_931 > cbSceneParam._m0[78u].w)
    {
        float _2264 = isnan(_931) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _931 : min(cbSceneParam._m0[80u].w, _931));
        float _2265 = _2264 / _931;
        float _2276 = _2265 * _282;
        float _2277 = _283 * _2265;
        float _2278 = (-0.0) - _2277;
        float _2279 = _2265 * _284;
        float _2281 = (cbSceneParam._m0[77u].w * _2278) / _2264;
        float _2282 = _2281 + cbSceneParam._m0[79u].w;
        float _2283 = cbSceneParam._m0[79u].w - _2277;
        float _2289 = sqrt(((_2276 * _2276) + (_2277 * _2277)) + (_2279 * _2279));
        float _2292 = (1.0 - (cbSceneParam._m0[77u].w / _2264)) * _2289;
        float _2297 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2299 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2490;
        if (abs((_2278 - _2281) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2490 = ((((_2282 > 0.0) ? exp2(_2297 * _2282) : (2.0 - exp2(_2299 * _2282))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2292;
        }
        else
        {
            float _2432 = 1.0 / cbSceneParam._m0[80u].x;
            float _2433 = isnan(_2283) ? _2282 : (isnan(_2282) ? _2283 : max(_2282, _2283));
            float _2434 = isnan(_2283) ? _2282 : (isnan(_2282) ? _2283 : min(_2282, _2283));
            float _2443 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : min(_2433, 0.0));
            float _2444 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : min(_2434, 0.0));
            _2490 = ((abs(_2289 / _2278) * cbSceneParam._m0[80u].y) * ((((_2443 - _2444) * 2.0) - ((exp2(_2297 * (isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0)))) - exp2(_2297 * (isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0))))) * _2432)) - ((exp2(_2299 * _2443) - exp2(_2299 * _2444)) * _2432))) + (_2292 * cbSceneParam._m0[80u].z);
        }
        vec4 _2492 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2191, _2192, 1.0), 0.0);
        float _2501 = exp2((_2490 * (-1.44269502162933349609375)) * (1.0 - _2492.w));
        float _2502 = log2(_2501);
        float _2518 = log2(_2211);
        _2301 = (exp2(_2518 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2502 * cbSceneParam._m0[78u].x)) * _2492.x) / cbSceneParam._m0[78u].x)) + _2208;
        _2303 = (exp2(_2518 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2502 * cbSceneParam._m0[78u].y)) * _2492.y) / cbSceneParam._m0[78u].y)) + _2209;
        _2305 = (exp2(_2518 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2502 * cbSceneParam._m0[78u].z)) * _2492.z) / cbSceneParam._m0[78u].z)) + _2210;
        _2307 = _2501 * _2211;
    }
    else
    {
        _2301 = _2208;
        _2303 = _2209;
        _2305 = _2210;
        _2307 = _2211;
    }
    float _2318 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2319 = _2318 == 3.0;
    float _2321 = log2(_2307);
    float _2325 = exp2(_2321 * cbSceneParam._m0[78u].x);
    float _2326 = exp2(_2321 * cbSceneParam._m0[78u].y);
    float _2327 = exp2(_2321 * cbSceneParam._m0[78u].z);
    float _2328 = _2325 * (isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0)));
    float _2329 = _2326 * (isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0)));
    float _2330 = _2327 * (isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0)));
    float _2339 = (_2318 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2339 * (_2319 ? _2328 : (_2328 + (cbSceneParam._m0[72u].w * _2301)));
    SV_Target.y = _2339 * (_2319 ? _2329 : (_2329 + (cbSceneParam._m0[72u].w * _2303)));
    SV_Target.z = _2339 * (_2319 ? _2330 : (_2330 + (cbSceneParam._m0[72u].w * _2305)));
    SV_Target.w = cbInstanceData._m0[_2183].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2158) * _2182) * _2325) * _2339;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2159) * _2182) * _2326) * _2339;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2160) * _2182) * _2327) * _2339;
    SV_Target_1.w = cbInstanceData._m0[_2183].w;
}


