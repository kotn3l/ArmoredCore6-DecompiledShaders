#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _454;
float _3486;
float _3487;
float _3488;
float _3489;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _298 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _301 = _298.x;
    vec4 _319 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _336 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _301) + cbMtdParam._m0[12u].x) * _319.x;
    float _338 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _301) + cbMtdParam._m0[12u].y) * _319.y;
    float _340 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _301) + cbMtdParam._m0[12u].z) * _319.z;
    vec4 _367 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _382 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _389 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _401 = cbMtdParam._m0[28u].z + _282;
    float _402 = cbMtdParam._m0[28u].w + _283;
    float _403 = cbMtdParam._m0[29u].x + _284;
    float _417 = (-0.0) - dot(vec3(_401, _402, _403), vec3(_382 * _212, _382 * _213, _382 * _214));
    float _418 = (-0.0) - dot(vec3(_401, _402, _403), vec3(_389 * _226, _389 * _227, _389 * _228));
    float _419 = (-0.0) - dot(vec3(_401, _402, _403), vec3((-0.0) - _219, (-0.0) - _220, (-0.0) - _221));
    float _423 = inversesqrt(dot(vec3(_417, _418, _419), vec3(_417, _418, _419)));
    float _424 = _423 * _419;
    float _429 = ((cbMtdParam._m0[25u].y * _417) * _423) + (((_367.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _430 = ((cbMtdParam._m0[25u].z * _418) * _423) + (((_367.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _433 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _434 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _452;
    float _455;
    float _457;
    if (_429 > 0.0)
    {
        float _438 = (1.0 - _433) / _429;
        _452 = _438;
        _455 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_438 * _424)) * 0.16666667163372039794921875;
        _457 = (fract((_438 * _430) + _434) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_429 < 0.0)
        {
            float _453 = ((-0.0) - _433) / _429;
            frontier_phi_3_2_ladder = _453;
            frontier_phi_3_2_ladder_1 = (fract((_453 * _430) + _434) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_453 * _424) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _454;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _452 = frontier_phi_3_2_ladder;
        _455 = frontier_phi_3_2_ladder_2;
        _457 = frontier_phi_3_2_ladder_1;
    }
    float _483;
    float _485;
    float _487;
    if (_430 > 0.0)
    {
        float _470 = (1.0 - _434) / _430;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_470 < _452)
        {
            frontier_phi_8_5_ladder = (fract(_470 * _424) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_470 * _429) + _433) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _470;
        }
        else
        {
            frontier_phi_8_5_ladder = _457;
            frontier_phi_8_5_ladder_1 = _455;
            frontier_phi_8_5_ladder_2 = _452;
        }
        _483 = frontier_phi_8_5_ladder_2;
        _485 = frontier_phi_8_5_ladder_1;
        _487 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_430 < 0.0)
        {
            float _484 = ((-0.0) - _434) / _430;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_484 < _452)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_484 * _424) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_484 * _429) + _433) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _484;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _457;
                frontier_phi_8_6_ladder_9_ladder_1 = _455;
                frontier_phi_8_6_ladder_9_ladder_2 = _452;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _457;
            frontier_phi_8_6_ladder_1 = _455;
            frontier_phi_8_6_ladder_2 = _452;
        }
        _483 = frontier_phi_8_6_ladder_2;
        _485 = frontier_phi_8_6_ladder_1;
        _487 = frontier_phi_8_6_ladder;
    }
    float _491 = (_424 > 0.0) ? (cbMtdParam._m0[20u].z / _424) : 5000.0;
    float _504;
    float _505;
    if (_491 < _483)
    {
        _504 = ((_433 + cbMtdParam._m0[22u].x) + (_491 * _429)) * 0.16666667163372039794921875;
        _505 = (((_491 * _430) + _434) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _504 = _485;
        _505 = _487;
    }
    vec4 _507 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_504, _505));
    float _512 = _507.x * _301;
    float _513 = _507.y * _301;
    float _514 = _507.z * _301;
    vec4 _527 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _531 = _527.z;
    float _534 = (_527.x * 2.0) + (-1.0);
    float _535 = (_527.y * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _3498 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))));
    float _553 = (cbMtdParam._m0[19u].y * _512) * cbMtdParam._m0[16u].x;
    float _555 = (cbMtdParam._m0[19u].y * _513) * cbMtdParam._m0[16u].y;
    float _557 = (cbMtdParam._m0[19u].y * _514) * cbMtdParam._m0[16u].z;
    vec4 _584 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _589 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _595 = ((_584.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _597 = (-0.0) - (cbMtdParam._m0[21u].x * ((_584.x * 0.5) + (-0.25)));
    float _598 = fract(_589);
    float _600 = fract(_589 + 0.5);
    vec4 _627 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_598 * _597) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_595 * _598) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _629 = _627.x;
    float _635 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_600 * _597) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_595 * _600) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _629) * abs((_598 * 2.0) + (-1.0))) + _629;
    float _646 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _650 = fract(abs(_646));
    float _657 = sin(cbMtdParam._m0[21u].z);
    float _658 = cos(cbMtdParam._m0[21u].z);
    float _659 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _660 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _685 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_660, (-0.0) - _657, _658 * _659) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_660, _658, _659 * _657) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_646 >= ((-0.0) - _646)) ? _650 : ((-0.0) - _650)) * cbMtdParam._m0[18u].z) - _635)) + cbMtdParam._m0[18u].w;
    float _686 = ceil(_685);
    float _3509 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _707 = ((((cbMtdParam._m0[21u].w * _512) * cbMtdParam._m0[15u].x) - _553) * _687) + _553;
    float _708 = ((((cbMtdParam._m0[21u].w * _513) * cbMtdParam._m0[15u].y) - _555) * _687) + _555;
    float _709 = ((((cbMtdParam._m0[21u].w * _514) * cbMtdParam._m0[15u].z) - _557) * _687) + _557;
    float _713 = abs(cbMtdParam._m0[20u].w * _685);
    float _717 = (((_713 * cbMtdParam._m0[18u].y) - _635) * _713) + _635;
    float _3520 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _718 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    vec4 _730 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _745 = (cbMtdParam._m0[14u].x * _730.x) * cbMtdParam._m0[19u].x;
    float _746 = (cbMtdParam._m0[14u].y * _730.y) * cbMtdParam._m0[19u].x;
    float _747 = (cbMtdParam._m0[14u].z * _730.z) * cbMtdParam._m0[19u].x;
    float _754 = exp2(log2(_718) * cbMtdParam._m0[20u].x);
    float _776 = fma(_541, _219, fma(_535, _226, _534 * _212));
    float _779 = fma(_541, _220, fma(_535, _227, _534 * _213));
    float _782 = fma(_541, _221, fma(_535, _228, _534 * _214));
    float _786 = inversesqrt(dot(vec3(_776, _779, _782), vec3(_776, _779, _782)));
    float _787 = _786 * _776;
    float _788 = _786 * _779;
    float _789 = _786 * _782;
    float _3531 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _790 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _3542 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3553 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3564 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _809 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _813 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _814 = _282 * _813;
    float _815 = _283 * _813;
    float _816 = _284 * _813;
    vec4 _821 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _823 = _821.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _984 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _990 = (cbMatDynParam._m0[5u].x * _984) + cbMatDynParam._m0[5u].y;
        float _3575 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _995 = (cbMatDynParam._m0[5u].z * _984) + cbMatDynParam._m0[5u].w;
        float _3586 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) - _991)) + _991) < ((_823 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _840 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _841 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _860 = fma(_789, cbSceneParam._m0[5u].z, fma(_788, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _787));
    float _863 = fma(_789, cbSceneParam._m0[6u].z, fma(_788, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _787));
    float _866 = fma(_789, cbSceneParam._m0[7u].z, fma(_788, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _787));
    uint _879 = uint(roundEven(NORMAL.w)) * 13u;
    uint _880 = _879 + 9u;
    uint _881 = _880 + uint(cbMatDynParam._m0[0u].w);
    float _887 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0)))) * cbInstanceData._m0[_881].x;
    float _888 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) * cbInstanceData._m0[_881].y;
    float _889 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_881].z;
    float _3597 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _3608 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    vec4 _901 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _840, cbSceneParam._m0[86u].y * _841));
    float _904 = _901.x * TEXCOORD_4;
    float _905 = dot(vec3(_787, _788, _789), vec3(_814, _815, _816));
    float _908 = _905 * 2.0;
    float _912 = (_908 * _787) - _814;
    float _913 = (_908 * _788) - _815;
    float _914 = (_908 * _789) - _816;
    float _918 = abs(dot(vec3(_814, _815, _816), vec3(_787, _788, _789)));
    float _3630 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _920 = sqrt(_790);
    float _933 = exp2((_920 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_920 * 3.0));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1029 = fma(_973, cbModelParam._m0[26u].z, fma(_969, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965));
        float _1033 = fma(_973, cbModelParam._m0[27u].z, fma(_969, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965));
        float _1037 = fma(_973, cbModelParam._m0[28u].z, fma(_969, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965));
        float _1061 = _965 + _787;
        float _1062 = _969 + _788;
        float _1063 = _973 + _789;
        float _1073 = fma(_1063, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061)) - _1029;
        float _1074 = fma(_1063, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061)) - _1033;
        float _1075 = fma(_1063, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061)) - _1037;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1029 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1033 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[34u].z) + ((((((_1037 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1131 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1097.x + (-0.5));
        float _1133 = _1131 * (_1097.y + (-0.5));
        float _1134 = _1131 * (_1097.z + (-0.5));
        float _1141 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1104.x + (-0.5));
        float _1143 = _1141 * (_1104.y + (-0.5));
        float _1144 = _1141 * (_1104.z + (-0.5));
        float _1151 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1111.x + (-0.5));
        float _1153 = _1151 * (_1111.y + (-0.5));
        float _1154 = _1151 * (_1111.z + (-0.5));
        float _1161 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1118.x + (-0.5));
        float _1163 = _1161 * (_1118.y + (-0.5));
        float _1164 = _1161 * (_1118.z + (-0.5));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = _1132 * 0.5;
        float _1169 = _1142 * 0.5;
        float _1170 = _1152 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1185 = (dot(vec3(_787, _788, _789), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1195 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3678 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1197 + 1.0))) + _1202) * _1165;
        float _1212 = _1133 * 0.5;
        float _1213 = _1143 * 0.5;
        float _1214 = _1153 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_787, _788, _789), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3711 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1239 + 1.0))) + _1244) * _1166;
        float _1254 = _1134 * 0.5;
        float _1255 = _1144 * 0.5;
        float _1256 = _1154 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_787, _788, _789), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3744 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1281 + 1.0))) + _1286) * _1167;
        _1303 = _1134;
        _1304 = _1133;
        _1305 = _1132;
        _1306 = _1144;
        _1307 = _1143;
        _1308 = _1142;
        _1309 = _1154;
        _1310 = _1153;
        _1311 = _1152;
        _1312 = _1167;
        _1313 = _1166;
        _1314 = _1165;
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _454;
        _1304 = _454;
        _1305 = _454;
        _1306 = _454;
        _1307 = _454;
        _1308 = _454;
        _1309 = _454;
        _1310 = _454;
        _1311 = _454;
        _1312 = _454;
        _1313 = _454;
        _1314 = _454;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1345 = fma(_973, cbModelParam._m0[30u].z, fma(_969, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965));
        float _1349 = fma(_973, cbModelParam._m0[31u].z, fma(_969, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965));
        float _1353 = fma(_973, cbModelParam._m0[32u].z, fma(_969, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965));
        float _1376 = _965 + _787;
        float _1377 = _969 + _788;
        float _1378 = _973 + _789;
        float _1388 = fma(_1378, cbModelParam._m0[30u].z, fma(_1377, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1376)) - _1345;
        float _1389 = fma(_1378, cbModelParam._m0[31u].z, fma(_1377, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1376)) - _1349;
        float _1390 = fma(_1378, cbModelParam._m0[32u].z, fma(_1377, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1376)) - _1353;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1407 = ((_1394 * _1388) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1345 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1394 * _1389) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1349 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1394 * _1390) / cbModelParam._m0[35u].z) + ((((((_1353 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        float _1444 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1411.x + (-0.5));
        float _1446 = _1444 * (_1411.y + (-0.5));
        float _1447 = _1444 * (_1411.z + (-0.5));
        float _1454 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1418.x + (-0.5));
        float _1456 = _1454 * (_1418.y + (-0.5));
        float _1457 = _1454 * (_1418.z + (-0.5));
        float _1464 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1425.x + (-0.5));
        float _1466 = _1464 * (_1425.y + (-0.5));
        float _1467 = _1464 * (_1425.z + (-0.5));
        float _1474 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1432.x + (-0.5));
        float _1476 = _1474 * (_1432.y + (-0.5));
        float _1477 = _1474 * (_1432.z + (-0.5));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = _1445 * 0.5;
        float _1482 = _1455 * 0.5;
        float _1483 = _1465 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_787, _788, _789), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _3807 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1508 + 1.0))) + _1513) * _1478;
        float _1523 = _1446 * 0.5;
        float _1524 = _1456 * 0.5;
        float _1525 = _1466 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_787, _788, _789), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _3840 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1550 + 1.0))) + _1555) * _1479;
        float _1565 = _1447 * 0.5;
        float _1566 = _1457 * 0.5;
        float _1567 = _1467 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_787, _788, _789), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _3873 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1592 + 1.0))) + _1597) * _1480;
        _1614 = _1447;
        _1615 = _1446;
        _1616 = _1445;
        _1617 = _1457;
        _1618 = _1456;
        _1619 = _1455;
        _1620 = _1467;
        _1621 = _1466;
        _1622 = _1465;
        _1623 = _1480;
        _1624 = _1479;
        _1625 = _1478;
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
    }
    else
    {
        _1614 = _454;
        _1615 = _454;
        _1616 = _454;
        _1617 = _454;
        _1618 = _454;
        _1619 = _454;
        _1620 = _454;
        _1621 = _454;
        _1622 = _454;
        _1623 = _454;
        _1624 = _454;
        _1625 = _454;
        _1626 = 0.0;
        _1627 = 0.0;
        _1628 = 0.0;
    }
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1315)) + _1315;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1316)) + _1316;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1317)) + _1317;
    float _1661 = fma(_1640, cbSceneParam._m0[89u].z, fma(_1639, cbSceneParam._m0[89u].y, _1638 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1640, cbSceneParam._m0[90u].z, fma(_1639, cbSceneParam._m0[90u].y, _1638 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1640, cbSceneParam._m0[91u].z, fma(_1639, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1638));
    float _1682 = _912 * 0.5;
    float _1683 = _913 * 0.5;
    float _1684 = _914 * 0.5;
    float _1685 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1688 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1691 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1725;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1698 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1702 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1706 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1713 = dot(vec4(cbModelParam._m0[39u]), vec4(_1682, _1683, _1684, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1713) ? 0.0 : (isnan(0.0) ? _1713 : max(0.0, _1713))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1736;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1727 = dot(vec4(cbModelParam._m0[40u]), vec4(_1682, _1683, _1684, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1740 = (_1736 * cbModelParam._m0[1u].x) + (_1725 * (1.0 - cbModelParam._m0[1u].x));
    float _1750 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _790);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1750 : min(cbModelParam._m0[25u].z, _1750));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1798 = fma(_973, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965)) + cbModelParam._m0[13u].w;
        float _1802 = fma(_973, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965)) + cbModelParam._m0[14u].w;
        float _1806 = fma(_973, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965)) + cbModelParam._m0[15u].w;
        float _1809 = fma(_914, cbModelParam._m0[13u].z, fma(_913, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _912));
        float _1812 = fma(_914, cbModelParam._m0[14u].z, fma(_913, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _912));
        float _1815 = fma(_914, cbModelParam._m0[15u].z, fma(_913, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _912));
        float _1843;
        if (_1809 > 0.0)
        {
            _1843 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1843 = frontier_phi_29_27_ladder;
        }
        float _2212;
        if (_1812 > 0.0)
        {
            _2212 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2212 = frontier_phi_38_34_ladder;
        }
        float _2554;
        if (_1815 > 0.0)
        {
            _2554 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2554 = frontier_phi_52_45_ladder;
        }
        float _2556 = isnan(_2212) ? _1843 : (isnan(_1843) ? _2212 : min(_1843, _2212));
        float _2557 = isnan(_2554) ? _2556 : (isnan(_2556) ? _2554 : min(_2556, _2554));
        float _2561 = (_2557 * _1809) + _1798;
        float _2562 = (_2557 * _1812) + _1802;
        float _2563 = (_2557 * _1815) + _1806;
        float _2564 = _2557 * 9.9999997473787516355514526367188e-05;
        float _2565 = (-1.0) - _2564;
        float _2567 = _2564 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2563 > _2567) || ((_2563 < _2565) || ((_2562 > _2567) || ((_2562 < _2565) || ((_2561 < _2565) || (_2561 > _2567))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2705 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2563, cbModelParam._m0[9u].z, fma(_2562, cbModelParam._m0[9u].y, _2561 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2563, cbModelParam._m0[10u].z, fma(_2562, cbModelParam._m0[10u].y, _2561 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2563, cbModelParam._m0[11u].z, fma(_2562, cbModelParam._m0[11u].y, _2561 * cbModelParam._m0[11u].x))), _1751);
            frontier_phi_28_52_ladder = _2705.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2705.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2705.x * cbModelParam._m0[1u].y;
        }
        _1831 = frontier_phi_28_52_ladder_2;
        _1833 = frontier_phi_28_52_ladder_1;
        _1835 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_912, _913, _914), _1751);
        _1831 = _1819.x * cbModelParam._m0[1u].y;
        _1833 = _1819.y * cbModelParam._m0[1u].y;
        _1835 = _1819.z * cbModelParam._m0[1u].y;
    }
    float _1839 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _790);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1839 : min(cbModelParam._m0[25u].w, _1839));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1892 = fma(_973, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965)) + cbModelParam._m0[21u].w;
        float _1896 = fma(_973, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965)) + cbModelParam._m0[22u].w;
        float _1900 = fma(_973, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965)) + cbModelParam._m0[23u].w;
        float _1903 = fma(_914, cbModelParam._m0[21u].z, fma(_913, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _912));
        float _1906 = fma(_914, cbModelParam._m0[22u].z, fma(_913, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _912));
        float _1909 = fma(_914, cbModelParam._m0[23u].z, fma(_913, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _912));
        float _2217;
        if (_1903 > 0.0)
        {
            _2217 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2217 = frontier_phi_40_36_ladder;
        }
        float _2580;
        if (_1906 > 0.0)
        {
            _2580 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2580 = frontier_phi_54_47_ladder;
        }
        float _2770;
        if (_1909 > 0.0)
        {
            _2770 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2770 = frontier_phi_72_65_ladder;
        }
        float _2772 = isnan(_2580) ? _2217 : (isnan(_2217) ? _2580 : min(_2217, _2580));
        float _2773 = isnan(_2770) ? _2772 : (isnan(_2772) ? _2770 : min(_2772, _2770));
        float _2777 = (_2773 * _1903) + _1892;
        float _2778 = (_2773 * _1906) + _1896;
        float _2779 = (_2773 * _1909) + _1900;
        float _2780 = _2773 * 9.9999997473787516355514526367188e-05;
        float _2781 = (-1.0) - _2780;
        float _2783 = _2780 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2779 > _2783) || ((_2779 < _2781) || ((_2778 > _2783) || ((_2778 < _2781) || ((_2777 < _2781) || (_2777 > _2783))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2779, cbModelParam._m0[17u].z, fma(_2778, cbModelParam._m0[17u].y, _2777 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2779, cbModelParam._m0[18u].z, fma(_2778, cbModelParam._m0[18u].y, _2777 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2779, cbModelParam._m0[19u].z, fma(_2778, cbModelParam._m0[19u].y, _2777 * cbModelParam._m0[19u].x))), _1840);
            frontier_phi_37_72_ladder = _3021.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _3021.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _3021.x * cbModelParam._m0[1u].z;
        }
        _1928 = frontier_phi_37_72_ladder_2;
        _1930 = frontier_phi_37_72_ladder_1;
        _1932 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_912, _913, _914), _1840);
        _1928 = _1912.x * cbModelParam._m0[1u].z;
        _1930 = _1912.y * cbModelParam._m0[1u].z;
        _1932 = _1912.z * cbModelParam._m0[1u].z;
    }
    float _1944 = ((((1.0 - _933) * ((_920 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_933 * _920)) * _904;
    float _1945 = _1944 * ((cbModelParam._m0[1u].w * (_1928 - _1831)) + _1831);
    float _1946 = _1944 * ((cbModelParam._m0[1u].w * (_1930 - _1833)) + _1833);
    float _1947 = _1944 * ((cbModelParam._m0[1u].w * (_1932 - _1835)) + _1835);
    float _1950 = fma(_1947, cbSceneParam._m0[89u].z, fma(_1946, cbSceneParam._m0[89u].y, _1945 * cbSceneParam._m0[89u].x));
    float _1953 = fma(_1947, cbSceneParam._m0[90u].z, fma(_1946, cbSceneParam._m0[90u].y, _1945 * cbSceneParam._m0[90u].x));
    float _1956 = fma(_1947, cbSceneParam._m0[91u].z, fma(_1946, cbSceneParam._m0[91u].y, _1945 * cbSceneParam._m0[91u].x));
    vec4 _1964 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_840, _841));
    float _1966 = _1964.w;
    float _1978 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1966);
    float _1979 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1966);
    float _1980 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1966);
    uvec4 _1984 = floatBitsToUint(cbInstanceData._m0[_879 + 5u]);
    uint _1986 = _1984.x * 14u;
    uint _1987 = _1986 + 13u;
    float _1992 = _904 + (-1.0);
    float _1995 = (cbLight._m0[_1987].x * _1992) + 1.0;
    float _1996 = (cbLight._m0[_1987].y * _1992) + 1.0;
    uint _1997 = _1986 + 5u;
    float _2003 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2007 = _1986 + 4u;
    float _2016 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2020 = _1986 | 1u;
    float _2031 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_787, _788, _789));
    float _2034 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_787, _788, _789));
    float _4009 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _4020 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2039 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * 0.3183098733425140380859375;
    float _2041 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.3183098733425140380859375;
    float _2048 = ((cbLight._m0[_1997].x * _2003) * _2041) + (((cbLight._m0[_2007].x * _1978) * _2016) * _2039);
    float _2049 = ((_2003 * cbLight._m0[_1997].y) * _2041) + (((cbLight._m0[_2007].y * _1979) * _2016) * _2039);
    float _2050 = ((_2003 * cbLight._m0[_1997].z) * _2041) + (((cbLight._m0[_2007].z * _1980) * _2016) * _2039);
    uint _2052 = _1986 + 8u;
    float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _790) * 0.949999988079071044921875);
    float _2066 = _2065 * _2065;
    float _2067 = cbLight._m0[_1986].x + _814;
    float _2068 = cbLight._m0[_1986].y + _815;
    float _2069 = cbLight._m0[_1986].z + _816;
    float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
    float _2074 = _2073 * _2067;
    float _2075 = _2073 * _2068;
    float _2076 = _2073 * _2069;
    float _2077 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_1986].xyz));
    float _4031 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _2081 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _2082 = dot(vec3(_787, _788, _789), vec3(_2074, _2075, _2076));
    float _4053 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _2086 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2074, _2075, _2076));
    float _4064 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2090 = _2066 * _2066;
    float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
    float _2105 = (exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2106 = 1.0 - _2066;
    float _2117 = (0.5 / (((_2081 * ((_2080 * _2106) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2106) + _2066) * _2080))) * _2080;
    float _4075 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2119 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
    uint _2133 = _1986 + 9u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _790) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_2020].x + _814;
    float _2147 = cbLight._m0[_2020].y + _815;
    float _2148 = cbLight._m0[_2020].z + _816;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2020].xyz));
    float _4086 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2160 = dot(vec3(_787, _788, _789), vec3(_2153, _2154, _2155));
    float _4097 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2153, _2154, _2155));
    float _4108 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2145 * _2145;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2181 = (exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2182 = 1.0 - _2145;
    float _2192 = (0.5 / (((_2081 * ((_2159 * _2182) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2182) + _2145) * _2159))) * _2159;
    float _4119 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2194 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    float _2204 = (((_2181 * cbLight._m0[_2133].x) * _2194) * _2003) + ((((cbLight._m0[_2052].x * _1978) * _2105) * _2119) * _2016);
    float _2205 = (((_2181 * cbLight._m0[_2133].y) * _2194) * _2003) + ((((cbLight._m0[_2052].y * _1979) * _2105) * _2119) * _2016);
    float _2206 = (((_2181 * cbLight._m0[_2133].z) * _2194) * _2003) + ((((cbLight._m0[_2052].z * _1980) * _2105) * _2119) * _2016);
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    if (_1984.y == 0u)
    {
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2261;
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2261;
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2261;
        uvec4 _2276 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2277 = _2276.x;
        uint _2288 = uint((float(_2276.y) * floor(float(uint(cbSceneParam._m0[85u].y * _841) / _2277))) + floor(float(uint(cbSceneParam._m0[85u].x * _840) / _2277)));
        float _2298 = (log2(_2264 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2299 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        uint _2302 = uint(isnan(14.0) ? _2299 : (isnan(_2299) ? 14.0 : min(_2299, 14.0)));
        uvec4 _2307 = texelFetch(g_lightClusterGridBuffer, int(((_2302 << 2u) + (_2288 << 6u)) >> 2u));
        uint _2308 = _2307.x;
        uint _2309 = _2276.z;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        if (((((1u << ((_2309 >> 4u) & 15u)) + 4294967295u) & _2308) == 0u) || ((_2309 & 240u) == 0u))
        {
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
        }
        else
        {
            float _2426;
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            uint _2623 = 0u;
            uint _2632;
            bool _2633;
            for (;;)
            {
                _2632 = texelFetch(g_lightClassification, int((((_2302 << 5u) + (_2288 << 9u)) + (_2623 << 2u)) >> 2u)).x;
                _2633 = _2632 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2633)
                {
                    frontier_phi_67_pred = _2620;
                    frontier_phi_67_pred_1 = _2619;
                    frontier_phi_67_pred_2 = _2618;
                    frontier_phi_67_pred_3 = _2617;
                    frontier_phi_67_pred_4 = _2621;
                    frontier_phi_67_pred_5 = _2622;
                }
                else
                {
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    uint _2819;
                    _2813 = _2617;
                    _2814 = _2618;
                    _2815 = _2619;
                    _2816 = _2620;
                    _2817 = _2621;
                    _2818 = _2622;
                    _2819 = _2632;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    for (;;)
                    {
                        uint _2823 = uint(findLSB(_2819)) + (_2623 << 5u);
                        uint _2820 = (_2819 + 4294967295u) & _2819;
                        uint _2825 = _2823 * 48u;
                        vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2845 = (_2823 * 48u) + 4u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 3u)).x));
                        uint _2864 = (_2823 * 48u) + 8u;
                        vec3 _2875 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x));
                        float _2879 = _2839.x - _2262;
                        float _2880 = _2839.y - _2263;
                        float _2881 = _2839.z - _2264;
                        float _2882 = dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881));
                        float _2885 = inversesqrt(_2882);
                        float _2886 = _2885 * _2879;
                        float _2887 = _2885 * _2880;
                        float _2888 = _2885 * _2881;
                        float _2889 = dot(vec3(_860, _863, _866), vec3(_2886, _2887, _2888));
                        float _2894 = 1.0 - (_2882 * _2839.w);
                        float _4140 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2895 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2896 = sqrt(_2882) * _2858.w;
                        float _2899 = 1.39999997615814208984375 / (_2896 + 1.39999997615814208984375);
                        float _2900 = _2899 * _2899;
                        float _2903 = ((1.0 - _2900) * _2889) + _2900;
                        float _2906 = _2896 * _2896;
                        float _2910 = ((isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0))) * _2895) / ((_2906 * 0.699999988079071044921875) + 1.0);
                        float _2914 = (-0.0) - _2262;
                        float _2915 = (-0.0) - _2263;
                        float _2916 = (-0.0) - _2264;
                        float _2920 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
                        float _2921 = _2920 * _2914;
                        float _2922 = _2920 * _2915;
                        float _2923 = _2920 * _2916;
                        float _2931 = exp2(log2(1.0 / ((_2906 * 3.5) + 5.0)) * 0.25);
                        float _2932 = 1.0 - _920;
                        float _2939 = sqrt(1.0 - ((1.0 - (_2932 * _2932)) * (1.0 - (_2931 * _2931))));
                        float _2940 = _2939 * _2939;
                        float _2941 = _2940 * _2940;
                        float _2942 = _2921 + _2886;
                        float _2943 = _2922 + _2887;
                        float _2944 = _2923 + _2888;
                        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
                        float _2952 = dot(vec3(_860, _863, _866), vec3(_2921, _2922, _2923));
                        float _4156 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2955 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2956 = dot(vec3(_860, _863, _866), vec3(_2948 * _2942, _2948 * _2943, _2948 * _2944));
                        float _4167 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2959 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2963 = ((_2959 * _2959) * (_2941 + (-1.0))) + 1.0;
                        float _2964 = _2899 * _2940;
                        float _2965 = _2964 * _2964;
                        float _2968 = ((1.0 - _2965) * _2889) + _2965;
                        float _4178 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2969 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2970 = 1.0 - _2940;
                        float _2980 = (0.5 / (((_2969 * ((_2955 * _2970) + _2940)) + 9.9999999392252902907785028219223e-09) + (((_2969 * _2970) + _2940) * _2955))) * _2969;
                        float _4189 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2991 = (((_2941 * 3.1415927410125732421875) * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) / ((_2963 * _2963) * ((_2906 * 2.1991131305694580078125) + 3.141590118408203125))) * _2895;
                        _2717 = (_2910 * _2858.x) + _2816;
                        _2718 = (_2910 * _2858.y) + _2817;
                        _2719 = (_2910 * _2858.z) + _2818;
                        _2714 = (_2991 * _2875.x) + _2813;
                        _2715 = (_2991 * _2875.y) + _2814;
                        _2716 = (_2991 * _2875.z) + _2815;
                        if (_2820 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2813 = _2714;
                            _2814 = _2715;
                            _2815 = _2716;
                            _2816 = _2717;
                            _2817 = _2718;
                            _2818 = _2719;
                            _2819 = _2820;
                        }
                    }
                    frontier_phi_67_pred = _2717;
                    frontier_phi_67_pred_1 = _2716;
                    frontier_phi_67_pred_2 = _2715;
                    frontier_phi_67_pred_3 = _2714;
                    frontier_phi_67_pred_4 = _2718;
                    frontier_phi_67_pred_5 = _2719;
                }
                _2432 = frontier_phi_67_pred;
                _2430 = frontier_phi_67_pred_1;
                _2428 = frontier_phi_67_pred_2;
                _2426 = frontier_phi_67_pred_3;
                _2434 = frontier_phi_67_pred_4;
                _2436 = frontier_phi_67_pred_5;
                uint _2624 = _2623 + 1u;
                if (_2624 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2617 = _2426;
                    _2618 = _2428;
                    _2619 = _2430;
                    _2620 = _2432;
                    _2621 = _2434;
                    _2622 = _2436;
                    _2623 = _2624;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
        }
        uvec4 _2439 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2440 = _2439.z;
        uint _2442 = (_2440 >> 8u) & 15u;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((4294967295u << _2442) & _2308) == 0u)
        {
            _2585 = _2425;
            _2587 = _2427;
            _2589 = _2429;
            _2591 = _2431;
            _2593 = _2433;
            _2595 = _2435;
        }
        else
        {
            float _2610 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
            float _2611 = _2610 * _2262;
            float _2612 = _2610 * _2263;
            float _2613 = _2610 * _2264;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2442 < ((_2440 >> 12u) & 15u))
            {
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2594;
                float _2596;
                float _2796 = _2425;
                float _2797 = _2427;
                float _2798 = _2429;
                float _2799 = _2431;
                float _2800 = _2433;
                float _2801 = _2435;
                uint _2802 = _2442;
                uint _2811;
                bool _2812;
                for (;;)
                {
                    _2811 = texelFetch(g_lightClassification, int((((_2302 << 5u) + (_2288 << 9u)) + (_2802 << 2u)) >> 2u)).x;
                    _2812 = _2811 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2812)
                    {
                        frontier_phi_81_pred = _2799;
                        frontier_phi_81_pred_1 = _2798;
                        frontier_phi_81_pred_2 = _2797;
                        frontier_phi_81_pred_3 = _2796;
                        frontier_phi_81_pred_4 = _2801;
                        frontier_phi_81_pred_5 = _2800;
                    }
                    else
                    {
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3039 = _2796;
                        float _3040 = _2797;
                        float _3041 = _2798;
                        float _3042 = _2799;
                        float _3043 = _2800;
                        float _3044 = _2801;
                        uint _3045 = _2811;
                        uint _3046;
                        vec4 _3071;
                        float _3072;
                        vec4 _3087;
                        vec3 _3099;
                        vec4 _3114;
                        vec4 _3129;
                        float _3175;
                        bool _3176;
                        for (;;)
                        {
                            uint _3056 = ((_2802 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3045));
                            _3046 = (_3045 + 4294967295u) & _3045;
                            uint _3058 = _3056 * 40u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            _3072 = _3071.w;
                            uint _3074 = (_3056 * 40u) + 4u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3089 = (_3056 * 40u) + 8u;
                            _3099 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x));
                            uint _3101 = (_3056 * 40u) + 16u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3056 * 40u) + 20u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3056 * 40u) + 24u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3150 = (_3056 * 40u) + 28u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3175 = fma(_2264, _3163.z, fma(_2263, _3163.y, _3163.x * _2262)) + _3163.w;
                            _3176 = !((fma(_2264, _3144.z, fma(_2263, _3144.y, _3144.x * _2262)) + _3144.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3176)
                            {
                                float _3203 = _3071.x - _2262;
                                float _3204 = _3071.y - _2263;
                                float _3205 = _3071.z - _2264;
                                float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                                float _3209 = inversesqrt(_3206);
                                float _3210 = _3209 * _3203;
                                float _3211 = _3209 * _3204;
                                float _3212 = _3209 * _3205;
                                float _3216 = 1.0 - (_3206 / (_3072 * _3072));
                                float _4200 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3221 = sqrt(_3206) * _3087.w;
                                float _3223 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                                float _3224 = _3223 * _3223;
                                float _3227 = ((1.0 - _3224) * dot(vec3(_3210, _3211, _3212), vec3(_860, _863, _866))) + _3224;
                                float _3230 = _3221 * _3221;
                                float _3234 = (fma(_2264, _3114.z, fma(_2263, _3114.y, _3114.x * _2262)) + _3114.w) / _3175;
                                float _3235 = (fma(_2264, _3129.z, fma(_2263, _3129.y, _3129.x * _2262)) + _3129.w) / _3175;
                                float _3239 = 1.0 - dot(vec2(_3234, _3235), vec2(_3234, _3235));
                                float _4216 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3241 = _3240 * (((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3217) / ((_3230 * 0.699999988079071044921875) + 1.0));
                                float _3253 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                                float _3254 = 1.0 - _920;
                                float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                                float _3262 = _3261 * _3261;
                                float _3263 = _3262 * _3262;
                                float _3264 = _3210 - _2611;
                                float _3265 = _3211 - _2612;
                                float _3266 = _3212 - _2613;
                                float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                                float _3274 = dot(vec3(_860, _863, _866), vec3((-0.0) - _2611, (-0.0) - _2612, (-0.0) - _2613));
                                float _4227 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3278 = dot(vec3(_860, _863, _866), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                                float _4238 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3281 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                                float _3286 = _3223 * _3262;
                                float _3287 = _3286 * _3286;
                                float _3293 = ((1.0 - _3287) * dot(vec3(_860, _863, _866), vec3(_3210, _3211, _3212))) + _3287;
                                float _4249 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3295 = 1.0 - _3262;
                                float _3305 = (0.5 / (((_3294 * ((_3277 * _3295) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3294 * _3295) + _3262) * _3277))) * _3294;
                                float _4260 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3315 = (_3240 * _3217) * (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) / ((_3285 * _3285) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3241 * _3087.x;
                                frontier_phi_87_pred_1 = _3315 * _3099.z;
                                frontier_phi_87_pred_2 = _3315 * _3099.y;
                                frontier_phi_87_pred_3 = _3315 * _3099.x;
                                frontier_phi_87_pred_4 = _3241 * _3087.z;
                                frontier_phi_87_pred_5 = _3241 * _3087.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3322 = frontier_phi_87_pred;
                            _3321 = frontier_phi_87_pred_1;
                            _3320 = frontier_phi_87_pred_2;
                            _3319 = frontier_phi_87_pred_3;
                            _3324 = frontier_phi_87_pred_4;
                            _3323 = frontier_phi_87_pred_5;
                            _3029 = _3322 + _3042;
                            _3030 = _3323 + _3043;
                            _3031 = _3324 + _3044;
                            _3026 = _3319 + _3039;
                            _3027 = _3320 + _3040;
                            _3028 = _3321 + _3041;
                            if (_3046 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3046;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _3029;
                        frontier_phi_81_pred_1 = _3028;
                        frontier_phi_81_pred_2 = _3027;
                        frontier_phi_81_pred_3 = _3026;
                        frontier_phi_81_pred_4 = _3031;
                        frontier_phi_81_pred_5 = _3030;
                    }
                    _2592 = frontier_phi_81_pred;
                    _2590 = frontier_phi_81_pred_1;
                    _2588 = frontier_phi_81_pred_2;
                    _2586 = frontier_phi_81_pred_3;
                    _2596 = frontier_phi_81_pred_4;
                    _2594 = frontier_phi_81_pred_5;
                    uint _2803 = _2802 + 1u;
                    if (_2803 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2796 = _2586;
                        _2797 = _2588;
                        _2798 = _2590;
                        _2799 = _2592;
                        _2800 = _2594;
                        _2801 = _2596;
                        _2802 = _2803;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2596;
                frontier_phi_56_57_ladder_1 = _2594;
                frontier_phi_56_57_ladder_2 = _2592;
                frontier_phi_56_57_ladder_3 = _2588;
                frontier_phi_56_57_ladder_4 = _2586;
                frontier_phi_56_57_ladder_5 = _2590;
            }
            else
            {
                frontier_phi_56_57_ladder = _2435;
                frontier_phi_56_57_ladder_1 = _2433;
                frontier_phi_56_57_ladder_2 = _2431;
                frontier_phi_56_57_ladder_3 = _2427;
                frontier_phi_56_57_ladder_4 = _2425;
                frontier_phi_56_57_ladder_5 = _2429;
            }
            _2585 = frontier_phi_56_57_ladder_4;
            _2587 = frontier_phi_56_57_ladder_3;
            _2589 = frontier_phi_56_57_ladder_5;
            _2591 = frontier_phi_56_57_ladder_2;
            _2593 = frontier_phi_56_57_ladder_1;
            _2595 = frontier_phi_56_57_ladder;
        }
        float _2600 = isnan(1.0) ? _904 : (isnan(_904) ? 1.0 : min(_904, 1.0));
        _2321 = (_2600 * _2591) + _2048;
        _2323 = (_2600 * _2593) + _2049;
        _2325 = (_2600 * _2595) + _2050;
        _2327 = ((_2585 * 0.039999999105930328369140625) * _2600) + _2204;
        _2329 = ((_2587 * 0.039999999105930328369140625) * _2600) + _2205;
        _2331 = ((_2589 * 0.039999999105930328369140625) * _2600) + _2206;
    }
    else
    {
        _2321 = _2048;
        _2323 = _2049;
        _2325 = _2050;
        _2327 = _2204;
        _2329 = _2205;
        _2331 = _2206;
    }
    uint _2337 = _880 + uint(cbMatDynParam._m0[0u].w);
    float _2343 = (cbSceneParam._m0[72u].y * ((_754 * ((_745 - _707) - (_745 * _718))) + _707)) * cbInstanceData._m0[_2337].x;
    float _2344 = (cbSceneParam._m0[72u].y * ((_754 * ((_746 - _708) - (_746 * _718))) + _708)) * cbInstanceData._m0[_2337].y;
    float _2345 = (((_754 * ((_747 - _709) - (_747 * _718))) + _709) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2337].z;
    float _4276 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4287 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4298 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _2362 = (((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2321 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _904))) + ((_2327 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1740)) * cbPerFrame._m0[3u].x)) + _2343;
    float _2364 = (_2344 + ((_2329 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1740)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2323 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _904)));
    float _2366 = (_2345 + ((_2331 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1740)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2325 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _904)));
    float _2367 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2368 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2369 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2375 = cbMtdParam._m0[2u].x * _2343;
    float _2376 = cbMtdParam._m0[2u].y * _2344;
    float _2377 = cbMtdParam._m0[2u].z * _2345;
    float _4324 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2379 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    uint _2380 = _879 + 6u;
    float _2388 = _840 / cbSceneParam._m0[86u].x;
    float _2389 = _841 / cbSceneParam._m0[86u].y;
    vec4 _2403 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2388, _2389, (log2((isnan(cbSceneParam._m0[77u].w) ? _809 : (isnan(_809) ? cbSceneParam._m0[77u].w : min(_809, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2405 = _2403.x;
    float _2406 = _2403.y;
    float _2407 = _2403.z;
    float _2408 = _2403.w;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    if (_809 > cbSceneParam._m0[78u].w)
    {
        float _2450 = isnan(_809) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _809 : min(cbSceneParam._m0[80u].w, _809));
        float _2451 = _2450 / _809;
        float _2462 = _2451 * _282;
        float _2463 = _283 * _2451;
        float _2464 = (-0.0) - _2463;
        float _2465 = _2451 * _284;
        float _2467 = (cbSceneParam._m0[77u].w * _2464) / _2450;
        float _2468 = _2467 + cbSceneParam._m0[79u].w;
        float _2469 = cbSceneParam._m0[79u].w - _2463;
        float _2475 = sqrt(((_2462 * _2462) + (_2463 * _2463)) + (_2465 * _2465));
        float _2478 = (1.0 - (cbSceneParam._m0[77u].w / _2450)) * _2475;
        float _2484 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2486 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2727;
        if (abs((_2464 - _2467) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2727 = ((((_2468 > 0.0) ? exp2(_2484 * _2468) : (2.0 - exp2(_2486 * _2468))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2478;
        }
        else
        {
            float _2646 = 1.0 / cbSceneParam._m0[80u].x;
            float _2647 = isnan(_2469) ? _2468 : (isnan(_2468) ? _2469 : max(_2468, _2469));
            float _2648 = isnan(_2469) ? _2468 : (isnan(_2468) ? _2469 : min(_2468, _2469));
            float _2657 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : min(_2647, 0.0));
            float _2658 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : min(_2648, 0.0));
            _2727 = ((abs(_2475 / _2464) * cbSceneParam._m0[80u].y) * ((((_2657 - _2658) * 2.0) - ((exp2(_2484 * (isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0)))) - exp2(_2484 * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0))))) * _2646)) - ((exp2(_2486 * _2657) - exp2(_2486 * _2658)) * _2646))) + (_2478 * cbSceneParam._m0[80u].z);
        }
        vec4 _2729 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2388, _2389, 1.0), 0.0);
        float _2738 = exp2((_2727 * (-1.44269502162933349609375)) * (1.0 - _2729.w));
        float _2739 = log2(_2738);
        float _2755 = log2(_2408);
        _2488 = (exp2(_2755 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].x)) * _2729.x) / cbSceneParam._m0[78u].x)) + _2405;
        _2490 = (exp2(_2755 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].y)) * _2729.y) / cbSceneParam._m0[78u].y)) + _2406;
        _2492 = (exp2(_2755 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].z)) * _2729.z) / cbSceneParam._m0[78u].z)) + _2407;
        _2494 = _2738 * _2408;
    }
    else
    {
        _2488 = _2405;
        _2490 = _2406;
        _2492 = _2407;
        _2494 = _2408;
    }
    bool _2765;
    vec4 _2503;
    vec4 _2525;
    float _2527;
    float _2531;
    float _2532;
    float _2533;
    float _2536;
    float _2539;
    float _2542;
    float _2543;
    bool _2553;
    for (;;)
    {
        _2503 = cbMatDynParam._m0[0u];
        float _2505 = roundEven(_2503.y);
        bool _2506 = _2505 == 3.0;
        float _2507 = log2(_2494);
        float _2511 = exp2(_2507 * cbSceneParam._m0[78u].x);
        float _2512 = exp2(_2507 * cbSceneParam._m0[78u].y);
        float _2513 = exp2(_2507 * cbSceneParam._m0[78u].z);
        float _2514 = _2511 * _2367;
        float _2515 = _2512 * _2368;
        float _2516 = _2513 * _2369;
        float _2523 = _823 + (-0.5);
        _2525 = cbMtdParam._m0[1u];
        _2527 = _2525.y * _2523;
        float _2530 = (_2505 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2531 = _2530 * (_2506 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2488)));
        _2532 = _2530 * (_2506 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2490)));
        _2533 = _2530 * (_2506 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2492)));
        _2536 = ((_2375 * _2379) * _2511) * _2530;
        _2539 = ((_2376 * _2379) * _2512) * _2530;
        _2542 = ((_2377 * _2379) * _2513) * _2530;
        _2543 = _2523 * 0.999000012874603271484375;
        _2553 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2553)
        {
            if ((cbInstanceData._m0[_879 + 7u].x + _2543) < 0.5)
            {
                _2765 = true;
                break;
            }
        }
        uint _2681 = _880 + uint(_2503.w);
        if ((cbInstanceData._m0[_2681].w < 1.0) && ((cbInstanceData._m0[_2681].w + _2543) < 0.5))
        {
            _2765 = true;
            break;
        }
        if ((_2527 + 1.0) < _2525.x)
        {
            _2765 = true;
            break;
        }
        _2765 = false;
        break;
    }
    float _2996;
    if (_2765)
    {
        discard_state = true;
        _2996 = 0.0;
    }
    else
    {
        _2996 = cbInstanceData._m0[_2380].w;
    }
    SV_Target.x = _2531;
    SV_Target.y = _2532;
    SV_Target.z = _2533;
    SV_Target.w = _2996;
    SV_Target_1.x = _2536;
    SV_Target_1.y = _2539;
    SV_Target_1.z = _2542;
    SV_Target_1.w = cbInstanceData._m0[_2380].w;
    discard_exit();
}


