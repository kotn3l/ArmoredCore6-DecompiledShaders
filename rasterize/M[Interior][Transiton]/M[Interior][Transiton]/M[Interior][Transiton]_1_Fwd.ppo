#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _863;
uint _2020;
uint _2021;
uint _2022;
uint _2256;
uint _2257;
uint _2258;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _326 = cbMtdParam._m0[27u].w + _267;
    float _327 = cbMtdParam._m0[28u].x + _268;
    float _328 = cbMtdParam._m0[28u].y + _269;
    float _345 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_199 * _191, _199 * _192, _199 * _193));
    float _346 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_210 * TANGENT.x, _210 * TANGENT.y, _210 * TANGENT.z));
    float _347 = (-0.0) - dot(vec3(_326, _327, _328), vec3((-0.0) - (NORMAL.x * _206), (-0.0) - (NORMAL.y * _206), (-0.0) - (NORMAL.z * _206)));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _354 = _351 * _347;
    float _357 = ((_351 * _345) + (((_288.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w)) * cbMtdParam._m0[24u].x;
    float _358 = ((_351 * _346) + (((_288.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x)) * cbMtdParam._m0[23u].w;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_357 > 0.0)
    {
        _366 = (1.0 - _359) / _357;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_357 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _357;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    float _378 = (_354 > 0.0) ? (cbMtdParam._m0[17u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_359 + (-0.5)) + (_380 * _357)) / _391) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_360 + (-0.5)) + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _426 = cbMtdParam._m0[9u].x * _416.x;
    float _427 = cbMtdParam._m0[9u].y * _416.y;
    float _428 = cbMtdParam._m0[9u].z * _416.z;
    float _440 = (cbMtdParam._m0[19u].y * _426) * cbMtdParam._m0[16u].x;
    float _442 = (cbMtdParam._m0[19u].y * _427) * cbMtdParam._m0[16u].y;
    float _444 = (cbMtdParam._m0[19u].y * _428) * cbMtdParam._m0[16u].z;
    vec4 _468 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _473 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _479 = ((_468.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _481 = (-0.0) - (cbMtdParam._m0[21u].x * ((_468.x * 0.5) + (-0.25)));
    float _482 = fract(_473);
    float _484 = fract(_473 + 0.5);
    vec4 _511 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_482 * _481) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_479 * _482) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _513 = _511.x;
    float _519 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_484 * _481) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_479 * _484) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _513) * abs((_482 * 2.0) + (-1.0))) + _513;
    float _525 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _529 = fract(abs(_525));
    float _539 = sin(cbMtdParam._m0[21u].z);
    float _540 = cos(cbMtdParam._m0[21u].z);
    float _541 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _542 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _567 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_542, (-0.0) - _539, _540 * _541) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_542, _540, _541 * _539) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_525 >= ((-0.0) - _525)) ? _529 : ((-0.0) - _529)) * cbMtdParam._m0[18u].z) - _519)) + cbMtdParam._m0[18u].w;
    float _568 = ceil(_567);
    float _2478 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _2478 : (isnan(_2478) ? 1.0 : min(_2478, 1.0));
    float _589 = ((((cbMtdParam._m0[21u].w * _426) * cbMtdParam._m0[15u].x) - _440) * _569) + _440;
    float _590 = ((((cbMtdParam._m0[21u].w * _427) * cbMtdParam._m0[15u].y) - _442) * _569) + _442;
    float _591 = ((((cbMtdParam._m0[21u].w * _428) * cbMtdParam._m0[15u].z) - _444) * _569) + _444;
    float _595 = abs(cbMtdParam._m0[20u].w * _567);
    float _599 = (((_595 * cbMtdParam._m0[18u].y) - _519) * _595) + _519;
    float _2489 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _600 = isnan(1.0) ? _2489 : (isnan(_2489) ? 1.0 : min(_2489, 1.0));
    vec4 _612 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _627 = (cbMtdParam._m0[14u].x * _612.x) * cbMtdParam._m0[19u].x;
    float _628 = (cbMtdParam._m0[14u].y * _612.y) * cbMtdParam._m0[19u].x;
    float _629 = (cbMtdParam._m0[14u].z * _612.z) * cbMtdParam._m0[19u].x;
    float _636 = exp2(log2(_600) * cbMtdParam._m0[20u].x);
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _675 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _676 = _267 * _675;
    float _677 = _268 * _675;
    float _678 = _269 * _675;
    float _684 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _685 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _694 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_684 * cbSceneParam._m0[86u].x, _685 * cbSceneParam._m0[86u].y));
    float _697 = _694.x * TEXCOORD_4;
    float _698 = (-0.0) - _676;
    float _699 = (-0.0) - _677;
    float _700 = (-0.0) - _678;
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _862;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _785 = (cbModelParam._m0[37u].x * ((((fma(_730, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _722)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _787 = (cbModelParam._m0[37u].y * ((((fma(_730, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _722)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _788 = (((((fma(_730, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _722)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_785, _787, _788), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_785, _787, _788), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_785, _787, _788), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_785, _787, _788), 0.0);
        float _825 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _835 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _845 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _855 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_812.x + (-0.5));
        float _857 = _855 * (_812.y + (-0.5));
        float _858 = _855 * (_812.z + (-0.5));
        _862 = _825 * (_791.z + (-0.5));
        _864 = _825 * (_791.y + (-0.5));
        _865 = _825 * (_791.x + (-0.5));
        _866 = _835 * (_798.z + (-0.5));
        _867 = _835 * (_798.y + (-0.5));
        _868 = _835 * (_798.x + (-0.5));
        _869 = _845 * (_805.z + (-0.5));
        _870 = _845 * (_805.y + (-0.5));
        _871 = _845 * (_805.x + (-0.5));
        _872 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        _873 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        _874 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    }
    else
    {
        _862 = _863;
        _864 = _863;
        _865 = _863;
        _866 = _863;
        _867 = _863;
        _868 = _863;
        _869 = _863;
        _870 = _863;
        _871 = _863;
        _872 = _863;
        _873 = _863;
        _874 = _863;
    }
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _927 = (cbModelParam._m0[38u].x * ((((fma(_730, cbModelParam._m0[30u].z, fma(_726, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _722)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _928 = (cbModelParam._m0[38u].y * ((((fma(_730, cbModelParam._m0[31u].z, fma(_726, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _722)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _929 = (((((fma(_730, cbModelParam._m0[32u].z, fma(_726, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _722)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        float _964 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _974 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _984 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _994 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_952.x + (-0.5));
        float _996 = _994 * (_952.y + (-0.5));
        float _997 = _994 * (_952.z + (-0.5));
        _1001 = _964 * (_931.z + (-0.5));
        _1002 = _964 * (_931.y + (-0.5));
        _1003 = _964 * (_931.x + (-0.5));
        _1004 = _974 * (_938.z + (-0.5));
        _1005 = _974 * (_938.y + (-0.5));
        _1006 = _974 * (_938.x + (-0.5));
        _1007 = _984 * (_945.z + (-0.5));
        _1008 = _984 * (_945.y + (-0.5));
        _1009 = _984 * (_945.x + (-0.5));
        _1010 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        _1011 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        _1012 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    }
    else
    {
        _1001 = _863;
        _1002 = _863;
        _1003 = _863;
        _1004 = _863;
        _1005 = _863;
        _1006 = _863;
        _1007 = _863;
        _1008 = _863;
        _1009 = _863;
        _1010 = _863;
        _1011 = _863;
        _1012 = _863;
    }
    float _1027 = _676 * (-0.5);
    float _1028 = _677 * (-0.5);
    float _1029 = _678 * (-0.5);
    float _1030 = dot(vec4(_1027, _1028, _1029, 1.0), vec4(_1003, _1006, _1009, _1012));
    float _1033 = dot(vec4(_1027, _1028, _1029, 1.0), vec4(_1002, _1005, _1008, _1011));
    float _1036 = dot(vec4(_1027, _1028, _1029, 1.0), vec4(_1001, _1004, _1007, _1010));
    float _1071;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1043 = dot(vec4(_1027, _1028, _1029, 1.0), vec4(_862, _866, _869, _872));
        float _1047 = dot(vec4(_1027, _1028, _1029, 1.0), vec4(_864, _867, _870, _873));
        float _1051 = dot(vec4(_1027, _1028, _1029, 1.0), vec4(_865, _868, _871, _874));
        float _1058 = dot(vec4(cbModelParam._m0[39u]), vec4(_1027, _1028, _1029, 1.0));
        _1071 = dot(vec3(isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)), isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)), isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1058) ? 0.0 : (isnan(0.0) ? _1058 : max(0.0, _1058))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1071 = 1.0;
    }
    float _1082;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1073 = dot(vec4(cbModelParam._m0[40u]), vec4(_1027, _1028, _1029, 1.0));
        _1082 = dot(vec3(isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)), isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)), isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1073) ? 0.0 : (isnan(0.0) ? _1073 : max(0.0, _1073))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1082 = 1.0;
    }
    float _1086 = (_1082 * cbModelParam._m0[1u].x) + (_1071 * (1.0 - cbModelParam._m0[1u].x));
    float _1092 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1173;
    float _1175;
    float _1177;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1140 = fma(_730, cbModelParam._m0[13u].z, fma(_726, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722)) + cbModelParam._m0[13u].w;
        float _1144 = fma(_730, cbModelParam._m0[14u].z, fma(_726, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722)) + cbModelParam._m0[14u].w;
        float _1148 = fma(_730, cbModelParam._m0[15u].z, fma(_726, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722)) + cbModelParam._m0[15u].w;
        float _1151 = fma(_700, cbModelParam._m0[13u].z, fma(_699, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _698));
        float _1154 = fma(_700, cbModelParam._m0[14u].z, fma(_699, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _698));
        float _1157 = fma(_700, cbModelParam._m0[15u].z, fma(_699, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _698));
        float _1183;
        if (_1151 > 0.0)
        {
            _1183 = abs((1.0 - _1140) / _1151);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1151 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1140 + 1.0) / _1151);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1183 = frontier_phi_22_20_ladder;
        }
        float _1459;
        if (_1154 > 0.0)
        {
            _1459 = abs((1.0 - _1144) / _1154);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1154 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1144 + 1.0) / _1154);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1459 = frontier_phi_31_27_ladder;
        }
        float _1773;
        if (_1157 > 0.0)
        {
            _1773 = abs((1.0 - _1148) / _1157);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1157 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1148 + 1.0) / _1157);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _1773 = frontier_phi_45_38_ladder;
        }
        float _1775 = isnan(_1459) ? _1183 : (isnan(_1183) ? _1459 : min(_1183, _1459));
        float _1776 = isnan(_1773) ? _1775 : (isnan(_1775) ? _1773 : min(_1775, _1773));
        float _1780 = (_1776 * _1151) + _1140;
        float _1781 = (_1776 * _1154) + _1144;
        float _1782 = (_1776 * _1157) + _1148;
        float _1783 = _1776 * 9.9999997473787516355514526367188e-05;
        float _1784 = (-1.0) - _1783;
        float _1786 = _1783 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_1782 > _1786) || ((_1782 < _1784) || ((_1781 > _1786) || ((_1781 < _1784) || ((_1780 < _1784) || (_1780 > _1786))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1782, cbModelParam._m0[9u].z, fma(_1781, cbModelParam._m0[9u].y, _1780 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1782, cbModelParam._m0[10u].z, fma(_1781, cbModelParam._m0[10u].y, _1780 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1782, cbModelParam._m0[11u].z, fma(_1781, cbModelParam._m0[11u].y, _1780 * cbModelParam._m0[11u].x))), _1092);
            frontier_phi_21_45_ladder = _1893.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _1893.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _1893.x * cbModelParam._m0[1u].y;
        }
        _1173 = frontier_phi_21_45_ladder_2;
        _1175 = frontier_phi_21_45_ladder_1;
        _1177 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1161 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_698, _699, _700), _1092);
        _1173 = _1161.x * cbModelParam._m0[1u].y;
        _1175 = _1161.y * cbModelParam._m0[1u].y;
        _1177 = _1161.z * cbModelParam._m0[1u].y;
    }
    float _1180 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1268;
    float _1270;
    float _1272;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1232 = fma(_730, cbModelParam._m0[21u].z, fma(_726, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722)) + cbModelParam._m0[21u].w;
        float _1236 = fma(_730, cbModelParam._m0[22u].z, fma(_726, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722)) + cbModelParam._m0[22u].w;
        float _1240 = fma(_730, cbModelParam._m0[23u].z, fma(_726, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722)) + cbModelParam._m0[23u].w;
        float _1243 = fma(_700, cbModelParam._m0[21u].z, fma(_699, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _698));
        float _1246 = fma(_700, cbModelParam._m0[22u].z, fma(_699, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _698));
        float _1249 = fma(_700, cbModelParam._m0[23u].z, fma(_699, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _698));
        float _1464;
        if (_1243 > 0.0)
        {
            _1464 = abs((1.0 - _1232) / _1243);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1243 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1232 + 1.0) / _1243);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1464 = frontier_phi_33_29_ladder;
        }
        float _1799;
        if (_1246 > 0.0)
        {
            _1799 = abs((1.0 - _1236) / _1246);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1246 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1236 + 1.0) / _1246);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _1799 = frontier_phi_47_40_ladder;
        }
        float _1950;
        if (_1249 > 0.0)
        {
            _1950 = abs((1.0 - _1240) / _1249);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1249 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1240 + 1.0) / _1249);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1950 = frontier_phi_61_56_ladder;
        }
        float _1952 = isnan(_1799) ? _1464 : (isnan(_1464) ? _1799 : min(_1464, _1799));
        float _1953 = isnan(_1950) ? _1952 : (isnan(_1952) ? _1950 : min(_1952, _1950));
        float _1957 = (_1953 * _1243) + _1232;
        float _1958 = (_1953 * _1246) + _1236;
        float _1959 = (_1953 * _1249) + _1240;
        float _1960 = _1953 * 9.9999997473787516355514526367188e-05;
        float _1961 = (-1.0) - _1960;
        float _1963 = _1960 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_1959 > _1963) || ((_1959 < _1961) || ((_1958 > _1963) || ((_1958 < _1961) || ((_1957 < _1961) || (_1957 > _1963))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2119 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1959, cbModelParam._m0[17u].z, fma(_1958, cbModelParam._m0[17u].y, _1957 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1959, cbModelParam._m0[18u].z, fma(_1958, cbModelParam._m0[18u].y, _1957 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1959, cbModelParam._m0[19u].z, fma(_1958, cbModelParam._m0[19u].y, _1957 * cbModelParam._m0[19u].x))), _1180);
            frontier_phi_30_61_ladder = _2119.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2119.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2119.x * cbModelParam._m0[1u].z;
        }
        _1268 = frontier_phi_30_61_ladder_2;
        _1270 = frontier_phi_30_61_ladder;
        _1272 = frontier_phi_30_61_ladder_1;
    }
    else
    {
        vec4 _1252 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_698, _699, _700), _1180);
        _1268 = _1252.x * cbModelParam._m0[1u].z;
        _1270 = _1252.y * cbModelParam._m0[1u].z;
        _1272 = _1252.z * cbModelParam._m0[1u].z;
    }
    float _1284 = _697 * 0.01200000010430812835693359375;
    float _1286 = _1284 * ((cbModelParam._m0[1u].w * (_1268 - _1173)) + _1173);
    float _1287 = _1284 * ((cbModelParam._m0[1u].w * (_1270 - _1175)) + _1175);
    float _1288 = _1284 * ((cbModelParam._m0[1u].w * (_1272 - _1177)) + _1177);
    float _1309 = fma(_1288, cbSceneParam._m0[89u].z, fma(_1287, cbSceneParam._m0[89u].y, _1286 * cbSceneParam._m0[89u].x));
    float _1312 = fma(_1288, cbSceneParam._m0[90u].z, fma(_1287, cbSceneParam._m0[90u].y, _1286 * cbSceneParam._m0[90u].x));
    float _1315 = fma(_1288, cbSceneParam._m0[91u].z, fma(_1287, cbSceneParam._m0[91u].y, _1286 * cbSceneParam._m0[91u].x));
    uint _1322 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1326 = floatBitsToUint(cbInstanceData._m0[_1322 + 5u]);
    uint _1328 = _1326.x * 14u;
    uint _1329 = _1328 + 13u;
    float _1334 = _697 + (-1.0);
    float _1337 = (cbLight._m0[_1329].x * _1334) + 1.0;
    float _1338 = (cbLight._m0[_1329].y * _1334) + 1.0;
    uint _1339 = _1328 + 8u;
    float _1350 = cbLight._m0[_1328].x + _676;
    float _1351 = cbLight._m0[_1328].y + _677;
    float _1352 = cbLight._m0[_1328].z + _678;
    float _1356 = inversesqrt(dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352)));
    float _1360 = dot(vec3(0.0), vec3(cbLight._m0[_1328].xyz));
    float _2615 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
    float _1363 = isnan(1.0) ? _2615 : (isnan(_2615) ? 1.0 : min(_2615, 1.0));
    float _1364 = dot(vec3(0.0), vec3(_676, _677, _678));
    float _2626 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
    float _1367 = isnan(1.0) ? _2626 : (isnan(_2626) ? 1.0 : min(_2626, 1.0));
    float _1368 = dot(vec3(cbLight._m0[_1328].xyz), vec3(_1350 * _1356, _1351 * _1356, _1352 * _1356));
    float _2637 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
    float _1379 = (exp2(log2(1.0 - (isnan(1.0) ? _2637 : (isnan(_2637) ? 1.0 : min(_2637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1385 = (0.5 / ((_1363 + 9.9999999392252902907785028219223e-09) + _1367)) * _1363;
    float _2648 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
    float _1387 = (isnan(1.0) ? _2648 : (isnan(_2648) ? 1.0 : min(_2648, 1.0))) * 0.31831014156341552734375;
    float _1389 = isnan(1.0) ? _1337 : (isnan(_1337) ? 1.0 : min(_1337, 1.0));
    uint _1399 = _1328 + 9u;
    uint _1405 = _1328 | 1u;
    float _1411 = cbLight._m0[_1405].x + _676;
    float _1412 = cbLight._m0[_1405].y + _677;
    float _1413 = cbLight._m0[_1405].z + _678;
    float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
    float _1421 = dot(vec3(0.0), vec3(cbLight._m0[_1405].xyz));
    float _2664 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
    float _1424 = isnan(1.0) ? _2664 : (isnan(_2664) ? 1.0 : min(_2664, 1.0));
    float _1425 = dot(vec3(cbLight._m0[_1405].xyz), vec3(_1411 * _1417, _1412 * _1417, _1413 * _1417));
    float _2675 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
    float _1434 = (exp2(log2(1.0 - (isnan(1.0) ? _2675 : (isnan(_2675) ? 1.0 : min(_2675, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1438 = (0.5 / ((_1424 + 9.9999999392252902907785028219223e-09) + _1367)) * _1424;
    float _2686 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
    float _1440 = (isnan(1.0) ? _2686 : (isnan(_2686) ? 1.0 : min(_2686, 1.0))) * 0.31831014156341552734375;
    float _1441 = isnan(1.0) ? _1338 : (isnan(_1338) ? 1.0 : min(_1338, 1.0));
    float _1451 = (((_1434 * cbLight._m0[_1399].x) * _1440) * _1441) + (((_1379 * cbLight._m0[_1339].x) * _1387) * _1389);
    float _1452 = (((_1434 * cbLight._m0[_1399].y) * _1440) * _1441) + (((_1379 * cbLight._m0[_1339].y) * _1387) * _1389);
    float _1453 = (((_1434 * cbLight._m0[_1399].z) * _1440) * _1441) + (((_1379 * cbLight._m0[_1339].z) * _1387) * _1389);
    float _1570;
    float _1572;
    float _1574;
    if (_1326.y == 0u)
    {
        float _1509 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1510 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1509;
        float _1511 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1509;
        float _1512 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1509;
        uvec4 _1524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1525 = _1524.x;
        uint _1536 = uint((float(_1524.y) * floor(float(uint(cbSceneParam._m0[85u].y * _685) / _1525))) + floor(float(uint(cbSceneParam._m0[85u].x * _684) / _1525)));
        float _1546 = (log2(_1512 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1547 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        uint _1550 = uint(isnan(14.0) ? _1547 : (isnan(_1547) ? 14.0 : min(_1547, 14.0)));
        uvec4 _1556 = texelFetch(g_lightClusterGridBuffer, int(((_1550 << 2u) + (_1536 << 6u)) >> 2u));
        uint _1557 = _1556.x;
        uint _1558 = _1524.z;
        float _1657;
        float _1659;
        float _1661;
        if (((((1u << ((_1558 >> 4u) & 15u)) + 4294967295u) & _1557) == 0u) || ((_1558 & 240u) == 0u))
        {
            _1657 = 0.0;
            _1659 = 0.0;
            _1661 = 0.0;
        }
        else
        {
            float _1658;
            float _1660;
            float _1662;
            float _1824 = 0.0;
            float _1825 = 0.0;
            float _1826 = 0.0;
            uint _1827 = 0u;
            uint _1836;
            bool _1837;
            for (;;)
            {
                _1836 = texelFetch(g_lightClassification, int((((_1550 << 5u) + (_1536 << 9u)) + (_1827 << 2u)) >> 2u)).x;
                _1837 = _1836 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                if (_1837)
                {
                    frontier_phi_58_pred = _1826;
                    frontier_phi_58_pred_1 = _1825;
                    frontier_phi_58_pred_2 = _1824;
                }
                else
                {
                    float _1990;
                    float _1991;
                    float _1992;
                    uint _1993;
                    _1990 = _1824;
                    _1991 = _1825;
                    _1992 = _1826;
                    _1993 = _1836;
                    float _1902;
                    float _1903;
                    float _1904;
                    for (;;)
                    {
                        uint _1997 = uint(findLSB(_1993)) + (_1827 << 5u);
                        uint _1994 = (_1993 + 4294967295u) & _1993;
                        uint _1999 = _1997 * 48u;
                        vec4 _2013 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1999)).x, texelFetch(g_PointLightRenderingBuffer, int(_1999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1999 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1999 + 3u)).x));
                        uint _2030 = (_1997 * 48u) + 8u;
                        vec3 _2041 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2030)).x, texelFetch(g_PointLightRenderingBuffer, int(_2030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2030 + 2u)).x));
                        float _2045 = _2013.x - _1510;
                        float _2046 = _2013.y - _1511;
                        float _2047 = _2013.z - _1512;
                        float _2048 = dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047));
                        float _2051 = inversesqrt(_2048);
                        float _2060 = 1.0 - (_2048 * _2013.w);
                        float _2712 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
                        float _2062 = sqrt(_2048) * uintBitsToFloat(uvec4(_2020, _2021, _2022, texelFetch(g_PointLightRenderingBuffer, int(((_1997 * 48u) + 4u) + 3u)).x)).w;
                        float _2065 = 1.39999997615814208984375 / (_2062 + 1.39999997615814208984375);
                        float _2066 = _2065 * _2065;
                        float _2069 = ((1.0 - _2066) * dot(vec3(0.0), vec3(_2051 * _2045, _2051 * _2046, _2051 * _2047))) + _2066;
                        float _2071 = (-0.0) - _1510;
                        float _2072 = (-0.0) - _1511;
                        float _2073 = (-0.0) - _1512;
                        float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
                        float _2081 = dot(vec3(0.0), vec3(_2077 * _2071, _2077 * _2072, _2077 * _2073));
                        float _2723 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
                        float _2734 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
                        float _2085 = isnan(1.0) ? _2734 : (isnan(_2734) ? 1.0 : min(_2734, 1.0));
                        float _2089 = (0.5 / (((isnan(1.0) ? _2723 : (isnan(_2723) ? 1.0 : min(_2723, 1.0))) + 9.9999999392252902907785028219223e-09) + _2085)) * _2085;
                        float _2745 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
                        float _2098 = (((isnan(1.0) ? _2745 : (isnan(_2745) ? 1.0 : min(_2745, 1.0))) * 3.1415927410125732421875) / (((_2062 * _2062) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2712 : (isnan(_2712) ? 1.0 : min(_2712, 1.0)));
                        _1902 = (_2098 * _2041.x) + _1990;
                        _1903 = (_2098 * _2041.y) + _1991;
                        _1904 = (_2098 * _2041.z) + _1992;
                        if (_1994 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1990 = _1902;
                            _1991 = _1903;
                            _1992 = _1904;
                            _1993 = _1994;
                        }
                    }
                    frontier_phi_58_pred = _1904;
                    frontier_phi_58_pred_1 = _1903;
                    frontier_phi_58_pred_2 = _1902;
                }
                _1662 = frontier_phi_58_pred;
                _1660 = frontier_phi_58_pred_1;
                _1658 = frontier_phi_58_pred_2;
                uint _1828 = _1827 + 1u;
                if (_1828 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1824 = _1658;
                    _1825 = _1660;
                    _1826 = _1662;
                    _1827 = _1828;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1657 = _1658;
            _1659 = _1660;
            _1661 = _1662;
        }
        uvec4 _1665 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1666 = _1665.z;
        uint _1668 = (_1666 >> 8u) & 15u;
        float _1804;
        float _1806;
        float _1808;
        if (((4294967295u << _1668) & _1557) == 0u)
        {
            _1804 = _1657;
            _1806 = _1659;
            _1808 = _1661;
        }
        else
        {
            float _1820 = inversesqrt(dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            if (_1668 < ((_1666 >> 12u) & 15u))
            {
                float _1805;
                float _1807;
                float _1809;
                float _1976 = _1657;
                float _1977 = _1659;
                float _1978 = _1661;
                uint _1979 = _1668;
                uint _1988;
                bool _1989;
                for (;;)
                {
                    _1988 = texelFetch(g_lightClassification, int((((_1550 << 5u) + (_1536 << 9u)) + (_1979 << 2u)) >> 2u)).x;
                    _1989 = _1988 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    if (_1989)
                    {
                        frontier_phi_67_pred = _1978;
                        frontier_phi_67_pred_1 = _1977;
                        frontier_phi_67_pred_2 = _1976;
                    }
                    else
                    {
                        float _2124;
                        float _2125;
                        float _2126;
                        float _2345;
                        float _2346;
                        float _2347;
                        float _2134 = _1976;
                        float _2135 = _1977;
                        float _2136 = _1978;
                        uint _2137 = _1988;
                        uint _2138;
                        uint _2148;
                        vec4 _2163;
                        float _2164;
                        vec3 _2176;
                        vec4 _2191;
                        vec4 _2206;
                        float _2252;
                        bool _2253;
                        for (;;)
                        {
                            _2148 = ((_1979 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2137));
                            _2138 = (_2137 + 4294967295u) & _2137;
                            uint _2150 = _2148 * 40u;
                            _2163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2150 + 3u)).x));
                            _2164 = _2163.w;
                            uint _2166 = (_2148 * 40u) + 8u;
                            _2176 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2166 + 2u)).x));
                            uint _2178 = (_2148 * 40u) + 16u;
                            _2191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2178 + 3u)).x));
                            uint _2193 = (_2148 * 40u) + 20u;
                            _2206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2193 + 3u)).x));
                            uint _2208 = (_2148 * 40u) + 24u;
                            vec4 _2221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2208 + 3u)).x));
                            uint _2227 = (_2148 * 40u) + 28u;
                            vec4 _2240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2227 + 3u)).x));
                            _2252 = fma(_1512, _2240.z, fma(_1511, _2240.y, _2240.x * _1510)) + _2240.w;
                            _2253 = !((fma(_1512, _2221.z, fma(_1511, _2221.y, _2221.x * _1510)) + _2221.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            if (_2253)
                            {
                                float _2287 = _2163.x - _1510;
                                float _2288 = _2163.y - _1511;
                                float _2289 = _2163.z - _1512;
                                float _2290 = dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289));
                                float _2293 = inversesqrt(_2290);
                                float _2300 = 1.0 - (_2290 / (_2164 * _2164));
                                float _2756 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
                                float _2302 = sqrt(_2290) * uintBitsToFloat(uvec4(_2256, _2257, _2258, texelFetch(g_SpotLightRenderingBuffer, int(((_2148 * 40u) + 4u) + 3u)).x)).w;
                                float _2304 = 1.39999997615814208984375 / (_2302 + 1.39999997615814208984375);
                                float _2305 = _2304 * _2304;
                                float _2308 = (fma(_1512, _2191.z, fma(_1511, _2191.y, _2191.x * _1510)) + _2191.w) / _2252;
                                float _2309 = (fma(_1512, _2206.z, fma(_1511, _2206.y, _2206.x * _1510)) + _2206.w) / _2252;
                                float _2313 = 1.0 - dot(vec2(_2308, _2309), vec2(_2308, _2309));
                                float _2767 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
                                float _2321 = dot(vec3(0.0), vec3((-0.0) - (_1510 * _1820), (-0.0) - (_1511 * _1820), (-0.0) - (_1512 * _1820)));
                                float _2778 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
                                float _2329 = ((1.0 - _2305) * dot(vec3(0.0), vec3(_2293 * _2287, _2293 * _2288, _2293 * _2289))) + _2305;
                                float _2789 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
                                float _2330 = isnan(1.0) ? _2789 : (isnan(_2789) ? 1.0 : min(_2789, 1.0));
                                float _2334 = (0.5 / (((isnan(1.0) ? _2778 : (isnan(_2778) ? 1.0 : min(_2778, 1.0))) + 9.9999999392252902907785028219223e-09) + _2330)) * _2330;
                                float _2800 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
                                float _2341 = ((isnan(1.0) ? _2767 : (isnan(_2767) ? 1.0 : min(_2767, 1.0))) * (isnan(1.0) ? _2756 : (isnan(_2756) ? 1.0 : min(_2756, 1.0)))) * (((isnan(1.0) ? _2800 : (isnan(_2800) ? 1.0 : min(_2800, 1.0))) * 3.1415927410125732421875) / (((_2302 * _2302) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2341 * _2176.z;
                                frontier_phi_73_pred_1 = _2341 * _2176.y;
                                frontier_phi_73_pred_2 = _2341 * _2176.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                            }
                            _2347 = frontier_phi_73_pred;
                            _2346 = frontier_phi_73_pred_1;
                            _2345 = frontier_phi_73_pred_2;
                            _2124 = _2345 + _2134;
                            _2125 = _2346 + _2135;
                            _2126 = _2347 + _2136;
                            if (_2138 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2134 = _2124;
                                _2135 = _2125;
                                _2136 = _2126;
                                _2137 = _2138;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2126;
                        frontier_phi_67_pred_1 = _2125;
                        frontier_phi_67_pred_2 = _2124;
                    }
                    _1809 = frontier_phi_67_pred;
                    _1807 = frontier_phi_67_pred_1;
                    _1805 = frontier_phi_67_pred_2;
                    uint _1980 = _1979 + 1u;
                    if (_1980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1976 = _1805;
                        _1977 = _1807;
                        _1978 = _1809;
                        _1979 = _1980;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _1807;
                frontier_phi_49_50_ladder_1 = _1809;
                frontier_phi_49_50_ladder_2 = _1805;
            }
            else
            {
                frontier_phi_49_50_ladder = _1659;
                frontier_phi_49_50_ladder_1 = _1661;
                frontier_phi_49_50_ladder_2 = _1657;
            }
            _1804 = frontier_phi_49_50_ladder_2;
            _1806 = frontier_phi_49_50_ladder;
            _1808 = frontier_phi_49_50_ladder_1;
        }
        float _1813 = isnan(1.0) ? _697 : (isnan(_697) ? 1.0 : min(_697, 1.0));
        _1570 = ((_1804 * 0.039999999105930328369140625) * _1813) + _1451;
        _1572 = ((_1806 * 0.039999999105930328369140625) * _1813) + _1452;
        _1574 = ((_1808 * 0.039999999105930328369140625) * _1813) + _1453;
    }
    else
    {
        _1570 = _1451;
        _1572 = _1452;
        _1574 = _1453;
    }
    uint _1581 = (_1322 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1587 = (cbSceneParam._m0[72u].y * ((_636 * ((_627 - _589) - (_627 * _600))) + _589)) * cbInstanceData._m0[_1581].x;
    float _1588 = (cbSceneParam._m0[72u].y * ((_636 * ((_628 - _590) - (_628 * _600))) + _590)) * cbInstanceData._m0[_1581].y;
    float _1589 = (((_636 * ((_629 - _591) - (_629 * _600))) + _591) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1581].z;
    float _1596 = _1587 + ((_1570 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _1086)) * cbPerFrame._m0[3u].x);
    float _1597 = _1588 + ((_1572 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _1086)) * cbPerFrame._m0[3u].x);
    float _1598 = _1589 + ((_1574 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _1086)) * cbPerFrame._m0[3u].x);
    float _2831 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1611 = isnan(1.0) ? _2831 : (isnan(_2831) ? 1.0 : min(_2831, 1.0));
    uint _1612 = _1322 + 6u;
    float _1620 = _684 / cbSceneParam._m0[86u].x;
    float _1621 = _685 / cbSceneParam._m0[86u].y;
    vec4 _1635 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1620, _1621, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1637 = _1635.x;
    float _1638 = _1635.y;
    float _1639 = _1635.z;
    float _1640 = _1635.w;
    float _1714;
    float _1716;
    float _1718;
    float _1720;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _1676 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _1677 = _1676 / _671;
        float _1688 = _1677 * _267;
        float _1689 = _268 * _1677;
        float _1690 = (-0.0) - _1689;
        float _1691 = _1677 * _269;
        float _1693 = (cbSceneParam._m0[77u].w * _1690) / _1676;
        float _1694 = _1693 + cbSceneParam._m0[79u].w;
        float _1695 = cbSceneParam._m0[79u].w - _1689;
        float _1701 = sqrt(((_1688 * _1688) + (_1689 * _1689)) + (_1691 * _1691));
        float _1704 = (1.0 - (cbSceneParam._m0[77u].w / _1676)) * _1701;
        float _1710 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1712 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1912;
        if (abs((_1690 - _1693) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1912 = ((((_1694 > 0.0) ? exp2(_1710 * _1694) : (2.0 - exp2(_1712 * _1694))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1704;
        }
        else
        {
            float _1850 = 1.0 / cbSceneParam._m0[80u].x;
            float _1851 = isnan(_1695) ? _1694 : (isnan(_1694) ? _1695 : max(_1694, _1695));
            float _1852 = isnan(_1695) ? _1694 : (isnan(_1694) ? _1695 : min(_1694, _1695));
            float _1861 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : min(_1851, 0.0));
            float _1862 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : min(_1852, 0.0));
            _1912 = ((abs(_1701 / _1690) * cbSceneParam._m0[80u].y) * ((((_1861 - _1862) * 2.0) - ((exp2(_1710 * (isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)))) - exp2(_1710 * (isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))))) * _1850)) - ((exp2(_1712 * _1861) - exp2(_1712 * _1862)) * _1850))) + (_1704 * cbSceneParam._m0[80u].z);
        }
        vec4 _1914 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1620, _1621, 1.0), 0.0);
        float _1923 = exp2((_1912 * (-1.44269502162933349609375)) * (1.0 - _1914.w));
        float _1924 = log2(_1923);
        float _1940 = log2(_1640);
        _1714 = (exp2(_1940 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1924 * cbSceneParam._m0[78u].x)) * _1914.x) / cbSceneParam._m0[78u].x)) + _1637;
        _1716 = (exp2(_1940 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1924 * cbSceneParam._m0[78u].y)) * _1914.y) / cbSceneParam._m0[78u].y)) + _1638;
        _1718 = (exp2(_1940 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1924 * cbSceneParam._m0[78u].z)) * _1914.z) / cbSceneParam._m0[78u].z)) + _1639;
        _1720 = _1923 * _1640;
    }
    else
    {
        _1714 = _1637;
        _1716 = _1638;
        _1718 = _1639;
        _1720 = _1640;
    }
    float _1731 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1732 = _1731 == 3.0;
    float _1734 = log2(_1720);
    float _1738 = exp2(_1734 * cbSceneParam._m0[78u].x);
    float _1739 = exp2(_1734 * cbSceneParam._m0[78u].y);
    float _1740 = exp2(_1734 * cbSceneParam._m0[78u].z);
    float _1741 = _1738 * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
    float _1742 = _1739 * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
    float _1743 = _1740 * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    float _1752 = (_1731 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1752 * (_1732 ? _1741 : (_1741 + (cbSceneParam._m0[72u].w * _1714)));
    SV_Target.y = _1752 * (_1732 ? _1742 : (_1742 + (cbSceneParam._m0[72u].w * _1716)));
    SV_Target.z = _1752 * (_1732 ? _1743 : (_1743 + (cbSceneParam._m0[72u].w * _1718)));
    SV_Target.w = cbInstanceData._m0[_1612].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1587) * _1611) * _1738) * _1752;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1588) * _1611) * _1739) * _1752;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1589) * _1611) * _1740) * _1752;
    SV_Target_1.w = cbInstanceData._m0[_1612].w;
}


