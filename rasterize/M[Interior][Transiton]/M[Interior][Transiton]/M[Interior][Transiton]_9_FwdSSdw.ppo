#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _450;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _208 = _207 * _199;
    float _209 = _207 * _200;
    float _210 = _207 * _201;
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222 = _221 * TANGENT.x;
    float _223 = _221 * TANGENT.y;
    float _224 = _221 * TANGENT.z;
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    vec4 _294 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _297 = _294.x;
    vec4 _315 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _332 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _297) + cbMtdParam._m0[12u].x) * _315.x;
    float _334 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _297) + cbMtdParam._m0[12u].y) * _315.y;
    float _336 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _297) + cbMtdParam._m0[12u].z) * _315.z;
    vec4 _363 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _378 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _385 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _397 = cbMtdParam._m0[28u].z + _278;
    float _398 = cbMtdParam._m0[28u].w + _279;
    float _399 = cbMtdParam._m0[29u].x + _280;
    float _413 = (-0.0) - dot(vec3(_397, _398, _399), vec3(_378 * _208, _378 * _209, _378 * _210));
    float _414 = (-0.0) - dot(vec3(_397, _398, _399), vec3(_385 * _222, _385 * _223, _385 * _224));
    float _415 = (-0.0) - dot(vec3(_397, _398, _399), vec3((-0.0) - _215, (-0.0) - _216, (-0.0) - _217));
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _420 = _419 * _415;
    float _425 = ((cbMtdParam._m0[25u].y * _413) * _419) + (((_363.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _426 = ((cbMtdParam._m0[25u].z * _414) * _419) + (((_363.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _429 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _430 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _448;
    float _451;
    float _453;
    if (_425 > 0.0)
    {
        float _434 = (1.0 - _429) / _425;
        _448 = _434;
        _451 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_434 * _420)) * 0.16666667163372039794921875;
        _453 = (fract((_434 * _426) + _430) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_425 < 0.0)
        {
            float _449 = ((-0.0) - _429) / _425;
            frontier_phi_3_2_ladder = (fract((_449 * _426) + _430) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _449;
            frontier_phi_3_2_ladder_2 = (fract(_449 * _420) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _450;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _448 = frontier_phi_3_2_ladder_1;
        _451 = frontier_phi_3_2_ladder_2;
        _453 = frontier_phi_3_2_ladder;
    }
    float _479;
    float _481;
    float _483;
    if (_426 > 0.0)
    {
        float _466 = (1.0 - _430) / _426;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_466 < _448)
        {
            frontier_phi_8_5_ladder = (fract((_466 * _425) + _429) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _466;
            frontier_phi_8_5_ladder_2 = (fract(_466 * _420) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _451;
            frontier_phi_8_5_ladder_1 = _448;
            frontier_phi_8_5_ladder_2 = _453;
        }
        _479 = frontier_phi_8_5_ladder_1;
        _481 = frontier_phi_8_5_ladder;
        _483 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_426 < 0.0)
        {
            float _480 = ((-0.0) - _430) / _426;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_480 < _448)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_480 * _425) + _429) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _480;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_480 * _420) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _451;
                frontier_phi_8_6_ladder_9_ladder_1 = _448;
                frontier_phi_8_6_ladder_9_ladder_2 = _453;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _451;
            frontier_phi_8_6_ladder_1 = _448;
            frontier_phi_8_6_ladder_2 = _453;
        }
        _479 = frontier_phi_8_6_ladder_1;
        _481 = frontier_phi_8_6_ladder;
        _483 = frontier_phi_8_6_ladder_2;
    }
    float _487 = (_420 > 0.0) ? (cbMtdParam._m0[20u].z / _420) : 5000.0;
    float _500;
    float _501;
    if (_487 < _479)
    {
        _500 = ((_429 + cbMtdParam._m0[22u].x) + (_487 * _425)) * 0.16666667163372039794921875;
        _501 = (((_487 * _426) + _430) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _500 = _481;
        _501 = _483;
    }
    vec4 _503 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_500, _501));
    float _508 = _503.x * _297;
    float _509 = _503.y * _297;
    float _510 = _503.z * _297;
    vec4 _523 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _523.z;
    float _530 = (_523.x * 2.0) + (-1.0);
    float _531 = (_523.y * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3387 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))));
    float _549 = (cbMtdParam._m0[19u].y * _508) * cbMtdParam._m0[16u].x;
    float _551 = (cbMtdParam._m0[19u].y * _509) * cbMtdParam._m0[16u].y;
    float _553 = (cbMtdParam._m0[19u].y * _510) * cbMtdParam._m0[16u].z;
    vec4 _580 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _585 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _591 = ((_580.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _593 = (-0.0) - (cbMtdParam._m0[21u].x * ((_580.x * 0.5) + (-0.25)));
    float _594 = fract(_585);
    float _596 = fract(_585 + 0.5);
    vec4 _623 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_594 * _593) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_591 * _594) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _625 = _623.x;
    float _631 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_596 * _593) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_591 * _596) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _625) * abs((_594 * 2.0) + (-1.0))) + _625;
    float _642 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _646 = fract(abs(_642));
    float _653 = sin(cbMtdParam._m0[21u].z);
    float _654 = cos(cbMtdParam._m0[21u].z);
    float _655 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _656 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _681 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_656, (-0.0) - _653, _654 * _655) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_656, _654, _655 * _653) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_642 >= ((-0.0) - _642)) ? _646 : ((-0.0) - _646)) * cbMtdParam._m0[18u].z) - _631)) + cbMtdParam._m0[18u].w;
    float _682 = ceil(_681);
    float _3398 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _703 = ((((cbMtdParam._m0[21u].w * _508) * cbMtdParam._m0[15u].x) - _549) * _683) + _549;
    float _704 = ((((cbMtdParam._m0[21u].w * _509) * cbMtdParam._m0[15u].y) - _551) * _683) + _551;
    float _705 = ((((cbMtdParam._m0[21u].w * _510) * cbMtdParam._m0[15u].z) - _553) * _683) + _553;
    float _709 = abs(cbMtdParam._m0[20u].w * _681);
    float _713 = (((_709 * cbMtdParam._m0[18u].y) - _631) * _709) + _631;
    float _3409 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _714 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    vec4 _726 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _741 = (cbMtdParam._m0[14u].x * _726.x) * cbMtdParam._m0[19u].x;
    float _742 = (cbMtdParam._m0[14u].y * _726.y) * cbMtdParam._m0[19u].x;
    float _743 = (cbMtdParam._m0[14u].z * _726.z) * cbMtdParam._m0[19u].x;
    float _750 = exp2(log2(_714) * cbMtdParam._m0[20u].x);
    float _772 = fma(_537, _215, fma(_531, _222, _530 * _208));
    float _775 = fma(_537, _216, fma(_531, _223, _530 * _209));
    float _778 = fma(_537, _217, fma(_531, _224, _530 * _210));
    float _782 = inversesqrt(dot(vec3(_772, _775, _778), vec3(_772, _775, _778)));
    float _783 = _782 * _772;
    float _784 = _782 * _775;
    float _785 = _782 * _778;
    float _3420 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _786 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _3431 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3442 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3453 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _805 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _809 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _810 = _278 * _809;
    float _811 = _279 * _809;
    float _812 = _280 * _809;
    float _818 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _819 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _838 = fma(_785, cbSceneParam._m0[5u].z, fma(_784, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _783));
    float _841 = fma(_785, cbSceneParam._m0[6u].z, fma(_784, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _783));
    float _844 = fma(_785, cbSceneParam._m0[7u].z, fma(_784, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _783));
    uint _857 = uint(roundEven(NORMAL.w)) * 13u;
    uint _858 = _857 + 9u;
    uint _859 = _858 + uint(cbMatDynParam._m0[0u].w);
    float _865 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * cbInstanceData._m0[_859].x;
    float _866 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) * cbInstanceData._m0[_859].y;
    float _867 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * cbInstanceData._m0[_859].z;
    float _3464 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _3475 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    vec4 _879 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _818, cbSceneParam._m0[86u].y * _819));
    float _882 = _879.x * TEXCOORD_4;
    float _883 = dot(vec3(_783, _784, _785), vec3(_810, _811, _812));
    float _886 = _883 * 2.0;
    float _890 = (_886 * _783) - _810;
    float _891 = (_886 * _784) - _811;
    float _892 = (_886 * _785) - _812;
    float _896 = abs(dot(vec3(_810, _811, _812), vec3(_783, _784, _785)));
    float _3497 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _898 = sqrt(_786);
    float _911 = exp2((_898 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_898 * 3.0));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _984 = fma(_951, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943));
        float _988 = fma(_951, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943));
        float _992 = fma(_951, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943));
        float _1016 = _943 + _783;
        float _1017 = _947 + _784;
        float _1018 = _951 + _785;
        float _1028 = fma(_1018, cbModelParam._m0[26u].z, fma(_1017, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016)) - _984;
        float _1029 = fma(_1018, cbModelParam._m0[27u].z, fma(_1017, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016)) - _988;
        float _1030 = fma(_1018, cbModelParam._m0[28u].z, fma(_1017, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016)) - _992;
        float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
        float _1047 = ((_1034 * _1028) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_984 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1034 * _1029) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_988 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1034 * _1030) / cbModelParam._m0[34u].z) + ((((((_992 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        float _1086 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1052.x + (-0.5));
        float _1088 = _1086 * (_1052.y + (-0.5));
        float _1089 = _1086 * (_1052.z + (-0.5));
        float _1096 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1059.x + (-0.5));
        float _1098 = _1096 * (_1059.y + (-0.5));
        float _1099 = _1096 * (_1059.z + (-0.5));
        float _1106 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1066.x + (-0.5));
        float _1108 = _1106 * (_1066.y + (-0.5));
        float _1109 = _1106 * (_1066.z + (-0.5));
        float _1116 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1073.x + (-0.5));
        float _1118 = _1116 * (_1073.y + (-0.5));
        float _1119 = _1116 * (_1073.z + (-0.5));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = _1087 * 0.5;
        float _1124 = _1097 * 0.5;
        float _1125 = _1107 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1140 = (dot(vec3(_783, _784, _785), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1150 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3545 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1152 + 1.0))) + _1157) * _1120;
        float _1167 = _1088 * 0.5;
        float _1168 = _1098 * 0.5;
        float _1169 = _1108 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_783, _784, _785), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3578 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1194 + 1.0))) + _1199) * _1121;
        float _1209 = _1089 * 0.5;
        float _1210 = _1099 * 0.5;
        float _1211 = _1109 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_783, _784, _785), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3611 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1236 + 1.0))) + _1241) * _1122;
        _1258 = _1089;
        _1259 = _1088;
        _1260 = _1087;
        _1261 = _1099;
        _1262 = _1098;
        _1263 = _1097;
        _1264 = _1109;
        _1265 = _1108;
        _1266 = _1107;
        _1267 = _1122;
        _1268 = _1121;
        _1269 = _1120;
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
    }
    else
    {
        _1258 = _450;
        _1259 = _450;
        _1260 = _450;
        _1261 = _450;
        _1262 = _450;
        _1263 = _450;
        _1264 = _450;
        _1265 = _450;
        _1266 = _450;
        _1267 = _450;
        _1268 = _450;
        _1269 = _450;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1297 = fma(_951, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943));
        float _1301 = fma(_951, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943));
        float _1305 = fma(_951, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943));
        float _1328 = _943 + _783;
        float _1329 = _947 + _784;
        float _1330 = _951 + _785;
        float _1340 = fma(_1330, cbModelParam._m0[30u].z, fma(_1329, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1328)) - _1297;
        float _1341 = fma(_1330, cbModelParam._m0[31u].z, fma(_1329, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1328)) - _1301;
        float _1342 = fma(_1330, cbModelParam._m0[32u].z, fma(_1329, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1328)) - _1305;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1297 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1301 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[35u].z) + ((((((_1305 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1396 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1363.x + (-0.5));
        float _1398 = _1396 * (_1363.y + (-0.5));
        float _1399 = _1396 * (_1363.z + (-0.5));
        float _1406 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1370.x + (-0.5));
        float _1408 = _1406 * (_1370.y + (-0.5));
        float _1409 = _1406 * (_1370.z + (-0.5));
        float _1416 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1377.x + (-0.5));
        float _1418 = _1416 * (_1377.y + (-0.5));
        float _1419 = _1416 * (_1377.z + (-0.5));
        float _1426 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1384.x + (-0.5));
        float _1428 = _1426 * (_1384.y + (-0.5));
        float _1429 = _1426 * (_1384.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_783, _784, _785), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _3674 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1460 + 1.0))) + _1465) * _1430;
        float _1475 = _1398 * 0.5;
        float _1476 = _1408 * 0.5;
        float _1477 = _1418 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_783, _784, _785), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _3707 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1502 + 1.0))) + _1507) * _1431;
        float _1517 = _1399 * 0.5;
        float _1518 = _1409 * 0.5;
        float _1519 = _1419 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_783, _784, _785), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _3740 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1544 + 1.0))) + _1549) * _1432;
        _1566 = _1399;
        _1567 = _1398;
        _1568 = _1397;
        _1569 = _1409;
        _1570 = _1408;
        _1571 = _1407;
        _1572 = _1419;
        _1573 = _1418;
        _1574 = _1417;
        _1575 = _1432;
        _1576 = _1431;
        _1577 = _1430;
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _450;
        _1567 = _450;
        _1568 = _450;
        _1569 = _450;
        _1570 = _450;
        _1571 = _450;
        _1572 = _450;
        _1573 = _450;
        _1574 = _450;
        _1575 = _450;
        _1576 = _450;
        _1577 = _450;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1270)) + _1270;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1271)) + _1271;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1272)) + _1272;
    float _1613 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1590));
    float _1634 = _890 * 0.5;
    float _1635 = _891 * 0.5;
    float _1636 = _892 * 0.5;
    float _1637 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1640 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1643 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1677;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1650 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1654 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1658 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1665 = dot(vec4(cbModelParam._m0[39u]), vec4(_1634, _1635, _1636, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1688;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1679 = dot(vec4(cbModelParam._m0[40u]), vec4(_1634, _1635, _1636, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1692 = (_1688 * cbModelParam._m0[1u].x) + (_1677 * (1.0 - cbModelParam._m0[1u].x));
    float _1702 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _786);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1702 : min(cbModelParam._m0[25u].z, _1702));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1750 = fma(_951, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943)) + cbModelParam._m0[13u].w;
        float _1754 = fma(_951, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943)) + cbModelParam._m0[14u].w;
        float _1758 = fma(_951, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943)) + cbModelParam._m0[15u].w;
        float _1761 = fma(_892, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890));
        float _1764 = fma(_892, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890));
        float _1767 = fma(_892, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890));
        float _1795;
        if (_1761 > 0.0)
        {
            _1795 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1795 = frontier_phi_26_24_ladder;
        }
        float _2164;
        if (_1764 > 0.0)
        {
            _2164 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _2164 = frontier_phi_35_31_ladder;
        }
        float _2498;
        if (_1767 > 0.0)
        {
            _2498 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2498 = frontier_phi_49_42_ladder;
        }
        float _2500 = isnan(_2164) ? _1795 : (isnan(_1795) ? _2164 : min(_1795, _2164));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1761) + _1750;
        float _2506 = (_2501 * _1764) + _1754;
        float _2507 = (_2501 * _1767) + _1758;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2509 = (-1.0) - _2508;
        float _2511 = _2508 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2507 > _2511) || ((_2507 < _2509) || ((_2506 > _2511) || ((_2506 < _2509) || ((_2505 < _2509) || (_2505 > _2511))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2507, cbModelParam._m0[9u].z, fma(_2506, cbModelParam._m0[9u].y, _2505 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2507, cbModelParam._m0[10u].z, fma(_2506, cbModelParam._m0[10u].y, _2505 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2507, cbModelParam._m0[11u].z, fma(_2506, cbModelParam._m0[11u].y, _2505 * cbModelParam._m0[11u].x))), _1703);
            frontier_phi_25_49_ladder = _2633.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2633.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2633.x * cbModelParam._m0[1u].y;
        }
        _1783 = frontier_phi_25_49_ladder_2;
        _1785 = frontier_phi_25_49_ladder_1;
        _1787 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_890, _891, _892), _1703);
        _1783 = _1771.x * cbModelParam._m0[1u].y;
        _1785 = _1771.y * cbModelParam._m0[1u].y;
        _1787 = _1771.z * cbModelParam._m0[1u].y;
    }
    float _1791 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _786);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1791 : min(cbModelParam._m0[25u].w, _1791));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1844 = fma(_951, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943)) + cbModelParam._m0[21u].w;
        float _1848 = fma(_951, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943)) + cbModelParam._m0[22u].w;
        float _1852 = fma(_951, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943)) + cbModelParam._m0[23u].w;
        float _1855 = fma(_892, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890));
        float _1858 = fma(_892, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890));
        float _1861 = fma(_892, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890));
        float _2169;
        if (_1855 > 0.0)
        {
            _2169 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2169 = frontier_phi_37_33_ladder;
        }
        float _2524;
        if (_1858 > 0.0)
        {
            _2524 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2524 = frontier_phi_51_44_ladder;
        }
        float _2693;
        if (_1861 > 0.0)
        {
            _2693 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2693 = frontier_phi_65_60_ladder;
        }
        float _2695 = isnan(_2524) ? _2169 : (isnan(_2169) ? _2524 : min(_2169, _2524));
        float _2696 = isnan(_2693) ? _2695 : (isnan(_2695) ? _2693 : min(_2695, _2693));
        float _2700 = (_2696 * _1855) + _1844;
        float _2701 = (_2696 * _1858) + _1848;
        float _2702 = (_2696 * _1861) + _1852;
        float _2703 = _2696 * 9.9999997473787516355514526367188e-05;
        float _2704 = (-1.0) - _2703;
        float _2706 = _2703 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2702 > _2706) || ((_2702 < _2704) || ((_2701 > _2706) || ((_2701 < _2704) || ((_2700 < _2704) || (_2700 > _2706))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2702, cbModelParam._m0[17u].z, fma(_2701, cbModelParam._m0[17u].y, _2700 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2702, cbModelParam._m0[18u].z, fma(_2701, cbModelParam._m0[18u].y, _2700 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2702, cbModelParam._m0[19u].z, fma(_2701, cbModelParam._m0[19u].y, _2700 * cbModelParam._m0[19u].x))), _1792);
            frontier_phi_34_65_ladder = _2935.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2935.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2935.z * cbModelParam._m0[1u].z;
        }
        _1880 = frontier_phi_34_65_ladder_1;
        _1882 = frontier_phi_34_65_ladder;
        _1884 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_890, _891, _892), _1792);
        _1880 = _1864.x * cbModelParam._m0[1u].z;
        _1882 = _1864.y * cbModelParam._m0[1u].z;
        _1884 = _1864.z * cbModelParam._m0[1u].z;
    }
    float _1896 = ((((1.0 - _911) * ((_898 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_911 * _898)) * _882;
    float _1897 = _1896 * ((cbModelParam._m0[1u].w * (_1880 - _1783)) + _1783);
    float _1898 = _1896 * ((cbModelParam._m0[1u].w * (_1882 - _1785)) + _1785);
    float _1899 = _1896 * ((cbModelParam._m0[1u].w * (_1884 - _1787)) + _1787);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1898, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1898, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1898, cbSceneParam._m0[91u].y, _1897 * cbSceneParam._m0[91u].x));
    vec4 _1916 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_818, _819));
    float _1918 = _1916.w;
    float _1930 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1918);
    float _1931 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1918);
    float _1932 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1918);
    uvec4 _1936 = floatBitsToUint(cbInstanceData._m0[_857 + 5u]);
    uint _1938 = _1936.x * 14u;
    uint _1939 = _1938 + 13u;
    float _1944 = _882 + (-1.0);
    float _1947 = (cbLight._m0[_1939].x * _1944) + 1.0;
    float _1948 = (cbLight._m0[_1939].y * _1944) + 1.0;
    uint _1949 = _1938 + 5u;
    float _1955 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1959 = _1938 + 4u;
    float _1968 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1972 = _1938 | 1u;
    float _1983 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_783, _784, _785));
    float _1986 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_783, _784, _785));
    float _3876 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _3887 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1991 = (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * 0.3183098733425140380859375;
    float _1993 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.3183098733425140380859375;
    float _2000 = ((cbLight._m0[_1949].x * _1955) * _1993) + (((cbLight._m0[_1959].x * _1930) * _1968) * _1991);
    float _2001 = ((_1955 * cbLight._m0[_1949].y) * _1993) + (((cbLight._m0[_1959].y * _1931) * _1968) * _1991);
    float _2002 = ((_1955 * cbLight._m0[_1949].z) * _1993) + (((cbLight._m0[_1959].z * _1932) * _1968) * _1991);
    uint _2004 = _1938 + 8u;
    float _2017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1938].w)) * _786) * 0.949999988079071044921875);
    float _2018 = _2017 * _2017;
    float _2019 = cbLight._m0[_1938].x + _810;
    float _2020 = cbLight._m0[_1938].y + _811;
    float _2021 = cbLight._m0[_1938].z + _812;
    float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
    float _2026 = _2025 * _2019;
    float _2027 = _2025 * _2020;
    float _2028 = _2025 * _2021;
    float _2029 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_1938].xyz));
    float _3898 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _2033 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _2034 = dot(vec3(_783, _784, _785), vec3(_2026, _2027, _2028));
    float _3920 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _2038 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_2026, _2027, _2028));
    float _3931 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2042 = _2018 * _2018;
    float _2046 = ((_2037 * _2037) * (_2042 + (-1.0))) + 1.0;
    float _2057 = (exp2(log2(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2058 = 1.0 - _2018;
    float _2069 = (0.5 / (((_2033 * ((_2032 * _2058) + _2018)) + 9.9999999392252902907785028219223e-09) + (((_2033 * _2058) + _2018) * _2032))) * _2032;
    float _3942 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2071 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_2042 / ((_2046 * _2046) * 3.141590118408203125));
    uint _2085 = _1938 + 9u;
    float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _786) * 0.949999988079071044921875);
    float _2097 = _2096 * _2096;
    float _2098 = cbLight._m0[_1972].x + _810;
    float _2099 = cbLight._m0[_1972].y + _811;
    float _2100 = cbLight._m0[_1972].z + _812;
    float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
    float _2105 = _2104 * _2098;
    float _2106 = _2104 * _2099;
    float _2107 = _2104 * _2100;
    float _2108 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_1972].xyz));
    float _3953 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _2112 = dot(vec3(_783, _784, _785), vec3(_2105, _2106, _2107));
    float _3964 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _2116 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2105, _2106, _2107));
    float _3975 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2120 = _2097 * _2097;
    float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
    float _2133 = (exp2(log2(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2134 = 1.0 - _2097;
    float _2144 = (0.5 / (((_2033 * ((_2111 * _2134) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_2033 * _2134) + _2097) * _2111))) * _2111;
    float _3986 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
    float _2156 = (((_2133 * cbLight._m0[_2085].x) * _2146) * _1955) + ((((cbLight._m0[_2004].x * _1930) * _2057) * _2071) * _1968);
    float _2157 = (((_2133 * cbLight._m0[_2085].y) * _2146) * _1955) + ((((cbLight._m0[_2004].y * _1931) * _2057) * _2071) * _1968);
    float _2158 = (((_2133 * cbLight._m0[_2085].z) * _2146) * _1955) + ((((cbLight._m0[_2004].z * _1932) * _2057) * _2071) * _1968);
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    if (_1936.y == 0u)
    {
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2213;
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2213;
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2213;
        uvec4 _2228 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2229 = _2228.x;
        uint _2240 = uint((float(_2228.y) * floor(float(uint(cbSceneParam._m0[85u].y * _819) / _2229))) + floor(float(uint(cbSceneParam._m0[85u].x * _818) / _2229)));
        float _2250 = (log2(_2216 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2251 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        uint _2254 = uint(isnan(14.0) ? _2251 : (isnan(_2251) ? 14.0 : min(_2251, 14.0)));
        uvec4 _2259 = texelFetch(g_lightClusterGridBuffer, int(((_2254 << 2u) + (_2240 << 6u)) >> 2u));
        uint _2260 = _2259.x;
        uint _2261 = _2228.z;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        if (((((1u << ((_2261 >> 4u) & 15u)) + 4294967295u) & _2260) == 0u) || ((_2261 & 240u) == 0u))
        {
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
        }
        else
        {
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            uint _2567 = 0u;
            uint _2576;
            bool _2577;
            for (;;)
            {
                _2576 = texelFetch(g_lightClassification, int((((_2254 << 5u) + (_2240 << 9u)) + (_2567 << 2u)) >> 2u)).x;
                _2577 = _2576 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2577)
                {
                    frontier_phi_62_pred = _2562;
                    frontier_phi_62_pred_1 = _2561;
                    frontier_phi_62_pred_2 = _2563;
                    frontier_phi_62_pred_3 = _2566;
                    frontier_phi_62_pred_4 = _2565;
                    frontier_phi_62_pred_5 = _2564;
                }
                else
                {
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    uint _2742;
                    _2736 = _2561;
                    _2737 = _2562;
                    _2738 = _2563;
                    _2739 = _2564;
                    _2740 = _2565;
                    _2741 = _2566;
                    _2742 = _2576;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    for (;;)
                    {
                        uint _2746 = uint(findLSB(_2742)) + (_2567 << 5u);
                        uint _2743 = (_2742 + 4294967295u) & _2742;
                        uint _2748 = _2746 * 48u;
                        vec4 _2762 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 3u)).x));
                        uint _2768 = (_2746 * 48u) + 4u;
                        vec4 _2781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 3u)).x));
                        uint _2787 = (_2746 * 48u) + 8u;
                        vec3 _2798 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x));
                        float _2802 = _2762.x - _2214;
                        float _2803 = _2762.y - _2215;
                        float _2804 = _2762.z - _2216;
                        float _2805 = dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804));
                        float _2808 = inversesqrt(_2805);
                        float _2809 = _2808 * _2802;
                        float _2810 = _2808 * _2803;
                        float _2811 = _2808 * _2804;
                        float _2812 = dot(vec3(_838, _841, _844), vec3(_2809, _2810, _2811));
                        float _2817 = 1.0 - (_2805 * _2762.w);
                        float _4007 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2818 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                        float _2819 = sqrt(_2805) * _2781.w;
                        float _2822 = 1.39999997615814208984375 / (_2819 + 1.39999997615814208984375);
                        float _2823 = _2822 * _2822;
                        float _2826 = ((1.0 - _2823) * _2812) + _2823;
                        float _2829 = _2819 * _2819;
                        float _2833 = ((isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0))) * _2818) / ((_2829 * 0.699999988079071044921875) + 1.0);
                        float _2837 = (-0.0) - _2214;
                        float _2838 = (-0.0) - _2215;
                        float _2839 = (-0.0) - _2216;
                        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
                        float _2844 = _2843 * _2837;
                        float _2845 = _2843 * _2838;
                        float _2846 = _2843 * _2839;
                        float _2854 = exp2(log2(1.0 / ((_2829 * 3.5) + 5.0)) * 0.25);
                        float _2855 = 1.0 - _898;
                        float _2862 = sqrt(1.0 - ((1.0 - (_2855 * _2855)) * (1.0 - (_2854 * _2854))));
                        float _2863 = _2862 * _2862;
                        float _2864 = _2863 * _2863;
                        float _2865 = _2844 + _2809;
                        float _2866 = _2845 + _2810;
                        float _2867 = _2846 + _2811;
                        float _2871 = inversesqrt(dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867)));
                        float _2875 = dot(vec3(_838, _841, _844), vec3(_2844, _2845, _2846));
                        float _4023 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2878 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2879 = dot(vec3(_838, _841, _844), vec3(_2871 * _2865, _2871 * _2866, _2871 * _2867));
                        float _4034 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2882 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2886 = ((_2882 * _2882) * (_2864 + (-1.0))) + 1.0;
                        float _2887 = _2822 * _2863;
                        float _2888 = _2887 * _2887;
                        float _2891 = ((1.0 - _2888) * _2812) + _2888;
                        float _4045 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2892 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2893 = 1.0 - _2863;
                        float _2903 = (0.5 / (((_2892 * ((_2878 * _2893) + _2863)) + 9.9999999392252902907785028219223e-09) + (((_2892 * _2893) + _2863) * _2878))) * _2892;
                        float _4056 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2914 = (((_2864 * 3.1415927410125732421875) * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) / ((_2886 * _2886) * ((_2829 * 2.1991131305694580078125) + 3.141590118408203125))) * _2818;
                        _2645 = (_2833 * _2781.x) + _2739;
                        _2646 = (_2833 * _2781.y) + _2740;
                        _2647 = (_2833 * _2781.z) + _2741;
                        _2642 = (_2914 * _2798.x) + _2736;
                        _2643 = (_2914 * _2798.y) + _2737;
                        _2644 = (_2914 * _2798.z) + _2738;
                        if (_2743 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2736 = _2642;
                            _2737 = _2643;
                            _2738 = _2644;
                            _2739 = _2645;
                            _2740 = _2646;
                            _2741 = _2647;
                            _2742 = _2743;
                        }
                    }
                    frontier_phi_62_pred = _2643;
                    frontier_phi_62_pred_1 = _2642;
                    frontier_phi_62_pred_2 = _2644;
                    frontier_phi_62_pred_3 = _2647;
                    frontier_phi_62_pred_4 = _2646;
                    frontier_phi_62_pred_5 = _2645;
                }
                _2380 = frontier_phi_62_pred;
                _2378 = frontier_phi_62_pred_1;
                _2382 = frontier_phi_62_pred_2;
                _2388 = frontier_phi_62_pred_3;
                _2386 = frontier_phi_62_pred_4;
                _2384 = frontier_phi_62_pred_5;
                uint _2568 = _2567 + 1u;
                if (_2568 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2561 = _2378;
                    _2562 = _2380;
                    _2563 = _2382;
                    _2564 = _2384;
                    _2565 = _2386;
                    _2566 = _2388;
                    _2567 = _2568;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
        }
        uvec4 _2391 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2392 = _2391.z;
        uint _2394 = (_2392 >> 8u) & 15u;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        if (((4294967295u << _2394) & _2260) == 0u)
        {
            _2529 = _2377;
            _2531 = _2379;
            _2533 = _2381;
            _2535 = _2383;
            _2537 = _2385;
            _2539 = _2387;
        }
        else
        {
            float _2554 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
            float _2555 = _2554 * _2214;
            float _2556 = _2554 * _2215;
            float _2557 = _2554 * _2216;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2394 < ((_2392 >> 12u) & 15u))
            {
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2540;
                float _2719 = _2377;
                float _2720 = _2379;
                float _2721 = _2381;
                float _2722 = _2383;
                float _2723 = _2385;
                float _2724 = _2387;
                uint _2725 = _2394;
                uint _2734;
                bool _2735;
                for (;;)
                {
                    _2734 = texelFetch(g_lightClassification, int((((_2254 << 5u) + (_2240 << 9u)) + (_2725 << 2u)) >> 2u)).x;
                    _2735 = _2734 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2735)
                    {
                        frontier_phi_71_pred = _2720;
                        frontier_phi_71_pred_1 = _2719;
                        frontier_phi_71_pred_2 = _2724;
                        frontier_phi_71_pred_3 = _2723;
                        frontier_phi_71_pred_4 = _2722;
                        frontier_phi_71_pred_5 = _2721;
                    }
                    else
                    {
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _2953 = _2719;
                        float _2954 = _2720;
                        float _2955 = _2721;
                        float _2956 = _2722;
                        float _2957 = _2723;
                        float _2958 = _2724;
                        uint _2959 = _2734;
                        uint _2960;
                        vec4 _2985;
                        float _2986;
                        vec4 _3001;
                        vec3 _3013;
                        vec4 _3028;
                        vec4 _3043;
                        float _3089;
                        bool _3090;
                        for (;;)
                        {
                            uint _2970 = ((_2725 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2959));
                            _2960 = (_2959 + 4294967295u) & _2959;
                            uint _2972 = _2970 * 40u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            _2986 = _2985.w;
                            uint _2988 = (_2970 * 40u) + 4u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3003 = (_2970 * 40u) + 8u;
                            _3013 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x));
                            uint _3015 = (_2970 * 40u) + 16u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3030 = (_2970 * 40u) + 20u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3045 = (_2970 * 40u) + 24u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3064 = (_2970 * 40u) + 28u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            _3089 = fma(_2216, _3077.z, fma(_2215, _3077.y, _3077.x * _2214)) + _3077.w;
                            _3090 = !((fma(_2216, _3058.z, fma(_2215, _3058.y, _3058.x * _2214)) + _3058.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3090)
                            {
                                float _3117 = _2985.x - _2214;
                                float _3118 = _2985.y - _2215;
                                float _3119 = _2985.z - _2216;
                                float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                                float _3123 = inversesqrt(_3120);
                                float _3124 = _3123 * _3117;
                                float _3125 = _3123 * _3118;
                                float _3126 = _3123 * _3119;
                                float _3130 = 1.0 - (_3120 / (_2986 * _2986));
                                float _4067 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3135 = sqrt(_3120) * _3001.w;
                                float _3137 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                                float _3138 = _3137 * _3137;
                                float _3141 = ((1.0 - _3138) * dot(vec3(_3124, _3125, _3126), vec3(_838, _841, _844))) + _3138;
                                float _3144 = _3135 * _3135;
                                float _3148 = (fma(_2216, _3028.z, fma(_2215, _3028.y, _3028.x * _2214)) + _3028.w) / _3089;
                                float _3149 = (fma(_2216, _3043.z, fma(_2215, _3043.y, _3043.x * _2214)) + _3043.w) / _3089;
                                float _3153 = 1.0 - dot(vec2(_3148, _3149), vec2(_3148, _3149));
                                float _4083 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3155 = _3154 * (((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3131) / ((_3144 * 0.699999988079071044921875) + 1.0));
                                float _3167 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                                float _3168 = 1.0 - _898;
                                float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                                float _3176 = _3175 * _3175;
                                float _3177 = _3176 * _3176;
                                float _3178 = _3124 - _2555;
                                float _3179 = _3125 - _2556;
                                float _3180 = _3126 - _2557;
                                float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                                float _3188 = dot(vec3(_838, _841, _844), vec3((-0.0) - _2555, (-0.0) - _2556, (-0.0) - _2557));
                                float _4094 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3191 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3192 = dot(vec3(_838, _841, _844), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                                float _4105 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3195 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                                float _3200 = _3137 * _3176;
                                float _3201 = _3200 * _3200;
                                float _3207 = ((1.0 - _3201) * dot(vec3(_838, _841, _844), vec3(_3124, _3125, _3126))) + _3201;
                                float _4116 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3209 = 1.0 - _3176;
                                float _3219 = (0.5 / (((_3208 * ((_3191 * _3209) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3176) * _3191))) * _3208;
                                float _4127 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3229 = (_3154 * _3131) * (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) / ((_3199 * _3199) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3229 * _3013.y;
                                frontier_phi_77_pred_1 = _3229 * _3013.x;
                                frontier_phi_77_pred_2 = _3155 * _3001.z;
                                frontier_phi_77_pred_3 = _3155 * _3001.y;
                                frontier_phi_77_pred_4 = _3155 * _3001.x;
                                frontier_phi_77_pred_5 = _3229 * _3013.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3234 = frontier_phi_77_pred;
                            _3233 = frontier_phi_77_pred_1;
                            _3238 = frontier_phi_77_pred_2;
                            _3237 = frontier_phi_77_pred_3;
                            _3236 = frontier_phi_77_pred_4;
                            _3235 = frontier_phi_77_pred_5;
                            _2943 = _3236 + _2956;
                            _2944 = _3237 + _2957;
                            _2945 = _3238 + _2958;
                            _2940 = _3233 + _2953;
                            _2941 = _3234 + _2954;
                            _2942 = _3235 + _2955;
                            if (_2960 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2960;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2941;
                        frontier_phi_71_pred_1 = _2940;
                        frontier_phi_71_pred_2 = _2945;
                        frontier_phi_71_pred_3 = _2944;
                        frontier_phi_71_pred_4 = _2943;
                        frontier_phi_71_pred_5 = _2942;
                    }
                    _2532 = frontier_phi_71_pred;
                    _2530 = frontier_phi_71_pred_1;
                    _2540 = frontier_phi_71_pred_2;
                    _2538 = frontier_phi_71_pred_3;
                    _2536 = frontier_phi_71_pred_4;
                    _2534 = frontier_phi_71_pred_5;
                    uint _2726 = _2725 + 1u;
                    if (_2726 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2719 = _2530;
                        _2720 = _2532;
                        _2721 = _2534;
                        _2722 = _2536;
                        _2723 = _2538;
                        _2724 = _2540;
                        _2725 = _2726;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2540;
                frontier_phi_53_54_ladder_1 = _2536;
                frontier_phi_53_54_ladder_2 = _2534;
                frontier_phi_53_54_ladder_3 = _2532;
                frontier_phi_53_54_ladder_4 = _2530;
                frontier_phi_53_54_ladder_5 = _2538;
            }
            else
            {
                frontier_phi_53_54_ladder = _2387;
                frontier_phi_53_54_ladder_1 = _2383;
                frontier_phi_53_54_ladder_2 = _2381;
                frontier_phi_53_54_ladder_3 = _2379;
                frontier_phi_53_54_ladder_4 = _2377;
                frontier_phi_53_54_ladder_5 = _2385;
            }
            _2529 = frontier_phi_53_54_ladder_4;
            _2531 = frontier_phi_53_54_ladder_3;
            _2533 = frontier_phi_53_54_ladder_2;
            _2535 = frontier_phi_53_54_ladder_1;
            _2537 = frontier_phi_53_54_ladder_5;
            _2539 = frontier_phi_53_54_ladder;
        }
        float _2544 = isnan(1.0) ? _882 : (isnan(_882) ? 1.0 : min(_882, 1.0));
        _2273 = (_2544 * _2535) + _2000;
        _2275 = (_2544 * _2537) + _2001;
        _2277 = (_2544 * _2539) + _2002;
        _2279 = ((_2529 * 0.039999999105930328369140625) * _2544) + _2156;
        _2281 = ((_2531 * 0.039999999105930328369140625) * _2544) + _2157;
        _2283 = ((_2533 * 0.039999999105930328369140625) * _2544) + _2158;
    }
    else
    {
        _2273 = _2000;
        _2275 = _2001;
        _2277 = _2002;
        _2279 = _2156;
        _2281 = _2157;
        _2283 = _2158;
    }
    uint _2289 = _858 + uint(cbMatDynParam._m0[0u].w);
    float _2295 = (cbSceneParam._m0[72u].y * ((_750 * ((_741 - _703) - (_741 * _714))) + _703)) * cbInstanceData._m0[_2289].x;
    float _2296 = (cbSceneParam._m0[72u].y * ((_750 * ((_742 - _704) - (_742 * _714))) + _704)) * cbInstanceData._m0[_2289].y;
    float _2297 = (((_750 * ((_743 - _705) - (_743 * _714))) + _705) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2289].z;
    float _4143 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4154 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4165 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _2314 = (((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2273 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _882))) + ((_2279 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1692)) * cbPerFrame._m0[3u].x)) + _2295;
    float _2316 = (_2296 + ((_2281 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1692)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2275 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _882)));
    float _2318 = (_2297 + ((_2283 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1692)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2277 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _882)));
    float _4191 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2331 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    uint _2332 = _857 + 6u;
    float _2340 = _818 / cbSceneParam._m0[86u].x;
    float _2341 = _819 / cbSceneParam._m0[86u].y;
    vec4 _2355 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, (log2((isnan(cbSceneParam._m0[77u].w) ? _805 : (isnan(_805) ? cbSceneParam._m0[77u].w : min(_805, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2357 = _2355.x;
    float _2358 = _2355.y;
    float _2359 = _2355.z;
    float _2360 = _2355.w;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_805 > cbSceneParam._m0[78u].w)
    {
        float _2402 = isnan(_805) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _805 : min(cbSceneParam._m0[80u].w, _805));
        float _2403 = _2402 / _805;
        float _2414 = _2403 * _278;
        float _2415 = _279 * _2403;
        float _2416 = (-0.0) - _2415;
        float _2417 = _2403 * _280;
        float _2419 = (cbSceneParam._m0[77u].w * _2416) / _2402;
        float _2420 = _2419 + cbSceneParam._m0[79u].w;
        float _2421 = cbSceneParam._m0[79u].w - _2415;
        float _2427 = sqrt(((_2414 * _2414) + (_2415 * _2415)) + (_2417 * _2417));
        float _2430 = (1.0 - (cbSceneParam._m0[77u].w / _2402)) * _2427;
        float _2436 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2438 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2655;
        if (abs((_2416 - _2419) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2655 = ((((_2420 > 0.0) ? exp2(_2436 * _2420) : (2.0 - exp2(_2438 * _2420))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2430;
        }
        else
        {
            float _2590 = 1.0 / cbSceneParam._m0[80u].x;
            float _2591 = isnan(_2421) ? _2420 : (isnan(_2420) ? _2421 : max(_2420, _2421));
            float _2592 = isnan(_2421) ? _2420 : (isnan(_2420) ? _2421 : min(_2420, _2421));
            float _2601 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : min(_2591, 0.0));
            float _2602 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : min(_2592, 0.0));
            _2655 = ((abs(_2427 / _2416) * cbSceneParam._m0[80u].y) * ((((_2601 - _2602) * 2.0) - ((exp2(_2436 * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0)))) - exp2(_2436 * (isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0))))) * _2590)) - ((exp2(_2438 * _2601) - exp2(_2438 * _2602)) * _2590))) + (_2430 * cbSceneParam._m0[80u].z);
        }
        vec4 _2657 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, 1.0), 0.0);
        float _2666 = exp2((_2655 * (-1.44269502162933349609375)) * (1.0 - _2657.w));
        float _2667 = log2(_2666);
        float _2683 = log2(_2360);
        _2440 = (exp2(_2683 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2667 * cbSceneParam._m0[78u].x)) * _2657.x) / cbSceneParam._m0[78u].x)) + _2357;
        _2442 = (exp2(_2683 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2667 * cbSceneParam._m0[78u].y)) * _2657.y) / cbSceneParam._m0[78u].y)) + _2358;
        _2444 = (exp2(_2683 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2667 * cbSceneParam._m0[78u].z)) * _2657.z) / cbSceneParam._m0[78u].z)) + _2359;
        _2446 = _2666 * _2360;
    }
    else
    {
        _2440 = _2357;
        _2442 = _2358;
        _2444 = _2359;
        _2446 = _2360;
    }
    float _2457 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2458 = _2457 == 3.0;
    float _2459 = log2(_2446);
    float _2463 = exp2(_2459 * cbSceneParam._m0[78u].x);
    float _2464 = exp2(_2459 * cbSceneParam._m0[78u].y);
    float _2465 = exp2(_2459 * cbSceneParam._m0[78u].z);
    float _2466 = _2463 * (isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0)));
    float _2467 = _2464 * (isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0)));
    float _2468 = _2465 * (isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0)));
    float _2477 = (_2457 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2477 * (_2458 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2440)));
    SV_Target.y = _2477 * (_2458 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2442)));
    SV_Target.z = _2477 * (_2458 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2444)));
    SV_Target.w = cbInstanceData._m0[_2332].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2295) * _2331) * _2463) * _2477;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2296) * _2331) * _2464) * _2477;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2297) * _2331) * _2465) * _2477;
    SV_Target_1.w = cbInstanceData._m0[_2332].w;
}


