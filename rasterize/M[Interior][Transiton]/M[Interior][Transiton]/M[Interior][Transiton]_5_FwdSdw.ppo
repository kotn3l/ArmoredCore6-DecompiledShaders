#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1367;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    vec4 _300 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _303 = _300.x;
    vec4 _321 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _338 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _303) + cbMtdParam._m0[12u].x) * _321.x;
    float _340 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _303) + cbMtdParam._m0[12u].y) * _321.y;
    float _342 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _303) + cbMtdParam._m0[12u].z) * _321.z;
    vec4 _360 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _399 = cbMtdParam._m0[27u].w + _284;
    float _400 = cbMtdParam._m0[28u].x + _285;
    float _401 = cbMtdParam._m0[28u].y + _286;
    float _415 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_214, _215, _216));
    float _416 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_228, _229, _230));
    float _417 = (-0.0) - dot(vec3(_399, _400, _401), vec3((-0.0) - _221, (-0.0) - _222, (-0.0) - _223));
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _424 = _421 * _417;
    float _425 = (_421 * _415) + ((cbMtdParam._m0[25u].w * _303) * ((_360.x * 2.0) + (-1.0)));
    float _426 = (_421 * _416) + ((cbMtdParam._m0[26u].x * _303) * ((_360.y * 2.0) + (-1.0)));
    float _427 = _425 * cbMtdParam._m0[24u].x;
    float _428 = _426 * cbMtdParam._m0[23u].w;
    float _429 = fract(TEXCOORD.x);
    float _430 = fract(TEXCOORD.y);
    float _436;
    if (_427 > 0.0)
    {
        _436 = (1.0 - _429) / _427;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_427 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _429) / _427;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _436 = frontier_phi_3_2_ladder;
    }
    float _444;
    if (_428 > 0.0)
    {
        _444 = (1.0 - _430) / _428;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_428 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _430) / _428;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _444 = frontier_phi_7_6_ladder;
    }
    bool _446 = _424 > 0.0;
    float _448 = _446 ? (cbMtdParam._m0[17u].x / _424) : 5000.0;
    float _449 = isnan(_444) ? _436 : (isnan(_436) ? _444 : min(_436, _444));
    float _450 = isnan(_448) ? _449 : (isnan(_449) ? _448 : min(_449, _448));
    float _454 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _455 = _429 + (-0.5);
    float _458 = _430 + (-0.5);
    float _461 = ((_450 * _424) + _454) / _454;
    vec4 _486 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_455 + (_450 * _427)) / _461) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_458 + (_450 * _428)) / _461) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _499 = (_486.x * _303) * cbMtdParam._m0[9u].x;
    float _500 = (_486.y * _303) * cbMtdParam._m0[9u].y;
    float _501 = (_486.z * _303) * cbMtdParam._m0[9u].z;
    float _519 = _425 * cbMtdParam._m0[26u].z;
    float _520 = _426 * cbMtdParam._m0[26u].y;
    bool _521 = _519 > 0.0;
    float _526;
    if (_521)
    {
        _526 = (1.0 - _429) / _519;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_519 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _429) / _519;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _526 = frontier_phi_11_10_ladder;
    }
    bool _528 = _520 > 0.0;
    float _533;
    if (_528)
    {
        _533 = (1.0 - _430) / _520;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_520 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _430) / _520;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _533 = frontier_phi_15_14_ladder;
    }
    float _536 = _446 ? (cbMtdParam._m0[19u].z / _424) : 5000.0;
    float _537 = isnan(_533) ? _526 : (isnan(_526) ? _533 : min(_526, _533));
    float _538 = isnan(_536) ? _537 : (isnan(_537) ? _536 : min(_537, _536));
    float _542 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _546 = ((_538 * _424) + _542) / _542;
    float _551 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _553 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _569 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_455 + (_538 * _519)) / _546) + 0.5) + _551) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_458 + (_538 * _520)) / _546) + 0.5) + _553) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _584;
    if (_521)
    {
        _584 = (1.0 - _429) / _519;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_519 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _429) / _519;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _584 = frontier_phi_19_18_ladder;
    }
    float _590;
    if (_528)
    {
        _590 = (1.0 - _430) / _520;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_520 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _430) / _520;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _590 = frontier_phi_23_22_ladder;
    }
    float _592 = isnan(_590) ? _584 : (isnan(_584) ? _590 : min(_584, _590));
    float _593 = isnan(_536) ? _592 : (isnan(_592) ? _536 : min(_592, _536));
    float _600 = ((_593 * _424) + _542) / _542;
    vec4 _620 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_455 + (_593 * _519)) / _600) + 0.5) + _551) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_458 + (_593 * _520)) / _600) + 0.5) + _553) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _622 = _620.x;
    float _632 = (((((cbMtdParam._m0[10u].x * _303) * _569.x) - _499) * _303) * _622) + _499;
    float _633 = (((((cbMtdParam._m0[10u].y * _303) * _569.y) - _500) * _303) * _622) + _500;
    float _634 = (((((cbMtdParam._m0[10u].z * _303) * _569.z) - _501) * _303) * _622) + _501;
    vec4 _647 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _651 = _647.z;
    float _654 = (_647.x * 2.0) + (-1.0);
    float _655 = (_647.y * 2.0) + (-1.0);
    float _656 = dot(vec2(_654, _655), vec2(_654, _655));
    float _3793 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _661 = sqrt(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))));
    float _670 = (cbMtdParam._m0[19u].y * _632) * cbMtdParam._m0[16u].x;
    float _672 = (cbMtdParam._m0[19u].y * _633) * cbMtdParam._m0[16u].y;
    float _674 = (cbMtdParam._m0[19u].y * _634) * cbMtdParam._m0[16u].z;
    vec4 _698 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _703 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _709 = ((_698.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _711 = (-0.0) - (cbMtdParam._m0[21u].x * ((_698.x * 0.5) + (-0.25)));
    float _712 = fract(_703);
    float _714 = fract(_703 + 0.5);
    vec4 _741 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_712 * _711) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_709 * _712) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _743 = _741.x;
    float _749 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_714 * _711) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_709 * _714) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _743) * abs((_712 * 2.0) + (-1.0))) + _743;
    float _755 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _759 = fract(abs(_755));
    float _769 = sin(cbMtdParam._m0[21u].z);
    float _770 = cos(cbMtdParam._m0[21u].z);
    float _771 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _772 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _797 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_772, (-0.0) - _769, _770 * _771) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_772, _770, _771 * _769) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_755 >= ((-0.0) - _755)) ? _759 : ((-0.0) - _759)) * cbMtdParam._m0[18u].z) - _749)) + cbMtdParam._m0[18u].w;
    float _798 = ceil(_797);
    float _3804 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _799 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _819 = ((((cbMtdParam._m0[21u].w * _632) * cbMtdParam._m0[15u].x) - _670) * _799) + _670;
    float _820 = ((((cbMtdParam._m0[21u].w * _633) * cbMtdParam._m0[15u].y) - _672) * _799) + _672;
    float _821 = ((((cbMtdParam._m0[21u].w * _634) * cbMtdParam._m0[15u].z) - _674) * _799) + _674;
    float _825 = abs(cbMtdParam._m0[20u].w * _797);
    float _829 = (((_825 * cbMtdParam._m0[18u].y) - _749) * _825) + _749;
    float _3815 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _830 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    vec4 _842 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _857 = (cbMtdParam._m0[14u].x * _842.x) * cbMtdParam._m0[19u].x;
    float _858 = (cbMtdParam._m0[14u].y * _842.y) * cbMtdParam._m0[19u].x;
    float _859 = (cbMtdParam._m0[14u].z * _842.z) * cbMtdParam._m0[19u].x;
    float _866 = exp2(log2(_830) * cbMtdParam._m0[20u].x);
    float _888 = fma(_661, _221, fma(_655, _228, _654 * _214));
    float _891 = fma(_661, _222, fma(_655, _229, _654 * _215));
    float _894 = fma(_661, _223, fma(_655, _230, _654 * _216));
    float _898 = inversesqrt(dot(vec3(_888, _891, _894), vec3(_888, _891, _894)));
    float _899 = _898 * _888;
    float _900 = _898 * _891;
    float _901 = _898 * _894;
    float _3826 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _902 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3848 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3859 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _921 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _925 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _926 = _284 * _925;
    float _927 = _285 * _925;
    float _928 = _286 * _925;
    float _934 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _935 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _953 = fma(_901, cbSceneParam._m0[5u].z, fma(_900, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _899));
    float _956 = fma(_901, cbSceneParam._m0[6u].z, fma(_900, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _899));
    float _959 = fma(_901, cbSceneParam._m0[7u].z, fma(_900, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _899));
    uint _972 = uint(roundEven(NORMAL.w)) * 13u;
    uint _973 = _972 + 9u;
    uint _974 = _973 + uint(cbMatDynParam._m0[0u].w);
    float _980 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_974].x;
    float _981 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_974].y;
    float _982 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_974].z;
    float _3870 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    vec4 _994 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _934, cbSceneParam._m0[86u].y * _935));
    float _997 = _994.x * TEXCOORD_4;
    float _998 = dot(vec3(_899, _900, _901), vec3(_926, _927, _928));
    float _1001 = _998 * 2.0;
    float _1005 = (_1001 * _899) - _926;
    float _1006 = (_1001 * _900) - _927;
    float _1007 = (_1001 * _901) - _928;
    float _1011 = abs(dot(vec3(_926, _927, _928), vec3(_899, _900, _901)));
    float _3903 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1013 = sqrt(_902);
    float _1026 = exp2((_1013 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1013 * 3.0));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1366;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1093 = fma(_1066, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058));
        float _1097 = fma(_1066, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058));
        float _1101 = fma(_1066, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058));
        float _1124 = _1058 + _899;
        float _1125 = _1062 + _900;
        float _1126 = _1066 + _901;
        float _1136 = fma(_1126, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124)) - _1093;
        float _1137 = fma(_1126, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124)) - _1097;
        float _1138 = fma(_1126, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124)) - _1101;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1093 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1097 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[34u].z) + ((((((_1101 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1194 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1160.x + (-0.5));
        float _1196 = _1194 * (_1160.y + (-0.5));
        float _1197 = _1194 * (_1160.z + (-0.5));
        float _1204 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1167.x + (-0.5));
        float _1206 = _1204 * (_1167.y + (-0.5));
        float _1207 = _1204 * (_1167.z + (-0.5));
        float _1214 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1174.x + (-0.5));
        float _1216 = _1214 * (_1174.y + (-0.5));
        float _1217 = _1214 * (_1174.z + (-0.5));
        float _1224 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1181.x + (-0.5));
        float _1226 = _1224 * (_1181.y + (-0.5));
        float _1227 = _1224 * (_1181.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1248 = (dot(vec3(_899, _900, _901), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1258 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3951 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1260 + 1.0))) + _1265) * _1228;
        float _1275 = _1196 * 0.5;
        float _1276 = _1206 * 0.5;
        float _1277 = _1216 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_899, _900, _901), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3984 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1302 + 1.0))) + _1307) * _1229;
        float _1317 = _1197 * 0.5;
        float _1318 = _1207 * 0.5;
        float _1319 = _1217 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_899, _900, _901), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4017 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1344 + 1.0))) + _1349) * _1230;
        _1366 = _1197;
        _1368 = _1196;
        _1369 = _1195;
        _1370 = _1207;
        _1371 = _1206;
        _1372 = _1205;
        _1373 = _1217;
        _1374 = _1216;
        _1375 = _1215;
        _1376 = _1230;
        _1377 = _1229;
        _1378 = _1228;
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1367;
        _1368 = _1367;
        _1369 = _1367;
        _1370 = _1367;
        _1371 = _1367;
        _1372 = _1367;
        _1373 = _1367;
        _1374 = _1367;
        _1375 = _1367;
        _1376 = _1367;
        _1377 = _1367;
        _1378 = _1367;
        _1379 = 0.0;
        _1380 = 0.0;
        _1381 = 0.0;
    }
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1406 = fma(_1066, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1058));
        float _1410 = fma(_1066, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1058));
        float _1414 = fma(_1066, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1058));
        float _1437 = _1058 + _899;
        float _1438 = _1062 + _900;
        float _1439 = _1066 + _901;
        float _1449 = fma(_1439, cbModelParam._m0[30u].z, fma(_1438, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1437)) - _1406;
        float _1450 = fma(_1439, cbModelParam._m0[31u].z, fma(_1438, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1437)) - _1410;
        float _1451 = fma(_1439, cbModelParam._m0[32u].z, fma(_1438, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1437)) - _1414;
        float _1455 = inversesqrt(dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451)));
        float _1468 = ((_1455 * _1449) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1406 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1455 * _1450) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1410 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1455 * _1451) / cbModelParam._m0[35u].z) + ((((((_1414 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        float _1505 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1472.x + (-0.5));
        float _1507 = _1505 * (_1472.y + (-0.5));
        float _1508 = _1505 * (_1472.z + (-0.5));
        float _1515 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1479.x + (-0.5));
        float _1517 = _1515 * (_1479.y + (-0.5));
        float _1518 = _1515 * (_1479.z + (-0.5));
        float _1525 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1486.x + (-0.5));
        float _1527 = _1525 * (_1486.y + (-0.5));
        float _1528 = _1525 * (_1486.z + (-0.5));
        float _1535 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1493.x + (-0.5));
        float _1537 = _1535 * (_1493.y + (-0.5));
        float _1538 = _1535 * (_1493.z + (-0.5));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = _1506 * 0.5;
        float _1543 = _1516 * 0.5;
        float _1544 = _1526 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_899, _900, _901), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4080 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1569 + 1.0))) + _1574) * _1539;
        float _1584 = _1507 * 0.5;
        float _1585 = _1517 * 0.5;
        float _1586 = _1527 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_899, _900, _901), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4113 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1611 + 1.0))) + _1616) * _1540;
        float _1626 = _1508 * 0.5;
        float _1627 = _1518 * 0.5;
        float _1628 = _1528 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_899, _900, _901), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4146 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1653 + 1.0))) + _1658) * _1541;
        _1675 = _1508;
        _1676 = _1507;
        _1677 = _1506;
        _1678 = _1518;
        _1679 = _1517;
        _1680 = _1516;
        _1681 = _1528;
        _1682 = _1527;
        _1683 = _1526;
        _1684 = _1541;
        _1685 = _1540;
        _1686 = _1539;
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
    }
    else
    {
        _1675 = _1367;
        _1676 = _1367;
        _1677 = _1367;
        _1678 = _1367;
        _1679 = _1367;
        _1680 = _1367;
        _1681 = _1367;
        _1682 = _1367;
        _1683 = _1367;
        _1684 = _1367;
        _1685 = _1367;
        _1686 = _1367;
        _1687 = 0.0;
        _1688 = 0.0;
        _1689 = 0.0;
    }
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1379)) + _1379;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1380)) + _1380;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1381)) + _1381;
    float _1722 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1700, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1725 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1700, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1728 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1700, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1699));
    float _1743 = _1005 * 0.5;
    float _1744 = _1006 * 0.5;
    float _1745 = _1007 * 0.5;
    float _1746 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1749 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1752 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1786;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1759 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1366, _1370, _1373, _1376));
        float _1763 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1767 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1774 = dot(vec4(cbModelParam._m0[39u]), vec4(_1743, _1744, _1745, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1797;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1788 = dot(vec4(cbModelParam._m0[40u]), vec4(_1743, _1744, _1745, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1801 = (_1797 * cbModelParam._m0[1u].x) + (_1786 * (1.0 - cbModelParam._m0[1u].x));
    float _1811 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _902);
    float _1812 = isnan(_1811) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1811 : min(cbModelParam._m0[25u].z, _1811));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1859 = fma(_1066, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1058)) + cbModelParam._m0[13u].w;
        float _1863 = fma(_1066, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1058)) + cbModelParam._m0[14u].w;
        float _1867 = fma(_1066, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1058)) + cbModelParam._m0[15u].w;
        float _1870 = fma(_1007, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005));
        float _1873 = fma(_1007, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005));
        float _1876 = fma(_1007, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005));
        float _1904;
        if (_1870 > 0.0)
        {
            _1904 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1904 = frontier_phi_38_36_ladder;
        }
        float _2072;
        if (_1873 > 0.0)
        {
            _2072 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2072 = frontier_phi_47_43_ladder;
        }
        float _2516;
        if (_1876 > 0.0)
        {
            _2516 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _2516 = frontier_phi_59_54_ladder;
        }
        float _2518 = isnan(_2072) ? _1904 : (isnan(_1904) ? _2072 : min(_1904, _2072));
        float _2519 = isnan(_2516) ? _2518 : (isnan(_2518) ? _2516 : min(_2518, _2516));
        float _2523 = (_2519 * _1870) + _1859;
        float _2524 = (_2519 * _1873) + _1863;
        float _2525 = (_2519 * _1876) + _1867;
        float _2526 = _2519 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2526;
        float _2530 = _2526 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 > _2530) || ((_2524 < _2528) || ((_2523 < _2528) || (_2523 > _2530))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2525, cbModelParam._m0[9u].z, fma(_2524, cbModelParam._m0[9u].y, _2523 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2525, cbModelParam._m0[10u].z, fma(_2524, cbModelParam._m0[10u].y, _2523 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2525, cbModelParam._m0[11u].z, fma(_2524, cbModelParam._m0[11u].y, _2523 * cbModelParam._m0[11u].x))), _1812);
            frontier_phi_37_59_ladder = _2785.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2785.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2785.x * cbModelParam._m0[1u].y;
        }
        _1892 = frontier_phi_37_59_ladder_2;
        _1894 = frontier_phi_37_59_ladder_1;
        _1896 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1005, _1006, _1007), _1812);
        _1892 = _1880.x * cbModelParam._m0[1u].y;
        _1894 = _1880.y * cbModelParam._m0[1u].y;
        _1896 = _1880.z * cbModelParam._m0[1u].y;
    }
    float _1900 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _902);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1900 : min(cbModelParam._m0[25u].w, _1900));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1953 = fma(_1066, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1058)) + cbModelParam._m0[21u].w;
        float _1957 = fma(_1066, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1058)) + cbModelParam._m0[22u].w;
        float _1961 = fma(_1066, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1058)) + cbModelParam._m0[23u].w;
        float _1964 = fma(_1007, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005));
        float _1967 = fma(_1007, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005));
        float _1970 = fma(_1007, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005));
        float _2077;
        if (_1964 > 0.0)
        {
            _2077 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2077 = frontier_phi_49_45_ladder;
        }
        float _2543;
        if (_1967 > 0.0)
        {
            _2543 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2543 = frontier_phi_61_56_ladder;
        }
        float _2914;
        if (_1970 > 0.0)
        {
            _2914 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2914 = frontier_phi_73_68_ladder;
        }
        float _2916 = isnan(_2543) ? _2077 : (isnan(_2077) ? _2543 : min(_2077, _2543));
        float _2917 = isnan(_2914) ? _2916 : (isnan(_2916) ? _2914 : min(_2916, _2914));
        float _2921 = (_2917 * _1964) + _1953;
        float _2922 = (_2917 * _1967) + _1957;
        float _2923 = (_2917 * _1970) + _1961;
        float _2924 = _2917 * 9.9999997473787516355514526367188e-05;
        float _2925 = (-1.0) - _2924;
        float _2927 = _2924 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2923 > _2927) || ((_2923 < _2925) || ((_2922 > _2927) || ((_2922 < _2925) || ((_2921 < _2925) || (_2921 > _2927))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2923, cbModelParam._m0[17u].z, fma(_2922, cbModelParam._m0[17u].y, _2921 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2923, cbModelParam._m0[18u].z, fma(_2922, cbModelParam._m0[18u].y, _2921 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2923, cbModelParam._m0[19u].z, fma(_2922, cbModelParam._m0[19u].y, _2921 * cbModelParam._m0[19u].x))), _1901);
            frontier_phi_46_73_ladder = _3044.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _3044.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _3044.x * cbModelParam._m0[1u].z;
        }
        _1989 = frontier_phi_46_73_ladder_2;
        _1991 = frontier_phi_46_73_ladder_1;
        _1993 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1005, _1006, _1007), _1901);
        _1989 = _1973.x * cbModelParam._m0[1u].z;
        _1991 = _1973.y * cbModelParam._m0[1u].z;
        _1993 = _1973.z * cbModelParam._m0[1u].z;
    }
    float _2005 = ((((1.0 - _1026) * ((_1013 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1026 * _1013)) * _997;
    float _2006 = _2005 * ((cbModelParam._m0[1u].w * (_1989 - _1892)) + _1892);
    float _2007 = _2005 * ((cbModelParam._m0[1u].w * (_1991 - _1894)) + _1894);
    float _2008 = _2005 * ((cbModelParam._m0[1u].w * (_1993 - _1896)) + _1896);
    float _2011 = fma(_2008, cbSceneParam._m0[89u].z, fma(_2007, cbSceneParam._m0[89u].y, _2006 * cbSceneParam._m0[89u].x));
    float _2014 = fma(_2008, cbSceneParam._m0[90u].z, fma(_2007, cbSceneParam._m0[90u].y, _2006 * cbSceneParam._m0[90u].x));
    float _2017 = fma(_2008, cbSceneParam._m0[91u].z, fma(_2007, cbSceneParam._m0[91u].y, _2006 * cbSceneParam._m0[91u].x));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2059 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2063 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2064 = _2051 / _2063;
    float _2065 = _2055 / _2063;
    float _2066 = _2059 / _2063;
    float _2213;
    float _2214;
    float _2215;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2093 = ((uint(_2066 > cbSceneParam._m0[59u].y) + uint(_2066 > cbSceneParam._m0[59u].x)) + uint(_2066 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2094 = _2093 + 43u;
        uint _2102 = _2093 + 44u;
        uint _2110 = _2093 + 45u;
        uint _2118 = _2093 + 46u;
        float _2129 = fma(_2063, cbSceneParam._m0[_2094].w, fma(_2059, cbSceneParam._m0[_2094].z, fma(_2055, cbSceneParam._m0[_2094].y, _2051 * cbSceneParam._m0[_2094].x)));
        float _2133 = fma(_2063, cbSceneParam._m0[_2102].w, fma(_2059, cbSceneParam._m0[_2102].z, fma(_2055, cbSceneParam._m0[_2102].y, _2051 * cbSceneParam._m0[_2102].x)));
        float _2141 = fma(_2063, cbSceneParam._m0[_2118].w, fma(_2059, cbSceneParam._m0[_2118].z, fma(_2055, cbSceneParam._m0[_2118].y, _2051 * cbSceneParam._m0[_2118].x)));
        float _2146 = cbSceneParam._m0[33u].z * _2141;
        float _2148 = cbSceneParam._m0[33u].w * _2141;
        float _2151 = fma(_2063, cbSceneParam._m0[_2110].w, fma(_2059, cbSceneParam._m0[_2110].z, fma(_2055, cbSceneParam._m0[_2110].y, _2051 * cbSceneParam._m0[_2110].x))) / _2141;
        float _2199 = (cbSceneParam._m0[33u].x - sqrt(((_2065 * _2065) + (_2064 * _2064)) + (_2066 * _2066))) * cbSceneParam._m0[33u].y;
        float _4272 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2206 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 + _2129) / _2141, (_2148 + _2133) / _2141), _2151), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 + _2129) / _2141, (_2133 - _2146) / _2141), _2151), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 - _2146) / _2141, (_2133 - _2148) / _2141), _2151), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 - _2148) / _2141, (_2146 + _2133) / _2141), _2151), 0.0)).x), vec4(0.25)));
        _2213 = 1.0 - (_2206 * cbSceneParam._m0[34u].x);
        _2214 = 1.0 - (_2206 * cbSceneParam._m0[34u].y);
        _2215 = 1.0 - (_2206 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2213 = 1.0;
        _2214 = 1.0;
        _2215 = 1.0;
    }
    float _2279;
    float _2281;
    float _2283;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2267 = fma(_2063, cbSceneParam._m0[63u].w, fma(_2059, cbSceneParam._m0[63u].z, fma(_2055, cbSceneParam._m0[63u].y, _2051 * cbSceneParam._m0[63u].x)));
        float _2268 = fma(_2063, cbSceneParam._m0[60u].w, fma(_2059, cbSceneParam._m0[60u].z, fma(_2055, cbSceneParam._m0[60u].y, _2051 * cbSceneParam._m0[60u].x))) / _2267;
        float _2269 = fma(_2063, cbSceneParam._m0[61u].w, fma(_2059, cbSceneParam._m0[61u].z, fma(_2055, cbSceneParam._m0[61u].y, _2051 * cbSceneParam._m0[61u].x))) / _2267;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_2268 >= cbSceneParam._m0[64u].x) && (_2269 >= cbSceneParam._m0[64u].y)) && (_2268 <= cbSceneParam._m0[64u].z)) && (_2269 <= cbSceneParam._m0[64u].w))
        {
            float _2556 = fma(_2063, cbSceneParam._m0[62u].w, fma(_2059, cbSceneParam._m0[62u].z, fma(_2055, cbSceneParam._m0[62u].y, _2051 * cbSceneParam._m0[62u].x))) / _2267;
            float _2560 = isnan(cbSceneParam._m0[41u].w) ? _2556 : (isnan(_2556) ? cbSceneParam._m0[41u].w : max(_2556, cbSceneParam._m0[41u].w));
            float _2603 = (cbSceneParam._m0[33u].x - sqrt(((_2065 * _2065) + (_2064 * _2064)) + (_2066 * _2066))) * cbSceneParam._m0[33u].y;
            float _4288 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
            float _2610 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2268, cbSceneParam._m0[33u].w + _2269), _2560), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2268, _2269 - cbSceneParam._m0[33u].z), _2560), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2268 - cbSceneParam._m0[33u].z, _2269 - cbSceneParam._m0[33u].w), _2560), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2268 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2269), _2560), 0.0)).x), vec4(0.25)));
            float _2614 = 1.0 - (_2610 * cbSceneParam._m0[34u].x);
            float _2615 = 1.0 - (_2610 * cbSceneParam._m0[34u].y);
            float _2616 = 1.0 - (_2610 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_2616) ? _2215 : (isnan(_2215) ? _2616 : min(_2215, _2616));
            frontier_phi_58_57_ladder_1 = isnan(_2615) ? _2214 : (isnan(_2214) ? _2615 : min(_2214, _2615));
            frontier_phi_58_57_ladder_2 = isnan(_2614) ? _2213 : (isnan(_2213) ? _2614 : min(_2213, _2614));
        }
        else
        {
            frontier_phi_58_57_ladder = _2215;
            frontier_phi_58_57_ladder_1 = _2214;
            frontier_phi_58_57_ladder_2 = _2213;
        }
        _2279 = frontier_phi_58_57_ladder_2;
        _2281 = frontier_phi_58_57_ladder_1;
        _2283 = frontier_phi_58_57_ladder;
    }
    else
    {
        _2279 = _2213;
        _2281 = _2214;
        _2283 = _2215;
    }
    uvec4 _2288 = floatBitsToUint(cbInstanceData._m0[_972 + 5u]);
    uint _2290 = _2288.x * 14u;
    uint _2291 = _2290 + 13u;
    float _2296 = _997 + (-1.0);
    float _2299 = (cbLight._m0[_2291].x * _2296) + 1.0;
    float _2300 = (cbLight._m0[_2291].y * _2296) + 1.0;
    uint _2301 = _2290 + 5u;
    float _2307 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
    uint _2311 = _2290 + 4u;
    float _2320 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
    uint _2324 = _2290 | 1u;
    float _2335 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_899, _900, _901));
    float _2338 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_899, _900, _901));
    float _4324 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _4335 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2343 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.3183098733425140380859375;
    float _2345 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2352 = ((cbLight._m0[_2301].x * _2307) * _2345) + (((cbLight._m0[_2311].x * _2279) * _2320) * _2343);
    float _2353 = ((_2307 * cbLight._m0[_2301].y) * _2345) + (((cbLight._m0[_2311].y * _2281) * _2320) * _2343);
    float _2354 = ((_2307 * cbLight._m0[_2301].z) * _2345) + (((cbLight._m0[_2311].z * _2283) * _2320) * _2343);
    uint _2356 = _2290 + 8u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _902) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2290].x + _926;
    float _2372 = cbLight._m0[_2290].y + _927;
    float _2373 = cbLight._m0[_2290].z + _928;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_899, _900, _901), vec3(cbLight._m0[_2290].xyz));
    float _4346 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _4357 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2385 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2386 = dot(vec3(_899, _900, _901), vec3(_2378, _2379, _2380));
    float _4368 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2378, _2379, _2380));
    float _4379 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2370 * _2370;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2409 = (exp2(log2(1.0 - (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2410 = 1.0 - _2370;
    float _2421 = (0.5 / (((_2385 * ((_2384 * _2410) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2410) + _2370) * _2384))) * _2384;
    float _4390 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2423 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    uint _2437 = _2290 + 9u;
    float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _902) * 0.949999988079071044921875);
    float _2449 = _2448 * _2448;
    float _2450 = cbLight._m0[_2324].x + _926;
    float _2451 = cbLight._m0[_2324].y + _927;
    float _2452 = cbLight._m0[_2324].z + _928;
    float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
    float _2457 = _2456 * _2450;
    float _2458 = _2456 * _2451;
    float _2459 = _2456 * _2452;
    float _2460 = dot(vec3(_899, _900, _901), vec3(cbLight._m0[_2324].xyz));
    float _4401 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _2464 = dot(vec3(_899, _900, _901), vec3(_2457, _2458, _2459));
    float _4412 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2468 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2457, _2458, _2459));
    float _4423 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2472 = _2449 * _2449;
    float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
    float _2485 = (exp2(log2(1.0 - (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2486 = 1.0 - _2449;
    float _2496 = (0.5 / (((_2385 * ((_2463 * _2486) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2486) + _2449) * _2463))) * _2463;
    float _4434 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2498 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
    float _2508 = (((_2485 * cbLight._m0[_2437].x) * _2498) * _2307) + ((((cbLight._m0[_2356].x * _2279) * _2409) * _2423) * _2320);
    float _2509 = (((_2485 * cbLight._m0[_2437].y) * _2498) * _2307) + ((((cbLight._m0[_2356].y * _2281) * _2409) * _2423) * _2320);
    float _2510 = (((_2485 * cbLight._m0[_2437].z) * _2498) * _2307) + ((((cbLight._m0[_2356].z * _2283) * _2409) * _2423) * _2320);
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    if (_2288.y == 0u)
    {
        uvec4 _2628 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2629 = _2628.x;
        uint _2640 = uint((float(_2628.y) * floor(float(uint(cbSceneParam._m0[85u].y * _935) / _2629))) + floor(float(uint(cbSceneParam._m0[85u].x * _934) / _2629)));
        float _2650 = (log2(_2066 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2651 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        uint _2654 = uint(isnan(14.0) ? _2651 : (isnan(_2651) ? 14.0 : min(_2651, 14.0)));
        uvec4 _2659 = texelFetch(g_lightClusterGridBuffer, int(((_2654 << 2u) + (_2640 << 6u)) >> 2u));
        uint _2660 = _2659.x;
        uint _2661 = _2628.z;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((((1u << ((_2661 >> 4u) & 15u)) + 4294967295u) & _2660) == 0u) || ((_2661 & 240u) == 0u))
        {
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
        }
        else
        {
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            uint _2978 = 0u;
            uint _2987;
            bool _2988;
            for (;;)
            {
                _2987 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_2978 << 2u)) >> 2u)).x;
                _2988 = _2987 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2988)
                {
                    frontier_phi_82_pred = _2972;
                    frontier_phi_82_pred_1 = _2977;
                    frontier_phi_82_pred_2 = _2976;
                    frontier_phi_82_pred_3 = _2975;
                    frontier_phi_82_pred_4 = _2974;
                    frontier_phi_82_pred_5 = _2973;
                }
                else
                {
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    uint _3123;
                    _3117 = _2972;
                    _3118 = _2973;
                    _3119 = _2974;
                    _3120 = _2975;
                    _3121 = _2976;
                    _3122 = _2977;
                    _3123 = _2987;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    for (;;)
                    {
                        uint _3127 = uint(findLSB(_3123)) + (_2978 << 5u);
                        uint _3124 = (_3123 + 4294967295u) & _3123;
                        uint _3129 = _3127 * 48u;
                        vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 3u)).x));
                        uint _3149 = (_3127 * 48u) + 4u;
                        vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 3u)).x));
                        uint _3168 = (_3127 * 48u) + 8u;
                        vec3 _3179 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x));
                        float _3183 = _3143.x - _2064;
                        float _3184 = _3143.y - _2065;
                        float _3185 = _3143.z - _2066;
                        float _3186 = dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185));
                        float _3189 = inversesqrt(_3186);
                        float _3190 = _3189 * _3183;
                        float _3191 = _3189 * _3184;
                        float _3192 = _3189 * _3185;
                        float _3193 = dot(vec3(_953, _956, _959), vec3(_3190, _3191, _3192));
                        float _3198 = 1.0 - (_3186 * _3143.w);
                        float _4455 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3199 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3200 = sqrt(_3186) * _3162.w;
                        float _3203 = 1.39999997615814208984375 / (_3200 + 1.39999997615814208984375);
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3193) + _3204;
                        float _3210 = _3200 * _3200;
                        float _3214 = ((isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))) * _3199) / ((_3210 * 0.699999988079071044921875) + 1.0);
                        float _3218 = (-0.0) - _2064;
                        float _3219 = (-0.0) - _2065;
                        float _3220 = (-0.0) - _2066;
                        float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                        float _3225 = _3224 * _3218;
                        float _3226 = _3224 * _3219;
                        float _3227 = _3224 * _3220;
                        float _3234 = exp2(log2(1.0 / ((_3210 * 3.5) + 5.0)) * 0.25);
                        float _3235 = 1.0 - _1013;
                        float _3242 = sqrt(1.0 - ((1.0 - (_3235 * _3235)) * (1.0 - (_3234 * _3234))));
                        float _3243 = _3242 * _3242;
                        float _3244 = _3243 * _3243;
                        float _3245 = _3225 + _3190;
                        float _3246 = _3226 + _3191;
                        float _3247 = _3227 + _3192;
                        float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                        float _3255 = dot(vec3(_953, _956, _959), vec3(_3225, _3226, _3227));
                        float _4471 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3258 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3259 = dot(vec3(_953, _956, _959), vec3(_3251 * _3245, _3251 * _3246, _3251 * _3247));
                        float _4482 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3262 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3266 = ((_3262 * _3262) * (_3244 + (-1.0))) + 1.0;
                        float _3267 = _3203 * _3243;
                        float _3268 = _3267 * _3267;
                        float _3271 = ((1.0 - _3268) * _3193) + _3268;
                        float _4493 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3272 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3273 = 1.0 - _3243;
                        float _3283 = (0.5 / (((_3272 * ((_3258 * _3273) + _3243)) + 9.9999999392252902907785028219223e-09) + (((_3272 * _3273) + _3243) * _3258))) * _3272;
                        float _4504 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3294 = (((_3244 * 3.1415927410125732421875) * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) / ((_3266 * _3266) * ((_3210 * 2.1991131305694580078125) + 3.141590118408203125))) * _3199;
                        _3052 = (_3214 * _3162.x) + _3120;
                        _3053 = (_3214 * _3162.y) + _3121;
                        _3054 = (_3214 * _3162.z) + _3122;
                        _3049 = (_3294 * _3179.x) + _3117;
                        _3050 = (_3294 * _3179.y) + _3118;
                        _3051 = (_3294 * _3179.z) + _3119;
                        if (_3124 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3117 = _3049;
                            _3118 = _3050;
                            _3119 = _3051;
                            _3120 = _3052;
                            _3121 = _3053;
                            _3122 = _3054;
                            _3123 = _3124;
                        }
                    }
                    frontier_phi_82_pred = _3049;
                    frontier_phi_82_pred_1 = _3054;
                    frontier_phi_82_pred_2 = _3053;
                    frontier_phi_82_pred_3 = _3052;
                    frontier_phi_82_pred_4 = _3051;
                    frontier_phi_82_pred_5 = _3050;
                }
                _2795 = frontier_phi_82_pred;
                _2805 = frontier_phi_82_pred_1;
                _2803 = frontier_phi_82_pred_2;
                _2801 = frontier_phi_82_pred_3;
                _2799 = frontier_phi_82_pred_4;
                _2797 = frontier_phi_82_pred_5;
                uint _2979 = _2978 + 1u;
                if (_2979 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2972 = _2795;
                    _2973 = _2797;
                    _2974 = _2799;
                    _2975 = _2801;
                    _2976 = _2803;
                    _2977 = _2805;
                    _2978 = _2979;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
        }
        uvec4 _2808 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2809 = _2808.z;
        uint _2811 = (_2809 >> 8u) & 15u;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        if (((4294967295u << _2811) & _2660) == 0u)
        {
            _2940 = _2794;
            _2942 = _2796;
            _2944 = _2798;
            _2946 = _2800;
            _2948 = _2802;
            _2950 = _2804;
        }
        else
        {
            float _2965 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
            float _2966 = _2965 * _2064;
            float _2967 = _2965 * _2065;
            float _2968 = _2965 * _2066;
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            float frontier_phi_75_76_ladder_3;
            float frontier_phi_75_76_ladder_4;
            float frontier_phi_75_76_ladder_5;
            if (_2811 < ((_2809 >> 12u) & 15u))
            {
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _2949;
                float _2951;
                float _3100 = _2794;
                float _3101 = _2796;
                float _3102 = _2798;
                float _3103 = _2800;
                float _3104 = _2802;
                float _3105 = _2804;
                uint _3106 = _2811;
                uint _3115;
                bool _3116;
                for (;;)
                {
                    _3115 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_3106 << 2u)) >> 2u)).x;
                    _3116 = _3115 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_3116)
                    {
                        frontier_phi_88_pred = _3103;
                        frontier_phi_88_pred_1 = _3104;
                        frontier_phi_88_pred_2 = _3105;
                        frontier_phi_88_pred_3 = _3102;
                        frontier_phi_88_pred_4 = _3101;
                        frontier_phi_88_pred_5 = _3100;
                    }
                    else
                    {
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3312 = _3100;
                        float _3313 = _3101;
                        float _3314 = _3102;
                        float _3315 = _3103;
                        float _3316 = _3104;
                        float _3317 = _3105;
                        uint _3318 = _3115;
                        uint _3319;
                        vec4 _3344;
                        float _3345;
                        vec4 _3360;
                        vec3 _3372;
                        vec4 _3387;
                        vec4 _3402;
                        float _3448;
                        bool _3449;
                        for (;;)
                        {
                            uint _3329 = ((_3106 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3318));
                            _3319 = (_3318 + 4294967295u) & _3318;
                            uint _3331 = _3329 * 40u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            _3345 = _3344.w;
                            uint _3347 = (_3329 * 40u) + 4u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3329 * 40u) + 8u;
                            _3372 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x));
                            uint _3374 = (_3329 * 40u) + 16u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3329 * 40u) + 20u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3404 = (_3329 * 40u) + 24u;
                            vec4 _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3423 = (_3329 * 40u) + 28u;
                            vec4 _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            _3448 = fma(_2066, _3436.z, fma(_2065, _3436.y, _3436.x * _2064)) + _3436.w;
                            _3449 = !((fma(_2066, _3417.z, fma(_2065, _3417.y, _3417.x * _2064)) + _3417.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3449)
                            {
                                float _3476 = _3344.x - _2064;
                                float _3477 = _3344.y - _2065;
                                float _3478 = _3344.z - _2066;
                                float _3479 = dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478));
                                float _3482 = inversesqrt(_3479);
                                float _3483 = _3482 * _3476;
                                float _3484 = _3482 * _3477;
                                float _3485 = _3482 * _3478;
                                float _3489 = 1.0 - (_3479 / (_3345 * _3345));
                                float _4515 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3490 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3494 = sqrt(_3479) * _3360.w;
                                float _3496 = 1.39999997615814208984375 / (_3494 + 1.39999997615814208984375);
                                float _3497 = _3496 * _3496;
                                float _3500 = ((1.0 - _3497) * dot(vec3(_3483, _3484, _3485), vec3(_953, _956, _959))) + _3497;
                                float _3503 = _3494 * _3494;
                                float _3507 = (fma(_2066, _3387.z, fma(_2065, _3387.y, _3387.x * _2064)) + _3387.w) / _3448;
                                float _3508 = (fma(_2066, _3402.z, fma(_2065, _3402.y, _3402.x * _2064)) + _3402.w) / _3448;
                                float _3512 = 1.0 - dot(vec2(_3507, _3508), vec2(_3507, _3508));
                                float _4531 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3514 = _3513 * (((isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0))) * _3490) / ((_3503 * 0.699999988079071044921875) + 1.0));
                                float _3526 = exp2(log2(1.0 / ((_3503 * 3.5) + 5.0)) * 0.25);
                                float _3527 = 1.0 - _1013;
                                float _3534 = sqrt(1.0 - ((1.0 - (_3527 * _3527)) * (1.0 - (_3526 * _3526))));
                                float _3535 = _3534 * _3534;
                                float _3536 = _3535 * _3535;
                                float _3537 = _3483 - _2966;
                                float _3538 = _3484 - _2967;
                                float _3539 = _3485 - _2968;
                                float _3543 = inversesqrt(dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539)));
                                float _3547 = dot(vec3(_953, _956, _959), vec3((-0.0) - _2966, (-0.0) - _2967, (-0.0) - _2968));
                                float _4542 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3550 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3551 = dot(vec3(_953, _956, _959), vec3(_3543 * _3537, _3543 * _3538, _3543 * _3539));
                                float _4553 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3554 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3558 = ((_3554 * _3554) * (_3536 + (-1.0))) + 1.0;
                                float _3559 = _3496 * _3535;
                                float _3560 = _3559 * _3559;
                                float _3566 = ((1.0 - _3560) * dot(vec3(_953, _956, _959), vec3(_3483, _3484, _3485))) + _3560;
                                float _4564 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3568 = 1.0 - _3535;
                                float _3578 = (0.5 / (((_3567 * ((_3550 * _3568) + _3535)) + 9.9999999392252902907785028219223e-09) + (((_3567 * _3568) + _3535) * _3550))) * _3567;
                                float _4575 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3588 = (_3513 * _3490) * (((_3536 * 3.1415927410125732421875) * (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) / ((_3558 * _3558) * ((_3503 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3588 * _3372.x;
                                frontier_phi_94_pred_1 = _3588 * _3372.y;
                                frontier_phi_94_pred_2 = _3514 * _3360.z;
                                frontier_phi_94_pred_3 = _3514 * _3360.y;
                                frontier_phi_94_pred_4 = _3514 * _3360.x;
                                frontier_phi_94_pred_5 = _3588 * _3372.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3592 = frontier_phi_94_pred;
                            _3593 = frontier_phi_94_pred_1;
                            _3597 = frontier_phi_94_pred_2;
                            _3596 = frontier_phi_94_pred_3;
                            _3595 = frontier_phi_94_pred_4;
                            _3594 = frontier_phi_94_pred_5;
                            _3302 = _3595 + _3315;
                            _3303 = _3596 + _3316;
                            _3304 = _3597 + _3317;
                            _3299 = _3592 + _3312;
                            _3300 = _3593 + _3313;
                            _3301 = _3594 + _3314;
                            if (_3319 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3319;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3302;
                        frontier_phi_88_pred_1 = _3303;
                        frontier_phi_88_pred_2 = _3304;
                        frontier_phi_88_pred_3 = _3301;
                        frontier_phi_88_pred_4 = _3300;
                        frontier_phi_88_pred_5 = _3299;
                    }
                    _2947 = frontier_phi_88_pred;
                    _2949 = frontier_phi_88_pred_1;
                    _2951 = frontier_phi_88_pred_2;
                    _2945 = frontier_phi_88_pred_3;
                    _2943 = frontier_phi_88_pred_4;
                    _2941 = frontier_phi_88_pred_5;
                    uint _3107 = _3106 + 1u;
                    if (_3107 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3100 = _2941;
                        _3101 = _2943;
                        _3102 = _2945;
                        _3103 = _2947;
                        _3104 = _2949;
                        _3105 = _2951;
                        _3106 = _3107;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2949;
                frontier_phi_75_76_ladder_1 = _2951;
                frontier_phi_75_76_ladder_2 = _2947;
                frontier_phi_75_76_ladder_3 = _2945;
                frontier_phi_75_76_ladder_4 = _2943;
                frontier_phi_75_76_ladder_5 = _2941;
            }
            else
            {
                frontier_phi_75_76_ladder = _2802;
                frontier_phi_75_76_ladder_1 = _2804;
                frontier_phi_75_76_ladder_2 = _2800;
                frontier_phi_75_76_ladder_3 = _2798;
                frontier_phi_75_76_ladder_4 = _2796;
                frontier_phi_75_76_ladder_5 = _2794;
            }
            _2940 = frontier_phi_75_76_ladder_5;
            _2942 = frontier_phi_75_76_ladder_4;
            _2944 = frontier_phi_75_76_ladder_3;
            _2946 = frontier_phi_75_76_ladder_2;
            _2948 = frontier_phi_75_76_ladder;
            _2950 = frontier_phi_75_76_ladder_1;
        }
        float _2955 = isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0));
        _2673 = (_2955 * _2946) + _2352;
        _2675 = (_2955 * _2948) + _2353;
        _2677 = (_2955 * _2950) + _2354;
        _2679 = ((_2940 * 0.039999999105930328369140625) * _2955) + _2508;
        _2681 = ((_2942 * 0.039999999105930328369140625) * _2955) + _2509;
        _2683 = ((_2944 * 0.039999999105930328369140625) * _2955) + _2510;
    }
    else
    {
        _2673 = _2352;
        _2675 = _2353;
        _2677 = _2354;
        _2679 = _2508;
        _2681 = _2509;
        _2683 = _2510;
    }
    uint _2689 = _973 + uint(cbMatDynParam._m0[0u].w);
    float _2695 = (cbSceneParam._m0[72u].y * ((_866 * ((_857 - _819) - (_857 * _830))) + _819)) * cbInstanceData._m0[_2689].x;
    float _2696 = (cbSceneParam._m0[72u].y * ((_866 * ((_858 - _820) - (_858 * _830))) + _820)) * cbInstanceData._m0[_2689].y;
    float _2697 = (((_866 * ((_859 - _821) - (_859 * _830))) + _821) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2689].z;
    float _4591 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4602 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _4613 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _2714 = (((isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2673 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _997))) + ((_2679 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1801)) * cbPerFrame._m0[3u].x)) + _2695;
    float _2716 = (_2696 + ((_2681 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1801)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2675 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _997)));
    float _2718 = (_2697 + ((_2683 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1801)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2677 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _997)));
    float _4639 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2731 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    uint _2732 = _972 + 6u;
    float _2740 = _934 / cbSceneParam._m0[86u].x;
    float _2741 = _935 / cbSceneParam._m0[86u].y;
    vec4 _2755 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, (log2((isnan(cbSceneParam._m0[77u].w) ? _921 : (isnan(_921) ? cbSceneParam._m0[77u].w : min(_921, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2757 = _2755.x;
    float _2758 = _2755.y;
    float _2759 = _2755.z;
    float _2760 = _2755.w;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    if (_921 > cbSceneParam._m0[78u].w)
    {
        float _2819 = isnan(_921) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _921 : min(cbSceneParam._m0[80u].w, _921));
        float _2820 = _2819 / _921;
        float _2831 = _2820 * _284;
        float _2832 = _285 * _2820;
        float _2833 = (-0.0) - _2832;
        float _2834 = _2820 * _286;
        float _2836 = (cbSceneParam._m0[77u].w * _2833) / _2819;
        float _2837 = _2836 + cbSceneParam._m0[79u].w;
        float _2838 = cbSceneParam._m0[79u].w - _2832;
        float _2844 = sqrt(((_2831 * _2831) + (_2832 * _2832)) + (_2834 * _2834));
        float _2847 = (1.0 - (cbSceneParam._m0[77u].w / _2819)) * _2844;
        float _2852 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2854 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3062;
        if (abs((_2833 - _2836) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3062 = ((((_2837 > 0.0) ? exp2(_2852 * _2837) : (2.0 - exp2(_2854 * _2837))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2847;
        }
        else
        {
            float _3001 = 1.0 / cbSceneParam._m0[80u].x;
            float _3002 = isnan(_2838) ? _2837 : (isnan(_2837) ? _2838 : max(_2837, _2838));
            float _3003 = isnan(_2838) ? _2837 : (isnan(_2837) ? _2838 : min(_2837, _2838));
            float _3012 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : min(_3002, 0.0));
            float _3013 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : min(_3003, 0.0));
            _3062 = ((abs(_2844 / _2833) * cbSceneParam._m0[80u].y) * ((((_3012 - _3013) * 2.0) - ((exp2(_2852 * (isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0)))) - exp2(_2852 * (isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))))) * _3001)) - ((exp2(_2854 * _3012) - exp2(_2854 * _3013)) * _3001))) + (_2847 * cbSceneParam._m0[80u].z);
        }
        vec4 _3064 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, 1.0), 0.0);
        float _3073 = exp2((_3062 * (-1.44269502162933349609375)) * (1.0 - _3064.w));
        float _3074 = log2(_3073);
        float _3090 = log2(_2760);
        _2856 = (exp2(_3090 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3074 * cbSceneParam._m0[78u].x)) * _3064.x) / cbSceneParam._m0[78u].x)) + _2757;
        _2858 = (exp2(_3090 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3074 * cbSceneParam._m0[78u].y)) * _3064.y) / cbSceneParam._m0[78u].y)) + _2758;
        _2860 = (exp2(_3090 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3074 * cbSceneParam._m0[78u].z)) * _3064.z) / cbSceneParam._m0[78u].z)) + _2759;
        _2862 = _3073 * _2760;
    }
    else
    {
        _2856 = _2757;
        _2858 = _2758;
        _2860 = _2759;
        _2862 = _2760;
    }
    float _2873 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2874 = _2873 == 3.0;
    float _2875 = log2(_2862);
    float _2879 = exp2(_2875 * cbSceneParam._m0[78u].x);
    float _2880 = exp2(_2875 * cbSceneParam._m0[78u].y);
    float _2881 = exp2(_2875 * cbSceneParam._m0[78u].z);
    float _2882 = _2879 * (isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0)));
    float _2883 = _2880 * (isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0)));
    float _2884 = _2881 * (isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0)));
    float _2893 = (_2873 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2893 * (_2874 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2856)));
    SV_Target.y = _2893 * (_2874 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2858)));
    SV_Target.z = _2893 * (_2874 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2860)));
    SV_Target.w = cbInstanceData._m0[_2732].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2695) * _2731) * _2879) * _2893;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2696) * _2731) * _2880) * _2893;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2697) * _2731) * _2881) * _2893;
    SV_Target_1.w = cbInstanceData._m0[_2732].w;
}


