#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _913;
uint _2396;
uint _2397;
uint _2398;
uint _2620;
uint _2621;
uint _2622;
float _2854;
float _2855;
float _2856;
float _2857;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _296 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _334 = cbMtdParam._m0[27u].w + _275;
    float _335 = cbMtdParam._m0[28u].x + _276;
    float _336 = cbMtdParam._m0[28u].y + _277;
    float _353 = (-0.0) - dot(vec3(_334, _335, _336), vec3(_207 * _199, _207 * _200, _207 * _201));
    float _354 = (-0.0) - dot(vec3(_334, _335, _336), vec3(_218 * TANGENT.x, _218 * TANGENT.y, _218 * TANGENT.z));
    float _355 = (-0.0) - dot(vec3(_334, _335, _336), vec3((-0.0) - (NORMAL.x * _214), (-0.0) - (NORMAL.y * _214), (-0.0) - (NORMAL.z * _214)));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _362 = _359 * _355;
    float _365 = ((_359 * _353) + (((_296.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w)) * cbMtdParam._m0[24u].x;
    float _366 = ((_359 * _354) + (((_296.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x)) * cbMtdParam._m0[23u].w;
    float _367 = fract(TEXCOORD.x);
    float _368 = fract(TEXCOORD.y);
    float _374;
    if (_365 > 0.0)
    {
        _374 = (1.0 - _367) / _365;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_365 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _367) / _365;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _374 = frontier_phi_3_2_ladder;
    }
    float _382;
    if (_366 > 0.0)
    {
        _382 = (1.0 - _368) / _366;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_366 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _368) / _366;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _382 = frontier_phi_7_6_ladder;
    }
    float _386 = (_362 > 0.0) ? (cbMtdParam._m0[17u].x / _362) : 5000.0;
    float _387 = isnan(_382) ? _374 : (isnan(_374) ? _382 : min(_374, _382));
    float _388 = isnan(_386) ? _387 : (isnan(_387) ? _386 : min(_387, _386));
    float _392 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _399 = ((_388 * _362) + _392) / _392;
    vec4 _424 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_367 + (-0.5)) + (_388 * _365)) / _399) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_368 + (-0.5)) + (_388 * _366)) / _399) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _434 = cbMtdParam._m0[9u].x * _424.x;
    float _435 = cbMtdParam._m0[9u].y * _424.y;
    float _436 = cbMtdParam._m0[9u].z * _424.z;
    float _448 = (cbMtdParam._m0[19u].y * _434) * cbMtdParam._m0[16u].x;
    float _450 = (cbMtdParam._m0[19u].y * _435) * cbMtdParam._m0[16u].y;
    float _452 = (cbMtdParam._m0[19u].y * _436) * cbMtdParam._m0[16u].z;
    vec4 _476 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _481 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _487 = ((_476.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _489 = (-0.0) - (cbMtdParam._m0[21u].x * ((_476.x * 0.5) + (-0.25)));
    float _490 = fract(_481);
    float _492 = fract(_481 + 0.5);
    vec4 _519 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_490 * _489) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_487 * _490) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _521 = _519.x;
    float _527 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_492 * _489) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_487 * _492) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _521) * abs((_490 * 2.0) + (-1.0))) + _521;
    float _533 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _537 = fract(abs(_533));
    float _547 = sin(cbMtdParam._m0[21u].z);
    float _548 = cos(cbMtdParam._m0[21u].z);
    float _549 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _550 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _575 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_550, (-0.0) - _547, _548 * _549) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_550, _548, _549 * _547) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_533 >= ((-0.0) - _533)) ? _537 : ((-0.0) - _537)) * cbMtdParam._m0[18u].z) - _527)) + cbMtdParam._m0[18u].w;
    float _576 = ceil(_575);
    float _2876 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _2876 : (isnan(_2876) ? 1.0 : min(_2876, 1.0));
    float _597 = ((((cbMtdParam._m0[21u].w * _434) * cbMtdParam._m0[15u].x) - _448) * _577) + _448;
    float _598 = ((((cbMtdParam._m0[21u].w * _435) * cbMtdParam._m0[15u].y) - _450) * _577) + _450;
    float _599 = ((((cbMtdParam._m0[21u].w * _436) * cbMtdParam._m0[15u].z) - _452) * _577) + _452;
    float _603 = abs(cbMtdParam._m0[20u].w * _575);
    float _607 = (((_603 * cbMtdParam._m0[18u].y) - _527) * _603) + _527;
    float _2887 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _608 = isnan(1.0) ? _2887 : (isnan(_2887) ? 1.0 : min(_2887, 1.0));
    vec4 _620 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _635 = (cbMtdParam._m0[14u].x * _620.x) * cbMtdParam._m0[19u].x;
    float _636 = (cbMtdParam._m0[14u].y * _620.y) * cbMtdParam._m0[19u].x;
    float _637 = (cbMtdParam._m0[14u].z * _620.z) * cbMtdParam._m0[19u].x;
    float _644 = exp2(log2(_608) * cbMtdParam._m0[20u].x);
    float _679 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _683 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _684 = _275 * _683;
    float _685 = _276 * _683;
    float _686 = _277 * _683;
    vec4 _691 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _693 = _691.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _763 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
        float _769 = (cbMatDynParam._m0[5u].x * _763) + cbMatDynParam._m0[5u].y;
        float _2898 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _2898 : (isnan(_2898) ? 1.0 : min(_2898, 1.0));
        float _774 = (cbMatDynParam._m0[5u].z * _763) + cbMatDynParam._m0[5u].w;
        float _2909 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2909 : (isnan(_2909) ? 1.0 : min(_2909, 1.0))) - _770)) + _770) < ((_693 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _706 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _707 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _716 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_706 * cbSceneParam._m0[86u].x, _707 * cbSceneParam._m0[86u].y));
    float _719 = _716.x * TEXCOORD_4;
    float _720 = (-0.0) - _684;
    float _721 = (-0.0) - _685;
    float _722 = (-0.0) - _686;
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _912;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _835 = (cbModelParam._m0[37u].x * ((((fma(_752, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _837 = (cbModelParam._m0[37u].y * ((((fma(_752, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _838 = (((((fma(_752, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_835, _837, _838), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_835, _837, _838), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_835, _837, _838), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_835, _837, _838), 0.0);
        float _875 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _885 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _895 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _905 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_862.x + (-0.5));
        float _907 = _905 * (_862.y + (-0.5));
        float _908 = _905 * (_862.z + (-0.5));
        _912 = _875 * (_841.z + (-0.5));
        _914 = _875 * (_841.y + (-0.5));
        _915 = _875 * (_841.x + (-0.5));
        _916 = _885 * (_848.z + (-0.5));
        _917 = _885 * (_848.y + (-0.5));
        _918 = _885 * (_848.x + (-0.5));
        _919 = _895 * (_855.z + (-0.5));
        _920 = _895 * (_855.y + (-0.5));
        _921 = _895 * (_855.x + (-0.5));
        _922 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        _923 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        _924 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    }
    else
    {
        _912 = _913;
        _914 = _913;
        _915 = _913;
        _916 = _913;
        _917 = _913;
        _918 = _913;
        _919 = _913;
        _920 = _913;
        _921 = _913;
        _922 = _913;
        _923 = _913;
        _924 = _913;
    }
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _980 = (cbModelParam._m0[38u].x * ((((fma(_752, cbModelParam._m0[30u].z, fma(_748, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _981 = (cbModelParam._m0[38u].y * ((((fma(_752, cbModelParam._m0[31u].z, fma(_748, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _982 = (((((fma(_752, cbModelParam._m0[32u].z, fma(_748, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        float _1017 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1005.x + (-0.5));
        float _1049 = _1047 * (_1005.y + (-0.5));
        float _1050 = _1047 * (_1005.z + (-0.5));
        _1054 = _1017 * (_984.z + (-0.5));
        _1055 = _1017 * (_984.y + (-0.5));
        _1056 = _1017 * (_984.x + (-0.5));
        _1057 = _1027 * (_991.z + (-0.5));
        _1058 = _1027 * (_991.y + (-0.5));
        _1059 = _1027 * (_991.x + (-0.5));
        _1060 = _1037 * (_998.z + (-0.5));
        _1061 = _1037 * (_998.y + (-0.5));
        _1062 = _1037 * (_998.x + (-0.5));
        _1063 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        _1064 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        _1065 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    }
    else
    {
        _1054 = _913;
        _1055 = _913;
        _1056 = _913;
        _1057 = _913;
        _1058 = _913;
        _1059 = _913;
        _1060 = _913;
        _1061 = _913;
        _1062 = _913;
        _1063 = _913;
        _1064 = _913;
        _1065 = _913;
    }
    float _1080 = _684 * (-0.5);
    float _1081 = _685 * (-0.5);
    float _1082 = _686 * (-0.5);
    float _1083 = dot(vec4(_1080, _1081, _1082, 1.0), vec4(_1056, _1059, _1062, _1065));
    float _1086 = dot(vec4(_1080, _1081, _1082, 1.0), vec4(_1055, _1058, _1061, _1064));
    float _1089 = dot(vec4(_1080, _1081, _1082, 1.0), vec4(_1054, _1057, _1060, _1063));
    float _1124;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1096 = dot(vec4(_1080, _1081, _1082, 1.0), vec4(_912, _916, _919, _922));
        float _1100 = dot(vec4(_1080, _1081, _1082, 1.0), vec4(_914, _917, _920, _923));
        float _1104 = dot(vec4(_1080, _1081, _1082, 1.0), vec4(_915, _918, _921, _924));
        float _1111 = dot(vec4(cbModelParam._m0[39u]), vec4(_1080, _1081, _1082, 1.0));
        _1124 = dot(vec3(isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)), isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)), isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1111) ? 0.0 : (isnan(0.0) ? _1111 : max(0.0, _1111))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1124 = 1.0;
    }
    float _1135;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1126 = dot(vec4(cbModelParam._m0[40u]), vec4(_1080, _1081, _1082, 1.0));
        _1135 = dot(vec3(isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)), isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)), isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1126) ? 0.0 : (isnan(0.0) ? _1126 : max(0.0, _1126))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1135 = 1.0;
    }
    float _1139 = (_1135 * cbModelParam._m0[1u].x) + (_1124 * (1.0 - cbModelParam._m0[1u].x));
    float _1145 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1226;
    float _1228;
    float _1230;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1193 = fma(_752, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744)) + cbModelParam._m0[13u].w;
        float _1197 = fma(_752, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744)) + cbModelParam._m0[14u].w;
        float _1201 = fma(_752, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744)) + cbModelParam._m0[15u].w;
        float _1204 = fma(_722, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720));
        float _1207 = fma(_722, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720));
        float _1210 = fma(_722, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720));
        float _1236;
        if (_1204 > 0.0)
        {
            _1236 = abs((1.0 - _1193) / _1204);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1204 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1193 + 1.0) / _1204);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1236 = frontier_phi_25_23_ladder;
        }
        float _1424;
        if (_1207 > 0.0)
        {
            _1424 = abs((1.0 - _1197) / _1207);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1207 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1197 + 1.0) / _1207);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1424 = frontier_phi_34_30_ladder;
        }
        float _1778;
        if (_1210 > 0.0)
        {
            _1778 = abs((1.0 - _1201) / _1210);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1210 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1201 + 1.0) / _1210);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _1778 = frontier_phi_46_41_ladder;
        }
        float _1780 = isnan(_1424) ? _1236 : (isnan(_1236) ? _1424 : min(_1236, _1424));
        float _1781 = isnan(_1778) ? _1780 : (isnan(_1780) ? _1778 : min(_1780, _1778));
        float _1785 = (_1781 * _1204) + _1193;
        float _1786 = (_1781 * _1207) + _1197;
        float _1787 = (_1781 * _1210) + _1201;
        float _1788 = _1781 * 9.9999997473787516355514526367188e-05;
        float _1790 = (-1.0) - _1788;
        float _1792 = _1788 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_1787 > _1792) || ((_1787 < _1790) || ((_1786 > _1792) || ((_1786 < _1790) || ((_1785 < _1790) || (_1785 > _1792))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2030 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1787, cbModelParam._m0[9u].z, fma(_1786, cbModelParam._m0[9u].y, _1785 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1787, cbModelParam._m0[10u].z, fma(_1786, cbModelParam._m0[10u].y, _1785 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1787, cbModelParam._m0[11u].z, fma(_1786, cbModelParam._m0[11u].y, _1785 * cbModelParam._m0[11u].x))), _1145);
            frontier_phi_24_46_ladder = _2030.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2030.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2030.x * cbModelParam._m0[1u].y;
        }
        _1226 = frontier_phi_24_46_ladder_2;
        _1228 = frontier_phi_24_46_ladder_1;
        _1230 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1214 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_720, _721, _722), _1145);
        _1226 = _1214.x * cbModelParam._m0[1u].y;
        _1228 = _1214.y * cbModelParam._m0[1u].y;
        _1230 = _1214.z * cbModelParam._m0[1u].y;
    }
    float _1233 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1321;
    float _1323;
    float _1325;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1285 = fma(_752, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744)) + cbModelParam._m0[21u].w;
        float _1289 = fma(_752, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744)) + cbModelParam._m0[22u].w;
        float _1293 = fma(_752, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744)) + cbModelParam._m0[23u].w;
        float _1296 = fma(_722, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720));
        float _1299 = fma(_722, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720));
        float _1302 = fma(_722, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720));
        float _1429;
        if (_1296 > 0.0)
        {
            _1429 = abs((1.0 - _1285) / _1296);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1296 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1285 + 1.0) / _1296);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1429 = frontier_phi_36_32_ladder;
        }
        float _1805;
        if (_1299 > 0.0)
        {
            _1805 = abs((1.0 - _1289) / _1299);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1299 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1289 + 1.0) / _1299);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _1805 = frontier_phi_48_43_ladder;
        }
        float _2163;
        if (_1302 > 0.0)
        {
            _2163 = abs((1.0 - _1293) / _1302);
        }
        else
        {
            float frontier_phi_60_55_ladder;
            if (_1302 < 0.0)
            {
                frontier_phi_60_55_ladder = abs((_1293 + 1.0) / _1302);
            }
            else
            {
                frontier_phi_60_55_ladder = 5000.0;
            }
            _2163 = frontier_phi_60_55_ladder;
        }
        float _2165 = isnan(_1805) ? _1429 : (isnan(_1429) ? _1805 : min(_1429, _1805));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1296) + _1285;
        float _2171 = (_2166 * _1299) + _1289;
        float _2172 = (_2166 * _1302) + _1293;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2173;
        float _2176 = _2173 + 1.0;
        float frontier_phi_33_60_ladder;
        float frontier_phi_33_60_ladder_1;
        float frontier_phi_33_60_ladder_2;
        if ((_2172 > _2176) || ((_2172 < _2174) || ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 < _2174) || (_2170 > _2176))))))
        {
            frontier_phi_33_60_ladder = 0.0;
            frontier_phi_33_60_ladder_1 = 0.0;
            frontier_phi_33_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2294 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2172, cbModelParam._m0[17u].z, fma(_2171, cbModelParam._m0[17u].y, _2170 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2172, cbModelParam._m0[18u].z, fma(_2171, cbModelParam._m0[18u].y, _2170 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2172, cbModelParam._m0[19u].z, fma(_2171, cbModelParam._m0[19u].y, _2170 * cbModelParam._m0[19u].x))), _1233);
            frontier_phi_33_60_ladder = _2294.z * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_1 = _2294.y * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_2 = _2294.x * cbModelParam._m0[1u].z;
        }
        _1321 = frontier_phi_33_60_ladder_2;
        _1323 = frontier_phi_33_60_ladder_1;
        _1325 = frontier_phi_33_60_ladder;
    }
    else
    {
        vec4 _1305 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_720, _721, _722), _1233);
        _1321 = _1305.x * cbModelParam._m0[1u].z;
        _1323 = _1305.y * cbModelParam._m0[1u].z;
        _1325 = _1305.z * cbModelParam._m0[1u].z;
    }
    float _1337 = _719 * 0.01200000010430812835693359375;
    float _1339 = _1337 * ((cbModelParam._m0[1u].w * (_1321 - _1226)) + _1226);
    float _1340 = _1337 * ((cbModelParam._m0[1u].w * (_1323 - _1228)) + _1228);
    float _1341 = _1337 * ((cbModelParam._m0[1u].w * (_1325 - _1230)) + _1230);
    float _1362 = fma(_1341, cbSceneParam._m0[89u].z, fma(_1340, cbSceneParam._m0[89u].y, _1339 * cbSceneParam._m0[89u].x));
    float _1365 = fma(_1341, cbSceneParam._m0[90u].z, fma(_1340, cbSceneParam._m0[90u].y, _1339 * cbSceneParam._m0[90u].x));
    float _1368 = fma(_1341, cbSceneParam._m0[91u].z, fma(_1340, cbSceneParam._m0[91u].y, _1339 * cbSceneParam._m0[91u].x));
    float _1403 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1407 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1411 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1415 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1416 = _1403 / _1415;
    float _1417 = _1407 / _1415;
    float _1418 = _1411 / _1415;
    float _1566;
    float _1567;
    float _1568;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1445 = ((uint(_1418 > cbSceneParam._m0[59u].y) + uint(_1418 > cbSceneParam._m0[59u].x)) + uint(_1418 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1446 = _1445 + 43u;
        uint _1454 = _1445 + 44u;
        uint _1462 = _1445 + 45u;
        uint _1470 = _1445 + 46u;
        float _1481 = fma(_1415, cbSceneParam._m0[_1446].w, fma(_1411, cbSceneParam._m0[_1446].z, fma(_1407, cbSceneParam._m0[_1446].y, _1403 * cbSceneParam._m0[_1446].x)));
        float _1485 = fma(_1415, cbSceneParam._m0[_1454].w, fma(_1411, cbSceneParam._m0[_1454].z, fma(_1407, cbSceneParam._m0[_1454].y, _1403 * cbSceneParam._m0[_1454].x)));
        float _1493 = fma(_1415, cbSceneParam._m0[_1470].w, fma(_1411, cbSceneParam._m0[_1470].z, fma(_1407, cbSceneParam._m0[_1470].y, _1403 * cbSceneParam._m0[_1470].x)));
        float _1498 = cbSceneParam._m0[33u].z * _1493;
        float _1500 = cbSceneParam._m0[33u].w * _1493;
        float _1503 = fma(_1415, cbSceneParam._m0[_1462].w, fma(_1411, cbSceneParam._m0[_1462].z, fma(_1407, cbSceneParam._m0[_1462].y, _1403 * cbSceneParam._m0[_1462].x))) / _1493;
        float _1551 = (cbSceneParam._m0[33u].x - sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418))) * cbSceneParam._m0[33u].y;
        float _3035 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1559 = (isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1498 + _1481) / _1493, (_1500 + _1485) / _1493), _1503), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1500 + _1481) / _1493, (_1485 - _1498) / _1493), _1503), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1481 - _1498) / _1493, (_1485 - _1500) / _1493), _1503), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1481 - _1500) / _1493, (_1498 + _1485) / _1493), _1503), 0.0)).x), vec4(0.25)));
        _1566 = 1.0 - (_1559 * cbSceneParam._m0[34u].x);
        _1567 = 1.0 - (_1559 * cbSceneParam._m0[34u].y);
        _1568 = 1.0 - (_1559 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1566 = 1.0;
        _1567 = 1.0;
        _1568 = 1.0;
    }
    float _1632;
    float _1634;
    float _1636;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1620 = fma(_1415, cbSceneParam._m0[63u].w, fma(_1411, cbSceneParam._m0[63u].z, fma(_1407, cbSceneParam._m0[63u].y, _1403 * cbSceneParam._m0[63u].x)));
        float _1621 = fma(_1415, cbSceneParam._m0[60u].w, fma(_1411, cbSceneParam._m0[60u].z, fma(_1407, cbSceneParam._m0[60u].y, _1403 * cbSceneParam._m0[60u].x))) / _1620;
        float _1622 = fma(_1415, cbSceneParam._m0[61u].w, fma(_1411, cbSceneParam._m0[61u].z, fma(_1407, cbSceneParam._m0[61u].y, _1403 * cbSceneParam._m0[61u].x))) / _1620;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1621 >= cbSceneParam._m0[64u].x) && (_1622 >= cbSceneParam._m0[64u].y)) && (_1621 <= cbSceneParam._m0[64u].z)) && (_1622 <= cbSceneParam._m0[64u].w))
        {
            float _1818 = fma(_1415, cbSceneParam._m0[62u].w, fma(_1411, cbSceneParam._m0[62u].z, fma(_1407, cbSceneParam._m0[62u].y, _1403 * cbSceneParam._m0[62u].x))) / _1620;
            float _1822 = isnan(cbSceneParam._m0[41u].w) ? _1818 : (isnan(_1818) ? cbSceneParam._m0[41u].w : max(_1818, cbSceneParam._m0[41u].w));
            float _1865 = (cbSceneParam._m0[33u].x - sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418))) * cbSceneParam._m0[33u].y;
            float _3051 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
            float _1872 = (isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1621, cbSceneParam._m0[33u].w + _1622), _1822), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1621, _1622 - cbSceneParam._m0[33u].z), _1822), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1621 - cbSceneParam._m0[33u].z, _1622 - cbSceneParam._m0[33u].w), _1822), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1621 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1622), _1822), 0.0)).x), vec4(0.25)));
            float _1876 = 1.0 - (_1872 * cbSceneParam._m0[34u].x);
            float _1877 = 1.0 - (_1872 * cbSceneParam._m0[34u].y);
            float _1878 = 1.0 - (_1872 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_1878) ? _1568 : (isnan(_1568) ? _1878 : min(_1568, _1878));
            frontier_phi_45_44_ladder_1 = isnan(_1876) ? _1566 : (isnan(_1566) ? _1876 : min(_1566, _1876));
            frontier_phi_45_44_ladder_2 = isnan(_1877) ? _1567 : (isnan(_1567) ? _1877 : min(_1567, _1877));
        }
        else
        {
            frontier_phi_45_44_ladder = _1568;
            frontier_phi_45_44_ladder_1 = _1566;
            frontier_phi_45_44_ladder_2 = _1567;
        }
        _1632 = frontier_phi_45_44_ladder_1;
        _1634 = frontier_phi_45_44_ladder_2;
        _1636 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1632 = _1566;
        _1634 = _1567;
        _1636 = _1568;
    }
    uint _1638 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1642 = floatBitsToUint(cbInstanceData._m0[_1638 + 5u]);
    uint _1644 = _1642.x * 14u;
    uint _1645 = _1644 + 13u;
    float _1650 = _719 + (-1.0);
    float _1653 = (cbLight._m0[_1645].x * _1650) + 1.0;
    float _1654 = (cbLight._m0[_1645].y * _1650) + 1.0;
    uint _1655 = _1644 + 8u;
    float _1666 = cbLight._m0[_1644].x + _684;
    float _1667 = cbLight._m0[_1644].y + _685;
    float _1668 = cbLight._m0[_1644].z + _686;
    float _1672 = inversesqrt(dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668)));
    float _1676 = dot(vec3(0.0), vec3(cbLight._m0[_1644].xyz));
    float _3077 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1679 = isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0));
    float _1680 = dot(vec3(0.0), vec3(_684, _685, _686));
    float _3088 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1683 = isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0));
    float _1684 = dot(vec3(cbLight._m0[_1644].xyz), vec3(_1666 * _1672, _1667 * _1672, _1668 * _1672));
    float _3099 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1695 = (exp2(log2(1.0 - (isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1701 = (0.5 / ((_1679 + 9.9999999392252902907785028219223e-09) + _1683)) * _1679;
    float _3110 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1703 = (isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0))) * 0.31831014156341552734375;
    float _1705 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
    uint _1718 = _1644 + 9u;
    uint _1724 = _1644 | 1u;
    float _1730 = cbLight._m0[_1724].x + _684;
    float _1731 = cbLight._m0[_1724].y + _685;
    float _1732 = cbLight._m0[_1724].z + _686;
    float _1736 = inversesqrt(dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732)));
    float _1740 = dot(vec3(0.0), vec3(cbLight._m0[_1724].xyz));
    float _3126 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1743 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
    float _1744 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1730 * _1736, _1731 * _1736, _1732 * _1736));
    float _3137 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1753 = (exp2(log2(1.0 - (isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1757 = (0.5 / ((_1743 + 9.9999999392252902907785028219223e-09) + _1683)) * _1743;
    float _3148 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1759 = (isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0))) * 0.31831014156341552734375;
    float _1760 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
    float _1770 = (((_1753 * cbLight._m0[_1718].x) * _1759) * _1760) + ((((cbLight._m0[_1655].x * _1632) * _1695) * _1703) * _1705);
    float _1771 = (((_1753 * cbLight._m0[_1718].y) * _1759) * _1760) + ((((cbLight._m0[_1655].y * _1634) * _1695) * _1703) * _1705);
    float _1772 = (((_1753 * cbLight._m0[_1718].z) * _1759) * _1760) + ((((cbLight._m0[_1655].z * _1636) * _1695) * _1703) * _1705);
    float _1935;
    float _1937;
    float _1939;
    if (_1642.y == 0u)
    {
        uvec4 _1890 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1891 = _1890.x;
        uint _1902 = uint((float(_1890.y) * floor(float(uint(cbSceneParam._m0[85u].y * _707) / _1891))) + floor(float(uint(cbSceneParam._m0[85u].x * _706) / _1891)));
        float _1912 = (log2(_1418 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1913 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        uint _1916 = uint(isnan(14.0) ? _1913 : (isnan(_1913) ? 14.0 : min(_1913, 14.0)));
        uvec4 _1921 = texelFetch(g_lightClusterGridBuffer, int(((_1916 << 2u) + (_1902 << 6u)) >> 2u));
        uint _1922 = _1921.x;
        uint _1923 = _1890.z;
        float _2039;
        float _2041;
        float _2043;
        if (((((1u << ((_1923 >> 4u) & 15u)) + 4294967295u) & _1922) == 0u) || ((_1923 & 240u) == 0u))
        {
            _2039 = 0.0;
            _2041 = 0.0;
            _2043 = 0.0;
        }
        else
        {
            float _2040;
            float _2042;
            float _2044;
            float _2209 = 0.0;
            float _2210 = 0.0;
            float _2211 = 0.0;
            uint _2212 = 0u;
            uint _2221;
            bool _2222;
            for (;;)
            {
                _2221 = texelFetch(g_lightClassification, int((((_1916 << 5u) + (_1902 << 9u)) + (_2212 << 2u)) >> 2u)).x;
                _2222 = _2221 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                if (_2222)
                {
                    frontier_phi_71_pred = _2211;
                    frontier_phi_71_pred_1 = _2210;
                    frontier_phi_71_pred_2 = _2209;
                }
                else
                {
                    float _2366;
                    float _2367;
                    float _2368;
                    uint _2369;
                    _2366 = _2209;
                    _2367 = _2210;
                    _2368 = _2211;
                    _2369 = _2221;
                    float _2299;
                    float _2300;
                    float _2301;
                    for (;;)
                    {
                        uint _2373 = uint(findLSB(_2369)) + (_2212 << 5u);
                        uint _2370 = (_2369 + 4294967295u) & _2369;
                        uint _2375 = _2373 * 48u;
                        vec4 _2389 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2375)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 3u)).x));
                        uint _2406 = (_2373 * 48u) + 8u;
                        vec3 _2417 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2406)).x, texelFetch(g_PointLightRenderingBuffer, int(_2406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2406 + 2u)).x));
                        float _2421 = _2389.x - _1416;
                        float _2422 = _2389.y - _1417;
                        float _2423 = _2389.z - _1418;
                        float _2424 = dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423));
                        float _2427 = inversesqrt(_2424);
                        float _2436 = 1.0 - (_2424 * _2389.w);
                        float _3174 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
                        float _2438 = sqrt(_2424) * uintBitsToFloat(uvec4(_2396, _2397, _2398, texelFetch(g_PointLightRenderingBuffer, int(((_2373 * 48u) + 4u) + 3u)).x)).w;
                        float _2441 = 1.39999997615814208984375 / (_2438 + 1.39999997615814208984375);
                        float _2442 = _2441 * _2441;
                        float _2445 = ((1.0 - _2442) * dot(vec3(0.0), vec3(_2427 * _2421, _2427 * _2422, _2427 * _2423))) + _2442;
                        float _2447 = (-0.0) - _1416;
                        float _2448 = (-0.0) - _1417;
                        float _2449 = (-0.0) - _1418;
                        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
                        float _2457 = dot(vec3(0.0), vec3(_2453 * _2447, _2453 * _2448, _2453 * _2449));
                        float _3185 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
                        float _3196 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
                        float _2461 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
                        float _2465 = (0.5 / (((isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))) + 9.9999999392252902907785028219223e-09) + _2461)) * _2461;
                        float _3207 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
                        float _2474 = (((isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0))) * 3.1415927410125732421875) / (((_2438 * _2438) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0)));
                        _2299 = (_2474 * _2417.x) + _2366;
                        _2300 = (_2474 * _2417.y) + _2367;
                        _2301 = (_2474 * _2417.z) + _2368;
                        if (_2370 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2366 = _2299;
                            _2367 = _2300;
                            _2368 = _2301;
                            _2369 = _2370;
                        }
                    }
                    frontier_phi_71_pred = _2301;
                    frontier_phi_71_pred_1 = _2300;
                    frontier_phi_71_pred_2 = _2299;
                }
                _2044 = frontier_phi_71_pred;
                _2042 = frontier_phi_71_pred_1;
                _2040 = frontier_phi_71_pred_2;
                uint _2213 = _2212 + 1u;
                if (_2213 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2209 = _2040;
                    _2210 = _2042;
                    _2211 = _2044;
                    _2212 = _2213;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2039 = _2040;
            _2041 = _2042;
            _2043 = _2044;
        }
        uvec4 _2047 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2048 = _2047.z;
        uint _2050 = (_2048 >> 8u) & 15u;
        float _2189;
        float _2191;
        float _2193;
        if (((4294967295u << _2050) & _1922) == 0u)
        {
            _2189 = _2039;
            _2191 = _2041;
            _2193 = _2043;
        }
        else
        {
            float _2205 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            if (_2050 < ((_2048 >> 12u) & 15u))
            {
                float _2190;
                float _2192;
                float _2194;
                float _2352 = _2039;
                float _2353 = _2041;
                float _2354 = _2043;
                uint _2355 = _2050;
                uint _2364;
                bool _2365;
                for (;;)
                {
                    _2364 = texelFetch(g_lightClassification, int((((_1916 << 5u) + (_1902 << 9u)) + (_2355 << 2u)) >> 2u)).x;
                    _2365 = _2364 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    if (_2365)
                    {
                        frontier_phi_82_pred = _2352;
                        frontier_phi_82_pred_1 = _2354;
                        frontier_phi_82_pred_2 = _2353;
                    }
                    else
                    {
                        float _2488;
                        float _2489;
                        float _2490;
                        float _2709;
                        float _2710;
                        float _2711;
                        float _2498 = _2352;
                        float _2499 = _2353;
                        float _2500 = _2354;
                        uint _2501 = _2364;
                        uint _2502;
                        uint _2512;
                        vec4 _2527;
                        float _2528;
                        vec3 _2540;
                        vec4 _2555;
                        vec4 _2570;
                        float _2616;
                        bool _2617;
                        for (;;)
                        {
                            _2512 = ((_2355 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2501));
                            _2502 = (_2501 + 4294967295u) & _2501;
                            uint _2514 = _2512 * 40u;
                            _2527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 3u)).x));
                            _2528 = _2527.w;
                            uint _2530 = (_2512 * 40u) + 8u;
                            _2540 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 2u)).x));
                            uint _2542 = (_2512 * 40u) + 16u;
                            _2555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 3u)).x));
                            uint _2557 = (_2512 * 40u) + 20u;
                            _2570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2557 + 3u)).x));
                            uint _2572 = (_2512 * 40u) + 24u;
                            vec4 _2585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 3u)).x));
                            uint _2591 = (_2512 * 40u) + 28u;
                            vec4 _2604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2591 + 3u)).x));
                            _2616 = fma(_1418, _2604.z, fma(_1417, _2604.y, _2604.x * _1416)) + _2604.w;
                            _2617 = !((fma(_1418, _2585.z, fma(_1417, _2585.y, _2585.x * _1416)) + _2585.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            if (_2617)
                            {
                                float _2651 = _2527.x - _1416;
                                float _2652 = _2527.y - _1417;
                                float _2653 = _2527.z - _1418;
                                float _2654 = dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653));
                                float _2657 = inversesqrt(_2654);
                                float _2664 = 1.0 - (_2654 / (_2528 * _2528));
                                float _3218 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                                float _2666 = sqrt(_2654) * uintBitsToFloat(uvec4(_2620, _2621, _2622, texelFetch(g_SpotLightRenderingBuffer, int(((_2512 * 40u) + 4u) + 3u)).x)).w;
                                float _2668 = 1.39999997615814208984375 / (_2666 + 1.39999997615814208984375);
                                float _2669 = _2668 * _2668;
                                float _2672 = (fma(_1418, _2555.z, fma(_1417, _2555.y, _2555.x * _1416)) + _2555.w) / _2616;
                                float _2673 = (fma(_1418, _2570.z, fma(_1417, _2570.y, _2570.x * _1416)) + _2570.w) / _2616;
                                float _2677 = 1.0 - dot(vec2(_2672, _2673), vec2(_2672, _2673));
                                float _3229 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                                float _2685 = dot(vec3(0.0), vec3((-0.0) - (_1416 * _2205), (-0.0) - (_1417 * _2205), (-0.0) - (_1418 * _2205)));
                                float _3240 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                                float _2693 = ((1.0 - _2669) * dot(vec3(0.0), vec3(_2657 * _2651, _2657 * _2652, _2657 * _2653))) + _2669;
                                float _3251 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                                float _2694 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
                                float _2698 = (0.5 / (((isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) + 9.9999999392252902907785028219223e-09) + _2694)) * _2694;
                                float _3262 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                                float _2705 = ((isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0))) * (isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0)))) * (((isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0))) * 3.1415927410125732421875) / (((_2666 * _2666) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _2705 * _2540.x;
                                frontier_phi_88_pred_1 = _2705 * _2540.y;
                                frontier_phi_88_pred_2 = _2705 * _2540.z;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                            }
                            _2709 = frontier_phi_88_pred;
                            _2710 = frontier_phi_88_pred_1;
                            _2711 = frontier_phi_88_pred_2;
                            _2488 = _2709 + _2498;
                            _2489 = _2710 + _2499;
                            _2490 = _2711 + _2500;
                            if (_2502 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2498 = _2488;
                                _2499 = _2489;
                                _2500 = _2490;
                                _2501 = _2502;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2488;
                        frontier_phi_82_pred_1 = _2490;
                        frontier_phi_82_pred_2 = _2489;
                    }
                    _2190 = frontier_phi_82_pred;
                    _2194 = frontier_phi_82_pred_1;
                    _2192 = frontier_phi_82_pred_2;
                    uint _2356 = _2355 + 1u;
                    if (_2356 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2352 = _2190;
                        _2353 = _2192;
                        _2354 = _2194;
                        _2355 = _2356;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2194;
                frontier_phi_62_63_ladder_1 = _2192;
                frontier_phi_62_63_ladder_2 = _2190;
            }
            else
            {
                frontier_phi_62_63_ladder = _2043;
                frontier_phi_62_63_ladder_1 = _2041;
                frontier_phi_62_63_ladder_2 = _2039;
            }
            _2189 = frontier_phi_62_63_ladder_2;
            _2191 = frontier_phi_62_63_ladder_1;
            _2193 = frontier_phi_62_63_ladder;
        }
        float _2198 = isnan(1.0) ? _719 : (isnan(_719) ? 1.0 : min(_719, 1.0));
        _1935 = ((_2189 * 0.039999999105930328369140625) * _2198) + _1770;
        _1937 = ((_2191 * 0.039999999105930328369140625) * _2198) + _1771;
        _1939 = ((_2193 * 0.039999999105930328369140625) * _2198) + _1772;
    }
    else
    {
        _1935 = _1770;
        _1937 = _1771;
        _1939 = _1772;
    }
    uint _1945 = _1638 + 9u;
    uint _1946 = _1945 + uint(cbMatDynParam._m0[0u].w);
    float _1952 = (cbSceneParam._m0[72u].y * ((_644 * ((_635 - _597) - (_635 * _608))) + _597)) * cbInstanceData._m0[_1946].x;
    float _1953 = (cbSceneParam._m0[72u].y * ((_644 * ((_636 - _598) - (_636 * _608))) + _598)) * cbInstanceData._m0[_1946].y;
    float _1954 = (((_644 * ((_637 - _599) - (_637 * _608))) + _599) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1946].z;
    float _1961 = _1952 + ((_1935 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _1139)) * cbPerFrame._m0[3u].x);
    float _1962 = _1953 + ((_1937 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _1139)) * cbPerFrame._m0[3u].x);
    float _1963 = _1954 + ((_1939 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _1139)) * cbPerFrame._m0[3u].x);
    float _1964 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1965 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1966 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1972 = cbMtdParam._m0[2u].x * _1952;
    float _1973 = cbMtdParam._m0[2u].y * _1953;
    float _1974 = cbMtdParam._m0[2u].z * _1954;
    float _3293 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1976 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
    uint _1977 = _1638 + 6u;
    float _1985 = _706 / cbSceneParam._m0[86u].x;
    float _1986 = _707 / cbSceneParam._m0[86u].y;
    vec4 _2000 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1985, _1986, (log2((isnan(cbSceneParam._m0[77u].w) ? _679 : (isnan(_679) ? cbSceneParam._m0[77u].w : min(_679, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2002 = _2000.x;
    float _2003 = _2000.y;
    float _2004 = _2000.z;
    float _2005 = _2000.w;
    float _2095;
    float _2097;
    float _2099;
    float _2101;
    if (_679 > cbSceneParam._m0[78u].w)
    {
        float _2058 = isnan(_679) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _679 : min(cbSceneParam._m0[80u].w, _679));
        float _2059 = _2058 / _679;
        float _2070 = _2059 * _275;
        float _2071 = _276 * _2059;
        float _2072 = (-0.0) - _2071;
        float _2073 = _2059 * _277;
        float _2075 = (cbSceneParam._m0[77u].w * _2072) / _2058;
        float _2076 = _2075 + cbSceneParam._m0[79u].w;
        float _2077 = cbSceneParam._m0[79u].w - _2071;
        float _2083 = sqrt(((_2070 * _2070) + (_2071 * _2071)) + (_2073 * _2073));
        float _2086 = (1.0 - (cbSceneParam._m0[77u].w / _2058)) * _2083;
        float _2091 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2093 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2309;
        if (abs((_2072 - _2075) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2309 = ((((_2076 > 0.0) ? exp2(_2091 * _2076) : (2.0 - exp2(_2093 * _2076))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2086;
        }
        else
        {
            float _2235 = 1.0 / cbSceneParam._m0[80u].x;
            float _2236 = isnan(_2077) ? _2076 : (isnan(_2076) ? _2077 : max(_2076, _2077));
            float _2237 = isnan(_2077) ? _2076 : (isnan(_2076) ? _2077 : min(_2076, _2077));
            float _2246 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : min(_2236, 0.0));
            float _2247 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : min(_2237, 0.0));
            _2309 = ((abs(_2083 / _2072) * cbSceneParam._m0[80u].y) * ((((_2246 - _2247) * 2.0) - ((exp2(_2091 * (isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0)))) - exp2(_2091 * (isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0))))) * _2235)) - ((exp2(_2093 * _2246) - exp2(_2093 * _2247)) * _2235))) + (_2086 * cbSceneParam._m0[80u].z);
        }
        vec4 _2311 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1985, _1986, 1.0), 0.0);
        float _2320 = exp2((_2309 * (-1.44269502162933349609375)) * (1.0 - _2311.w));
        float _2321 = log2(_2320);
        float _2337 = log2(_2005);
        _2095 = (exp2(_2337 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2321 * cbSceneParam._m0[78u].x)) * _2311.x) / cbSceneParam._m0[78u].x)) + _2002;
        _2097 = (exp2(_2337 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2321 * cbSceneParam._m0[78u].y)) * _2311.y) / cbSceneParam._m0[78u].y)) + _2003;
        _2099 = (exp2(_2337 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2321 * cbSceneParam._m0[78u].z)) * _2311.z) / cbSceneParam._m0[78u].z)) + _2004;
        _2101 = _2320 * _2005;
    }
    else
    {
        _2095 = _2002;
        _2097 = _2003;
        _2099 = _2004;
        _2101 = _2005;
    }
    bool _2347;
    vec4 _2110;
    vec4 _2133;
    float _2135;
    float _2139;
    float _2140;
    float _2141;
    float _2144;
    float _2147;
    float _2150;
    float _2151;
    bool _2162;
    for (;;)
    {
        _2110 = cbMatDynParam._m0[0u];
        float _2112 = roundEven(_2110.y);
        bool _2113 = _2112 == 3.0;
        float _2115 = log2(_2101);
        float _2119 = exp2(_2115 * cbSceneParam._m0[78u].x);
        float _2120 = exp2(_2115 * cbSceneParam._m0[78u].y);
        float _2121 = exp2(_2115 * cbSceneParam._m0[78u].z);
        float _2122 = _2119 * _1964;
        float _2123 = _2120 * _1965;
        float _2124 = _2121 * _1966;
        float _2131 = _693 + (-0.5);
        _2133 = cbMtdParam._m0[1u];
        _2135 = _2133.y * _2131;
        float _2138 = (_2112 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2139 = _2138 * (_2113 ? _2122 : (_2122 + (cbSceneParam._m0[72u].w * _2095)));
        _2140 = _2138 * (_2113 ? _2123 : (_2123 + (cbSceneParam._m0[72u].w * _2097)));
        _2141 = _2138 * (_2113 ? _2124 : (_2124 + (cbSceneParam._m0[72u].w * _2099)));
        _2144 = ((_1972 * _1976) * _2119) * _2138;
        _2147 = ((_1973 * _1976) * _2120) * _2138;
        _2150 = ((_1974 * _1976) * _2121) * _2138;
        _2151 = _2131 * 0.999000012874603271484375;
        _2162 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2162)
        {
            if ((cbInstanceData._m0[_1638 + 7u].x + _2151) < 0.5)
            {
                _2347 = true;
                break;
            }
        }
        uint _2270 = _1945 + uint(_2110.w);
        if ((cbInstanceData._m0[_2270].w < 1.0) && ((cbInstanceData._m0[_2270].w + _2151) < 0.5))
        {
            _2347 = true;
            break;
        }
        if ((_2135 + 1.0) < _2133.x)
        {
            _2347 = true;
            break;
        }
        _2347 = false;
        break;
    }
    float _2479;
    if (_2347)
    {
        discard_state = true;
        _2479 = 0.0;
    }
    else
    {
        _2479 = cbInstanceData._m0[_1977].w;
    }
    SV_Target.x = _2139;
    SV_Target.y = _2140;
    SV_Target.z = _2141;
    SV_Target.w = _2479;
    SV_Target_1.x = _2144;
    SV_Target_1.y = _2147;
    SV_Target_1.z = _2150;
    SV_Target_1.w = cbInstanceData._m0[_1977].w;
    discard_exit();
}


