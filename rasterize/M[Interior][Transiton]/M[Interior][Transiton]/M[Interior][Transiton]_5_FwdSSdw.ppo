#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1365;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _298 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _301 = _298.x;
    vec4 _319 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _336 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _301) + cbMtdParam._m0[12u].x) * _319.x;
    float _338 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _301) + cbMtdParam._m0[12u].y) * _319.y;
    float _340 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _301) + cbMtdParam._m0[12u].z) * _319.z;
    vec4 _358 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _397 = cbMtdParam._m0[27u].w + _282;
    float _398 = cbMtdParam._m0[28u].x + _283;
    float _399 = cbMtdParam._m0[28u].y + _284;
    float _413 = (-0.0) - dot(vec3(_397, _398, _399), vec3(_212, _213, _214));
    float _414 = (-0.0) - dot(vec3(_397, _398, _399), vec3(_226, _227, _228));
    float _415 = (-0.0) - dot(vec3(_397, _398, _399), vec3((-0.0) - _219, (-0.0) - _220, (-0.0) - _221));
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _422 = _419 * _415;
    float _423 = (_419 * _413) + ((cbMtdParam._m0[25u].w * _301) * ((_358.x * 2.0) + (-1.0)));
    float _424 = (_419 * _414) + ((cbMtdParam._m0[26u].x * _301) * ((_358.y * 2.0) + (-1.0)));
    float _425 = _423 * cbMtdParam._m0[24u].x;
    float _426 = _424 * cbMtdParam._m0[23u].w;
    float _427 = fract(TEXCOORD.x);
    float _428 = fract(TEXCOORD.y);
    float _434;
    if (_425 > 0.0)
    {
        _434 = (1.0 - _427) / _425;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_425 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _427) / _425;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _434 = frontier_phi_3_2_ladder;
    }
    float _442;
    if (_426 > 0.0)
    {
        _442 = (1.0 - _428) / _426;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_426 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _428) / _426;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _442 = frontier_phi_7_6_ladder;
    }
    bool _444 = _422 > 0.0;
    float _446 = _444 ? (cbMtdParam._m0[17u].x / _422) : 5000.0;
    float _447 = isnan(_442) ? _434 : (isnan(_434) ? _442 : min(_434, _442));
    float _448 = isnan(_446) ? _447 : (isnan(_447) ? _446 : min(_447, _446));
    float _452 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _453 = _427 + (-0.5);
    float _456 = _428 + (-0.5);
    float _459 = ((_448 * _422) + _452) / _452;
    vec4 _484 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_453 + (_448 * _425)) / _459) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_456 + (_448 * _426)) / _459) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _497 = (_484.x * _301) * cbMtdParam._m0[9u].x;
    float _498 = (_484.y * _301) * cbMtdParam._m0[9u].y;
    float _499 = (_484.z * _301) * cbMtdParam._m0[9u].z;
    float _517 = _423 * cbMtdParam._m0[26u].z;
    float _518 = _424 * cbMtdParam._m0[26u].y;
    bool _519 = _517 > 0.0;
    float _524;
    if (_519)
    {
        _524 = (1.0 - _427) / _517;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_517 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _427) / _517;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _524 = frontier_phi_11_10_ladder;
    }
    bool _526 = _518 > 0.0;
    float _531;
    if (_526)
    {
        _531 = (1.0 - _428) / _518;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_518 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _428) / _518;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _531 = frontier_phi_15_14_ladder;
    }
    float _534 = _444 ? (cbMtdParam._m0[19u].z / _422) : 5000.0;
    float _535 = isnan(_531) ? _524 : (isnan(_524) ? _531 : min(_524, _531));
    float _536 = isnan(_534) ? _535 : (isnan(_535) ? _534 : min(_535, _534));
    float _540 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _544 = ((_536 * _422) + _540) / _540;
    float _549 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _551 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _567 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_453 + (_536 * _517)) / _544) + 0.5) + _549) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_456 + (_536 * _518)) / _544) + 0.5) + _551) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _582;
    if (_519)
    {
        _582 = (1.0 - _427) / _517;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_517 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _427) / _517;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _582 = frontier_phi_19_18_ladder;
    }
    float _588;
    if (_526)
    {
        _588 = (1.0 - _428) / _518;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_518 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _428) / _518;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _588 = frontier_phi_23_22_ladder;
    }
    float _590 = isnan(_588) ? _582 : (isnan(_582) ? _588 : min(_582, _588));
    float _591 = isnan(_534) ? _590 : (isnan(_590) ? _534 : min(_590, _534));
    float _598 = ((_591 * _422) + _540) / _540;
    vec4 _618 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_453 + (_591 * _517)) / _598) + 0.5) + _549) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_456 + (_591 * _518)) / _598) + 0.5) + _551) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _620 = _618.x;
    float _630 = (((((cbMtdParam._m0[10u].x * _301) * _567.x) - _497) * _301) * _620) + _497;
    float _631 = (((((cbMtdParam._m0[10u].y * _301) * _567.y) - _498) * _301) * _620) + _498;
    float _632 = (((((cbMtdParam._m0[10u].z * _301) * _567.z) - _499) * _301) * _620) + _499;
    vec4 _645 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _649 = _645.z;
    float _652 = (_645.x * 2.0) + (-1.0);
    float _653 = (_645.y * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3532 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _659 = sqrt(1.0 - (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))));
    float _668 = (cbMtdParam._m0[19u].y * _630) * cbMtdParam._m0[16u].x;
    float _670 = (cbMtdParam._m0[19u].y * _631) * cbMtdParam._m0[16u].y;
    float _672 = (cbMtdParam._m0[19u].y * _632) * cbMtdParam._m0[16u].z;
    vec4 _696 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _701 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _707 = ((_696.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _709 = (-0.0) - (cbMtdParam._m0[21u].x * ((_696.x * 0.5) + (-0.25)));
    float _710 = fract(_701);
    float _712 = fract(_701 + 0.5);
    vec4 _739 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_710 * _709) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_707 * _710) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _741 = _739.x;
    float _747 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_712 * _709) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_707 * _712) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _741) * abs((_710 * 2.0) + (-1.0))) + _741;
    float _753 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _757 = fract(abs(_753));
    float _767 = sin(cbMtdParam._m0[21u].z);
    float _768 = cos(cbMtdParam._m0[21u].z);
    float _769 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _770 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _795 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_770, (-0.0) - _767, _768 * _769) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_770, _768, _769 * _767) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_753 >= ((-0.0) - _753)) ? _757 : ((-0.0) - _757)) * cbMtdParam._m0[18u].z) - _747)) + cbMtdParam._m0[18u].w;
    float _796 = ceil(_795);
    float _3543 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _797 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _817 = ((((cbMtdParam._m0[21u].w * _630) * cbMtdParam._m0[15u].x) - _668) * _797) + _668;
    float _818 = ((((cbMtdParam._m0[21u].w * _631) * cbMtdParam._m0[15u].y) - _670) * _797) + _670;
    float _819 = ((((cbMtdParam._m0[21u].w * _632) * cbMtdParam._m0[15u].z) - _672) * _797) + _672;
    float _823 = abs(cbMtdParam._m0[20u].w * _795);
    float _827 = (((_823 * cbMtdParam._m0[18u].y) - _747) * _823) + _747;
    float _3554 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _828 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    vec4 _840 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _855 = (cbMtdParam._m0[14u].x * _840.x) * cbMtdParam._m0[19u].x;
    float _856 = (cbMtdParam._m0[14u].y * _840.y) * cbMtdParam._m0[19u].x;
    float _857 = (cbMtdParam._m0[14u].z * _840.z) * cbMtdParam._m0[19u].x;
    float _864 = exp2(log2(_828) * cbMtdParam._m0[20u].x);
    float _886 = fma(_659, _219, fma(_653, _226, _652 * _212));
    float _889 = fma(_659, _220, fma(_653, _227, _652 * _213));
    float _892 = fma(_659, _221, fma(_653, _228, _652 * _214));
    float _896 = inversesqrt(dot(vec3(_886, _889, _892), vec3(_886, _889, _892)));
    float _897 = _896 * _886;
    float _898 = _896 * _889;
    float _899 = _896 * _892;
    float _3565 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _900 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3587 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3598 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _919 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _923 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _924 = _282 * _923;
    float _925 = _283 * _923;
    float _926 = _284 * _923;
    float _932 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _933 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _951 = fma(_899, cbSceneParam._m0[5u].z, fma(_898, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _897));
    float _954 = fma(_899, cbSceneParam._m0[6u].z, fma(_898, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _897));
    float _957 = fma(_899, cbSceneParam._m0[7u].z, fma(_898, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _897));
    uint _970 = uint(roundEven(NORMAL.w)) * 13u;
    uint _971 = _970 + 9u;
    uint _972 = _971 + uint(cbMatDynParam._m0[0u].w);
    float _978 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) * cbInstanceData._m0[_972].x;
    float _979 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_972].y;
    float _980 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_972].z;
    float _3609 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    vec4 _992 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _932, cbSceneParam._m0[86u].y * _933));
    float _995 = _992.x * TEXCOORD_4;
    float _996 = dot(vec3(_897, _898, _899), vec3(_924, _925, _926));
    float _999 = _996 * 2.0;
    float _1003 = (_999 * _897) - _924;
    float _1004 = (_999 * _898) - _925;
    float _1005 = (_999 * _899) - _926;
    float _1009 = abs(dot(vec3(_924, _925, _926), vec3(_897, _898, _899)));
    float _3642 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1011 = sqrt(_900);
    float _1024 = exp2((_1011 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1011 * 3.0));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1364;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1091 = fma(_1064, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056));
        float _1095 = fma(_1064, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056));
        float _1099 = fma(_1064, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056));
        float _1122 = _1056 + _897;
        float _1123 = _1060 + _898;
        float _1124 = _1064 + _899;
        float _1134 = fma(_1124, cbModelParam._m0[26u].z, fma(_1123, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1122)) - _1091;
        float _1135 = fma(_1124, cbModelParam._m0[27u].z, fma(_1123, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1122)) - _1095;
        float _1136 = fma(_1124, cbModelParam._m0[28u].z, fma(_1123, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1122)) - _1099;
        float _1140 = inversesqrt(dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136)));
        float _1153 = ((_1140 * _1134) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1091 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1140 * _1135) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1095 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1140 * _1136) / cbModelParam._m0[34u].z) + ((((((_1099 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        float _1192 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1158.x + (-0.5));
        float _1194 = _1192 * (_1158.y + (-0.5));
        float _1195 = _1192 * (_1158.z + (-0.5));
        float _1202 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1165.x + (-0.5));
        float _1204 = _1202 * (_1165.y + (-0.5));
        float _1205 = _1202 * (_1165.z + (-0.5));
        float _1212 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1172.x + (-0.5));
        float _1214 = _1212 * (_1172.y + (-0.5));
        float _1215 = _1212 * (_1172.z + (-0.5));
        float _1222 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1179.x + (-0.5));
        float _1224 = _1222 * (_1179.y + (-0.5));
        float _1225 = _1222 * (_1179.z + (-0.5));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = _1193 * 0.5;
        float _1230 = _1203 * 0.5;
        float _1231 = _1213 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1246 = (dot(vec3(_897, _898, _899), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1256 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3690 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1258 + 1.0))) + _1263) * _1226;
        float _1273 = _1194 * 0.5;
        float _1274 = _1204 * 0.5;
        float _1275 = _1214 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_897, _898, _899), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3723 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1300 + 1.0))) + _1305) * _1227;
        float _1315 = _1195 * 0.5;
        float _1316 = _1205 * 0.5;
        float _1317 = _1215 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_897, _898, _899), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3756 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1342 + 1.0))) + _1347) * _1228;
        _1364 = _1195;
        _1366 = _1194;
        _1367 = _1193;
        _1368 = _1205;
        _1369 = _1204;
        _1370 = _1203;
        _1371 = _1215;
        _1372 = _1214;
        _1373 = _1213;
        _1374 = _1228;
        _1375 = _1227;
        _1376 = _1226;
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    }
    else
    {
        _1364 = _1365;
        _1366 = _1365;
        _1367 = _1365;
        _1368 = _1365;
        _1369 = _1365;
        _1370 = _1365;
        _1371 = _1365;
        _1372 = _1365;
        _1373 = _1365;
        _1374 = _1365;
        _1375 = _1365;
        _1376 = _1365;
        _1377 = 0.0;
        _1378 = 0.0;
        _1379 = 0.0;
    }
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1404 = fma(_1064, cbModelParam._m0[30u].z, fma(_1060, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1056));
        float _1408 = fma(_1064, cbModelParam._m0[31u].z, fma(_1060, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1056));
        float _1412 = fma(_1064, cbModelParam._m0[32u].z, fma(_1060, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1056));
        float _1435 = _1056 + _897;
        float _1436 = _1060 + _898;
        float _1437 = _1064 + _899;
        float _1447 = fma(_1437, cbModelParam._m0[30u].z, fma(_1436, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1435)) - _1404;
        float _1448 = fma(_1437, cbModelParam._m0[31u].z, fma(_1436, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1435)) - _1408;
        float _1449 = fma(_1437, cbModelParam._m0[32u].z, fma(_1436, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1435)) - _1412;
        float _1453 = inversesqrt(dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449)));
        float _1466 = ((_1453 * _1447) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1404 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1453 * _1448) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1408 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1453 * _1449) / cbModelParam._m0[35u].z) + ((((((_1412 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        float _1503 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1470.x + (-0.5));
        float _1505 = _1503 * (_1470.y + (-0.5));
        float _1506 = _1503 * (_1470.z + (-0.5));
        float _1513 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1477.x + (-0.5));
        float _1515 = _1513 * (_1477.y + (-0.5));
        float _1516 = _1513 * (_1477.z + (-0.5));
        float _1523 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1484.x + (-0.5));
        float _1525 = _1523 * (_1484.y + (-0.5));
        float _1526 = _1523 * (_1484.z + (-0.5));
        float _1533 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1491.x + (-0.5));
        float _1535 = _1533 * (_1491.y + (-0.5));
        float _1536 = _1533 * (_1491.z + (-0.5));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = _1504 * 0.5;
        float _1541 = _1514 * 0.5;
        float _1542 = _1524 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_897, _898, _899), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _3819 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1567 + 1.0))) + _1572) * _1537;
        float _1582 = _1505 * 0.5;
        float _1583 = _1515 * 0.5;
        float _1584 = _1525 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_897, _898, _899), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _3852 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1609 + 1.0))) + _1614) * _1538;
        float _1624 = _1506 * 0.5;
        float _1625 = _1516 * 0.5;
        float _1626 = _1526 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_897, _898, _899), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _3885 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1651 + 1.0))) + _1656) * _1539;
        _1673 = _1506;
        _1674 = _1505;
        _1675 = _1504;
        _1676 = _1516;
        _1677 = _1515;
        _1678 = _1514;
        _1679 = _1526;
        _1680 = _1525;
        _1681 = _1524;
        _1682 = _1539;
        _1683 = _1538;
        _1684 = _1537;
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
    }
    else
    {
        _1673 = _1365;
        _1674 = _1365;
        _1675 = _1365;
        _1676 = _1365;
        _1677 = _1365;
        _1678 = _1365;
        _1679 = _1365;
        _1680 = _1365;
        _1681 = _1365;
        _1682 = _1365;
        _1683 = _1365;
        _1684 = _1365;
        _1685 = 0.0;
        _1686 = 0.0;
        _1687 = 0.0;
    }
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1377)) + _1377;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1378)) + _1378;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1379)) + _1379;
    float _1720 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1697));
    float _1741 = _1003 * 0.5;
    float _1742 = _1004 * 0.5;
    float _1743 = _1005 * 0.5;
    float _1744 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1747 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1750 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1757 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1364, _1368, _1371, _1374));
        float _1761 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1366, _1369, _1372, _1375));
        float _1765 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1772 = dot(vec4(cbModelParam._m0[39u]), vec4(_1741, _1742, _1743, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1786 = dot(vec4(cbModelParam._m0[40u]), vec4(_1741, _1742, _1743, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1799 = (_1795 * cbModelParam._m0[1u].x) + (_1784 * (1.0 - cbModelParam._m0[1u].x));
    float _1809 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _900);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1809 : min(cbModelParam._m0[25u].z, _1809));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1857 = fma(_1064, cbModelParam._m0[13u].z, fma(_1060, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1056)) + cbModelParam._m0[13u].w;
        float _1861 = fma(_1064, cbModelParam._m0[14u].z, fma(_1060, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1056)) + cbModelParam._m0[14u].w;
        float _1865 = fma(_1064, cbModelParam._m0[15u].z, fma(_1060, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1056)) + cbModelParam._m0[15u].w;
        float _1868 = fma(_1005, cbModelParam._m0[13u].z, fma(_1004, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1003));
        float _1871 = fma(_1005, cbModelParam._m0[14u].z, fma(_1004, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1003));
        float _1874 = fma(_1005, cbModelParam._m0[15u].z, fma(_1004, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1003));
        float _1902;
        if (_1868 > 0.0)
        {
            _1902 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1902 = frontier_phi_38_36_ladder;
        }
        float _2271;
        if (_1871 > 0.0)
        {
            _2271 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2271 = frontier_phi_47_43_ladder;
        }
        float _2605;
        if (_1874 > 0.0)
        {
            _2605 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2605 = frontier_phi_61_54_ladder;
        }
        float _2607 = isnan(_2271) ? _1902 : (isnan(_1902) ? _2271 : min(_1902, _2271));
        float _2608 = isnan(_2605) ? _2607 : (isnan(_2607) ? _2605 : min(_2607, _2605));
        float _2612 = (_2608 * _1868) + _1857;
        float _2613 = (_2608 * _1871) + _1861;
        float _2614 = (_2608 * _1874) + _1865;
        float _2615 = _2608 * 9.9999997473787516355514526367188e-05;
        float _2616 = (-1.0) - _2615;
        float _2618 = _2615 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2614 > _2618) || ((_2614 < _2616) || ((_2613 > _2618) || ((_2613 < _2616) || ((_2612 < _2616) || (_2612 > _2618))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2740 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2614, cbModelParam._m0[9u].z, fma(_2613, cbModelParam._m0[9u].y, _2612 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2614, cbModelParam._m0[10u].z, fma(_2613, cbModelParam._m0[10u].y, _2612 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2614, cbModelParam._m0[11u].z, fma(_2613, cbModelParam._m0[11u].y, _2612 * cbModelParam._m0[11u].x))), _1810);
            frontier_phi_37_61_ladder = _2740.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2740.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2740.x * cbModelParam._m0[1u].y;
        }
        _1890 = frontier_phi_37_61_ladder_2;
        _1892 = frontier_phi_37_61_ladder_1;
        _1894 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1003, _1004, _1005), _1810);
        _1890 = _1878.x * cbModelParam._m0[1u].y;
        _1892 = _1878.y * cbModelParam._m0[1u].y;
        _1894 = _1878.z * cbModelParam._m0[1u].y;
    }
    float _1898 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _900);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1898 : min(cbModelParam._m0[25u].w, _1898));
    float _1987;
    float _1989;
    float _1991;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1951 = fma(_1064, cbModelParam._m0[21u].z, fma(_1060, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1056)) + cbModelParam._m0[21u].w;
        float _1955 = fma(_1064, cbModelParam._m0[22u].z, fma(_1060, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1056)) + cbModelParam._m0[22u].w;
        float _1959 = fma(_1064, cbModelParam._m0[23u].z, fma(_1060, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1056)) + cbModelParam._m0[23u].w;
        float _1962 = fma(_1005, cbModelParam._m0[21u].z, fma(_1004, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1003));
        float _1965 = fma(_1005, cbModelParam._m0[22u].z, fma(_1004, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1003));
        float _1968 = fma(_1005, cbModelParam._m0[23u].z, fma(_1004, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1003));
        float _2276;
        if (_1962 > 0.0)
        {
            _2276 = abs((1.0 - _1951) / _1962);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1951 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2276 = frontier_phi_49_45_ladder;
        }
        float _2631;
        if (_1965 > 0.0)
        {
            _2631 = abs((1.0 - _1955) / _1965);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1955 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2631 = frontier_phi_63_56_ladder;
        }
        float _2800;
        if (_1968 > 0.0)
        {
            _2800 = abs((1.0 - _1959) / _1968);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1959 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2800 = frontier_phi_77_72_ladder;
        }
        float _2802 = isnan(_2631) ? _2276 : (isnan(_2276) ? _2631 : min(_2276, _2631));
        float _2803 = isnan(_2800) ? _2802 : (isnan(_2802) ? _2800 : min(_2802, _2800));
        float _2807 = (_2803 * _1962) + _1951;
        float _2808 = (_2803 * _1965) + _1955;
        float _2809 = (_2803 * _1968) + _1959;
        float _2810 = _2803 * 9.9999997473787516355514526367188e-05;
        float _2811 = (-1.0) - _2810;
        float _2813 = _2810 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2809 > _2813) || ((_2809 < _2811) || ((_2808 > _2813) || ((_2808 < _2811) || ((_2807 < _2811) || (_2807 > _2813))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3042 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2809, cbModelParam._m0[17u].z, fma(_2808, cbModelParam._m0[17u].y, _2807 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2809, cbModelParam._m0[18u].z, fma(_2808, cbModelParam._m0[18u].y, _2807 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2809, cbModelParam._m0[19u].z, fma(_2808, cbModelParam._m0[19u].y, _2807 * cbModelParam._m0[19u].x))), _1899);
            frontier_phi_46_77_ladder = _3042.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _3042.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _3042.x * cbModelParam._m0[1u].z;
        }
        _1987 = frontier_phi_46_77_ladder_2;
        _1989 = frontier_phi_46_77_ladder_1;
        _1991 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1003, _1004, _1005), _1899);
        _1987 = _1971.x * cbModelParam._m0[1u].z;
        _1989 = _1971.y * cbModelParam._m0[1u].z;
        _1991 = _1971.z * cbModelParam._m0[1u].z;
    }
    float _2003 = ((((1.0 - _1024) * ((_1011 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1024 * _1011)) * _995;
    float _2004 = _2003 * ((cbModelParam._m0[1u].w * (_1987 - _1890)) + _1890);
    float _2005 = _2003 * ((cbModelParam._m0[1u].w * (_1989 - _1892)) + _1892);
    float _2006 = _2003 * ((cbModelParam._m0[1u].w * (_1991 - _1894)) + _1894);
    float _2009 = fma(_2006, cbSceneParam._m0[89u].z, fma(_2005, cbSceneParam._m0[89u].y, _2004 * cbSceneParam._m0[89u].x));
    float _2012 = fma(_2006, cbSceneParam._m0[90u].z, fma(_2005, cbSceneParam._m0[90u].y, _2004 * cbSceneParam._m0[90u].x));
    float _2015 = fma(_2006, cbSceneParam._m0[91u].z, fma(_2005, cbSceneParam._m0[91u].y, _2004 * cbSceneParam._m0[91u].x));
    vec4 _2023 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_932, _933));
    float _2025 = _2023.w;
    float _2037 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2025);
    float _2038 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2025);
    float _2039 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2025);
    uvec4 _2043 = floatBitsToUint(cbInstanceData._m0[_970 + 5u]);
    uint _2045 = _2043.x * 14u;
    uint _2046 = _2045 + 13u;
    float _2051 = _995 + (-1.0);
    float _2054 = (cbLight._m0[_2046].x * _2051) + 1.0;
    float _2055 = (cbLight._m0[_2046].y * _2051) + 1.0;
    uint _2056 = _2045 + 5u;
    float _2062 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2066 = _2045 + 4u;
    float _2075 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
    uint _2079 = _2045 | 1u;
    float _2090 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_897, _898, _899));
    float _2093 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_897, _898, _899));
    float _4021 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _4032 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2098 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 0.3183098733425140380859375;
    float _2100 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _2107 = ((cbLight._m0[_2056].x * _2062) * _2100) + (((cbLight._m0[_2066].x * _2037) * _2075) * _2098);
    float _2108 = ((_2062 * cbLight._m0[_2056].y) * _2100) + (((cbLight._m0[_2066].y * _2038) * _2075) * _2098);
    float _2109 = ((_2062 * cbLight._m0[_2056].z) * _2100) + (((cbLight._m0[_2066].z * _2039) * _2075) * _2098);
    uint _2111 = _2045 + 8u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _900) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_2045].x + _924;
    float _2127 = cbLight._m0[_2045].y + _925;
    float _2128 = cbLight._m0[_2045].z + _926;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2045].xyz));
    float _4043 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _2140 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _2141 = dot(vec3(_897, _898, _899), vec3(_2133, _2134, _2135));
    float _4065 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _2145 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2133, _2134, _2135));
    float _4076 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2149 = _2125 * _2125;
    float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
    float _2164 = (exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2165 = 1.0 - _2125;
    float _2176 = (0.5 / (((_2140 * ((_2139 * _2165) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2165) + _2125) * _2139))) * _2139;
    float _4087 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2178 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
    uint _2192 = _2045 + 9u;
    float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _900) * 0.949999988079071044921875);
    float _2204 = _2203 * _2203;
    float _2205 = cbLight._m0[_2079].x + _924;
    float _2206 = cbLight._m0[_2079].y + _925;
    float _2207 = cbLight._m0[_2079].z + _926;
    float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
    float _2212 = _2211 * _2205;
    float _2213 = _2211 * _2206;
    float _2214 = _2211 * _2207;
    float _2215 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2079].xyz));
    float _4098 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _2219 = dot(vec3(_897, _898, _899), vec3(_2212, _2213, _2214));
    float _4109 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _2223 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2212, _2213, _2214));
    float _4120 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2227 = _2204 * _2204;
    float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
    float _2240 = (exp2(log2(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2241 = 1.0 - _2204;
    float _2251 = (0.5 / (((_2140 * ((_2218 * _2241) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2241) + _2204) * _2218))) * _2218;
    float _4131 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2253 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
    float _2263 = (((_2240 * cbLight._m0[_2192].x) * _2253) * _2062) + ((((cbLight._m0[_2111].x * _2037) * _2164) * _2178) * _2075);
    float _2264 = (((_2240 * cbLight._m0[_2192].y) * _2253) * _2062) + ((((cbLight._m0[_2111].y * _2038) * _2164) * _2178) * _2075);
    float _2265 = (((_2240 * cbLight._m0[_2192].z) * _2253) * _2062) + ((((cbLight._m0[_2111].z * _2039) * _2164) * _2178) * _2075);
    float _2380;
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    float _2390;
    if (_2043.y == 0u)
    {
        float _2320 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2321 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2320;
        float _2322 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2320;
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2320;
        uvec4 _2335 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2336 = _2335.x;
        uint _2347 = uint((float(_2335.y) * floor(float(uint(cbSceneParam._m0[85u].y * _933) / _2336))) + floor(float(uint(cbSceneParam._m0[85u].x * _932) / _2336)));
        float _2357 = (log2(_2323 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2358 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        uint _2361 = uint(isnan(14.0) ? _2358 : (isnan(_2358) ? 14.0 : min(_2358, 14.0)));
        uvec4 _2366 = texelFetch(g_lightClusterGridBuffer, int(((_2361 << 2u) + (_2347 << 6u)) >> 2u));
        uint _2367 = _2366.x;
        uint _2368 = _2335.z;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        if (((((1u << ((_2368 >> 4u) & 15u)) + 4294967295u) & _2367) == 0u) || ((_2368 & 240u) == 0u))
        {
            _2484 = 0.0;
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
        }
        else
        {
            float _2485;
            float _2487;
            float _2489;
            float _2491;
            float _2493;
            float _2495;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            uint _2674 = 0u;
            uint _2683;
            bool _2684;
            for (;;)
            {
                _2683 = texelFetch(g_lightClassification, int((((_2361 << 5u) + (_2347 << 9u)) + (_2674 << 2u)) >> 2u)).x;
                _2684 = _2683 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2684)
                {
                    frontier_phi_74_pred = _2671;
                    frontier_phi_74_pred_1 = _2670;
                    frontier_phi_74_pred_2 = _2669;
                    frontier_phi_74_pred_3 = _2668;
                    frontier_phi_74_pred_4 = _2672;
                    frontier_phi_74_pred_5 = _2673;
                }
                else
                {
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    uint _2849;
                    _2843 = _2668;
                    _2844 = _2669;
                    _2845 = _2670;
                    _2846 = _2671;
                    _2847 = _2672;
                    _2848 = _2673;
                    _2849 = _2683;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    for (;;)
                    {
                        uint _2853 = uint(findLSB(_2849)) + (_2674 << 5u);
                        uint _2850 = (_2849 + 4294967295u) & _2849;
                        uint _2855 = _2853 * 48u;
                        vec4 _2869 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 3u)).x));
                        uint _2875 = (_2853 * 48u) + 4u;
                        vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 3u)).x));
                        uint _2894 = (_2853 * 48u) + 8u;
                        vec3 _2905 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x));
                        float _2909 = _2869.x - _2321;
                        float _2910 = _2869.y - _2322;
                        float _2911 = _2869.z - _2323;
                        float _2912 = dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911));
                        float _2915 = inversesqrt(_2912);
                        float _2916 = _2915 * _2909;
                        float _2917 = _2915 * _2910;
                        float _2918 = _2915 * _2911;
                        float _2919 = dot(vec3(_951, _954, _957), vec3(_2916, _2917, _2918));
                        float _2924 = 1.0 - (_2912 * _2869.w);
                        float _4152 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2925 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2926 = sqrt(_2912) * _2888.w;
                        float _2929 = 1.39999997615814208984375 / (_2926 + 1.39999997615814208984375);
                        float _2930 = _2929 * _2929;
                        float _2933 = ((1.0 - _2930) * _2919) + _2930;
                        float _2936 = _2926 * _2926;
                        float _2940 = ((isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0))) * _2925) / ((_2936 * 0.699999988079071044921875) + 1.0);
                        float _2944 = (-0.0) - _2321;
                        float _2945 = (-0.0) - _2322;
                        float _2946 = (-0.0) - _2323;
                        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
                        float _2951 = _2950 * _2944;
                        float _2952 = _2950 * _2945;
                        float _2953 = _2950 * _2946;
                        float _2961 = exp2(log2(1.0 / ((_2936 * 3.5) + 5.0)) * 0.25);
                        float _2962 = 1.0 - _1011;
                        float _2969 = sqrt(1.0 - ((1.0 - (_2962 * _2962)) * (1.0 - (_2961 * _2961))));
                        float _2970 = _2969 * _2969;
                        float _2971 = _2970 * _2970;
                        float _2972 = _2951 + _2916;
                        float _2973 = _2952 + _2917;
                        float _2974 = _2953 + _2918;
                        float _2978 = inversesqrt(dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974)));
                        float _2982 = dot(vec3(_951, _954, _957), vec3(_2951, _2952, _2953));
                        float _4168 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2985 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2986 = dot(vec3(_951, _954, _957), vec3(_2978 * _2972, _2978 * _2973, _2978 * _2974));
                        float _4179 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2989 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                        float _2993 = ((_2989 * _2989) * (_2971 + (-1.0))) + 1.0;
                        float _2994 = _2929 * _2970;
                        float _2995 = _2994 * _2994;
                        float _2998 = ((1.0 - _2995) * _2919) + _2995;
                        float _4190 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _2999 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _3000 = 1.0 - _2970;
                        float _3010 = (0.5 / (((_2999 * ((_2985 * _3000) + _2970)) + 9.9999999392252902907785028219223e-09) + (((_2999 * _3000) + _2970) * _2985))) * _2999;
                        float _4201 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3021 = (((_2971 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_2993 * _2993) * ((_2936 * 2.1991131305694580078125) + 3.141590118408203125))) * _2925;
                        _2752 = (_2940 * _2888.x) + _2846;
                        _2753 = (_2940 * _2888.y) + _2847;
                        _2754 = (_2940 * _2888.z) + _2848;
                        _2749 = (_3021 * _2905.x) + _2843;
                        _2750 = (_3021 * _2905.y) + _2844;
                        _2751 = (_3021 * _2905.z) + _2845;
                        if (_2850 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2843 = _2749;
                            _2844 = _2750;
                            _2845 = _2751;
                            _2846 = _2752;
                            _2847 = _2753;
                            _2848 = _2754;
                            _2849 = _2850;
                        }
                    }
                    frontier_phi_74_pred = _2752;
                    frontier_phi_74_pred_1 = _2751;
                    frontier_phi_74_pred_2 = _2750;
                    frontier_phi_74_pred_3 = _2749;
                    frontier_phi_74_pred_4 = _2753;
                    frontier_phi_74_pred_5 = _2754;
                }
                _2491 = frontier_phi_74_pred;
                _2489 = frontier_phi_74_pred_1;
                _2487 = frontier_phi_74_pred_2;
                _2485 = frontier_phi_74_pred_3;
                _2493 = frontier_phi_74_pred_4;
                _2495 = frontier_phi_74_pred_5;
                uint _2675 = _2674 + 1u;
                if (_2675 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2668 = _2485;
                    _2669 = _2487;
                    _2670 = _2489;
                    _2671 = _2491;
                    _2672 = _2493;
                    _2673 = _2495;
                    _2674 = _2675;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2484 = _2485;
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
        }
        uvec4 _2498 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2499 = _2498.z;
        uint _2501 = (_2499 >> 8u) & 15u;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        if (((4294967295u << _2501) & _2367) == 0u)
        {
            _2636 = _2484;
            _2638 = _2486;
            _2640 = _2488;
            _2642 = _2490;
            _2644 = _2492;
            _2646 = _2494;
        }
        else
        {
            float _2661 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
            float _2662 = _2661 * _2321;
            float _2663 = _2661 * _2322;
            float _2664 = _2661 * _2323;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2501 < ((_2499 >> 12u) & 15u))
            {
                float _2637;
                float _2639;
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2826 = _2484;
                float _2827 = _2486;
                float _2828 = _2488;
                float _2829 = _2490;
                float _2830 = _2492;
                float _2831 = _2494;
                uint _2832 = _2501;
                uint _2841;
                bool _2842;
                for (;;)
                {
                    _2841 = texelFetch(g_lightClassification, int((((_2361 << 5u) + (_2347 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                    _2842 = _2841 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2842)
                    {
                        frontier_phi_83_pred = _2829;
                        frontier_phi_83_pred_1 = _2828;
                        frontier_phi_83_pred_2 = _2827;
                        frontier_phi_83_pred_3 = _2826;
                        frontier_phi_83_pred_4 = _2831;
                        frontier_phi_83_pred_5 = _2830;
                    }
                    else
                    {
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3060 = _2826;
                        float _3061 = _2827;
                        float _3062 = _2828;
                        float _3063 = _2829;
                        float _3064 = _2830;
                        float _3065 = _2831;
                        uint _3066 = _2841;
                        uint _3067;
                        vec4 _3092;
                        float _3093;
                        vec4 _3108;
                        vec3 _3120;
                        vec4 _3135;
                        vec4 _3150;
                        float _3196;
                        bool _3197;
                        for (;;)
                        {
                            uint _3077 = ((_2832 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3066));
                            _3067 = (_3066 + 4294967295u) & _3066;
                            uint _3079 = _3077 * 40u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3093 = _3092.w;
                            uint _3095 = (_3077 * 40u) + 4u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3110 = (_3077 * 40u) + 8u;
                            _3120 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x));
                            uint _3122 = (_3077 * 40u) + 16u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3137 = (_3077 * 40u) + 20u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3152 = (_3077 * 40u) + 24u;
                            vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3171 = (_3077 * 40u) + 28u;
                            vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            _3196 = fma(_2323, _3184.z, fma(_2322, _3184.y, _3184.x * _2321)) + _3184.w;
                            _3197 = !((fma(_2323, _3165.z, fma(_2322, _3165.y, _3165.x * _2321)) + _3165.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3197)
                            {
                                float _3224 = _3092.x - _2321;
                                float _3225 = _3092.y - _2322;
                                float _3226 = _3092.z - _2323;
                                float _3227 = dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226));
                                float _3230 = inversesqrt(_3227);
                                float _3231 = _3230 * _3224;
                                float _3232 = _3230 * _3225;
                                float _3233 = _3230 * _3226;
                                float _3237 = 1.0 - (_3227 / (_3093 * _3093));
                                float _4212 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3238 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3242 = sqrt(_3227) * _3108.w;
                                float _3244 = 1.39999997615814208984375 / (_3242 + 1.39999997615814208984375);
                                float _3245 = _3244 * _3244;
                                float _3248 = ((1.0 - _3245) * dot(vec3(_3231, _3232, _3233), vec3(_951, _954, _957))) + _3245;
                                float _3251 = _3242 * _3242;
                                float _3255 = (fma(_2323, _3135.z, fma(_2322, _3135.y, _3135.x * _2321)) + _3135.w) / _3196;
                                float _3256 = (fma(_2323, _3150.z, fma(_2322, _3150.y, _3150.x * _2321)) + _3150.w) / _3196;
                                float _3260 = 1.0 - dot(vec2(_3255, _3256), vec2(_3255, _3256));
                                float _4228 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3261 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3262 = _3261 * (((isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))) * _3238) / ((_3251 * 0.699999988079071044921875) + 1.0));
                                float _3274 = exp2(log2(1.0 / ((_3251 * 3.5) + 5.0)) * 0.25);
                                float _3275 = 1.0 - _1011;
                                float _3282 = sqrt(1.0 - ((1.0 - (_3275 * _3275)) * (1.0 - (_3274 * _3274))));
                                float _3283 = _3282 * _3282;
                                float _3284 = _3283 * _3283;
                                float _3285 = _3231 - _2662;
                                float _3286 = _3232 - _2663;
                                float _3287 = _3233 - _2664;
                                float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                                float _3295 = dot(vec3(_951, _954, _957), vec3((-0.0) - _2662, (-0.0) - _2663, (-0.0) - _2664));
                                float _4239 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3298 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3299 = dot(vec3(_951, _954, _957), vec3(_3291 * _3285, _3291 * _3286, _3291 * _3287));
                                float _4250 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3302 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3306 = ((_3302 * _3302) * (_3284 + (-1.0))) + 1.0;
                                float _3307 = _3244 * _3283;
                                float _3308 = _3307 * _3307;
                                float _3314 = ((1.0 - _3308) * dot(vec3(_951, _954, _957), vec3(_3231, _3232, _3233))) + _3308;
                                float _4261 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3316 = 1.0 - _3283;
                                float _3326 = (0.5 / (((_3315 * ((_3298 * _3316) + _3283)) + 9.9999999392252902907785028219223e-09) + (((_3315 * _3316) + _3283) * _3298))) * _3315;
                                float _4272 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3336 = (_3261 * _3238) * (((_3284 * 3.1415927410125732421875) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) / ((_3306 * _3306) * ((_3251 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3262 * _3108.x;
                                frontier_phi_89_pred_1 = _3336 * _3120.z;
                                frontier_phi_89_pred_2 = _3336 * _3120.y;
                                frontier_phi_89_pred_3 = _3336 * _3120.x;
                                frontier_phi_89_pred_4 = _3262 * _3108.z;
                                frontier_phi_89_pred_5 = _3262 * _3108.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3343 = frontier_phi_89_pred;
                            _3342 = frontier_phi_89_pred_1;
                            _3341 = frontier_phi_89_pred_2;
                            _3340 = frontier_phi_89_pred_3;
                            _3345 = frontier_phi_89_pred_4;
                            _3344 = frontier_phi_89_pred_5;
                            _3050 = _3343 + _3063;
                            _3051 = _3344 + _3064;
                            _3052 = _3345 + _3065;
                            _3047 = _3340 + _3060;
                            _3048 = _3341 + _3061;
                            _3049 = _3342 + _3062;
                            if (_3067 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3067;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3050;
                        frontier_phi_83_pred_1 = _3049;
                        frontier_phi_83_pred_2 = _3048;
                        frontier_phi_83_pred_3 = _3047;
                        frontier_phi_83_pred_4 = _3052;
                        frontier_phi_83_pred_5 = _3051;
                    }
                    _2643 = frontier_phi_83_pred;
                    _2641 = frontier_phi_83_pred_1;
                    _2639 = frontier_phi_83_pred_2;
                    _2637 = frontier_phi_83_pred_3;
                    _2647 = frontier_phi_83_pred_4;
                    _2645 = frontier_phi_83_pred_5;
                    uint _2833 = _2832 + 1u;
                    if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2826 = _2637;
                        _2827 = _2639;
                        _2828 = _2641;
                        _2829 = _2643;
                        _2830 = _2645;
                        _2831 = _2647;
                        _2832 = _2833;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2647;
                frontier_phi_65_66_ladder_1 = _2645;
                frontier_phi_65_66_ladder_2 = _2641;
                frontier_phi_65_66_ladder_3 = _2639;
                frontier_phi_65_66_ladder_4 = _2643;
                frontier_phi_65_66_ladder_5 = _2637;
            }
            else
            {
                frontier_phi_65_66_ladder = _2494;
                frontier_phi_65_66_ladder_1 = _2492;
                frontier_phi_65_66_ladder_2 = _2488;
                frontier_phi_65_66_ladder_3 = _2486;
                frontier_phi_65_66_ladder_4 = _2490;
                frontier_phi_65_66_ladder_5 = _2484;
            }
            _2636 = frontier_phi_65_66_ladder_5;
            _2638 = frontier_phi_65_66_ladder_3;
            _2640 = frontier_phi_65_66_ladder_2;
            _2642 = frontier_phi_65_66_ladder_4;
            _2644 = frontier_phi_65_66_ladder_1;
            _2646 = frontier_phi_65_66_ladder;
        }
        float _2651 = isnan(1.0) ? _995 : (isnan(_995) ? 1.0 : min(_995, 1.0));
        _2380 = (_2651 * _2642) + _2107;
        _2382 = (_2651 * _2644) + _2108;
        _2384 = (_2651 * _2646) + _2109;
        _2386 = ((_2636 * 0.039999999105930328369140625) * _2651) + _2263;
        _2388 = ((_2638 * 0.039999999105930328369140625) * _2651) + _2264;
        _2390 = ((_2640 * 0.039999999105930328369140625) * _2651) + _2265;
    }
    else
    {
        _2380 = _2107;
        _2382 = _2108;
        _2384 = _2109;
        _2386 = _2263;
        _2388 = _2264;
        _2390 = _2265;
    }
    uint _2396 = _971 + uint(cbMatDynParam._m0[0u].w);
    float _2402 = (cbSceneParam._m0[72u].y * ((_864 * ((_855 - _817) - (_855 * _828))) + _817)) * cbInstanceData._m0[_2396].x;
    float _2403 = (cbSceneParam._m0[72u].y * ((_864 * ((_856 - _818) - (_856 * _828))) + _818)) * cbInstanceData._m0[_2396].y;
    float _2404 = (((_864 * ((_857 - _819) - (_857 * _828))) + _819) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2396].z;
    float _4288 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4299 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4310 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _2421 = (((isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2380 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _995))) + ((_2386 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1799)) * cbPerFrame._m0[3u].x)) + _2402;
    float _2423 = (_2403 + ((_2388 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1799)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2382 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _995)));
    float _2425 = (_2404 + ((_2390 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1799)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2384 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _995)));
    float _4336 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2438 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    uint _2439 = _970 + 6u;
    float _2447 = _932 / cbSceneParam._m0[86u].x;
    float _2448 = _933 / cbSceneParam._m0[86u].y;
    vec4 _2462 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2447, _2448, (log2((isnan(cbSceneParam._m0[77u].w) ? _919 : (isnan(_919) ? cbSceneParam._m0[77u].w : min(_919, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2464 = _2462.x;
    float _2465 = _2462.y;
    float _2466 = _2462.z;
    float _2467 = _2462.w;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    if (_919 > cbSceneParam._m0[78u].w)
    {
        float _2509 = isnan(_919) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _919 : min(cbSceneParam._m0[80u].w, _919));
        float _2510 = _2509 / _919;
        float _2521 = _2510 * _282;
        float _2522 = _283 * _2510;
        float _2523 = (-0.0) - _2522;
        float _2524 = _2510 * _284;
        float _2526 = (cbSceneParam._m0[77u].w * _2523) / _2509;
        float _2527 = _2526 + cbSceneParam._m0[79u].w;
        float _2528 = cbSceneParam._m0[79u].w - _2522;
        float _2534 = sqrt(((_2521 * _2521) + (_2522 * _2522)) + (_2524 * _2524));
        float _2537 = (1.0 - (cbSceneParam._m0[77u].w / _2509)) * _2534;
        float _2543 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2545 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2762;
        if (abs((_2523 - _2526) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2762 = ((((_2527 > 0.0) ? exp2(_2543 * _2527) : (2.0 - exp2(_2545 * _2527))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2537;
        }
        else
        {
            float _2697 = 1.0 / cbSceneParam._m0[80u].x;
            float _2698 = isnan(_2528) ? _2527 : (isnan(_2527) ? _2528 : max(_2527, _2528));
            float _2699 = isnan(_2528) ? _2527 : (isnan(_2527) ? _2528 : min(_2527, _2528));
            float _2708 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : min(_2698, 0.0));
            float _2709 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : min(_2699, 0.0));
            _2762 = ((abs(_2534 / _2523) * cbSceneParam._m0[80u].y) * ((((_2708 - _2709) * 2.0) - ((exp2(_2543 * (isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0)))) - exp2(_2543 * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0))))) * _2697)) - ((exp2(_2545 * _2708) - exp2(_2545 * _2709)) * _2697))) + (_2537 * cbSceneParam._m0[80u].z);
        }
        vec4 _2764 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2447, _2448, 1.0), 0.0);
        float _2773 = exp2((_2762 * (-1.44269502162933349609375)) * (1.0 - _2764.w));
        float _2774 = log2(_2773);
        float _2790 = log2(_2467);
        _2547 = (exp2(_2790 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].x)) * _2764.x) / cbSceneParam._m0[78u].x)) + _2464;
        _2549 = (exp2(_2790 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].y)) * _2764.y) / cbSceneParam._m0[78u].y)) + _2465;
        _2551 = (exp2(_2790 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].z)) * _2764.z) / cbSceneParam._m0[78u].z)) + _2466;
        _2553 = _2773 * _2467;
    }
    else
    {
        _2547 = _2464;
        _2549 = _2465;
        _2551 = _2466;
        _2553 = _2467;
    }
    float _2564 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2565 = _2564 == 3.0;
    float _2566 = log2(_2553);
    float _2570 = exp2(_2566 * cbSceneParam._m0[78u].x);
    float _2571 = exp2(_2566 * cbSceneParam._m0[78u].y);
    float _2572 = exp2(_2566 * cbSceneParam._m0[78u].z);
    float _2573 = _2570 * (isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0)));
    float _2574 = _2571 * (isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0)));
    float _2575 = _2572 * (isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0)));
    float _2584 = (_2564 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2584 * (_2565 ? _2573 : (_2573 + (cbSceneParam._m0[72u].w * _2547)));
    SV_Target.y = _2584 * (_2565 ? _2574 : (_2574 + (cbSceneParam._m0[72u].w * _2549)));
    SV_Target.z = _2584 * (_2565 ? _2575 : (_2575 + (cbSceneParam._m0[72u].w * _2551)));
    SV_Target.w = cbInstanceData._m0[_2439].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2402) * _2438) * _2570) * _2584;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2403) * _2438) * _2571) * _2584;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2404) * _2438) * _2572) * _2584;
    SV_Target_1.w = cbInstanceData._m0[_2439].w;
}


