#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1363;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _296 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _299 = _296.x;
    vec4 _317 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _299) + cbMtdParam._m0[12u].x) * _317.x;
    float _336 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _299) + cbMtdParam._m0[12u].y) * _317.y;
    float _338 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _299) + cbMtdParam._m0[12u].z) * _317.z;
    vec4 _356 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _395 = cbMtdParam._m0[27u].w + _280;
    float _396 = cbMtdParam._m0[28u].x + _281;
    float _397 = cbMtdParam._m0[28u].y + _282;
    float _411 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_210, _211, _212));
    float _412 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_224, _225, _226));
    float _413 = (-0.0) - dot(vec3(_395, _396, _397), vec3((-0.0) - _217, (-0.0) - _218, (-0.0) - _219));
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _420 = _417 * _413;
    float _421 = (_417 * _411) + ((cbMtdParam._m0[25u].w * _299) * ((_356.x * 2.0) + (-1.0)));
    float _422 = (_417 * _412) + ((cbMtdParam._m0[26u].x * _299) * ((_356.y * 2.0) + (-1.0)));
    float _423 = _421 * cbMtdParam._m0[24u].x;
    float _424 = _422 * cbMtdParam._m0[23u].w;
    float _425 = fract(TEXCOORD.x);
    float _426 = fract(TEXCOORD.y);
    float _432;
    if (_423 > 0.0)
    {
        _432 = (1.0 - _425) / _423;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_423 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _425) / _423;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _432 = frontier_phi_3_2_ladder;
    }
    float _440;
    if (_424 > 0.0)
    {
        _440 = (1.0 - _426) / _424;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_424 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _426) / _424;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _440 = frontier_phi_7_6_ladder;
    }
    bool _442 = _420 > 0.0;
    float _444 = _442 ? (cbMtdParam._m0[17u].x / _420) : 5000.0;
    float _445 = isnan(_440) ? _432 : (isnan(_432) ? _440 : min(_432, _440));
    float _446 = isnan(_444) ? _445 : (isnan(_445) ? _444 : min(_445, _444));
    float _450 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _451 = _425 + (-0.5);
    float _454 = _426 + (-0.5);
    float _457 = ((_446 * _420) + _450) / _450;
    vec4 _482 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_451 + (_446 * _423)) / _457) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_454 + (_446 * _424)) / _457) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _495 = (_482.x * _299) * cbMtdParam._m0[9u].x;
    float _496 = (_482.y * _299) * cbMtdParam._m0[9u].y;
    float _497 = (_482.z * _299) * cbMtdParam._m0[9u].z;
    float _515 = _421 * cbMtdParam._m0[26u].z;
    float _516 = _422 * cbMtdParam._m0[26u].y;
    bool _517 = _515 > 0.0;
    float _522;
    if (_517)
    {
        _522 = (1.0 - _425) / _515;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_515 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _425) / _515;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _522 = frontier_phi_11_10_ladder;
    }
    bool _524 = _516 > 0.0;
    float _529;
    if (_524)
    {
        _529 = (1.0 - _426) / _516;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_516 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _426) / _516;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _529 = frontier_phi_15_14_ladder;
    }
    float _532 = _442 ? (cbMtdParam._m0[19u].z / _420) : 5000.0;
    float _533 = isnan(_529) ? _522 : (isnan(_522) ? _529 : min(_522, _529));
    float _534 = isnan(_532) ? _533 : (isnan(_533) ? _532 : min(_533, _532));
    float _538 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _542 = ((_534 * _420) + _538) / _538;
    float _547 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _549 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _565 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_451 + (_534 * _515)) / _542) + 0.5) + _547) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_454 + (_534 * _516)) / _542) + 0.5) + _549) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _580;
    if (_517)
    {
        _580 = (1.0 - _425) / _515;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_515 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _425) / _515;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _580 = frontier_phi_19_18_ladder;
    }
    float _586;
    if (_524)
    {
        _586 = (1.0 - _426) / _516;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_516 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _426) / _516;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _586 = frontier_phi_23_22_ladder;
    }
    float _588 = isnan(_586) ? _580 : (isnan(_580) ? _586 : min(_580, _586));
    float _589 = isnan(_532) ? _588 : (isnan(_588) ? _532 : min(_588, _532));
    float _596 = ((_589 * _420) + _538) / _538;
    vec4 _616 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_451 + (_589 * _515)) / _596) + 0.5) + _547) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_454 + (_589 * _516)) / _596) + 0.5) + _549) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _618 = _616.x;
    float _628 = (((((cbMtdParam._m0[10u].x * _299) * _565.x) - _495) * _299) * _618) + _495;
    float _629 = (((((cbMtdParam._m0[10u].y * _299) * _565.y) - _496) * _299) * _618) + _496;
    float _630 = (((((cbMtdParam._m0[10u].z * _299) * _565.z) - _497) * _299) * _618) + _497;
    vec4 _643 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _647 = _643.z;
    float _650 = (_643.x * 2.0) + (-1.0);
    float _651 = (_643.y * 2.0) + (-1.0);
    float _652 = dot(vec2(_650, _651), vec2(_650, _651));
    float _3506 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _657 = sqrt(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))));
    float _666 = (cbMtdParam._m0[19u].y * _628) * cbMtdParam._m0[16u].x;
    float _668 = (cbMtdParam._m0[19u].y * _629) * cbMtdParam._m0[16u].y;
    float _670 = (cbMtdParam._m0[19u].y * _630) * cbMtdParam._m0[16u].z;
    vec4 _694 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _699 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _705 = ((_694.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _707 = (-0.0) - (cbMtdParam._m0[21u].x * ((_694.x * 0.5) + (-0.25)));
    float _708 = fract(_699);
    float _710 = fract(_699 + 0.5);
    vec4 _737 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_708 * _707) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_705 * _708) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _739 = _737.x;
    float _745 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_710 * _707) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_705 * _710) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _739) * abs((_708 * 2.0) + (-1.0))) + _739;
    float _751 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _755 = fract(abs(_751));
    float _765 = sin(cbMtdParam._m0[21u].z);
    float _766 = cos(cbMtdParam._m0[21u].z);
    float _767 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _768 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _793 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_768, (-0.0) - _765, _766 * _767) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_768, _766, _767 * _765) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_751 >= ((-0.0) - _751)) ? _755 : ((-0.0) - _755)) * cbMtdParam._m0[18u].z) - _745)) + cbMtdParam._m0[18u].w;
    float _794 = ceil(_793);
    float _3517 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _795 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _815 = ((((cbMtdParam._m0[21u].w * _628) * cbMtdParam._m0[15u].x) - _666) * _795) + _666;
    float _816 = ((((cbMtdParam._m0[21u].w * _629) * cbMtdParam._m0[15u].y) - _668) * _795) + _668;
    float _817 = ((((cbMtdParam._m0[21u].w * _630) * cbMtdParam._m0[15u].z) - _670) * _795) + _670;
    float _821 = abs(cbMtdParam._m0[20u].w * _793);
    float _825 = (((_821 * cbMtdParam._m0[18u].y) - _745) * _821) + _745;
    float _3528 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _826 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    vec4 _838 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _853 = (cbMtdParam._m0[14u].x * _838.x) * cbMtdParam._m0[19u].x;
    float _854 = (cbMtdParam._m0[14u].y * _838.y) * cbMtdParam._m0[19u].x;
    float _855 = (cbMtdParam._m0[14u].z * _838.z) * cbMtdParam._m0[19u].x;
    float _862 = exp2(log2(_826) * cbMtdParam._m0[20u].x);
    float _884 = fma(_657, _217, fma(_651, _224, _650 * _210));
    float _887 = fma(_657, _218, fma(_651, _225, _650 * _211));
    float _890 = fma(_657, _219, fma(_651, _226, _650 * _212));
    float _894 = inversesqrt(dot(vec3(_884, _887, _890), vec3(_884, _887, _890)));
    float _895 = _894 * _884;
    float _896 = _894 * _887;
    float _897 = _894 * _890;
    float _3539 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _898 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3561 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3572 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _917 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _921 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _922 = _280 * _921;
    float _923 = _281 * _921;
    float _924 = _282 * _921;
    float _930 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _931 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _949 = fma(_897, cbSceneParam._m0[5u].z, fma(_896, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _895));
    float _952 = fma(_897, cbSceneParam._m0[6u].z, fma(_896, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _895));
    float _955 = fma(_897, cbSceneParam._m0[7u].z, fma(_896, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _895));
    uint _968 = uint(roundEven(NORMAL.w)) * 13u;
    uint _969 = _968 + 9u;
    uint _970 = _969 + uint(cbMatDynParam._m0[0u].w);
    float _976 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_970].x;
    float _977 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_970].y;
    float _978 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * cbInstanceData._m0[_970].z;
    float _3583 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    vec4 _990 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _930, cbSceneParam._m0[86u].y * _931));
    float _993 = _990.x * TEXCOORD_4;
    float _994 = dot(vec3(_895, _896, _897), vec3(_922, _923, _924));
    float _997 = _994 * 2.0;
    float _1001 = (_997 * _895) - _922;
    float _1002 = (_997 * _896) - _923;
    float _1003 = (_997 * _897) - _924;
    float _1007 = abs(dot(vec3(_922, _923, _924), vec3(_895, _896, _897)));
    float _3616 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1009 = sqrt(_898);
    float _1022 = exp2((_1009 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1009 * 3.0));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1362;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1089 = fma(_1062, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054));
        float _1093 = fma(_1062, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054));
        float _1097 = fma(_1062, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054));
        float _1120 = _1054 + _895;
        float _1121 = _1058 + _896;
        float _1122 = _1062 + _897;
        float _1132 = fma(_1122, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120)) - _1089;
        float _1133 = fma(_1122, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120)) - _1093;
        float _1134 = fma(_1122, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120)) - _1097;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1089 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1093 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[34u].z) + ((((((_1097 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1190 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1156.x + (-0.5));
        float _1192 = _1190 * (_1156.y + (-0.5));
        float _1193 = _1190 * (_1156.z + (-0.5));
        float _1200 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1163.x + (-0.5));
        float _1202 = _1200 * (_1163.y + (-0.5));
        float _1203 = _1200 * (_1163.z + (-0.5));
        float _1210 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1170.x + (-0.5));
        float _1212 = _1210 * (_1170.y + (-0.5));
        float _1213 = _1210 * (_1170.z + (-0.5));
        float _1220 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1177.x + (-0.5));
        float _1222 = _1220 * (_1177.y + (-0.5));
        float _1223 = _1220 * (_1177.z + (-0.5));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = _1191 * 0.5;
        float _1228 = _1201 * 0.5;
        float _1229 = _1211 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1244 = (dot(vec3(_895, _896, _897), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1254 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3664 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1256 + 1.0))) + _1261) * _1224;
        float _1271 = _1192 * 0.5;
        float _1272 = _1202 * 0.5;
        float _1273 = _1212 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_895, _896, _897), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3697 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1298 + 1.0))) + _1303) * _1225;
        float _1313 = _1193 * 0.5;
        float _1314 = _1203 * 0.5;
        float _1315 = _1213 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_895, _896, _897), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3730 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1340 + 1.0))) + _1345) * _1226;
        _1362 = _1193;
        _1364 = _1192;
        _1365 = _1191;
        _1366 = _1203;
        _1367 = _1202;
        _1368 = _1201;
        _1369 = _1213;
        _1370 = _1212;
        _1371 = _1211;
        _1372 = _1226;
        _1373 = _1225;
        _1374 = _1224;
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1363;
        _1364 = _1363;
        _1365 = _1363;
        _1366 = _1363;
        _1367 = _1363;
        _1368 = _1363;
        _1369 = _1363;
        _1370 = _1363;
        _1371 = _1363;
        _1372 = _1363;
        _1373 = _1363;
        _1374 = _1363;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1402 = fma(_1062, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1054));
        float _1406 = fma(_1062, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1054));
        float _1410 = fma(_1062, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1054));
        float _1433 = _1054 + _895;
        float _1434 = _1058 + _896;
        float _1435 = _1062 + _897;
        float _1445 = fma(_1435, cbModelParam._m0[30u].z, fma(_1434, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1433)) - _1402;
        float _1446 = fma(_1435, cbModelParam._m0[31u].z, fma(_1434, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1433)) - _1406;
        float _1447 = fma(_1435, cbModelParam._m0[32u].z, fma(_1434, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1433)) - _1410;
        float _1451 = inversesqrt(dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447)));
        float _1464 = ((_1451 * _1445) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1402 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1451 * _1446) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1406 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1466 = ((_1451 * _1447) / cbModelParam._m0[35u].z) + ((((((_1410 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        float _1501 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1468.x + (-0.5));
        float _1503 = _1501 * (_1468.y + (-0.5));
        float _1504 = _1501 * (_1468.z + (-0.5));
        float _1511 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1475.x + (-0.5));
        float _1513 = _1511 * (_1475.y + (-0.5));
        float _1514 = _1511 * (_1475.z + (-0.5));
        float _1521 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1482.x + (-0.5));
        float _1523 = _1521 * (_1482.y + (-0.5));
        float _1524 = _1521 * (_1482.z + (-0.5));
        float _1531 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1489.x + (-0.5));
        float _1533 = _1531 * (_1489.y + (-0.5));
        float _1534 = _1531 * (_1489.z + (-0.5));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = _1502 * 0.5;
        float _1539 = _1512 * 0.5;
        float _1540 = _1522 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_895, _896, _897), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _3793 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1565 + 1.0))) + _1570) * _1535;
        float _1580 = _1503 * 0.5;
        float _1581 = _1513 * 0.5;
        float _1582 = _1523 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_895, _896, _897), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _3826 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1607 + 1.0))) + _1612) * _1536;
        float _1622 = _1504 * 0.5;
        float _1623 = _1514 * 0.5;
        float _1624 = _1524 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_895, _896, _897), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _3859 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1649 + 1.0))) + _1654) * _1537;
        _1671 = _1504;
        _1672 = _1503;
        _1673 = _1502;
        _1674 = _1514;
        _1675 = _1513;
        _1676 = _1512;
        _1677 = _1524;
        _1678 = _1523;
        _1679 = _1522;
        _1680 = _1537;
        _1681 = _1536;
        _1682 = _1535;
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
    }
    else
    {
        _1671 = _1363;
        _1672 = _1363;
        _1673 = _1363;
        _1674 = _1363;
        _1675 = _1363;
        _1676 = _1363;
        _1677 = _1363;
        _1678 = _1363;
        _1679 = _1363;
        _1680 = _1363;
        _1681 = _1363;
        _1682 = _1363;
        _1683 = 0.0;
        _1684 = 0.0;
        _1685 = 0.0;
    }
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1375)) + _1375;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1376)) + _1376;
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1377)) + _1377;
    float _1718 = fma(_1697, cbSceneParam._m0[89u].z, fma(_1696, cbSceneParam._m0[89u].y, _1695 * cbSceneParam._m0[89u].x));
    float _1721 = fma(_1697, cbSceneParam._m0[90u].z, fma(_1696, cbSceneParam._m0[90u].y, _1695 * cbSceneParam._m0[90u].x));
    float _1724 = fma(_1697, cbSceneParam._m0[91u].z, fma(_1696, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1695));
    float _1739 = _1001 * 0.5;
    float _1740 = _1002 * 0.5;
    float _1741 = _1003 * 0.5;
    float _1742 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1745 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1748 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1782;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1755 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1362, _1366, _1369, _1372));
        float _1759 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1763 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1770 = dot(vec4(cbModelParam._m0[39u]), vec4(_1739, _1740, _1741, 1.0));
        _1782 = dot(vec3(isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1770) ? 0.0 : (isnan(0.0) ? _1770 : max(0.0, _1770))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1782 = 1.0;
    }
    float _1793;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1784 = dot(vec4(cbModelParam._m0[40u]), vec4(_1739, _1740, _1741, 1.0));
        _1793 = dot(vec3(isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1793 = 1.0;
    }
    float _1797 = (_1793 * cbModelParam._m0[1u].x) + (_1782 * (1.0 - cbModelParam._m0[1u].x));
    float _1807 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _898);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1807 : min(cbModelParam._m0[25u].z, _1807));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1855 = fma(_1062, cbModelParam._m0[13u].z, fma(_1058, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1054)) + cbModelParam._m0[13u].w;
        float _1859 = fma(_1062, cbModelParam._m0[14u].z, fma(_1058, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1054)) + cbModelParam._m0[14u].w;
        float _1863 = fma(_1062, cbModelParam._m0[15u].z, fma(_1058, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1054)) + cbModelParam._m0[15u].w;
        float _1866 = fma(_1003, cbModelParam._m0[13u].z, fma(_1002, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1001));
        float _1869 = fma(_1003, cbModelParam._m0[14u].z, fma(_1002, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1001));
        float _1872 = fma(_1003, cbModelParam._m0[15u].z, fma(_1002, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1001));
        float _1900;
        if (_1866 > 0.0)
        {
            _1900 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1900 = frontier_phi_38_36_ladder;
        }
        float _2245;
        if (_1869 > 0.0)
        {
            _2245 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2245 = frontier_phi_47_43_ladder;
        }
        float _2579;
        if (_1872 > 0.0)
        {
            _2579 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2579 = frontier_phi_61_54_ladder;
        }
        float _2581 = isnan(_2245) ? _1900 : (isnan(_1900) ? _2245 : min(_1900, _2245));
        float _2582 = isnan(_2579) ? _2581 : (isnan(_2581) ? _2579 : min(_2581, _2579));
        float _2586 = (_2582 * _1866) + _1855;
        float _2587 = (_2582 * _1869) + _1859;
        float _2588 = (_2582 * _1872) + _1863;
        float _2589 = _2582 * 9.9999997473787516355514526367188e-05;
        float _2590 = (-1.0) - _2589;
        float _2592 = _2589 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2588 > _2592) || ((_2588 < _2590) || ((_2587 > _2592) || ((_2587 < _2590) || ((_2586 < _2590) || (_2586 > _2592))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2714 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2588, cbModelParam._m0[9u].z, fma(_2587, cbModelParam._m0[9u].y, _2586 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2588, cbModelParam._m0[10u].z, fma(_2587, cbModelParam._m0[10u].y, _2586 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2588, cbModelParam._m0[11u].z, fma(_2587, cbModelParam._m0[11u].y, _2586 * cbModelParam._m0[11u].x))), _1808);
            frontier_phi_37_61_ladder = _2714.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2714.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2714.x * cbModelParam._m0[1u].y;
        }
        _1888 = frontier_phi_37_61_ladder_2;
        _1890 = frontier_phi_37_61_ladder_1;
        _1892 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1001, _1002, _1003), _1808);
        _1888 = _1876.x * cbModelParam._m0[1u].y;
        _1890 = _1876.y * cbModelParam._m0[1u].y;
        _1892 = _1876.z * cbModelParam._m0[1u].y;
    }
    float _1896 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _898);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1896 : min(cbModelParam._m0[25u].w, _1896));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1949 = fma(_1062, cbModelParam._m0[21u].z, fma(_1058, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1054)) + cbModelParam._m0[21u].w;
        float _1953 = fma(_1062, cbModelParam._m0[22u].z, fma(_1058, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1054)) + cbModelParam._m0[22u].w;
        float _1957 = fma(_1062, cbModelParam._m0[23u].z, fma(_1058, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1054)) + cbModelParam._m0[23u].w;
        float _1960 = fma(_1003, cbModelParam._m0[21u].z, fma(_1002, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1001));
        float _1963 = fma(_1003, cbModelParam._m0[22u].z, fma(_1002, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1001));
        float _1966 = fma(_1003, cbModelParam._m0[23u].z, fma(_1002, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1001));
        float _2250;
        if (_1960 > 0.0)
        {
            _2250 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2250 = frontier_phi_49_45_ladder;
        }
        float _2605;
        if (_1963 > 0.0)
        {
            _2605 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2605 = frontier_phi_63_56_ladder;
        }
        float _2774;
        if (_1966 > 0.0)
        {
            _2774 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2774 = frontier_phi_77_72_ladder;
        }
        float _2776 = isnan(_2605) ? _2250 : (isnan(_2250) ? _2605 : min(_2250, _2605));
        float _2777 = isnan(_2774) ? _2776 : (isnan(_2776) ? _2774 : min(_2776, _2774));
        float _2781 = (_2777 * _1960) + _1949;
        float _2782 = (_2777 * _1963) + _1953;
        float _2783 = (_2777 * _1966) + _1957;
        float _2784 = _2777 * 9.9999997473787516355514526367188e-05;
        float _2785 = (-1.0) - _2784;
        float _2787 = _2784 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2783 > _2787) || ((_2783 < _2785) || ((_2782 > _2787) || ((_2782 < _2785) || ((_2781 < _2785) || (_2781 > _2787))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3016 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2783, cbModelParam._m0[17u].z, fma(_2782, cbModelParam._m0[17u].y, _2781 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2783, cbModelParam._m0[18u].z, fma(_2782, cbModelParam._m0[18u].y, _2781 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2783, cbModelParam._m0[19u].z, fma(_2782, cbModelParam._m0[19u].y, _2781 * cbModelParam._m0[19u].x))), _1897);
            frontier_phi_46_77_ladder = _3016.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _3016.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _3016.x * cbModelParam._m0[1u].z;
        }
        _1985 = frontier_phi_46_77_ladder_2;
        _1987 = frontier_phi_46_77_ladder_1;
        _1989 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1001, _1002, _1003), _1897);
        _1985 = _1969.x * cbModelParam._m0[1u].z;
        _1987 = _1969.y * cbModelParam._m0[1u].z;
        _1989 = _1969.z * cbModelParam._m0[1u].z;
    }
    float _2001 = ((((1.0 - _1022) * ((_1009 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1022 * _1009)) * _993;
    float _2002 = _2001 * ((cbModelParam._m0[1u].w * (_1985 - _1888)) + _1888);
    float _2003 = _2001 * ((cbModelParam._m0[1u].w * (_1987 - _1890)) + _1890);
    float _2004 = _2001 * ((cbModelParam._m0[1u].w * (_1989 - _1892)) + _1892);
    float _2007 = fma(_2004, cbSceneParam._m0[89u].z, fma(_2003, cbSceneParam._m0[89u].y, _2002 * cbSceneParam._m0[89u].x));
    float _2010 = fma(_2004, cbSceneParam._m0[90u].z, fma(_2003, cbSceneParam._m0[90u].y, _2002 * cbSceneParam._m0[90u].x));
    float _2013 = fma(_2004, cbSceneParam._m0[91u].z, fma(_2003, cbSceneParam._m0[91u].y, _2002 * cbSceneParam._m0[91u].x));
    uvec4 _2023 = floatBitsToUint(cbInstanceData._m0[_968 + 5u]);
    uint _2025 = _2023.x * 14u;
    uint _2026 = _2025 + 13u;
    float _2031 = _993 + (-1.0);
    float _2034 = (cbLight._m0[_2026].x * _2031) + 1.0;
    float _2035 = (cbLight._m0[_2026].y * _2031) + 1.0;
    uint _2036 = _2025 + 5u;
    float _2042 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
    uint _2046 = _2025 + 4u;
    float _2052 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2056 = _2025 | 1u;
    float _2067 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_895, _896, _897));
    float _2070 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_895, _896, _897));
    float _3995 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _4006 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2075 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.3183098733425140380859375;
    float _2077 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.3183098733425140380859375;
    float _2084 = ((cbLight._m0[_2036].x * _2042) * _2077) + ((cbLight._m0[_2046].x * _2052) * _2075);
    float _2085 = ((_2042 * cbLight._m0[_2036].y) * _2077) + ((_2052 * cbLight._m0[_2046].y) * _2075);
    float _2086 = ((_2042 * cbLight._m0[_2036].z) * _2077) + ((_2052 * cbLight._m0[_2046].z) * _2075);
    uint _2088 = _2025 + 8u;
    float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _898) * 0.949999988079071044921875);
    float _2102 = _2101 * _2101;
    float _2103 = cbLight._m0[_2025].x + _922;
    float _2104 = cbLight._m0[_2025].y + _923;
    float _2105 = cbLight._m0[_2025].z + _924;
    float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
    float _2110 = _2109 * _2103;
    float _2111 = _2109 * _2104;
    float _2112 = _2109 * _2105;
    float _2113 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2025].xyz));
    float _4017 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _4028 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _2117 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _2118 = dot(vec3(_895, _896, _897), vec3(_2110, _2111, _2112));
    float _4039 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _2122 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2110, _2111, _2112));
    float _4050 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2126 = _2102 * _2102;
    float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
    float _2141 = (exp2(log2(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2142 = 1.0 - _2102;
    float _2153 = (0.5 / (((_2117 * ((_2116 * _2142) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_2117 * _2142) + _2102) * _2116))) * _2116;
    float _4061 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2155 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
    uint _2166 = _2025 + 9u;
    float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _898) * 0.949999988079071044921875);
    float _2178 = _2177 * _2177;
    float _2179 = cbLight._m0[_2056].x + _922;
    float _2180 = cbLight._m0[_2056].y + _923;
    float _2181 = cbLight._m0[_2056].z + _924;
    float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
    float _2186 = _2185 * _2179;
    float _2187 = _2185 * _2180;
    float _2188 = _2185 * _2181;
    float _2189 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2056].xyz));
    float _4072 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _2193 = dot(vec3(_895, _896, _897), vec3(_2186, _2187, _2188));
    float _4083 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2186, _2187, _2188));
    float _4094 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2178 * _2178;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2214 = (exp2(log2(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2215 = 1.0 - _2178;
    float _2225 = (0.5 / (((_2117 * ((_2192 * _2215) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_2117 * _2215) + _2178) * _2192))) * _2192;
    float _4105 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2227 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    float _2237 = (((_2214 * cbLight._m0[_2166].x) * _2227) * _2042) + (((_2141 * cbLight._m0[_2088].x) * _2155) * _2052);
    float _2238 = (((_2214 * cbLight._m0[_2166].y) * _2227) * _2042) + (((_2141 * cbLight._m0[_2088].y) * _2155) * _2052);
    float _2239 = (((_2214 * cbLight._m0[_2166].z) * _2227) * _2042) + (((_2141 * cbLight._m0[_2088].z) * _2155) * _2052);
    float _2354;
    float _2356;
    float _2358;
    float _2360;
    float _2362;
    float _2364;
    if (_2023.y == 0u)
    {
        float _2294 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2295 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2294;
        float _2296 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2294;
        float _2297 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2294;
        uvec4 _2309 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2310 = _2309.x;
        uint _2321 = uint((float(_2309.y) * floor(float(uint(cbSceneParam._m0[85u].y * _931) / _2310))) + floor(float(uint(cbSceneParam._m0[85u].x * _930) / _2310)));
        float _2331 = (log2(_2297 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2332 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        uint _2335 = uint(isnan(14.0) ? _2332 : (isnan(_2332) ? 14.0 : min(_2332, 14.0)));
        uvec4 _2340 = texelFetch(g_lightClusterGridBuffer, int(((_2335 << 2u) + (_2321 << 6u)) >> 2u));
        uint _2341 = _2340.x;
        uint _2342 = _2309.z;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        if (((((1u << ((_2342 >> 4u) & 15u)) + 4294967295u) & _2341) == 0u) || ((_2342 & 240u) == 0u))
        {
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
        }
        else
        {
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2642 = 0.0;
            float _2643 = 0.0;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            float _2647 = 0.0;
            uint _2648 = 0u;
            uint _2657;
            bool _2658;
            for (;;)
            {
                _2657 = texelFetch(g_lightClassification, int((((_2335 << 5u) + (_2321 << 9u)) + (_2648 << 2u)) >> 2u)).x;
                _2658 = _2657 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2658)
                {
                    frontier_phi_74_pred = _2645;
                    frontier_phi_74_pred_1 = _2644;
                    frontier_phi_74_pred_2 = _2643;
                    frontier_phi_74_pred_3 = _2642;
                    frontier_phi_74_pred_4 = _2646;
                    frontier_phi_74_pred_5 = _2647;
                }
                else
                {
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    uint _2823;
                    _2817 = _2642;
                    _2818 = _2643;
                    _2819 = _2644;
                    _2820 = _2645;
                    _2821 = _2646;
                    _2822 = _2647;
                    _2823 = _2657;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    for (;;)
                    {
                        uint _2827 = uint(findLSB(_2823)) + (_2648 << 5u);
                        uint _2824 = (_2823 + 4294967295u) & _2823;
                        uint _2829 = _2827 * 48u;
                        vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 3u)).x));
                        uint _2849 = (_2827 * 48u) + 4u;
                        vec4 _2862 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2868 = (_2827 * 48u) + 8u;
                        vec3 _2879 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2868)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 2u)).x));
                        float _2883 = _2843.x - _2295;
                        float _2884 = _2843.y - _2296;
                        float _2885 = _2843.z - _2297;
                        float _2886 = dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885));
                        float _2889 = inversesqrt(_2886);
                        float _2890 = _2889 * _2883;
                        float _2891 = _2889 * _2884;
                        float _2892 = _2889 * _2885;
                        float _2893 = dot(vec3(_949, _952, _955), vec3(_2890, _2891, _2892));
                        float _2898 = 1.0 - (_2886 * _2843.w);
                        float _4126 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2899 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2900 = sqrt(_2886) * _2862.w;
                        float _2903 = 1.39999997615814208984375 / (_2900 + 1.39999997615814208984375);
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2893) + _2904;
                        float _2910 = _2900 * _2900;
                        float _2914 = ((isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0))) * _2899) / ((_2910 * 0.699999988079071044921875) + 1.0);
                        float _2918 = (-0.0) - _2295;
                        float _2919 = (-0.0) - _2296;
                        float _2920 = (-0.0) - _2297;
                        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
                        float _2925 = _2924 * _2918;
                        float _2926 = _2924 * _2919;
                        float _2927 = _2924 * _2920;
                        float _2935 = exp2(log2(1.0 / ((_2910 * 3.5) + 5.0)) * 0.25);
                        float _2936 = 1.0 - _1009;
                        float _2943 = sqrt(1.0 - ((1.0 - (_2936 * _2936)) * (1.0 - (_2935 * _2935))));
                        float _2944 = _2943 * _2943;
                        float _2945 = _2944 * _2944;
                        float _2946 = _2925 + _2890;
                        float _2947 = _2926 + _2891;
                        float _2948 = _2927 + _2892;
                        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
                        float _2956 = dot(vec3(_949, _952, _955), vec3(_2925, _2926, _2927));
                        float _4142 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2959 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                        float _2960 = dot(vec3(_949, _952, _955), vec3(_2952 * _2946, _2952 * _2947, _2952 * _2948));
                        float _4153 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2963 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                        float _2967 = ((_2963 * _2963) * (_2945 + (-1.0))) + 1.0;
                        float _2968 = _2903 * _2944;
                        float _2969 = _2968 * _2968;
                        float _2972 = ((1.0 - _2969) * _2893) + _2969;
                        float _4164 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                        float _2974 = 1.0 - _2944;
                        float _2984 = (0.5 / (((_2973 * ((_2959 * _2974) + _2944)) + 9.9999999392252902907785028219223e-09) + (((_2973 * _2974) + _2944) * _2959))) * _2973;
                        float _4175 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2995 = (((_2945 * 3.1415927410125732421875) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) / ((_2967 * _2967) * ((_2910 * 2.1991131305694580078125) + 3.141590118408203125))) * _2899;
                        _2726 = (_2914 * _2862.x) + _2820;
                        _2727 = (_2914 * _2862.y) + _2821;
                        _2728 = (_2914 * _2862.z) + _2822;
                        _2723 = (_2995 * _2879.x) + _2817;
                        _2724 = (_2995 * _2879.y) + _2818;
                        _2725 = (_2995 * _2879.z) + _2819;
                        if (_2824 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2817 = _2723;
                            _2818 = _2724;
                            _2819 = _2725;
                            _2820 = _2726;
                            _2821 = _2727;
                            _2822 = _2728;
                            _2823 = _2824;
                        }
                    }
                    frontier_phi_74_pred = _2726;
                    frontier_phi_74_pred_1 = _2725;
                    frontier_phi_74_pred_2 = _2724;
                    frontier_phi_74_pred_3 = _2723;
                    frontier_phi_74_pred_4 = _2727;
                    frontier_phi_74_pred_5 = _2728;
                }
                _2465 = frontier_phi_74_pred;
                _2463 = frontier_phi_74_pred_1;
                _2461 = frontier_phi_74_pred_2;
                _2459 = frontier_phi_74_pred_3;
                _2467 = frontier_phi_74_pred_4;
                _2469 = frontier_phi_74_pred_5;
                uint _2649 = _2648 + 1u;
                if (_2649 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2642 = _2459;
                    _2643 = _2461;
                    _2644 = _2463;
                    _2645 = _2465;
                    _2646 = _2467;
                    _2647 = _2469;
                    _2648 = _2649;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
        }
        uvec4 _2472 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2473 = _2472.z;
        uint _2475 = (_2473 >> 8u) & 15u;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        if (((4294967295u << _2475) & _2341) == 0u)
        {
            _2610 = _2458;
            _2612 = _2460;
            _2614 = _2462;
            _2616 = _2464;
            _2618 = _2466;
            _2620 = _2468;
        }
        else
        {
            float _2635 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
            float _2636 = _2635 * _2295;
            float _2637 = _2635 * _2296;
            float _2638 = _2635 * _2297;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2475 < ((_2473 >> 12u) & 15u))
            {
                float _2611;
                float _2613;
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2800 = _2458;
                float _2801 = _2460;
                float _2802 = _2462;
                float _2803 = _2464;
                float _2804 = _2466;
                float _2805 = _2468;
                uint _2806 = _2475;
                uint _2815;
                bool _2816;
                for (;;)
                {
                    _2815 = texelFetch(g_lightClassification, int((((_2335 << 5u) + (_2321 << 9u)) + (_2806 << 2u)) >> 2u)).x;
                    _2816 = _2815 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2816)
                    {
                        frontier_phi_83_pred = _2803;
                        frontier_phi_83_pred_1 = _2802;
                        frontier_phi_83_pred_2 = _2801;
                        frontier_phi_83_pred_3 = _2800;
                        frontier_phi_83_pred_4 = _2805;
                        frontier_phi_83_pred_5 = _2804;
                    }
                    else
                    {
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3034 = _2800;
                        float _3035 = _2801;
                        float _3036 = _2802;
                        float _3037 = _2803;
                        float _3038 = _2804;
                        float _3039 = _2805;
                        uint _3040 = _2815;
                        uint _3041;
                        vec4 _3066;
                        float _3067;
                        vec4 _3082;
                        vec3 _3094;
                        vec4 _3109;
                        vec4 _3124;
                        float _3170;
                        bool _3171;
                        for (;;)
                        {
                            uint _3051 = ((_2806 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3040));
                            _3041 = (_3040 + 4294967295u) & _3040;
                            uint _3053 = _3051 * 40u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            _3067 = _3066.w;
                            uint _3069 = (_3051 * 40u) + 4u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3084 = (_3051 * 40u) + 8u;
                            _3094 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x));
                            uint _3096 = (_3051 * 40u) + 16u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3051 * 40u) + 20u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3126 = (_3051 * 40u) + 24u;
                            vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3145 = (_3051 * 40u) + 28u;
                            vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            _3170 = fma(_2297, _3158.z, fma(_2296, _3158.y, _3158.x * _2295)) + _3158.w;
                            _3171 = !((fma(_2297, _3139.z, fma(_2296, _3139.y, _3139.x * _2295)) + _3139.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3171)
                            {
                                float _3198 = _3066.x - _2295;
                                float _3199 = _3066.y - _2296;
                                float _3200 = _3066.z - _2297;
                                float _3201 = dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200));
                                float _3204 = inversesqrt(_3201);
                                float _3205 = _3204 * _3198;
                                float _3206 = _3204 * _3199;
                                float _3207 = _3204 * _3200;
                                float _3211 = 1.0 - (_3201 / (_3067 * _3067));
                                float _4186 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3212 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3216 = sqrt(_3201) * _3082.w;
                                float _3218 = 1.39999997615814208984375 / (_3216 + 1.39999997615814208984375);
                                float _3219 = _3218 * _3218;
                                float _3222 = ((1.0 - _3219) * dot(vec3(_3205, _3206, _3207), vec3(_949, _952, _955))) + _3219;
                                float _3225 = _3216 * _3216;
                                float _3229 = (fma(_2297, _3109.z, fma(_2296, _3109.y, _3109.x * _2295)) + _3109.w) / _3170;
                                float _3230 = (fma(_2297, _3124.z, fma(_2296, _3124.y, _3124.x * _2295)) + _3124.w) / _3170;
                                float _3234 = 1.0 - dot(vec2(_3229, _3230), vec2(_3229, _3230));
                                float _4202 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                                float _3236 = _3235 * (((isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))) * _3212) / ((_3225 * 0.699999988079071044921875) + 1.0));
                                float _3248 = exp2(log2(1.0 / ((_3225 * 3.5) + 5.0)) * 0.25);
                                float _3249 = 1.0 - _1009;
                                float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                                float _3257 = _3256 * _3256;
                                float _3258 = _3257 * _3257;
                                float _3259 = _3205 - _2636;
                                float _3260 = _3206 - _2637;
                                float _3261 = _3207 - _2638;
                                float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                                float _3269 = dot(vec3(_949, _952, _955), vec3((-0.0) - _2636, (-0.0) - _2637, (-0.0) - _2638));
                                float _4213 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3273 = dot(vec3(_949, _952, _955), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                                float _4224 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3276 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                                float _3281 = _3218 * _3257;
                                float _3282 = _3281 * _3281;
                                float _3288 = ((1.0 - _3282) * dot(vec3(_949, _952, _955), vec3(_3205, _3206, _3207))) + _3282;
                                float _4235 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3290 = 1.0 - _3257;
                                float _3300 = (0.5 / (((_3289 * ((_3272 * _3290) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3289 * _3290) + _3257) * _3272))) * _3289;
                                float _4246 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3310 = (_3235 * _3212) * (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) / ((_3280 * _3280) * ((_3225 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3236 * _3082.x;
                                frontier_phi_89_pred_1 = _3310 * _3094.z;
                                frontier_phi_89_pred_2 = _3310 * _3094.y;
                                frontier_phi_89_pred_3 = _3310 * _3094.x;
                                frontier_phi_89_pred_4 = _3236 * _3082.z;
                                frontier_phi_89_pred_5 = _3236 * _3082.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3317 = frontier_phi_89_pred;
                            _3316 = frontier_phi_89_pred_1;
                            _3315 = frontier_phi_89_pred_2;
                            _3314 = frontier_phi_89_pred_3;
                            _3319 = frontier_phi_89_pred_4;
                            _3318 = frontier_phi_89_pred_5;
                            _3024 = _3317 + _3037;
                            _3025 = _3318 + _3038;
                            _3026 = _3319 + _3039;
                            _3021 = _3314 + _3034;
                            _3022 = _3315 + _3035;
                            _3023 = _3316 + _3036;
                            if (_3041 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3041;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3024;
                        frontier_phi_83_pred_1 = _3023;
                        frontier_phi_83_pred_2 = _3022;
                        frontier_phi_83_pred_3 = _3021;
                        frontier_phi_83_pred_4 = _3026;
                        frontier_phi_83_pred_5 = _3025;
                    }
                    _2617 = frontier_phi_83_pred;
                    _2615 = frontier_phi_83_pred_1;
                    _2613 = frontier_phi_83_pred_2;
                    _2611 = frontier_phi_83_pred_3;
                    _2621 = frontier_phi_83_pred_4;
                    _2619 = frontier_phi_83_pred_5;
                    uint _2807 = _2806 + 1u;
                    if (_2807 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2800 = _2611;
                        _2801 = _2613;
                        _2802 = _2615;
                        _2803 = _2617;
                        _2804 = _2619;
                        _2805 = _2621;
                        _2806 = _2807;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2621;
                frontier_phi_65_66_ladder_1 = _2619;
                frontier_phi_65_66_ladder_2 = _2615;
                frontier_phi_65_66_ladder_3 = _2613;
                frontier_phi_65_66_ladder_4 = _2617;
                frontier_phi_65_66_ladder_5 = _2611;
            }
            else
            {
                frontier_phi_65_66_ladder = _2468;
                frontier_phi_65_66_ladder_1 = _2466;
                frontier_phi_65_66_ladder_2 = _2462;
                frontier_phi_65_66_ladder_3 = _2460;
                frontier_phi_65_66_ladder_4 = _2464;
                frontier_phi_65_66_ladder_5 = _2458;
            }
            _2610 = frontier_phi_65_66_ladder_5;
            _2612 = frontier_phi_65_66_ladder_3;
            _2614 = frontier_phi_65_66_ladder_2;
            _2616 = frontier_phi_65_66_ladder_4;
            _2618 = frontier_phi_65_66_ladder_1;
            _2620 = frontier_phi_65_66_ladder;
        }
        float _2625 = isnan(1.0) ? _993 : (isnan(_993) ? 1.0 : min(_993, 1.0));
        _2354 = (_2625 * _2616) + _2084;
        _2356 = (_2625 * _2618) + _2085;
        _2358 = (_2625 * _2620) + _2086;
        _2360 = ((_2610 * 0.039999999105930328369140625) * _2625) + _2237;
        _2362 = ((_2612 * 0.039999999105930328369140625) * _2625) + _2238;
        _2364 = ((_2614 * 0.039999999105930328369140625) * _2625) + _2239;
    }
    else
    {
        _2354 = _2084;
        _2356 = _2085;
        _2358 = _2086;
        _2360 = _2237;
        _2362 = _2238;
        _2364 = _2239;
    }
    uint _2370 = _969 + uint(cbMatDynParam._m0[0u].w);
    float _2376 = (cbSceneParam._m0[72u].y * ((_862 * ((_853 - _815) - (_853 * _826))) + _815)) * cbInstanceData._m0[_2370].x;
    float _2377 = (cbSceneParam._m0[72u].y * ((_862 * ((_854 - _816) - (_854 * _826))) + _816)) * cbInstanceData._m0[_2370].y;
    float _2378 = (((_862 * ((_855 - _817) - (_855 * _826))) + _817) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2370].z;
    float _4262 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4273 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4284 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2395 = (((isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2354 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _993))) + ((_2360 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1797)) * cbPerFrame._m0[3u].x)) + _2376;
    float _2397 = (_2377 + ((_2362 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1797)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2356 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _993)));
    float _2399 = (_2378 + ((_2364 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1797)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2358 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _993)));
    float _4310 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2412 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    uint _2413 = _968 + 6u;
    float _2421 = _930 / cbSceneParam._m0[86u].x;
    float _2422 = _931 / cbSceneParam._m0[86u].y;
    vec4 _2436 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2421, _2422, (log2((isnan(cbSceneParam._m0[77u].w) ? _917 : (isnan(_917) ? cbSceneParam._m0[77u].w : min(_917, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2438 = _2436.x;
    float _2439 = _2436.y;
    float _2440 = _2436.z;
    float _2441 = _2436.w;
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    if (_917 > cbSceneParam._m0[78u].w)
    {
        float _2483 = isnan(_917) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _917 : min(cbSceneParam._m0[80u].w, _917));
        float _2484 = _2483 / _917;
        float _2495 = _2484 * _280;
        float _2496 = _281 * _2484;
        float _2497 = (-0.0) - _2496;
        float _2498 = _2484 * _282;
        float _2500 = (cbSceneParam._m0[77u].w * _2497) / _2483;
        float _2501 = _2500 + cbSceneParam._m0[79u].w;
        float _2502 = cbSceneParam._m0[79u].w - _2496;
        float _2508 = sqrt(((_2495 * _2495) + (_2496 * _2496)) + (_2498 * _2498));
        float _2511 = (1.0 - (cbSceneParam._m0[77u].w / _2483)) * _2508;
        float _2517 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2519 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2736;
        if (abs((_2497 - _2500) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2736 = ((((_2501 > 0.0) ? exp2(_2517 * _2501) : (2.0 - exp2(_2519 * _2501))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2511;
        }
        else
        {
            float _2671 = 1.0 / cbSceneParam._m0[80u].x;
            float _2672 = isnan(_2502) ? _2501 : (isnan(_2501) ? _2502 : max(_2501, _2502));
            float _2673 = isnan(_2502) ? _2501 : (isnan(_2501) ? _2502 : min(_2501, _2502));
            float _2682 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : min(_2672, 0.0));
            float _2683 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : min(_2673, 0.0));
            _2736 = ((abs(_2508 / _2497) * cbSceneParam._m0[80u].y) * ((((_2682 - _2683) * 2.0) - ((exp2(_2517 * (isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0)))) - exp2(_2517 * (isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0))))) * _2671)) - ((exp2(_2519 * _2682) - exp2(_2519 * _2683)) * _2671))) + (_2511 * cbSceneParam._m0[80u].z);
        }
        vec4 _2738 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2421, _2422, 1.0), 0.0);
        float _2747 = exp2((_2736 * (-1.44269502162933349609375)) * (1.0 - _2738.w));
        float _2748 = log2(_2747);
        float _2764 = log2(_2441);
        _2521 = (exp2(_2764 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].x)) * _2738.x) / cbSceneParam._m0[78u].x)) + _2438;
        _2523 = (exp2(_2764 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].y)) * _2738.y) / cbSceneParam._m0[78u].y)) + _2439;
        _2525 = (exp2(_2764 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].z)) * _2738.z) / cbSceneParam._m0[78u].z)) + _2440;
        _2527 = _2747 * _2441;
    }
    else
    {
        _2521 = _2438;
        _2523 = _2439;
        _2525 = _2440;
        _2527 = _2441;
    }
    float _2538 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2539 = _2538 == 3.0;
    float _2540 = log2(_2527);
    float _2544 = exp2(_2540 * cbSceneParam._m0[78u].x);
    float _2545 = exp2(_2540 * cbSceneParam._m0[78u].y);
    float _2546 = exp2(_2540 * cbSceneParam._m0[78u].z);
    float _2547 = _2544 * (isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0)));
    float _2548 = _2545 * (isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0)));
    float _2549 = _2546 * (isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0)));
    float _2558 = (_2538 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2558 * (_2539 ? _2547 : (_2547 + (cbSceneParam._m0[72u].w * _2521)));
    SV_Target.y = _2558 * (_2539 ? _2548 : (_2548 + (cbSceneParam._m0[72u].w * _2523)));
    SV_Target.z = _2558 * (_2539 ? _2549 : (_2549 + (cbSceneParam._m0[72u].w * _2525)));
    SV_Target.w = cbInstanceData._m0[_2413].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2376) * _2412) * _2544) * _2558;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2377) * _2412) * _2545) * _2558;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2378) * _2412) * _2546) * _2558;
    SV_Target_1.w = cbInstanceData._m0[_2413].w;
}


