#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1163;
float _3435;
float _3436;
float _3437;
float _3438;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _303 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _341 = cbMtdParam._m0[27u].w + _282;
    float _342 = cbMtdParam._m0[28u].x + _283;
    float _343 = cbMtdParam._m0[28u].y + _284;
    float _357 = (-0.0) - dot(vec3(_341, _342, _343), vec3(_211 * _203, _211 * _204, _211 * _205));
    float _358 = (-0.0) - dot(vec3(_341, _342, _343), vec3(_225 * TANGENT.x, _225 * TANGENT.y, _225 * TANGENT.z));
    float _359 = (-0.0) - dot(vec3(_341, _342, _343), vec3((-0.0) - (_218 * NORMAL.x), (-0.0) - (_218 * NORMAL.y), (-0.0) - (_218 * NORMAL.z)));
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _366 = _363 * _359;
    float _367 = (_363 * _357) + (((_303.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _368 = (_363 * _358) + (((_303.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _369 = _367 * cbMtdParam._m0[24u].x;
    float _370 = _368 * cbMtdParam._m0[23u].w;
    float _371 = fract(TEXCOORD.x);
    float _372 = fract(TEXCOORD.y);
    float _378;
    if (_369 > 0.0)
    {
        _378 = (1.0 - _371) / _369;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_369 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _371) / _369;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _378 = frontier_phi_3_2_ladder;
    }
    float _386;
    if (_370 > 0.0)
    {
        _386 = (1.0 - _372) / _370;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_370 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _372) / _370;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _386 = frontier_phi_7_6_ladder;
    }
    bool _388 = _366 > 0.0;
    float _390 = _388 ? (cbMtdParam._m0[17u].x / _366) : 5000.0;
    float _391 = isnan(_386) ? _378 : (isnan(_378) ? _386 : min(_378, _386));
    float _392 = isnan(_390) ? _391 : (isnan(_391) ? _390 : min(_391, _390));
    float _396 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _397 = _371 + (-0.5);
    float _400 = _372 + (-0.5);
    float _403 = ((_392 * _366) + _396) / _396;
    vec4 _428 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_397 + (_392 * _369)) / _403) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_400 + (_392 * _370)) / _403) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _438 = cbMtdParam._m0[9u].x * _428.x;
    float _439 = cbMtdParam._m0[9u].y * _428.y;
    float _440 = cbMtdParam._m0[9u].z * _428.z;
    float _458 = _367 * cbMtdParam._m0[26u].z;
    float _459 = _368 * cbMtdParam._m0[26u].y;
    bool _460 = _458 > 0.0;
    float _465;
    if (_460)
    {
        _465 = (1.0 - _371) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _371) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _465 = frontier_phi_11_10_ladder;
    }
    bool _467 = _459 > 0.0;
    float _472;
    if (_467)
    {
        _472 = (1.0 - _372) / _459;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_459 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _372) / _459;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _472 = frontier_phi_15_14_ladder;
    }
    float _475 = _388 ? (cbMtdParam._m0[19u].z / _366) : 5000.0;
    float _476 = isnan(_472) ? _465 : (isnan(_465) ? _472 : min(_465, _472));
    float _477 = isnan(_475) ? _476 : (isnan(_476) ? _475 : min(_476, _475));
    float _481 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _485 = ((_477 * _366) + _481) / _481;
    float _490 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _492 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _508 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_397 + (_477 * _458)) / _485) + 0.5) + _490) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_400 + (_477 * _459)) / _485) + 0.5) + _492) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _520;
    if (_460)
    {
        _520 = (1.0 - _371) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _371) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _520 = frontier_phi_19_18_ladder;
    }
    float _526;
    if (_467)
    {
        _526 = (1.0 - _372) / _459;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_459 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _372) / _459;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _526 = frontier_phi_23_22_ladder;
    }
    float _528 = isnan(_526) ? _520 : (isnan(_520) ? _526 : min(_520, _526));
    float _529 = isnan(_475) ? _528 : (isnan(_528) ? _475 : min(_528, _475));
    float _536 = ((_529 * _366) + _481) / _481;
    vec4 _556 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_397 + (_529 * _458)) / _536) + 0.5) + _490) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_400 + (_529 * _459)) / _536) + 0.5) + _492) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _558 = _556.x;
    float _565 = (_558 * ((_508.x * cbMtdParam._m0[10u].x) - _438)) + _438;
    float _566 = (_558 * ((_508.y * cbMtdParam._m0[10u].y) - _439)) + _439;
    float _567 = (_558 * ((_508.z * cbMtdParam._m0[10u].z) - _440)) + _440;
    vec4 _591 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _596 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _602 = ((_591.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _604 = (-0.0) - (cbMtdParam._m0[21u].x * ((_591.x * 0.5) + (-0.25)));
    float _605 = fract(_596);
    float _607 = fract(_596 + 0.5);
    vec4 _634 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_605 * _604) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_602 * _605) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _636 = _634.x;
    float _642 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_607 * _604) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_602 * _607) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _636) * abs((_605 * 2.0) + (-1.0))) + _636;
    float _648 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _652 = fract(abs(_648));
    float _661 = sin(cbMtdParam._m0[21u].z);
    float _662 = cos(cbMtdParam._m0[21u].z);
    float _663 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _664 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _694 = abs(cbMtdParam._m0[20u].w * (((_642 - (((_648 >= ((-0.0) - _648)) ? _652 : ((-0.0) - _652)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_664, (-0.0) - _661, _662 * _663) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_664, _662, _663 * _661) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _698 = (((_694 * cbMtdParam._m0[18u].y) - _642) * _694) + _642;
    float _3477 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    vec4 _711 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _726 = (cbMtdParam._m0[14u].x * _711.x) * cbMtdParam._m0[19u].x;
    float _727 = (cbMtdParam._m0[14u].y * _711.y) * cbMtdParam._m0[19u].x;
    float _728 = (cbMtdParam._m0[14u].z * _711.z) * cbMtdParam._m0[19u].x;
    float _738 = exp2(log2(_699) * cbMtdParam._m0[20u].x);
    float _3488 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3499 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3510 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _767 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _772 = _282 * _771;
    float _773 = _283 * _771;
    float _774 = _284 * _771;
    vec4 _779 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _781 = _779.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _878 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _884 = (cbMatDynParam._m0[5u].x * _878) + cbMatDynParam._m0[5u].y;
        float _3521 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _889 = (cbMatDynParam._m0[5u].z * _878) + cbMatDynParam._m0[5u].w;
        float _3532 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) - _885)) + _885) < ((_781 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _794 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _795 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _808 = uint(roundEven(NORMAL.w)) * 13u;
    uint _810 = _808 + 9u;
    uint _811 = _810 + uint(cbMatDynParam._m0[0u].w);
    float _817 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) * cbInstanceData._m0[_811].x;
    float _818 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * cbInstanceData._m0[_811].y;
    float _819 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_811].z;
    float _3543 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    vec4 _831 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _794, cbSceneParam._m0[86u].y * _795));
    float _834 = _831.x * TEXCOORD_4;
    float _835 = (-0.0) - _772;
    float _836 = (-0.0) - _773;
    float _837 = (-0.0) - _774;
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1162;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _950 = (cbModelParam._m0[37u].x * ((((fma(_867, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _952 = (cbModelParam._m0[37u].y * ((((fma(_867, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _953 = (((((fma(_867, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_950, _952, _953), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_950, _952, _953), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_950, _952, _953), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_950, _952, _953), 0.0);
        float _990 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_956.x + (-0.5));
        float _992 = _990 * (_956.y + (-0.5));
        float _993 = _990 * (_956.z + (-0.5));
        float _1000 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_963.x + (-0.5));
        float _1002 = _1000 * (_963.y + (-0.5));
        float _1003 = _1000 * (_963.z + (-0.5));
        float _1010 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_970.x + (-0.5));
        float _1012 = _1010 * (_970.y + (-0.5));
        float _1013 = _1010 * (_970.z + (-0.5));
        float _1020 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_977.x + (-0.5));
        float _1022 = _1020 * (_977.y + (-0.5));
        float _1023 = _1020 * (_977.z + (-0.5));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = _991 * 0.5;
        float _1028 = _1001 * 0.5;
        float _1029 = _1011 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1044 = (dot(vec3(0.0), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1054 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3613 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_1056 + 1.0))) + _1061) * _1024;
        float _1071 = _992 * 0.5;
        float _1072 = _1002 * 0.5;
        float _1073 = _1012 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(0.0), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3646 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1098 + 1.0))) + _1103) * _1025;
        float _1113 = _993 * 0.5;
        float _1114 = _1003 * 0.5;
        float _1115 = _1013 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(0.0), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3679 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1140 + 1.0))) + _1145) * _1026;
        _1162 = _993;
        _1164 = _992;
        _1165 = _991;
        _1166 = _1003;
        _1167 = _1002;
        _1168 = _1001;
        _1169 = _1013;
        _1170 = _1012;
        _1171 = _1011;
        _1172 = _1026;
        _1173 = _1025;
        _1174 = _1024;
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = _1163;
        _1164 = _1163;
        _1165 = _1163;
        _1166 = _1163;
        _1167 = _1163;
        _1168 = _1163;
        _1169 = _1163;
        _1170 = _1163;
        _1171 = _1163;
        _1172 = _1163;
        _1173 = _1163;
        _1174 = _1163;
        _1175 = 0.0;
        _1176 = 0.0;
        _1177 = 0.0;
    }
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1233 = (cbModelParam._m0[38u].x * ((((fma(_867, cbModelParam._m0[30u].z, fma(_863, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1234 = (cbModelParam._m0[38u].y * ((((fma(_867, cbModelParam._m0[31u].z, fma(_863, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1235 = (((((fma(_867, cbModelParam._m0[32u].z, fma(_863, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        float _1270 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1237.x + (-0.5));
        float _1272 = _1270 * (_1237.y + (-0.5));
        float _1273 = _1270 * (_1237.z + (-0.5));
        float _1280 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1244.x + (-0.5));
        float _1282 = _1280 * (_1244.y + (-0.5));
        float _1283 = _1280 * (_1244.z + (-0.5));
        float _1290 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1251.x + (-0.5));
        float _1292 = _1290 * (_1251.y + (-0.5));
        float _1293 = _1290 * (_1251.z + (-0.5));
        float _1300 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1258.x + (-0.5));
        float _1302 = _1300 * (_1258.y + (-0.5));
        float _1303 = _1300 * (_1258.z + (-0.5));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = _1271 * 0.5;
        float _1308 = _1281 * 0.5;
        float _1309 = _1291 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(0.0), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3742 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1334 + 1.0))) + _1339) * _1304;
        float _1349 = _1272 * 0.5;
        float _1350 = _1282 * 0.5;
        float _1351 = _1292 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(0.0), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3775 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1376 + 1.0))) + _1381) * _1305;
        float _1391 = _1273 * 0.5;
        float _1392 = _1283 * 0.5;
        float _1393 = _1293 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(0.0), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _3808 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1418 + 1.0))) + _1423) * _1306;
        _1440 = _1273;
        _1441 = _1272;
        _1442 = _1271;
        _1443 = _1283;
        _1444 = _1282;
        _1445 = _1281;
        _1446 = _1293;
        _1447 = _1292;
        _1448 = _1291;
        _1449 = _1306;
        _1450 = _1305;
        _1451 = _1304;
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
    }
    else
    {
        _1440 = _1163;
        _1441 = _1163;
        _1442 = _1163;
        _1443 = _1163;
        _1444 = _1163;
        _1445 = _1163;
        _1446 = _1163;
        _1447 = _1163;
        _1448 = _1163;
        _1449 = _1163;
        _1450 = _1163;
        _1451 = _1163;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1175)) + _1175;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1176)) + _1176;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1177)) + _1177;
    float _1487 = fma(_1466, cbSceneParam._m0[89u].z, fma(_1465, cbSceneParam._m0[89u].y, _1464 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1466, cbSceneParam._m0[90u].z, fma(_1465, cbSceneParam._m0[90u].y, _1464 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1466, cbSceneParam._m0[91u].z, fma(_1465, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1464));
    float _1508 = _772 * (-0.5);
    float _1509 = _773 * (-0.5);
    float _1510 = _774 * (-0.5);
    float _1511 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1514 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1517 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1551;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1524 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1162, _1166, _1169, _1172));
        float _1528 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1164, _1167, _1170, _1173));
        float _1532 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1165, _1168, _1171, _1174));
        float _1539 = dot(vec4(cbModelParam._m0[39u]), vec4(_1508, _1509, _1510, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1562;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1553 = dot(vec4(cbModelParam._m0[40u]), vec4(_1508, _1509, _1510, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1553) ? 0.0 : (isnan(0.0) ? _1553 : max(0.0, _1553))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1566 = (_1562 * cbModelParam._m0[1u].x) + (_1551 * (1.0 - cbModelParam._m0[1u].x));
    float _1575 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1623 = fma(_867, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859)) + cbModelParam._m0[13u].w;
        float _1627 = fma(_867, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859)) + cbModelParam._m0[14u].w;
        float _1631 = fma(_867, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859)) + cbModelParam._m0[15u].w;
        float _1634 = fma(_837, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _835));
        float _1637 = fma(_837, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _835));
        float _1640 = fma(_837, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _835));
        float _1666;
        if (_1634 > 0.0)
        {
            _1666 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1666 = frontier_phi_41_39_ladder;
        }
        float _1836;
        if (_1637 > 0.0)
        {
            _1836 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1836 = frontier_phi_50_46_ladder;
        }
        float _2230;
        if (_1640 > 0.0)
        {
            _2230 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _2230 = frontier_phi_62_57_ladder;
        }
        float _2232 = isnan(_1836) ? _1666 : (isnan(_1666) ? _1836 : min(_1666, _1836));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1634) + _1623;
        float _2238 = (_2233 * _1637) + _1627;
        float _2239 = (_2233 * _1640) + _1631;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2242 = (-1.0) - _2240;
        float _2244 = _2240 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_2239 > _2244) || ((_2239 < _2242) || ((_2238 > _2244) || ((_2238 < _2242) || ((_2237 < _2242) || (_2237 > _2244))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2499 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2239, cbModelParam._m0[9u].z, fma(_2238, cbModelParam._m0[9u].y, _2237 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2239, cbModelParam._m0[10u].z, fma(_2238, cbModelParam._m0[10u].y, _2237 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2239, cbModelParam._m0[11u].z, fma(_2238, cbModelParam._m0[11u].y, _2237 * cbModelParam._m0[11u].x))), _1575);
            frontier_phi_40_62_ladder = _2499.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _2499.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _2499.x * cbModelParam._m0[1u].y;
        }
        _1656 = frontier_phi_40_62_ladder_2;
        _1658 = frontier_phi_40_62_ladder_1;
        _1660 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_835, _836, _837), _1575);
        _1656 = _1644.x * cbModelParam._m0[1u].y;
        _1658 = _1644.y * cbModelParam._m0[1u].y;
        _1660 = _1644.z * cbModelParam._m0[1u].y;
    }
    float _1663 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1751;
    float _1753;
    float _1755;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1715 = fma(_867, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859)) + cbModelParam._m0[21u].w;
        float _1719 = fma(_867, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859)) + cbModelParam._m0[22u].w;
        float _1723 = fma(_867, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859)) + cbModelParam._m0[23u].w;
        float _1726 = fma(_837, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _835));
        float _1729 = fma(_837, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _835));
        float _1732 = fma(_837, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _835));
        float _1841;
        if (_1726 > 0.0)
        {
            _1841 = abs((1.0 - _1715) / _1726);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1715 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1841 = frontier_phi_52_48_ladder;
        }
        float _2257;
        if (_1729 > 0.0)
        {
            _2257 = abs((1.0 - _1719) / _1729);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1719 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2257 = frontier_phi_64_59_ladder;
        }
        float _2638;
        if (_1732 > 0.0)
        {
            _2638 = abs((1.0 - _1723) / _1732);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_1723 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2638 = frontier_phi_76_71_ladder;
        }
        float _2640 = isnan(_2257) ? _1841 : (isnan(_1841) ? _2257 : min(_1841, _2257));
        float _2641 = isnan(_2638) ? _2640 : (isnan(_2640) ? _2638 : min(_2640, _2638));
        float _2645 = (_2641 * _1726) + _1715;
        float _2646 = (_2641 * _1729) + _1719;
        float _2647 = (_2641 * _1732) + _1723;
        float _2648 = _2641 * 9.9999997473787516355514526367188e-05;
        float _2649 = (-1.0) - _2648;
        float _2651 = _2648 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2647 > _2651) || ((_2647 < _2649) || ((_2646 > _2651) || ((_2646 < _2649) || ((_2645 < _2649) || (_2645 > _2651))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2647, cbModelParam._m0[17u].z, fma(_2646, cbModelParam._m0[17u].y, _2645 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2647, cbModelParam._m0[18u].z, fma(_2646, cbModelParam._m0[18u].y, _2645 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2647, cbModelParam._m0[19u].z, fma(_2646, cbModelParam._m0[19u].y, _2645 * cbModelParam._m0[19u].x))), _1663);
            frontier_phi_49_76_ladder = _2781.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _2781.x * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _2781.y * cbModelParam._m0[1u].z;
        }
        _1751 = frontier_phi_49_76_ladder_1;
        _1753 = frontier_phi_49_76_ladder_2;
        _1755 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _1735 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_835, _836, _837), _1663);
        _1751 = _1735.x * cbModelParam._m0[1u].z;
        _1753 = _1735.y * cbModelParam._m0[1u].z;
        _1755 = _1735.z * cbModelParam._m0[1u].z;
    }
    float _1767 = _834 * 0.01200000010430812835693359375;
    float _1769 = _1767 * ((cbModelParam._m0[1u].w * (_1751 - _1656)) + _1656);
    float _1770 = _1767 * ((cbModelParam._m0[1u].w * (_1753 - _1658)) + _1658);
    float _1771 = _1767 * ((cbModelParam._m0[1u].w * (_1755 - _1660)) + _1660);
    float _1774 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1770, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1770, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1770, cbSceneParam._m0[91u].y, _1769 * cbSceneParam._m0[91u].x));
    float _1815 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1819 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1823 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1827 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1828 = _1815 / _1827;
    float _1829 = _1819 / _1827;
    float _1830 = _1823 / _1827;
    float _1978;
    float _1979;
    float _1980;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1857 = ((uint(_1830 > cbSceneParam._m0[59u].y) + uint(_1830 > cbSceneParam._m0[59u].x)) + uint(_1830 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1858 = _1857 + 43u;
        uint _1866 = _1857 + 44u;
        uint _1874 = _1857 + 45u;
        uint _1882 = _1857 + 46u;
        float _1893 = fma(_1827, cbSceneParam._m0[_1858].w, fma(_1823, cbSceneParam._m0[_1858].z, fma(_1819, cbSceneParam._m0[_1858].y, _1815 * cbSceneParam._m0[_1858].x)));
        float _1897 = fma(_1827, cbSceneParam._m0[_1866].w, fma(_1823, cbSceneParam._m0[_1866].z, fma(_1819, cbSceneParam._m0[_1866].y, _1815 * cbSceneParam._m0[_1866].x)));
        float _1905 = fma(_1827, cbSceneParam._m0[_1882].w, fma(_1823, cbSceneParam._m0[_1882].z, fma(_1819, cbSceneParam._m0[_1882].y, _1815 * cbSceneParam._m0[_1882].x)));
        float _1910 = cbSceneParam._m0[33u].z * _1905;
        float _1912 = cbSceneParam._m0[33u].w * _1905;
        float _1915 = fma(_1827, cbSceneParam._m0[_1874].w, fma(_1823, cbSceneParam._m0[_1874].z, fma(_1819, cbSceneParam._m0[_1874].y, _1815 * cbSceneParam._m0[_1874].x))) / _1905;
        float _1963 = (cbSceneParam._m0[33u].x - sqrt(((_1829 * _1829) + (_1828 * _1828)) + (_1830 * _1830))) * cbSceneParam._m0[33u].y;
        float _3934 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1971 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1910 + _1893) / _1905, (_1912 + _1897) / _1905), _1915), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1912 + _1893) / _1905, (_1897 - _1910) / _1905), _1915), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1893 - _1910) / _1905, (_1897 - _1912) / _1905), _1915), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1893 - _1912) / _1905, (_1910 + _1897) / _1905), _1915), 0.0)).x), vec4(0.25)));
        _1978 = 1.0 - (_1971 * cbSceneParam._m0[34u].x);
        _1979 = 1.0 - (_1971 * cbSceneParam._m0[34u].y);
        _1980 = 1.0 - (_1971 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1978 = 1.0;
        _1979 = 1.0;
        _1980 = 1.0;
    }
    float _2044;
    float _2046;
    float _2048;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2032 = fma(_1827, cbSceneParam._m0[63u].w, fma(_1823, cbSceneParam._m0[63u].z, fma(_1819, cbSceneParam._m0[63u].y, _1815 * cbSceneParam._m0[63u].x)));
        float _2033 = fma(_1827, cbSceneParam._m0[60u].w, fma(_1823, cbSceneParam._m0[60u].z, fma(_1819, cbSceneParam._m0[60u].y, _1815 * cbSceneParam._m0[60u].x))) / _2032;
        float _2034 = fma(_1827, cbSceneParam._m0[61u].w, fma(_1823, cbSceneParam._m0[61u].z, fma(_1819, cbSceneParam._m0[61u].y, _1815 * cbSceneParam._m0[61u].x))) / _2032;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_2033 >= cbSceneParam._m0[64u].x) && (_2034 >= cbSceneParam._m0[64u].y)) && (_2033 <= cbSceneParam._m0[64u].z)) && (_2034 <= cbSceneParam._m0[64u].w))
        {
            float _2270 = fma(_1827, cbSceneParam._m0[62u].w, fma(_1823, cbSceneParam._m0[62u].z, fma(_1819, cbSceneParam._m0[62u].y, _1815 * cbSceneParam._m0[62u].x))) / _2032;
            float _2274 = isnan(cbSceneParam._m0[41u].w) ? _2270 : (isnan(_2270) ? cbSceneParam._m0[41u].w : max(_2270, cbSceneParam._m0[41u].w));
            float _2317 = (cbSceneParam._m0[33u].x - sqrt(((_1829 * _1829) + (_1828 * _1828)) + (_1830 * _1830))) * cbSceneParam._m0[33u].y;
            float _3950 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
            float _2324 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2033, cbSceneParam._m0[33u].w + _2034), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2033, _2034 - cbSceneParam._m0[33u].z), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2033 - cbSceneParam._m0[33u].z, _2034 - cbSceneParam._m0[33u].w), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2033 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2034), _2274), 0.0)).x), vec4(0.25)));
            float _2328 = 1.0 - (_2324 * cbSceneParam._m0[34u].x);
            float _2329 = 1.0 - (_2324 * cbSceneParam._m0[34u].y);
            float _2330 = 1.0 - (_2324 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_2330) ? _1980 : (isnan(_1980) ? _2330 : min(_1980, _2330));
            frontier_phi_61_60_ladder_1 = isnan(_2329) ? _1979 : (isnan(_1979) ? _2329 : min(_1979, _2329));
            frontier_phi_61_60_ladder_2 = isnan(_2328) ? _1978 : (isnan(_1978) ? _2328 : min(_1978, _2328));
        }
        else
        {
            frontier_phi_61_60_ladder = _1980;
            frontier_phi_61_60_ladder_1 = _1979;
            frontier_phi_61_60_ladder_2 = _1978;
        }
        _2044 = frontier_phi_61_60_ladder_2;
        _2046 = frontier_phi_61_60_ladder_1;
        _2048 = frontier_phi_61_60_ladder;
    }
    else
    {
        _2044 = _1978;
        _2046 = _1979;
        _2048 = _1980;
    }
    uvec4 _2053 = floatBitsToUint(cbInstanceData._m0[_808 + 5u]);
    uint _2055 = _2053.x * 14u;
    uint _2056 = _2055 + 13u;
    float _2061 = _834 + (-1.0);
    float _2064 = (cbLight._m0[_2056].x * _2061) + 1.0;
    float _2065 = (cbLight._m0[_2056].y * _2061) + 1.0;
    uint _2066 = _2055 + 5u;
    float _2072 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2076 = _2055 + 4u;
    float _2085 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2089 = _2055 | 1u;
    float _2100 = dot(vec3(cbLight._m0[_2055].xyz), vec3(0.0));
    float _2103 = dot(vec3(cbLight._m0[_2089].xyz), vec3(0.0));
    float _3986 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _3997 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2108 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.3183098733425140380859375;
    float _2110 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 0.3183098733425140380859375;
    float _2117 = ((cbLight._m0[_2066].x * _2072) * _2110) + (((cbLight._m0[_2076].x * _2044) * _2085) * _2108);
    float _2118 = ((_2072 * cbLight._m0[_2066].y) * _2110) + (((cbLight._m0[_2076].y * _2046) * _2085) * _2108);
    float _2119 = ((_2072 * cbLight._m0[_2066].z) * _2110) + (((cbLight._m0[_2076].z * _2048) * _2085) * _2108);
    uint _2120 = _2055 + 8u;
    float _2126 = cbLight._m0[_2055].x + _772;
    float _2127 = cbLight._m0[_2055].y + _773;
    float _2128 = cbLight._m0[_2055].z + _774;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2136 = dot(vec3(0.0), vec3(cbLight._m0[_2055].xyz));
    float _4008 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _2140 = dot(vec3(0.0), vec3(_772, _773, _774));
    float _4019 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2126 * _2132, _2127 * _2132, _2128 * _2132));
    float _4030 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2155 = (exp2(log2(1.0 - (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2161 = (0.5 / ((_2139 + 9.9999999392252902907785028219223e-09) + _2143)) * _2139;
    float _4041 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2163 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.31831014156341552734375;
    uint _2177 = _2055 + 9u;
    float _2183 = cbLight._m0[_2089].x + _772;
    float _2184 = cbLight._m0[_2089].y + _773;
    float _2185 = cbLight._m0[_2089].z + _774;
    float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
    float _2193 = dot(vec3(0.0), vec3(cbLight._m0[_2089].xyz));
    float _4052 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2183 * _2189, _2184 * _2189, _2185 * _2189));
    float _4063 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2206 = (exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2210 = (0.5 / ((_2196 + 9.9999999392252902907785028219223e-09) + _2143)) * _2196;
    float _4074 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2212 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.31831014156341552734375;
    float _2222 = (((_2206 * cbLight._m0[_2177].x) * _2212) * _2072) + ((((cbLight._m0[_2120].x * _2044) * _2155) * _2163) * _2085);
    float _2223 = (((_2206 * cbLight._m0[_2177].y) * _2212) * _2072) + ((((cbLight._m0[_2120].y * _2046) * _2155) * _2163) * _2085);
    float _2224 = (((_2206 * cbLight._m0[_2177].z) * _2212) * _2072) + ((((cbLight._m0[_2120].z * _2048) * _2155) * _2163) * _2085);
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    float _2397;
    if (_2053.y == 0u)
    {
        uvec4 _2342 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2343 = _2342.x;
        uint _2354 = uint((float(_2342.y) * floor(float(uint(cbSceneParam._m0[85u].y * _795) / _2343))) + floor(float(uint(cbSceneParam._m0[85u].x * _794) / _2343)));
        float _2364 = (log2(_1830 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2365 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        uint _2368 = uint(isnan(14.0) ? _2365 : (isnan(_2365) ? 14.0 : min(_2365, 14.0)));
        uvec4 _2373 = texelFetch(g_lightClusterGridBuffer, int(((_2368 << 2u) + (_2354 << 6u)) >> 2u));
        uint _2374 = _2373.x;
        uint _2375 = _2342.z;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        if (((((1u << ((_2375 >> 4u) & 15u)) + 4294967295u) & _2374) == 0u) || ((_2375 & 240u) == 0u))
        {
            _2508 = 0.0;
            _2510 = 0.0;
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
        }
        else
        {
            float _2509;
            float _2511;
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            uint _2699 = 0u;
            uint _2708;
            bool _2709;
            for (;;)
            {
                _2708 = texelFetch(g_lightClassification, int((((_2368 << 5u) + (_2354 << 9u)) + (_2699 << 2u)) >> 2u)).x;
                _2709 = _2708 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                float frontier_phi_87_pred_3;
                float frontier_phi_87_pred_4;
                float frontier_phi_87_pred_5;
                if (_2709)
                {
                    frontier_phi_87_pred = _2693;
                    frontier_phi_87_pred_1 = _2698;
                    frontier_phi_87_pred_2 = _2697;
                    frontier_phi_87_pred_3 = _2696;
                    frontier_phi_87_pred_4 = _2695;
                    frontier_phi_87_pred_5 = _2694;
                }
                else
                {
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    uint _2865;
                    _2859 = _2693;
                    _2860 = _2694;
                    _2861 = _2695;
                    _2862 = _2696;
                    _2863 = _2697;
                    _2864 = _2698;
                    _2865 = _2708;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    for (;;)
                    {
                        uint _2869 = uint(findLSB(_2865)) + (_2699 << 5u);
                        uint _2866 = (_2865 + 4294967295u) & _2865;
                        uint _2871 = _2869 * 48u;
                        vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 3u)).x));
                        uint _2891 = (_2869 * 48u) + 4u;
                        vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 3u)).x));
                        uint _2910 = (_2869 * 48u) + 8u;
                        vec3 _2921 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x));
                        float _2925 = _2885.x - _1828;
                        float _2926 = _2885.y - _1829;
                        float _2927 = _2885.z - _1830;
                        float _2928 = dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927));
                        float _2931 = inversesqrt(_2928);
                        float _2940 = 1.0 - (_2928 * _2885.w);
                        float _4095 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2941 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                        float _2942 = sqrt(_2928) * _2904.w;
                        float _2945 = 1.39999997615814208984375 / (_2942 + 1.39999997615814208984375);
                        float _2946 = _2945 * _2945;
                        float _2949 = ((1.0 - _2946) * dot(vec3(0.0), vec3(_2931 * _2925, _2931 * _2926, _2931 * _2927))) + _2946;
                        float _2952 = _2942 * _2942;
                        float _2956 = ((isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0))) * _2941) / ((_2952 * 0.699999988079071044921875) + 1.0);
                        float _2960 = (-0.0) - _1828;
                        float _2961 = (-0.0) - _1829;
                        float _2962 = (-0.0) - _1830;
                        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                        float _2970 = dot(vec3(0.0), vec3(_2966 * _2960, _2966 * _2961, _2966 * _2962));
                        float _4111 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _4122 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2974 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2978 = (0.5 / (((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) + 9.9999999392252902907785028219223e-09) + _2974)) * _2974;
                        float _4133 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2987 = (((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * 3.1415927410125732421875) / ((_2952 * 2.1991131305694580078125) + 3.141590118408203125)) * _2941;
                        _2789 = (_2956 * _2904.x) + _2862;
                        _2790 = (_2956 * _2904.y) + _2863;
                        _2791 = (_2956 * _2904.z) + _2864;
                        _2786 = (_2987 * _2921.x) + _2859;
                        _2787 = (_2987 * _2921.y) + _2860;
                        _2788 = (_2987 * _2921.z) + _2861;
                        if (_2866 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2859 = _2786;
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2866;
                        }
                    }
                    frontier_phi_87_pred = _2786;
                    frontier_phi_87_pred_1 = _2791;
                    frontier_phi_87_pred_2 = _2790;
                    frontier_phi_87_pred_3 = _2789;
                    frontier_phi_87_pred_4 = _2788;
                    frontier_phi_87_pred_5 = _2787;
                }
                _2509 = frontier_phi_87_pred;
                _2519 = frontier_phi_87_pred_1;
                _2517 = frontier_phi_87_pred_2;
                _2515 = frontier_phi_87_pred_3;
                _2513 = frontier_phi_87_pred_4;
                _2511 = frontier_phi_87_pred_5;
                uint _2700 = _2699 + 1u;
                if (_2700 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2693 = _2509;
                    _2694 = _2511;
                    _2695 = _2513;
                    _2696 = _2515;
                    _2697 = _2517;
                    _2698 = _2519;
                    _2699 = _2700;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2508 = _2509;
            _2510 = _2511;
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
        }
        uvec4 _2522 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2523 = _2522.z;
        uint _2525 = (_2523 >> 8u) & 15u;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        if (((4294967295u << _2525) & _2374) == 0u)
        {
            _2664 = _2508;
            _2666 = _2510;
            _2668 = _2512;
            _2670 = _2514;
            _2672 = _2516;
            _2674 = _2518;
        }
        else
        {
            float _2689 = inversesqrt(dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830)));
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            float frontier_phi_78_79_ladder_3;
            float frontier_phi_78_79_ladder_4;
            float frontier_phi_78_79_ladder_5;
            if (_2525 < ((_2523 >> 12u) & 15u))
            {
                float _2665;
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2842 = _2508;
                float _2843 = _2510;
                float _2844 = _2512;
                float _2845 = _2514;
                float _2846 = _2516;
                float _2847 = _2518;
                uint _2848 = _2525;
                uint _2857;
                bool _2858;
                for (;;)
                {
                    _2857 = texelFetch(g_lightClassification, int((((_2368 << 5u) + (_2354 << 9u)) + (_2848 << 2u)) >> 2u)).x;
                    _2858 = _2857 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    float frontier_phi_98_pred_3;
                    float frontier_phi_98_pred_4;
                    float frontier_phi_98_pred_5;
                    if (_2858)
                    {
                        frontier_phi_98_pred = _2847;
                        frontier_phi_98_pred_1 = _2846;
                        frontier_phi_98_pred_2 = _2845;
                        frontier_phi_98_pred_3 = _2844;
                        frontier_phi_98_pred_4 = _2843;
                        frontier_phi_98_pred_5 = _2842;
                    }
                    else
                    {
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3014 = _2842;
                        float _3015 = _2843;
                        float _3016 = _2844;
                        float _3017 = _2845;
                        float _3018 = _2846;
                        float _3019 = _2847;
                        uint _3020 = _2857;
                        uint _3021;
                        vec4 _3046;
                        float _3047;
                        vec4 _3062;
                        vec3 _3074;
                        vec4 _3090;
                        vec4 _3105;
                        float _3151;
                        bool _3152;
                        for (;;)
                        {
                            uint _3031 = ((_2848 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3020));
                            _3021 = (_3020 + 4294967295u) & _3020;
                            uint _3033 = _3031 * 40u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3047 = _3046.w;
                            uint _3049 = (_3031 * 40u) + 4u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3064 = (_3031 * 40u) + 8u;
                            _3074 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x));
                            uint _3077 = (_3031 * 40u) + 16u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3092 = (_3031 * 40u) + 20u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3107 = (_3031 * 40u) + 24u;
                            vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3126 = (_3031 * 40u) + 28u;
                            vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            _3151 = fma(_1830, _3139.z, fma(_1829, _3139.y, _3139.x * _1828)) + _3139.w;
                            _3152 = !((fma(_1830, _3120.z, fma(_1829, _3120.y, _3120.x * _1828)) + _3120.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            float frontier_phi_104_pred_3;
                            float frontier_phi_104_pred_4;
                            float frontier_phi_104_pred_5;
                            if (_3152)
                            {
                                float _3179 = _3046.x - _1828;
                                float _3180 = _3046.y - _1829;
                                float _3181 = _3046.z - _1830;
                                float _3182 = dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181));
                                float _3185 = inversesqrt(_3182);
                                float _3186 = _3185 * _3179;
                                float _3187 = _3185 * _3180;
                                float _3188 = _3185 * _3181;
                                float _3192 = 1.0 - (_3182 / (_3047 * _3047));
                                float _4144 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                                float _3197 = sqrt(_3182) * _3062.w;
                                float _3199 = 1.39999997615814208984375 / (_3197 + 1.39999997615814208984375);
                                float _3200 = _3199 * _3199;
                                float _3201 = 1.0 - _3200;
                                float _3203 = (_3201 * dot(vec3(_3186, _3187, _3188), vec3(0.0))) + _3200;
                                float _3206 = _3197 * _3197;
                                float _3210 = (fma(_1830, _3090.z, fma(_1829, _3090.y, _3090.x * _1828)) + _3090.w) / _3151;
                                float _3211 = (fma(_1830, _3105.z, fma(_1829, _3105.y, _3105.x * _1828)) + _3105.w) / _3151;
                                float _3215 = 1.0 - dot(vec2(_3210, _3211), vec2(_3210, _3211));
                                float _4160 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3216 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3217 = _3216 * (((isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0))) * _3193) / ((_3206 * 0.699999988079071044921875) + 1.0));
                                float _3227 = dot(vec3(0.0), vec3((-0.0) - (_1828 * _2689), (-0.0) - (_1829 * _2689), (-0.0) - (_1830 * _2689)));
                                float _4171 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3235 = (_3201 * dot(vec3(0.0), vec3(_3186, _3187, _3188))) + _3200;
                                float _4182 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3240 = (0.5 / (((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) + 9.9999999392252902907785028219223e-09) + _3236)) * _3236;
                                float _4193 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3247 = (_3216 * _3193) * (((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 3.1415927410125732421875) / ((_3206 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_104_pred = _3217 * _3062.y;
                                frontier_phi_104_pred_1 = _3217 * _3062.x;
                                frontier_phi_104_pred_2 = _3247 * _3074.z;
                                frontier_phi_104_pred_3 = _3247 * _3074.y;
                                frontier_phi_104_pred_4 = _3247 * _3074.x;
                                frontier_phi_104_pred_5 = _3217 * _3062.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                                frontier_phi_104_pred_3 = 0.0;
                                frontier_phi_104_pred_4 = 0.0;
                                frontier_phi_104_pred_5 = 0.0;
                            }
                            _3255 = frontier_phi_104_pred;
                            _3254 = frontier_phi_104_pred_1;
                            _3253 = frontier_phi_104_pred_2;
                            _3252 = frontier_phi_104_pred_3;
                            _3251 = frontier_phi_104_pred_4;
                            _3256 = frontier_phi_104_pred_5;
                            _3004 = _3254 + _3017;
                            _3005 = _3255 + _3018;
                            _3006 = _3256 + _3019;
                            _3001 = _3251 + _3014;
                            _3002 = _3252 + _3015;
                            _3003 = _3253 + _3016;
                            if (_3021 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3021;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _3006;
                        frontier_phi_98_pred_1 = _3005;
                        frontier_phi_98_pred_2 = _3004;
                        frontier_phi_98_pred_3 = _3003;
                        frontier_phi_98_pred_4 = _3002;
                        frontier_phi_98_pred_5 = _3001;
                    }
                    _2675 = frontier_phi_98_pred;
                    _2673 = frontier_phi_98_pred_1;
                    _2671 = frontier_phi_98_pred_2;
                    _2669 = frontier_phi_98_pred_3;
                    _2667 = frontier_phi_98_pred_4;
                    _2665 = frontier_phi_98_pred_5;
                    uint _2849 = _2848 + 1u;
                    if (_2849 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2842 = _2665;
                        _2843 = _2667;
                        _2844 = _2669;
                        _2845 = _2671;
                        _2846 = _2673;
                        _2847 = _2675;
                        _2848 = _2849;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2669;
                frontier_phi_78_79_ladder_1 = _2675;
                frontier_phi_78_79_ladder_2 = _2673;
                frontier_phi_78_79_ladder_3 = _2671;
                frontier_phi_78_79_ladder_4 = _2667;
                frontier_phi_78_79_ladder_5 = _2665;
            }
            else
            {
                frontier_phi_78_79_ladder = _2512;
                frontier_phi_78_79_ladder_1 = _2518;
                frontier_phi_78_79_ladder_2 = _2516;
                frontier_phi_78_79_ladder_3 = _2514;
                frontier_phi_78_79_ladder_4 = _2510;
                frontier_phi_78_79_ladder_5 = _2508;
            }
            _2664 = frontier_phi_78_79_ladder_5;
            _2666 = frontier_phi_78_79_ladder_4;
            _2668 = frontier_phi_78_79_ladder;
            _2670 = frontier_phi_78_79_ladder_3;
            _2672 = frontier_phi_78_79_ladder_2;
            _2674 = frontier_phi_78_79_ladder_1;
        }
        float _2679 = isnan(1.0) ? _834 : (isnan(_834) ? 1.0 : min(_834, 1.0));
        _2387 = (_2679 * _2670) + _2117;
        _2389 = (_2679 * _2672) + _2118;
        _2391 = (_2679 * _2674) + _2119;
        _2393 = ((_2664 * 0.039999999105930328369140625) * _2679) + _2222;
        _2395 = ((_2666 * 0.039999999105930328369140625) * _2679) + _2223;
        _2397 = ((_2668 * 0.039999999105930328369140625) * _2679) + _2224;
    }
    else
    {
        _2387 = _2117;
        _2389 = _2118;
        _2391 = _2119;
        _2393 = _2222;
        _2395 = _2223;
        _2397 = _2224;
    }
    uint _2403 = _810 + uint(cbMatDynParam._m0[0u].w);
    float _2409 = ((_738 * (_726 - (_726 * _699))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2403].x;
    float _2410 = ((_738 * (_727 - (_727 * _699))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2403].y;
    float _2411 = ((_738 * (_728 - (_728 * _699))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2403].z;
    float _4209 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4220 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4231 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _2428 = (((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2387 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _834))) + ((_2393 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1566)) * cbPerFrame._m0[3u].x)) + _2409;
    float _2430 = (_2410 + ((_2395 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1566)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2389 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _834)));
    float _2432 = (_2411 + ((_2397 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1566)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2391 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _834)));
    float _2433 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2434 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2435 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2441 = cbMtdParam._m0[2u].x * _2409;
    float _2442 = cbMtdParam._m0[2u].y * _2410;
    float _2443 = cbMtdParam._m0[2u].z * _2411;
    float _4257 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2445 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    uint _2446 = _808 + 6u;
    float _2454 = _794 / cbSceneParam._m0[86u].x;
    float _2455 = _795 / cbSceneParam._m0[86u].y;
    vec4 _2469 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2454, _2455, (log2((isnan(cbSceneParam._m0[77u].w) ? _767 : (isnan(_767) ? cbSceneParam._m0[77u].w : min(_767, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2471 = _2469.x;
    float _2472 = _2469.y;
    float _2473 = _2469.z;
    float _2474 = _2469.w;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    if (_767 > cbSceneParam._m0[78u].w)
    {
        float _2533 = isnan(_767) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _767 : min(cbSceneParam._m0[80u].w, _767));
        float _2534 = _2533 / _767;
        float _2545 = _2534 * _282;
        float _2546 = _283 * _2534;
        float _2547 = (-0.0) - _2546;
        float _2548 = _2534 * _284;
        float _2550 = (cbSceneParam._m0[77u].w * _2547) / _2533;
        float _2551 = _2550 + cbSceneParam._m0[79u].w;
        float _2552 = cbSceneParam._m0[79u].w - _2546;
        float _2558 = sqrt(((_2545 * _2545) + (_2546 * _2546)) + (_2548 * _2548));
        float _2561 = (1.0 - (cbSceneParam._m0[77u].w / _2533)) * _2558;
        float _2566 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2568 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2799;
        if (abs((_2547 - _2550) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2799 = ((((_2551 > 0.0) ? exp2(_2566 * _2551) : (2.0 - exp2(_2568 * _2551))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2561;
        }
        else
        {
            float _2722 = 1.0 / cbSceneParam._m0[80u].x;
            float _2723 = isnan(_2552) ? _2551 : (isnan(_2551) ? _2552 : max(_2551, _2552));
            float _2724 = isnan(_2552) ? _2551 : (isnan(_2551) ? _2552 : min(_2551, _2552));
            float _2733 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : min(_2723, 0.0));
            float _2734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : min(_2724, 0.0));
            _2799 = ((abs(_2558 / _2547) * cbSceneParam._m0[80u].y) * ((((_2733 - _2734) * 2.0) - ((exp2(_2566 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0)))) - exp2(_2566 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))))) * _2722)) - ((exp2(_2568 * _2733) - exp2(_2568 * _2734)) * _2722))) + (_2561 * cbSceneParam._m0[80u].z);
        }
        vec4 _2801 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2454, _2455, 1.0), 0.0);
        float _2810 = exp2((_2799 * (-1.44269502162933349609375)) * (1.0 - _2801.w));
        float _2811 = log2(_2810);
        float _2827 = log2(_2474);
        _2570 = (exp2(_2827 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].x)) * _2801.x) / cbSceneParam._m0[78u].x)) + _2471;
        _2572 = (exp2(_2827 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].y)) * _2801.y) / cbSceneParam._m0[78u].y)) + _2472;
        _2574 = (exp2(_2827 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2811 * cbSceneParam._m0[78u].z)) * _2801.z) / cbSceneParam._m0[78u].z)) + _2473;
        _2576 = _2810 * _2474;
    }
    else
    {
        _2570 = _2471;
        _2572 = _2472;
        _2574 = _2473;
        _2576 = _2474;
    }
    bool _2837;
    vec4 _2585;
    vec4 _2608;
    float _2610;
    float _2614;
    float _2615;
    float _2616;
    float _2619;
    float _2622;
    float _2625;
    float _2626;
    bool _2637;
    for (;;)
    {
        _2585 = cbMatDynParam._m0[0u];
        float _2587 = roundEven(_2585.y);
        bool _2588 = _2587 == 3.0;
        float _2590 = log2(_2576);
        float _2594 = exp2(_2590 * cbSceneParam._m0[78u].x);
        float _2595 = exp2(_2590 * cbSceneParam._m0[78u].y);
        float _2596 = exp2(_2590 * cbSceneParam._m0[78u].z);
        float _2597 = _2594 * _2433;
        float _2598 = _2595 * _2434;
        float _2599 = _2596 * _2435;
        float _2606 = _781 + (-0.5);
        _2608 = cbMtdParam._m0[1u];
        _2610 = _2608.y * _2606;
        float _2613 = (_2587 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2614 = _2613 * (_2588 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2570)));
        _2615 = _2613 * (_2588 ? _2598 : (_2598 + (cbSceneParam._m0[72u].w * _2572)));
        _2616 = _2613 * (_2588 ? _2599 : (_2599 + (cbSceneParam._m0[72u].w * _2574)));
        _2619 = ((_2441 * _2445) * _2594) * _2613;
        _2622 = ((_2442 * _2445) * _2595) * _2613;
        _2625 = ((_2443 * _2445) * _2596) * _2613;
        _2626 = _2606 * 0.999000012874603271484375;
        _2637 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2637)
        {
            if ((cbInstanceData._m0[_808 + 7u].x + _2626) < 0.5)
            {
                _2837 = true;
                break;
            }
        }
        uint _2757 = _810 + uint(_2585.w);
        if ((cbInstanceData._m0[_2757].w < 1.0) && ((cbInstanceData._m0[_2757].w + _2626) < 0.5))
        {
            _2837 = true;
            break;
        }
        if ((_2610 + 1.0) < _2608.x)
        {
            _2837 = true;
            break;
        }
        _2837 = false;
        break;
    }
    float _2992;
    if (_2837)
    {
        discard_state = true;
        _2992 = 0.0;
    }
    else
    {
        _2992 = cbInstanceData._m0[_2446].w;
    }
    SV_Target.x = _2614;
    SV_Target.y = _2615;
    SV_Target.z = _2616;
    SV_Target.w = _2992;
    SV_Target_1.x = _2619;
    SV_Target_1.y = _2622;
    SV_Target_1.z = _2625;
    SV_Target_1.w = cbInstanceData._m0[_2446].w;
    discard_exit();
}


