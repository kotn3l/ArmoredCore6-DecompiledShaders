#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1165;
uint _2352;
uint _2353;
uint _2354;
uint _2597;
uint _2598;
uint _2599;
float _2870;
float _2871;
float _2872;
float _2873;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _303 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _341 = cbMtdParam._m0[27u].w + _282;
    float _342 = cbMtdParam._m0[28u].x + _283;
    float _343 = cbMtdParam._m0[28u].y + _284;
    float _357 = (-0.0) - dot(vec3(_341, _342, _343), vec3(_211 * _203, _211 * _204, _211 * _205));
    float _358 = (-0.0) - dot(vec3(_341, _342, _343), vec3(_225 * TANGENT.x, _225 * TANGENT.y, _225 * TANGENT.z));
    float _359 = (-0.0) - dot(vec3(_341, _342, _343), vec3((-0.0) - (_218 * NORMAL.x), (-0.0) - (_218 * NORMAL.y), (-0.0) - (_218 * NORMAL.z)));
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _366 = _363 * _359;
    float _367 = (_363 * _357) + (((_303.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _368 = (_363 * _358) + (((_303.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _369 = _367 * cbMtdParam._m0[24u].x;
    float _370 = _368 * cbMtdParam._m0[23u].w;
    float _371 = fract(TEXCOORD.x);
    float _372 = fract(TEXCOORD.y);
    float _378;
    if (_369 > 0.0)
    {
        _378 = (1.0 - _371) / _369;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_369 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _371) / _369;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _378 = frontier_phi_3_2_ladder;
    }
    float _386;
    if (_370 > 0.0)
    {
        _386 = (1.0 - _372) / _370;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_370 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _372) / _370;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _386 = frontier_phi_7_6_ladder;
    }
    bool _388 = _366 > 0.0;
    float _390 = _388 ? (cbMtdParam._m0[17u].x / _366) : 5000.0;
    float _391 = isnan(_386) ? _378 : (isnan(_378) ? _386 : min(_378, _386));
    float _392 = isnan(_390) ? _391 : (isnan(_391) ? _390 : min(_391, _390));
    float _396 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _397 = _371 + (-0.5);
    float _400 = _372 + (-0.5);
    float _403 = ((_392 * _366) + _396) / _396;
    vec4 _428 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_397 + (_392 * _369)) / _403) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_400 + (_392 * _370)) / _403) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _438 = cbMtdParam._m0[9u].x * _428.x;
    float _439 = cbMtdParam._m0[9u].y * _428.y;
    float _440 = cbMtdParam._m0[9u].z * _428.z;
    float _458 = _367 * cbMtdParam._m0[26u].z;
    float _459 = _368 * cbMtdParam._m0[26u].y;
    bool _460 = _458 > 0.0;
    float _465;
    if (_460)
    {
        _465 = (1.0 - _371) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _371) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _465 = frontier_phi_11_10_ladder;
    }
    bool _467 = _459 > 0.0;
    float _472;
    if (_467)
    {
        _472 = (1.0 - _372) / _459;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_459 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _372) / _459;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _472 = frontier_phi_15_14_ladder;
    }
    float _475 = _388 ? (cbMtdParam._m0[19u].z / _366) : 5000.0;
    float _476 = isnan(_472) ? _465 : (isnan(_465) ? _472 : min(_465, _472));
    float _477 = isnan(_475) ? _476 : (isnan(_476) ? _475 : min(_476, _475));
    float _481 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _485 = ((_477 * _366) + _481) / _481;
    float _490 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _492 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _508 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_397 + (_477 * _458)) / _485) + 0.5) + _490) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_400 + (_477 * _459)) / _485) + 0.5) + _492) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _520;
    if (_460)
    {
        _520 = (1.0 - _371) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _371) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _520 = frontier_phi_19_18_ladder;
    }
    float _526;
    if (_467)
    {
        _526 = (1.0 - _372) / _459;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_459 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _372) / _459;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _526 = frontier_phi_23_22_ladder;
    }
    float _528 = isnan(_526) ? _520 : (isnan(_520) ? _526 : min(_520, _526));
    float _529 = isnan(_475) ? _528 : (isnan(_528) ? _475 : min(_528, _475));
    float _536 = ((_529 * _366) + _481) / _481;
    vec4 _556 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_397 + (_529 * _458)) / _536) + 0.5) + _490) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_400 + (_529 * _459)) / _536) + 0.5) + _492) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _558 = _556.x;
    float _565 = (_558 * ((_508.x * cbMtdParam._m0[10u].x) - _438)) + _438;
    float _566 = (_558 * ((_508.y * cbMtdParam._m0[10u].y) - _439)) + _439;
    float _567 = (_558 * ((_508.z * cbMtdParam._m0[10u].z) - _440)) + _440;
    float _581 = _367 * cbMtdParam._m0[27u].x;
    float _582 = _368 * cbMtdParam._m0[26u].w;
    bool _583 = _581 > 0.0;
    float _588;
    if (_583)
    {
        _588 = (1.0 - _371) / _581;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_581 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _371) / _581;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _588 = frontier_phi_27_26_ladder;
    }
    bool _590 = _582 > 0.0;
    float _595;
    if (_590)
    {
        _595 = (1.0 - _372) / _582;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_582 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _372) / _582;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _595 = frontier_phi_31_30_ladder;
    }
    float _598 = _388 ? (cbMtdParam._m0[23u].x / _366) : 5000.0;
    float _599 = isnan(_595) ? _588 : (isnan(_588) ? _595 : min(_588, _595));
    float _600 = isnan(_598) ? _599 : (isnan(_599) ? _598 : min(_599, _598));
    float _604 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _608 = ((_600 * _366) + _604) / _604;
    float _613 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _615 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _631 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_397 + (_600 * _581)) / _608) + 0.5) + _613) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_400 + (_600 * _582)) / _608) + 0.5) + _615) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _643;
    if (_583)
    {
        _643 = (1.0 - _371) / _581;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_581 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _371) / _581;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _643 = frontier_phi_35_34_ladder;
    }
    float _649;
    if (_590)
    {
        _649 = (1.0 - _372) / _582;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_582 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _372) / _582;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _649 = frontier_phi_39_38_ladder;
    }
    float _651 = isnan(_649) ? _643 : (isnan(_643) ? _649 : min(_643, _649));
    float _652 = isnan(_598) ? _651 : (isnan(_651) ? _598 : min(_651, _598));
    float _659 = ((_652 * _366) + _604) / _604;
    vec4 _680 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_397 + (_652 * _581)) / _659) + 0.5) + _613) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_400 + (_652 * _582)) / _659) + 0.5) + _615) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _682 = _680.x;
    float _689 = (_682 * ((_631.x * cbMtdParam._m0[13u].x) - _565)) + _565;
    float _690 = (_682 * ((_631.y * cbMtdParam._m0[13u].y) - _566)) + _566;
    float _691 = (_682 * ((_631.z * cbMtdParam._m0[13u].z) - _567)) + _567;
    float _700 = (cbMtdParam._m0[16u].x * cbMtdParam._m0[19u].y) * _689;
    float _702 = (_690 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].y;
    float _704 = (_691 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].z;
    vec4 _728 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _733 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _739 = ((_728.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _741 = (-0.0) - (cbMtdParam._m0[21u].x * ((_728.x * 0.5) + (-0.25)));
    float _742 = fract(_733);
    float _744 = fract(_733 + 0.5);
    vec4 _771 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_742 * _741) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_739 * _742) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _773 = _771.x;
    float _779 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_744 * _741) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_739 * _744) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _773) * abs((_742 * 2.0) + (-1.0))) + _773;
    float _785 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _789 = fract(abs(_785));
    float _799 = sin(cbMtdParam._m0[21u].z);
    float _800 = cos(cbMtdParam._m0[21u].z);
    float _801 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _802 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _827 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_802, (-0.0) - _799, _800 * _801) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_802, _800, _801 * _799) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_785 >= ((-0.0) - _785)) ? _789 : ((-0.0) - _789)) * cbMtdParam._m0[18u].z) - _779)) + cbMtdParam._m0[18u].w;
    float _828 = ceil(_827);
    float _2932 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _829 = isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0));
    float _849 = ((((cbMtdParam._m0[21u].w * _689) * cbMtdParam._m0[15u].x) - _700) * _829) + _700;
    float _850 = ((((cbMtdParam._m0[21u].w * _690) * cbMtdParam._m0[15u].y) - _702) * _829) + _702;
    float _851 = ((((cbMtdParam._m0[21u].w * _691) * cbMtdParam._m0[15u].z) - _704) * _829) + _704;
    float _855 = abs(cbMtdParam._m0[20u].w * _827);
    float _859 = (((_855 * cbMtdParam._m0[18u].y) - _779) * _855) + _779;
    float _2943 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _860 = isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0));
    vec4 _872 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _887 = (cbMtdParam._m0[14u].x * _872.x) * cbMtdParam._m0[19u].x;
    float _888 = (cbMtdParam._m0[14u].y * _872.y) * cbMtdParam._m0[19u].x;
    float _889 = (cbMtdParam._m0[14u].z * _872.z) * cbMtdParam._m0[19u].x;
    float _896 = exp2(log2(_860) * cbMtdParam._m0[20u].x);
    float _931 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _935 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _936 = _282 * _935;
    float _937 = _283 * _935;
    float _938 = _284 * _935;
    vec4 _943 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _945 = _943.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1015 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _1021 = (cbMatDynParam._m0[5u].x * _1015) + cbMatDynParam._m0[5u].y;
        float _2954 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0));
        float _1026 = (cbMatDynParam._m0[5u].z * _1015) + cbMatDynParam._m0[5u].w;
        float _2965 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0))) - _1022)) + _1022) < ((_945 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _958 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _959 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _968 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_958 * cbSceneParam._m0[86u].x, _959 * cbSceneParam._m0[86u].y));
    float _971 = _968.x * TEXCOORD_4;
    float _972 = (-0.0) - _936;
    float _973 = (-0.0) - _937;
    float _974 = (-0.0) - _938;
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1164;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1087 = (cbModelParam._m0[37u].x * ((((fma(_1004, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1089 = (cbModelParam._m0[37u].y * ((((fma(_1004, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1090 = (((((fma(_1004, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1087, _1089, _1090), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1087, _1089, _1090), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1087, _1089, _1090), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1087, _1089, _1090), 0.0);
        float _1127 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1114.x + (-0.5));
        float _1159 = _1157 * (_1114.y + (-0.5));
        float _1160 = _1157 * (_1114.z + (-0.5));
        _1164 = _1127 * (_1093.z + (-0.5));
        _1166 = _1127 * (_1093.y + (-0.5));
        _1167 = _1127 * (_1093.x + (-0.5));
        _1168 = _1137 * (_1100.z + (-0.5));
        _1169 = _1137 * (_1100.y + (-0.5));
        _1170 = _1137 * (_1100.x + (-0.5));
        _1171 = _1147 * (_1107.z + (-0.5));
        _1172 = _1147 * (_1107.y + (-0.5));
        _1173 = _1147 * (_1107.x + (-0.5));
        _1174 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        _1175 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        _1176 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    }
    else
    {
        _1164 = _1165;
        _1166 = _1165;
        _1167 = _1165;
        _1168 = _1165;
        _1169 = _1165;
        _1170 = _1165;
        _1171 = _1165;
        _1172 = _1165;
        _1173 = _1165;
        _1174 = _1165;
        _1175 = _1165;
        _1176 = _1165;
    }
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1232 = (cbModelParam._m0[38u].x * ((((fma(_1004, cbModelParam._m0[30u].z, fma(_1000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1233 = (cbModelParam._m0[38u].y * ((((fma(_1004, cbModelParam._m0[31u].z, fma(_1000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1234 = (((((fma(_1004, cbModelParam._m0[32u].z, fma(_1000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        float _1269 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1257.x + (-0.5));
        float _1301 = _1299 * (_1257.y + (-0.5));
        float _1302 = _1299 * (_1257.z + (-0.5));
        _1306 = _1269 * (_1236.z + (-0.5));
        _1307 = _1269 * (_1236.y + (-0.5));
        _1308 = _1269 * (_1236.x + (-0.5));
        _1309 = _1279 * (_1243.z + (-0.5));
        _1310 = _1279 * (_1243.y + (-0.5));
        _1311 = _1279 * (_1243.x + (-0.5));
        _1312 = _1289 * (_1250.z + (-0.5));
        _1313 = _1289 * (_1250.y + (-0.5));
        _1314 = _1289 * (_1250.x + (-0.5));
        _1315 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        _1316 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        _1317 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
    }
    else
    {
        _1306 = _1165;
        _1307 = _1165;
        _1308 = _1165;
        _1309 = _1165;
        _1310 = _1165;
        _1311 = _1165;
        _1312 = _1165;
        _1313 = _1165;
        _1314 = _1165;
        _1315 = _1165;
        _1316 = _1165;
        _1317 = _1165;
    }
    float _1332 = _936 * (-0.5);
    float _1333 = _937 * (-0.5);
    float _1334 = _938 * (-0.5);
    float _1335 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1338 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1341 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1376;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1348 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1164, _1168, _1171, _1174));
        float _1352 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1166, _1169, _1172, _1175));
        float _1356 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1363 = dot(vec4(cbModelParam._m0[39u]), vec4(_1332, _1333, _1334, 1.0));
        _1376 = dot(vec3(isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1363) ? 0.0 : (isnan(0.0) ? _1363 : max(0.0, _1363))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1376 = 1.0;
    }
    float _1387;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1378 = dot(vec4(cbModelParam._m0[40u]), vec4(_1332, _1333, _1334, 1.0));
        _1387 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1387 = 1.0;
    }
    float _1391 = (_1387 * cbModelParam._m0[1u].x) + (_1376 * (1.0 - cbModelParam._m0[1u].x));
    float _1397 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1477;
    float _1479;
    float _1481;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1444 = fma(_1004, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996)) + cbModelParam._m0[13u].w;
        float _1448 = fma(_1004, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996)) + cbModelParam._m0[14u].w;
        float _1452 = fma(_1004, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996)) + cbModelParam._m0[15u].w;
        float _1455 = fma(_974, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972));
        float _1458 = fma(_974, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972));
        float _1461 = fma(_974, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972));
        float _1487;
        if (_1455 > 0.0)
        {
            _1487 = abs((1.0 - _1444) / _1455);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1444 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1487 = frontier_phi_57_55_ladder;
        }
        float _1763;
        if (_1458 > 0.0)
        {
            _1763 = abs((1.0 - _1448) / _1458);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1448 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1763 = frontier_phi_66_62_ladder;
        }
        float _2084;
        if (_1461 > 0.0)
        {
            _2084 = abs((1.0 - _1452) / _1461);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1452 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2084 = frontier_phi_80_73_ladder;
        }
        float _2086 = isnan(_1763) ? _1487 : (isnan(_1487) ? _1763 : min(_1487, _1763));
        float _2087 = isnan(_2084) ? _2086 : (isnan(_2086) ? _2084 : min(_2086, _2084));
        float _2091 = (_2087 * _1455) + _1444;
        float _2092 = (_2087 * _1458) + _1448;
        float _2093 = (_2087 * _1461) + _1452;
        float _2094 = _2087 * 9.9999997473787516355514526367188e-05;
        float _2095 = (-1.0) - _2094;
        float _2097 = _2094 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2093 > _2097) || ((_2093 < _2095) || ((_2092 > _2097) || ((_2092 < _2095) || ((_2091 < _2095) || (_2091 > _2097))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2220 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2093, cbModelParam._m0[9u].z, fma(_2092, cbModelParam._m0[9u].y, _2091 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2093, cbModelParam._m0[10u].z, fma(_2092, cbModelParam._m0[10u].y, _2091 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2093, cbModelParam._m0[11u].z, fma(_2092, cbModelParam._m0[11u].y, _2091 * cbModelParam._m0[11u].x))), _1397);
            frontier_phi_56_80_ladder = _2220.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2220.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2220.x * cbModelParam._m0[1u].y;
        }
        _1477 = frontier_phi_56_80_ladder_2;
        _1479 = frontier_phi_56_80_ladder_1;
        _1481 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1465 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_972, _973, _974), _1397);
        _1477 = _1465.x * cbModelParam._m0[1u].y;
        _1479 = _1465.y * cbModelParam._m0[1u].y;
        _1481 = _1465.z * cbModelParam._m0[1u].y;
    }
    float _1484 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1572;
    float _1574;
    float _1576;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1536 = fma(_1004, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996)) + cbModelParam._m0[21u].w;
        float _1540 = fma(_1004, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996)) + cbModelParam._m0[22u].w;
        float _1544 = fma(_1004, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996)) + cbModelParam._m0[23u].w;
        float _1547 = fma(_974, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972));
        float _1550 = fma(_974, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972));
        float _1553 = fma(_974, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972));
        float _1768;
        if (_1547 > 0.0)
        {
            _1768 = abs((1.0 - _1536) / _1547);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1536 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1768 = frontier_phi_68_64_ladder;
        }
        float _2110;
        if (_1550 > 0.0)
        {
            _2110 = abs((1.0 - _1540) / _1550);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1540 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2110 = frontier_phi_82_75_ladder;
        }
        float _2282;
        if (_1553 > 0.0)
        {
            _2282 = abs((1.0 - _1544) / _1553);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1544 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2282 = frontier_phi_100_93_ladder;
        }
        float _2284 = isnan(_2110) ? _1768 : (isnan(_1768) ? _2110 : min(_1768, _2110));
        float _2285 = isnan(_2282) ? _2284 : (isnan(_2284) ? _2282 : min(_2284, _2282));
        float _2289 = (_2285 * _1547) + _1536;
        float _2290 = (_2285 * _1550) + _1540;
        float _2291 = (_2285 * _1553) + _1544;
        float _2292 = _2285 * 9.9999997473787516355514526367188e-05;
        float _2293 = (-1.0) - _2292;
        float _2295 = _2292 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2291 > _2295) || ((_2291 < _2293) || ((_2290 > _2295) || ((_2290 < _2293) || ((_2289 < _2293) || (_2289 > _2295))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2291, cbModelParam._m0[17u].z, fma(_2290, cbModelParam._m0[17u].y, _2289 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2291, cbModelParam._m0[18u].z, fma(_2290, cbModelParam._m0[18u].y, _2289 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2291, cbModelParam._m0[19u].z, fma(_2290, cbModelParam._m0[19u].y, _2289 * cbModelParam._m0[19u].x))), _1484);
            frontier_phi_65_100_ladder = _2460.z * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2460.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2460.x * cbModelParam._m0[1u].z;
        }
        _1572 = frontier_phi_65_100_ladder_2;
        _1574 = frontier_phi_65_100_ladder_1;
        _1576 = frontier_phi_65_100_ladder;
    }
    else
    {
        vec4 _1556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_972, _973, _974), _1484);
        _1572 = _1556.x * cbModelParam._m0[1u].z;
        _1574 = _1556.y * cbModelParam._m0[1u].z;
        _1576 = _1556.z * cbModelParam._m0[1u].z;
    }
    float _1588 = _971 * 0.01200000010430812835693359375;
    float _1590 = _1588 * ((cbModelParam._m0[1u].w * (_1572 - _1477)) + _1477);
    float _1591 = _1588 * ((cbModelParam._m0[1u].w * (_1574 - _1479)) + _1479);
    float _1592 = _1588 * ((cbModelParam._m0[1u].w * (_1576 - _1481)) + _1481);
    float _1613 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, _1590 * cbSceneParam._m0[91u].x));
    uint _1626 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1630 = floatBitsToUint(cbInstanceData._m0[_1626 + 5u]);
    uint _1632 = _1630.x * 14u;
    uint _1633 = _1632 + 13u;
    float _1638 = _971 + (-1.0);
    float _1641 = (cbLight._m0[_1633].x * _1638) + 1.0;
    float _1642 = (cbLight._m0[_1633].y * _1638) + 1.0;
    uint _1643 = _1632 + 8u;
    float _1654 = cbLight._m0[_1632].x + _936;
    float _1655 = cbLight._m0[_1632].y + _937;
    float _1656 = cbLight._m0[_1632].z + _938;
    float _1660 = inversesqrt(dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656)));
    float _1664 = dot(vec3(0.0), vec3(cbLight._m0[_1632].xyz));
    float _3091 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1667 = isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0));
    float _1668 = dot(vec3(0.0), vec3(_936, _937, _938));
    float _3102 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1671 = isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0));
    float _1672 = dot(vec3(cbLight._m0[_1632].xyz), vec3(_1654 * _1660, _1655 * _1660, _1656 * _1660));
    float _3113 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1683 = (exp2(log2(1.0 - (isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1689 = (0.5 / ((_1667 + 9.9999999392252902907785028219223e-09) + _1671)) * _1667;
    float _3124 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1691 = (isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0))) * 0.31831014156341552734375;
    float _1693 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
    uint _1703 = _1632 + 9u;
    uint _1709 = _1632 | 1u;
    float _1715 = cbLight._m0[_1709].x + _936;
    float _1716 = cbLight._m0[_1709].y + _937;
    float _1717 = cbLight._m0[_1709].z + _938;
    float _1721 = inversesqrt(dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717)));
    float _1725 = dot(vec3(0.0), vec3(cbLight._m0[_1709].xyz));
    float _3140 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1728 = isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0));
    float _1729 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_1715 * _1721, _1716 * _1721, _1717 * _1721));
    float _3151 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1738 = (exp2(log2(1.0 - (isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1742 = (0.5 / ((_1728 + 9.9999999392252902907785028219223e-09) + _1671)) * _1728;
    float _3162 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1744 = (isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0))) * 0.31831014156341552734375;
    float _1745 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
    float _1755 = (((_1738 * cbLight._m0[_1703].x) * _1744) * _1745) + (((_1683 * cbLight._m0[_1643].x) * _1691) * _1693);
    float _1756 = (((_1738 * cbLight._m0[_1703].y) * _1744) * _1745) + (((_1683 * cbLight._m0[_1643].y) * _1691) * _1693);
    float _1757 = (((_1738 * cbLight._m0[_1703].z) * _1744) * _1745) + (((_1683 * cbLight._m0[_1643].z) * _1691) * _1693);
    float _1872;
    float _1874;
    float _1876;
    if (_1630.y == 0u)
    {
        float _1812 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1813 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1812;
        float _1814 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1812;
        float _1815 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1812;
        uvec4 _1827 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1828 = _1827.x;
        uint _1839 = uint((float(_1827.y) * floor(float(uint(cbSceneParam._m0[85u].y * _959) / _1828))) + floor(float(uint(cbSceneParam._m0[85u].x * _958) / _1828)));
        float _1849 = (log2(_1815 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1850 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        uint _1853 = uint(isnan(14.0) ? _1850 : (isnan(_1850) ? 14.0 : min(_1850, 14.0)));
        uvec4 _1858 = texelFetch(g_lightClusterGridBuffer, int(((_1853 << 2u) + (_1839 << 6u)) >> 2u));
        uint _1859 = _1858.x;
        uint _1860 = _1827.z;
        float _1959;
        float _1961;
        float _1963;
        if (((((1u << ((_1860 >> 4u) & 15u)) + 4294967295u) & _1859) == 0u) || ((_1860 & 240u) == 0u))
        {
            _1959 = 0.0;
            _1961 = 0.0;
            _1963 = 0.0;
        }
        else
        {
            float _1960;
            float _1962;
            float _1964;
            float _2135 = 0.0;
            float _2136 = 0.0;
            float _2137 = 0.0;
            uint _2138 = 0u;
            uint _2147;
            bool _2148;
            for (;;)
            {
                _2147 = texelFetch(g_lightClassification, int((((_1853 << 5u) + (_1839 << 9u)) + (_2138 << 2u)) >> 2u)).x;
                _2148 = _2147 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                if (_2148)
                {
                    frontier_phi_95_pred = _2137;
                    frontier_phi_95_pred_1 = _2136;
                    frontier_phi_95_pred_2 = _2135;
                }
                else
                {
                    float _2322;
                    float _2323;
                    float _2324;
                    uint _2325;
                    _2322 = _2135;
                    _2323 = _2136;
                    _2324 = _2137;
                    _2325 = _2147;
                    float _2229;
                    float _2230;
                    float _2231;
                    for (;;)
                    {
                        uint _2329 = uint(findLSB(_2325)) + (_2138 << 5u);
                        uint _2326 = (_2325 + 4294967295u) & _2325;
                        uint _2331 = _2329 * 48u;
                        vec4 _2345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2331)).x, texelFetch(g_PointLightRenderingBuffer, int(_2331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2331 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2331 + 3u)).x));
                        uint _2362 = (_2329 * 48u) + 8u;
                        vec3 _2373 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2362)).x, texelFetch(g_PointLightRenderingBuffer, int(_2362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2362 + 2u)).x));
                        float _2377 = _2345.x - _1813;
                        float _2378 = _2345.y - _1814;
                        float _2379 = _2345.z - _1815;
                        float _2380 = dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379));
                        float _2383 = inversesqrt(_2380);
                        float _2392 = 1.0 - (_2380 * _2345.w);
                        float _3188 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
                        float _2394 = sqrt(_2380) * uintBitsToFloat(uvec4(_2352, _2353, _2354, texelFetch(g_PointLightRenderingBuffer, int(((_2329 * 48u) + 4u) + 3u)).x)).w;
                        float _2397 = 1.39999997615814208984375 / (_2394 + 1.39999997615814208984375);
                        float _2398 = _2397 * _2397;
                        float _2401 = ((1.0 - _2398) * dot(vec3(0.0), vec3(_2383 * _2377, _2383 * _2378, _2383 * _2379))) + _2398;
                        float _2403 = (-0.0) - _1813;
                        float _2404 = (-0.0) - _1814;
                        float _2405 = (-0.0) - _1815;
                        float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
                        float _2413 = dot(vec3(0.0), vec3(_2409 * _2403, _2409 * _2404, _2409 * _2405));
                        float _3199 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
                        float _3210 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
                        float _2417 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
                        float _2421 = (0.5 / (((isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0))) + 9.9999999392252902907785028219223e-09) + _2417)) * _2417;
                        float _3221 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
                        float _2430 = (((isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0))) * 3.1415927410125732421875) / (((_2394 * _2394) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0)));
                        _2229 = (_2430 * _2373.x) + _2322;
                        _2230 = (_2430 * _2373.y) + _2323;
                        _2231 = (_2430 * _2373.z) + _2324;
                        if (_2326 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2322 = _2229;
                            _2323 = _2230;
                            _2324 = _2231;
                            _2325 = _2326;
                        }
                    }
                    frontier_phi_95_pred = _2231;
                    frontier_phi_95_pred_1 = _2230;
                    frontier_phi_95_pred_2 = _2229;
                }
                _1964 = frontier_phi_95_pred;
                _1962 = frontier_phi_95_pred_1;
                _1960 = frontier_phi_95_pred_2;
                uint _2139 = _2138 + 1u;
                if (_2139 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2135 = _1960;
                    _2136 = _1962;
                    _2137 = _1964;
                    _2138 = _2139;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1959 = _1960;
            _1961 = _1962;
            _1963 = _1964;
        }
        uvec4 _1967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1968 = _1967.z;
        uint _1970 = (_1968 >> 8u) & 15u;
        float _2115;
        float _2117;
        float _2119;
        if (((4294967295u << _1970) & _1859) == 0u)
        {
            _2115 = _1959;
            _2117 = _1961;
            _2119 = _1963;
        }
        else
        {
            float _2131 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            if (_1970 < ((_1968 >> 12u) & 15u))
            {
                float _2116;
                float _2118;
                float _2120;
                float _2308 = _1959;
                float _2309 = _1961;
                float _2310 = _1963;
                uint _2311 = _1970;
                uint _2320;
                bool _2321;
                for (;;)
                {
                    _2320 = texelFetch(g_lightClassification, int((((_1853 << 5u) + (_1839 << 9u)) + (_2311 << 2u)) >> 2u)).x;
                    _2321 = _2320 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    if (_2321)
                    {
                        frontier_phi_109_pred = _2310;
                        frontier_phi_109_pred_1 = _2309;
                        frontier_phi_109_pred_2 = _2308;
                    }
                    else
                    {
                        float _2465;
                        float _2466;
                        float _2467;
                        float _2686;
                        float _2687;
                        float _2688;
                        float _2475 = _2308;
                        float _2476 = _2309;
                        float _2477 = _2310;
                        uint _2478 = _2320;
                        uint _2479;
                        uint _2489;
                        vec4 _2504;
                        float _2505;
                        vec3 _2517;
                        vec4 _2532;
                        vec4 _2547;
                        float _2593;
                        bool _2594;
                        for (;;)
                        {
                            _2489 = ((_2311 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2478));
                            _2479 = (_2478 + 4294967295u) & _2478;
                            uint _2491 = _2489 * 40u;
                            _2504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2491 + 3u)).x));
                            _2505 = _2504.w;
                            uint _2507 = (_2489 * 40u) + 8u;
                            _2517 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2507 + 2u)).x));
                            uint _2519 = (_2489 * 40u) + 16u;
                            _2532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 3u)).x));
                            uint _2534 = (_2489 * 40u) + 20u;
                            _2547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2534 + 3u)).x));
                            uint _2549 = (_2489 * 40u) + 24u;
                            vec4 _2562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 3u)).x));
                            uint _2568 = (_2489 * 40u) + 28u;
                            vec4 _2581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 3u)).x));
                            _2593 = fma(_1815, _2581.z, fma(_1814, _2581.y, _2581.x * _1813)) + _2581.w;
                            _2594 = !((fma(_1815, _2562.z, fma(_1814, _2562.y, _2562.x * _1813)) + _2562.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            if (_2594)
                            {
                                float _2628 = _2504.x - _1813;
                                float _2629 = _2504.y - _1814;
                                float _2630 = _2504.z - _1815;
                                float _2631 = dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630));
                                float _2634 = inversesqrt(_2631);
                                float _2641 = 1.0 - (_2631 / (_2505 * _2505));
                                float _3232 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
                                float _2643 = sqrt(_2631) * uintBitsToFloat(uvec4(_2597, _2598, _2599, texelFetch(g_SpotLightRenderingBuffer, int(((_2489 * 40u) + 4u) + 3u)).x)).w;
                                float _2645 = 1.39999997615814208984375 / (_2643 + 1.39999997615814208984375);
                                float _2646 = _2645 * _2645;
                                float _2649 = (fma(_1815, _2532.z, fma(_1814, _2532.y, _2532.x * _1813)) + _2532.w) / _2593;
                                float _2650 = (fma(_1815, _2547.z, fma(_1814, _2547.y, _2547.x * _1813)) + _2547.w) / _2593;
                                float _2654 = 1.0 - dot(vec2(_2649, _2650), vec2(_2649, _2650));
                                float _3243 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
                                float _2662 = dot(vec3(0.0), vec3((-0.0) - (_1813 * _2131), (-0.0) - (_1814 * _2131), (-0.0) - (_1815 * _2131)));
                                float _3254 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                                float _2670 = ((1.0 - _2646) * dot(vec3(0.0), vec3(_2634 * _2628, _2634 * _2629, _2634 * _2630))) + _2646;
                                float _3265 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
                                float _2671 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
                                float _2675 = (0.5 / (((isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0))) + 9.9999999392252902907785028219223e-09) + _2671)) * _2671;
                                float _3276 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
                                float _2682 = ((isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))) * (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0)))) * (((isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))) * 3.1415927410125732421875) / (((_2643 * _2643) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2682 * _2517.y;
                                frontier_phi_115_pred_1 = _2682 * _2517.x;
                                frontier_phi_115_pred_2 = _2682 * _2517.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                            }
                            _2687 = frontier_phi_115_pred;
                            _2686 = frontier_phi_115_pred_1;
                            _2688 = frontier_phi_115_pred_2;
                            _2465 = _2686 + _2475;
                            _2466 = _2687 + _2476;
                            _2467 = _2688 + _2477;
                            if (_2479 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2475 = _2465;
                                _2476 = _2466;
                                _2477 = _2467;
                                _2478 = _2479;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2467;
                        frontier_phi_109_pred_1 = _2466;
                        frontier_phi_109_pred_2 = _2465;
                    }
                    _2120 = frontier_phi_109_pred;
                    _2118 = frontier_phi_109_pred_1;
                    _2116 = frontier_phi_109_pred_2;
                    uint _2312 = _2311 + 1u;
                    if (_2312 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2308 = _2116;
                        _2309 = _2118;
                        _2310 = _2120;
                        _2311 = _2312;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2120;
                frontier_phi_84_85_ladder_1 = _2118;
                frontier_phi_84_85_ladder_2 = _2116;
            }
            else
            {
                frontier_phi_84_85_ladder = _1963;
                frontier_phi_84_85_ladder_1 = _1961;
                frontier_phi_84_85_ladder_2 = _1959;
            }
            _2115 = frontier_phi_84_85_ladder_2;
            _2117 = frontier_phi_84_85_ladder_1;
            _2119 = frontier_phi_84_85_ladder;
        }
        float _2124 = isnan(1.0) ? _971 : (isnan(_971) ? 1.0 : min(_971, 1.0));
        _1872 = ((_2115 * 0.039999999105930328369140625) * _2124) + _1755;
        _1874 = ((_2117 * 0.039999999105930328369140625) * _2124) + _1756;
        _1876 = ((_2119 * 0.039999999105930328369140625) * _2124) + _1757;
    }
    else
    {
        _1872 = _1755;
        _1874 = _1756;
        _1876 = _1757;
    }
    uint _1882 = _1626 + 9u;
    uint _1883 = _1882 + uint(cbMatDynParam._m0[0u].w);
    float _1889 = (cbSceneParam._m0[72u].y * ((_896 * ((_887 - _849) - (_887 * _860))) + _849)) * cbInstanceData._m0[_1883].x;
    float _1890 = (cbSceneParam._m0[72u].y * ((_896 * ((_888 - _850) - (_888 * _860))) + _850)) * cbInstanceData._m0[_1883].y;
    float _1891 = (((_896 * ((_889 - _851) - (_889 * _860))) + _851) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1883].z;
    float _1898 = _1889 + ((_1872 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1391)) * cbPerFrame._m0[3u].x);
    float _1899 = _1890 + ((_1874 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1391)) * cbPerFrame._m0[3u].x);
    float _1900 = _1891 + ((_1876 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1391)) * cbPerFrame._m0[3u].x);
    float _1901 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1902 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1909 = cbMtdParam._m0[2u].x * _1889;
    float _1910 = cbMtdParam._m0[2u].y * _1890;
    float _1911 = cbMtdParam._m0[2u].z * _1891;
    float _3307 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1913 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    uint _1914 = _1626 + 6u;
    float _1922 = _958 / cbSceneParam._m0[86u].x;
    float _1923 = _959 / cbSceneParam._m0[86u].y;
    vec4 _1937 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1922, _1923, (log2((isnan(cbSceneParam._m0[77u].w) ? _931 : (isnan(_931) ? cbSceneParam._m0[77u].w : min(_931, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1939 = _1937.x;
    float _1940 = _1937.y;
    float _1941 = _1937.z;
    float _1942 = _1937.w;
    float _2016;
    float _2018;
    float _2020;
    float _2022;
    if (_931 > cbSceneParam._m0[78u].w)
    {
        float _1978 = isnan(_931) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _931 : min(cbSceneParam._m0[80u].w, _931));
        float _1979 = _1978 / _931;
        float _1990 = _1979 * _282;
        float _1991 = _283 * _1979;
        float _1992 = (-0.0) - _1991;
        float _1993 = _1979 * _284;
        float _1995 = (cbSceneParam._m0[77u].w * _1992) / _1978;
        float _1996 = _1995 + cbSceneParam._m0[79u].w;
        float _1997 = cbSceneParam._m0[79u].w - _1991;
        float _2003 = sqrt(((_1990 * _1990) + (_1991 * _1991)) + (_1993 * _1993));
        float _2006 = (1.0 - (cbSceneParam._m0[77u].w / _1978)) * _2003;
        float _2012 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2014 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2239;
        if (abs((_1992 - _1995) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2239 = ((((_1996 > 0.0) ? exp2(_2012 * _1996) : (2.0 - exp2(_2014 * _1996))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2006;
        }
        else
        {
            float _2161 = 1.0 / cbSceneParam._m0[80u].x;
            float _2162 = isnan(_1997) ? _1996 : (isnan(_1996) ? _1997 : max(_1996, _1997));
            float _2163 = isnan(_1997) ? _1996 : (isnan(_1996) ? _1997 : min(_1996, _1997));
            float _2172 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : min(_2162, 0.0));
            float _2173 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : min(_2163, 0.0));
            _2239 = ((abs(_2003 / _1992) * cbSceneParam._m0[80u].y) * ((((_2172 - _2173) * 2.0) - ((exp2(_2012 * (isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0)))) - exp2(_2012 * (isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))))) * _2161)) - ((exp2(_2014 * _2172) - exp2(_2014 * _2173)) * _2161))) + (_2006 * cbSceneParam._m0[80u].z);
        }
        vec4 _2241 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1922, _1923, 1.0), 0.0);
        float _2250 = exp2((_2239 * (-1.44269502162933349609375)) * (1.0 - _2241.w));
        float _2251 = log2(_2250);
        float _2267 = log2(_1942);
        _2016 = (exp2(_2267 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2251 * cbSceneParam._m0[78u].x)) * _2241.x) / cbSceneParam._m0[78u].x)) + _1939;
        _2018 = (exp2(_2267 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2251 * cbSceneParam._m0[78u].y)) * _2241.y) / cbSceneParam._m0[78u].y)) + _1940;
        _2020 = (exp2(_2267 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2251 * cbSceneParam._m0[78u].z)) * _2241.z) / cbSceneParam._m0[78u].z)) + _1941;
        _2022 = _2250 * _1942;
    }
    else
    {
        _2016 = _1939;
        _2018 = _1940;
        _2020 = _1941;
        _2022 = _1942;
    }
    bool _2277;
    vec4 _2031;
    vec4 _2054;
    float _2056;
    float _2060;
    float _2061;
    float _2062;
    float _2065;
    float _2068;
    float _2071;
    float _2072;
    bool _2083;
    for (;;)
    {
        _2031 = cbMatDynParam._m0[0u];
        float _2033 = roundEven(_2031.y);
        bool _2034 = _2033 == 3.0;
        float _2036 = log2(_2022);
        float _2040 = exp2(_2036 * cbSceneParam._m0[78u].x);
        float _2041 = exp2(_2036 * cbSceneParam._m0[78u].y);
        float _2042 = exp2(_2036 * cbSceneParam._m0[78u].z);
        float _2043 = _2040 * _1901;
        float _2044 = _2041 * _1902;
        float _2045 = _2042 * _1903;
        float _2052 = _945 + (-0.5);
        _2054 = cbMtdParam._m0[1u];
        _2056 = _2054.y * _2052;
        float _2059 = (_2033 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2060 = _2059 * (_2034 ? _2043 : (_2043 + (cbSceneParam._m0[72u].w * _2016)));
        _2061 = _2059 * (_2034 ? _2044 : (_2044 + (cbSceneParam._m0[72u].w * _2018)));
        _2062 = _2059 * (_2034 ? _2045 : (_2045 + (cbSceneParam._m0[72u].w * _2020)));
        _2065 = ((_1909 * _1913) * _2040) * _2059;
        _2068 = ((_1910 * _1913) * _2041) * _2059;
        _2071 = ((_1911 * _1913) * _2042) * _2059;
        _2072 = _2052 * 0.999000012874603271484375;
        _2083 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2083)
        {
            if ((cbInstanceData._m0[_1626 + 7u].x + _2072) < 0.5)
            {
                _2277 = true;
                break;
            }
        }
        uint _2196 = _1882 + uint(_2031.w);
        if ((cbInstanceData._m0[_2196].w < 1.0) && ((cbInstanceData._m0[_2196].w + _2072) < 0.5))
        {
            _2277 = true;
            break;
        }
        if ((_2056 + 1.0) < _2054.x)
        {
            _2277 = true;
            break;
        }
        _2277 = false;
        break;
    }
    float _2435;
    if (_2277)
    {
        discard_state = true;
        _2435 = 0.0;
    }
    else
    {
        _2435 = cbInstanceData._m0[_1914].w;
    }
    SV_Target.x = _2060;
    SV_Target.y = _2061;
    SV_Target.z = _2062;
    SV_Target.w = _2435;
    SV_Target_1.x = _2065;
    SV_Target_1.y = _2068;
    SV_Target_1.z = _2071;
    SV_Target_1.w = cbInstanceData._m0[_1914].w;
    discard_exit();
}


