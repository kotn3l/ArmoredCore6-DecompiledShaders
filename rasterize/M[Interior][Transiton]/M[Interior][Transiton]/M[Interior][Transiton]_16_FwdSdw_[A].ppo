#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1512;
float _3988;
float _3989;
float _3990;
float _3991;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    float _282 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _292 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _282);
    float _293 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _282);
    float _294 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _282);
    vec4 _308 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _311 = _308.x;
    vec4 _329 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _346 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _311) + cbMtdParam._m0[12u].x) * _329.x;
    float _348 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _311) + cbMtdParam._m0[12u].y) * _329.y;
    float _350 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _311) + cbMtdParam._m0[12u].z) * _329.z;
    vec4 _368 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _407 = cbMtdParam._m0[27u].w + _292;
    float _408 = cbMtdParam._m0[28u].x + _293;
    float _409 = cbMtdParam._m0[28u].y + _294;
    float _423 = (-0.0) - dot(vec3(_407, _408, _409), vec3(_222, _223, _224));
    float _424 = (-0.0) - dot(vec3(_407, _408, _409), vec3(_236, _237, _238));
    float _425 = (-0.0) - dot(vec3(_407, _408, _409), vec3((-0.0) - _229, (-0.0) - _230, (-0.0) - _231));
    float _429 = inversesqrt(dot(vec3(_423, _424, _425), vec3(_423, _424, _425)));
    float _432 = _429 * _425;
    float _433 = (_429 * _423) + ((cbMtdParam._m0[25u].w * _311) * ((_368.x * 2.0) + (-1.0)));
    float _434 = (_429 * _424) + ((cbMtdParam._m0[26u].x * _311) * ((_368.y * 2.0) + (-1.0)));
    float _435 = _433 * cbMtdParam._m0[24u].x;
    float _436 = _434 * cbMtdParam._m0[23u].w;
    float _437 = fract(TEXCOORD.x);
    float _438 = fract(TEXCOORD.y);
    float _444;
    if (_435 > 0.0)
    {
        _444 = (1.0 - _437) / _435;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_435 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _437) / _435;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _444 = frontier_phi_3_2_ladder;
    }
    float _452;
    if (_436 > 0.0)
    {
        _452 = (1.0 - _438) / _436;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _438) / _436;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _452 = frontier_phi_7_6_ladder;
    }
    bool _454 = _432 > 0.0;
    float _456 = _454 ? (cbMtdParam._m0[17u].x / _432) : 5000.0;
    float _457 = isnan(_452) ? _444 : (isnan(_444) ? _452 : min(_444, _452));
    float _458 = isnan(_456) ? _457 : (isnan(_457) ? _456 : min(_457, _456));
    float _462 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _463 = _437 + (-0.5);
    float _466 = _438 + (-0.5);
    float _469 = ((_458 * _432) + _462) / _462;
    vec4 _494 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_463 + (_458 * _435)) / _469) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_466 + (_458 * _436)) / _469) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _507 = (_494.x * _311) * cbMtdParam._m0[9u].x;
    float _508 = (_494.y * _311) * cbMtdParam._m0[9u].y;
    float _509 = (_494.z * _311) * cbMtdParam._m0[9u].z;
    float _527 = _433 * cbMtdParam._m0[26u].z;
    float _528 = _434 * cbMtdParam._m0[26u].y;
    bool _529 = _527 > 0.0;
    float _534;
    if (_529)
    {
        _534 = (1.0 - _437) / _527;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _437) / _527;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _534 = frontier_phi_11_10_ladder;
    }
    bool _536 = _528 > 0.0;
    float _541;
    if (_536)
    {
        _541 = (1.0 - _438) / _528;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_528 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _438) / _528;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _541 = frontier_phi_15_14_ladder;
    }
    float _544 = _454 ? (cbMtdParam._m0[19u].z / _432) : 5000.0;
    float _545 = isnan(_541) ? _534 : (isnan(_534) ? _541 : min(_534, _541));
    float _546 = isnan(_544) ? _545 : (isnan(_545) ? _544 : min(_545, _544));
    float _550 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _554 = ((_546 * _432) + _550) / _550;
    float _559 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _561 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _577 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_463 + (_546 * _527)) / _554) + 0.5) + _559) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_466 + (_546 * _528)) / _554) + 0.5) + _561) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _592;
    if (_529)
    {
        _592 = (1.0 - _437) / _527;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _437) / _527;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _592 = frontier_phi_19_18_ladder;
    }
    float _598;
    if (_536)
    {
        _598 = (1.0 - _438) / _528;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_528 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _438) / _528;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _598 = frontier_phi_23_22_ladder;
    }
    float _600 = isnan(_598) ? _592 : (isnan(_592) ? _598 : min(_592, _598));
    float _601 = isnan(_544) ? _600 : (isnan(_600) ? _544 : min(_600, _544));
    float _608 = ((_601 * _432) + _550) / _550;
    vec4 _628 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_463 + (_601 * _527)) / _608) + 0.5) + _559) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_466 + (_601 * _528)) / _608) + 0.5) + _561) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _630 = _628.x;
    float _640 = (((((cbMtdParam._m0[10u].x * _311) * _577.x) - _507) * _311) * _630) + _507;
    float _641 = (((((cbMtdParam._m0[10u].y * _311) * _577.y) - _508) * _311) * _630) + _508;
    float _642 = (((((cbMtdParam._m0[10u].z * _311) * _577.z) - _509) * _311) * _630) + _509;
    float _655 = _433 * cbMtdParam._m0[27u].x;
    float _656 = _434 * cbMtdParam._m0[26u].w;
    bool _657 = _655 > 0.0;
    float _662;
    if (_657)
    {
        _662 = (1.0 - _437) / _655;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_655 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _437) / _655;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _662 = frontier_phi_27_26_ladder;
    }
    bool _664 = _656 > 0.0;
    float _669;
    if (_664)
    {
        _669 = (1.0 - _438) / _656;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_656 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _438) / _656;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _669 = frontier_phi_31_30_ladder;
    }
    float _672 = _454 ? (cbMtdParam._m0[23u].x / _432) : 5000.0;
    float _673 = isnan(_669) ? _662 : (isnan(_662) ? _669 : min(_662, _669));
    float _674 = isnan(_672) ? _673 : (isnan(_673) ? _672 : min(_673, _672));
    float _678 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _682 = ((_674 * _432) + _678) / _678;
    float _687 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _689 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _705 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_463 + (_674 * _655)) / _682) + 0.5) + _687) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_466 + (_674 * _656)) / _682) + 0.5) + _689) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _720;
    if (_657)
    {
        _720 = (1.0 - _437) / _655;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_655 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _437) / _655;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _720 = frontier_phi_35_34_ladder;
    }
    float _726;
    if (_664)
    {
        _726 = (1.0 - _438) / _656;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_656 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _438) / _656;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _726 = frontier_phi_39_38_ladder;
    }
    float _728 = isnan(_726) ? _720 : (isnan(_720) ? _726 : min(_720, _726));
    float _729 = isnan(_672) ? _728 : (isnan(_728) ? _672 : min(_728, _672));
    float _736 = ((_729 * _432) + _678) / _678;
    vec4 _756 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_463 + (_729 * _655)) / _736) + 0.5) + _687) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_466 + (_729 * _656)) / _736) + 0.5) + _689) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _758 = _756.x;
    float _768 = _311 * 0.1500000059604644775390625;
    float _779 = (_768 * ((_640 - _346) + (((((cbMtdParam._m0[13u].x * _311) * _705.x) - _640) * _311) * _758))) + _346;
    float _780 = (_768 * ((_641 - _348) + (((((cbMtdParam._m0[13u].y * _311) * _705.y) - _641) * _311) * _758))) + _348;
    float _781 = (_768 * ((_642 - _350) + (((((cbMtdParam._m0[13u].z * _311) * _705.z) - _642) * _311) * _758))) + _350;
    vec4 _794 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _798 = _794.z;
    float _801 = (_794.x * 2.0) + (-1.0);
    float _802 = (_794.y * 2.0) + (-1.0);
    float _803 = dot(vec2(_801, _802), vec2(_801, _802));
    float _4050 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _808 = sqrt(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))));
    vec4 _832 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _837 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _843 = ((_832.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _845 = (-0.0) - (cbMtdParam._m0[21u].x * ((_832.x * 0.5) + (-0.25)));
    float _846 = fract(_837);
    float _848 = fract(_837 + 0.5);
    vec4 _875 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_846 * _845) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_843 * _846) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _877 = _875.x;
    float _883 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_848 * _845) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_843 * _848) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _877) * abs((_846 * 2.0) + (-1.0))) + _877;
    float _889 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _893 = fract(abs(_889));
    float _902 = sin(cbMtdParam._m0[21u].z);
    float _903 = cos(cbMtdParam._m0[21u].z);
    float _904 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _905 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _935 = abs(cbMtdParam._m0[20u].w * (((_883 - (((_889 >= ((-0.0) - _889)) ? _893 : ((-0.0) - _893)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_905, (-0.0) - _902, _903 * _904) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_905, _903, _904 * _902) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _939 = (((_935 * cbMtdParam._m0[18u].y) - _883) * _935) + _883;
    float _4061 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _940 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    vec4 _952 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _967 = (cbMtdParam._m0[14u].x * _952.x) * cbMtdParam._m0[19u].x;
    float _968 = (cbMtdParam._m0[14u].y * _952.y) * cbMtdParam._m0[19u].x;
    float _969 = (cbMtdParam._m0[14u].z * _952.z) * cbMtdParam._m0[19u].x;
    float _979 = exp2(log2(_940) * cbMtdParam._m0[20u].x);
    float _992 = fma(_808, _229, fma(_802, _236, _801 * _222));
    float _995 = fma(_808, _230, fma(_802, _237, _801 * _223));
    float _998 = fma(_808, _231, fma(_802, _238, _801 * _224));
    float _1002 = inversesqrt(dot(vec3(_992, _995, _998), vec3(_992, _995, _998)));
    float _1003 = _1002 * _992;
    float _1004 = _1002 * _995;
    float _1005 = _1002 * _998;
    float _4072 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _1006 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4094 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4105 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _1025 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1029 = inversesqrt(dot(vec3(_292, _293, _294), vec3(_292, _293, _294)));
    float _1030 = _292 * _1029;
    float _1031 = _293 * _1029;
    float _1032 = _294 * _1029;
    vec4 _1037 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1039 = _1037.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1194 = sqrt(((_292 * _292) + (_293 * _293)) + (_294 * _294));
        float _1200 = (cbMatDynParam._m0[5u].x * _1194) + cbMatDynParam._m0[5u].y;
        float _4116 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1205 = (cbMatDynParam._m0[5u].z * _1194) + cbMatDynParam._m0[5u].w;
        float _4127 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) - _1201)) + _1201) < ((_1039 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1051 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1052 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1070 = fma(_1005, cbSceneParam._m0[5u].z, fma(_1004, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1003));
    float _1073 = fma(_1005, cbSceneParam._m0[6u].z, fma(_1004, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1003));
    float _1076 = fma(_1005, cbSceneParam._m0[7u].z, fma(_1004, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1003));
    uint _1089 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1090 = _1089 + 9u;
    uint _1091 = _1090 + uint(cbMatDynParam._m0[0u].w);
    float _1097 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * cbInstanceData._m0[_1091].x;
    float _1098 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * cbInstanceData._m0[_1091].y;
    float _1099 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * cbInstanceData._m0[_1091].z;
    float _4138 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _4149 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _4160 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    vec4 _1111 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1051, cbSceneParam._m0[86u].y * _1052));
    float _1114 = _1111.x * TEXCOORD_4;
    float _1115 = dot(vec3(_1003, _1004, _1005), vec3(_1030, _1031, _1032));
    float _1118 = _1115 * 2.0;
    float _1122 = (_1118 * _1003) - _1030;
    float _1123 = (_1118 * _1004) - _1031;
    float _1124 = (_1118 * _1005) - _1032;
    float _1128 = abs(dot(vec3(_1030, _1031, _1032), vec3(_1003, _1004, _1005)));
    float _4171 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1130 = sqrt(_1006);
    float _1143 = exp2((_1130 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1130 * 3.0));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1183 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1511;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1238 = fma(_1183, cbModelParam._m0[26u].z, fma(_1179, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1175));
        float _1242 = fma(_1183, cbModelParam._m0[27u].z, fma(_1179, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1175));
        float _1246 = fma(_1183, cbModelParam._m0[28u].z, fma(_1179, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1175));
        float _1269 = _1175 + _1003;
        float _1270 = _1179 + _1004;
        float _1271 = _1183 + _1005;
        float _1281 = fma(_1271, cbModelParam._m0[26u].z, fma(_1270, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1269)) - _1238;
        float _1282 = fma(_1271, cbModelParam._m0[27u].z, fma(_1270, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1269)) - _1242;
        float _1283 = fma(_1271, cbModelParam._m0[28u].z, fma(_1270, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1269)) - _1246;
        float _1287 = inversesqrt(dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283)));
        float _1300 = ((_1287 * _1281) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1238 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1287 * _1282) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1242 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1287 * _1283) / cbModelParam._m0[34u].z) + ((((((_1246 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        float _1339 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1305.x + (-0.5));
        float _1341 = _1339 * (_1305.y + (-0.5));
        float _1342 = _1339 * (_1305.z + (-0.5));
        float _1349 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1312.x + (-0.5));
        float _1351 = _1349 * (_1312.y + (-0.5));
        float _1352 = _1349 * (_1312.z + (-0.5));
        float _1359 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1319.x + (-0.5));
        float _1361 = _1359 * (_1319.y + (-0.5));
        float _1362 = _1359 * (_1319.z + (-0.5));
        float _1369 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1326.x + (-0.5));
        float _1371 = _1369 * (_1326.y + (-0.5));
        float _1372 = _1369 * (_1326.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1393 = (dot(vec3(_1003, _1004, _1005), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1403 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4219 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1405 + 1.0))) + _1410) * _1373;
        float _1420 = _1341 * 0.5;
        float _1421 = _1351 * 0.5;
        float _1422 = _1361 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_1003, _1004, _1005), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4252 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1447 + 1.0))) + _1452) * _1374;
        float _1462 = _1342 * 0.5;
        float _1463 = _1352 * 0.5;
        float _1464 = _1362 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_1003, _1004, _1005), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4285 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1489 + 1.0))) + _1494) * _1375;
        _1511 = _1342;
        _1513 = _1341;
        _1514 = _1340;
        _1515 = _1352;
        _1516 = _1351;
        _1517 = _1350;
        _1518 = _1362;
        _1519 = _1361;
        _1520 = _1360;
        _1521 = _1375;
        _1522 = _1374;
        _1523 = _1373;
        _1524 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1525 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1526 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
    }
    else
    {
        _1511 = _1512;
        _1513 = _1512;
        _1514 = _1512;
        _1515 = _1512;
        _1516 = _1512;
        _1517 = _1512;
        _1518 = _1512;
        _1519 = _1512;
        _1520 = _1512;
        _1521 = _1512;
        _1522 = _1512;
        _1523 = _1512;
        _1524 = 0.0;
        _1525 = 0.0;
        _1526 = 0.0;
    }
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1554 = fma(_1183, cbModelParam._m0[30u].z, fma(_1179, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1175));
        float _1558 = fma(_1183, cbModelParam._m0[31u].z, fma(_1179, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1175));
        float _1562 = fma(_1183, cbModelParam._m0[32u].z, fma(_1179, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1175));
        float _1585 = _1175 + _1003;
        float _1586 = _1179 + _1004;
        float _1587 = _1183 + _1005;
        float _1597 = fma(_1587, cbModelParam._m0[30u].z, fma(_1586, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1585)) - _1554;
        float _1598 = fma(_1587, cbModelParam._m0[31u].z, fma(_1586, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1585)) - _1558;
        float _1599 = fma(_1587, cbModelParam._m0[32u].z, fma(_1586, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1585)) - _1562;
        float _1603 = inversesqrt(dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599)));
        float _1616 = ((_1603 * _1597) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1554 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1617 = ((_1603 * _1598) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1558 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1618 = ((_1603 * _1599) / cbModelParam._m0[35u].z) + ((((((_1562 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1616, _1617, _1618), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1616, _1617, _1618), 0.0);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1616, _1617, _1618), 0.0);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1616, _1617, _1618), 0.0);
        float _1653 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1620.x + (-0.5));
        float _1655 = _1653 * (_1620.y + (-0.5));
        float _1656 = _1653 * (_1620.z + (-0.5));
        float _1663 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1627.x + (-0.5));
        float _1665 = _1663 * (_1627.y + (-0.5));
        float _1666 = _1663 * (_1627.z + (-0.5));
        float _1673 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1634.x + (-0.5));
        float _1675 = _1673 * (_1634.y + (-0.5));
        float _1676 = _1673 * (_1634.z + (-0.5));
        float _1683 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1684 = _1683 * (_1641.x + (-0.5));
        float _1685 = _1683 * (_1641.y + (-0.5));
        float _1686 = _1683 * (_1641.z + (-0.5));
        float _1687 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1688 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1689 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1690 = _1654 * 0.5;
        float _1691 = _1664 * 0.5;
        float _1692 = _1674 * 0.5;
        float _1693 = dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692));
        float _1698 = (_1693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1693);
        float _1706 = (dot(vec3(_1003, _1004, _1005), vec3(_1698 * _1690, _1698 * _1691, _1698 * _1692)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1715 = sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692)) / (_1687 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1717 = _1716 * 2.0;
        float _1721 = (1.0 - _1716) / (_1716 + 1.0);
        float _4348 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1731 = ((((1.0 - _1722) * (_1717 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1717 + 1.0))) + _1722) * _1687;
        float _1732 = _1655 * 0.5;
        float _1733 = _1665 * 0.5;
        float _1734 = _1675 * 0.5;
        float _1735 = dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734));
        float _1740 = (_1735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1735);
        float _1748 = (dot(vec3(_1003, _1004, _1005), vec3(_1740 * _1732, _1740 * _1733, _1740 * _1734)) + 1.0) * 0.5;
        float _4359 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1757 = sqrt(((_1733 * _1733) + (_1732 * _1732)) + (_1734 * _1734)) / (_1688 + 9.9999997473787516355514526367188e-06);
        float _4370 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1759 = _1758 * 2.0;
        float _1763 = (1.0 - _1758) / (_1758 + 1.0);
        float _4381 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1773 = ((((1.0 - _1764) * (_1759 + 2.0)) * exp2(log2(isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_1759 + 1.0))) + _1764) * _1688;
        float _1774 = _1656 * 0.5;
        float _1775 = _1666 * 0.5;
        float _1776 = _1676 * 0.5;
        float _1777 = dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776));
        float _1782 = (_1777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1777);
        float _1790 = (dot(vec3(_1003, _1004, _1005), vec3(_1782 * _1774, _1782 * _1775, _1782 * _1776)) + 1.0) * 0.5;
        float _4392 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1799 = sqrt(((_1775 * _1775) + (_1774 * _1774)) + (_1776 * _1776)) / (_1689 + 9.9999997473787516355514526367188e-06);
        float _4403 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1801 = _1800 * 2.0;
        float _1805 = (1.0 - _1800) / (_1800 + 1.0);
        float _4414 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1815 = ((((1.0 - _1806) * (_1801 + 2.0)) * exp2(log2(isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_1801 + 1.0))) + _1806) * _1689;
        _1823 = _1656;
        _1824 = _1655;
        _1825 = _1654;
        _1826 = _1666;
        _1827 = _1665;
        _1828 = _1664;
        _1829 = _1676;
        _1830 = _1675;
        _1831 = _1674;
        _1832 = _1689;
        _1833 = _1688;
        _1834 = _1687;
        _1835 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)));
        _1836 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)));
        _1837 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)));
    }
    else
    {
        _1823 = _1512;
        _1824 = _1512;
        _1825 = _1512;
        _1826 = _1512;
        _1827 = _1512;
        _1828 = _1512;
        _1829 = _1512;
        _1830 = _1512;
        _1831 = _1512;
        _1832 = _1512;
        _1833 = _1512;
        _1834 = _1512;
        _1835 = 0.0;
        _1836 = 0.0;
        _1837 = 0.0;
    }
    float _1847 = (cbModelParam._m0[1u].x * (_1835 - _1524)) + _1524;
    float _1848 = (cbModelParam._m0[1u].x * (_1836 - _1525)) + _1525;
    float _1849 = (cbModelParam._m0[1u].x * (_1837 - _1526)) + _1526;
    float _1870 = fma(_1849, cbSceneParam._m0[89u].z, fma(_1848, cbSceneParam._m0[89u].y, _1847 * cbSceneParam._m0[89u].x));
    float _1873 = fma(_1849, cbSceneParam._m0[90u].z, fma(_1848, cbSceneParam._m0[90u].y, _1847 * cbSceneParam._m0[90u].x));
    float _1876 = fma(_1849, cbSceneParam._m0[91u].z, fma(_1848, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1847));
    float _1891 = _1122 * 0.5;
    float _1892 = _1123 * 0.5;
    float _1893 = _1124 * 0.5;
    float _1894 = dot(vec4(_1891, _1892, _1893, 1.0), vec4(_1825, _1828, _1831, _1834));
    float _1897 = dot(vec4(_1891, _1892, _1893, 1.0), vec4(_1824, _1827, _1830, _1833));
    float _1900 = dot(vec4(_1891, _1892, _1893, 1.0), vec4(_1823, _1826, _1829, _1832));
    float _1934;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1907 = dot(vec4(_1891, _1892, _1893, 1.0), vec4(_1511, _1515, _1518, _1521));
        float _1911 = dot(vec4(_1891, _1892, _1893, 1.0), vec4(_1513, _1516, _1519, _1522));
        float _1915 = dot(vec4(_1891, _1892, _1893, 1.0), vec4(_1514, _1517, _1520, _1523));
        float _1922 = dot(vec4(cbModelParam._m0[39u]), vec4(_1891, _1892, _1893, 1.0));
        _1934 = dot(vec3(isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1922) ? 0.0 : (isnan(0.0) ? _1922 : max(0.0, _1922))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1934 = 1.0;
    }
    float _1945;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1936 = dot(vec4(cbModelParam._m0[40u]), vec4(_1891, _1892, _1893, 1.0));
        _1945 = dot(vec3(isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1936) ? 0.0 : (isnan(0.0) ? _1936 : max(0.0, _1936))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1945 = 1.0;
    }
    float _1949 = (_1945 * cbModelParam._m0[1u].x) + (_1934 * (1.0 - cbModelParam._m0[1u].x));
    float _1959 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1006);
    float _1960 = isnan(_1959) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1959 : min(cbModelParam._m0[25u].z, _1959));
    float _2041;
    float _2043;
    float _2045;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2008 = fma(_1183, cbModelParam._m0[13u].z, fma(_1179, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1175)) + cbModelParam._m0[13u].w;
        float _2012 = fma(_1183, cbModelParam._m0[14u].z, fma(_1179, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1175)) + cbModelParam._m0[14u].w;
        float _2016 = fma(_1183, cbModelParam._m0[15u].z, fma(_1179, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1175)) + cbModelParam._m0[15u].w;
        float _2019 = fma(_1124, cbModelParam._m0[13u].z, fma(_1123, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1122));
        float _2022 = fma(_1124, cbModelParam._m0[14u].z, fma(_1123, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1122));
        float _2025 = fma(_1124, cbModelParam._m0[15u].z, fma(_1123, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1122));
        float _2053;
        if (_2019 > 0.0)
        {
            _2053 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _2053 = frontier_phi_57_55_ladder;
        }
        float _2221;
        if (_2022 > 0.0)
        {
            _2221 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2221 = frontier_phi_66_62_ladder;
        }
        float _2665;
        if (_2025 > 0.0)
        {
            _2665 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2665 = frontier_phi_78_73_ladder;
        }
        float _2667 = isnan(_2221) ? _2053 : (isnan(_2053) ? _2221 : min(_2053, _2221));
        float _2668 = isnan(_2665) ? _2667 : (isnan(_2667) ? _2665 : min(_2667, _2665));
        float _2672 = (_2668 * _2019) + _2008;
        float _2673 = (_2668 * _2022) + _2012;
        float _2674 = (_2668 * _2025) + _2016;
        float _2675 = _2668 * 9.9999997473787516355514526367188e-05;
        float _2677 = (-1.0) - _2675;
        float _2679 = _2675 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2674 > _2679) || ((_2674 < _2677) || ((_2673 > _2679) || ((_2673 < _2677) || ((_2672 < _2677) || (_2672 > _2679))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2934 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2674, cbModelParam._m0[9u].z, fma(_2673, cbModelParam._m0[9u].y, _2672 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2674, cbModelParam._m0[10u].z, fma(_2673, cbModelParam._m0[10u].y, _2672 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2674, cbModelParam._m0[11u].z, fma(_2673, cbModelParam._m0[11u].y, _2672 * cbModelParam._m0[11u].x))), _1960);
            frontier_phi_56_78_ladder = _2934.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2934.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2934.x * cbModelParam._m0[1u].y;
        }
        _2041 = frontier_phi_56_78_ladder_2;
        _2043 = frontier_phi_56_78_ladder_1;
        _2045 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _2029 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1122, _1123, _1124), _1960);
        _2041 = _2029.x * cbModelParam._m0[1u].y;
        _2043 = _2029.y * cbModelParam._m0[1u].y;
        _2045 = _2029.z * cbModelParam._m0[1u].y;
    }
    float _2049 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1006);
    float _2050 = isnan(_2049) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2049 : min(cbModelParam._m0[25u].w, _2049));
    float _2138;
    float _2140;
    float _2142;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2102 = fma(_1183, cbModelParam._m0[21u].z, fma(_1179, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1175)) + cbModelParam._m0[21u].w;
        float _2106 = fma(_1183, cbModelParam._m0[22u].z, fma(_1179, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1175)) + cbModelParam._m0[22u].w;
        float _2110 = fma(_1183, cbModelParam._m0[23u].z, fma(_1179, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1175)) + cbModelParam._m0[23u].w;
        float _2113 = fma(_1124, cbModelParam._m0[21u].z, fma(_1123, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1122));
        float _2116 = fma(_1124, cbModelParam._m0[22u].z, fma(_1123, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1122));
        float _2119 = fma(_1124, cbModelParam._m0[23u].z, fma(_1123, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1122));
        float _2226;
        if (_2113 > 0.0)
        {
            _2226 = abs((1.0 - _2102) / _2113);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_2102 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2226 = frontier_phi_68_64_ladder;
        }
        float _2692;
        if (_2116 > 0.0)
        {
            _2692 = abs((1.0 - _2106) / _2116);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_2106 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2692 = frontier_phi_80_75_ladder;
        }
        float _3071;
        if (_2119 > 0.0)
        {
            _3071 = abs((1.0 - _2110) / _2119);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_2110 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _3071 = frontier_phi_92_87_ladder;
        }
        float _3073 = isnan(_2692) ? _2226 : (isnan(_2226) ? _2692 : min(_2226, _2692));
        float _3074 = isnan(_3071) ? _3073 : (isnan(_3073) ? _3071 : min(_3073, _3071));
        float _3078 = (_3074 * _2113) + _2102;
        float _3079 = (_3074 * _2116) + _2106;
        float _3080 = (_3074 * _2119) + _2110;
        float _3081 = _3074 * 9.9999997473787516355514526367188e-05;
        float _3082 = (-1.0) - _3081;
        float _3084 = _3081 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_3080 > _3084) || ((_3080 < _3082) || ((_3079 > _3084) || ((_3079 < _3082) || ((_3078 < _3082) || (_3078 > _3084))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3217 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3080, cbModelParam._m0[17u].z, fma(_3079, cbModelParam._m0[17u].y, _3078 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3080, cbModelParam._m0[18u].z, fma(_3079, cbModelParam._m0[18u].y, _3078 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3080, cbModelParam._m0[19u].z, fma(_3079, cbModelParam._m0[19u].y, _3078 * cbModelParam._m0[19u].x))), _2050);
            frontier_phi_65_92_ladder = _3217.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _3217.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _3217.x * cbModelParam._m0[1u].z;
        }
        _2138 = frontier_phi_65_92_ladder_2;
        _2140 = frontier_phi_65_92_ladder_1;
        _2142 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _2122 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1122, _1123, _1124), _2050);
        _2138 = _2122.x * cbModelParam._m0[1u].z;
        _2140 = _2122.y * cbModelParam._m0[1u].z;
        _2142 = _2122.z * cbModelParam._m0[1u].z;
    }
    float _2154 = ((((1.0 - _1143) * ((_1130 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1143 * _1130)) * _1114;
    float _2155 = _2154 * ((cbModelParam._m0[1u].w * (_2138 - _2041)) + _2041);
    float _2156 = _2154 * ((cbModelParam._m0[1u].w * (_2140 - _2043)) + _2043);
    float _2157 = _2154 * ((cbModelParam._m0[1u].w * (_2142 - _2045)) + _2045);
    float _2160 = fma(_2157, cbSceneParam._m0[89u].z, fma(_2156, cbSceneParam._m0[89u].y, _2155 * cbSceneParam._m0[89u].x));
    float _2163 = fma(_2157, cbSceneParam._m0[90u].z, fma(_2156, cbSceneParam._m0[90u].y, _2155 * cbSceneParam._m0[90u].x));
    float _2166 = fma(_2157, cbSceneParam._m0[91u].z, fma(_2156, cbSceneParam._m0[91u].y, _2155 * cbSceneParam._m0[91u].x));
    float _2200 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2204 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2208 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2212 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2213 = _2200 / _2212;
    float _2214 = _2204 / _2212;
    float _2215 = _2208 / _2212;
    float _2362;
    float _2363;
    float _2364;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2242 = ((uint(_2215 > cbSceneParam._m0[59u].y) + uint(_2215 > cbSceneParam._m0[59u].x)) + uint(_2215 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2243 = _2242 + 43u;
        uint _2251 = _2242 + 44u;
        uint _2259 = _2242 + 45u;
        uint _2267 = _2242 + 46u;
        float _2278 = fma(_2212, cbSceneParam._m0[_2243].w, fma(_2208, cbSceneParam._m0[_2243].z, fma(_2204, cbSceneParam._m0[_2243].y, _2200 * cbSceneParam._m0[_2243].x)));
        float _2282 = fma(_2212, cbSceneParam._m0[_2251].w, fma(_2208, cbSceneParam._m0[_2251].z, fma(_2204, cbSceneParam._m0[_2251].y, _2200 * cbSceneParam._m0[_2251].x)));
        float _2290 = fma(_2212, cbSceneParam._m0[_2267].w, fma(_2208, cbSceneParam._m0[_2267].z, fma(_2204, cbSceneParam._m0[_2267].y, _2200 * cbSceneParam._m0[_2267].x)));
        float _2295 = cbSceneParam._m0[33u].z * _2290;
        float _2297 = cbSceneParam._m0[33u].w * _2290;
        float _2300 = fma(_2212, cbSceneParam._m0[_2259].w, fma(_2208, cbSceneParam._m0[_2259].z, fma(_2204, cbSceneParam._m0[_2259].y, _2200 * cbSceneParam._m0[_2259].x))) / _2290;
        float _2348 = (cbSceneParam._m0[33u].x - sqrt(((_2214 * _2214) + (_2213 * _2213)) + (_2215 * _2215))) * cbSceneParam._m0[33u].y;
        float _4540 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2355 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2295 + _2278) / _2290, (_2297 + _2282) / _2290), _2300), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2297 + _2278) / _2290, (_2282 - _2295) / _2290), _2300), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2278 - _2295) / _2290, (_2282 - _2297) / _2290), _2300), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2278 - _2297) / _2290, (_2295 + _2282) / _2290), _2300), 0.0)).x), vec4(0.25)));
        _2362 = 1.0 - (_2355 * cbSceneParam._m0[34u].x);
        _2363 = 1.0 - (_2355 * cbSceneParam._m0[34u].y);
        _2364 = 1.0 - (_2355 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2362 = 1.0;
        _2363 = 1.0;
        _2364 = 1.0;
    }
    float _2428;
    float _2430;
    float _2432;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2416 = fma(_2212, cbSceneParam._m0[63u].w, fma(_2208, cbSceneParam._m0[63u].z, fma(_2204, cbSceneParam._m0[63u].y, _2200 * cbSceneParam._m0[63u].x)));
        float _2417 = fma(_2212, cbSceneParam._m0[60u].w, fma(_2208, cbSceneParam._m0[60u].z, fma(_2204, cbSceneParam._m0[60u].y, _2200 * cbSceneParam._m0[60u].x))) / _2416;
        float _2418 = fma(_2212, cbSceneParam._m0[61u].w, fma(_2208, cbSceneParam._m0[61u].z, fma(_2204, cbSceneParam._m0[61u].y, _2200 * cbSceneParam._m0[61u].x))) / _2416;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_2417 >= cbSceneParam._m0[64u].x) && (_2418 >= cbSceneParam._m0[64u].y)) && (_2417 <= cbSceneParam._m0[64u].z)) && (_2418 <= cbSceneParam._m0[64u].w))
        {
            float _2705 = fma(_2212, cbSceneParam._m0[62u].w, fma(_2208, cbSceneParam._m0[62u].z, fma(_2204, cbSceneParam._m0[62u].y, _2200 * cbSceneParam._m0[62u].x))) / _2416;
            float _2709 = isnan(cbSceneParam._m0[41u].w) ? _2705 : (isnan(_2705) ? cbSceneParam._m0[41u].w : max(_2705, cbSceneParam._m0[41u].w));
            float _2752 = (cbSceneParam._m0[33u].x - sqrt(((_2214 * _2214) + (_2213 * _2213)) + (_2215 * _2215))) * cbSceneParam._m0[33u].y;
            float _4556 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
            float _2759 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2417, cbSceneParam._m0[33u].w + _2418), _2709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2417, _2418 - cbSceneParam._m0[33u].z), _2709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2417 - cbSceneParam._m0[33u].z, _2418 - cbSceneParam._m0[33u].w), _2709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2417 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2418), _2709), 0.0)).x), vec4(0.25)));
            float _2763 = 1.0 - (_2759 * cbSceneParam._m0[34u].x);
            float _2764 = 1.0 - (_2759 * cbSceneParam._m0[34u].y);
            float _2765 = 1.0 - (_2759 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2765) ? _2364 : (isnan(_2364) ? _2765 : min(_2364, _2765));
            frontier_phi_77_76_ladder_1 = isnan(_2764) ? _2363 : (isnan(_2363) ? _2764 : min(_2363, _2764));
            frontier_phi_77_76_ladder_2 = isnan(_2763) ? _2362 : (isnan(_2362) ? _2763 : min(_2362, _2763));
        }
        else
        {
            frontier_phi_77_76_ladder = _2364;
            frontier_phi_77_76_ladder_1 = _2363;
            frontier_phi_77_76_ladder_2 = _2362;
        }
        _2428 = frontier_phi_77_76_ladder_2;
        _2430 = frontier_phi_77_76_ladder_1;
        _2432 = frontier_phi_77_76_ladder;
    }
    else
    {
        _2428 = _2362;
        _2430 = _2363;
        _2432 = _2364;
    }
    uvec4 _2437 = floatBitsToUint(cbInstanceData._m0[_1089 + 5u]);
    uint _2439 = _2437.x * 14u;
    uint _2440 = _2439 + 13u;
    float _2445 = _1114 + (-1.0);
    float _2448 = (cbLight._m0[_2440].x * _2445) + 1.0;
    float _2449 = (cbLight._m0[_2440].y * _2445) + 1.0;
    uint _2450 = _2439 + 5u;
    float _2456 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
    uint _2460 = _2439 + 4u;
    float _2469 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
    uint _2473 = _2439 | 1u;
    float _2484 = dot(vec3(cbLight._m0[_2439].xyz), vec3(_1003, _1004, _1005));
    float _2487 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_1003, _1004, _1005));
    float _4592 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _4603 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2492 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * 0.3183098733425140380859375;
    float _2494 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * 0.3183098733425140380859375;
    float _2501 = ((cbLight._m0[_2450].x * _2456) * _2494) + (((cbLight._m0[_2460].x * _2428) * _2469) * _2492);
    float _2502 = ((_2456 * cbLight._m0[_2450].y) * _2494) + (((cbLight._m0[_2460].y * _2430) * _2469) * _2492);
    float _2503 = ((_2456 * cbLight._m0[_2450].z) * _2494) + (((cbLight._m0[_2460].z * _2432) * _2469) * _2492);
    uint _2505 = _2439 + 8u;
    float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2439].w)) * _1006) * 0.949999988079071044921875);
    float _2519 = _2518 * _2518;
    float _2520 = cbLight._m0[_2439].x + _1030;
    float _2521 = cbLight._m0[_2439].y + _1031;
    float _2522 = cbLight._m0[_2439].z + _1032;
    float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
    float _2527 = _2526 * _2520;
    float _2528 = _2526 * _2521;
    float _2529 = _2526 * _2522;
    float _2530 = dot(vec3(_1003, _1004, _1005), vec3(cbLight._m0[_2439].xyz));
    float _4614 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _4625 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _2534 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2535 = dot(vec3(_1003, _1004, _1005), vec3(_2527, _2528, _2529));
    float _4636 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2539 = dot(vec3(cbLight._m0[_2439].xyz), vec3(_2527, _2528, _2529));
    float _4647 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2543 = _2519 * _2519;
    float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
    float _2558 = (exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2559 = 1.0 - _2519;
    float _2570 = (0.5 / (((_2534 * ((_2533 * _2559) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2559) + _2519) * _2533))) * _2533;
    float _4658 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2572 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
    uint _2586 = _2439 + 9u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _1006) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2473].x + _1030;
    float _2600 = cbLight._m0[_2473].y + _1031;
    float _2601 = cbLight._m0[_2473].z + _1032;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_1003, _1004, _1005), vec3(cbLight._m0[_2473].xyz));
    float _4669 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2613 = dot(vec3(_1003, _1004, _1005), vec3(_2606, _2607, _2608));
    float _4680 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _2617 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2606, _2607, _2608));
    float _4691 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2621 = _2598 * _2598;
    float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
    float _2634 = (exp2(log2(1.0 - (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2635 = 1.0 - _2598;
    float _2645 = (0.5 / (((_2534 * ((_2612 * _2635) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2635) + _2598) * _2612))) * _2612;
    float _4702 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2647 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
    float _2657 = (((_2634 * cbLight._m0[_2586].x) * _2647) * _2456) + ((((cbLight._m0[_2505].x * _2428) * _2558) * _2572) * _2469);
    float _2658 = (((_2634 * cbLight._m0[_2586].y) * _2647) * _2456) + ((((cbLight._m0[_2505].y * _2430) * _2558) * _2572) * _2469);
    float _2659 = (((_2634 * cbLight._m0[_2586].z) * _2647) * _2456) + ((((cbLight._m0[_2505].z * _2432) * _2558) * _2572) * _2469);
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    if (_2437.y == 0u)
    {
        uvec4 _2777 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2778 = _2777.x;
        uint _2789 = uint((float(_2777.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1052) / _2778))) + floor(float(uint(cbSceneParam._m0[85u].x * _1051) / _2778)));
        float _2799 = (log2(_2215 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2800 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        uint _2803 = uint(isnan(14.0) ? _2800 : (isnan(_2800) ? 14.0 : min(_2800, 14.0)));
        uvec4 _2808 = texelFetch(g_lightClusterGridBuffer, int(((_2803 << 2u) + (_2789 << 6u)) >> 2u));
        uint _2809 = _2808.x;
        uint _2810 = _2777.z;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        if (((((1u << ((_2810 >> 4u) & 15u)) + 4294967295u) & _2809) == 0u) || ((_2810 & 240u) == 0u))
        {
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
        }
        else
        {
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            uint _3135 = 0u;
            uint _3144;
            bool _3145;
            for (;;)
            {
                _3144 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                _3145 = _3144 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_3145)
                {
                    frontier_phi_103_pred = _3130;
                    frontier_phi_103_pred_1 = _3134;
                    frontier_phi_103_pred_2 = _3133;
                    frontier_phi_103_pred_3 = _3132;
                    frontier_phi_103_pred_4 = _3131;
                    frontier_phi_103_pred_5 = _3129;
                }
                else
                {
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    uint _3301;
                    _3295 = _3129;
                    _3296 = _3130;
                    _3297 = _3131;
                    _3298 = _3132;
                    _3299 = _3133;
                    _3300 = _3134;
                    _3301 = _3144;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    for (;;)
                    {
                        uint _3305 = uint(findLSB(_3301)) + (_3135 << 5u);
                        uint _3302 = (_3301 + 4294967295u) & _3301;
                        uint _3307 = _3305 * 48u;
                        vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3307)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 3u)).x));
                        uint _3327 = (_3305 * 48u) + 4u;
                        vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 3u)).x));
                        uint _3346 = (_3305 * 48u) + 8u;
                        vec3 _3357 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3346)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 2u)).x));
                        float _3361 = _3321.x - _2213;
                        float _3362 = _3321.y - _2214;
                        float _3363 = _3321.z - _2215;
                        float _3364 = dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363));
                        float _3367 = inversesqrt(_3364);
                        float _3368 = _3367 * _3361;
                        float _3369 = _3367 * _3362;
                        float _3370 = _3367 * _3363;
                        float _3371 = dot(vec3(_1070, _1073, _1076), vec3(_3368, _3369, _3370));
                        float _3376 = 1.0 - (_3364 * _3321.w);
                        float _4723 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3377 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                        float _3378 = sqrt(_3364) * _3340.w;
                        float _3381 = 1.39999997615814208984375 / (_3378 + 1.39999997615814208984375);
                        float _3382 = _3381 * _3381;
                        float _3385 = ((1.0 - _3382) * _3371) + _3382;
                        float _3388 = _3378 * _3378;
                        float _3392 = ((isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))) * _3377) / ((_3388 * 0.699999988079071044921875) + 1.0);
                        float _3396 = (-0.0) - _2213;
                        float _3397 = (-0.0) - _2214;
                        float _3398 = (-0.0) - _2215;
                        float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                        float _3403 = _3402 * _3396;
                        float _3404 = _3402 * _3397;
                        float _3405 = _3402 * _3398;
                        float _3412 = exp2(log2(1.0 / ((_3388 * 3.5) + 5.0)) * 0.25);
                        float _3413 = 1.0 - _1130;
                        float _3420 = sqrt(1.0 - ((1.0 - (_3413 * _3413)) * (1.0 - (_3412 * _3412))));
                        float _3421 = _3420 * _3420;
                        float _3422 = _3421 * _3421;
                        float _3423 = _3403 + _3368;
                        float _3424 = _3404 + _3369;
                        float _3425 = _3405 + _3370;
                        float _3429 = inversesqrt(dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425)));
                        float _3433 = dot(vec3(_1070, _1073, _1076), vec3(_3403, _3404, _3405));
                        float _4739 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3436 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3437 = dot(vec3(_1070, _1073, _1076), vec3(_3429 * _3423, _3429 * _3424, _3429 * _3425));
                        float _4750 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3440 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3444 = ((_3440 * _3440) * (_3422 + (-1.0))) + 1.0;
                        float _3445 = _3381 * _3421;
                        float _3446 = _3445 * _3445;
                        float _3449 = ((1.0 - _3446) * _3371) + _3446;
                        float _4761 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3450 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3451 = 1.0 - _3421;
                        float _3461 = (0.5 / (((_3450 * ((_3436 * _3451) + _3421)) + 9.9999999392252902907785028219223e-09) + (((_3450 * _3451) + _3421) * _3436))) * _3450;
                        float _4772 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3472 = (((_3422 * 3.1415927410125732421875) * (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) / ((_3444 * _3444) * ((_3388 * 2.1991131305694580078125) + 3.141590118408203125))) * _3377;
                        _3225 = (_3392 * _3340.x) + _3298;
                        _3226 = (_3392 * _3340.y) + _3299;
                        _3227 = (_3392 * _3340.z) + _3300;
                        _3222 = (_3472 * _3357.x) + _3295;
                        _3223 = (_3472 * _3357.y) + _3296;
                        _3224 = (_3472 * _3357.z) + _3297;
                        if (_3302 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3295 = _3222;
                            _3296 = _3223;
                            _3297 = _3224;
                            _3298 = _3225;
                            _3299 = _3226;
                            _3300 = _3227;
                            _3301 = _3302;
                        }
                    }
                    frontier_phi_103_pred = _3223;
                    frontier_phi_103_pred_1 = _3227;
                    frontier_phi_103_pred_2 = _3226;
                    frontier_phi_103_pred_3 = _3225;
                    frontier_phi_103_pred_4 = _3224;
                    frontier_phi_103_pred_5 = _3222;
                }
                _2946 = frontier_phi_103_pred;
                _2954 = frontier_phi_103_pred_1;
                _2952 = frontier_phi_103_pred_2;
                _2950 = frontier_phi_103_pred_3;
                _2948 = frontier_phi_103_pred_4;
                _2944 = frontier_phi_103_pred_5;
                uint _3136 = _3135 + 1u;
                if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3129 = _2944;
                    _3130 = _2946;
                    _3131 = _2948;
                    _3132 = _2950;
                    _3133 = _2952;
                    _3134 = _2954;
                    _3135 = _3136;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
        }
        uvec4 _2957 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2958 = _2957.z;
        uint _2960 = (_2958 >> 8u) & 15u;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        if (((4294967295u << _2960) & _2809) == 0u)
        {
            _3097 = _2943;
            _3099 = _2945;
            _3101 = _2947;
            _3103 = _2949;
            _3105 = _2951;
            _3107 = _2953;
        }
        else
        {
            float _3122 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
            float _3123 = _3122 * _2213;
            float _3124 = _3122 * _2214;
            float _3125 = _3122 * _2215;
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2960 < ((_2958 >> 12u) & 15u))
            {
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3278 = _2943;
                float _3279 = _2945;
                float _3280 = _2947;
                float _3281 = _2949;
                float _3282 = _2951;
                float _3283 = _2953;
                uint _3284 = _2960;
                uint _3293;
                bool _3294;
                for (;;)
                {
                    _3293 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3284 << 2u)) >> 2u)).x;
                    _3294 = _3293 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_3294)
                    {
                        frontier_phi_114_pred = _3283;
                        frontier_phi_114_pred_1 = _3282;
                        frontier_phi_114_pred_2 = _3281;
                        frontier_phi_114_pred_3 = _3280;
                        frontier_phi_114_pred_4 = _3279;
                        frontier_phi_114_pred_5 = _3278;
                    }
                    else
                    {
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3499 = _3278;
                        float _3500 = _3279;
                        float _3501 = _3280;
                        float _3502 = _3281;
                        float _3503 = _3282;
                        float _3504 = _3283;
                        uint _3505 = _3293;
                        uint _3506;
                        vec4 _3531;
                        float _3532;
                        vec4 _3547;
                        vec3 _3559;
                        vec4 _3575;
                        vec4 _3590;
                        float _3636;
                        bool _3637;
                        for (;;)
                        {
                            uint _3516 = ((_3284 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3505));
                            _3506 = (_3505 + 4294967295u) & _3505;
                            uint _3518 = _3516 * 40u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            _3532 = _3531.w;
                            uint _3534 = (_3516 * 40u) + 4u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3516 * 40u) + 8u;
                            _3559 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x));
                            uint _3562 = (_3516 * 40u) + 16u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3577 = (_3516 * 40u) + 20u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3516 * 40u) + 24u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3611 = (_3516 * 40u) + 28u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            _3636 = fma(_2215, _3624.z, fma(_2214, _3624.y, _3624.x * _2213)) + _3624.w;
                            _3637 = !((fma(_2215, _3605.z, fma(_2214, _3605.y, _3605.x * _2213)) + _3605.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3637)
                            {
                                float _3664 = _3531.x - _2213;
                                float _3665 = _3531.y - _2214;
                                float _3666 = _3531.z - _2215;
                                float _3667 = dot(vec3(_3664, _3665, _3666), vec3(_3664, _3665, _3666));
                                float _3670 = inversesqrt(_3667);
                                float _3671 = _3670 * _3664;
                                float _3672 = _3670 * _3665;
                                float _3673 = _3670 * _3666;
                                float _3677 = 1.0 - (_3667 / (_3532 * _3532));
                                float _4783 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                                float _3682 = sqrt(_3667) * _3547.w;
                                float _3684 = 1.39999997615814208984375 / (_3682 + 1.39999997615814208984375);
                                float _3685 = _3684 * _3684;
                                float _3688 = ((1.0 - _3685) * dot(vec3(_3671, _3672, _3673), vec3(_1070, _1073, _1076))) + _3685;
                                float _3691 = _3682 * _3682;
                                float _3695 = (fma(_2215, _3575.z, fma(_2214, _3575.y, _3575.x * _2213)) + _3575.w) / _3636;
                                float _3696 = (fma(_2215, _3590.z, fma(_2214, _3590.y, _3590.x * _2213)) + _3590.w) / _3636;
                                float _3700 = 1.0 - dot(vec2(_3695, _3696), vec2(_3695, _3696));
                                float _4799 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3702 = _3701 * (((isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0))) * _3678) / ((_3691 * 0.699999988079071044921875) + 1.0));
                                float _3714 = exp2(log2(1.0 / ((_3691 * 3.5) + 5.0)) * 0.25);
                                float _3715 = 1.0 - _1130;
                                float _3722 = sqrt(1.0 - ((1.0 - (_3715 * _3715)) * (1.0 - (_3714 * _3714))));
                                float _3723 = _3722 * _3722;
                                float _3724 = _3723 * _3723;
                                float _3725 = _3671 - _3123;
                                float _3726 = _3672 - _3124;
                                float _3727 = _3673 - _3125;
                                float _3731 = inversesqrt(dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727)));
                                float _3735 = dot(vec3(_1070, _1073, _1076), vec3((-0.0) - _3123, (-0.0) - _3124, (-0.0) - _3125));
                                float _4810 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3738 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3739 = dot(vec3(_1070, _1073, _1076), vec3(_3731 * _3725, _3731 * _3726, _3731 * _3727));
                                float _4821 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3742 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3746 = ((_3742 * _3742) * (_3724 + (-1.0))) + 1.0;
                                float _3747 = _3684 * _3723;
                                float _3748 = _3747 * _3747;
                                float _3754 = ((1.0 - _3748) * dot(vec3(_1070, _1073, _1076), vec3(_3671, _3672, _3673))) + _3748;
                                float _4832 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3756 = 1.0 - _3723;
                                float _3766 = (0.5 / (((_3755 * ((_3738 * _3756) + _3723)) + 9.9999999392252902907785028219223e-09) + (((_3755 * _3756) + _3723) * _3738))) * _3755;
                                float _4843 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3776 = (_3701 * _3678) * (((_3724 * 3.1415927410125732421875) * (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) / ((_3746 * _3746) * ((_3691 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_120_pred = _3702 * _3547.z;
                                frontier_phi_120_pred_1 = _3702 * _3547.y;
                                frontier_phi_120_pred_2 = _3702 * _3547.x;
                                frontier_phi_120_pred_3 = _3776 * _3559.z;
                                frontier_phi_120_pred_4 = _3776 * _3559.y;
                                frontier_phi_120_pred_5 = _3776 * _3559.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3785 = frontier_phi_120_pred;
                            _3784 = frontier_phi_120_pred_1;
                            _3783 = frontier_phi_120_pred_2;
                            _3782 = frontier_phi_120_pred_3;
                            _3781 = frontier_phi_120_pred_4;
                            _3780 = frontier_phi_120_pred_5;
                            _3489 = _3783 + _3502;
                            _3490 = _3784 + _3503;
                            _3491 = _3785 + _3504;
                            _3486 = _3780 + _3499;
                            _3487 = _3781 + _3500;
                            _3488 = _3782 + _3501;
                            if (_3506 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3506;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _3491;
                        frontier_phi_114_pred_1 = _3490;
                        frontier_phi_114_pred_2 = _3489;
                        frontier_phi_114_pred_3 = _3488;
                        frontier_phi_114_pred_4 = _3487;
                        frontier_phi_114_pred_5 = _3486;
                    }
                    _3108 = frontier_phi_114_pred;
                    _3106 = frontier_phi_114_pred_1;
                    _3104 = frontier_phi_114_pred_2;
                    _3102 = frontier_phi_114_pred_3;
                    _3100 = frontier_phi_114_pred_4;
                    _3098 = frontier_phi_114_pred_5;
                    uint _3285 = _3284 + 1u;
                    if (_3285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3278 = _3098;
                        _3279 = _3100;
                        _3280 = _3102;
                        _3281 = _3104;
                        _3282 = _3106;
                        _3283 = _3108;
                        _3284 = _3285;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _3104;
                frontier_phi_94_95_ladder_1 = _3108;
                frontier_phi_94_95_ladder_2 = _3106;
                frontier_phi_94_95_ladder_3 = _3102;
                frontier_phi_94_95_ladder_4 = _3100;
                frontier_phi_94_95_ladder_5 = _3098;
            }
            else
            {
                frontier_phi_94_95_ladder = _2949;
                frontier_phi_94_95_ladder_1 = _2953;
                frontier_phi_94_95_ladder_2 = _2951;
                frontier_phi_94_95_ladder_3 = _2947;
                frontier_phi_94_95_ladder_4 = _2945;
                frontier_phi_94_95_ladder_5 = _2943;
            }
            _3097 = frontier_phi_94_95_ladder_5;
            _3099 = frontier_phi_94_95_ladder_4;
            _3101 = frontier_phi_94_95_ladder_3;
            _3103 = frontier_phi_94_95_ladder;
            _3105 = frontier_phi_94_95_ladder_2;
            _3107 = frontier_phi_94_95_ladder_1;
        }
        float _3112 = isnan(1.0) ? _1114 : (isnan(_1114) ? 1.0 : min(_1114, 1.0));
        _2822 = (_3112 * _3103) + _2501;
        _2824 = (_3112 * _3105) + _2502;
        _2826 = (_3112 * _3107) + _2503;
        _2828 = ((_3097 * 0.039999999105930328369140625) * _3112) + _2657;
        _2830 = ((_3099 * 0.039999999105930328369140625) * _3112) + _2658;
        _2832 = ((_3101 * 0.039999999105930328369140625) * _3112) + _2659;
    }
    else
    {
        _2822 = _2501;
        _2824 = _2502;
        _2826 = _2503;
        _2828 = _2657;
        _2830 = _2658;
        _2832 = _2659;
    }
    uint _2838 = _1090 + uint(cbMatDynParam._m0[0u].w);
    float _2844 = ((_979 * (_967 - (_967 * _940))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2838].x;
    float _2845 = ((_979 * (_968 - (_968 * _940))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2838].y;
    float _2846 = ((_979 * (_969 - (_969 * _940))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2838].z;
    float _4859 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _4870 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _4881 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _2863 = (((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2822 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1114))) + ((_2828 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1949)) * cbPerFrame._m0[3u].x)) + _2844;
    float _2865 = (_2845 + ((_2830 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1949)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2824 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1114)));
    float _2867 = (_2846 + ((_2832 + ((isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0))) * _1949)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2826 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1114)));
    float _2868 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
    float _2869 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
    float _2870 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
    float _2876 = cbMtdParam._m0[2u].x * _2844;
    float _2877 = cbMtdParam._m0[2u].y * _2845;
    float _2878 = cbMtdParam._m0[2u].z * _2846;
    float _4907 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2880 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
    uint _2881 = _1089 + 6u;
    float _2889 = _1051 / cbSceneParam._m0[86u].x;
    float _2890 = _1052 / cbSceneParam._m0[86u].y;
    vec4 _2904 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2889, _2890, (log2((isnan(cbSceneParam._m0[77u].w) ? _1025 : (isnan(_1025) ? cbSceneParam._m0[77u].w : min(_1025, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2906 = _2904.x;
    float _2907 = _2904.y;
    float _2908 = _2904.z;
    float _2909 = _2904.w;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    if (_1025 > cbSceneParam._m0[78u].w)
    {
        float _2968 = isnan(_1025) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1025 : min(cbSceneParam._m0[80u].w, _1025));
        float _2969 = _2968 / _1025;
        float _2980 = _2969 * _292;
        float _2981 = _293 * _2969;
        float _2982 = (-0.0) - _2981;
        float _2983 = _2969 * _294;
        float _2985 = (cbSceneParam._m0[77u].w * _2982) / _2968;
        float _2986 = _2985 + cbSceneParam._m0[79u].w;
        float _2987 = cbSceneParam._m0[79u].w - _2981;
        float _2993 = sqrt(((_2980 * _2980) + (_2981 * _2981)) + (_2983 * _2983));
        float _2996 = (1.0 - (cbSceneParam._m0[77u].w / _2968)) * _2993;
        float _3001 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3003 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3235;
        if (abs((_2982 - _2985) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3235 = ((((_2986 > 0.0) ? exp2(_3001 * _2986) : (2.0 - exp2(_3003 * _2986))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2996;
        }
        else
        {
            float _3158 = 1.0 / cbSceneParam._m0[80u].x;
            float _3159 = isnan(_2987) ? _2986 : (isnan(_2986) ? _2987 : max(_2986, _2987));
            float _3160 = isnan(_2987) ? _2986 : (isnan(_2986) ? _2987 : min(_2986, _2987));
            float _3169 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : min(_3159, 0.0));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            _3235 = ((abs(_2993 / _2982) * cbSceneParam._m0[80u].y) * ((((_3169 - _3170) * 2.0) - ((exp2(_3001 * (isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0)))) - exp2(_3001 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))))) * _3158)) - ((exp2(_3003 * _3169) - exp2(_3003 * _3170)) * _3158))) + (_2996 * cbSceneParam._m0[80u].z);
        }
        vec4 _3237 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2889, _2890, 1.0), 0.0);
        float _3246 = exp2((_3235 * (-1.44269502162933349609375)) * (1.0 - _3237.w));
        float _3247 = log2(_3246);
        float _3263 = log2(_2909);
        _3005 = (exp2(_3263 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].x)) * _3237.x) / cbSceneParam._m0[78u].x)) + _2906;
        _3007 = (exp2(_3263 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].y)) * _3237.y) / cbSceneParam._m0[78u].y)) + _2907;
        _3009 = (exp2(_3263 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].z)) * _3237.z) / cbSceneParam._m0[78u].z)) + _2908;
        _3011 = _3246 * _2909;
    }
    else
    {
        _3005 = _2906;
        _3007 = _2907;
        _3009 = _2908;
        _3011 = _2909;
    }
    bool _3273;
    vec4 _3020;
    vec4 _3042;
    float _3044;
    float _3048;
    float _3049;
    float _3050;
    float _3053;
    float _3056;
    float _3059;
    float _3060;
    bool _3070;
    for (;;)
    {
        _3020 = cbMatDynParam._m0[0u];
        float _3022 = roundEven(_3020.y);
        bool _3023 = _3022 == 3.0;
        float _3024 = log2(_3011);
        float _3028 = exp2(_3024 * cbSceneParam._m0[78u].x);
        float _3029 = exp2(_3024 * cbSceneParam._m0[78u].y);
        float _3030 = exp2(_3024 * cbSceneParam._m0[78u].z);
        float _3031 = _3028 * _2868;
        float _3032 = _3029 * _2869;
        float _3033 = _3030 * _2870;
        float _3040 = _1039 + (-0.5);
        _3042 = cbMtdParam._m0[1u];
        _3044 = _3042.y * _3040;
        float _3047 = (_3022 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3048 = _3047 * (_3023 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3005)));
        _3049 = _3047 * (_3023 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3007)));
        _3050 = _3047 * (_3023 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3009)));
        _3053 = ((_2876 * _2880) * _3028) * _3047;
        _3056 = ((_2877 * _2880) * _3029) * _3047;
        _3059 = ((_2878 * _2880) * _3030) * _3047;
        _3060 = _3040 * 0.999000012874603271484375;
        _3070 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3070)
        {
            if ((cbInstanceData._m0[_1089 + 7u].x + _3060) < 0.5)
            {
                _3273 = true;
                break;
            }
        }
        uint _3193 = _1090 + uint(_3020.w);
        if ((cbInstanceData._m0[_3193].w < 1.0) && ((cbInstanceData._m0[_3193].w + _3060) < 0.5))
        {
            _3273 = true;
            break;
        }
        if ((_3044 + 1.0) < _3042.x)
        {
            _3273 = true;
            break;
        }
        _3273 = false;
        break;
    }
    float _3477;
    if (_3273)
    {
        discard_state = true;
        _3477 = 0.0;
    }
    else
    {
        _3477 = cbInstanceData._m0[_2881].w;
    }
    SV_Target.x = _3048;
    SV_Target.y = _3049;
    SV_Target.z = _3050;
    SV_Target.w = _3477;
    SV_Target_1.x = _3053;
    SV_Target_1.y = _3056;
    SV_Target_1.z = _3059;
    SV_Target_1.w = cbInstanceData._m0[_2881].w;
    discard_exit();
}


