#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _390;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _202 = _201 * _193;
    float _203 = _201 * _194;
    float _204 = _201 * _195;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _299 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _322 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _334 = cbMtdParam._m0[28u].z + _269;
    float _335 = cbMtdParam._m0[28u].w + _270;
    float _336 = cbMtdParam._m0[29u].x + _271;
    float _353 = (-0.0) - dot(vec3(_334, _335, _336), vec3(_315 * _202, _315 * _203, _315 * _204));
    float _354 = (-0.0) - dot(vec3(_334, _335, _336), vec3(_322 * _213, _322 * _214, _322 * _215));
    float _355 = (-0.0) - dot(vec3(_334, _335, _336), vec3((-0.0) - (NORMAL.x * _208), (-0.0) - (NORMAL.y * _208), (-0.0) - (NORMAL.z * _208)));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _359 * _355;
    float _365 = ((cbMtdParam._m0[25u].y * _353) * _359) + (((_299.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _366 = ((cbMtdParam._m0[25u].z * _354) * _359) + (((_299.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _369 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _370 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _388;
    float _391;
    float _393;
    if (_365 > 0.0)
    {
        float _374 = (1.0 - _369) / _365;
        _388 = _374;
        _391 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_374 * _360)) * 0.16666667163372039794921875;
        _393 = (fract((_374 * _366) + _370) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_365 < 0.0)
        {
            float _389 = ((-0.0) - _369) / _365;
            frontier_phi_3_2_ladder = (fract((_389 * _366) + _370) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _389;
            frontier_phi_3_2_ladder_2 = (fract(_389 * _360) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _390;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _388 = frontier_phi_3_2_ladder_1;
        _391 = frontier_phi_3_2_ladder_2;
        _393 = frontier_phi_3_2_ladder;
    }
    float _419;
    float _421;
    float _423;
    if (_366 > 0.0)
    {
        float _406 = (1.0 - _370) / _366;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_406 < _388)
        {
            frontier_phi_8_5_ladder = (fract((_406 * _365) + _369) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _406;
            frontier_phi_8_5_ladder_2 = (fract(_406 * _360) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _391;
            frontier_phi_8_5_ladder_1 = _388;
            frontier_phi_8_5_ladder_2 = _393;
        }
        _419 = frontier_phi_8_5_ladder_1;
        _421 = frontier_phi_8_5_ladder;
        _423 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_366 < 0.0)
        {
            float _420 = ((-0.0) - _370) / _366;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_420 < _388)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_420 * _365) + _369) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _420;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_420 * _360) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _391;
                frontier_phi_8_6_ladder_9_ladder_1 = _388;
                frontier_phi_8_6_ladder_9_ladder_2 = _393;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _391;
            frontier_phi_8_6_ladder_1 = _388;
            frontier_phi_8_6_ladder_2 = _393;
        }
        _419 = frontier_phi_8_6_ladder_1;
        _421 = frontier_phi_8_6_ladder;
        _423 = frontier_phi_8_6_ladder_2;
    }
    float _427 = (_360 > 0.0) ? (cbMtdParam._m0[20u].z / _360) : 5000.0;
    float _440;
    float _441;
    if (_427 < _419)
    {
        _440 = ((_369 + cbMtdParam._m0[22u].x) + (_427 * _365)) * 0.16666667163372039794921875;
        _441 = (((_427 * _366) + _370) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _440 = _421;
        _441 = _423;
    }
    vec4 _443 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_440, _441));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    vec4 _474 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _479 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _485 = ((_474.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _487 = (-0.0) - (cbMtdParam._m0[21u].x * ((_474.x * 0.5) + (-0.25)));
    float _488 = fract(_479);
    float _490 = fract(_479 + 0.5);
    vec4 _517 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_488 * _487) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_485 * _488) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _519 = _517.x;
    float _525 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_490 * _487) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_485 * _490) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _519) * abs((_488 * 2.0) + (-1.0))) + _519;
    float _539 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _543 = fract(abs(_539));
    float _549 = sin(cbMtdParam._m0[21u].z);
    float _550 = cos(cbMtdParam._m0[21u].z);
    float _551 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _552 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _582 = abs(cbMtdParam._m0[20u].w * (((_525 - (((_539 >= ((-0.0) - _539)) ? _543 : ((-0.0) - _543)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_552, (-0.0) - _549, _550 * _551) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_552, _550, _551 * _549) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _586 = (((_582 * cbMtdParam._m0[18u].y) - _525) * _582) + _525;
    float _2966 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _587 = isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0));
    vec4 _599 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _614 = (cbMtdParam._m0[14u].x * _599.x) * cbMtdParam._m0[19u].x;
    float _615 = (cbMtdParam._m0[14u].y * _599.y) * cbMtdParam._m0[19u].x;
    float _616 = (cbMtdParam._m0[14u].z * _599.z) * cbMtdParam._m0[19u].x;
    float _626 = exp2(log2(_587) * cbMtdParam._m0[20u].x);
    float _2977 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _2988 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _2999 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _655 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _659 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _660 = _269 * _659;
    float _661 = _270 * _659;
    float _662 = _271 * _659;
    float _668 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _669 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _682 = uint(roundEven(NORMAL.w)) * 13u;
    uint _684 = _682 + 9u;
    uint _685 = _684 + uint(cbMatDynParam._m0[0u].w);
    float _691 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2977 : (isnan(_2977) ? 1.0 : min(_2977, 1.0)))) * cbInstanceData._m0[_685].x;
    float _692 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2988 : (isnan(_2988) ? 1.0 : min(_2988, 1.0)))) * cbInstanceData._m0[_685].y;
    float _693 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2999 : (isnan(_2999) ? 1.0 : min(_2999, 1.0)))) * cbInstanceData._m0[_685].z;
    float _3010 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3010 : (isnan(_3010) ? 1.0 : min(_3010, 1.0));
    float _3021 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _695 = isnan(1.0) ? _3021 : (isnan(_3021) ? 1.0 : min(_3021, 1.0));
    float _3032 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3032 : (isnan(_3032) ? 1.0 : min(_3032, 1.0));
    vec4 _705 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _668, cbSceneParam._m0[86u].y * _669));
    float _708 = _705.x * TEXCOORD_4;
    float _709 = (-0.0) - _660;
    float _710 = (-0.0) - _661;
    float _711 = (-0.0) - _662;
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _803 = (cbModelParam._m0[37u].x * ((((fma(_741, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _733)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _805 = (cbModelParam._m0[37u].y * ((((fma(_741, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _733)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _806 = (((((fma(_741, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _733)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_803, _805, _806), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_803, _805, _806), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_803, _805, _806), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_803, _805, _806), 0.0);
        float _843 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_809.x + (-0.5));
        float _845 = _843 * (_809.y + (-0.5));
        float _846 = _843 * (_809.z + (-0.5));
        float _853 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_816.x + (-0.5));
        float _855 = _853 * (_816.y + (-0.5));
        float _856 = _853 * (_816.z + (-0.5));
        float _863 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_823.x + (-0.5));
        float _865 = _863 * (_823.y + (-0.5));
        float _866 = _863 * (_823.z + (-0.5));
        float _873 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_830.x + (-0.5));
        float _875 = _873 * (_830.y + (-0.5));
        float _876 = _873 * (_830.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _897 = (dot(vec3(0.0), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3058 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _907 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3069 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3080 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0))) * (_909 + 1.0))) + _914) * _877;
        float _924 = _845 * 0.5;
        float _925 = _855 * 0.5;
        float _926 = _865 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(0.0), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3091 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3102 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3113 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0))) * (_951 + 1.0))) + _956) * _878;
        float _966 = _846 * 0.5;
        float _967 = _856 * 0.5;
        float _968 = _866 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(0.0), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3124 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3135 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3146 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0))) * (_993 + 1.0))) + _998) * _879;
        _1015 = _846;
        _1016 = _845;
        _1017 = _844;
        _1018 = _856;
        _1019 = _855;
        _1020 = _854;
        _1021 = _866;
        _1022 = _865;
        _1023 = _864;
        _1024 = _879;
        _1025 = _878;
        _1026 = _877;
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
    }
    else
    {
        _1015 = _390;
        _1016 = _390;
        _1017 = _390;
        _1018 = _390;
        _1019 = _390;
        _1020 = _390;
        _1021 = _390;
        _1022 = _390;
        _1023 = _390;
        _1024 = _390;
        _1025 = _390;
        _1026 = _390;
        _1027 = 0.0;
        _1028 = 0.0;
        _1029 = 0.0;
    }
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1082 = (cbModelParam._m0[38u].x * ((((fma(_741, cbModelParam._m0[30u].z, fma(_737, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _733)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1083 = (cbModelParam._m0[38u].y * ((((fma(_741, cbModelParam._m0[31u].z, fma(_737, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _733)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1084 = (((((fma(_741, cbModelParam._m0[32u].z, fma(_737, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _733)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1119 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1086.x + (-0.5));
        float _1121 = _1119 * (_1086.y + (-0.5));
        float _1122 = _1119 * (_1086.z + (-0.5));
        float _1129 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1093.x + (-0.5));
        float _1131 = _1129 * (_1093.y + (-0.5));
        float _1132 = _1129 * (_1093.z + (-0.5));
        float _1139 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1100.x + (-0.5));
        float _1141 = _1139 * (_1100.y + (-0.5));
        float _1142 = _1139 * (_1100.z + (-0.5));
        float _1149 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1107.x + (-0.5));
        float _1151 = _1149 * (_1107.y + (-0.5));
        float _1152 = _1149 * (_1107.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(0.0), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3187 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3198 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3209 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0))) * (_1183 + 1.0))) + _1188) * _1153;
        float _1198 = _1121 * 0.5;
        float _1199 = _1131 * 0.5;
        float _1200 = _1141 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(0.0), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3220 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3231 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3242 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0))) * (_1225 + 1.0))) + _1230) * _1154;
        float _1240 = _1122 * 0.5;
        float _1241 = _1132 * 0.5;
        float _1242 = _1142 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(0.0), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3253 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3264 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3275 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0))) * (_1267 + 1.0))) + _1272) * _1155;
        _1289 = _1122;
        _1290 = _1121;
        _1291 = _1120;
        _1292 = _1132;
        _1293 = _1131;
        _1294 = _1130;
        _1295 = _1142;
        _1296 = _1141;
        _1297 = _1140;
        _1298 = _1155;
        _1299 = _1154;
        _1300 = _1153;
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _390;
        _1290 = _390;
        _1291 = _390;
        _1292 = _390;
        _1293 = _390;
        _1294 = _390;
        _1295 = _390;
        _1296 = _390;
        _1297 = _390;
        _1298 = _390;
        _1299 = _390;
        _1300 = _390;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _1027)) + _1027;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _1028)) + _1028;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _1029)) + _1029;
    float _1336 = fma(_1315, cbSceneParam._m0[89u].z, fma(_1314, cbSceneParam._m0[89u].y, _1313 * cbSceneParam._m0[89u].x));
    float _1339 = fma(_1315, cbSceneParam._m0[90u].z, fma(_1314, cbSceneParam._m0[90u].y, _1313 * cbSceneParam._m0[90u].x));
    float _1342 = fma(_1315, cbSceneParam._m0[91u].z, fma(_1314, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1313));
    float _1357 = _660 * (-0.5);
    float _1358 = _661 * (-0.5);
    float _1359 = _662 * (-0.5);
    float _1360 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1363 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1366 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1400;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1373 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1377 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1016, _1019, _1022, _1025));
        float _1381 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1017, _1020, _1023, _1026));
        float _1388 = dot(vec4(cbModelParam._m0[39u]), vec4(_1357, _1358, _1359, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1411;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1402 = dot(vec4(cbModelParam._m0[40u]), vec4(_1357, _1358, _1359, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1415 = (_1411 * cbModelParam._m0[1u].x) + (_1400 * (1.0 - cbModelParam._m0[1u].x));
    float _1424 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1506;
    float _1508;
    float _1510;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1473 = fma(_741, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733)) + cbModelParam._m0[13u].w;
        float _1477 = fma(_741, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733)) + cbModelParam._m0[14u].w;
        float _1481 = fma(_741, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733)) + cbModelParam._m0[15u].w;
        float _1484 = fma(_711, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _709));
        float _1487 = fma(_711, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _709));
        float _1490 = fma(_711, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _709));
        float _1516;
        if (_1484 > 0.0)
        {
            _1516 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1516 = frontier_phi_26_24_ladder;
        }
        float _1836;
        if (_1487 > 0.0)
        {
            _1836 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1836 = frontier_phi_35_31_ladder;
        }
        float _2173;
        if (_1490 > 0.0)
        {
            _2173 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2173 = frontier_phi_49_42_ladder;
        }
        float _2175 = isnan(_1836) ? _1516 : (isnan(_1516) ? _1836 : min(_1516, _1836));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1484) + _1473;
        float _2181 = (_2176 * _1487) + _1477;
        float _2182 = (_2176 * _1490) + _1481;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2183;
        float _2186 = _2183 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2182 > _2186) || ((_2182 < _2184) || ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 < _2184) || (_2180 > _2186))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2305 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2182, cbModelParam._m0[9u].z, fma(_2181, cbModelParam._m0[9u].y, _2180 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2182, cbModelParam._m0[10u].z, fma(_2181, cbModelParam._m0[10u].y, _2180 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2182, cbModelParam._m0[11u].z, fma(_2181, cbModelParam._m0[11u].y, _2180 * cbModelParam._m0[11u].x))), _1424);
            frontier_phi_25_49_ladder = _2305.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2305.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2305.x * cbModelParam._m0[1u].y;
        }
        _1506 = frontier_phi_25_49_ladder_2;
        _1508 = frontier_phi_25_49_ladder_1;
        _1510 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_709, _710, _711), _1424);
        _1506 = _1494.x * cbModelParam._m0[1u].y;
        _1508 = _1494.y * cbModelParam._m0[1u].y;
        _1510 = _1494.z * cbModelParam._m0[1u].y;
    }
    float _1513 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1565 = fma(_741, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733)) + cbModelParam._m0[21u].w;
        float _1569 = fma(_741, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733)) + cbModelParam._m0[22u].w;
        float _1573 = fma(_741, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733)) + cbModelParam._m0[23u].w;
        float _1576 = fma(_711, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _709));
        float _1579 = fma(_711, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _709));
        float _1582 = fma(_711, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _709));
        float _1841;
        if (_1576 > 0.0)
        {
            _1841 = abs((1.0 - _1565) / _1576);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1565 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1841 = frontier_phi_37_33_ladder;
        }
        float _2199;
        if (_1579 > 0.0)
        {
            _2199 = abs((1.0 - _1569) / _1579);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1569 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2199 = frontier_phi_51_44_ladder;
        }
        float _2365;
        if (_1582 > 0.0)
        {
            _2365 = abs((1.0 - _1573) / _1582);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1573 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2365 = frontier_phi_65_60_ladder;
        }
        float _2367 = isnan(_2199) ? _1841 : (isnan(_1841) ? _2199 : min(_1841, _2199));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1576) + _1565;
        float _2373 = (_2368 * _1579) + _1569;
        float _2374 = (_2368 * _1582) + _1573;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2375;
        float _2378 = _2375 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2374 > _2378) || ((_2374 < _2376) || ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 < _2376) || (_2372 > _2378))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2374, cbModelParam._m0[17u].z, fma(_2373, cbModelParam._m0[17u].y, _2372 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2374, cbModelParam._m0[18u].z, fma(_2373, cbModelParam._m0[18u].y, _2372 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2374, cbModelParam._m0[19u].z, fma(_2373, cbModelParam._m0[19u].y, _2372 * cbModelParam._m0[19u].x))), _1513);
            frontier_phi_34_65_ladder = _2557.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2557.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2557.z * cbModelParam._m0[1u].z;
        }
        _1601 = frontier_phi_34_65_ladder_1;
        _1603 = frontier_phi_34_65_ladder;
        _1605 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_709, _710, _711), _1513);
        _1601 = _1585.x * cbModelParam._m0[1u].z;
        _1603 = _1585.y * cbModelParam._m0[1u].z;
        _1605 = _1585.z * cbModelParam._m0[1u].z;
    }
    float _1617 = _708 * 0.01200000010430812835693359375;
    float _1619 = _1617 * ((cbModelParam._m0[1u].w * (_1601 - _1506)) + _1506);
    float _1620 = _1617 * ((cbModelParam._m0[1u].w * (_1603 - _1508)) + _1508);
    float _1621 = _1617 * ((cbModelParam._m0[1u].w * (_1605 - _1510)) + _1510);
    float _1624 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1627 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1630 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, _1619 * cbSceneParam._m0[91u].x));
    vec4 _1638 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_668, _669));
    float _1640 = _1638.w;
    float _1653 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1640);
    float _1654 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1640);
    float _1655 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1640);
    uvec4 _1659 = floatBitsToUint(cbInstanceData._m0[_682 + 5u]);
    uint _1661 = _1659.x * 14u;
    uint _1662 = _1661 + 13u;
    float _1667 = _708 + (-1.0);
    float _1670 = (cbLight._m0[_1662].x * _1667) + 1.0;
    float _1671 = (cbLight._m0[_1662].y * _1667) + 1.0;
    uint _1672 = _1661 + 5u;
    float _1678 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
    uint _1682 = _1661 + 4u;
    float _1691 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
    uint _1695 = _1661 | 1u;
    float _1706 = dot(vec3(cbLight._m0[_1661].xyz), vec3(0.0));
    float _1709 = dot(vec3(cbLight._m0[_1695].xyz), vec3(0.0));
    float _3411 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _3422 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1714 = (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * 0.3183098733425140380859375;
    float _1716 = (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * 0.3183098733425140380859375;
    float _1723 = ((cbLight._m0[_1672].x * _1678) * _1716) + (((cbLight._m0[_1682].x * _1653) * _1691) * _1714);
    float _1724 = ((_1678 * cbLight._m0[_1672].y) * _1716) + (((cbLight._m0[_1682].y * _1654) * _1691) * _1714);
    float _1725 = ((_1678 * cbLight._m0[_1672].z) * _1716) + (((cbLight._m0[_1682].z * _1655) * _1691) * _1714);
    uint _1726 = _1661 + 8u;
    float _1732 = cbLight._m0[_1661].x + _660;
    float _1733 = cbLight._m0[_1661].y + _661;
    float _1734 = cbLight._m0[_1661].z + _662;
    float _1738 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
    float _1742 = dot(vec3(0.0), vec3(cbLight._m0[_1661].xyz));
    float _3433 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _1746 = dot(vec3(0.0), vec3(_660, _661, _662));
    float _3444 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1749 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _1750 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_1732 * _1738, _1733 * _1738, _1734 * _1738));
    float _3455 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1761 = (exp2(log2(1.0 - (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1767 = (0.5 / ((_1745 + 9.9999999392252902907785028219223e-09) + _1749)) * _1745;
    float _3466 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1769 = (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * 0.31831014156341552734375;
    uint _1783 = _1661 + 9u;
    float _1789 = cbLight._m0[_1695].x + _660;
    float _1790 = cbLight._m0[_1695].y + _661;
    float _1791 = cbLight._m0[_1695].z + _662;
    float _1795 = inversesqrt(dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791)));
    float _1799 = dot(vec3(0.0), vec3(cbLight._m0[_1695].xyz));
    float _3477 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1802 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _1803 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_1789 * _1795, _1790 * _1795, _1791 * _1795));
    float _3488 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1812 = (exp2(log2(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1816 = (0.5 / ((_1802 + 9.9999999392252902907785028219223e-09) + _1749)) * _1802;
    float _3499 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1818 = (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * 0.31831014156341552734375;
    float _1828 = (((_1812 * cbLight._m0[_1783].x) * _1818) * _1678) + ((((cbLight._m0[_1726].x * _1653) * _1761) * _1769) * _1691);
    float _1829 = (((_1812 * cbLight._m0[_1783].y) * _1818) * _1678) + ((((cbLight._m0[_1726].y * _1654) * _1761) * _1769) * _1691);
    float _1830 = (((_1812 * cbLight._m0[_1783].z) * _1818) * _1678) + ((((cbLight._m0[_1726].z * _1655) * _1761) * _1769) * _1691);
    float _1947;
    float _1949;
    float _1951;
    float _1953;
    float _1955;
    float _1957;
    if (_1659.y == 0u)
    {
        float _1886 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1887 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1886;
        float _1888 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1886;
        float _1889 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1886;
        uvec4 _1901 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1902 = _1901.x;
        uint _1913 = uint((float(_1901.y) * floor(float(uint(cbSceneParam._m0[85u].y * _669) / _1902))) + floor(float(uint(cbSceneParam._m0[85u].x * _668) / _1902)));
        float _1923 = (log2(_1889 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1924 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        uint _1927 = uint(isnan(14.0) ? _1924 : (isnan(_1924) ? 14.0 : min(_1924, 14.0)));
        uvec4 _1933 = texelFetch(g_lightClusterGridBuffer, int(((_1927 << 2u) + (_1913 << 6u)) >> 2u));
        uint _1934 = _1933.x;
        uint _1935 = _1901.z;
        float _2051;
        float _2053;
        float _2055;
        float _2057;
        float _2059;
        float _2061;
        if (((((1u << ((_1935 >> 4u) & 15u)) + 4294967295u) & _1934) == 0u) || ((_1935 & 240u) == 0u))
        {
            _2051 = 0.0;
            _2053 = 0.0;
            _2055 = 0.0;
            _2057 = 0.0;
            _2059 = 0.0;
            _2061 = 0.0;
        }
        else
        {
            float _2052;
            float _2054;
            float _2056;
            float _2058;
            float _2060;
            float _2062;
            float _2233 = 0.0;
            float _2234 = 0.0;
            float _2235 = 0.0;
            float _2236 = 0.0;
            float _2237 = 0.0;
            float _2238 = 0.0;
            uint _2239 = 0u;
            uint _2248;
            bool _2249;
            for (;;)
            {
                _2248 = texelFetch(g_lightClassification, int((((_1927 << 5u) + (_1913 << 9u)) + (_2239 << 2u)) >> 2u)).x;
                _2249 = _2248 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2249)
                {
                    frontier_phi_62_pred = _2234;
                    frontier_phi_62_pred_1 = _2233;
                    frontier_phi_62_pred_2 = _2235;
                    frontier_phi_62_pred_3 = _2238;
                    frontier_phi_62_pred_4 = _2237;
                    frontier_phi_62_pred_5 = _2236;
                }
                else
                {
                    float _2408;
                    float _2409;
                    float _2410;
                    float _2411;
                    float _2412;
                    float _2413;
                    uint _2414;
                    _2408 = _2233;
                    _2409 = _2234;
                    _2410 = _2235;
                    _2411 = _2236;
                    _2412 = _2237;
                    _2413 = _2238;
                    _2414 = _2248;
                    float _2314;
                    float _2315;
                    float _2316;
                    float _2317;
                    float _2318;
                    float _2319;
                    for (;;)
                    {
                        uint _2418 = uint(findLSB(_2414)) + (_2239 << 5u);
                        uint _2415 = (_2414 + 4294967295u) & _2414;
                        uint _2420 = _2418 * 48u;
                        vec4 _2434 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2420)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 3u)).x));
                        uint _2440 = (_2418 * 48u) + 4u;
                        vec4 _2453 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2440)).x, texelFetch(g_PointLightRenderingBuffer, int(_2440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2440 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2440 + 3u)).x));
                        uint _2459 = (_2418 * 48u) + 8u;
                        vec3 _2470 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2459)).x, texelFetch(g_PointLightRenderingBuffer, int(_2459 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2459 + 2u)).x));
                        float _2474 = _2434.x - _1887;
                        float _2475 = _2434.y - _1888;
                        float _2476 = _2434.z - _1889;
                        float _2477 = dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476));
                        float _2480 = inversesqrt(_2477);
                        float _2489 = 1.0 - (_2477 * _2434.w);
                        float _3520 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
                        float _2490 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
                        float _2491 = sqrt(_2477) * _2453.w;
                        float _2494 = 1.39999997615814208984375 / (_2491 + 1.39999997615814208984375);
                        float _2495 = _2494 * _2494;
                        float _2498 = ((1.0 - _2495) * dot(vec3(0.0), vec3(_2480 * _2474, _2480 * _2475, _2480 * _2476))) + _2495;
                        float _2501 = _2491 * _2491;
                        float _2505 = ((isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0))) * _2490) / ((_2501 * 0.699999988079071044921875) + 1.0);
                        float _2509 = (-0.0) - _1887;
                        float _2510 = (-0.0) - _1888;
                        float _2511 = (-0.0) - _1889;
                        float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
                        float _2519 = dot(vec3(0.0), vec3(_2515 * _2509, _2515 * _2510, _2515 * _2511));
                        float _3536 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
                        float _3547 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
                        float _2523 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
                        float _2527 = (0.5 / (((isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) + 9.9999999392252902907785028219223e-09) + _2523)) * _2523;
                        float _3558 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
                        float _2536 = (((isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * 3.1415927410125732421875) / ((_2501 * 2.1991131305694580078125) + 3.141590118408203125)) * _2490;
                        _2317 = (_2505 * _2453.x) + _2411;
                        _2318 = (_2505 * _2453.y) + _2412;
                        _2319 = (_2505 * _2453.z) + _2413;
                        _2314 = (_2536 * _2470.x) + _2408;
                        _2315 = (_2536 * _2470.y) + _2409;
                        _2316 = (_2536 * _2470.z) + _2410;
                        if (_2415 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2408 = _2314;
                            _2409 = _2315;
                            _2410 = _2316;
                            _2411 = _2317;
                            _2412 = _2318;
                            _2413 = _2319;
                            _2414 = _2415;
                        }
                    }
                    frontier_phi_62_pred = _2315;
                    frontier_phi_62_pred_1 = _2314;
                    frontier_phi_62_pred_2 = _2316;
                    frontier_phi_62_pred_3 = _2319;
                    frontier_phi_62_pred_4 = _2318;
                    frontier_phi_62_pred_5 = _2317;
                }
                _2054 = frontier_phi_62_pred;
                _2052 = frontier_phi_62_pred_1;
                _2056 = frontier_phi_62_pred_2;
                _2062 = frontier_phi_62_pred_3;
                _2060 = frontier_phi_62_pred_4;
                _2058 = frontier_phi_62_pred_5;
                uint _2240 = _2239 + 1u;
                if (_2240 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2233 = _2052;
                    _2234 = _2054;
                    _2235 = _2056;
                    _2236 = _2058;
                    _2237 = _2060;
                    _2238 = _2062;
                    _2239 = _2240;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2051 = _2052;
            _2053 = _2054;
            _2055 = _2056;
            _2057 = _2058;
            _2059 = _2060;
            _2061 = _2062;
        }
        uvec4 _2065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2066 = _2065.z;
        uint _2068 = (_2066 >> 8u) & 15u;
        float _2204;
        float _2206;
        float _2208;
        float _2210;
        float _2212;
        float _2214;
        if (((4294967295u << _2068) & _1934) == 0u)
        {
            _2204 = _2051;
            _2206 = _2053;
            _2208 = _2055;
            _2210 = _2057;
            _2212 = _2059;
            _2214 = _2061;
        }
        else
        {
            float _2229 = inversesqrt(dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2068 < ((_2066 >> 12u) & 15u))
            {
                float _2205;
                float _2207;
                float _2209;
                float _2211;
                float _2213;
                float _2215;
                float _2391 = _2051;
                float _2392 = _2053;
                float _2393 = _2055;
                float _2394 = _2057;
                float _2395 = _2059;
                float _2396 = _2061;
                uint _2397 = _2068;
                uint _2406;
                bool _2407;
                for (;;)
                {
                    _2406 = texelFetch(g_lightClassification, int((((_1927 << 5u) + (_1913 << 9u)) + (_2397 << 2u)) >> 2u)).x;
                    _2407 = _2406 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2407)
                    {
                        frontier_phi_71_pred = _2392;
                        frontier_phi_71_pred_1 = _2391;
                        frontier_phi_71_pred_2 = _2396;
                        frontier_phi_71_pred_3 = _2395;
                        frontier_phi_71_pred_4 = _2394;
                        frontier_phi_71_pred_5 = _2393;
                    }
                    else
                    {
                        float _2562;
                        float _2563;
                        float _2564;
                        float _2565;
                        float _2566;
                        float _2567;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2575 = _2391;
                        float _2576 = _2392;
                        float _2577 = _2393;
                        float _2578 = _2394;
                        float _2579 = _2395;
                        float _2580 = _2396;
                        uint _2581 = _2406;
                        uint _2582;
                        vec4 _2607;
                        float _2608;
                        vec4 _2623;
                        vec3 _2635;
                        vec4 _2651;
                        vec4 _2666;
                        float _2712;
                        bool _2713;
                        for (;;)
                        {
                            uint _2592 = ((_2397 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2581));
                            _2582 = (_2581 + 4294967295u) & _2581;
                            uint _2594 = _2592 * 40u;
                            _2607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 3u)).x));
                            _2608 = _2607.w;
                            uint _2610 = (_2592 * 40u) + 4u;
                            _2623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 3u)).x));
                            uint _2625 = (_2592 * 40u) + 8u;
                            _2635 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 2u)).x));
                            uint _2638 = (_2592 * 40u) + 16u;
                            _2651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 3u)).x));
                            uint _2653 = (_2592 * 40u) + 20u;
                            _2666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 3u)).x));
                            uint _2668 = (_2592 * 40u) + 24u;
                            vec4 _2681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 3u)).x));
                            uint _2687 = (_2592 * 40u) + 28u;
                            vec4 _2700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 3u)).x));
                            _2712 = fma(_1889, _2700.z, fma(_1888, _2700.y, _2700.x * _1887)) + _2700.w;
                            _2713 = !((fma(_1889, _2681.z, fma(_1888, _2681.y, _2681.x * _1887)) + _2681.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2713)
                            {
                                float _2740 = _2607.x - _1887;
                                float _2741 = _2607.y - _1888;
                                float _2742 = _2607.z - _1889;
                                float _2743 = dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742));
                                float _2746 = inversesqrt(_2743);
                                float _2747 = _2746 * _2740;
                                float _2748 = _2746 * _2741;
                                float _2749 = _2746 * _2742;
                                float _2753 = 1.0 - (_2743 / (_2608 * _2608));
                                float _3569 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                                float _2754 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
                                float _2758 = sqrt(_2743) * _2623.w;
                                float _2760 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                                float _2761 = _2760 * _2760;
                                float _2762 = 1.0 - _2761;
                                float _2764 = (_2762 * dot(vec3(_2747, _2748, _2749), vec3(0.0))) + _2761;
                                float _2767 = _2758 * _2758;
                                float _2771 = (fma(_1889, _2651.z, fma(_1888, _2651.y, _2651.x * _1887)) + _2651.w) / _2712;
                                float _2772 = (fma(_1889, _2666.z, fma(_1888, _2666.y, _2666.x * _1887)) + _2666.w) / _2712;
                                float _2776 = 1.0 - dot(vec2(_2771, _2772), vec2(_2771, _2772));
                                float _3585 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                                float _2777 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
                                float _2778 = _2777 * (((isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))) * _2754) / ((_2767 * 0.699999988079071044921875) + 1.0));
                                float _2788 = dot(vec3(0.0), vec3((-0.0) - (_1887 * _2229), (-0.0) - (_1888 * _2229), (-0.0) - (_1889 * _2229)));
                                float _3596 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                                float _2796 = (_2762 * dot(vec3(0.0), vec3(_2747, _2748, _2749))) + _2761;
                                float _3607 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                                float _2797 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
                                float _2801 = (0.5 / (((isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) + 9.9999999392252902907785028219223e-09) + _2797)) * _2797;
                                float _3618 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                                float _2808 = (_2777 * _2754) * (((isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * 3.1415927410125732421875) / ((_2767 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_77_pred = _2808 * _2635.y;
                                frontier_phi_77_pred_1 = _2808 * _2635.x;
                                frontier_phi_77_pred_2 = _2778 * _2623.z;
                                frontier_phi_77_pred_3 = _2778 * _2623.y;
                                frontier_phi_77_pred_4 = _2778 * _2623.x;
                                frontier_phi_77_pred_5 = _2808 * _2635.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2813 = frontier_phi_77_pred;
                            _2812 = frontier_phi_77_pred_1;
                            _2817 = frontier_phi_77_pred_2;
                            _2816 = frontier_phi_77_pred_3;
                            _2815 = frontier_phi_77_pred_4;
                            _2814 = frontier_phi_77_pred_5;
                            _2565 = _2815 + _2578;
                            _2566 = _2816 + _2579;
                            _2567 = _2817 + _2580;
                            _2562 = _2812 + _2575;
                            _2563 = _2813 + _2576;
                            _2564 = _2814 + _2577;
                            if (_2582 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2575 = _2562;
                                _2576 = _2563;
                                _2577 = _2564;
                                _2578 = _2565;
                                _2579 = _2566;
                                _2580 = _2567;
                                _2581 = _2582;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2563;
                        frontier_phi_71_pred_1 = _2562;
                        frontier_phi_71_pred_2 = _2567;
                        frontier_phi_71_pred_3 = _2566;
                        frontier_phi_71_pred_4 = _2565;
                        frontier_phi_71_pred_5 = _2564;
                    }
                    _2207 = frontier_phi_71_pred;
                    _2205 = frontier_phi_71_pred_1;
                    _2215 = frontier_phi_71_pred_2;
                    _2213 = frontier_phi_71_pred_3;
                    _2211 = frontier_phi_71_pred_4;
                    _2209 = frontier_phi_71_pred_5;
                    uint _2398 = _2397 + 1u;
                    if (_2398 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2391 = _2205;
                        _2392 = _2207;
                        _2393 = _2209;
                        _2394 = _2211;
                        _2395 = _2213;
                        _2396 = _2215;
                        _2397 = _2398;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2215;
                frontier_phi_53_54_ladder_1 = _2211;
                frontier_phi_53_54_ladder_2 = _2209;
                frontier_phi_53_54_ladder_3 = _2207;
                frontier_phi_53_54_ladder_4 = _2205;
                frontier_phi_53_54_ladder_5 = _2213;
            }
            else
            {
                frontier_phi_53_54_ladder = _2061;
                frontier_phi_53_54_ladder_1 = _2057;
                frontier_phi_53_54_ladder_2 = _2055;
                frontier_phi_53_54_ladder_3 = _2053;
                frontier_phi_53_54_ladder_4 = _2051;
                frontier_phi_53_54_ladder_5 = _2059;
            }
            _2204 = frontier_phi_53_54_ladder_4;
            _2206 = frontier_phi_53_54_ladder_3;
            _2208 = frontier_phi_53_54_ladder_2;
            _2210 = frontier_phi_53_54_ladder_1;
            _2212 = frontier_phi_53_54_ladder_5;
            _2214 = frontier_phi_53_54_ladder;
        }
        float _2219 = isnan(1.0) ? _708 : (isnan(_708) ? 1.0 : min(_708, 1.0));
        _1947 = (_2219 * _2210) + _1723;
        _1949 = (_2219 * _2212) + _1724;
        _1951 = (_2219 * _2214) + _1725;
        _1953 = ((_2204 * 0.039999999105930328369140625) * _2219) + _1828;
        _1955 = ((_2206 * 0.039999999105930328369140625) * _2219) + _1829;
        _1957 = ((_2208 * 0.039999999105930328369140625) * _2219) + _1830;
    }
    else
    {
        _1947 = _1723;
        _1949 = _1724;
        _1951 = _1725;
        _1953 = _1828;
        _1955 = _1829;
        _1957 = _1830;
    }
    uint _1963 = _684 + uint(cbMatDynParam._m0[0u].w);
    float _1969 = ((_626 * (_614 - (_614 * _587))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1963].x;
    float _1970 = ((_626 * (_615 - (_615 * _587))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1963].y;
    float _1971 = ((_626 * (_616 - (_616 * _587))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1963].z;
    float _3634 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _3645 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3656 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _1988 = (((isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1947 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _708))) + ((_1953 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1415)) * cbPerFrame._m0[3u].x)) + _1969;
    float _1990 = (_1970 + ((_1955 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1415)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1949 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _708)));
    float _1992 = (_1971 + ((_1957 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1415)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1951 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _708)));
    float _3682 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2005 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    uint _2006 = _682 + 6u;
    float _2014 = _668 / cbSceneParam._m0[86u].x;
    float _2015 = _669 / cbSceneParam._m0[86u].y;
    vec4 _2029 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2014, _2015, (log2((isnan(cbSceneParam._m0[77u].w) ? _655 : (isnan(_655) ? cbSceneParam._m0[77u].w : min(_655, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2031 = _2029.x;
    float _2032 = _2029.y;
    float _2033 = _2029.z;
    float _2034 = _2029.w;
    float _2114;
    float _2116;
    float _2118;
    float _2120;
    if (_655 > cbSceneParam._m0[78u].w)
    {
        float _2076 = isnan(_655) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _655 : min(cbSceneParam._m0[80u].w, _655));
        float _2077 = _2076 / _655;
        float _2088 = _2077 * _269;
        float _2089 = _270 * _2077;
        float _2090 = (-0.0) - _2089;
        float _2091 = _2077 * _271;
        float _2093 = (cbSceneParam._m0[77u].w * _2090) / _2076;
        float _2094 = _2093 + cbSceneParam._m0[79u].w;
        float _2095 = cbSceneParam._m0[79u].w - _2089;
        float _2101 = sqrt(((_2088 * _2088) + (_2089 * _2089)) + (_2091 * _2091));
        float _2104 = (1.0 - (cbSceneParam._m0[77u].w / _2076)) * _2101;
        float _2110 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2112 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2327;
        if (abs((_2090 - _2093) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2327 = ((((_2094 > 0.0) ? exp2(_2110 * _2094) : (2.0 - exp2(_2112 * _2094))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2104;
        }
        else
        {
            float _2262 = 1.0 / cbSceneParam._m0[80u].x;
            float _2263 = isnan(_2095) ? _2094 : (isnan(_2094) ? _2095 : max(_2094, _2095));
            float _2264 = isnan(_2095) ? _2094 : (isnan(_2094) ? _2095 : min(_2094, _2095));
            float _2273 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : min(_2263, 0.0));
            float _2274 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : min(_2264, 0.0));
            _2327 = ((abs(_2101 / _2090) * cbSceneParam._m0[80u].y) * ((((_2273 - _2274) * 2.0) - ((exp2(_2110 * (isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0)))) - exp2(_2110 * (isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0))))) * _2262)) - ((exp2(_2112 * _2273) - exp2(_2112 * _2274)) * _2262))) + (_2104 * cbSceneParam._m0[80u].z);
        }
        vec4 _2329 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2014, _2015, 1.0), 0.0);
        float _2338 = exp2((_2327 * (-1.44269502162933349609375)) * (1.0 - _2329.w));
        float _2339 = log2(_2338);
        float _2355 = log2(_2034);
        _2114 = (exp2(_2355 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2339 * cbSceneParam._m0[78u].x)) * _2329.x) / cbSceneParam._m0[78u].x)) + _2031;
        _2116 = (exp2(_2355 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2339 * cbSceneParam._m0[78u].y)) * _2329.y) / cbSceneParam._m0[78u].y)) + _2032;
        _2118 = (exp2(_2355 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2339 * cbSceneParam._m0[78u].z)) * _2329.z) / cbSceneParam._m0[78u].z)) + _2033;
        _2120 = _2338 * _2034;
    }
    else
    {
        _2114 = _2031;
        _2116 = _2032;
        _2118 = _2033;
        _2120 = _2034;
    }
    float _2131 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2132 = _2131 == 3.0;
    float _2134 = log2(_2120);
    float _2138 = exp2(_2134 * cbSceneParam._m0[78u].x);
    float _2139 = exp2(_2134 * cbSceneParam._m0[78u].y);
    float _2140 = exp2(_2134 * cbSceneParam._m0[78u].z);
    float _2141 = _2138 * (isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0)));
    float _2142 = _2139 * (isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0)));
    float _2143 = _2140 * (isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0)));
    float _2152 = (_2131 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2152 * (_2132 ? _2141 : (_2141 + (cbSceneParam._m0[72u].w * _2114)));
    SV_Target.y = _2152 * (_2132 ? _2142 : (_2142 + (cbSceneParam._m0[72u].w * _2116)));
    SV_Target.z = _2152 * (_2132 ? _2143 : (_2143 + (cbSceneParam._m0[72u].w * _2118)));
    SV_Target.w = cbInstanceData._m0[_2006].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1969) * _2005) * _2138) * _2152;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1970) * _2005) * _2139) * _2152;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1971) * _2005) * _2140) * _2152;
    SV_Target_1.w = cbInstanceData._m0[_2006].w;
}


