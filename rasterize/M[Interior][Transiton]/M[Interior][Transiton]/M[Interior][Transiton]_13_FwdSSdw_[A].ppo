#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1288;
float _3323;
float _3324;
float _3325;
float _3326;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    vec4 _305 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _343 = cbMtdParam._m0[27u].w + _284;
    float _344 = cbMtdParam._m0[28u].x + _285;
    float _345 = cbMtdParam._m0[28u].y + _286;
    float _359 = (-0.0) - dot(vec3(_343, _344, _345), vec3(_213 * _205, _213 * _206, _213 * _207));
    float _360 = (-0.0) - dot(vec3(_343, _344, _345), vec3(_227 * TANGENT.x, _227 * TANGENT.y, _227 * TANGENT.z));
    float _361 = (-0.0) - dot(vec3(_343, _344, _345), vec3((-0.0) - (_220 * NORMAL.x), (-0.0) - (_220 * NORMAL.y), (-0.0) - (_220 * NORMAL.z)));
    float _365 = inversesqrt(dot(vec3(_359, _360, _361), vec3(_359, _360, _361)));
    float _368 = _365 * _361;
    float _369 = (_365 * _359) + (((_305.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _370 = (_365 * _360) + (((_305.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _371 = _369 * cbMtdParam._m0[24u].x;
    float _372 = _370 * cbMtdParam._m0[23u].w;
    float _373 = fract(TEXCOORD.x);
    float _374 = fract(TEXCOORD.y);
    float _380;
    if (_371 > 0.0)
    {
        _380 = (1.0 - _373) / _371;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_371 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _373) / _371;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _380 = frontier_phi_3_2_ladder;
    }
    float _388;
    if (_372 > 0.0)
    {
        _388 = (1.0 - _374) / _372;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_372 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _374) / _372;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _388 = frontier_phi_7_6_ladder;
    }
    bool _390 = _368 > 0.0;
    float _392 = _390 ? (cbMtdParam._m0[17u].x / _368) : 5000.0;
    float _393 = isnan(_388) ? _380 : (isnan(_380) ? _388 : min(_380, _388));
    float _394 = isnan(_392) ? _393 : (isnan(_393) ? _392 : min(_393, _392));
    float _398 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _399 = _373 + (-0.5);
    float _402 = _374 + (-0.5);
    float _405 = ((_394 * _368) + _398) / _398;
    vec4 _430 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_399 + (_394 * _371)) / _405) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_402 + (_394 * _372)) / _405) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _440 = cbMtdParam._m0[9u].x * _430.x;
    float _441 = cbMtdParam._m0[9u].y * _430.y;
    float _442 = cbMtdParam._m0[9u].z * _430.z;
    float _460 = _369 * cbMtdParam._m0[26u].z;
    float _461 = _370 * cbMtdParam._m0[26u].y;
    bool _462 = _460 > 0.0;
    float _467;
    if (_462)
    {
        _467 = (1.0 - _373) / _460;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _373) / _460;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _467 = frontier_phi_11_10_ladder;
    }
    bool _469 = _461 > 0.0;
    float _474;
    if (_469)
    {
        _474 = (1.0 - _374) / _461;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_461 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _374) / _461;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _474 = frontier_phi_15_14_ladder;
    }
    float _477 = _390 ? (cbMtdParam._m0[19u].z / _368) : 5000.0;
    float _478 = isnan(_474) ? _467 : (isnan(_467) ? _474 : min(_467, _474));
    float _479 = isnan(_477) ? _478 : (isnan(_478) ? _477 : min(_478, _477));
    float _483 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _487 = ((_479 * _368) + _483) / _483;
    float _492 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _494 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _510 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_399 + (_479 * _460)) / _487) + 0.5) + _492) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_402 + (_479 * _461)) / _487) + 0.5) + _494) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _522;
    if (_462)
    {
        _522 = (1.0 - _373) / _460;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _373) / _460;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _522 = frontier_phi_19_18_ladder;
    }
    float _528;
    if (_469)
    {
        _528 = (1.0 - _374) / _461;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_461 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _374) / _461;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _528 = frontier_phi_23_22_ladder;
    }
    float _530 = isnan(_528) ? _522 : (isnan(_522) ? _528 : min(_522, _528));
    float _531 = isnan(_477) ? _530 : (isnan(_530) ? _477 : min(_530, _477));
    float _538 = ((_531 * _368) + _483) / _483;
    vec4 _558 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_399 + (_531 * _460)) / _538) + 0.5) + _492) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_402 + (_531 * _461)) / _538) + 0.5) + _494) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _560 = _558.x;
    float _567 = (_560 * ((_510.x * cbMtdParam._m0[10u].x) - _440)) + _440;
    float _568 = (_560 * ((_510.y * cbMtdParam._m0[10u].y) - _441)) + _441;
    float _569 = (_560 * ((_510.z * cbMtdParam._m0[10u].z) - _442)) + _442;
    float _583 = _369 * cbMtdParam._m0[27u].x;
    float _584 = _370 * cbMtdParam._m0[26u].w;
    bool _585 = _583 > 0.0;
    float _590;
    if (_585)
    {
        _590 = (1.0 - _373) / _583;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_583 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _373) / _583;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _590 = frontier_phi_27_26_ladder;
    }
    bool _592 = _584 > 0.0;
    float _597;
    if (_592)
    {
        _597 = (1.0 - _374) / _584;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_584 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _374) / _584;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _597 = frontier_phi_31_30_ladder;
    }
    float _600 = _390 ? (cbMtdParam._m0[23u].x / _368) : 5000.0;
    float _601 = isnan(_597) ? _590 : (isnan(_590) ? _597 : min(_590, _597));
    float _602 = isnan(_600) ? _601 : (isnan(_601) ? _600 : min(_601, _600));
    float _606 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _610 = ((_602 * _368) + _606) / _606;
    float _615 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _617 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _633 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_399 + (_602 * _583)) / _610) + 0.5) + _615) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_402 + (_602 * _584)) / _610) + 0.5) + _617) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _645;
    if (_585)
    {
        _645 = (1.0 - _373) / _583;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_583 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _373) / _583;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _645 = frontier_phi_35_34_ladder;
    }
    float _651;
    if (_592)
    {
        _651 = (1.0 - _374) / _584;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_584 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _374) / _584;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _651 = frontier_phi_39_38_ladder;
    }
    float _653 = isnan(_651) ? _645 : (isnan(_645) ? _651 : min(_645, _651));
    float _654 = isnan(_600) ? _653 : (isnan(_653) ? _600 : min(_653, _600));
    float _661 = ((_654 * _368) + _606) / _606;
    vec4 _682 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_399 + (_654 * _583)) / _661) + 0.5) + _615) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_402 + (_654 * _584)) / _661) + 0.5) + _617) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _684 = _682.x;
    float _691 = (_684 * ((_633.x * cbMtdParam._m0[13u].x) - _567)) + _567;
    float _692 = (_684 * ((_633.y * cbMtdParam._m0[13u].y) - _568)) + _568;
    float _693 = (_684 * ((_633.z * cbMtdParam._m0[13u].z) - _569)) + _569;
    vec4 _717 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _722 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _728 = ((_717.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _730 = (-0.0) - (cbMtdParam._m0[21u].x * ((_717.x * 0.5) + (-0.25)));
    float _731 = fract(_722);
    float _733 = fract(_722 + 0.5);
    vec4 _760 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_731 * _730) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_728 * _731) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _762 = _760.x;
    float _768 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_733 * _730) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_728 * _733) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _762) * abs((_731 * 2.0) + (-1.0))) + _762;
    float _774 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _778 = fract(abs(_774));
    float _787 = sin(cbMtdParam._m0[21u].z);
    float _788 = cos(cbMtdParam._m0[21u].z);
    float _789 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _790 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _820 = abs(cbMtdParam._m0[20u].w * (((_768 - (((_774 >= ((-0.0) - _774)) ? _778 : ((-0.0) - _778)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_790, (-0.0) - _787, _788 * _789) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_790, _788, _789 * _787) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _824 = (((_820 * cbMtdParam._m0[18u].y) - _768) * _820) + _768;
    float _3385 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _825 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    vec4 _837 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _852 = (cbMtdParam._m0[14u].x * _837.x) * cbMtdParam._m0[19u].x;
    float _853 = (cbMtdParam._m0[14u].y * _837.y) * cbMtdParam._m0[19u].x;
    float _854 = (cbMtdParam._m0[14u].z * _837.z) * cbMtdParam._m0[19u].x;
    float _864 = exp2(log2(_825) * cbMtdParam._m0[20u].x);
    float _3396 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3407 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _3418 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _893 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _897 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _898 = _284 * _897;
    float _899 = _285 * _897;
    float _900 = _286 * _897;
    vec4 _905 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _907 = _905.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1003 = sqrt(((_284 * _284) + (_285 * _285)) + (_286 * _286));
        float _1009 = (cbMatDynParam._m0[5u].x * _1003) + cbMatDynParam._m0[5u].y;
        float _3429 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1014 = (cbMatDynParam._m0[5u].z * _1003) + cbMatDynParam._m0[5u].w;
        float _3440 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) - _1010)) + _1010) < ((_907 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _920 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _921 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _934 = uint(roundEven(NORMAL.w)) * 13u;
    uint _935 = _934 + 9u;
    uint _936 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _942 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_936].x;
    float _943 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_936].y;
    float _944 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_936].z;
    float _3451 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    vec4 _956 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _920, cbSceneParam._m0[86u].y * _921));
    float _959 = _956.x * TEXCOORD_4;
    float _960 = (-0.0) - _898;
    float _961 = (-0.0) - _899;
    float _962 = (-0.0) - _900;
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1287;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1075 = (cbModelParam._m0[37u].x * ((((fma(_992, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _984)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1077 = (cbModelParam._m0[37u].y * ((((fma(_992, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _984)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1078 = (((((fma(_992, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _984)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1075, _1077, _1078), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1075, _1077, _1078), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1075, _1077, _1078), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1075, _1077, _1078), 0.0);
        float _1115 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1081.x + (-0.5));
        float _1117 = _1115 * (_1081.y + (-0.5));
        float _1118 = _1115 * (_1081.z + (-0.5));
        float _1125 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1088.x + (-0.5));
        float _1127 = _1125 * (_1088.y + (-0.5));
        float _1128 = _1125 * (_1088.z + (-0.5));
        float _1135 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1095.x + (-0.5));
        float _1137 = _1135 * (_1095.y + (-0.5));
        float _1138 = _1135 * (_1095.z + (-0.5));
        float _1145 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1102.x + (-0.5));
        float _1147 = _1145 * (_1102.y + (-0.5));
        float _1148 = _1145 * (_1102.z + (-0.5));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = _1116 * 0.5;
        float _1153 = _1126 * 0.5;
        float _1154 = _1136 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1169 = (dot(vec3(0.0), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1179 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3521 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_1181 + 1.0))) + _1186) * _1149;
        float _1196 = _1117 * 0.5;
        float _1197 = _1127 * 0.5;
        float _1198 = _1137 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(0.0), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3554 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_1223 + 1.0))) + _1228) * _1150;
        float _1238 = _1118 * 0.5;
        float _1239 = _1128 * 0.5;
        float _1240 = _1138 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(0.0), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3587 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1265 + 1.0))) + _1270) * _1151;
        _1287 = _1118;
        _1289 = _1117;
        _1290 = _1116;
        _1291 = _1128;
        _1292 = _1127;
        _1293 = _1126;
        _1294 = _1138;
        _1295 = _1137;
        _1296 = _1136;
        _1297 = _1151;
        _1298 = _1150;
        _1299 = _1149;
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
    }
    else
    {
        _1287 = _1288;
        _1289 = _1288;
        _1290 = _1288;
        _1291 = _1288;
        _1292 = _1288;
        _1293 = _1288;
        _1294 = _1288;
        _1295 = _1288;
        _1296 = _1288;
        _1297 = _1288;
        _1298 = _1288;
        _1299 = _1288;
        _1300 = 0.0;
        _1301 = 0.0;
        _1302 = 0.0;
    }
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1358 = (cbModelParam._m0[38u].x * ((((fma(_992, cbModelParam._m0[30u].z, fma(_988, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1359 = (cbModelParam._m0[38u].y * ((((fma(_992, cbModelParam._m0[31u].z, fma(_988, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1360 = (((((fma(_992, cbModelParam._m0[32u].z, fma(_988, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        float _1395 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1362.x + (-0.5));
        float _1397 = _1395 * (_1362.y + (-0.5));
        float _1398 = _1395 * (_1362.z + (-0.5));
        float _1405 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1369.x + (-0.5));
        float _1407 = _1405 * (_1369.y + (-0.5));
        float _1408 = _1405 * (_1369.z + (-0.5));
        float _1415 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1376.x + (-0.5));
        float _1417 = _1415 * (_1376.y + (-0.5));
        float _1418 = _1415 * (_1376.z + (-0.5));
        float _1425 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1383.x + (-0.5));
        float _1427 = _1425 * (_1383.y + (-0.5));
        float _1428 = _1425 * (_1383.z + (-0.5));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = _1396 * 0.5;
        float _1433 = _1406 * 0.5;
        float _1434 = _1416 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(0.0), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3650 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1459 + 1.0))) + _1464) * _1429;
        float _1474 = _1397 * 0.5;
        float _1475 = _1407 * 0.5;
        float _1476 = _1417 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(0.0), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _3683 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1501 + 1.0))) + _1506) * _1430;
        float _1516 = _1398 * 0.5;
        float _1517 = _1408 * 0.5;
        float _1518 = _1418 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(0.0), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _3716 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1543 + 1.0))) + _1548) * _1431;
        _1565 = _1398;
        _1566 = _1397;
        _1567 = _1396;
        _1568 = _1408;
        _1569 = _1407;
        _1570 = _1406;
        _1571 = _1418;
        _1572 = _1417;
        _1573 = _1416;
        _1574 = _1431;
        _1575 = _1430;
        _1576 = _1429;
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
    }
    else
    {
        _1565 = _1288;
        _1566 = _1288;
        _1567 = _1288;
        _1568 = _1288;
        _1569 = _1288;
        _1570 = _1288;
        _1571 = _1288;
        _1572 = _1288;
        _1573 = _1288;
        _1574 = _1288;
        _1575 = _1288;
        _1576 = _1288;
        _1577 = 0.0;
        _1578 = 0.0;
        _1579 = 0.0;
    }
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1300)) + _1300;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1301)) + _1301;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1302)) + _1302;
    float _1612 = fma(_1591, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1589 * cbSceneParam._m0[89u].x));
    float _1615 = fma(_1591, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1589 * cbSceneParam._m0[90u].x));
    float _1618 = fma(_1591, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1589));
    float _1633 = _898 * (-0.5);
    float _1634 = _899 * (-0.5);
    float _1635 = _900 * (-0.5);
    float _1636 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1639 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1642 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1676;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1649 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1287, _1291, _1294, _1297));
        float _1653 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1289, _1292, _1295, _1298));
        float _1657 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1290, _1293, _1296, _1299));
        float _1664 = dot(vec4(cbModelParam._m0[39u]), vec4(_1633, _1634, _1635, 1.0));
        _1676 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1676 = 1.0;
    }
    float _1687;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1678 = dot(vec4(cbModelParam._m0[40u]), vec4(_1633, _1634, _1635, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1691 = (_1687 * cbModelParam._m0[1u].x) + (_1676 * (1.0 - cbModelParam._m0[1u].x));
    float _1700 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1748 = fma(_992, cbModelParam._m0[13u].z, fma(_988, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _984)) + cbModelParam._m0[13u].w;
        float _1752 = fma(_992, cbModelParam._m0[14u].z, fma(_988, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _984)) + cbModelParam._m0[14u].w;
        float _1756 = fma(_992, cbModelParam._m0[15u].z, fma(_988, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _984)) + cbModelParam._m0[15u].w;
        float _1759 = fma(_962, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960));
        float _1762 = fma(_962, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960));
        float _1765 = fma(_962, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960));
        float _1791;
        if (_1759 > 0.0)
        {
            _1791 = abs((1.0 - _1748) / _1759);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1748 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1791 = frontier_phi_57_55_ladder;
        }
        float _2111;
        if (_1762 > 0.0)
        {
            _2111 = abs((1.0 - _1752) / _1762);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1752 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2111 = frontier_phi_66_62_ladder;
        }
        float _2455;
        if (_1765 > 0.0)
        {
            _2455 = abs((1.0 - _1756) / _1765);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1756 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2455 = frontier_phi_80_73_ladder;
        }
        float _2457 = isnan(_2111) ? _1791 : (isnan(_1791) ? _2111 : min(_1791, _2111));
        float _2458 = isnan(_2455) ? _2457 : (isnan(_2457) ? _2455 : min(_2457, _2455));
        float _2462 = (_2458 * _1759) + _1748;
        float _2463 = (_2458 * _1762) + _1752;
        float _2464 = (_2458 * _1765) + _1756;
        float _2465 = _2458 * 9.9999997473787516355514526367188e-05;
        float _2466 = (-1.0) - _2465;
        float _2468 = _2465 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2464 > _2468) || ((_2464 < _2466) || ((_2463 > _2468) || ((_2463 < _2466) || ((_2462 < _2466) || (_2462 > _2468))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2464, cbModelParam._m0[9u].z, fma(_2463, cbModelParam._m0[9u].y, _2462 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2464, cbModelParam._m0[10u].z, fma(_2463, cbModelParam._m0[10u].y, _2462 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2464, cbModelParam._m0[11u].z, fma(_2463, cbModelParam._m0[11u].y, _2462 * cbModelParam._m0[11u].x))), _1700);
            frontier_phi_56_80_ladder = _2603.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2603.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2603.x * cbModelParam._m0[1u].y;
        }
        _1781 = frontier_phi_56_80_ladder_2;
        _1783 = frontier_phi_56_80_ladder_1;
        _1785 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_960, _961, _962), _1700);
        _1781 = _1769.x * cbModelParam._m0[1u].y;
        _1783 = _1769.y * cbModelParam._m0[1u].y;
        _1785 = _1769.z * cbModelParam._m0[1u].y;
    }
    float _1788 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1840 = fma(_992, cbModelParam._m0[21u].z, fma(_988, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _984)) + cbModelParam._m0[21u].w;
        float _1844 = fma(_992, cbModelParam._m0[22u].z, fma(_988, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _984)) + cbModelParam._m0[22u].w;
        float _1848 = fma(_992, cbModelParam._m0[23u].z, fma(_988, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _984)) + cbModelParam._m0[23u].w;
        float _1851 = fma(_962, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960));
        float _1854 = fma(_962, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960));
        float _1857 = fma(_962, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960));
        float _2116;
        if (_1851 > 0.0)
        {
            _2116 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2116 = frontier_phi_68_64_ladder;
        }
        float _2481;
        if (_1854 > 0.0)
        {
            _2481 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2481 = frontier_phi_82_75_ladder;
        }
        float _2668;
        if (_1857 > 0.0)
        {
            _2668 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2668 = frontier_phi_100_93_ladder;
        }
        float _2670 = isnan(_2481) ? _2116 : (isnan(_2116) ? _2481 : min(_2116, _2481));
        float _2671 = isnan(_2668) ? _2670 : (isnan(_2670) ? _2668 : min(_2670, _2668));
        float _2675 = (_2671 * _1851) + _1840;
        float _2676 = (_2671 * _1854) + _1844;
        float _2677 = (_2671 * _1857) + _1848;
        float _2678 = _2671 * 9.9999997473787516355514526367188e-05;
        float _2679 = (-1.0) - _2678;
        float _2681 = _2678 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2677 > _2681) || ((_2677 < _2679) || ((_2676 > _2681) || ((_2676 < _2679) || ((_2675 < _2679) || (_2675 > _2681))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2677, cbModelParam._m0[17u].z, fma(_2676, cbModelParam._m0[17u].y, _2675 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2677, cbModelParam._m0[18u].z, fma(_2676, cbModelParam._m0[18u].y, _2675 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2677, cbModelParam._m0[19u].z, fma(_2676, cbModelParam._m0[19u].y, _2675 * cbModelParam._m0[19u].x))), _1788);
            frontier_phi_65_100_ladder = _2869.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2869.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2869.z * cbModelParam._m0[1u].z;
        }
        _1876 = frontier_phi_65_100_ladder_1;
        _1878 = frontier_phi_65_100_ladder;
        _1880 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_960, _961, _962), _1788);
        _1876 = _1860.x * cbModelParam._m0[1u].z;
        _1878 = _1860.y * cbModelParam._m0[1u].z;
        _1880 = _1860.z * cbModelParam._m0[1u].z;
    }
    float _1892 = _959 * 0.01200000010430812835693359375;
    float _1894 = _1892 * ((cbModelParam._m0[1u].w * (_1876 - _1781)) + _1781);
    float _1895 = _1892 * ((cbModelParam._m0[1u].w * (_1878 - _1783)) + _1783);
    float _1896 = _1892 * ((cbModelParam._m0[1u].w * (_1880 - _1785)) + _1785);
    float _1899 = fma(_1896, cbSceneParam._m0[89u].z, fma(_1895, cbSceneParam._m0[89u].y, _1894 * cbSceneParam._m0[89u].x));
    float _1902 = fma(_1896, cbSceneParam._m0[90u].z, fma(_1895, cbSceneParam._m0[90u].y, _1894 * cbSceneParam._m0[90u].x));
    float _1905 = fma(_1896, cbSceneParam._m0[91u].z, fma(_1895, cbSceneParam._m0[91u].y, _1894 * cbSceneParam._m0[91u].x));
    vec4 _1913 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_920, _921));
    float _1915 = _1913.w;
    float _1928 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1915);
    float _1929 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1915);
    float _1930 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1915);
    uvec4 _1934 = floatBitsToUint(cbInstanceData._m0[_934 + 5u]);
    uint _1936 = _1934.x * 14u;
    uint _1937 = _1936 + 13u;
    float _1942 = _959 + (-1.0);
    float _1945 = (cbLight._m0[_1937].x * _1942) + 1.0;
    float _1946 = (cbLight._m0[_1937].y * _1942) + 1.0;
    uint _1947 = _1936 + 5u;
    float _1953 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
    uint _1957 = _1936 + 4u;
    float _1966 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
    uint _1970 = _1936 | 1u;
    float _1981 = dot(vec3(cbLight._m0[_1936].xyz), vec3(0.0));
    float _1984 = dot(vec3(cbLight._m0[_1970].xyz), vec3(0.0));
    float _3852 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _3863 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1989 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.3183098733425140380859375;
    float _1991 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.3183098733425140380859375;
    float _1998 = ((cbLight._m0[_1947].x * _1953) * _1991) + (((cbLight._m0[_1957].x * _1928) * _1966) * _1989);
    float _1999 = ((_1953 * cbLight._m0[_1947].y) * _1991) + (((cbLight._m0[_1957].y * _1929) * _1966) * _1989);
    float _2000 = ((_1953 * cbLight._m0[_1947].z) * _1991) + (((cbLight._m0[_1957].z * _1930) * _1966) * _1989);
    uint _2001 = _1936 + 8u;
    float _2007 = cbLight._m0[_1936].x + _898;
    float _2008 = cbLight._m0[_1936].y + _899;
    float _2009 = cbLight._m0[_1936].z + _900;
    float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
    float _2017 = dot(vec3(0.0), vec3(cbLight._m0[_1936].xyz));
    float _3874 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _2021 = dot(vec3(0.0), vec3(_898, _899, _900));
    float _3885 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _2025 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_2007 * _2013, _2008 * _2013, _2009 * _2013));
    float _3896 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2036 = (exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2042 = (0.5 / ((_2020 + 9.9999999392252902907785028219223e-09) + _2024)) * _2020;
    float _3907 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.31831014156341552734375;
    uint _2058 = _1936 + 9u;
    float _2064 = cbLight._m0[_1970].x + _898;
    float _2065 = cbLight._m0[_1970].y + _899;
    float _2066 = cbLight._m0[_1970].z + _900;
    float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
    float _2074 = dot(vec3(0.0), vec3(cbLight._m0[_1970].xyz));
    float _3918 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _2078 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2064 * _2070, _2065 * _2070, _2066 * _2070));
    float _3929 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2087 = (exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2091 = (0.5 / ((_2077 + 9.9999999392252902907785028219223e-09) + _2024)) * _2077;
    float _3940 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.31831014156341552734375;
    float _2103 = (((_2087 * cbLight._m0[_2058].x) * _2093) * _1953) + ((((cbLight._m0[_2001].x * _1928) * _2036) * _2044) * _1966);
    float _2104 = (((_2087 * cbLight._m0[_2058].y) * _2093) * _1953) + ((((cbLight._m0[_2001].y * _1929) * _2036) * _2044) * _1966);
    float _2105 = (((_2087 * cbLight._m0[_2058].z) * _2093) * _1953) + ((((cbLight._m0[_2001].z * _1930) * _2036) * _2044) * _1966);
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    float _2228;
    float _2230;
    if (_1934.y == 0u)
    {
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2160;
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2160;
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2160;
        uvec4 _2175 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2176 = _2175.x;
        uint _2187 = uint((float(_2175.y) * floor(float(uint(cbSceneParam._m0[85u].y * _921) / _2176))) + floor(float(uint(cbSceneParam._m0[85u].x * _920) / _2176)));
        float _2197 = (log2(_2163 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2198 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        uint _2201 = uint(isnan(14.0) ? _2198 : (isnan(_2198) ? 14.0 : min(_2198, 14.0)));
        uvec4 _2206 = texelFetch(g_lightClusterGridBuffer, int(((_2201 << 2u) + (_2187 << 6u)) >> 2u));
        uint _2207 = _2206.x;
        uint _2208 = _2175.z;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        if (((((1u << ((_2208 >> 4u) & 15u)) + 4294967295u) & _2207) == 0u) || ((_2208 & 240u) == 0u))
        {
            _2324 = 0.0;
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
        }
        else
        {
            float _2325;
            float _2327;
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            uint _2521 = 0u;
            uint _2530;
            bool _2531;
            for (;;)
            {
                _2530 = texelFetch(g_lightClassification, int((((_2201 << 5u) + (_2187 << 9u)) + (_2521 << 2u)) >> 2u)).x;
                _2531 = _2530 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2531)
                {
                    frontier_phi_95_pred = _2516;
                    frontier_phi_95_pred_1 = _2515;
                    frontier_phi_95_pred_2 = _2517;
                    frontier_phi_95_pred_3 = _2520;
                    frontier_phi_95_pred_4 = _2519;
                    frontier_phi_95_pred_5 = _2518;
                }
                else
                {
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    uint _2717;
                    _2711 = _2515;
                    _2712 = _2516;
                    _2713 = _2517;
                    _2714 = _2518;
                    _2715 = _2519;
                    _2716 = _2520;
                    _2717 = _2530;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    for (;;)
                    {
                        uint _2721 = uint(findLSB(_2717)) + (_2521 << 5u);
                        uint _2718 = (_2717 + 4294967295u) & _2717;
                        uint _2723 = _2721 * 48u;
                        vec4 _2737 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 3u)).x));
                        uint _2743 = (_2721 * 48u) + 4u;
                        vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 3u)).x));
                        uint _2762 = (_2721 * 48u) + 8u;
                        vec3 _2773 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x));
                        float _2777 = _2737.x - _2161;
                        float _2778 = _2737.y - _2162;
                        float _2779 = _2737.z - _2163;
                        float _2780 = dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779));
                        float _2783 = inversesqrt(_2780);
                        float _2792 = 1.0 - (_2780 * _2737.w);
                        float _3961 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2793 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                        float _2794 = sqrt(_2780) * _2756.w;
                        float _2797 = 1.39999997615814208984375 / (_2794 + 1.39999997615814208984375);
                        float _2798 = _2797 * _2797;
                        float _2801 = ((1.0 - _2798) * dot(vec3(0.0), vec3(_2783 * _2777, _2783 * _2778, _2783 * _2779))) + _2798;
                        float _2804 = _2794 * _2794;
                        float _2808 = ((isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))) * _2793) / ((_2804 * 0.699999988079071044921875) + 1.0);
                        float _2812 = (-0.0) - _2161;
                        float _2813 = (-0.0) - _2162;
                        float _2814 = (-0.0) - _2163;
                        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
                        float _2822 = dot(vec3(0.0), vec3(_2818 * _2812, _2818 * _2813, _2818 * _2814));
                        float _3977 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _3988 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2826 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                        float _2830 = (0.5 / (((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) + 9.9999999392252902907785028219223e-09) + _2826)) * _2826;
                        float _3999 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2839 = (((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 3.1415927410125732421875) / ((_2804 * 2.1991131305694580078125) + 3.141590118408203125)) * _2793;
                        _2615 = (_2808 * _2756.x) + _2714;
                        _2616 = (_2808 * _2756.y) + _2715;
                        _2617 = (_2808 * _2756.z) + _2716;
                        _2612 = (_2839 * _2773.x) + _2711;
                        _2613 = (_2839 * _2773.y) + _2712;
                        _2614 = (_2839 * _2773.z) + _2713;
                        if (_2718 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2711 = _2612;
                            _2712 = _2613;
                            _2713 = _2614;
                            _2714 = _2615;
                            _2715 = _2616;
                            _2716 = _2617;
                            _2717 = _2718;
                        }
                    }
                    frontier_phi_95_pred = _2613;
                    frontier_phi_95_pred_1 = _2612;
                    frontier_phi_95_pred_2 = _2614;
                    frontier_phi_95_pred_3 = _2617;
                    frontier_phi_95_pred_4 = _2616;
                    frontier_phi_95_pred_5 = _2615;
                }
                _2327 = frontier_phi_95_pred;
                _2325 = frontier_phi_95_pred_1;
                _2329 = frontier_phi_95_pred_2;
                _2335 = frontier_phi_95_pred_3;
                _2333 = frontier_phi_95_pred_4;
                _2331 = frontier_phi_95_pred_5;
                uint _2522 = _2521 + 1u;
                if (_2522 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2515 = _2325;
                    _2516 = _2327;
                    _2517 = _2329;
                    _2518 = _2331;
                    _2519 = _2333;
                    _2520 = _2335;
                    _2521 = _2522;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2324 = _2325;
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
        }
        uvec4 _2338 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2339 = _2338.z;
        uint _2341 = (_2339 >> 8u) & 15u;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        if (((4294967295u << _2341) & _2207) == 0u)
        {
            _2486 = _2324;
            _2488 = _2326;
            _2490 = _2328;
            _2492 = _2330;
            _2494 = _2332;
            _2496 = _2334;
        }
        else
        {
            float _2511 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2341 < ((_2339 >> 12u) & 15u))
            {
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2694 = _2324;
                float _2695 = _2326;
                float _2696 = _2328;
                float _2697 = _2330;
                float _2698 = _2332;
                float _2699 = _2334;
                uint _2700 = _2341;
                uint _2709;
                bool _2710;
                for (;;)
                {
                    _2709 = texelFetch(g_lightClassification, int((((_2201 << 5u) + (_2187 << 9u)) + (_2700 << 2u)) >> 2u)).x;
                    _2710 = _2709 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2710)
                    {
                        frontier_phi_109_pred = _2695;
                        frontier_phi_109_pred_1 = _2694;
                        frontier_phi_109_pred_2 = _2699;
                        frontier_phi_109_pred_3 = _2698;
                        frontier_phi_109_pred_4 = _2697;
                        frontier_phi_109_pred_5 = _2696;
                    }
                    else
                    {
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _2887 = _2694;
                        float _2888 = _2695;
                        float _2889 = _2696;
                        float _2890 = _2697;
                        float _2891 = _2698;
                        float _2892 = _2699;
                        uint _2893 = _2709;
                        uint _2894;
                        vec4 _2919;
                        float _2920;
                        vec4 _2935;
                        vec3 _2947;
                        vec4 _2963;
                        vec4 _2978;
                        float _3024;
                        bool _3025;
                        for (;;)
                        {
                            uint _2904 = ((_2700 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2893));
                            _2894 = (_2893 + 4294967295u) & _2893;
                            uint _2906 = _2904 * 40u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            _2920 = _2919.w;
                            uint _2922 = (_2904 * 40u) + 4u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2937 = (_2904 * 40u) + 8u;
                            _2947 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x));
                            uint _2950 = (_2904 * 40u) + 16u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2965 = (_2904 * 40u) + 20u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2980 = (_2904 * 40u) + 24u;
                            vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            uint _2999 = (_2904 * 40u) + 28u;
                            vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            _3024 = fma(_2163, _3012.z, fma(_2162, _3012.y, _3012.x * _2161)) + _3012.w;
                            _3025 = !((fma(_2163, _2993.z, fma(_2162, _2993.y, _2993.x * _2161)) + _2993.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3025)
                            {
                                float _3052 = _2919.x - _2161;
                                float _3053 = _2919.y - _2162;
                                float _3054 = _2919.z - _2163;
                                float _3055 = dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054));
                                float _3058 = inversesqrt(_3055);
                                float _3059 = _3058 * _3052;
                                float _3060 = _3058 * _3053;
                                float _3061 = _3058 * _3054;
                                float _3065 = 1.0 - (_3055 / (_2920 * _2920));
                                float _4010 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3066 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                                float _3070 = sqrt(_3055) * _2935.w;
                                float _3072 = 1.39999997615814208984375 / (_3070 + 1.39999997615814208984375);
                                float _3073 = _3072 * _3072;
                                float _3074 = 1.0 - _3073;
                                float _3076 = (_3074 * dot(vec3(_3059, _3060, _3061), vec3(0.0))) + _3073;
                                float _3079 = _3070 * _3070;
                                float _3083 = (fma(_2163, _2963.z, fma(_2162, _2963.y, _2963.x * _2161)) + _2963.w) / _3024;
                                float _3084 = (fma(_2163, _2978.z, fma(_2162, _2978.y, _2978.x * _2161)) + _2978.w) / _3024;
                                float _3088 = 1.0 - dot(vec2(_3083, _3084), vec2(_3083, _3084));
                                float _4026 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3089 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                                float _3090 = _3089 * (((isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))) * _3066) / ((_3079 * 0.699999988079071044921875) + 1.0));
                                float _3100 = dot(vec3(0.0), vec3((-0.0) - (_2161 * _2511), (-0.0) - (_2162 * _2511), (-0.0) - (_2163 * _2511)));
                                float _4037 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3108 = (_3074 * dot(vec3(0.0), vec3(_3059, _3060, _3061))) + _3073;
                                float _4048 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3109 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _3113 = (0.5 / (((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) + 9.9999999392252902907785028219223e-09) + _3109)) * _3109;
                                float _4059 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3120 = (_3089 * _3066) * (((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 3.1415927410125732421875) / ((_3079 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _3090 * _2935.y;
                                frontier_phi_115_pred_1 = _3090 * _2935.x;
                                frontier_phi_115_pred_2 = _3120 * _2947.z;
                                frontier_phi_115_pred_3 = _3120 * _2947.y;
                                frontier_phi_115_pred_4 = _3120 * _2947.x;
                                frontier_phi_115_pred_5 = _3090 * _2935.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3128 = frontier_phi_115_pred;
                            _3127 = frontier_phi_115_pred_1;
                            _3126 = frontier_phi_115_pred_2;
                            _3125 = frontier_phi_115_pred_3;
                            _3124 = frontier_phi_115_pred_4;
                            _3129 = frontier_phi_115_pred_5;
                            _2877 = _3127 + _2890;
                            _2878 = _3128 + _2891;
                            _2879 = _3129 + _2892;
                            _2874 = _3124 + _2887;
                            _2875 = _3125 + _2888;
                            _2876 = _3126 + _2889;
                            if (_2894 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2894;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2875;
                        frontier_phi_109_pred_1 = _2874;
                        frontier_phi_109_pred_2 = _2879;
                        frontier_phi_109_pred_3 = _2878;
                        frontier_phi_109_pred_4 = _2877;
                        frontier_phi_109_pred_5 = _2876;
                    }
                    _2489 = frontier_phi_109_pred;
                    _2487 = frontier_phi_109_pred_1;
                    _2497 = frontier_phi_109_pred_2;
                    _2495 = frontier_phi_109_pred_3;
                    _2493 = frontier_phi_109_pred_4;
                    _2491 = frontier_phi_109_pred_5;
                    uint _2701 = _2700 + 1u;
                    if (_2701 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2694 = _2487;
                        _2695 = _2489;
                        _2696 = _2491;
                        _2697 = _2493;
                        _2698 = _2495;
                        _2699 = _2497;
                        _2700 = _2701;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2487;
                frontier_phi_84_85_ladder_1 = _2491;
                frontier_phi_84_85_ladder_2 = _2497;
                frontier_phi_84_85_ladder_3 = _2495;
                frontier_phi_84_85_ladder_4 = _2493;
                frontier_phi_84_85_ladder_5 = _2489;
            }
            else
            {
                frontier_phi_84_85_ladder = _2324;
                frontier_phi_84_85_ladder_1 = _2328;
                frontier_phi_84_85_ladder_2 = _2334;
                frontier_phi_84_85_ladder_3 = _2332;
                frontier_phi_84_85_ladder_4 = _2330;
                frontier_phi_84_85_ladder_5 = _2326;
            }
            _2486 = frontier_phi_84_85_ladder;
            _2488 = frontier_phi_84_85_ladder_5;
            _2490 = frontier_phi_84_85_ladder_1;
            _2492 = frontier_phi_84_85_ladder_4;
            _2494 = frontier_phi_84_85_ladder_3;
            _2496 = frontier_phi_84_85_ladder_2;
        }
        float _2501 = isnan(1.0) ? _959 : (isnan(_959) ? 1.0 : min(_959, 1.0));
        _2220 = (_2501 * _2492) + _1998;
        _2222 = (_2501 * _2494) + _1999;
        _2224 = (_2501 * _2496) + _2000;
        _2226 = ((_2486 * 0.039999999105930328369140625) * _2501) + _2103;
        _2228 = ((_2488 * 0.039999999105930328369140625) * _2501) + _2104;
        _2230 = ((_2490 * 0.039999999105930328369140625) * _2501) + _2105;
    }
    else
    {
        _2220 = _1998;
        _2222 = _1999;
        _2224 = _2000;
        _2226 = _2103;
        _2228 = _2104;
        _2230 = _2105;
    }
    uint _2236 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _2242 = ((_864 * (_852 - (_852 * _825))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2236].x;
    float _2243 = ((_864 * (_853 - (_853 * _825))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2236].y;
    float _2244 = ((_864 * (_854 - (_854 * _825))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2236].z;
    float _4075 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4086 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4097 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _2261 = (((isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2220 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _959))) + ((_2226 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1691)) * cbPerFrame._m0[3u].x)) + _2242;
    float _2263 = (_2243 + ((_2228 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1691)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2222 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _959)));
    float _2265 = (_2244 + ((_2230 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1691)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2224 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _959)));
    float _2266 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2267 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2268 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2274 = cbMtdParam._m0[2u].x * _2242;
    float _2275 = cbMtdParam._m0[2u].y * _2243;
    float _2276 = cbMtdParam._m0[2u].z * _2244;
    float _4123 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2278 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    uint _2279 = _934 + 6u;
    float _2287 = _920 / cbSceneParam._m0[86u].x;
    float _2288 = _921 / cbSceneParam._m0[86u].y;
    vec4 _2302 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2287, _2288, (log2((isnan(cbSceneParam._m0[77u].w) ? _893 : (isnan(_893) ? cbSceneParam._m0[77u].w : min(_893, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2304 = _2302.x;
    float _2305 = _2302.y;
    float _2306 = _2302.z;
    float _2307 = _2302.w;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    if (_893 > cbSceneParam._m0[78u].w)
    {
        float _2349 = isnan(_893) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _893 : min(cbSceneParam._m0[80u].w, _893));
        float _2350 = _2349 / _893;
        float _2361 = _2350 * _284;
        float _2362 = _285 * _2350;
        float _2363 = (-0.0) - _2362;
        float _2364 = _2350 * _286;
        float _2366 = (cbSceneParam._m0[77u].w * _2363) / _2349;
        float _2367 = _2366 + cbSceneParam._m0[79u].w;
        float _2368 = cbSceneParam._m0[79u].w - _2362;
        float _2374 = sqrt(((_2361 * _2361) + (_2362 * _2362)) + (_2364 * _2364));
        float _2377 = (1.0 - (cbSceneParam._m0[77u].w / _2349)) * _2374;
        float _2383 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2385 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2625;
        if (abs((_2363 - _2366) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2625 = ((((_2367 > 0.0) ? exp2(_2383 * _2367) : (2.0 - exp2(_2385 * _2367))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2377;
        }
        else
        {
            float _2544 = 1.0 / cbSceneParam._m0[80u].x;
            float _2545 = isnan(_2368) ? _2367 : (isnan(_2367) ? _2368 : max(_2367, _2368));
            float _2546 = isnan(_2368) ? _2367 : (isnan(_2367) ? _2368 : min(_2367, _2368));
            float _2555 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : min(_2545, 0.0));
            float _2556 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : min(_2546, 0.0));
            _2625 = ((abs(_2374 / _2363) * cbSceneParam._m0[80u].y) * ((((_2555 - _2556) * 2.0) - ((exp2(_2383 * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0)))) - exp2(_2383 * (isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0))))) * _2544)) - ((exp2(_2385 * _2555) - exp2(_2385 * _2556)) * _2544))) + (_2377 * cbSceneParam._m0[80u].z);
        }
        vec4 _2627 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2287, _2288, 1.0), 0.0);
        float _2636 = exp2((_2625 * (-1.44269502162933349609375)) * (1.0 - _2627.w));
        float _2637 = log2(_2636);
        float _2653 = log2(_2307);
        _2387 = (exp2(_2653 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].x)) * _2627.x) / cbSceneParam._m0[78u].x)) + _2304;
        _2389 = (exp2(_2653 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].y)) * _2627.y) / cbSceneParam._m0[78u].y)) + _2305;
        _2391 = (exp2(_2653 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].z)) * _2627.z) / cbSceneParam._m0[78u].z)) + _2306;
        _2393 = _2636 * _2307;
    }
    else
    {
        _2387 = _2304;
        _2389 = _2305;
        _2391 = _2306;
        _2393 = _2307;
    }
    bool _2663;
    vec4 _2402;
    vec4 _2425;
    float _2427;
    float _2431;
    float _2432;
    float _2433;
    float _2436;
    float _2439;
    float _2442;
    float _2443;
    bool _2454;
    for (;;)
    {
        _2402 = cbMatDynParam._m0[0u];
        float _2404 = roundEven(_2402.y);
        bool _2405 = _2404 == 3.0;
        float _2407 = log2(_2393);
        float _2411 = exp2(_2407 * cbSceneParam._m0[78u].x);
        float _2412 = exp2(_2407 * cbSceneParam._m0[78u].y);
        float _2413 = exp2(_2407 * cbSceneParam._m0[78u].z);
        float _2414 = _2411 * _2266;
        float _2415 = _2412 * _2267;
        float _2416 = _2413 * _2268;
        float _2423 = _907 + (-0.5);
        _2425 = cbMtdParam._m0[1u];
        _2427 = _2425.y * _2423;
        float _2430 = (_2404 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2431 = _2430 * (_2405 ? _2414 : (_2414 + (cbSceneParam._m0[72u].w * _2387)));
        _2432 = _2430 * (_2405 ? _2415 : (_2415 + (cbSceneParam._m0[72u].w * _2389)));
        _2433 = _2430 * (_2405 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2391)));
        _2436 = ((_2274 * _2278) * _2411) * _2430;
        _2439 = ((_2275 * _2278) * _2412) * _2430;
        _2442 = ((_2276 * _2278) * _2413) * _2430;
        _2443 = _2423 * 0.999000012874603271484375;
        _2454 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2454)
        {
            if ((cbInstanceData._m0[_934 + 7u].x + _2443) < 0.5)
            {
                _2663 = true;
                break;
            }
        }
        uint _2579 = _935 + uint(_2402.w);
        if ((cbInstanceData._m0[_2579].w < 1.0) && ((cbInstanceData._m0[_2579].w + _2443) < 0.5))
        {
            _2663 = true;
            break;
        }
        if ((_2427 + 1.0) < _2425.x)
        {
            _2663 = true;
            break;
        }
        _2663 = false;
        break;
    }
    float _2844;
    if (_2663)
    {
        discard_state = true;
        _2844 = 0.0;
    }
    else
    {
        _2844 = cbInstanceData._m0[_2279].w;
    }
    SV_Target.x = _2431;
    SV_Target.y = _2432;
    SV_Target.z = _2433;
    SV_Target.w = _2844;
    SV_Target_1.x = _2436;
    SV_Target_1.y = _2439;
    SV_Target_1.z = _2442;
    SV_Target_1.w = cbInstanceData._m0[_2279].w;
    discard_exit();
}


