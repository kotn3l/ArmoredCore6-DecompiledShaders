#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1033;
float _3021;
float _3022;
float _3023;
float _3024;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _294 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _332 = cbMtdParam._m0[27u].w + _273;
    float _333 = cbMtdParam._m0[28u].x + _274;
    float _334 = cbMtdParam._m0[28u].y + _275;
    float _351 = (-0.0) - dot(vec3(_332, _333, _334), vec3(_205 * _197, _205 * _198, _205 * _199));
    float _352 = (-0.0) - dot(vec3(_332, _333, _334), vec3(_216 * TANGENT.x, _216 * TANGENT.y, _216 * TANGENT.z));
    float _353 = (-0.0) - dot(vec3(_332, _333, _334), vec3((-0.0) - (NORMAL.x * _212), (-0.0) - (NORMAL.y * _212), (-0.0) - (NORMAL.z * _212)));
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _360 = _357 * _353;
    float _363 = ((_357 * _351) + (((_294.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w)) * cbMtdParam._m0[24u].x;
    float _364 = ((_357 * _352) + (((_294.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x)) * cbMtdParam._m0[23u].w;
    float _365 = fract(TEXCOORD.x);
    float _366 = fract(TEXCOORD.y);
    float _372;
    if (_363 > 0.0)
    {
        _372 = (1.0 - _365) / _363;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_363 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _365) / _363;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _372 = frontier_phi_3_2_ladder;
    }
    float _380;
    if (_364 > 0.0)
    {
        _380 = (1.0 - _366) / _364;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_364 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _366) / _364;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _380 = frontier_phi_7_6_ladder;
    }
    float _384 = (_360 > 0.0) ? (cbMtdParam._m0[17u].x / _360) : 5000.0;
    float _385 = isnan(_380) ? _372 : (isnan(_372) ? _380 : min(_372, _380));
    float _386 = isnan(_384) ? _385 : (isnan(_385) ? _384 : min(_385, _384));
    float _390 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _397 = ((_386 * _360) + _390) / _390;
    vec4 _422 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_365 + (-0.5)) + (_386 * _363)) / _397) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_366 + (-0.5)) + (_386 * _364)) / _397) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _432 = cbMtdParam._m0[9u].x * _422.x;
    float _433 = cbMtdParam._m0[9u].y * _422.y;
    float _434 = cbMtdParam._m0[9u].z * _422.z;
    vec4 _458 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _463 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _469 = ((_458.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _471 = (-0.0) - (cbMtdParam._m0[21u].x * ((_458.x * 0.5) + (-0.25)));
    float _472 = fract(_463);
    float _474 = fract(_463 + 0.5);
    vec4 _501 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_472 * _471) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_469 * _472) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _503 = _501.x;
    float _509 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_474 * _471) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_469 * _474) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _503) * abs((_472 * 2.0) + (-1.0))) + _503;
    float _518 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _522 = fract(abs(_518));
    float _531 = sin(cbMtdParam._m0[21u].z);
    float _532 = cos(cbMtdParam._m0[21u].z);
    float _533 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _534 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _564 = abs(cbMtdParam._m0[20u].w * (((_509 - (((_518 >= ((-0.0) - _518)) ? _522 : ((-0.0) - _522)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_534, (-0.0) - _531, _532 * _533) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_534, _532, _533 * _531) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _568 = (((_564 * cbMtdParam._m0[18u].y) - _509) * _564) + _509;
    float _3043 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _3043 : (isnan(_3043) ? 1.0 : min(_3043, 1.0));
    vec4 _581 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _596 = (cbMtdParam._m0[14u].x * _581.x) * cbMtdParam._m0[19u].x;
    float _597 = (cbMtdParam._m0[14u].y * _581.y) * cbMtdParam._m0[19u].x;
    float _598 = (cbMtdParam._m0[14u].z * _581.z) * cbMtdParam._m0[19u].x;
    float _608 = exp2(log2(_569) * cbMtdParam._m0[20u].x);
    float _3054 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3065 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3076 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _637 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _641 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _642 = _273 * _641;
    float _643 = _274 * _641;
    float _644 = _275 * _641;
    vec4 _649 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _651 = _649.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _748 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _754 = (cbMatDynParam._m0[5u].x * _748) + cbMatDynParam._m0[5u].y;
        float _3087 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0));
        float _759 = (cbMatDynParam._m0[5u].z * _748) + cbMatDynParam._m0[5u].w;
        float _3098 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0))) - _755)) + _755) < ((_651 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _664 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _665 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _678 = uint(roundEven(NORMAL.w)) * 13u;
    uint _680 = _678 + 9u;
    uint _681 = _680 + uint(cbMatDynParam._m0[0u].w);
    float _687 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3054 : (isnan(_3054) ? 1.0 : min(_3054, 1.0)))) * cbInstanceData._m0[_681].x;
    float _688 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0)))) * cbInstanceData._m0[_681].y;
    float _689 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0)))) * cbInstanceData._m0[_681].z;
    float _3109 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0));
    float _3120 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
    float _3131 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
    vec4 _701 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _664, cbSceneParam._m0[86u].y * _665));
    float _704 = _701.x * TEXCOORD_4;
    float _705 = (-0.0) - _642;
    float _706 = (-0.0) - _643;
    float _707 = (-0.0) - _644;
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1032;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _820 = (cbModelParam._m0[37u].x * ((((fma(_737, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _822 = (cbModelParam._m0[37u].y * ((((fma(_737, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _823 = (((((fma(_737, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_820, _822, _823), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_820, _822, _823), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_820, _822, _823), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_820, _822, _823), 0.0);
        float _860 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_826.x + (-0.5));
        float _862 = _860 * (_826.y + (-0.5));
        float _863 = _860 * (_826.z + (-0.5));
        float _870 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_833.x + (-0.5));
        float _872 = _870 * (_833.y + (-0.5));
        float _873 = _870 * (_833.z + (-0.5));
        float _880 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_840.x + (-0.5));
        float _882 = _880 * (_840.y + (-0.5));
        float _883 = _880 * (_840.z + (-0.5));
        float _890 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_847.x + (-0.5));
        float _892 = _890 * (_847.y + (-0.5));
        float _893 = _890 * (_847.z + (-0.5));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = _861 * 0.5;
        float _898 = _871 * 0.5;
        float _899 = _881 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _914 = (dot(vec3(0.0), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3157 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _924 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3168 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3179 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0))) * (_926 + 1.0))) + _931) * _894;
        float _941 = _862 * 0.5;
        float _942 = _872 * 0.5;
        float _943 = _882 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(0.0), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3190 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3201 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3212 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0))) * (_968 + 1.0))) + _973) * _895;
        float _983 = _863 * 0.5;
        float _984 = _873 * 0.5;
        float _985 = _883 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(0.0), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3223 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3234 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3245 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))) * (_1010 + 1.0))) + _1015) * _896;
        _1032 = _863;
        _1034 = _862;
        _1035 = _861;
        _1036 = _873;
        _1037 = _872;
        _1038 = _871;
        _1039 = _883;
        _1040 = _882;
        _1041 = _881;
        _1042 = _896;
        _1043 = _895;
        _1044 = _894;
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
    }
    else
    {
        _1032 = _1033;
        _1034 = _1033;
        _1035 = _1033;
        _1036 = _1033;
        _1037 = _1033;
        _1038 = _1033;
        _1039 = _1033;
        _1040 = _1033;
        _1041 = _1033;
        _1042 = _1033;
        _1043 = _1033;
        _1044 = _1033;
        _1045 = 0.0;
        _1046 = 0.0;
        _1047 = 0.0;
    }
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1103 = (cbModelParam._m0[38u].x * ((((fma(_737, cbModelParam._m0[30u].z, fma(_733, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _729)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1104 = (cbModelParam._m0[38u].y * ((((fma(_737, cbModelParam._m0[31u].z, fma(_733, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _729)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1105 = (((((fma(_737, cbModelParam._m0[32u].z, fma(_733, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _729)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1140 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1107.x + (-0.5));
        float _1142 = _1140 * (_1107.y + (-0.5));
        float _1143 = _1140 * (_1107.z + (-0.5));
        float _1150 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1114.x + (-0.5));
        float _1152 = _1150 * (_1114.y + (-0.5));
        float _1153 = _1150 * (_1114.z + (-0.5));
        float _1160 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1121.x + (-0.5));
        float _1162 = _1160 * (_1121.y + (-0.5));
        float _1163 = _1160 * (_1121.z + (-0.5));
        float _1170 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1128.x + (-0.5));
        float _1172 = _1170 * (_1128.y + (-0.5));
        float _1173 = _1170 * (_1128.z + (-0.5));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = _1141 * 0.5;
        float _1178 = _1151 * 0.5;
        float _1179 = _1161 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(0.0), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3286 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3297 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3308 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))) * (_1204 + 1.0))) + _1209) * _1174;
        float _1219 = _1142 * 0.5;
        float _1220 = _1152 * 0.5;
        float _1221 = _1162 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(0.0), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3319 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3330 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3341 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) * (_1246 + 1.0))) + _1251) * _1175;
        float _1261 = _1143 * 0.5;
        float _1262 = _1153 * 0.5;
        float _1263 = _1163 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(0.0), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3352 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3363 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3374 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * (_1288 + 1.0))) + _1293) * _1176;
        _1310 = _1143;
        _1311 = _1142;
        _1312 = _1141;
        _1313 = _1153;
        _1314 = _1152;
        _1315 = _1151;
        _1316 = _1163;
        _1317 = _1162;
        _1318 = _1161;
        _1319 = _1176;
        _1320 = _1175;
        _1321 = _1174;
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
    }
    else
    {
        _1310 = _1033;
        _1311 = _1033;
        _1312 = _1033;
        _1313 = _1033;
        _1314 = _1033;
        _1315 = _1033;
        _1316 = _1033;
        _1317 = _1033;
        _1318 = _1033;
        _1319 = _1033;
        _1320 = _1033;
        _1321 = _1033;
        _1322 = 0.0;
        _1323 = 0.0;
        _1324 = 0.0;
    }
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1045)) + _1045;
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1046)) + _1046;
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1047)) + _1047;
    float _1357 = fma(_1336, cbSceneParam._m0[89u].z, fma(_1335, cbSceneParam._m0[89u].y, _1334 * cbSceneParam._m0[89u].x));
    float _1360 = fma(_1336, cbSceneParam._m0[90u].z, fma(_1335, cbSceneParam._m0[90u].y, _1334 * cbSceneParam._m0[90u].x));
    float _1363 = fma(_1336, cbSceneParam._m0[91u].z, fma(_1335, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1334));
    float _1378 = _642 * (-0.5);
    float _1379 = _643 * (-0.5);
    float _1380 = _644 * (-0.5);
    float _1381 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1384 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1387 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1421;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1394 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1032, _1036, _1039, _1042));
        float _1398 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1402 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1409 = dot(vec4(cbModelParam._m0[39u]), vec4(_1378, _1379, _1380, 1.0));
        _1421 = dot(vec3(isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1409) ? 0.0 : (isnan(0.0) ? _1409 : max(0.0, _1409))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1421 = 1.0;
    }
    float _1432;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1423 = dot(vec4(cbModelParam._m0[40u]), vec4(_1378, _1379, _1380, 1.0));
        _1432 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1423) ? 0.0 : (isnan(0.0) ? _1423 : max(0.0, _1423))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1432 = 1.0;
    }
    float _1436 = (_1432 * cbModelParam._m0[1u].x) + (_1421 * (1.0 - cbModelParam._m0[1u].x));
    float _1445 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1493 = fma(_737, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729)) + cbModelParam._m0[13u].w;
        float _1497 = fma(_737, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729)) + cbModelParam._m0[14u].w;
        float _1501 = fma(_737, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729)) + cbModelParam._m0[15u].w;
        float _1504 = fma(_707, cbModelParam._m0[13u].z, fma(_706, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _705));
        float _1507 = fma(_707, cbModelParam._m0[14u].z, fma(_706, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _705));
        float _1510 = fma(_707, cbModelParam._m0[15u].z, fma(_706, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _705));
        float _1536;
        if (_1504 > 0.0)
        {
            _1536 = abs((1.0 - _1493) / _1504);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1493 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1536 = frontier_phi_25_23_ladder;
        }
        float _1856;
        if (_1507 > 0.0)
        {
            _1856 = abs((1.0 - _1497) / _1507);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1497 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1856 = frontier_phi_34_30_ladder;
        }
        float _2201;
        if (_1510 > 0.0)
        {
            _2201 = abs((1.0 - _1501) / _1510);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1501 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2201 = frontier_phi_48_41_ladder;
        }
        float _2203 = isnan(_1856) ? _1536 : (isnan(_1536) ? _1856 : min(_1536, _1856));
        float _2204 = isnan(_2201) ? _2203 : (isnan(_2203) ? _2201 : min(_2203, _2201));
        float _2208 = (_2204 * _1504) + _1493;
        float _2209 = (_2204 * _1507) + _1497;
        float _2210 = (_2204 * _1510) + _1501;
        float _2211 = _2204 * 9.9999997473787516355514526367188e-05;
        float _2212 = (-1.0) - _2211;
        float _2214 = _2211 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2210 > _2214) || ((_2210 < _2212) || ((_2209 > _2214) || ((_2209 < _2212) || ((_2208 < _2212) || (_2208 > _2214))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2349 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2210, cbModelParam._m0[9u].z, fma(_2209, cbModelParam._m0[9u].y, _2208 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2210, cbModelParam._m0[10u].z, fma(_2209, cbModelParam._m0[10u].y, _2208 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2210, cbModelParam._m0[11u].z, fma(_2209, cbModelParam._m0[11u].y, _2208 * cbModelParam._m0[11u].x))), _1445);
            frontier_phi_24_48_ladder = _2349.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2349.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2349.x * cbModelParam._m0[1u].y;
        }
        _1526 = frontier_phi_24_48_ladder_2;
        _1528 = frontier_phi_24_48_ladder_1;
        _1530 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_705, _706, _707), _1445);
        _1526 = _1514.x * cbModelParam._m0[1u].y;
        _1528 = _1514.y * cbModelParam._m0[1u].y;
        _1530 = _1514.z * cbModelParam._m0[1u].y;
    }
    float _1533 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1585 = fma(_737, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729)) + cbModelParam._m0[21u].w;
        float _1589 = fma(_737, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729)) + cbModelParam._m0[22u].w;
        float _1593 = fma(_737, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729)) + cbModelParam._m0[23u].w;
        float _1596 = fma(_707, cbModelParam._m0[21u].z, fma(_706, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _705));
        float _1599 = fma(_707, cbModelParam._m0[22u].z, fma(_706, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _705));
        float _1602 = fma(_707, cbModelParam._m0[23u].z, fma(_706, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _705));
        float _1861;
        if (_1596 > 0.0)
        {
            _1861 = abs((1.0 - _1585) / _1596);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1585 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1861 = frontier_phi_36_32_ladder;
        }
        float _2227;
        if (_1599 > 0.0)
        {
            _2227 = abs((1.0 - _1589) / _1599);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1589 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2227 = frontier_phi_50_43_ladder;
        }
        float _2414;
        if (_1602 > 0.0)
        {
            _2414 = abs((1.0 - _1593) / _1602);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1593 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2414 = frontier_phi_68_61_ladder;
        }
        float _2416 = isnan(_2227) ? _1861 : (isnan(_1861) ? _2227 : min(_1861, _2227));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1596) + _1585;
        float _2422 = (_2417 * _1599) + _1589;
        float _2423 = (_2417 * _1602) + _1593;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2425 = (-1.0) - _2424;
        float _2427 = _2424 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2423 > _2427) || ((_2423 < _2425) || ((_2422 > _2427) || ((_2422 < _2425) || ((_2421 < _2425) || (_2421 > _2427))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2423, cbModelParam._m0[17u].z, fma(_2422, cbModelParam._m0[17u].y, _2421 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2423, cbModelParam._m0[18u].z, fma(_2422, cbModelParam._m0[18u].y, _2421 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2423, cbModelParam._m0[19u].z, fma(_2422, cbModelParam._m0[19u].y, _2421 * cbModelParam._m0[19u].x))), _1533);
            frontier_phi_33_68_ladder = _2615.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2615.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2615.x * cbModelParam._m0[1u].z;
        }
        _1621 = frontier_phi_33_68_ladder_2;
        _1623 = frontier_phi_33_68_ladder;
        _1625 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1605 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_705, _706, _707), _1533);
        _1621 = _1605.x * cbModelParam._m0[1u].z;
        _1623 = _1605.y * cbModelParam._m0[1u].z;
        _1625 = _1605.z * cbModelParam._m0[1u].z;
    }
    float _1637 = _704 * 0.01200000010430812835693359375;
    float _1639 = _1637 * ((cbModelParam._m0[1u].w * (_1621 - _1526)) + _1526);
    float _1640 = _1637 * ((cbModelParam._m0[1u].w * (_1623 - _1528)) + _1528);
    float _1641 = _1637 * ((cbModelParam._m0[1u].w * (_1625 - _1530)) + _1530);
    float _1644 = fma(_1641, cbSceneParam._m0[89u].z, fma(_1640, cbSceneParam._m0[89u].y, _1639 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1641, cbSceneParam._m0[90u].z, fma(_1640, cbSceneParam._m0[90u].y, _1639 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1641, cbSceneParam._m0[91u].z, fma(_1640, cbSceneParam._m0[91u].y, _1639 * cbSceneParam._m0[91u].x));
    vec4 _1658 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_664, _665));
    float _1660 = _1658.w;
    float _1673 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1660);
    float _1674 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1660);
    float _1675 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1660);
    uvec4 _1679 = floatBitsToUint(cbInstanceData._m0[_678 + 5u]);
    uint _1681 = _1679.x * 14u;
    uint _1682 = _1681 + 13u;
    float _1687 = _704 + (-1.0);
    float _1690 = (cbLight._m0[_1682].x * _1687) + 1.0;
    float _1691 = (cbLight._m0[_1682].y * _1687) + 1.0;
    uint _1692 = _1681 + 5u;
    float _1698 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
    uint _1702 = _1681 + 4u;
    float _1711 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
    uint _1715 = _1681 | 1u;
    float _1726 = dot(vec3(cbLight._m0[_1681].xyz), vec3(0.0));
    float _1729 = dot(vec3(cbLight._m0[_1715].xyz), vec3(0.0));
    float _3510 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _3521 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1734 = (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * 0.3183098733425140380859375;
    float _1736 = (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * 0.3183098733425140380859375;
    float _1743 = ((cbLight._m0[_1692].x * _1698) * _1736) + (((cbLight._m0[_1702].x * _1673) * _1711) * _1734);
    float _1744 = ((_1698 * cbLight._m0[_1692].y) * _1736) + (((cbLight._m0[_1702].y * _1674) * _1711) * _1734);
    float _1745 = ((_1698 * cbLight._m0[_1692].z) * _1736) + (((cbLight._m0[_1702].z * _1675) * _1711) * _1734);
    uint _1746 = _1681 + 8u;
    float _1752 = cbLight._m0[_1681].x + _642;
    float _1753 = cbLight._m0[_1681].y + _643;
    float _1754 = cbLight._m0[_1681].z + _644;
    float _1758 = inversesqrt(dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754)));
    float _1762 = dot(vec3(0.0), vec3(cbLight._m0[_1681].xyz));
    float _3532 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _1766 = dot(vec3(0.0), vec3(_642, _643, _644));
    float _3543 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _1770 = dot(vec3(cbLight._m0[_1681].xyz), vec3(_1752 * _1758, _1753 * _1758, _1754 * _1758));
    float _3554 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1781 = (exp2(log2(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1787 = (0.5 / ((_1765 + 9.9999999392252902907785028219223e-09) + _1769)) * _1765;
    float _3565 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1789 = (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * 0.31831014156341552734375;
    uint _1803 = _1681 + 9u;
    float _1809 = cbLight._m0[_1715].x + _642;
    float _1810 = cbLight._m0[_1715].y + _643;
    float _1811 = cbLight._m0[_1715].z + _644;
    float _1815 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
    float _1819 = dot(vec3(0.0), vec3(cbLight._m0[_1715].xyz));
    float _3576 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _1823 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_1809 * _1815, _1810 * _1815, _1811 * _1815));
    float _3587 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1832 = (exp2(log2(1.0 - (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1836 = (0.5 / ((_1822 + 9.9999999392252902907785028219223e-09) + _1769)) * _1822;
    float _3598 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1838 = (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.31831014156341552734375;
    float _1848 = (((_1832 * cbLight._m0[_1803].x) * _1838) * _1698) + ((((cbLight._m0[_1746].x * _1673) * _1781) * _1789) * _1711);
    float _1849 = (((_1832 * cbLight._m0[_1803].y) * _1838) * _1698) + ((((cbLight._m0[_1746].y * _1674) * _1781) * _1789) * _1711);
    float _1850 = (((_1832 * cbLight._m0[_1803].z) * _1838) * _1698) + ((((cbLight._m0[_1746].z * _1675) * _1781) * _1789) * _1711);
    float _1966;
    float _1968;
    float _1970;
    float _1972;
    float _1974;
    float _1976;
    if (_1679.y == 0u)
    {
        float _1906 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1907 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1906;
        float _1908 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1906;
        float _1909 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1906;
        uvec4 _1921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1922 = _1921.x;
        uint _1933 = uint((float(_1921.y) * floor(float(uint(cbSceneParam._m0[85u].y * _665) / _1922))) + floor(float(uint(cbSceneParam._m0[85u].x * _664) / _1922)));
        float _1943 = (log2(_1909 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1944 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        uint _1947 = uint(isnan(14.0) ? _1944 : (isnan(_1944) ? 14.0 : min(_1944, 14.0)));
        uvec4 _1952 = texelFetch(g_lightClusterGridBuffer, int(((_1947 << 2u) + (_1933 << 6u)) >> 2u));
        uint _1953 = _1952.x;
        uint _1954 = _1921.z;
        float _2070;
        float _2072;
        float _2074;
        float _2076;
        float _2078;
        float _2080;
        if (((((1u << ((_1954 >> 4u) & 15u)) + 4294967295u) & _1953) == 0u) || ((_1954 & 240u) == 0u))
        {
            _2070 = 0.0;
            _2072 = 0.0;
            _2074 = 0.0;
            _2076 = 0.0;
            _2078 = 0.0;
            _2080 = 0.0;
        }
        else
        {
            float _2071;
            float _2073;
            float _2075;
            float _2077;
            float _2079;
            float _2081;
            float _2261 = 0.0;
            float _2262 = 0.0;
            float _2263 = 0.0;
            float _2264 = 0.0;
            float _2265 = 0.0;
            float _2266 = 0.0;
            uint _2267 = 0u;
            uint _2276;
            bool _2277;
            for (;;)
            {
                _2276 = texelFetch(g_lightClassification, int((((_1947 << 5u) + (_1933 << 9u)) + (_2267 << 2u)) >> 2u)).x;
                _2277 = _2276 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2277)
                {
                    frontier_phi_63_pred = _2263;
                    frontier_phi_63_pred_1 = _2266;
                    frontier_phi_63_pred_2 = _2265;
                    frontier_phi_63_pred_3 = _2264;
                    frontier_phi_63_pred_4 = _2262;
                    frontier_phi_63_pred_5 = _2261;
                }
                else
                {
                    float _2457;
                    float _2458;
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    uint _2463;
                    _2457 = _2261;
                    _2458 = _2262;
                    _2459 = _2263;
                    _2460 = _2264;
                    _2461 = _2265;
                    _2462 = _2266;
                    _2463 = _2276;
                    float _2358;
                    float _2359;
                    float _2360;
                    float _2361;
                    float _2362;
                    float _2363;
                    for (;;)
                    {
                        uint _2467 = uint(findLSB(_2463)) + (_2267 << 5u);
                        uint _2464 = (_2463 + 4294967295u) & _2463;
                        uint _2469 = _2467 * 48u;
                        vec4 _2483 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2469)).x, texelFetch(g_PointLightRenderingBuffer, int(_2469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2469 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2469 + 3u)).x));
                        uint _2489 = (_2467 * 48u) + 4u;
                        vec4 _2502 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2489)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 3u)).x));
                        uint _2508 = (_2467 * 48u) + 8u;
                        vec3 _2519 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2508)).x, texelFetch(g_PointLightRenderingBuffer, int(_2508 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2508 + 2u)).x));
                        float _2523 = _2483.x - _1907;
                        float _2524 = _2483.y - _1908;
                        float _2525 = _2483.z - _1909;
                        float _2526 = dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525));
                        float _2529 = inversesqrt(_2526);
                        float _2538 = 1.0 - (_2526 * _2483.w);
                        float _3619 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
                        float _2539 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
                        float _2540 = sqrt(_2526) * _2502.w;
                        float _2543 = 1.39999997615814208984375 / (_2540 + 1.39999997615814208984375);
                        float _2544 = _2543 * _2543;
                        float _2547 = ((1.0 - _2544) * dot(vec3(0.0), vec3(_2529 * _2523, _2529 * _2524, _2529 * _2525))) + _2544;
                        float _2550 = _2540 * _2540;
                        float _2554 = ((isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0))) * _2539) / ((_2550 * 0.699999988079071044921875) + 1.0);
                        float _2558 = (-0.0) - _1907;
                        float _2559 = (-0.0) - _1908;
                        float _2560 = (-0.0) - _1909;
                        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
                        float _2568 = dot(vec3(0.0), vec3(_2564 * _2558, _2564 * _2559, _2564 * _2560));
                        float _3635 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
                        float _3646 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
                        float _2572 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
                        float _2576 = (0.5 / (((isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) + 9.9999999392252902907785028219223e-09) + _2572)) * _2572;
                        float _3657 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
                        float _2585 = (((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * 3.1415927410125732421875) / ((_2550 * 2.1991131305694580078125) + 3.141590118408203125)) * _2539;
                        _2361 = (_2554 * _2502.x) + _2460;
                        _2362 = (_2554 * _2502.y) + _2461;
                        _2363 = (_2554 * _2502.z) + _2462;
                        _2358 = (_2585 * _2519.x) + _2457;
                        _2359 = (_2585 * _2519.y) + _2458;
                        _2360 = (_2585 * _2519.z) + _2459;
                        if (_2464 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2457 = _2358;
                            _2458 = _2359;
                            _2459 = _2360;
                            _2460 = _2361;
                            _2461 = _2362;
                            _2462 = _2363;
                            _2463 = _2464;
                        }
                    }
                    frontier_phi_63_pred = _2360;
                    frontier_phi_63_pred_1 = _2363;
                    frontier_phi_63_pred_2 = _2362;
                    frontier_phi_63_pred_3 = _2361;
                    frontier_phi_63_pred_4 = _2359;
                    frontier_phi_63_pred_5 = _2358;
                }
                _2075 = frontier_phi_63_pred;
                _2081 = frontier_phi_63_pred_1;
                _2079 = frontier_phi_63_pred_2;
                _2077 = frontier_phi_63_pred_3;
                _2073 = frontier_phi_63_pred_4;
                _2071 = frontier_phi_63_pred_5;
                uint _2268 = _2267 + 1u;
                if (_2268 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2261 = _2071;
                    _2262 = _2073;
                    _2263 = _2075;
                    _2264 = _2077;
                    _2265 = _2079;
                    _2266 = _2081;
                    _2267 = _2268;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2070 = _2071;
            _2072 = _2073;
            _2074 = _2075;
            _2076 = _2077;
            _2078 = _2079;
            _2080 = _2081;
        }
        uvec4 _2084 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2085 = _2084.z;
        uint _2087 = (_2085 >> 8u) & 15u;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        if (((4294967295u << _2087) & _1953) == 0u)
        {
            _2232 = _2070;
            _2234 = _2072;
            _2236 = _2074;
            _2238 = _2076;
            _2240 = _2078;
            _2242 = _2080;
        }
        else
        {
            float _2257 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2087 < ((_2085 >> 12u) & 15u))
            {
                float _2233;
                float _2235;
                float _2237;
                float _2239;
                float _2241;
                float _2243;
                float _2440 = _2070;
                float _2441 = _2072;
                float _2442 = _2074;
                float _2443 = _2076;
                float _2444 = _2078;
                float _2445 = _2080;
                uint _2446 = _2087;
                uint _2455;
                bool _2456;
                for (;;)
                {
                    _2455 = texelFetch(g_lightClassification, int((((_1947 << 5u) + (_1933 << 9u)) + (_2446 << 2u)) >> 2u)).x;
                    _2456 = _2455 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2456)
                    {
                        frontier_phi_77_pred = _2445;
                        frontier_phi_77_pred_1 = _2444;
                        frontier_phi_77_pred_2 = _2443;
                        frontier_phi_77_pred_3 = _2442;
                        frontier_phi_77_pred_4 = _2441;
                        frontier_phi_77_pred_5 = _2440;
                    }
                    else
                    {
                        float _2620;
                        float _2621;
                        float _2622;
                        float _2623;
                        float _2624;
                        float _2625;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2633 = _2440;
                        float _2634 = _2441;
                        float _2635 = _2442;
                        float _2636 = _2443;
                        float _2637 = _2444;
                        float _2638 = _2445;
                        uint _2639 = _2455;
                        uint _2640;
                        vec4 _2665;
                        float _2666;
                        vec4 _2681;
                        vec3 _2693;
                        vec4 _2709;
                        vec4 _2724;
                        float _2770;
                        bool _2771;
                        for (;;)
                        {
                            uint _2650 = ((_2446 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2639));
                            _2640 = (_2639 + 4294967295u) & _2639;
                            uint _2652 = _2650 * 40u;
                            _2665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 3u)).x));
                            _2666 = _2665.w;
                            uint _2668 = (_2650 * 40u) + 4u;
                            _2681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 3u)).x));
                            uint _2683 = (_2650 * 40u) + 8u;
                            _2693 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 2u)).x));
                            uint _2696 = (_2650 * 40u) + 16u;
                            _2709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 3u)).x));
                            uint _2711 = (_2650 * 40u) + 20u;
                            _2724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 3u)).x));
                            uint _2726 = (_2650 * 40u) + 24u;
                            vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 3u)).x));
                            uint _2745 = (_2650 * 40u) + 28u;
                            vec4 _2758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 3u)).x));
                            _2770 = fma(_1909, _2758.z, fma(_1908, _2758.y, _2758.x * _1907)) + _2758.w;
                            _2771 = !((fma(_1909, _2739.z, fma(_1908, _2739.y, _2739.x * _1907)) + _2739.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2771)
                            {
                                float _2798 = _2665.x - _1907;
                                float _2799 = _2665.y - _1908;
                                float _2800 = _2665.z - _1909;
                                float _2801 = dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800));
                                float _2804 = inversesqrt(_2801);
                                float _2805 = _2804 * _2798;
                                float _2806 = _2804 * _2799;
                                float _2807 = _2804 * _2800;
                                float _2811 = 1.0 - (_2801 / (_2666 * _2666));
                                float _3668 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                                float _2812 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
                                float _2816 = sqrt(_2801) * _2681.w;
                                float _2818 = 1.39999997615814208984375 / (_2816 + 1.39999997615814208984375);
                                float _2819 = _2818 * _2818;
                                float _2820 = 1.0 - _2819;
                                float _2822 = (_2820 * dot(vec3(_2805, _2806, _2807), vec3(0.0))) + _2819;
                                float _2825 = _2816 * _2816;
                                float _2829 = (fma(_1909, _2709.z, fma(_1908, _2709.y, _2709.x * _1907)) + _2709.w) / _2770;
                                float _2830 = (fma(_1909, _2724.z, fma(_1908, _2724.y, _2724.x * _1907)) + _2724.w) / _2770;
                                float _2834 = 1.0 - dot(vec2(_2829, _2830), vec2(_2829, _2830));
                                float _3684 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                                float _2835 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
                                float _2836 = _2835 * (((isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0))) * _2812) / ((_2825 * 0.699999988079071044921875) + 1.0));
                                float _2846 = dot(vec3(0.0), vec3((-0.0) - (_1907 * _2257), (-0.0) - (_1908 * _2257), (-0.0) - (_1909 * _2257)));
                                float _3695 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                                float _2854 = (_2820 * dot(vec3(0.0), vec3(_2805, _2806, _2807))) + _2819;
                                float _3706 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                                float _2855 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
                                float _2859 = (0.5 / (((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) + 9.9999999392252902907785028219223e-09) + _2855)) * _2855;
                                float _3717 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                                float _2866 = (_2835 * _2812) * (((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 3.1415927410125732421875) / ((_2825 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2836 * _2681.x;
                                frontier_phi_83_pred_1 = _2836 * _2681.z;
                                frontier_phi_83_pred_2 = _2836 * _2681.y;
                                frontier_phi_83_pred_3 = _2866 * _2693.z;
                                frontier_phi_83_pred_4 = _2866 * _2693.y;
                                frontier_phi_83_pred_5 = _2866 * _2693.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2873 = frontier_phi_83_pred;
                            _2875 = frontier_phi_83_pred_1;
                            _2874 = frontier_phi_83_pred_2;
                            _2872 = frontier_phi_83_pred_3;
                            _2871 = frontier_phi_83_pred_4;
                            _2870 = frontier_phi_83_pred_5;
                            _2623 = _2873 + _2636;
                            _2624 = _2874 + _2637;
                            _2625 = _2875 + _2638;
                            _2620 = _2870 + _2633;
                            _2621 = _2871 + _2634;
                            _2622 = _2872 + _2635;
                            if (_2640 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2633 = _2620;
                                _2634 = _2621;
                                _2635 = _2622;
                                _2636 = _2623;
                                _2637 = _2624;
                                _2638 = _2625;
                                _2639 = _2640;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2625;
                        frontier_phi_77_pred_1 = _2624;
                        frontier_phi_77_pred_2 = _2623;
                        frontier_phi_77_pred_3 = _2622;
                        frontier_phi_77_pred_4 = _2621;
                        frontier_phi_77_pred_5 = _2620;
                    }
                    _2243 = frontier_phi_77_pred;
                    _2241 = frontier_phi_77_pred_1;
                    _2239 = frontier_phi_77_pred_2;
                    _2237 = frontier_phi_77_pred_3;
                    _2235 = frontier_phi_77_pred_4;
                    _2233 = frontier_phi_77_pred_5;
                    uint _2447 = _2446 + 1u;
                    if (_2447 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2440 = _2233;
                        _2441 = _2235;
                        _2442 = _2237;
                        _2443 = _2239;
                        _2444 = _2241;
                        _2445 = _2243;
                        _2446 = _2447;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2235;
                frontier_phi_52_53_ladder_1 = _2243;
                frontier_phi_52_53_ladder_2 = _2241;
                frontier_phi_52_53_ladder_3 = _2239;
                frontier_phi_52_53_ladder_4 = _2237;
                frontier_phi_52_53_ladder_5 = _2233;
            }
            else
            {
                frontier_phi_52_53_ladder = _2072;
                frontier_phi_52_53_ladder_1 = _2080;
                frontier_phi_52_53_ladder_2 = _2078;
                frontier_phi_52_53_ladder_3 = _2076;
                frontier_phi_52_53_ladder_4 = _2074;
                frontier_phi_52_53_ladder_5 = _2070;
            }
            _2232 = frontier_phi_52_53_ladder_5;
            _2234 = frontier_phi_52_53_ladder;
            _2236 = frontier_phi_52_53_ladder_4;
            _2238 = frontier_phi_52_53_ladder_3;
            _2240 = frontier_phi_52_53_ladder_2;
            _2242 = frontier_phi_52_53_ladder_1;
        }
        float _2247 = isnan(1.0) ? _704 : (isnan(_704) ? 1.0 : min(_704, 1.0));
        _1966 = (_2247 * _2238) + _1743;
        _1968 = (_2247 * _2240) + _1744;
        _1970 = (_2247 * _2242) + _1745;
        _1972 = ((_2232 * 0.039999999105930328369140625) * _2247) + _1848;
        _1974 = ((_2234 * 0.039999999105930328369140625) * _2247) + _1849;
        _1976 = ((_2236 * 0.039999999105930328369140625) * _2247) + _1850;
    }
    else
    {
        _1966 = _1743;
        _1968 = _1744;
        _1970 = _1745;
        _1972 = _1848;
        _1974 = _1849;
        _1976 = _1850;
    }
    uint _1982 = _680 + uint(cbMatDynParam._m0[0u].w);
    float _1988 = ((_608 * (_596 - (_596 * _569))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1982].x;
    float _1989 = ((_608 * (_597 - (_597 * _569))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1982].y;
    float _1990 = ((_608 * (_598 - (_598 * _569))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1982].z;
    float _3733 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3744 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3755 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _2007 = (((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1966 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _704))) + ((_1972 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1436)) * cbPerFrame._m0[3u].x)) + _1988;
    float _2009 = (_1989 + ((_1974 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1436)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1968 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _704)));
    float _2011 = (_1990 + ((_1976 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1436)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1970 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _704)));
    float _2012 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2013 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2014 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2020 = cbMtdParam._m0[2u].x * _1988;
    float _2021 = cbMtdParam._m0[2u].y * _1989;
    float _2022 = cbMtdParam._m0[2u].z * _1990;
    float _3781 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2024 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    uint _2025 = _678 + 6u;
    float _2033 = _664 / cbSceneParam._m0[86u].x;
    float _2034 = _665 / cbSceneParam._m0[86u].y;
    vec4 _2048 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2033, _2034, (log2((isnan(cbSceneParam._m0[77u].w) ? _637 : (isnan(_637) ? cbSceneParam._m0[77u].w : min(_637, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2050 = _2048.x;
    float _2051 = _2048.y;
    float _2052 = _2048.z;
    float _2053 = _2048.w;
    float _2133;
    float _2135;
    float _2137;
    float _2139;
    if (_637 > cbSceneParam._m0[78u].w)
    {
        float _2095 = isnan(_637) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _637 : min(cbSceneParam._m0[80u].w, _637));
        float _2096 = _2095 / _637;
        float _2107 = _2096 * _273;
        float _2108 = _274 * _2096;
        float _2109 = (-0.0) - _2108;
        float _2110 = _2096 * _275;
        float _2112 = (cbSceneParam._m0[77u].w * _2109) / _2095;
        float _2113 = _2112 + cbSceneParam._m0[79u].w;
        float _2114 = cbSceneParam._m0[79u].w - _2108;
        float _2120 = sqrt(((_2107 * _2107) + (_2108 * _2108)) + (_2110 * _2110));
        float _2123 = (1.0 - (cbSceneParam._m0[77u].w / _2095)) * _2120;
        float _2129 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2131 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2371;
        if (abs((_2109 - _2112) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2371 = ((((_2113 > 0.0) ? exp2(_2129 * _2113) : (2.0 - exp2(_2131 * _2113))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2123;
        }
        else
        {
            float _2290 = 1.0 / cbSceneParam._m0[80u].x;
            float _2291 = isnan(_2114) ? _2113 : (isnan(_2113) ? _2114 : max(_2113, _2114));
            float _2292 = isnan(_2114) ? _2113 : (isnan(_2113) ? _2114 : min(_2113, _2114));
            float _2301 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : min(_2291, 0.0));
            float _2302 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : min(_2292, 0.0));
            _2371 = ((abs(_2120 / _2109) * cbSceneParam._m0[80u].y) * ((((_2301 - _2302) * 2.0) - ((exp2(_2129 * (isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0)))) - exp2(_2129 * (isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0))))) * _2290)) - ((exp2(_2131 * _2301) - exp2(_2131 * _2302)) * _2290))) + (_2123 * cbSceneParam._m0[80u].z);
        }
        vec4 _2373 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2033, _2034, 1.0), 0.0);
        float _2382 = exp2((_2371 * (-1.44269502162933349609375)) * (1.0 - _2373.w));
        float _2383 = log2(_2382);
        float _2399 = log2(_2053);
        _2133 = (exp2(_2399 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2383 * cbSceneParam._m0[78u].x)) * _2373.x) / cbSceneParam._m0[78u].x)) + _2050;
        _2135 = (exp2(_2399 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2383 * cbSceneParam._m0[78u].y)) * _2373.y) / cbSceneParam._m0[78u].y)) + _2051;
        _2137 = (exp2(_2399 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2383 * cbSceneParam._m0[78u].z)) * _2373.z) / cbSceneParam._m0[78u].z)) + _2052;
        _2139 = _2382 * _2053;
    }
    else
    {
        _2133 = _2050;
        _2135 = _2051;
        _2137 = _2052;
        _2139 = _2053;
    }
    bool _2409;
    vec4 _2148;
    vec4 _2171;
    float _2173;
    float _2177;
    float _2178;
    float _2179;
    float _2182;
    float _2185;
    float _2188;
    float _2189;
    bool _2200;
    for (;;)
    {
        _2148 = cbMatDynParam._m0[0u];
        float _2150 = roundEven(_2148.y);
        bool _2151 = _2150 == 3.0;
        float _2153 = log2(_2139);
        float _2157 = exp2(_2153 * cbSceneParam._m0[78u].x);
        float _2158 = exp2(_2153 * cbSceneParam._m0[78u].y);
        float _2159 = exp2(_2153 * cbSceneParam._m0[78u].z);
        float _2160 = _2157 * _2012;
        float _2161 = _2158 * _2013;
        float _2162 = _2159 * _2014;
        float _2169 = _651 + (-0.5);
        _2171 = cbMtdParam._m0[1u];
        _2173 = _2171.y * _2169;
        float _2176 = (_2150 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2177 = _2176 * (_2151 ? _2160 : (_2160 + (cbSceneParam._m0[72u].w * _2133)));
        _2178 = _2176 * (_2151 ? _2161 : (_2161 + (cbSceneParam._m0[72u].w * _2135)));
        _2179 = _2176 * (_2151 ? _2162 : (_2162 + (cbSceneParam._m0[72u].w * _2137)));
        _2182 = ((_2020 * _2024) * _2157) * _2176;
        _2185 = ((_2021 * _2024) * _2158) * _2176;
        _2188 = ((_2022 * _2024) * _2159) * _2176;
        _2189 = _2169 * 0.999000012874603271484375;
        _2200 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2200)
        {
            if ((cbInstanceData._m0[_678 + 7u].x + _2189) < 0.5)
            {
                _2409 = true;
                break;
            }
        }
        uint _2325 = _680 + uint(_2148.w);
        if ((cbInstanceData._m0[_2325].w < 1.0) && ((cbInstanceData._m0[_2325].w + _2189) < 0.5))
        {
            _2409 = true;
            break;
        }
        if ((_2173 + 1.0) < _2171.x)
        {
            _2409 = true;
            break;
        }
        _2409 = false;
        break;
    }
    float _2590;
    if (_2409)
    {
        discard_state = true;
        _2590 = 0.0;
    }
    else
    {
        _2590 = cbInstanceData._m0[_2025].w;
    }
    SV_Target.x = _2177;
    SV_Target.y = _2178;
    SV_Target.z = _2179;
    SV_Target.w = _2590;
    SV_Target_1.x = _2182;
    SV_Target_1.y = _2185;
    SV_Target_1.z = _2188;
    SV_Target_1.w = cbInstanceData._m0[_2025].w;
    discard_exit();
}


