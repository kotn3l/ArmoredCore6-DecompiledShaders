#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1497;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _276);
    float _287 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _276);
    float _288 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _276);
    vec4 _302 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _305 = _302.x;
    vec4 _323 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _340 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _305) + cbMtdParam._m0[12u].x) * _323.x;
    float _342 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _305) + cbMtdParam._m0[12u].y) * _323.y;
    float _344 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _305) + cbMtdParam._m0[12u].z) * _323.z;
    vec4 _362 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _401 = cbMtdParam._m0[27u].w + _286;
    float _402 = cbMtdParam._m0[28u].x + _287;
    float _403 = cbMtdParam._m0[28u].y + _288;
    float _417 = (-0.0) - dot(vec3(_401, _402, _403), vec3(_216, _217, _218));
    float _418 = (-0.0) - dot(vec3(_401, _402, _403), vec3(_230, _231, _232));
    float _419 = (-0.0) - dot(vec3(_401, _402, _403), vec3((-0.0) - _223, (-0.0) - _224, (-0.0) - _225));
    float _423 = inversesqrt(dot(vec3(_417, _418, _419), vec3(_417, _418, _419)));
    float _426 = _423 * _419;
    float _427 = (_423 * _417) + ((cbMtdParam._m0[25u].w * _305) * ((_362.x * 2.0) + (-1.0)));
    float _428 = (_423 * _418) + ((cbMtdParam._m0[26u].x * _305) * ((_362.y * 2.0) + (-1.0)));
    float _429 = _427 * cbMtdParam._m0[24u].x;
    float _430 = _428 * cbMtdParam._m0[23u].w;
    float _431 = fract(TEXCOORD.x);
    float _432 = fract(TEXCOORD.y);
    float _438;
    if (_429 > 0.0)
    {
        _438 = (1.0 - _431) / _429;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_429 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _431) / _429;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _438 = frontier_phi_3_2_ladder;
    }
    float _446;
    if (_430 > 0.0)
    {
        _446 = (1.0 - _432) / _430;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_430 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _432) / _430;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _446 = frontier_phi_7_6_ladder;
    }
    bool _448 = _426 > 0.0;
    float _450 = _448 ? (cbMtdParam._m0[17u].x / _426) : 5000.0;
    float _451 = isnan(_446) ? _438 : (isnan(_438) ? _446 : min(_438, _446));
    float _452 = isnan(_450) ? _451 : (isnan(_451) ? _450 : min(_451, _450));
    float _456 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _457 = _431 + (-0.5);
    float _460 = _432 + (-0.5);
    float _463 = ((_452 * _426) + _456) / _456;
    vec4 _488 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_457 + (_452 * _429)) / _463) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_460 + (_452 * _430)) / _463) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _501 = (_488.x * _305) * cbMtdParam._m0[9u].x;
    float _502 = (_488.y * _305) * cbMtdParam._m0[9u].y;
    float _503 = (_488.z * _305) * cbMtdParam._m0[9u].z;
    float _521 = _427 * cbMtdParam._m0[26u].z;
    float _522 = _428 * cbMtdParam._m0[26u].y;
    bool _523 = _521 > 0.0;
    float _528;
    if (_523)
    {
        _528 = (1.0 - _431) / _521;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_521 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _431) / _521;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _528 = frontier_phi_11_10_ladder;
    }
    bool _530 = _522 > 0.0;
    float _535;
    if (_530)
    {
        _535 = (1.0 - _432) / _522;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_522 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _432) / _522;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _535 = frontier_phi_15_14_ladder;
    }
    float _538 = _448 ? (cbMtdParam._m0[19u].z / _426) : 5000.0;
    float _539 = isnan(_535) ? _528 : (isnan(_528) ? _535 : min(_528, _535));
    float _540 = isnan(_538) ? _539 : (isnan(_539) ? _538 : min(_539, _538));
    float _544 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _548 = ((_540 * _426) + _544) / _544;
    float _553 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _555 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _571 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_457 + (_540 * _521)) / _548) + 0.5) + _553) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_460 + (_540 * _522)) / _548) + 0.5) + _555) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _586;
    if (_523)
    {
        _586 = (1.0 - _431) / _521;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_521 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _431) / _521;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _586 = frontier_phi_19_18_ladder;
    }
    float _592;
    if (_530)
    {
        _592 = (1.0 - _432) / _522;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_522 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _432) / _522;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _592 = frontier_phi_23_22_ladder;
    }
    float _594 = isnan(_592) ? _586 : (isnan(_586) ? _592 : min(_586, _592));
    float _595 = isnan(_538) ? _594 : (isnan(_594) ? _538 : min(_594, _538));
    float _602 = ((_595 * _426) + _544) / _544;
    vec4 _622 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_457 + (_595 * _521)) / _602) + 0.5) + _553) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_460 + (_595 * _522)) / _602) + 0.5) + _555) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _624 = _622.x;
    float _634 = (((((cbMtdParam._m0[10u].x * _305) * _571.x) - _501) * _305) * _624) + _501;
    float _635 = (((((cbMtdParam._m0[10u].y * _305) * _571.y) - _502) * _305) * _624) + _502;
    float _636 = (((((cbMtdParam._m0[10u].z * _305) * _571.z) - _503) * _305) * _624) + _503;
    float _649 = _427 * cbMtdParam._m0[27u].x;
    float _650 = _428 * cbMtdParam._m0[26u].w;
    bool _651 = _649 > 0.0;
    float _656;
    if (_651)
    {
        _656 = (1.0 - _431) / _649;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_649 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _431) / _649;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _656 = frontier_phi_27_26_ladder;
    }
    bool _658 = _650 > 0.0;
    float _663;
    if (_658)
    {
        _663 = (1.0 - _432) / _650;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_650 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _432) / _650;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _663 = frontier_phi_31_30_ladder;
    }
    float _666 = _448 ? (cbMtdParam._m0[23u].x / _426) : 5000.0;
    float _667 = isnan(_663) ? _656 : (isnan(_656) ? _663 : min(_656, _663));
    float _668 = isnan(_666) ? _667 : (isnan(_667) ? _666 : min(_667, _666));
    float _672 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _676 = ((_668 * _426) + _672) / _672;
    float _681 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _683 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _699 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_457 + (_668 * _649)) / _676) + 0.5) + _681) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_460 + (_668 * _650)) / _676) + 0.5) + _683) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _714;
    if (_651)
    {
        _714 = (1.0 - _431) / _649;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_649 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _431) / _649;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _714 = frontier_phi_35_34_ladder;
    }
    float _720;
    if (_658)
    {
        _720 = (1.0 - _432) / _650;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_650 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _432) / _650;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _720 = frontier_phi_39_38_ladder;
    }
    float _722 = isnan(_720) ? _714 : (isnan(_714) ? _720 : min(_714, _720));
    float _723 = isnan(_666) ? _722 : (isnan(_722) ? _666 : min(_722, _666));
    float _730 = ((_723 * _426) + _672) / _672;
    vec4 _750 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_457 + (_723 * _649)) / _730) + 0.5) + _681) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_460 + (_723 * _650)) / _730) + 0.5) + _683) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _752 = _750.x;
    float _762 = (((((cbMtdParam._m0[13u].x * _305) * _699.x) - _634) * _305) * _752) + _634;
    float _763 = (((((cbMtdParam._m0[13u].y * _305) * _699.y) - _635) * _305) * _752) + _635;
    float _764 = (((((cbMtdParam._m0[13u].z * _305) * _699.z) - _636) * _305) * _752) + _636;
    vec4 _777 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _781 = _777.z;
    float _784 = (_777.x * 2.0) + (-1.0);
    float _785 = (_777.y * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _3708 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))));
    float _800 = (cbMtdParam._m0[19u].y * _762) * cbMtdParam._m0[16u].x;
    float _802 = (cbMtdParam._m0[19u].y * _763) * cbMtdParam._m0[16u].y;
    float _804 = (cbMtdParam._m0[19u].y * _764) * cbMtdParam._m0[16u].z;
    vec4 _828 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _833 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _839 = ((_828.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _841 = (-0.0) - (cbMtdParam._m0[21u].x * ((_828.x * 0.5) + (-0.25)));
    float _842 = fract(_833);
    float _844 = fract(_833 + 0.5);
    vec4 _871 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_842 * _841) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_839 * _842) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _873 = _871.x;
    float _879 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_844 * _841) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_839 * _844) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _873) * abs((_842 * 2.0) + (-1.0))) + _873;
    float _885 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _889 = fract(abs(_885));
    float _899 = sin(cbMtdParam._m0[21u].z);
    float _900 = cos(cbMtdParam._m0[21u].z);
    float _901 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _902 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _927 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_902, (-0.0) - _899, _900 * _901) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_902, _900, _901 * _899) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_885 >= ((-0.0) - _885)) ? _889 : ((-0.0) - _889)) * cbMtdParam._m0[18u].z) - _879)) + cbMtdParam._m0[18u].w;
    float _928 = ceil(_927);
    float _3719 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _929 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _949 = ((((cbMtdParam._m0[21u].w * _762) * cbMtdParam._m0[15u].x) - _800) * _929) + _800;
    float _950 = ((((cbMtdParam._m0[21u].w * _763) * cbMtdParam._m0[15u].y) - _802) * _929) + _802;
    float _951 = ((((cbMtdParam._m0[21u].w * _764) * cbMtdParam._m0[15u].z) - _804) * _929) + _804;
    float _955 = abs(cbMtdParam._m0[20u].w * _927);
    float _959 = (((_955 * cbMtdParam._m0[18u].y) - _879) * _955) + _879;
    float _3730 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _960 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    vec4 _972 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _987 = (cbMtdParam._m0[14u].x * _972.x) * cbMtdParam._m0[19u].x;
    float _988 = (cbMtdParam._m0[14u].y * _972.y) * cbMtdParam._m0[19u].x;
    float _989 = (cbMtdParam._m0[14u].z * _972.z) * cbMtdParam._m0[19u].x;
    float _996 = exp2(log2(_960) * cbMtdParam._m0[20u].x);
    float _1018 = fma(_791, _223, fma(_785, _230, _784 * _216));
    float _1021 = fma(_791, _224, fma(_785, _231, _784 * _217));
    float _1024 = fma(_791, _225, fma(_785, _232, _784 * _218));
    float _1028 = inversesqrt(dot(vec3(_1018, _1021, _1024), vec3(_1018, _1021, _1024)));
    float _1029 = _1028 * _1018;
    float _1030 = _1028 * _1021;
    float _1031 = _1028 * _1024;
    float _3741 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _1032 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3763 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3774 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _1051 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1055 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _1056 = _286 * _1055;
    float _1057 = _287 * _1055;
    float _1058 = _288 * _1055;
    float _1064 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1065 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1083 = fma(_1031, cbSceneParam._m0[5u].z, fma(_1030, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1029));
    float _1086 = fma(_1031, cbSceneParam._m0[6u].z, fma(_1030, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1029));
    float _1089 = fma(_1031, cbSceneParam._m0[7u].z, fma(_1030, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1029));
    uint _1102 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1103 = _1102 + 9u;
    uint _1104 = _1103 + uint(cbMatDynParam._m0[0u].w);
    float _1110 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_1104].x;
    float _1111 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_1104].y;
    float _1112 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_1104].z;
    float _3785 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1113 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1114 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1115 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    vec4 _1124 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1064, cbSceneParam._m0[86u].y * _1065));
    float _1127 = _1124.x * TEXCOORD_4;
    float _1128 = dot(vec3(_1029, _1030, _1031), vec3(_1056, _1057, _1058));
    float _1131 = _1128 * 2.0;
    float _1135 = (_1131 * _1029) - _1056;
    float _1136 = (_1131 * _1030) - _1057;
    float _1137 = (_1131 * _1031) - _1058;
    float _1141 = abs(dot(vec3(_1056, _1057, _1058), vec3(_1029, _1030, _1031)));
    float _3818 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1143 = sqrt(_1032);
    float _1156 = exp2((_1143 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1143 * 3.0));
    float _1188 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1192 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1196 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1496;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1223 = fma(_1196, cbModelParam._m0[26u].z, fma(_1192, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188));
        float _1227 = fma(_1196, cbModelParam._m0[27u].z, fma(_1192, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188));
        float _1231 = fma(_1196, cbModelParam._m0[28u].z, fma(_1192, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188));
        float _1254 = _1188 + _1029;
        float _1255 = _1192 + _1030;
        float _1256 = _1196 + _1031;
        float _1266 = fma(_1256, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1254)) - _1223;
        float _1267 = fma(_1256, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1254)) - _1227;
        float _1268 = fma(_1256, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1254)) - _1231;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1223 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1227 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[34u].z) + ((((((_1231 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1324 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1290.x + (-0.5));
        float _1326 = _1324 * (_1290.y + (-0.5));
        float _1327 = _1324 * (_1290.z + (-0.5));
        float _1334 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1297.x + (-0.5));
        float _1336 = _1334 * (_1297.y + (-0.5));
        float _1337 = _1334 * (_1297.z + (-0.5));
        float _1344 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1304.x + (-0.5));
        float _1346 = _1344 * (_1304.y + (-0.5));
        float _1347 = _1344 * (_1304.z + (-0.5));
        float _1354 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1311.x + (-0.5));
        float _1356 = _1354 * (_1311.y + (-0.5));
        float _1357 = _1354 * (_1311.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1378 = (dot(vec3(_1029, _1030, _1031), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1388 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3866 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1390 + 1.0))) + _1395) * _1358;
        float _1405 = _1326 * 0.5;
        float _1406 = _1336 * 0.5;
        float _1407 = _1346 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_1029, _1030, _1031), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3899 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1432 + 1.0))) + _1437) * _1359;
        float _1447 = _1327 * 0.5;
        float _1448 = _1337 * 0.5;
        float _1449 = _1347 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_1029, _1030, _1031), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3932 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1474 + 1.0))) + _1479) * _1360;
        _1496 = _1327;
        _1498 = _1326;
        _1499 = _1325;
        _1500 = _1337;
        _1501 = _1336;
        _1502 = _1335;
        _1503 = _1347;
        _1504 = _1346;
        _1505 = _1345;
        _1506 = _1360;
        _1507 = _1359;
        _1508 = _1358;
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1497;
        _1498 = _1497;
        _1499 = _1497;
        _1500 = _1497;
        _1501 = _1497;
        _1502 = _1497;
        _1503 = _1497;
        _1504 = _1497;
        _1505 = _1497;
        _1506 = _1497;
        _1507 = _1497;
        _1508 = _1497;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1536 = fma(_1196, cbModelParam._m0[30u].z, fma(_1192, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1188));
        float _1540 = fma(_1196, cbModelParam._m0[31u].z, fma(_1192, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1188));
        float _1544 = fma(_1196, cbModelParam._m0[32u].z, fma(_1192, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1188));
        float _1567 = _1188 + _1029;
        float _1568 = _1192 + _1030;
        float _1569 = _1196 + _1031;
        float _1579 = fma(_1569, cbModelParam._m0[30u].z, fma(_1568, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1567)) - _1536;
        float _1580 = fma(_1569, cbModelParam._m0[31u].z, fma(_1568, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1567)) - _1540;
        float _1581 = fma(_1569, cbModelParam._m0[32u].z, fma(_1568, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1567)) - _1544;
        float _1585 = inversesqrt(dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581)));
        float _1598 = ((_1585 * _1579) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1536 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1599 = ((_1585 * _1580) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1540 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1600 = ((_1585 * _1581) / cbModelParam._m0[35u].z) + ((((((_1544 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1598, _1599, _1600), 0.0);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1598, _1599, _1600), 0.0);
        vec4 _1616 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1598, _1599, _1600), 0.0);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1598, _1599, _1600), 0.0);
        float _1635 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1602.x + (-0.5));
        float _1637 = _1635 * (_1602.y + (-0.5));
        float _1638 = _1635 * (_1602.z + (-0.5));
        float _1645 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1609.x + (-0.5));
        float _1647 = _1645 * (_1609.y + (-0.5));
        float _1648 = _1645 * (_1609.z + (-0.5));
        float _1655 = exp2((_1616.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1616.x + (-0.5));
        float _1657 = _1655 * (_1616.y + (-0.5));
        float _1658 = _1655 * (_1616.z + (-0.5));
        float _1665 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1623.x + (-0.5));
        float _1667 = _1665 * (_1623.y + (-0.5));
        float _1668 = _1665 * (_1623.z + (-0.5));
        float _1669 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1670 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1671 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1672 = _1636 * 0.5;
        float _1673 = _1646 * 0.5;
        float _1674 = _1656 * 0.5;
        float _1675 = dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674));
        float _1680 = (_1675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1675);
        float _1688 = (dot(vec3(_1029, _1030, _1031), vec3(_1680 * _1672, _1680 * _1673, _1680 * _1674)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = sqrt(((_1673 * _1673) + (_1672 * _1672)) + (_1674 * _1674)) / (_1669 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1699 = _1698 * 2.0;
        float _1703 = (1.0 - _1698) / (_1698 + 1.0);
        float _3995 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1713 = ((((1.0 - _1704) * (_1699 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1699 + 1.0))) + _1704) * _1669;
        float _1714 = _1637 * 0.5;
        float _1715 = _1647 * 0.5;
        float _1716 = _1657 * 0.5;
        float _1717 = dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716));
        float _1722 = (_1717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1717);
        float _1730 = (dot(vec3(_1029, _1030, _1031), vec3(_1722 * _1714, _1722 * _1715, _1722 * _1716)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1739 = sqrt(((_1715 * _1715) + (_1714 * _1714)) + (_1716 * _1716)) / (_1670 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1741 = _1740 * 2.0;
        float _1745 = (1.0 - _1740) / (_1740 + 1.0);
        float _4028 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1755 = ((((1.0 - _1746) * (_1741 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1741 + 1.0))) + _1746) * _1670;
        float _1756 = _1638 * 0.5;
        float _1757 = _1648 * 0.5;
        float _1758 = _1658 * 0.5;
        float _1759 = dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758));
        float _1764 = (_1759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1759);
        float _1772 = (dot(vec3(_1029, _1030, _1031), vec3(_1764 * _1756, _1764 * _1757, _1764 * _1758)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1781 = sqrt(((_1757 * _1757) + (_1756 * _1756)) + (_1758 * _1758)) / (_1671 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1783 = _1782 * 2.0;
        float _1787 = (1.0 - _1782) / (_1782 + 1.0);
        float _4061 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1797 = ((((1.0 - _1788) * (_1783 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1783 + 1.0))) + _1788) * _1671;
        _1805 = _1638;
        _1806 = _1637;
        _1807 = _1636;
        _1808 = _1648;
        _1809 = _1647;
        _1810 = _1646;
        _1811 = _1658;
        _1812 = _1657;
        _1813 = _1656;
        _1814 = _1671;
        _1815 = _1670;
        _1816 = _1669;
        _1817 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)));
        _1818 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)));
        _1819 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)));
    }
    else
    {
        _1805 = _1497;
        _1806 = _1497;
        _1807 = _1497;
        _1808 = _1497;
        _1809 = _1497;
        _1810 = _1497;
        _1811 = _1497;
        _1812 = _1497;
        _1813 = _1497;
        _1814 = _1497;
        _1815 = _1497;
        _1816 = _1497;
        _1817 = 0.0;
        _1818 = 0.0;
        _1819 = 0.0;
    }
    float _1829 = (cbModelParam._m0[1u].x * (_1817 - _1509)) + _1509;
    float _1830 = (cbModelParam._m0[1u].x * (_1818 - _1510)) + _1510;
    float _1831 = (cbModelParam._m0[1u].x * (_1819 - _1511)) + _1511;
    float _1852 = fma(_1831, cbSceneParam._m0[89u].z, fma(_1830, cbSceneParam._m0[89u].y, _1829 * cbSceneParam._m0[89u].x));
    float _1855 = fma(_1831, cbSceneParam._m0[90u].z, fma(_1830, cbSceneParam._m0[90u].y, _1829 * cbSceneParam._m0[90u].x));
    float _1858 = fma(_1831, cbSceneParam._m0[91u].z, fma(_1830, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1829));
    float _1873 = _1135 * 0.5;
    float _1874 = _1136 * 0.5;
    float _1875 = _1137 * 0.5;
    float _1876 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1807, _1810, _1813, _1816));
    float _1879 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1806, _1809, _1812, _1815));
    float _1882 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1805, _1808, _1811, _1814));
    float _1916;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1889 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1496, _1500, _1503, _1506));
        float _1893 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1498, _1501, _1504, _1507));
        float _1897 = dot(vec4(_1873, _1874, _1875, 1.0), vec4(_1499, _1502, _1505, _1508));
        float _1904 = dot(vec4(cbModelParam._m0[39u]), vec4(_1873, _1874, _1875, 1.0));
        _1916 = dot(vec3(isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1904) ? 0.0 : (isnan(0.0) ? _1904 : max(0.0, _1904))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1916 = 1.0;
    }
    float _1927;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1918 = dot(vec4(cbModelParam._m0[40u]), vec4(_1873, _1874, _1875, 1.0));
        _1927 = dot(vec3(isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1918) ? 0.0 : (isnan(0.0) ? _1918 : max(0.0, _1918))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1927 = 1.0;
    }
    float _1931 = (_1927 * cbModelParam._m0[1u].x) + (_1916 * (1.0 - cbModelParam._m0[1u].x));
    float _1941 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1032);
    float _1942 = isnan(_1941) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1941 : min(cbModelParam._m0[25u].z, _1941));
    float _2022;
    float _2024;
    float _2026;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1989 = fma(_1196, cbModelParam._m0[13u].z, fma(_1192, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1188)) + cbModelParam._m0[13u].w;
        float _1993 = fma(_1196, cbModelParam._m0[14u].z, fma(_1192, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1188)) + cbModelParam._m0[14u].w;
        float _1997 = fma(_1196, cbModelParam._m0[15u].z, fma(_1192, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1188)) + cbModelParam._m0[15u].w;
        float _2000 = fma(_1137, cbModelParam._m0[13u].z, fma(_1136, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1135));
        float _2003 = fma(_1137, cbModelParam._m0[14u].z, fma(_1136, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1135));
        float _2006 = fma(_1137, cbModelParam._m0[15u].z, fma(_1136, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1135));
        float _2034;
        if (_2000 > 0.0)
        {
            _2034 = abs((1.0 - _1989) / _2000);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1989 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _2034 = frontier_phi_54_52_ladder;
        }
        float _2403;
        if (_2003 > 0.0)
        {
            _2403 = abs((1.0 - _1993) / _2003);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1993 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2403 = frontier_phi_63_59_ladder;
        }
        float _2737;
        if (_2006 > 0.0)
        {
            _2737 = abs((1.0 - _1997) / _2006);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1997 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2737 = frontier_phi_77_70_ladder;
        }
        float _2739 = isnan(_2403) ? _2034 : (isnan(_2034) ? _2403 : min(_2034, _2403));
        float _2740 = isnan(_2737) ? _2739 : (isnan(_2739) ? _2737 : min(_2739, _2737));
        float _2744 = (_2740 * _2000) + _1989;
        float _2745 = (_2740 * _2003) + _1993;
        float _2746 = (_2740 * _2006) + _1997;
        float _2747 = _2740 * 9.9999997473787516355514526367188e-05;
        float _2748 = (-1.0) - _2747;
        float _2750 = _2747 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2746 > _2750) || ((_2746 < _2748) || ((_2745 > _2750) || ((_2745 < _2748) || ((_2744 < _2748) || (_2744 > _2750))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2746, cbModelParam._m0[9u].z, fma(_2745, cbModelParam._m0[9u].y, _2744 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2746, cbModelParam._m0[10u].z, fma(_2745, cbModelParam._m0[10u].y, _2744 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2746, cbModelParam._m0[11u].z, fma(_2745, cbModelParam._m0[11u].y, _2744 * cbModelParam._m0[11u].x))), _1942);
            frontier_phi_53_77_ladder = _2872.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2872.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2872.z * cbModelParam._m0[1u].y;
        }
        _2022 = frontier_phi_53_77_ladder;
        _2024 = frontier_phi_53_77_ladder_1;
        _2026 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _2010 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1135, _1136, _1137), _1942);
        _2022 = _2010.x * cbModelParam._m0[1u].y;
        _2024 = _2010.y * cbModelParam._m0[1u].y;
        _2026 = _2010.z * cbModelParam._m0[1u].y;
    }
    float _2030 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1032);
    float _2031 = isnan(_2030) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2030 : min(cbModelParam._m0[25u].w, _2030));
    float _2119;
    float _2121;
    float _2123;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2083 = fma(_1196, cbModelParam._m0[21u].z, fma(_1192, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1188)) + cbModelParam._m0[21u].w;
        float _2087 = fma(_1196, cbModelParam._m0[22u].z, fma(_1192, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1188)) + cbModelParam._m0[22u].w;
        float _2091 = fma(_1196, cbModelParam._m0[23u].z, fma(_1192, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1188)) + cbModelParam._m0[23u].w;
        float _2094 = fma(_1137, cbModelParam._m0[21u].z, fma(_1136, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1135));
        float _2097 = fma(_1137, cbModelParam._m0[22u].z, fma(_1136, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1135));
        float _2100 = fma(_1137, cbModelParam._m0[23u].z, fma(_1136, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1135));
        float _2408;
        if (_2094 > 0.0)
        {
            _2408 = abs((1.0 - _2083) / _2094);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_2083 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2408 = frontier_phi_65_61_ladder;
        }
        float _2763;
        if (_2097 > 0.0)
        {
            _2763 = abs((1.0 - _2087) / _2097);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_2087 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2763 = frontier_phi_79_72_ladder;
        }
        float _2932;
        if (_2100 > 0.0)
        {
            _2932 = abs((1.0 - _2091) / _2100);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_2091 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2932 = frontier_phi_93_88_ladder;
        }
        float _2934 = isnan(_2763) ? _2408 : (isnan(_2408) ? _2763 : min(_2408, _2763));
        float _2935 = isnan(_2932) ? _2934 : (isnan(_2934) ? _2932 : min(_2934, _2932));
        float _2939 = (_2935 * _2094) + _2083;
        float _2940 = (_2935 * _2097) + _2087;
        float _2941 = (_2935 * _2100) + _2091;
        float _2942 = _2935 * 9.9999997473787516355514526367188e-05;
        float _2943 = (-1.0) - _2942;
        float _2945 = _2942 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2941 > _2945) || ((_2941 < _2943) || ((_2940 > _2945) || ((_2940 < _2943) || ((_2939 < _2943) || (_2939 > _2945))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3174 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2941, cbModelParam._m0[17u].z, fma(_2940, cbModelParam._m0[17u].y, _2939 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2941, cbModelParam._m0[18u].z, fma(_2940, cbModelParam._m0[18u].y, _2939 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2941, cbModelParam._m0[19u].z, fma(_2940, cbModelParam._m0[19u].y, _2939 * cbModelParam._m0[19u].x))), _2031);
            frontier_phi_62_93_ladder = _3174.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _3174.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _3174.x * cbModelParam._m0[1u].z;
        }
        _2119 = frontier_phi_62_93_ladder_2;
        _2121 = frontier_phi_62_93_ladder_1;
        _2123 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _2103 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1135, _1136, _1137), _2031);
        _2119 = _2103.x * cbModelParam._m0[1u].z;
        _2121 = _2103.y * cbModelParam._m0[1u].z;
        _2123 = _2103.z * cbModelParam._m0[1u].z;
    }
    float _2135 = ((((1.0 - _1156) * ((_1143 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1156 * _1143)) * _1127;
    float _2136 = _2135 * ((cbModelParam._m0[1u].w * (_2119 - _2022)) + _2022);
    float _2137 = _2135 * ((cbModelParam._m0[1u].w * (_2121 - _2024)) + _2024);
    float _2138 = _2135 * ((cbModelParam._m0[1u].w * (_2123 - _2026)) + _2026);
    float _2141 = fma(_2138, cbSceneParam._m0[89u].z, fma(_2137, cbSceneParam._m0[89u].y, _2136 * cbSceneParam._m0[89u].x));
    float _2144 = fma(_2138, cbSceneParam._m0[90u].z, fma(_2137, cbSceneParam._m0[90u].y, _2136 * cbSceneParam._m0[90u].x));
    float _2147 = fma(_2138, cbSceneParam._m0[91u].z, fma(_2137, cbSceneParam._m0[91u].y, _2136 * cbSceneParam._m0[91u].x));
    vec4 _2155 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1064, _1065));
    float _2157 = _2155.w;
    float _2169 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2157);
    float _2170 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2157);
    float _2171 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2157);
    uvec4 _2175 = floatBitsToUint(cbInstanceData._m0[_1102 + 5u]);
    uint _2177 = _2175.x * 14u;
    uint _2178 = _2177 + 13u;
    float _2183 = _1127 + (-1.0);
    float _2186 = (cbLight._m0[_2178].x * _2183) + 1.0;
    float _2187 = (cbLight._m0[_2178].y * _2183) + 1.0;
    uint _2188 = _2177 + 5u;
    float _2194 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
    uint _2198 = _2177 + 4u;
    float _2207 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
    uint _2211 = _2177 | 1u;
    float _2222 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_1029, _1030, _1031));
    float _2225 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_1029, _1030, _1031));
    float _4197 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _4208 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2230 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * 0.3183098733425140380859375;
    float _2232 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _2239 = ((cbLight._m0[_2188].x * _2194) * _2232) + (((cbLight._m0[_2198].x * _2169) * _2207) * _2230);
    float _2240 = ((_2194 * cbLight._m0[_2188].y) * _2232) + (((cbLight._m0[_2198].y * _2170) * _2207) * _2230);
    float _2241 = ((_2194 * cbLight._m0[_2188].z) * _2232) + (((cbLight._m0[_2198].z * _2171) * _2207) * _2230);
    uint _2243 = _2177 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _1032) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_2177].x + _1056;
    float _2259 = cbLight._m0[_2177].y + _1057;
    float _2260 = cbLight._m0[_2177].z + _1058;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_1029, _1030, _1031), vec3(cbLight._m0[_2177].xyz));
    float _4219 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _4230 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _2272 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2273 = dot(vec3(_1029, _1030, _1031), vec3(_2265, _2266, _2267));
    float _4241 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2265, _2266, _2267));
    float _4252 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2296 = (exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2297 = 1.0 - _2257;
    float _2308 = (0.5 / (((_2272 * ((_2271 * _2297) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2297) + _2257) * _2271))) * _2271;
    float _4263 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2310 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2324 = _2177 + 9u;
    float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _1032) * 0.949999988079071044921875);
    float _2336 = _2335 * _2335;
    float _2337 = cbLight._m0[_2211].x + _1056;
    float _2338 = cbLight._m0[_2211].y + _1057;
    float _2339 = cbLight._m0[_2211].z + _1058;
    float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
    float _2344 = _2343 * _2337;
    float _2345 = _2343 * _2338;
    float _2346 = _2343 * _2339;
    float _2347 = dot(vec3(_1029, _1030, _1031), vec3(cbLight._m0[_2211].xyz));
    float _4274 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2351 = dot(vec3(_1029, _1030, _1031), vec3(_2344, _2345, _2346));
    float _4285 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2355 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2344, _2345, _2346));
    float _4296 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2359 = _2336 * _2336;
    float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
    float _2372 = (exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2373 = 1.0 - _2336;
    float _2383 = (0.5 / (((_2272 * ((_2350 * _2373) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2373) + _2336) * _2350))) * _2350;
    float _4307 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
    float _2395 = (((_2372 * cbLight._m0[_2324].x) * _2385) * _2194) + ((((cbLight._m0[_2243].x * _2169) * _2296) * _2310) * _2207);
    float _2396 = (((_2372 * cbLight._m0[_2324].y) * _2385) * _2194) + ((((cbLight._m0[_2243].y * _2170) * _2296) * _2310) * _2207);
    float _2397 = (((_2372 * cbLight._m0[_2324].z) * _2385) * _2194) + ((((cbLight._m0[_2243].z * _2171) * _2296) * _2310) * _2207);
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_2175.y == 0u)
    {
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2452;
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2452;
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2452;
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.x;
        uint _2479 = uint((float(_2467.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1065) / _2468))) + floor(float(uint(cbSceneParam._m0[85u].x * _1064) / _2468)));
        float _2489 = (log2(_2455 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2490 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        uint _2493 = uint(isnan(14.0) ? _2490 : (isnan(_2490) ? 14.0 : min(_2490, 14.0)));
        uvec4 _2498 = texelFetch(g_lightClusterGridBuffer, int(((_2493 << 2u) + (_2479 << 6u)) >> 2u));
        uint _2499 = _2498.x;
        uint _2500 = _2467.z;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        if (((((1u << ((_2500 >> 4u) & 15u)) + 4294967295u) & _2499) == 0u) || ((_2500 & 240u) == 0u))
        {
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
        }
        else
        {
            float _2617;
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            uint _2806 = 0u;
            uint _2815;
            bool _2816;
            for (;;)
            {
                _2815 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2806 << 2u)) >> 2u)).x;
                _2816 = _2815 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2816)
                {
                    frontier_phi_90_pred = _2805;
                    frontier_phi_90_pred_1 = _2800;
                    frontier_phi_90_pred_2 = _2801;
                    frontier_phi_90_pred_3 = _2802;
                    frontier_phi_90_pred_4 = _2803;
                    frontier_phi_90_pred_5 = _2804;
                }
                else
                {
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    uint _2981;
                    _2975 = _2800;
                    _2976 = _2801;
                    _2977 = _2802;
                    _2978 = _2803;
                    _2979 = _2804;
                    _2980 = _2805;
                    _2981 = _2815;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    for (;;)
                    {
                        uint _2985 = uint(findLSB(_2981)) + (_2806 << 5u);
                        uint _2982 = (_2981 + 4294967295u) & _2981;
                        uint _2987 = _2985 * 48u;
                        vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        uint _3007 = (_2985 * 48u) + 4u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3026 = (_2985 * 48u) + 8u;
                        vec3 _3037 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x));
                        float _3041 = _3001.x - _2453;
                        float _3042 = _3001.y - _2454;
                        float _3043 = _3001.z - _2455;
                        float _3044 = dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043));
                        float _3047 = inversesqrt(_3044);
                        float _3048 = _3047 * _3041;
                        float _3049 = _3047 * _3042;
                        float _3050 = _3047 * _3043;
                        float _3051 = dot(vec3(_1083, _1086, _1089), vec3(_3048, _3049, _3050));
                        float _3056 = 1.0 - (_3044 * _3001.w);
                        float _4328 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3057 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3058 = sqrt(_3044) * _3020.w;
                        float _3061 = 1.39999997615814208984375 / (_3058 + 1.39999997615814208984375);
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _3051) + _3062;
                        float _3068 = _3058 * _3058;
                        float _3072 = ((isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))) * _3057) / ((_3068 * 0.699999988079071044921875) + 1.0);
                        float _3076 = (-0.0) - _2453;
                        float _3077 = (-0.0) - _2454;
                        float _3078 = (-0.0) - _2455;
                        float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                        float _3083 = _3082 * _3076;
                        float _3084 = _3082 * _3077;
                        float _3085 = _3082 * _3078;
                        float _3093 = exp2(log2(1.0 / ((_3068 * 3.5) + 5.0)) * 0.25);
                        float _3094 = 1.0 - _1143;
                        float _3101 = sqrt(1.0 - ((1.0 - (_3094 * _3094)) * (1.0 - (_3093 * _3093))));
                        float _3102 = _3101 * _3101;
                        float _3103 = _3102 * _3102;
                        float _3104 = _3083 + _3048;
                        float _3105 = _3084 + _3049;
                        float _3106 = _3085 + _3050;
                        float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
                        float _3114 = dot(vec3(_1083, _1086, _1089), vec3(_3083, _3084, _3085));
                        float _4344 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3118 = dot(vec3(_1083, _1086, _1089), vec3(_3110 * _3104, _3110 * _3105, _3110 * _3106));
                        float _4355 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3125 = ((_3121 * _3121) * (_3103 + (-1.0))) + 1.0;
                        float _3126 = _3061 * _3102;
                        float _3127 = _3126 * _3126;
                        float _3130 = ((1.0 - _3127) * _3051) + _3127;
                        float _4366 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3132 = 1.0 - _3102;
                        float _3142 = (0.5 / (((_3131 * ((_3117 * _3132) + _3102)) + 9.9999999392252902907785028219223e-09) + (((_3131 * _3132) + _3102) * _3117))) * _3131;
                        float _4377 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3153 = (((_3103 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3125 * _3125) * ((_3068 * 2.1991131305694580078125) + 3.141590118408203125))) * _3057;
                        _2884 = (_3072 * _3020.x) + _2978;
                        _2885 = (_3072 * _3020.y) + _2979;
                        _2886 = (_3072 * _3020.z) + _2980;
                        _2881 = (_3153 * _3037.x) + _2975;
                        _2882 = (_3153 * _3037.y) + _2976;
                        _2883 = (_3153 * _3037.z) + _2977;
                        if (_2982 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2975 = _2881;
                            _2976 = _2882;
                            _2977 = _2883;
                            _2978 = _2884;
                            _2979 = _2885;
                            _2980 = _2886;
                            _2981 = _2982;
                        }
                    }
                    frontier_phi_90_pred = _2886;
                    frontier_phi_90_pred_1 = _2881;
                    frontier_phi_90_pred_2 = _2882;
                    frontier_phi_90_pred_3 = _2883;
                    frontier_phi_90_pred_4 = _2884;
                    frontier_phi_90_pred_5 = _2885;
                }
                _2627 = frontier_phi_90_pred;
                _2617 = frontier_phi_90_pred_1;
                _2619 = frontier_phi_90_pred_2;
                _2621 = frontier_phi_90_pred_3;
                _2623 = frontier_phi_90_pred_4;
                _2625 = frontier_phi_90_pred_5;
                uint _2807 = _2806 + 1u;
                if (_2807 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2800 = _2617;
                    _2801 = _2619;
                    _2802 = _2621;
                    _2803 = _2623;
                    _2804 = _2625;
                    _2805 = _2627;
                    _2806 = _2807;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
        }
        uvec4 _2630 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2631 = _2630.z;
        uint _2633 = (_2631 >> 8u) & 15u;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        if (((4294967295u << _2633) & _2499) == 0u)
        {
            _2768 = _2616;
            _2770 = _2618;
            _2772 = _2620;
            _2774 = _2622;
            _2776 = _2624;
            _2778 = _2626;
        }
        else
        {
            float _2793 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
            float _2794 = _2793 * _2453;
            float _2795 = _2793 * _2454;
            float _2796 = _2793 * _2455;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2633 < ((_2631 >> 12u) & 15u))
            {
                float _2769;
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2958 = _2616;
                float _2959 = _2618;
                float _2960 = _2620;
                float _2961 = _2622;
                float _2962 = _2624;
                float _2963 = _2626;
                uint _2964 = _2633;
                uint _2973;
                bool _2974;
                for (;;)
                {
                    _2973 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                    _2974 = _2973 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2974)
                    {
                        frontier_phi_99_pred = _2961;
                        frontier_phi_99_pred_1 = _2960;
                        frontier_phi_99_pred_2 = _2959;
                        frontier_phi_99_pred_3 = _2958;
                        frontier_phi_99_pred_4 = _2963;
                        frontier_phi_99_pred_5 = _2962;
                    }
                    else
                    {
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3192 = _2958;
                        float _3193 = _2959;
                        float _3194 = _2960;
                        float _3195 = _2961;
                        float _3196 = _2962;
                        float _3197 = _2963;
                        uint _3198 = _2973;
                        uint _3199;
                        vec4 _3224;
                        float _3225;
                        vec4 _3240;
                        vec3 _3252;
                        vec4 _3267;
                        vec4 _3282;
                        float _3328;
                        bool _3329;
                        for (;;)
                        {
                            uint _3209 = ((_2964 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3198));
                            _3199 = (_3198 + 4294967295u) & _3198;
                            uint _3211 = _3209 * 40u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            _3225 = _3224.w;
                            uint _3227 = (_3209 * 40u) + 4u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3209 * 40u) + 8u;
                            _3252 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x));
                            uint _3254 = (_3209 * 40u) + 16u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3269 = (_3209 * 40u) + 20u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3209 * 40u) + 24u;
                            vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3303 = (_3209 * 40u) + 28u;
                            vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            _3328 = fma(_2455, _3316.z, fma(_2454, _3316.y, _3316.x * _2453)) + _3316.w;
                            _3329 = !((fma(_2455, _3297.z, fma(_2454, _3297.y, _3297.x * _2453)) + _3297.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3329)
                            {
                                float _3356 = _3224.x - _2453;
                                float _3357 = _3224.y - _2454;
                                float _3358 = _3224.z - _2455;
                                float _3359 = dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358));
                                float _3362 = inversesqrt(_3359);
                                float _3363 = _3362 * _3356;
                                float _3364 = _3362 * _3357;
                                float _3365 = _3362 * _3358;
                                float _3369 = 1.0 - (_3359 / (_3225 * _3225));
                                float _4388 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3374 = sqrt(_3359) * _3240.w;
                                float _3376 = 1.39999997615814208984375 / (_3374 + 1.39999997615814208984375);
                                float _3377 = _3376 * _3376;
                                float _3380 = ((1.0 - _3377) * dot(vec3(_3363, _3364, _3365), vec3(_1083, _1086, _1089))) + _3377;
                                float _3383 = _3374 * _3374;
                                float _3387 = (fma(_2455, _3267.z, fma(_2454, _3267.y, _3267.x * _2453)) + _3267.w) / _3328;
                                float _3388 = (fma(_2455, _3282.z, fma(_2454, _3282.y, _3282.x * _2453)) + _3282.w) / _3328;
                                float _3392 = 1.0 - dot(vec2(_3387, _3388), vec2(_3387, _3388));
                                float _4404 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3394 = _3393 * (((isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0))) * _3370) / ((_3383 * 0.699999988079071044921875) + 1.0));
                                float _3406 = exp2(log2(1.0 / ((_3383 * 3.5) + 5.0)) * 0.25);
                                float _3407 = 1.0 - _1143;
                                float _3414 = sqrt(1.0 - ((1.0 - (_3407 * _3407)) * (1.0 - (_3406 * _3406))));
                                float _3415 = _3414 * _3414;
                                float _3416 = _3415 * _3415;
                                float _3417 = _3363 - _2794;
                                float _3418 = _3364 - _2795;
                                float _3419 = _3365 - _2796;
                                float _3423 = inversesqrt(dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419)));
                                float _3427 = dot(vec3(_1083, _1086, _1089), vec3((-0.0) - _2794, (-0.0) - _2795, (-0.0) - _2796));
                                float _4415 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3431 = dot(vec3(_1083, _1086, _1089), vec3(_3423 * _3417, _3423 * _3418, _3423 * _3419));
                                float _4426 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3434 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3438 = ((_3434 * _3434) * (_3416 + (-1.0))) + 1.0;
                                float _3439 = _3376 * _3415;
                                float _3440 = _3439 * _3439;
                                float _3446 = ((1.0 - _3440) * dot(vec3(_1083, _1086, _1089), vec3(_3363, _3364, _3365))) + _3440;
                                float _4437 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3448 = 1.0 - _3415;
                                float _3458 = (0.5 / (((_3447 * ((_3430 * _3448) + _3415)) + 9.9999999392252902907785028219223e-09) + (((_3447 * _3448) + _3415) * _3430))) * _3447;
                                float _4448 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3468 = (_3393 * _3370) * (((_3416 * 3.1415927410125732421875) * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) / ((_3438 * _3438) * ((_3383 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3394 * _3240.z;
                                frontier_phi_105_pred_1 = _3468 * _3252.x;
                                frontier_phi_105_pred_2 = _3468 * _3252.y;
                                frontier_phi_105_pred_3 = _3468 * _3252.z;
                                frontier_phi_105_pred_4 = _3394 * _3240.x;
                                frontier_phi_105_pred_5 = _3394 * _3240.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3477 = frontier_phi_105_pred;
                            _3472 = frontier_phi_105_pred_1;
                            _3473 = frontier_phi_105_pred_2;
                            _3474 = frontier_phi_105_pred_3;
                            _3475 = frontier_phi_105_pred_4;
                            _3476 = frontier_phi_105_pred_5;
                            _3182 = _3475 + _3195;
                            _3183 = _3476 + _3196;
                            _3184 = _3477 + _3197;
                            _3179 = _3472 + _3192;
                            _3180 = _3473 + _3193;
                            _3181 = _3474 + _3194;
                            if (_3199 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3199;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _3182;
                        frontier_phi_99_pred_1 = _3181;
                        frontier_phi_99_pred_2 = _3180;
                        frontier_phi_99_pred_3 = _3179;
                        frontier_phi_99_pred_4 = _3184;
                        frontier_phi_99_pred_5 = _3183;
                    }
                    _2775 = frontier_phi_99_pred;
                    _2773 = frontier_phi_99_pred_1;
                    _2771 = frontier_phi_99_pred_2;
                    _2769 = frontier_phi_99_pred_3;
                    _2779 = frontier_phi_99_pred_4;
                    _2777 = frontier_phi_99_pred_5;
                    uint _2965 = _2964 + 1u;
                    if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2958 = _2769;
                        _2959 = _2771;
                        _2960 = _2773;
                        _2961 = _2775;
                        _2962 = _2777;
                        _2963 = _2779;
                        _2964 = _2965;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2779;
                frontier_phi_81_82_ladder_1 = _2775;
                frontier_phi_81_82_ladder_2 = _2773;
                frontier_phi_81_82_ladder_3 = _2771;
                frontier_phi_81_82_ladder_4 = _2769;
                frontier_phi_81_82_ladder_5 = _2777;
            }
            else
            {
                frontier_phi_81_82_ladder = _2626;
                frontier_phi_81_82_ladder_1 = _2622;
                frontier_phi_81_82_ladder_2 = _2620;
                frontier_phi_81_82_ladder_3 = _2618;
                frontier_phi_81_82_ladder_4 = _2616;
                frontier_phi_81_82_ladder_5 = _2624;
            }
            _2768 = frontier_phi_81_82_ladder_4;
            _2770 = frontier_phi_81_82_ladder_3;
            _2772 = frontier_phi_81_82_ladder_2;
            _2774 = frontier_phi_81_82_ladder_1;
            _2776 = frontier_phi_81_82_ladder_5;
            _2778 = frontier_phi_81_82_ladder;
        }
        float _2783 = isnan(1.0) ? _1127 : (isnan(_1127) ? 1.0 : min(_1127, 1.0));
        _2512 = (_2783 * _2774) + _2239;
        _2514 = (_2783 * _2776) + _2240;
        _2516 = (_2783 * _2778) + _2241;
        _2518 = ((_2768 * 0.039999999105930328369140625) * _2783) + _2395;
        _2520 = ((_2770 * 0.039999999105930328369140625) * _2783) + _2396;
        _2522 = ((_2772 * 0.039999999105930328369140625) * _2783) + _2397;
    }
    else
    {
        _2512 = _2239;
        _2514 = _2240;
        _2516 = _2241;
        _2518 = _2395;
        _2520 = _2396;
        _2522 = _2397;
    }
    uint _2528 = _1103 + uint(cbMatDynParam._m0[0u].w);
    float _2534 = (cbSceneParam._m0[72u].y * ((_996 * ((_987 - _949) - (_987 * _960))) + _949)) * cbInstanceData._m0[_2528].x;
    float _2535 = (cbSceneParam._m0[72u].y * ((_996 * ((_988 - _950) - (_988 * _960))) + _950)) * cbInstanceData._m0[_2528].y;
    float _2536 = (((_996 * ((_989 - _951) - (_989 * _960))) + _951) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2528].z;
    float _4464 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _4475 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _4486 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _2553 = (((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2512 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1127))) + ((_2518 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1931)) * cbPerFrame._m0[3u].x)) + _2534;
    float _2555 = (_2535 + ((_2520 + ((isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0))) * _1931)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2514 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1127)));
    float _2557 = (_2536 + ((_2522 + ((isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0))) * _1931)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2516 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1127)));
    float _4512 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2570 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    uint _2571 = _1102 + 6u;
    float _2579 = _1064 / cbSceneParam._m0[86u].x;
    float _2580 = _1065 / cbSceneParam._m0[86u].y;
    vec4 _2594 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2579, _2580, (log2((isnan(cbSceneParam._m0[77u].w) ? _1051 : (isnan(_1051) ? cbSceneParam._m0[77u].w : min(_1051, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2596 = _2594.x;
    float _2597 = _2594.y;
    float _2598 = _2594.z;
    float _2599 = _2594.w;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    if (_1051 > cbSceneParam._m0[78u].w)
    {
        float _2641 = isnan(_1051) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1051 : min(cbSceneParam._m0[80u].w, _1051));
        float _2642 = _2641 / _1051;
        float _2653 = _2642 * _286;
        float _2654 = _287 * _2642;
        float _2655 = (-0.0) - _2654;
        float _2656 = _2642 * _288;
        float _2658 = (cbSceneParam._m0[77u].w * _2655) / _2641;
        float _2659 = _2658 + cbSceneParam._m0[79u].w;
        float _2660 = cbSceneParam._m0[79u].w - _2654;
        float _2666 = sqrt(((_2653 * _2653) + (_2654 * _2654)) + (_2656 * _2656));
        float _2669 = (1.0 - (cbSceneParam._m0[77u].w / _2641)) * _2666;
        float _2675 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2677 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2894;
        if (abs((_2655 - _2658) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2894 = ((((_2659 > 0.0) ? exp2(_2675 * _2659) : (2.0 - exp2(_2677 * _2659))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2669;
        }
        else
        {
            float _2829 = 1.0 / cbSceneParam._m0[80u].x;
            float _2830 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : max(_2659, _2660));
            float _2831 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : min(_2659, _2660));
            float _2840 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : min(_2830, 0.0));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            _2894 = ((abs(_2666 / _2655) * cbSceneParam._m0[80u].y) * ((((_2840 - _2841) * 2.0) - ((exp2(_2675 * (isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0)))) - exp2(_2675 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0))))) * _2829)) - ((exp2(_2677 * _2840) - exp2(_2677 * _2841)) * _2829))) + (_2669 * cbSceneParam._m0[80u].z);
        }
        vec4 _2896 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2579, _2580, 1.0), 0.0);
        float _2905 = exp2((_2894 * (-1.44269502162933349609375)) * (1.0 - _2896.w));
        float _2906 = log2(_2905);
        float _2922 = log2(_2599);
        _2679 = (exp2(_2922 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].x)) * _2896.x) / cbSceneParam._m0[78u].x)) + _2596;
        _2681 = (exp2(_2922 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].y)) * _2896.y) / cbSceneParam._m0[78u].y)) + _2597;
        _2683 = (exp2(_2922 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].z)) * _2896.z) / cbSceneParam._m0[78u].z)) + _2598;
        _2685 = _2905 * _2599;
    }
    else
    {
        _2679 = _2596;
        _2681 = _2597;
        _2683 = _2598;
        _2685 = _2599;
    }
    float _2696 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2697 = _2696 == 3.0;
    float _2698 = log2(_2685);
    float _2702 = exp2(_2698 * cbSceneParam._m0[78u].x);
    float _2703 = exp2(_2698 * cbSceneParam._m0[78u].y);
    float _2704 = exp2(_2698 * cbSceneParam._m0[78u].z);
    float _2705 = _2702 * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0)));
    float _2706 = _2703 * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0)));
    float _2707 = _2704 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)));
    float _2716 = (_2696 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2716 * (_2697 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2679)));
    SV_Target.y = _2716 * (_2697 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2681)));
    SV_Target.z = _2716 * (_2697 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2683)));
    SV_Target.w = cbInstanceData._m0[_2571].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2534) * _2570) * _2702) * _2716;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2535) * _2570) * _2703) * _2716;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2536) * _2570) * _2704) * _2716;
    SV_Target_1.w = cbInstanceData._m0[_2571].w;
}


